// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 7936;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "coap.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "__Z11coap_malloct", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv", "_do_read"];
var debug_table_iiiii = ["0", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv", "0", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_9", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_25", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_26", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_24", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_1", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_48", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_78", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_79", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_77", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_40", "_sn_coap_parser__async_cb", "_sn_coap_parser__async_cb_84", "_sn_coap_parser__async_cb_85", "_sn_coap_parser__async_cb_86", "_sn_coap_parser__async_cb_92", "_sn_coap_parser__async_cb_87", "_sn_coap_parser__async_cb_91", "_sn_coap_parser__async_cb_90", "_sn_coap_parser__async_cb_89", "_sn_coap_parser__async_cb_88", "_sn_coap_parser_options_parse_multiple_options__async_cb", "_sn_coap_protocol_init__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_18", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_8", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_46", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_83", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_66", "__ZN6Socket4openEP12NetworkStack__async_cb_67", "__ZN6Socket4openEP12NetworkStack__async_cb_68", "__ZN6Socket4openEP12NetworkStack__async_cb_69", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_70", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_47", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_75", "__ZN6Socket5closeEv__async_cb_76", "__ZN9UDPSocketD2Ev__async_cb_21", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_20", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_6", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_38", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_35", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_30", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_37", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_36", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_34", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_29", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_33", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_28", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_32", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_27", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_31", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_65", "_mbed_die__async_cb_64", "_mbed_die__async_cb_63", "_mbed_die__async_cb_62", "_mbed_die__async_cb_61", "_mbed_die__async_cb_60", "_mbed_die__async_cb_59", "_mbed_die__async_cb_58", "_mbed_die__async_cb_57", "_mbed_die__async_cb_56", "_mbed_die__async_cb_55", "_mbed_die__async_cb_54", "_mbed_die__async_cb_53", "_mbed_die__async_cb_52", "_mbed_die__async_cb_51", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_printf__async_cb_45", "_serial_putc__async_cb_5", "_serial_putc__async_cb", "_invoke_ticker__async_cb_7", "_invoke_ticker__async_cb", "_wait__async_cb", "_wait_ms__async_cb", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb", "__Z17recv_coap_messagev__async_cb_72", "__Z17recv_coap_messagev__async_cb_73", "__Z17recv_coap_messagev__async_cb", "_main__async_cb_13", "_main__async_cb_12", "_main__async_cb", "_main__async_cb_15", "__Z9coap_freePv", "_main__async_cb_16", "_main__async_cb_14", "_main__async_cb_10", "_main__async_cb_11", "_main__async_cb_17", "_putc__async_cb_19", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_81", "_fflush__async_cb_80", "_fflush__async_cb_82", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_71", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_74", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_22", "_abort_message__async_cb", "_abort_message__async_cb_39", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_2", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_3", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_49", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_4", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_44", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_43", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_42", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_41", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_23", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_llvm_trap": _llvm_trap, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _llvm_trap=env._llvm_trap;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1576] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 6344 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1576] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1580] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1578] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 6344 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1576] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1580] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1581] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 6344 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1576] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1580] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1578] = $84; //@line 238
     HEAP32[1581] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1577] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[6608 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1580] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 6608 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1577] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1580] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1580] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1580] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1581] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 6344 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1576] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1580] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1578] = $$0193$lcssa$i; //@line 541
      HEAP32[1581] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1577] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[6608 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[6608 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1578] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1580] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 6608 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1577] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1580] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1580] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1580] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 6344 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1576] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1576] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1580] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 6608 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1577] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1580] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1580] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1578] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1581] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1581] = $517; //@line 1122
   HEAP32[1578] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1578] = 0; //@line 1133
   HEAP32[1581] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1579] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1579] = $532; //@line 1152
  $533 = HEAP32[1582] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1582] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[1694] | 0)) {
  HEAP32[1696] = 4096; //@line 1169
  HEAP32[1695] = 4096; //@line 1170
  HEAP32[1697] = -1; //@line 1171
  HEAP32[1698] = -1; //@line 1172
  HEAP32[1699] = 0; //@line 1173
  HEAP32[1687] = 0; //@line 1174
  HEAP32[1694] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[1696] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[1686] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[1684] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[1687] & 4)) {
   $561 = HEAP32[1582] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 6752; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[1695] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[1684] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[1686] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[1696] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[1687] = HEAP32[1687] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[1684] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[1684] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[1685] | 0) >>> 0) {
   HEAP32[1685] = $633; //@line 1407
  }
  $636 = HEAP32[1582] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1580] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1580] = $$748$i; //@line 1418
    }
    HEAP32[1688] = $$748$i; //@line 1420
    HEAP32[1689] = $$723947$i; //@line 1421
    HEAP32[1691] = 0; //@line 1422
    HEAP32[1585] = HEAP32[1694]; //@line 1424
    HEAP32[1584] = -1; //@line 1425
    HEAP32[1589] = 6344; //@line 1426
    HEAP32[1588] = 6344; //@line 1427
    HEAP32[1591] = 6352; //@line 1428
    HEAP32[1590] = 6352; //@line 1429
    HEAP32[1593] = 6360; //@line 1430
    HEAP32[1592] = 6360; //@line 1431
    HEAP32[1595] = 6368; //@line 1432
    HEAP32[1594] = 6368; //@line 1433
    HEAP32[1597] = 6376; //@line 1434
    HEAP32[1596] = 6376; //@line 1435
    HEAP32[1599] = 6384; //@line 1436
    HEAP32[1598] = 6384; //@line 1437
    HEAP32[1601] = 6392; //@line 1438
    HEAP32[1600] = 6392; //@line 1439
    HEAP32[1603] = 6400; //@line 1440
    HEAP32[1602] = 6400; //@line 1441
    HEAP32[1605] = 6408; //@line 1442
    HEAP32[1604] = 6408; //@line 1443
    HEAP32[1607] = 6416; //@line 1444
    HEAP32[1606] = 6416; //@line 1445
    HEAP32[1609] = 6424; //@line 1446
    HEAP32[1608] = 6424; //@line 1447
    HEAP32[1611] = 6432; //@line 1448
    HEAP32[1610] = 6432; //@line 1449
    HEAP32[1613] = 6440; //@line 1450
    HEAP32[1612] = 6440; //@line 1451
    HEAP32[1615] = 6448; //@line 1452
    HEAP32[1614] = 6448; //@line 1453
    HEAP32[1617] = 6456; //@line 1454
    HEAP32[1616] = 6456; //@line 1455
    HEAP32[1619] = 6464; //@line 1456
    HEAP32[1618] = 6464; //@line 1457
    HEAP32[1621] = 6472; //@line 1458
    HEAP32[1620] = 6472; //@line 1459
    HEAP32[1623] = 6480; //@line 1460
    HEAP32[1622] = 6480; //@line 1461
    HEAP32[1625] = 6488; //@line 1462
    HEAP32[1624] = 6488; //@line 1463
    HEAP32[1627] = 6496; //@line 1464
    HEAP32[1626] = 6496; //@line 1465
    HEAP32[1629] = 6504; //@line 1466
    HEAP32[1628] = 6504; //@line 1467
    HEAP32[1631] = 6512; //@line 1468
    HEAP32[1630] = 6512; //@line 1469
    HEAP32[1633] = 6520; //@line 1470
    HEAP32[1632] = 6520; //@line 1471
    HEAP32[1635] = 6528; //@line 1472
    HEAP32[1634] = 6528; //@line 1473
    HEAP32[1637] = 6536; //@line 1474
    HEAP32[1636] = 6536; //@line 1475
    HEAP32[1639] = 6544; //@line 1476
    HEAP32[1638] = 6544; //@line 1477
    HEAP32[1641] = 6552; //@line 1478
    HEAP32[1640] = 6552; //@line 1479
    HEAP32[1643] = 6560; //@line 1480
    HEAP32[1642] = 6560; //@line 1481
    HEAP32[1645] = 6568; //@line 1482
    HEAP32[1644] = 6568; //@line 1483
    HEAP32[1647] = 6576; //@line 1484
    HEAP32[1646] = 6576; //@line 1485
    HEAP32[1649] = 6584; //@line 1486
    HEAP32[1648] = 6584; //@line 1487
    HEAP32[1651] = 6592; //@line 1488
    HEAP32[1650] = 6592; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1582] = $650; //@line 1500
    HEAP32[1579] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1583] = HEAP32[1698]; //@line 1509
   } else {
    $$024367$i = 6752; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1579] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1582] = $681; //@line 1554
       HEAP32[1579] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1583] = HEAP32[1698]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1580] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1580] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 6752; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 6752; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1579] | 0) + $723 | 0; //@line 1634
        HEAP32[1579] = $728; //@line 1635
        HEAP32[1582] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1581] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1578] | 0) + $723 | 0; //@line 1645
         HEAP32[1578] = $734; //@line 1646
         HEAP32[1581] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 6344 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1576] = HEAP32[1576] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 6608 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1577] = HEAP32[1577] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1580] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1580] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1580] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 6344 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1576] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1576] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1580] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 6608 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1577] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1577] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1580] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1580] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 6752; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1582] = $949; //@line 2120
    HEAP32[1579] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1583] = HEAP32[1698]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[1688]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[1689]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[1690]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[1691]; //@line 2132
    HEAP32[1688] = $$748$i; //@line 2133
    HEAP32[1689] = $$723947$i; //@line 2134
    HEAP32[1691] = 0; //@line 2135
    HEAP32[1690] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 6344 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1576] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1576] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1580] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 6608 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1577] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1577] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1580] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1580] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1579] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1579] = $1054; //@line 2327
   $1055 = HEAP32[1582] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1582] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function _sn_coap_parser__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $107 = 0, $110 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $142 = 0, $143 = 0, $148 = 0, $151 = 0, $154 = 0, $155 = 0, $160 = 0, $163 = 0, $167 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $199 = 0, $2 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $217 = 0, $220 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $272 = 0, $275 = 0, $276 = 0, $281 = 0, $284 = 0, $286 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $327 = 0, $33 = 0, $330 = 0, $331 = 0, $336 = 0, $339 = 0, $341 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $364 = 0, $367 = 0, $368 = 0, $373 = 0, $376 = 0, $380 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $396 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $405 = 0, $408 = 0, $412 = 0, $413 = 0, $418 = 0, $419 = 0, $42 = 0, $424 = 0, $427 = 0, $433 = 0, $434 = 0, $439 = 0, $440 = 0, $445 = 0, $448 = 0, $45 = 0, $452 = 0, $453 = 0, $463 = 0, $464 = 0, $466 = 0, $473 = 0, $474 = 0, $475 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $8 = 0, $90 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $160$looptemp = 0, $281$looptemp = 0, $336$looptemp = 0, $373$looptemp = 0, $389$looptemp = 0, $405$looptemp = 0, $424$looptemp = 0, $445$looptemp = 0, $148$looptemp = 0;
 sp = STACKTOP; //@line 780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 786
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 788
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 790
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 792
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 794
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 796
 if (!$AsyncRetVal) {
  $$0 = 0; //@line 799
  $473 = ___async_retval; //@line 800
  HEAP32[$473 >> 2] = $$0; //@line 801
  return;
 }
 dest = $AsyncRetVal; //@line 804
 stop = dest + 44 | 0; //@line 804
 do {
  HEAP32[dest >> 2] = 0; //@line 804
  dest = dest + 4 | 0; //@line 804
 } while ((dest | 0) < (stop | 0));
 $17 = $AsyncRetVal + 16 | 0; //@line 805
 HEAP32[$17 >> 2] = -1; //@line 806
 HEAP32[$12 >> 2] = HEAP8[$10 >> 0] & -64 & 255; //@line 810
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP8[$10 >> 0] & 48; //@line 815
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAPU8[$10 + 1 >> 0]; //@line 820
 $31 = HEAP8[$10 + 3 >> 0] | 0; //@line 823
 $33 = $AsyncRetVal + 20 | 0; //@line 825
 HEAP16[$33 >> 1] = $31 & 255; //@line 826
 HEAP16[$33 >> 1] = HEAPU8[$10 + 2 >> 0] << 8 | $31 & 255; //@line 833
 $40 = $10 + 4 | 0; //@line 834
 HEAP32[$2 >> 2] = $40; //@line 835
 $42 = HEAP8[$10 >> 0] & 15; //@line 837
 HEAP8[$AsyncRetVal >> 0] = $42; //@line 838
 L5 : do {
  if (!($42 << 24 >> 24)) {
   $63 = $40; //@line 842
   $64 = $8 & 65535; //@line 843
   $65 = $10; //@line 844
   $66 = $65 + $64 | 0; //@line 845
   $68 = $AsyncRetVal + 40 | 0; //@line 847
   $69 = $AsyncRetVal + 32 | 0; //@line 848
   $70 = $AsyncRetVal + 22 | 0; //@line 849
   $$0208$i = 0; //@line 850
   $$sink275$i = $66 - $63 | 0; //@line 850
   $474 = $63; //@line 850
   $73 = $40; //@line 850
   L7 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 98; //@line 855
     break;
    }
    $trunc277$i = HEAP8[$73 >> 0] | 0; //@line 858
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 98; //@line 861
     break;
    }
    $76 = $trunc277$i & 15; //@line 865
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 866
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$73 + 1 >> 0] | 0; //@line 878
      $$sink214$i = 13; //@line 878
      $$sink3$i = 1; //@line 878
      label = 15; //@line 879
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$73 + 1 >> 0] << 8) + 269 | 0; //@line 891
      $$sink214$i = HEAPU8[$73 + 2 >> 0] | 0; //@line 891
      $$sink3$i = 2; //@line 891
      label = 15; //@line 892
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 896
      $475 = $474; //@line 896
      $95 = $73; //@line 896
     }
    }
    if ((label | 0) == 15) {
     label = 0; //@line 900
     $90 = $73 + $$sink3$i | 0; //@line 902
     HEAP32[$2 >> 2] = $90; //@line 903
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 905
     $475 = $90; //@line 905
     $95 = $90; //@line 905
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 908
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$95 + 1 >> 0] | 0; //@line 919
      $$sink216$i = 13; //@line 919
      $$sink8$i = 1; //@line 919
      label = 19; //@line 920
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$95 + 1 >> 0] << 8) + 269 | 0; //@line 932
      $$sink216$i = HEAPU8[$95 + 2 >> 0] | 0; //@line 932
      $$sink8$i = 2; //@line 932
      label = 19; //@line 933
      break;
     }
    default:
     {
      $$1202$in$i = $76; //@line 937
      $110 = $475; //@line 937
      $118 = $95; //@line 937
     }
    }
    if ((label | 0) == 19) {
     label = 0; //@line 941
     $107 = $95 + $$sink8$i | 0; //@line 943
     HEAP32[$2 >> 2] = $107; //@line 944
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 946
     $110 = $107; //@line 946
     $118 = $107; //@line 946
    }
    $$1202$i = $$1202$in$i & 65535; //@line 948
    $111 = $66 - $110 & 65535; //@line 950
    $trunc$i = $$0208$i & 65535; //@line 951
    L23 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 955
       break L7;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$68 >> 2] | 0)) {
        label = 22; //@line 963
        break L7;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 35; //@line 968
         break L7;
         break;
        }
       case 4:
        {
         label = 40; //@line 973
         break L7;
         break;
        }
       case 3:
        {
         label = 43; //@line 978
         break L7;
         break;
        }
       case 8:
        {
         label = 48; //@line 983
         break L7;
         break;
        }
       case 20:
        {
         label = 57; //@line 988
         break L7;
         break;
        }
       case 11:
        {
         label = 60; //@line 993
         break L7;
         break;
        }
       case 15:
        {
         label = 68; //@line 998
         break L7;
         break;
        }
       case 12:
        {
         label = 26; //@line 1003
         break L23;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L5;
         }
         $154 = $118 + 1 | 0; //@line 1012
         HEAP32[$2 >> 2] = $154; //@line 1013
         $155 = $$1202$in$i & 255; //@line 1014
         if (!($155 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 1017
         } else {
          $$045$i256$i = $155; //@line 1019
          $$06$i255$i = 0; //@line 1019
          $160 = $154; //@line 1019
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 1021
           $160$looptemp = $160;
           $160 = $160 + 1 | 0; //@line 1023
           HEAP32[$2 >> 2] = $160; //@line 1024
           $163 = $$06$i255$i << 8 | HEAPU8[$160$looptemp >> 0]; //@line 1027
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $163; //@line 1030
            break;
           } else {
            $$06$i255$i = $163; //@line 1033
           }
          }
         }
         HEAP32[(HEAP32[$68 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 1039
         break L23;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L5;
         }
         $272 = (HEAP32[$68 >> 2] | 0) + 28 | 0; //@line 1049
         if ((HEAP32[$272 >> 2] | 0) != -1) {
          break L5;
         }
         $275 = $118 + 1 | 0; //@line 1055
         HEAP32[$2 >> 2] = $275; //@line 1056
         $276 = $$1202$in$i & 255; //@line 1057
         if (!($276 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 1060
         } else {
          $$045$i270$i = $276; //@line 1062
          $$06$i269$i = 0; //@line 1062
          $281 = $275; //@line 1062
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 1064
           $281$looptemp = $281;
           $281 = $281 + 1 | 0; //@line 1066
           HEAP32[$2 >> 2] = $281; //@line 1067
           $284 = $$06$i269$i << 8 | HEAPU8[$281$looptemp >> 0]; //@line 1070
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $284; //@line 1073
            break;
           } else {
            $$06$i269$i = $284; //@line 1076
           }
          }
         }
         HEAP32[$272 >> 2] = $$0$lcssa$i272$i; //@line 1080
         break L23;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L5;
         }
         $327 = (HEAP32[$68 >> 2] | 0) + 32 | 0; //@line 1090
         if ((HEAP32[$327 >> 2] | 0) != -1) {
          break L5;
         }
         $330 = $118 + 1 | 0; //@line 1096
         HEAP32[$2 >> 2] = $330; //@line 1097
         $331 = $$1202$in$i & 255; //@line 1098
         if (!($331 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 1101
         } else {
          $$045$i263$i = $331; //@line 1103
          $$06$i262$i = 0; //@line 1103
          $336 = $330; //@line 1103
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 1105
           $336$looptemp = $336;
           $336 = $336 + 1 | 0; //@line 1107
           HEAP32[$2 >> 2] = $336; //@line 1108
           $339 = $$06$i262$i << 8 | HEAPU8[$336$looptemp >> 0]; //@line 1111
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $339; //@line 1114
            break;
           } else {
            $$06$i262$i = $339; //@line 1117
           }
          }
         }
         HEAP32[$327 >> 2] = $$0$lcssa$i265$i; //@line 1121
         break L23;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L5;
         }
         $364 = (HEAP32[$68 >> 2] | 0) + 40 | 0; //@line 1131
         if ((HEAP32[$364 >> 2] | 0) != -1) {
          break L5;
         }
         $367 = $118 + 1 | 0; //@line 1137
         HEAP32[$2 >> 2] = $367; //@line 1138
         $368 = $$1202$in$i & 255; //@line 1139
         if (!($368 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 1142
         } else {
          $$045$i249$i = $368; //@line 1144
          $$06$i248$i = 0; //@line 1144
          $373 = $367; //@line 1144
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 1146
           $373$looptemp = $373;
           $373 = $373 + 1 | 0; //@line 1148
           HEAP32[$2 >> 2] = $373; //@line 1149
           $376 = $$06$i248$i << 8 | HEAPU8[$373$looptemp >> 0]; //@line 1152
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $376; //@line 1155
            break;
           } else {
            $$06$i248$i = $376; //@line 1158
           }
          }
         }
         HEAP32[$364 >> 2] = $$0$lcssa$i251$i; //@line 1162
         break L23;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L5;
         }
         $380 = (HEAP32[$68 >> 2] | 0) + 36 | 0; //@line 1172
         if ((HEAP32[$380 >> 2] | 0) != -1) {
          break L5;
         }
         $383 = $118 + 1 | 0; //@line 1178
         HEAP32[$2 >> 2] = $383; //@line 1179
         $384 = $$1202$in$i & 255; //@line 1180
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 1183
         } else {
          $$045$i242$i = $384; //@line 1185
          $$06$i241$i = 0; //@line 1185
          $389 = $383; //@line 1185
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 1187
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 1189
           HEAP32[$2 >> 2] = $389; //@line 1190
           $392 = $$06$i241$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 1193
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $392; //@line 1196
            break;
           } else {
            $$06$i241$i = $392; //@line 1199
           }
          }
         }
         HEAP32[$380 >> 2] = $$0$lcssa$i244$i; //@line 1203
         break L23;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L5;
         }
         $396 = (HEAP32[$68 >> 2] | 0) + 12 | 0; //@line 1213
         if ((HEAP32[$396 >> 2] | 0) != -1) {
          break L5;
         }
         $399 = $118 + 1 | 0; //@line 1219
         HEAP32[$2 >> 2] = $399; //@line 1220
         $400 = $$1202$in$i & 255; //@line 1221
         if (!($400 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 1224
         } else {
          $$045$i235$i = $400; //@line 1226
          $$06$i234$i = 0; //@line 1226
          $405 = $399; //@line 1226
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 1228
           $405$looptemp = $405;
           $405 = $405 + 1 | 0; //@line 1230
           HEAP32[$2 >> 2] = $405; //@line 1231
           $408 = $$06$i234$i << 8 | HEAPU8[$405$looptemp >> 0]; //@line 1234
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $408; //@line 1237
            break;
           } else {
            $$06$i234$i = $408; //@line 1240
           }
          }
         }
         HEAP32[$396 >> 2] = $$0$lcssa$i237$i; //@line 1244
         break L23;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L5;
         }
         $412 = (HEAP32[$68 >> 2] | 0) + 1 | 0; //@line 1254
         $413 = HEAP8[$412 >> 0] | 0; //@line 1255
         if ($413 & 1) {
          break L5;
         }
         HEAP8[$412 >> 0] = $413 | 1; //@line 1262
         $418 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 1264
         HEAP32[$2 >> 2] = $418; //@line 1265
         $419 = $$1202$in$i & 255; //@line 1266
         if (!($419 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 1269
         } else {
          $$045$i228$i = $419; //@line 1271
          $$06$i227$i = 0; //@line 1271
          $424 = $418; //@line 1271
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 1273
           $424$looptemp = $424;
           $424 = $424 + 1 | 0; //@line 1275
           HEAP32[$2 >> 2] = $424; //@line 1276
           $427 = $$06$i227$i << 8 | HEAPU8[$424$looptemp >> 0]; //@line 1279
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $427; //@line 1282
            break;
           } else {
            $$06$i227$i = $427; //@line 1285
           }
          }
         }
         HEAP32[(HEAP32[$68 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 1291
         break L23;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L5;
         }
         $433 = (HEAP32[$68 >> 2] | 0) + 1 | 0; //@line 1301
         $434 = HEAP8[$433 >> 0] | 0; //@line 1302
         if ($434 & 2) {
          break L5;
         }
         HEAP8[$433 >> 0] = $434 | 2; //@line 1309
         $439 = (HEAP32[$2 >> 2] | 0) + 1 | 0; //@line 1311
         HEAP32[$2 >> 2] = $439; //@line 1312
         $440 = $$1202$in$i & 255; //@line 1313
         if (!($440 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 1316
         } else {
          $$045$i221$i = $440; //@line 1318
          $$06$i220$i = 0; //@line 1318
          $445 = $439; //@line 1318
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 1320
           $445$looptemp = $445;
           $445 = $445 + 1 | 0; //@line 1322
           HEAP32[$2 >> 2] = $445; //@line 1323
           $448 = $$06$i220$i << 8 | HEAPU8[$445$looptemp >> 0]; //@line 1326
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $448; //@line 1329
            break;
           } else {
            $$06$i220$i = $448; //@line 1332
           }
          }
         }
         HEAP32[(HEAP32[$68 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 1338
         break L23;
         break;
        }
       default:
        {
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       label = 26; //@line 1349
       break;
      }
     default:
      {
       break L5;
      }
     }
    } while (0);
    if ((label | 0) == 26) {
     label = 0; //@line 1358
     if (($$1202$i & 65535) > 2) {
      break L5;
     }
     if ((HEAP32[$17 >> 2] | 0) != -1) {
      break L5;
     }
     $142 = $118 + 1 | 0; //@line 1368
     HEAP32[$2 >> 2] = $142; //@line 1369
     $143 = $$1202$in$i & 255; //@line 1370
     if (!($143 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 1373
     } else {
      $$045$i$i = $143; //@line 1375
      $$06$i$i = 0; //@line 1375
      $148 = $142; //@line 1375
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 1377
       $148$looptemp = $148;
       $148 = $148 + 1 | 0; //@line 1379
       HEAP32[$2 >> 2] = $148; //@line 1380
       $151 = $$06$i$i << 8 | HEAPU8[$148$looptemp >> 0]; //@line 1383
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $151; //@line 1386
        break;
       } else {
        $$06$i$i = $151; //@line 1389
       }
      }
     }
     HEAP32[$17 >> 2] = $$0$lcssa$i$i; //@line 1393
    }
    $452 = HEAP32[$2 >> 2] | 0; //@line 1395
    $453 = $452 - $65 | 0; //@line 1396
    if (($453 | 0) > ($64 | 0)) {
     break L5;
    } else {
     $$sink275$i = $64 - $453 | 0; //@line 1403
     $474 = $452; //@line 1403
     $73 = $452; //@line 1403
    }
   }
   if ((label | 0) == 22) {
    $114 = HEAP32[$6 >> 2] | 0; //@line 1407
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 1408
    $115 = FUNCTION_TABLE_ii[$114 & 15](68) | 0; //@line 1409
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 1412
     $116 = $ReallocAsyncCtx3 + 4 | 0; //@line 1413
     HEAP32[$116 >> 2] = $17; //@line 1414
     $117 = $ReallocAsyncCtx3 + 8 | 0; //@line 1415
     HEAP32[$117 >> 2] = $118; //@line 1416
     $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 1417
     HEAP32[$119 >> 2] = $2; //@line 1418
     $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 1419
     HEAP32[$120 >> 2] = $$1202$in$i; //@line 1420
     $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 1421
     HEAP32[$121 >> 2] = $AsyncRetVal; //@line 1422
     $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 1423
     HEAP32[$122 >> 2] = $4; //@line 1424
     $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 1425
     HEAP32[$123 >> 2] = $6; //@line 1426
     $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 1427
     HEAP32[$124 >> 2] = $AsyncRetVal; //@line 1428
     $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 1429
     HEAP32[$125 >> 2] = $68; //@line 1430
     $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 1431
     HEAP16[$126 >> 1] = $trunc$i; //@line 1432
     $127 = $ReallocAsyncCtx3 + 42 | 0; //@line 1433
     HEAP16[$127 >> 1] = $$1202$i; //@line 1434
     $128 = $ReallocAsyncCtx3 + 44 | 0; //@line 1435
     HEAP32[$128 >> 2] = $65; //@line 1436
     $129 = $ReallocAsyncCtx3 + 48 | 0; //@line 1437
     HEAP32[$129 >> 2] = $64; //@line 1438
     $130 = $ReallocAsyncCtx3 + 52 | 0; //@line 1439
     HEAP32[$130 >> 2] = $66; //@line 1440
     $131 = $ReallocAsyncCtx3 + 56 | 0; //@line 1441
     HEAP32[$131 >> 2] = $2; //@line 1442
     $132 = $ReallocAsyncCtx3 + 60 | 0; //@line 1443
     HEAP32[$132 >> 2] = $$0208$i; //@line 1444
     $133 = $ReallocAsyncCtx3 + 64 | 0; //@line 1445
     HEAP32[$133 >> 2] = $68; //@line 1446
     $134 = $ReallocAsyncCtx3 + 68 | 0; //@line 1447
     HEAP32[$134 >> 2] = $14; //@line 1448
     $135 = $ReallocAsyncCtx3 + 72 | 0; //@line 1449
     HEAP16[$135 >> 1] = $111; //@line 1450
     $136 = $ReallocAsyncCtx3 + 76 | 0; //@line 1451
     HEAP32[$136 >> 2] = $69; //@line 1452
     $137 = $ReallocAsyncCtx3 + 80 | 0; //@line 1453
     HEAP32[$137 >> 2] = $70; //@line 1454
     sp = STACKTOP; //@line 1455
     return;
    }
    HEAP32[___async_retval >> 2] = $115; //@line 1459
    ___async_unwind = 0; //@line 1460
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 1461
    $116 = $ReallocAsyncCtx3 + 4 | 0; //@line 1462
    HEAP32[$116 >> 2] = $17; //@line 1463
    $117 = $ReallocAsyncCtx3 + 8 | 0; //@line 1464
    HEAP32[$117 >> 2] = $118; //@line 1465
    $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 1466
    HEAP32[$119 >> 2] = $2; //@line 1467
    $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 1468
    HEAP32[$120 >> 2] = $$1202$in$i; //@line 1469
    $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 1470
    HEAP32[$121 >> 2] = $AsyncRetVal; //@line 1471
    $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 1472
    HEAP32[$122 >> 2] = $4; //@line 1473
    $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 1474
    HEAP32[$123 >> 2] = $6; //@line 1475
    $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 1476
    HEAP32[$124 >> 2] = $AsyncRetVal; //@line 1477
    $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 1478
    HEAP32[$125 >> 2] = $68; //@line 1479
    $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 1480
    HEAP16[$126 >> 1] = $trunc$i; //@line 1481
    $127 = $ReallocAsyncCtx3 + 42 | 0; //@line 1482
    HEAP16[$127 >> 1] = $$1202$i; //@line 1483
    $128 = $ReallocAsyncCtx3 + 44 | 0; //@line 1484
    HEAP32[$128 >> 2] = $65; //@line 1485
    $129 = $ReallocAsyncCtx3 + 48 | 0; //@line 1486
    HEAP32[$129 >> 2] = $64; //@line 1487
    $130 = $ReallocAsyncCtx3 + 52 | 0; //@line 1488
    HEAP32[$130 >> 2] = $66; //@line 1489
    $131 = $ReallocAsyncCtx3 + 56 | 0; //@line 1490
    HEAP32[$131 >> 2] = $2; //@line 1491
    $132 = $ReallocAsyncCtx3 + 60 | 0; //@line 1492
    HEAP32[$132 >> 2] = $$0208$i; //@line 1493
    $133 = $ReallocAsyncCtx3 + 64 | 0; //@line 1494
    HEAP32[$133 >> 2] = $68; //@line 1495
    $134 = $ReallocAsyncCtx3 + 68 | 0; //@line 1496
    HEAP32[$134 >> 2] = $14; //@line 1497
    $135 = $ReallocAsyncCtx3 + 72 | 0; //@line 1498
    HEAP16[$135 >> 1] = $111; //@line 1499
    $136 = $ReallocAsyncCtx3 + 76 | 0; //@line 1500
    HEAP32[$136 >> 2] = $69; //@line 1501
    $137 = $ReallocAsyncCtx3 + 80 | 0; //@line 1502
    HEAP32[$137 >> 2] = $70; //@line 1503
    sp = STACKTOP; //@line 1504
    return;
   } else if ((label | 0) == 35) {
    $167 = $$1202$in$i & 65535; //@line 1508
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $170 = HEAP32[$68 >> 2] | 0; //@line 1514
    if (HEAP32[$170 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$170 + 2 >> 1] = $$1202$i; //@line 1522
    $175 = $118 + 1 | 0; //@line 1523
    HEAP32[$2 >> 2] = $175; //@line 1524
    $176 = HEAP32[$6 >> 2] | 0; //@line 1525
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 1526
    $177 = FUNCTION_TABLE_ii[$176 & 15]($$1202$i) | 0; //@line 1527
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 1530
     $178 = $ReallocAsyncCtx4 + 4 | 0; //@line 1531
     HEAP32[$178 >> 2] = $17; //@line 1532
     $179 = $ReallocAsyncCtx4 + 8 | 0; //@line 1533
     HEAP32[$179 >> 2] = $2; //@line 1534
     $180 = $ReallocAsyncCtx4 + 12 | 0; //@line 1535
     HEAP32[$180 >> 2] = $AsyncRetVal; //@line 1536
     $181 = $ReallocAsyncCtx4 + 16 | 0; //@line 1537
     HEAP32[$181 >> 2] = $4; //@line 1538
     $182 = $ReallocAsyncCtx4 + 20 | 0; //@line 1539
     HEAP32[$182 >> 2] = $6; //@line 1540
     $183 = $ReallocAsyncCtx4 + 24 | 0; //@line 1541
     HEAP32[$183 >> 2] = $AsyncRetVal; //@line 1542
     $184 = $ReallocAsyncCtx4 + 28 | 0; //@line 1543
     HEAP32[$184 >> 2] = $68; //@line 1544
     $185 = $ReallocAsyncCtx4 + 32 | 0; //@line 1545
     HEAP32[$185 >> 2] = $65; //@line 1546
     $186 = $ReallocAsyncCtx4 + 36 | 0; //@line 1547
     HEAP32[$186 >> 2] = $64; //@line 1548
     $187 = $ReallocAsyncCtx4 + 40 | 0; //@line 1549
     HEAP32[$187 >> 2] = $66; //@line 1550
     $188 = $ReallocAsyncCtx4 + 44 | 0; //@line 1551
     HEAP32[$188 >> 2] = $2; //@line 1552
     $189 = $ReallocAsyncCtx4 + 48 | 0; //@line 1553
     HEAP32[$189 >> 2] = $68; //@line 1554
     $190 = $ReallocAsyncCtx4 + 52 | 0; //@line 1555
     HEAP32[$190 >> 2] = $14; //@line 1556
     $191 = $ReallocAsyncCtx4 + 56 | 0; //@line 1557
     HEAP32[$191 >> 2] = $69; //@line 1558
     $192 = $ReallocAsyncCtx4 + 60 | 0; //@line 1559
     HEAP32[$192 >> 2] = $70; //@line 1560
     $193 = $ReallocAsyncCtx4 + 64 | 0; //@line 1561
     HEAP32[$193 >> 2] = $$0208$i; //@line 1562
     $194 = $ReallocAsyncCtx4 + 68 | 0; //@line 1563
     HEAP32[$194 >> 2] = $175; //@line 1564
     $195 = $ReallocAsyncCtx4 + 72 | 0; //@line 1565
     HEAP32[$195 >> 2] = $167; //@line 1566
     sp = STACKTOP; //@line 1567
     return;
    }
    HEAP32[___async_retval >> 2] = $177; //@line 1571
    ___async_unwind = 0; //@line 1572
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 1573
    $178 = $ReallocAsyncCtx4 + 4 | 0; //@line 1574
    HEAP32[$178 >> 2] = $17; //@line 1575
    $179 = $ReallocAsyncCtx4 + 8 | 0; //@line 1576
    HEAP32[$179 >> 2] = $2; //@line 1577
    $180 = $ReallocAsyncCtx4 + 12 | 0; //@line 1578
    HEAP32[$180 >> 2] = $AsyncRetVal; //@line 1579
    $181 = $ReallocAsyncCtx4 + 16 | 0; //@line 1580
    HEAP32[$181 >> 2] = $4; //@line 1581
    $182 = $ReallocAsyncCtx4 + 20 | 0; //@line 1582
    HEAP32[$182 >> 2] = $6; //@line 1583
    $183 = $ReallocAsyncCtx4 + 24 | 0; //@line 1584
    HEAP32[$183 >> 2] = $AsyncRetVal; //@line 1585
    $184 = $ReallocAsyncCtx4 + 28 | 0; //@line 1586
    HEAP32[$184 >> 2] = $68; //@line 1587
    $185 = $ReallocAsyncCtx4 + 32 | 0; //@line 1588
    HEAP32[$185 >> 2] = $65; //@line 1589
    $186 = $ReallocAsyncCtx4 + 36 | 0; //@line 1590
    HEAP32[$186 >> 2] = $64; //@line 1591
    $187 = $ReallocAsyncCtx4 + 40 | 0; //@line 1592
    HEAP32[$187 >> 2] = $66; //@line 1593
    $188 = $ReallocAsyncCtx4 + 44 | 0; //@line 1594
    HEAP32[$188 >> 2] = $2; //@line 1595
    $189 = $ReallocAsyncCtx4 + 48 | 0; //@line 1596
    HEAP32[$189 >> 2] = $68; //@line 1597
    $190 = $ReallocAsyncCtx4 + 52 | 0; //@line 1598
    HEAP32[$190 >> 2] = $14; //@line 1599
    $191 = $ReallocAsyncCtx4 + 56 | 0; //@line 1600
    HEAP32[$191 >> 2] = $69; //@line 1601
    $192 = $ReallocAsyncCtx4 + 60 | 0; //@line 1602
    HEAP32[$192 >> 2] = $70; //@line 1603
    $193 = $ReallocAsyncCtx4 + 64 | 0; //@line 1604
    HEAP32[$193 >> 2] = $$0208$i; //@line 1605
    $194 = $ReallocAsyncCtx4 + 68 | 0; //@line 1606
    HEAP32[$194 >> 2] = $175; //@line 1607
    $195 = $ReallocAsyncCtx4 + 72 | 0; //@line 1608
    HEAP32[$195 >> 2] = $167; //@line 1609
    sp = STACKTOP; //@line 1610
    return;
   } else if ((label | 0) == 40) {
    $197 = HEAP32[$68 >> 2] | 0; //@line 1614
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 1616
    $199 = _sn_coap_parser_options_parse_multiple_options($14, $2, $111, $197 + 48 | 0, $197, 4, $$1202$i) | 0; //@line 1617
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 1620
     $200 = $ReallocAsyncCtx10 + 4 | 0; //@line 1621
     HEAP32[$200 >> 2] = $17; //@line 1622
     $201 = $ReallocAsyncCtx10 + 8 | 0; //@line 1623
     HEAP32[$201 >> 2] = $2; //@line 1624
     $202 = $ReallocAsyncCtx10 + 12 | 0; //@line 1625
     HEAP32[$202 >> 2] = $AsyncRetVal; //@line 1626
     $203 = $ReallocAsyncCtx10 + 16 | 0; //@line 1627
     HEAP32[$203 >> 2] = $4; //@line 1628
     $204 = $ReallocAsyncCtx10 + 20 | 0; //@line 1629
     HEAP32[$204 >> 2] = $6; //@line 1630
     $205 = $ReallocAsyncCtx10 + 24 | 0; //@line 1631
     HEAP32[$205 >> 2] = $AsyncRetVal; //@line 1632
     $206 = $ReallocAsyncCtx10 + 28 | 0; //@line 1633
     HEAP32[$206 >> 2] = $68; //@line 1634
     $207 = $ReallocAsyncCtx10 + 32 | 0; //@line 1635
     HEAP32[$207 >> 2] = $65; //@line 1636
     $208 = $ReallocAsyncCtx10 + 36 | 0; //@line 1637
     HEAP32[$208 >> 2] = $64; //@line 1638
     $209 = $ReallocAsyncCtx10 + 40 | 0; //@line 1639
     HEAP32[$209 >> 2] = $66; //@line 1640
     $210 = $ReallocAsyncCtx10 + 44 | 0; //@line 1641
     HEAP32[$210 >> 2] = $2; //@line 1642
     $211 = $ReallocAsyncCtx10 + 48 | 0; //@line 1643
     HEAP32[$211 >> 2] = $68; //@line 1644
     $212 = $ReallocAsyncCtx10 + 52 | 0; //@line 1645
     HEAP32[$212 >> 2] = $14; //@line 1646
     $213 = $ReallocAsyncCtx10 + 56 | 0; //@line 1647
     HEAP32[$213 >> 2] = $69; //@line 1648
     $214 = $ReallocAsyncCtx10 + 60 | 0; //@line 1649
     HEAP32[$214 >> 2] = $70; //@line 1650
     $215 = $ReallocAsyncCtx10 + 64 | 0; //@line 1651
     HEAP32[$215 >> 2] = $$0208$i; //@line 1652
     sp = STACKTOP; //@line 1653
     return;
    }
    HEAP8[___async_retval >> 0] = $199; //@line 1657
    ___async_unwind = 0; //@line 1658
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 1659
    $200 = $ReallocAsyncCtx10 + 4 | 0; //@line 1660
    HEAP32[$200 >> 2] = $17; //@line 1661
    $201 = $ReallocAsyncCtx10 + 8 | 0; //@line 1662
    HEAP32[$201 >> 2] = $2; //@line 1663
    $202 = $ReallocAsyncCtx10 + 12 | 0; //@line 1664
    HEAP32[$202 >> 2] = $AsyncRetVal; //@line 1665
    $203 = $ReallocAsyncCtx10 + 16 | 0; //@line 1666
    HEAP32[$203 >> 2] = $4; //@line 1667
    $204 = $ReallocAsyncCtx10 + 20 | 0; //@line 1668
    HEAP32[$204 >> 2] = $6; //@line 1669
    $205 = $ReallocAsyncCtx10 + 24 | 0; //@line 1670
    HEAP32[$205 >> 2] = $AsyncRetVal; //@line 1671
    $206 = $ReallocAsyncCtx10 + 28 | 0; //@line 1672
    HEAP32[$206 >> 2] = $68; //@line 1673
    $207 = $ReallocAsyncCtx10 + 32 | 0; //@line 1674
    HEAP32[$207 >> 2] = $65; //@line 1675
    $208 = $ReallocAsyncCtx10 + 36 | 0; //@line 1676
    HEAP32[$208 >> 2] = $64; //@line 1677
    $209 = $ReallocAsyncCtx10 + 40 | 0; //@line 1678
    HEAP32[$209 >> 2] = $66; //@line 1679
    $210 = $ReallocAsyncCtx10 + 44 | 0; //@line 1680
    HEAP32[$210 >> 2] = $2; //@line 1681
    $211 = $ReallocAsyncCtx10 + 48 | 0; //@line 1682
    HEAP32[$211 >> 2] = $68; //@line 1683
    $212 = $ReallocAsyncCtx10 + 52 | 0; //@line 1684
    HEAP32[$212 >> 2] = $14; //@line 1685
    $213 = $ReallocAsyncCtx10 + 56 | 0; //@line 1686
    HEAP32[$213 >> 2] = $69; //@line 1687
    $214 = $ReallocAsyncCtx10 + 60 | 0; //@line 1688
    HEAP32[$214 >> 2] = $70; //@line 1689
    $215 = $ReallocAsyncCtx10 + 64 | 0; //@line 1690
    HEAP32[$215 >> 2] = $$0208$i; //@line 1691
    sp = STACKTOP; //@line 1692
    return;
   } else if ((label | 0) == 43) {
    $217 = $$1202$in$i & 65535; //@line 1696
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $220 = HEAP32[$68 >> 2] | 0; //@line 1702
    if (HEAP32[$220 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$220 + 4 >> 1] = $$1202$i; //@line 1710
    $225 = $118 + 1 | 0; //@line 1711
    HEAP32[$2 >> 2] = $225; //@line 1712
    $226 = HEAP32[$6 >> 2] | 0; //@line 1713
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 1714
    $227 = FUNCTION_TABLE_ii[$226 & 15]($$1202$i) | 0; //@line 1715
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 1718
     $228 = $ReallocAsyncCtx5 + 4 | 0; //@line 1719
     HEAP32[$228 >> 2] = $17; //@line 1720
     $229 = $ReallocAsyncCtx5 + 8 | 0; //@line 1721
     HEAP32[$229 >> 2] = $2; //@line 1722
     $230 = $ReallocAsyncCtx5 + 12 | 0; //@line 1723
     HEAP32[$230 >> 2] = $AsyncRetVal; //@line 1724
     $231 = $ReallocAsyncCtx5 + 16 | 0; //@line 1725
     HEAP32[$231 >> 2] = $4; //@line 1726
     $232 = $ReallocAsyncCtx5 + 20 | 0; //@line 1727
     HEAP32[$232 >> 2] = $6; //@line 1728
     $233 = $ReallocAsyncCtx5 + 24 | 0; //@line 1729
     HEAP32[$233 >> 2] = $AsyncRetVal; //@line 1730
     $234 = $ReallocAsyncCtx5 + 28 | 0; //@line 1731
     HEAP32[$234 >> 2] = $68; //@line 1732
     $235 = $ReallocAsyncCtx5 + 32 | 0; //@line 1733
     HEAP32[$235 >> 2] = $65; //@line 1734
     $236 = $ReallocAsyncCtx5 + 36 | 0; //@line 1735
     HEAP32[$236 >> 2] = $64; //@line 1736
     $237 = $ReallocAsyncCtx5 + 40 | 0; //@line 1737
     HEAP32[$237 >> 2] = $66; //@line 1738
     $238 = $ReallocAsyncCtx5 + 44 | 0; //@line 1739
     HEAP32[$238 >> 2] = $2; //@line 1740
     $239 = $ReallocAsyncCtx5 + 48 | 0; //@line 1741
     HEAP32[$239 >> 2] = $68; //@line 1742
     $240 = $ReallocAsyncCtx5 + 52 | 0; //@line 1743
     HEAP32[$240 >> 2] = $14; //@line 1744
     $241 = $ReallocAsyncCtx5 + 56 | 0; //@line 1745
     HEAP32[$241 >> 2] = $69; //@line 1746
     $242 = $ReallocAsyncCtx5 + 60 | 0; //@line 1747
     HEAP32[$242 >> 2] = $70; //@line 1748
     $243 = $ReallocAsyncCtx5 + 64 | 0; //@line 1749
     HEAP32[$243 >> 2] = $$0208$i; //@line 1750
     $244 = $ReallocAsyncCtx5 + 68 | 0; //@line 1751
     HEAP32[$244 >> 2] = $225; //@line 1752
     $245 = $ReallocAsyncCtx5 + 72 | 0; //@line 1753
     HEAP32[$245 >> 2] = $217; //@line 1754
     sp = STACKTOP; //@line 1755
     return;
    }
    HEAP32[___async_retval >> 2] = $227; //@line 1759
    ___async_unwind = 0; //@line 1760
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 1761
    $228 = $ReallocAsyncCtx5 + 4 | 0; //@line 1762
    HEAP32[$228 >> 2] = $17; //@line 1763
    $229 = $ReallocAsyncCtx5 + 8 | 0; //@line 1764
    HEAP32[$229 >> 2] = $2; //@line 1765
    $230 = $ReallocAsyncCtx5 + 12 | 0; //@line 1766
    HEAP32[$230 >> 2] = $AsyncRetVal; //@line 1767
    $231 = $ReallocAsyncCtx5 + 16 | 0; //@line 1768
    HEAP32[$231 >> 2] = $4; //@line 1769
    $232 = $ReallocAsyncCtx5 + 20 | 0; //@line 1770
    HEAP32[$232 >> 2] = $6; //@line 1771
    $233 = $ReallocAsyncCtx5 + 24 | 0; //@line 1772
    HEAP32[$233 >> 2] = $AsyncRetVal; //@line 1773
    $234 = $ReallocAsyncCtx5 + 28 | 0; //@line 1774
    HEAP32[$234 >> 2] = $68; //@line 1775
    $235 = $ReallocAsyncCtx5 + 32 | 0; //@line 1776
    HEAP32[$235 >> 2] = $65; //@line 1777
    $236 = $ReallocAsyncCtx5 + 36 | 0; //@line 1778
    HEAP32[$236 >> 2] = $64; //@line 1779
    $237 = $ReallocAsyncCtx5 + 40 | 0; //@line 1780
    HEAP32[$237 >> 2] = $66; //@line 1781
    $238 = $ReallocAsyncCtx5 + 44 | 0; //@line 1782
    HEAP32[$238 >> 2] = $2; //@line 1783
    $239 = $ReallocAsyncCtx5 + 48 | 0; //@line 1784
    HEAP32[$239 >> 2] = $68; //@line 1785
    $240 = $ReallocAsyncCtx5 + 52 | 0; //@line 1786
    HEAP32[$240 >> 2] = $14; //@line 1787
    $241 = $ReallocAsyncCtx5 + 56 | 0; //@line 1788
    HEAP32[$241 >> 2] = $69; //@line 1789
    $242 = $ReallocAsyncCtx5 + 60 | 0; //@line 1790
    HEAP32[$242 >> 2] = $70; //@line 1791
    $243 = $ReallocAsyncCtx5 + 64 | 0; //@line 1792
    HEAP32[$243 >> 2] = $$0208$i; //@line 1793
    $244 = $ReallocAsyncCtx5 + 68 | 0; //@line 1794
    HEAP32[$244 >> 2] = $225; //@line 1795
    $245 = $ReallocAsyncCtx5 + 72 | 0; //@line 1796
    HEAP32[$245 >> 2] = $217; //@line 1797
    sp = STACKTOP; //@line 1798
    return;
   } else if ((label | 0) == 48) {
    $247 = HEAP32[$68 >> 2] | 0; //@line 1802
    $248 = $247 + 56 | 0; //@line 1803
    if (HEAP32[$248 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 1810
    $252 = _sn_coap_parser_options_parse_multiple_options($14, $2, $111, $248, $247 + 6 | 0, 8, $$1202$i) | 0; //@line 1811
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 1814
     $253 = $ReallocAsyncCtx9 + 4 | 0; //@line 1815
     HEAP32[$253 >> 2] = $17; //@line 1816
     $254 = $ReallocAsyncCtx9 + 8 | 0; //@line 1817
     HEAP32[$254 >> 2] = $2; //@line 1818
     $255 = $ReallocAsyncCtx9 + 12 | 0; //@line 1819
     HEAP32[$255 >> 2] = $AsyncRetVal; //@line 1820
     $256 = $ReallocAsyncCtx9 + 16 | 0; //@line 1821
     HEAP32[$256 >> 2] = $4; //@line 1822
     $257 = $ReallocAsyncCtx9 + 20 | 0; //@line 1823
     HEAP32[$257 >> 2] = $6; //@line 1824
     $258 = $ReallocAsyncCtx9 + 24 | 0; //@line 1825
     HEAP32[$258 >> 2] = $AsyncRetVal; //@line 1826
     $259 = $ReallocAsyncCtx9 + 28 | 0; //@line 1827
     HEAP32[$259 >> 2] = $68; //@line 1828
     $260 = $ReallocAsyncCtx9 + 32 | 0; //@line 1829
     HEAP32[$260 >> 2] = $65; //@line 1830
     $261 = $ReallocAsyncCtx9 + 36 | 0; //@line 1831
     HEAP32[$261 >> 2] = $64; //@line 1832
     $262 = $ReallocAsyncCtx9 + 40 | 0; //@line 1833
     HEAP32[$262 >> 2] = $66; //@line 1834
     $263 = $ReallocAsyncCtx9 + 44 | 0; //@line 1835
     HEAP32[$263 >> 2] = $2; //@line 1836
     $264 = $ReallocAsyncCtx9 + 48 | 0; //@line 1837
     HEAP32[$264 >> 2] = $68; //@line 1838
     $265 = $ReallocAsyncCtx9 + 52 | 0; //@line 1839
     HEAP32[$265 >> 2] = $14; //@line 1840
     $266 = $ReallocAsyncCtx9 + 56 | 0; //@line 1841
     HEAP32[$266 >> 2] = $69; //@line 1842
     $267 = $ReallocAsyncCtx9 + 60 | 0; //@line 1843
     HEAP32[$267 >> 2] = $70; //@line 1844
     $268 = $ReallocAsyncCtx9 + 64 | 0; //@line 1845
     HEAP32[$268 >> 2] = $$0208$i; //@line 1846
     sp = STACKTOP; //@line 1847
     return;
    }
    HEAP8[___async_retval >> 0] = $252; //@line 1851
    ___async_unwind = 0; //@line 1852
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 1853
    $253 = $ReallocAsyncCtx9 + 4 | 0; //@line 1854
    HEAP32[$253 >> 2] = $17; //@line 1855
    $254 = $ReallocAsyncCtx9 + 8 | 0; //@line 1856
    HEAP32[$254 >> 2] = $2; //@line 1857
    $255 = $ReallocAsyncCtx9 + 12 | 0; //@line 1858
    HEAP32[$255 >> 2] = $AsyncRetVal; //@line 1859
    $256 = $ReallocAsyncCtx9 + 16 | 0; //@line 1860
    HEAP32[$256 >> 2] = $4; //@line 1861
    $257 = $ReallocAsyncCtx9 + 20 | 0; //@line 1862
    HEAP32[$257 >> 2] = $6; //@line 1863
    $258 = $ReallocAsyncCtx9 + 24 | 0; //@line 1864
    HEAP32[$258 >> 2] = $AsyncRetVal; //@line 1865
    $259 = $ReallocAsyncCtx9 + 28 | 0; //@line 1866
    HEAP32[$259 >> 2] = $68; //@line 1867
    $260 = $ReallocAsyncCtx9 + 32 | 0; //@line 1868
    HEAP32[$260 >> 2] = $65; //@line 1869
    $261 = $ReallocAsyncCtx9 + 36 | 0; //@line 1870
    HEAP32[$261 >> 2] = $64; //@line 1871
    $262 = $ReallocAsyncCtx9 + 40 | 0; //@line 1872
    HEAP32[$262 >> 2] = $66; //@line 1873
    $263 = $ReallocAsyncCtx9 + 44 | 0; //@line 1874
    HEAP32[$263 >> 2] = $2; //@line 1875
    $264 = $ReallocAsyncCtx9 + 48 | 0; //@line 1876
    HEAP32[$264 >> 2] = $68; //@line 1877
    $265 = $ReallocAsyncCtx9 + 52 | 0; //@line 1878
    HEAP32[$265 >> 2] = $14; //@line 1879
    $266 = $ReallocAsyncCtx9 + 56 | 0; //@line 1880
    HEAP32[$266 >> 2] = $69; //@line 1881
    $267 = $ReallocAsyncCtx9 + 60 | 0; //@line 1882
    HEAP32[$267 >> 2] = $70; //@line 1883
    $268 = $ReallocAsyncCtx9 + 64 | 0; //@line 1884
    HEAP32[$268 >> 2] = $$0208$i; //@line 1885
    sp = STACKTOP; //@line 1886
    return;
   } else if ((label | 0) == 57) {
    $286 = HEAP32[$68 >> 2] | 0; //@line 1890
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 1893
    $289 = _sn_coap_parser_options_parse_multiple_options($14, $2, $111, $286 + 60 | 0, $286 + 8 | 0, 20, $$1202$i) | 0; //@line 1894
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 1897
     $290 = $ReallocAsyncCtx8 + 4 | 0; //@line 1898
     HEAP32[$290 >> 2] = $17; //@line 1899
     $291 = $ReallocAsyncCtx8 + 8 | 0; //@line 1900
     HEAP32[$291 >> 2] = $2; //@line 1901
     $292 = $ReallocAsyncCtx8 + 12 | 0; //@line 1902
     HEAP32[$292 >> 2] = $AsyncRetVal; //@line 1903
     $293 = $ReallocAsyncCtx8 + 16 | 0; //@line 1904
     HEAP32[$293 >> 2] = $4; //@line 1905
     $294 = $ReallocAsyncCtx8 + 20 | 0; //@line 1906
     HEAP32[$294 >> 2] = $6; //@line 1907
     $295 = $ReallocAsyncCtx8 + 24 | 0; //@line 1908
     HEAP32[$295 >> 2] = $AsyncRetVal; //@line 1909
     $296 = $ReallocAsyncCtx8 + 28 | 0; //@line 1910
     HEAP32[$296 >> 2] = $68; //@line 1911
     $297 = $ReallocAsyncCtx8 + 32 | 0; //@line 1912
     HEAP32[$297 >> 2] = $65; //@line 1913
     $298 = $ReallocAsyncCtx8 + 36 | 0; //@line 1914
     HEAP32[$298 >> 2] = $64; //@line 1915
     $299 = $ReallocAsyncCtx8 + 40 | 0; //@line 1916
     HEAP32[$299 >> 2] = $66; //@line 1917
     $300 = $ReallocAsyncCtx8 + 44 | 0; //@line 1918
     HEAP32[$300 >> 2] = $2; //@line 1919
     $301 = $ReallocAsyncCtx8 + 48 | 0; //@line 1920
     HEAP32[$301 >> 2] = $68; //@line 1921
     $302 = $ReallocAsyncCtx8 + 52 | 0; //@line 1922
     HEAP32[$302 >> 2] = $14; //@line 1923
     $303 = $ReallocAsyncCtx8 + 56 | 0; //@line 1924
     HEAP32[$303 >> 2] = $69; //@line 1925
     $304 = $ReallocAsyncCtx8 + 60 | 0; //@line 1926
     HEAP32[$304 >> 2] = $70; //@line 1927
     $305 = $ReallocAsyncCtx8 + 64 | 0; //@line 1928
     HEAP32[$305 >> 2] = $$0208$i; //@line 1929
     sp = STACKTOP; //@line 1930
     return;
    }
    HEAP8[___async_retval >> 0] = $289; //@line 1934
    ___async_unwind = 0; //@line 1935
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 1936
    $290 = $ReallocAsyncCtx8 + 4 | 0; //@line 1937
    HEAP32[$290 >> 2] = $17; //@line 1938
    $291 = $ReallocAsyncCtx8 + 8 | 0; //@line 1939
    HEAP32[$291 >> 2] = $2; //@line 1940
    $292 = $ReallocAsyncCtx8 + 12 | 0; //@line 1941
    HEAP32[$292 >> 2] = $AsyncRetVal; //@line 1942
    $293 = $ReallocAsyncCtx8 + 16 | 0; //@line 1943
    HEAP32[$293 >> 2] = $4; //@line 1944
    $294 = $ReallocAsyncCtx8 + 20 | 0; //@line 1945
    HEAP32[$294 >> 2] = $6; //@line 1946
    $295 = $ReallocAsyncCtx8 + 24 | 0; //@line 1947
    HEAP32[$295 >> 2] = $AsyncRetVal; //@line 1948
    $296 = $ReallocAsyncCtx8 + 28 | 0; //@line 1949
    HEAP32[$296 >> 2] = $68; //@line 1950
    $297 = $ReallocAsyncCtx8 + 32 | 0; //@line 1951
    HEAP32[$297 >> 2] = $65; //@line 1952
    $298 = $ReallocAsyncCtx8 + 36 | 0; //@line 1953
    HEAP32[$298 >> 2] = $64; //@line 1954
    $299 = $ReallocAsyncCtx8 + 40 | 0; //@line 1955
    HEAP32[$299 >> 2] = $66; //@line 1956
    $300 = $ReallocAsyncCtx8 + 44 | 0; //@line 1957
    HEAP32[$300 >> 2] = $2; //@line 1958
    $301 = $ReallocAsyncCtx8 + 48 | 0; //@line 1959
    HEAP32[$301 >> 2] = $68; //@line 1960
    $302 = $ReallocAsyncCtx8 + 52 | 0; //@line 1961
    HEAP32[$302 >> 2] = $14; //@line 1962
    $303 = $ReallocAsyncCtx8 + 56 | 0; //@line 1963
    HEAP32[$303 >> 2] = $69; //@line 1964
    $304 = $ReallocAsyncCtx8 + 60 | 0; //@line 1965
    HEAP32[$304 >> 2] = $70; //@line 1966
    $305 = $ReallocAsyncCtx8 + 64 | 0; //@line 1967
    HEAP32[$305 >> 2] = $$0208$i; //@line 1968
    sp = STACKTOP; //@line 1969
    return;
   } else if ((label | 0) == 60) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 1973
    $307 = _sn_coap_parser_options_parse_multiple_options($14, $2, $111, $69, $70, 11, $$1202$i) | 0; //@line 1974
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 1977
     $308 = $ReallocAsyncCtx7 + 4 | 0; //@line 1978
     HEAP32[$308 >> 2] = $17; //@line 1979
     $309 = $ReallocAsyncCtx7 + 8 | 0; //@line 1980
     HEAP32[$309 >> 2] = $2; //@line 1981
     $310 = $ReallocAsyncCtx7 + 12 | 0; //@line 1982
     HEAP32[$310 >> 2] = $AsyncRetVal; //@line 1983
     $311 = $ReallocAsyncCtx7 + 16 | 0; //@line 1984
     HEAP32[$311 >> 2] = $4; //@line 1985
     $312 = $ReallocAsyncCtx7 + 20 | 0; //@line 1986
     HEAP32[$312 >> 2] = $6; //@line 1987
     $313 = $ReallocAsyncCtx7 + 24 | 0; //@line 1988
     HEAP32[$313 >> 2] = $AsyncRetVal; //@line 1989
     $314 = $ReallocAsyncCtx7 + 28 | 0; //@line 1990
     HEAP32[$314 >> 2] = $68; //@line 1991
     $315 = $ReallocAsyncCtx7 + 32 | 0; //@line 1992
     HEAP32[$315 >> 2] = $65; //@line 1993
     $316 = $ReallocAsyncCtx7 + 36 | 0; //@line 1994
     HEAP32[$316 >> 2] = $64; //@line 1995
     $317 = $ReallocAsyncCtx7 + 40 | 0; //@line 1996
     HEAP32[$317 >> 2] = $66; //@line 1997
     $318 = $ReallocAsyncCtx7 + 44 | 0; //@line 1998
     HEAP32[$318 >> 2] = $2; //@line 1999
     $319 = $ReallocAsyncCtx7 + 48 | 0; //@line 2000
     HEAP32[$319 >> 2] = $68; //@line 2001
     $320 = $ReallocAsyncCtx7 + 52 | 0; //@line 2002
     HEAP32[$320 >> 2] = $14; //@line 2003
     $321 = $ReallocAsyncCtx7 + 56 | 0; //@line 2004
     HEAP32[$321 >> 2] = $69; //@line 2005
     $322 = $ReallocAsyncCtx7 + 60 | 0; //@line 2006
     HEAP32[$322 >> 2] = $70; //@line 2007
     $323 = $ReallocAsyncCtx7 + 64 | 0; //@line 2008
     HEAP32[$323 >> 2] = $$0208$i; //@line 2009
     sp = STACKTOP; //@line 2010
     return;
    }
    HEAP8[___async_retval >> 0] = $307; //@line 2014
    ___async_unwind = 0; //@line 2015
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 2016
    $308 = $ReallocAsyncCtx7 + 4 | 0; //@line 2017
    HEAP32[$308 >> 2] = $17; //@line 2018
    $309 = $ReallocAsyncCtx7 + 8 | 0; //@line 2019
    HEAP32[$309 >> 2] = $2; //@line 2020
    $310 = $ReallocAsyncCtx7 + 12 | 0; //@line 2021
    HEAP32[$310 >> 2] = $AsyncRetVal; //@line 2022
    $311 = $ReallocAsyncCtx7 + 16 | 0; //@line 2023
    HEAP32[$311 >> 2] = $4; //@line 2024
    $312 = $ReallocAsyncCtx7 + 20 | 0; //@line 2025
    HEAP32[$312 >> 2] = $6; //@line 2026
    $313 = $ReallocAsyncCtx7 + 24 | 0; //@line 2027
    HEAP32[$313 >> 2] = $AsyncRetVal; //@line 2028
    $314 = $ReallocAsyncCtx7 + 28 | 0; //@line 2029
    HEAP32[$314 >> 2] = $68; //@line 2030
    $315 = $ReallocAsyncCtx7 + 32 | 0; //@line 2031
    HEAP32[$315 >> 2] = $65; //@line 2032
    $316 = $ReallocAsyncCtx7 + 36 | 0; //@line 2033
    HEAP32[$316 >> 2] = $64; //@line 2034
    $317 = $ReallocAsyncCtx7 + 40 | 0; //@line 2035
    HEAP32[$317 >> 2] = $66; //@line 2036
    $318 = $ReallocAsyncCtx7 + 44 | 0; //@line 2037
    HEAP32[$318 >> 2] = $2; //@line 2038
    $319 = $ReallocAsyncCtx7 + 48 | 0; //@line 2039
    HEAP32[$319 >> 2] = $68; //@line 2040
    $320 = $ReallocAsyncCtx7 + 52 | 0; //@line 2041
    HEAP32[$320 >> 2] = $14; //@line 2042
    $321 = $ReallocAsyncCtx7 + 56 | 0; //@line 2043
    HEAP32[$321 >> 2] = $69; //@line 2044
    $322 = $ReallocAsyncCtx7 + 60 | 0; //@line 2045
    HEAP32[$322 >> 2] = $70; //@line 2046
    $323 = $ReallocAsyncCtx7 + 64 | 0; //@line 2047
    HEAP32[$323 >> 2] = $$0208$i; //@line 2048
    sp = STACKTOP; //@line 2049
    return;
   } else if ((label | 0) == 68) {
    $341 = HEAP32[$68 >> 2] | 0; //@line 2053
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 2056
    $344 = _sn_coap_parser_options_parse_multiple_options($14, $2, $111, $341 + 64 | 0, $341 + 10 | 0, 15, $$1202$i) | 0; //@line 2057
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 2060
     $345 = $ReallocAsyncCtx6 + 4 | 0; //@line 2061
     HEAP32[$345 >> 2] = $17; //@line 2062
     $346 = $ReallocAsyncCtx6 + 8 | 0; //@line 2063
     HEAP32[$346 >> 2] = $2; //@line 2064
     $347 = $ReallocAsyncCtx6 + 12 | 0; //@line 2065
     HEAP32[$347 >> 2] = $AsyncRetVal; //@line 2066
     $348 = $ReallocAsyncCtx6 + 16 | 0; //@line 2067
     HEAP32[$348 >> 2] = $4; //@line 2068
     $349 = $ReallocAsyncCtx6 + 20 | 0; //@line 2069
     HEAP32[$349 >> 2] = $6; //@line 2070
     $350 = $ReallocAsyncCtx6 + 24 | 0; //@line 2071
     HEAP32[$350 >> 2] = $AsyncRetVal; //@line 2072
     $351 = $ReallocAsyncCtx6 + 28 | 0; //@line 2073
     HEAP32[$351 >> 2] = $68; //@line 2074
     $352 = $ReallocAsyncCtx6 + 32 | 0; //@line 2075
     HEAP32[$352 >> 2] = $65; //@line 2076
     $353 = $ReallocAsyncCtx6 + 36 | 0; //@line 2077
     HEAP32[$353 >> 2] = $64; //@line 2078
     $354 = $ReallocAsyncCtx6 + 40 | 0; //@line 2079
     HEAP32[$354 >> 2] = $66; //@line 2080
     $355 = $ReallocAsyncCtx6 + 44 | 0; //@line 2081
     HEAP32[$355 >> 2] = $2; //@line 2082
     $356 = $ReallocAsyncCtx6 + 48 | 0; //@line 2083
     HEAP32[$356 >> 2] = $68; //@line 2084
     $357 = $ReallocAsyncCtx6 + 52 | 0; //@line 2085
     HEAP32[$357 >> 2] = $14; //@line 2086
     $358 = $ReallocAsyncCtx6 + 56 | 0; //@line 2087
     HEAP32[$358 >> 2] = $69; //@line 2088
     $359 = $ReallocAsyncCtx6 + 60 | 0; //@line 2089
     HEAP32[$359 >> 2] = $70; //@line 2090
     $360 = $ReallocAsyncCtx6 + 64 | 0; //@line 2091
     HEAP32[$360 >> 2] = $$0208$i; //@line 2092
     sp = STACKTOP; //@line 2093
     return;
    }
    HEAP8[___async_retval >> 0] = $344; //@line 2097
    ___async_unwind = 0; //@line 2098
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 2099
    $345 = $ReallocAsyncCtx6 + 4 | 0; //@line 2100
    HEAP32[$345 >> 2] = $17; //@line 2101
    $346 = $ReallocAsyncCtx6 + 8 | 0; //@line 2102
    HEAP32[$346 >> 2] = $2; //@line 2103
    $347 = $ReallocAsyncCtx6 + 12 | 0; //@line 2104
    HEAP32[$347 >> 2] = $AsyncRetVal; //@line 2105
    $348 = $ReallocAsyncCtx6 + 16 | 0; //@line 2106
    HEAP32[$348 >> 2] = $4; //@line 2107
    $349 = $ReallocAsyncCtx6 + 20 | 0; //@line 2108
    HEAP32[$349 >> 2] = $6; //@line 2109
    $350 = $ReallocAsyncCtx6 + 24 | 0; //@line 2110
    HEAP32[$350 >> 2] = $AsyncRetVal; //@line 2111
    $351 = $ReallocAsyncCtx6 + 28 | 0; //@line 2112
    HEAP32[$351 >> 2] = $68; //@line 2113
    $352 = $ReallocAsyncCtx6 + 32 | 0; //@line 2114
    HEAP32[$352 >> 2] = $65; //@line 2115
    $353 = $ReallocAsyncCtx6 + 36 | 0; //@line 2116
    HEAP32[$353 >> 2] = $64; //@line 2117
    $354 = $ReallocAsyncCtx6 + 40 | 0; //@line 2118
    HEAP32[$354 >> 2] = $66; //@line 2119
    $355 = $ReallocAsyncCtx6 + 44 | 0; //@line 2120
    HEAP32[$355 >> 2] = $2; //@line 2121
    $356 = $ReallocAsyncCtx6 + 48 | 0; //@line 2122
    HEAP32[$356 >> 2] = $68; //@line 2123
    $357 = $ReallocAsyncCtx6 + 52 | 0; //@line 2124
    HEAP32[$357 >> 2] = $14; //@line 2125
    $358 = $ReallocAsyncCtx6 + 56 | 0; //@line 2126
    HEAP32[$358 >> 2] = $69; //@line 2127
    $359 = $ReallocAsyncCtx6 + 60 | 0; //@line 2128
    HEAP32[$359 >> 2] = $70; //@line 2129
    $360 = $ReallocAsyncCtx6 + 64 | 0; //@line 2130
    HEAP32[$360 >> 2] = $$0208$i; //@line 2131
    sp = STACKTOP; //@line 2132
    return;
   } else if ((label | 0) == 98) {
    if (($73 - $65 | 0) >= ($64 | 0)) {
     $$0 = $AsyncRetVal; //@line 2140
     $473 = ___async_retval; //@line 2141
     HEAP32[$473 >> 2] = $$0; //@line 2142
     return;
    }
    if ((HEAP8[$73 >> 0] | 0) == -1) {
     $463 = $73 + 1 | 0; //@line 2148
     HEAP32[$2 >> 2] = $463; //@line 2149
     $464 = $463; //@line 2150
     $466 = $65 - $464 + $64 | 0; //@line 2152
     HEAP16[$AsyncRetVal + 24 >> 1] = $466; //@line 2155
     if ($466 & 65535 | 0) {
      HEAP32[$AsyncRetVal + 36 >> 2] = $464; //@line 2160
      $$0 = $AsyncRetVal; //@line 2161
      $473 = ___async_retval; //@line 2162
      HEAP32[$473 >> 2] = $$0; //@line 2163
      return;
     }
    }
    HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 2168
    $$0 = $AsyncRetVal; //@line 2169
    $473 = ___async_retval; //@line 2170
    HEAP32[$473 >> 2] = $$0; //@line 2171
    return;
   }
  } else {
   if (($42 & 255) <= 8) {
    $45 = $AsyncRetVal + 28 | 0; //@line 2177
    if (!(HEAP32[$45 >> 2] | 0)) {
     $48 = HEAP32[$6 >> 2] | 0; //@line 2181
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 2183
     $50 = FUNCTION_TABLE_ii[$48 & 15]($42 & 255) | 0; //@line 2184
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 49; //@line 2187
      $51 = $ReallocAsyncCtx2 + 4 | 0; //@line 2188
      HEAP32[$51 >> 2] = $17; //@line 2189
      $52 = $ReallocAsyncCtx2 + 8 | 0; //@line 2190
      HEAP32[$52 >> 2] = $2; //@line 2191
      $53 = $ReallocAsyncCtx2 + 12 | 0; //@line 2192
      HEAP32[$53 >> 2] = $AsyncRetVal; //@line 2193
      $54 = $ReallocAsyncCtx2 + 16 | 0; //@line 2194
      HEAP32[$54 >> 2] = $4; //@line 2195
      $55 = $ReallocAsyncCtx2 + 20 | 0; //@line 2196
      HEAP32[$55 >> 2] = $6; //@line 2197
      $56 = $ReallocAsyncCtx2 + 24 | 0; //@line 2198
      HEAP32[$56 >> 2] = $AsyncRetVal; //@line 2199
      $57 = $ReallocAsyncCtx2 + 28 | 0; //@line 2200
      HEAP32[$57 >> 2] = $40; //@line 2201
      $58 = $ReallocAsyncCtx2 + 32 | 0; //@line 2202
      HEAP16[$58 >> 1] = $8; //@line 2203
      $59 = $ReallocAsyncCtx2 + 36 | 0; //@line 2204
      HEAP32[$59 >> 2] = $10; //@line 2205
      $60 = $ReallocAsyncCtx2 + 40 | 0; //@line 2206
      HEAP32[$60 >> 2] = $14; //@line 2207
      $61 = $ReallocAsyncCtx2 + 44 | 0; //@line 2208
      HEAP32[$61 >> 2] = $45; //@line 2209
      sp = STACKTOP; //@line 2210
      return;
     }
     HEAP32[___async_retval >> 2] = $50; //@line 2214
     ___async_unwind = 0; //@line 2215
     HEAP32[$ReallocAsyncCtx2 >> 2] = 49; //@line 2216
     $51 = $ReallocAsyncCtx2 + 4 | 0; //@line 2217
     HEAP32[$51 >> 2] = $17; //@line 2218
     $52 = $ReallocAsyncCtx2 + 8 | 0; //@line 2219
     HEAP32[$52 >> 2] = $2; //@line 2220
     $53 = $ReallocAsyncCtx2 + 12 | 0; //@line 2221
     HEAP32[$53 >> 2] = $AsyncRetVal; //@line 2222
     $54 = $ReallocAsyncCtx2 + 16 | 0; //@line 2223
     HEAP32[$54 >> 2] = $4; //@line 2224
     $55 = $ReallocAsyncCtx2 + 20 | 0; //@line 2225
     HEAP32[$55 >> 2] = $6; //@line 2226
     $56 = $ReallocAsyncCtx2 + 24 | 0; //@line 2227
     HEAP32[$56 >> 2] = $AsyncRetVal; //@line 2228
     $57 = $ReallocAsyncCtx2 + 28 | 0; //@line 2229
     HEAP32[$57 >> 2] = $40; //@line 2230
     $58 = $ReallocAsyncCtx2 + 32 | 0; //@line 2231
     HEAP16[$58 >> 1] = $8; //@line 2232
     $59 = $ReallocAsyncCtx2 + 36 | 0; //@line 2233
     HEAP32[$59 >> 2] = $10; //@line 2234
     $60 = $ReallocAsyncCtx2 + 40 | 0; //@line 2235
     HEAP32[$60 >> 2] = $14; //@line 2236
     $61 = $ReallocAsyncCtx2 + 44 | 0; //@line 2237
     HEAP32[$61 >> 2] = $45; //@line 2238
     sp = STACKTOP; //@line 2239
     return;
    }
   }
  }
 } while (0);
 HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 2246
 $$0 = $AsyncRetVal; //@line 2247
 $473 = ___async_retval; //@line 2248
 HEAP32[$473 >> 2] = $$0; //@line 2249
 return;
}
function _sn_coap_parser__async_cb_85($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$i$reg2mem$0 = 0, $$1202$i$reg2mem$1 = 0, $$1202$i$reg2mem$2 = 0, $$1202$in$i = 0, $$1202$in$i$reg2mem$0 = 0, $$1202$in$i$reg2mem$1 = 0, $$reg2mem$0 = 0, $$reg2mem$1 = 0, $$reg2mem64$0 = 0, $$reg2mem64$1 = 0, $$reg2mem64$2 = 0, $$reg2mem64$3 = 0, $$reg2mem75$0 = 0, $$reg2mem75$1 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $114 = 0, $116 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $131 = 0, $134 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $147 = 0, $150 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $227 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $252 = 0, $255 = 0, $256 = 0, $26 = 0, $261 = 0, $264 = 0, $266 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $307 = 0, $310 = 0, $311 = 0, $316 = 0, $319 = 0, $32 = 0, $321 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $344 = 0, $347 = 0, $348 = 0, $353 = 0, $356 = 0, $36 = 0, $360 = 0, $363 = 0, $364 = 0, $369 = 0, $372 = 0, $376 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $388 = 0, $392 = 0, $393 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $407 = 0, $413 = 0, $414 = 0, $419 = 0, $42 = 0, $420 = 0, $425 = 0, $428 = 0, $432 = 0, $433 = 0, $441 = 0, $442 = 0, $444 = 0, $451 = 0, $452 = 0, $47 = 0, $50 = 0, $6 = 0, $64 = 0, $67 = 0, $69 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc$i$reg2mem$0 = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $140$looptemp = 0, $261$looptemp = 0, $316$looptemp = 0, $353$looptemp = 0, $369$looptemp = 0, $385$looptemp = 0, $404$looptemp = 0, $425$looptemp = 0, $128$looptemp = 0;
 sp = STACKTOP; //@line 3682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3688
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3690
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3692
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3694
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3696
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3698
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3700
 $20 = HEAP16[$0 + 40 >> 1] | 0; //@line 3702
 $22 = HEAP16[$0 + 42 >> 1] | 0; //@line 3704
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 3706
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 3708
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 3710
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 3712
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 3714
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 3716
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 3718
 $38 = HEAP16[$0 + 72 >> 1] | 0; //@line 3720
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 3722
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 3724
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3726
 HEAP32[$34 >> 2] = $AsyncRetVal; //@line 3727
 L2 : do {
  if ($AsyncRetVal | 0) {
   dest = $AsyncRetVal; //@line 3731
   stop = dest + 68 | 0; //@line 3731
   do {
    HEAP32[dest >> 2] = 0; //@line 3731
    dest = dest + 4 | 0; //@line 3731
   } while ((dest | 0) < (stop | 0));
   $114 = HEAP32[$18 >> 2] | 0; //@line 3732
   HEAP32[$114 + 16 >> 2] = 60; //@line 3734
   $116 = $114 + 28 | 0; //@line 3735
   HEAP32[$114 + 12 >> 2] = -1; //@line 3737
   HEAP32[$116 >> 2] = -1; //@line 3738
   HEAP32[$116 + 4 >> 2] = -1; //@line 3738
   HEAP32[$116 + 8 >> 2] = -1; //@line 3738
   HEAP32[$116 + 12 >> 2] = -1; //@line 3738
   if ($114 | 0) {
    $$1202$i$reg2mem$0 = $22; //@line 3741
    $$1202$in$i$reg2mem$0 = $8; //@line 3741
    $$reg2mem$0 = $4; //@line 3741
    $$reg2mem64$0 = $32; //@line 3741
    $$reg2mem75$0 = $38; //@line 3741
    $trunc$i$reg2mem$0 = $20; //@line 3741
    L4 : while (1) {
     switch ($trunc$i$reg2mem$0 << 16 >> 16) {
     case 35:
      {
       label = 29; //@line 3745
       break L4;
       break;
      }
     case 4:
      {
       label = 34; //@line 3750
       break L4;
       break;
      }
     case 3:
      {
       label = 37; //@line 3755
       break L4;
       break;
      }
     case 8:
      {
       label = 42; //@line 3760
       break L4;
       break;
      }
     case 20:
      {
       label = 51; //@line 3765
       break L4;
       break;
      }
     case 11:
      {
       $$1202$i$reg2mem$2 = $$1202$i$reg2mem$0; //@line 3770
       $$reg2mem64$2 = $$reg2mem64$0; //@line 3770
       $$reg2mem75$1 = $$reg2mem75$0; //@line 3770
       label = 54; //@line 3771
       break L4;
       break;
      }
     case 15:
      {
       label = 62; //@line 3776
       break L4;
       break;
      }
     case 12:
      {
       $$1202$i$reg2mem$1 = $$1202$i$reg2mem$0; //@line 3781
       $$1202$in$i$reg2mem$1 = $$1202$in$i$reg2mem$0; //@line 3781
       $$reg2mem$1 = $$reg2mem$0; //@line 3781
       $$reg2mem64$1 = $$reg2mem64$0; //@line 3781
       label = 20; //@line 3782
       break;
      }
     case 14:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        break L2;
       }
       $134 = $$reg2mem$0 + 1 | 0; //@line 3790
       HEAP32[$6 >> 2] = $134; //@line 3791
       $135 = $$1202$in$i$reg2mem$0 & 255; //@line 3792
       if (!($135 << 24 >> 24)) {
        $$0$lcssa$i258$i = 0; //@line 3795
       } else {
        $$045$i256$i = $135; //@line 3797
        $$06$i255$i = 0; //@line 3797
        $140 = $134; //@line 3797
        while (1) {
         $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 3799
         $140$looptemp = $140;
         $140 = $140 + 1 | 0; //@line 3801
         HEAP32[$6 >> 2] = $140; //@line 3802
         $143 = $$06$i255$i << 8 | HEAPU8[$140$looptemp >> 0]; //@line 3805
         if (!($$045$i256$i << 24 >> 24)) {
          $$0$lcssa$i258$i = $143; //@line 3808
          break;
         } else {
          $$06$i255$i = $143; //@line 3811
         }
        }
       }
       HEAP32[(HEAP32[$18 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 3817
       $$reg2mem64$3 = $$reg2mem64$0; //@line 3818
       break;
      }
     case 7:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        break L2;
       }
       $252 = (HEAP32[$18 >> 2] | 0) + 28 | 0; //@line 3827
       if ((HEAP32[$252 >> 2] | 0) != -1) {
        break L2;
       }
       $255 = $$reg2mem$0 + 1 | 0; //@line 3833
       HEAP32[$6 >> 2] = $255; //@line 3834
       $256 = $$1202$in$i$reg2mem$0 & 255; //@line 3835
       if (!($256 << 24 >> 24)) {
        $$0$lcssa$i272$i = 0; //@line 3838
       } else {
        $$045$i270$i = $256; //@line 3840
        $$06$i269$i = 0; //@line 3840
        $261 = $255; //@line 3840
        while (1) {
         $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 3842
         $261$looptemp = $261;
         $261 = $261 + 1 | 0; //@line 3844
         HEAP32[$6 >> 2] = $261; //@line 3845
         $264 = $$06$i269$i << 8 | HEAPU8[$261$looptemp >> 0]; //@line 3848
         if (!($$045$i270$i << 24 >> 24)) {
          $$0$lcssa$i272$i = $264; //@line 3851
          break;
         } else {
          $$06$i269$i = $264; //@line 3854
         }
        }
       }
       HEAP32[$252 >> 2] = $$0$lcssa$i272$i; //@line 3858
       $$reg2mem64$3 = $$reg2mem64$0; //@line 3859
       break;
      }
     case 6:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        break L2;
       }
       $307 = (HEAP32[$18 >> 2] | 0) + 32 | 0; //@line 3868
       if ((HEAP32[$307 >> 2] | 0) != -1) {
        break L2;
       }
       $310 = $$reg2mem$0 + 1 | 0; //@line 3874
       HEAP32[$6 >> 2] = $310; //@line 3875
       $311 = $$1202$in$i$reg2mem$0 & 255; //@line 3876
       if (!($311 << 24 >> 24)) {
        $$0$lcssa$i265$i = 0; //@line 3879
       } else {
        $$045$i263$i = $311; //@line 3881
        $$06$i262$i = 0; //@line 3881
        $316 = $310; //@line 3881
        while (1) {
         $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 3883
         $316$looptemp = $316;
         $316 = $316 + 1 | 0; //@line 3885
         HEAP32[$6 >> 2] = $316; //@line 3886
         $319 = $$06$i262$i << 8 | HEAPU8[$316$looptemp >> 0]; //@line 3889
         if (!($$045$i263$i << 24 >> 24)) {
          $$0$lcssa$i265$i = $319; //@line 3892
          break;
         } else {
          $$06$i262$i = $319; //@line 3895
         }
        }
       }
       HEAP32[$307 >> 2] = $$0$lcssa$i265$i; //@line 3899
       $$reg2mem64$3 = $$reg2mem64$0; //@line 3900
       break;
      }
     case 23:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        break L2;
       }
       $344 = (HEAP32[$18 >> 2] | 0) + 40 | 0; //@line 3909
       if ((HEAP32[$344 >> 2] | 0) != -1) {
        break L2;
       }
       $347 = $$reg2mem$0 + 1 | 0; //@line 3915
       HEAP32[$6 >> 2] = $347; //@line 3916
       $348 = $$1202$in$i$reg2mem$0 & 255; //@line 3917
       if (!($348 << 24 >> 24)) {
        $$0$lcssa$i251$i = 0; //@line 3920
       } else {
        $$045$i249$i = $348; //@line 3922
        $$06$i248$i = 0; //@line 3922
        $353 = $347; //@line 3922
        while (1) {
         $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 3924
         $353$looptemp = $353;
         $353 = $353 + 1 | 0; //@line 3926
         HEAP32[$6 >> 2] = $353; //@line 3927
         $356 = $$06$i248$i << 8 | HEAPU8[$353$looptemp >> 0]; //@line 3930
         if (!($$045$i249$i << 24 >> 24)) {
          $$0$lcssa$i251$i = $356; //@line 3933
          break;
         } else {
          $$06$i248$i = $356; //@line 3936
         }
        }
       }
       HEAP32[$344 >> 2] = $$0$lcssa$i251$i; //@line 3940
       $$reg2mem64$3 = $$reg2mem64$0; //@line 3941
       break;
      }
     case 27:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        break L2;
       }
       $360 = (HEAP32[$18 >> 2] | 0) + 36 | 0; //@line 3950
       if ((HEAP32[$360 >> 2] | 0) != -1) {
        break L2;
       }
       $363 = $$reg2mem$0 + 1 | 0; //@line 3956
       HEAP32[$6 >> 2] = $363; //@line 3957
       $364 = $$1202$in$i$reg2mem$0 & 255; //@line 3958
       if (!($364 << 24 >> 24)) {
        $$0$lcssa$i244$i = 0; //@line 3961
       } else {
        $$045$i242$i = $364; //@line 3963
        $$06$i241$i = 0; //@line 3963
        $369 = $363; //@line 3963
        while (1) {
         $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 3965
         $369$looptemp = $369;
         $369 = $369 + 1 | 0; //@line 3967
         HEAP32[$6 >> 2] = $369; //@line 3968
         $372 = $$06$i241$i << 8 | HEAPU8[$369$looptemp >> 0]; //@line 3971
         if (!($$045$i242$i << 24 >> 24)) {
          $$0$lcssa$i244$i = $372; //@line 3974
          break;
         } else {
          $$06$i241$i = $372; //@line 3977
         }
        }
       }
       HEAP32[$360 >> 2] = $$0$lcssa$i244$i; //@line 3981
       $$reg2mem64$3 = $$reg2mem64$0; //@line 3982
       break;
      }
     case 17:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        break L2;
       }
       $376 = (HEAP32[$18 >> 2] | 0) + 12 | 0; //@line 3991
       if ((HEAP32[$376 >> 2] | 0) != -1) {
        break L2;
       }
       $379 = $$reg2mem$0 + 1 | 0; //@line 3997
       HEAP32[$6 >> 2] = $379; //@line 3998
       $380 = $$1202$in$i$reg2mem$0 & 255; //@line 3999
       if (!($380 << 24 >> 24)) {
        $$0$lcssa$i237$i = 0; //@line 4002
       } else {
        $$045$i235$i = $380; //@line 4004
        $$06$i234$i = 0; //@line 4004
        $385 = $379; //@line 4004
        while (1) {
         $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 4006
         $385$looptemp = $385;
         $385 = $385 + 1 | 0; //@line 4008
         HEAP32[$6 >> 2] = $385; //@line 4009
         $388 = $$06$i234$i << 8 | HEAPU8[$385$looptemp >> 0]; //@line 4012
         if (!($$045$i235$i << 24 >> 24)) {
          $$0$lcssa$i237$i = $388; //@line 4015
          break;
         } else {
          $$06$i234$i = $388; //@line 4018
         }
        }
       }
       HEAP32[$376 >> 2] = $$0$lcssa$i237$i; //@line 4022
       $$reg2mem64$3 = $$reg2mem64$0; //@line 4023
       break;
      }
     case 60:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        break L2;
       }
       $392 = (HEAP32[$18 >> 2] | 0) + 1 | 0; //@line 4032
       $393 = HEAP8[$392 >> 0] | 0; //@line 4033
       if ($393 & 1) {
        break L2;
       }
       HEAP8[$392 >> 0] = $393 | 1; //@line 4040
       $398 = (HEAP32[$6 >> 2] | 0) + 1 | 0; //@line 4042
       HEAP32[$6 >> 2] = $398; //@line 4043
       $399 = $$1202$in$i$reg2mem$0 & 255; //@line 4044
       if (!($399 << 24 >> 24)) {
        $$0$lcssa$i230$i = 0; //@line 4047
       } else {
        $$045$i228$i = $399; //@line 4049
        $$06$i227$i = 0; //@line 4049
        $404 = $398; //@line 4049
        while (1) {
         $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 4051
         $404$looptemp = $404;
         $404 = $404 + 1 | 0; //@line 4053
         HEAP32[$6 >> 2] = $404; //@line 4054
         $407 = $$06$i227$i << 8 | HEAPU8[$404$looptemp >> 0]; //@line 4057
         if (!($$045$i228$i << 24 >> 24)) {
          $$0$lcssa$i230$i = $407; //@line 4060
          break;
         } else {
          $$06$i227$i = $407; //@line 4063
         }
        }
       }
       HEAP32[(HEAP32[$18 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 4069
       $$reg2mem64$3 = $$reg2mem64$0; //@line 4070
       break;
      }
     case 28:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        break L2;
       }
       $413 = (HEAP32[$18 >> 2] | 0) + 1 | 0; //@line 4079
       $414 = HEAP8[$413 >> 0] | 0; //@line 4080
       if ($414 & 2) {
        break L2;
       }
       HEAP8[$413 >> 0] = $414 | 2; //@line 4087
       $419 = (HEAP32[$6 >> 2] | 0) + 1 | 0; //@line 4089
       HEAP32[$6 >> 2] = $419; //@line 4090
       $420 = $$1202$in$i$reg2mem$0 & 255; //@line 4091
       if (!($420 << 24 >> 24)) {
        $$0$lcssa$i223$i = 0; //@line 4094
       } else {
        $$045$i221$i = $420; //@line 4096
        $$06$i220$i = 0; //@line 4096
        $425 = $419; //@line 4096
        while (1) {
         $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 4098
         $425$looptemp = $425;
         $425 = $425 + 1 | 0; //@line 4100
         HEAP32[$6 >> 2] = $425; //@line 4101
         $428 = $$06$i220$i << 8 | HEAPU8[$425$looptemp >> 0]; //@line 4104
         if (!($$045$i221$i << 24 >> 24)) {
          $$0$lcssa$i223$i = $428; //@line 4107
          break;
         } else {
          $$06$i220$i = $428; //@line 4110
         }
        }
       }
       HEAP32[(HEAP32[$18 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 4116
       $$reg2mem64$3 = $$reg2mem64$0; //@line 4117
       break;
      }
     default:
      {
       break L2;
      }
     }
     L62 : while (1) {
      if ((label | 0) == 20) {
       label = 0; //@line 4126
       if (($$1202$i$reg2mem$1 & 65535) > 2) {
        break L2;
       }
       if ((HEAP32[$2 >> 2] | 0) != -1) {
        break L2;
       }
       $122 = $$reg2mem$1 + 1 | 0; //@line 4136
       HEAP32[$6 >> 2] = $122; //@line 4137
       $123 = $$1202$in$i$reg2mem$1 & 255; //@line 4138
       if (!($123 << 24 >> 24)) {
        $$0$lcssa$i$i = 0; //@line 4141
       } else {
        $$045$i$i = $123; //@line 4143
        $$06$i$i = 0; //@line 4143
        $128 = $122; //@line 4143
        while (1) {
         $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 4145
         $128$looptemp = $128;
         $128 = $128 + 1 | 0; //@line 4147
         HEAP32[$6 >> 2] = $128; //@line 4148
         $131 = $$06$i$i << 8 | HEAPU8[$128$looptemp >> 0]; //@line 4151
         if (!($$045$i$i << 24 >> 24)) {
          $$0$lcssa$i$i = $131; //@line 4154
          break;
         } else {
          $$06$i$i = $131; //@line 4157
         }
        }
       }
       HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 4161
       $$reg2mem64$3 = $$reg2mem64$1; //@line 4162
      }
      $432 = HEAP32[$30 >> 2] | 0; //@line 4164
      $433 = $432 - $24 | 0; //@line 4165
      $47 = $432; //@line 4168
      if (($433 | 0) > ($26 | 0)) {
       break L2;
      }
      if (!(($26 - $433 & 65535) << 16 >> 16)) {
       label = 92; //@line 4175
       break L4;
      }
      $trunc277$i = HEAP8[$47 >> 0] | 0; //@line 4178
      if ($trunc277$i << 24 >> 24 == -1) {
       label = 92; //@line 4181
       break L4;
      }
      $50 = $trunc277$i & 15; //@line 4185
      $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 4186
      switch ($trunc276$i & 15) {
      case 15:
       {
        break L2;
        break;
       }
      case 13:
       {
        $$sink$i = HEAPU8[$47 + 1 >> 0] | 0; //@line 4198
        $$sink214$i = 13; //@line 4198
        $$sink3$i = 1; //@line 4198
        label = 7; //@line 4199
        break;
       }
      case 14:
       {
        $$sink$i = (HEAPU8[$47 + 1 >> 0] << 8) + 269 | 0; //@line 4211
        $$sink214$i = HEAPU8[$47 + 2 >> 0] | 0; //@line 4211
        $$sink3$i = 2; //@line 4211
        label = 7; //@line 4212
        break;
       }
      default:
       {
        $$1$i = $trunc276$i & 255; //@line 4216
        $452 = $432; //@line 4216
        $69 = $47; //@line 4216
       }
      }
      if ((label | 0) == 7) {
       label = 0; //@line 4220
       $64 = $47 + $$sink3$i | 0; //@line 4222
       HEAP32[$6 >> 2] = $64; //@line 4223
       $$1$i = $$sink$i + $$sink214$i | 0; //@line 4225
       $452 = $64; //@line 4225
       $69 = $64; //@line 4225
      }
      $67 = $$1$i + ($$reg2mem64$3 & 255) | 0; //@line 4228
      switch ($trunc277$i & 15) {
      case 15:
       {
        break L2;
        break;
       }
      case 13:
       {
        $$sink215$i = HEAPU8[$69 + 1 >> 0] | 0; //@line 4239
        $$sink216$i = 13; //@line 4239
        $$sink8$i = 1; //@line 4239
        label = 11; //@line 4240
        break;
       }
      case 14:
       {
        $$sink215$i = (HEAPU8[$69 + 1 >> 0] << 8) + 269 | 0; //@line 4252
        $$sink216$i = HEAPU8[$69 + 2 >> 0] | 0; //@line 4252
        $$sink8$i = 2; //@line 4252
        label = 11; //@line 4253
        break;
       }
      default:
       {
        $$1202$in$i = $50; //@line 4257
        $84 = $452; //@line 4257
        $92 = $69; //@line 4257
       }
      }
      if ((label | 0) == 11) {
       label = 0; //@line 4261
       $81 = $69 + $$sink8$i | 0; //@line 4263
       HEAP32[$6 >> 2] = $81; //@line 4264
       $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 4266
       $84 = $81; //@line 4266
       $92 = $81; //@line 4266
      }
      $$1202$i = $$1202$in$i & 65535; //@line 4268
      $85 = $28 - $84 & 65535; //@line 4270
      $trunc$i = $67 & 65535; //@line 4271
      switch ($trunc$i << 16 >> 16) {
      case 11:
       {
        $$1202$i$reg2mem$2 = $$1202$i; //@line 4274
        $$reg2mem64$2 = $67; //@line 4274
        $$reg2mem75$1 = $85; //@line 4274
        label = 54; //@line 4275
        break L4;
        break;
       }
      case 12:
       {
        $$1202$i$reg2mem$1 = $$1202$i; //@line 4280
        $$1202$in$i$reg2mem$1 = $$1202$in$i; //@line 4280
        $$reg2mem$1 = $92; //@line 4280
        $$reg2mem64$1 = $67; //@line 4280
        label = 20; //@line 4281
        break;
       }
      case 28:
      case 60:
      case 17:
      case 27:
      case 23:
      case 15:
      case 6:
      case 20:
      case 7:
      case 8:
      case 3:
      case 4:
      case 35:
      case 14:
       {
        break L62;
        break;
       }
      default:
       {
        break L2;
       }
      }
     }
     if (!(HEAP32[$18 >> 2] | 0)) {
      label = 14; //@line 4296
      break;
     } else {
      $$1202$i$reg2mem$0 = $$1202$i; //@line 4299
      $$1202$in$i$reg2mem$0 = $$1202$in$i; //@line 4299
      $$reg2mem$0 = $92; //@line 4299
      $$reg2mem64$0 = $67; //@line 4299
      $$reg2mem75$0 = $85; //@line 4299
      $trunc$i$reg2mem$0 = $trunc$i; //@line 4299
     }
    }
    if ((label | 0) == 14) {
     $88 = HEAP32[$14 >> 2] | 0; //@line 4303
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 4304
     $89 = FUNCTION_TABLE_ii[$88 & 15](68) | 0; //@line 4305
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 4308
      $90 = $ReallocAsyncCtx3 + 4 | 0; //@line 4309
      HEAP32[$90 >> 2] = $2; //@line 4310
      $91 = $ReallocAsyncCtx3 + 8 | 0; //@line 4311
      HEAP32[$91 >> 2] = $92; //@line 4312
      $93 = $ReallocAsyncCtx3 + 12 | 0; //@line 4313
      HEAP32[$93 >> 2] = $6; //@line 4314
      $94 = $ReallocAsyncCtx3 + 16 | 0; //@line 4315
      HEAP32[$94 >> 2] = $$1202$in$i; //@line 4316
      $95 = $ReallocAsyncCtx3 + 20 | 0; //@line 4317
      HEAP32[$95 >> 2] = $10; //@line 4318
      $96 = $ReallocAsyncCtx3 + 24 | 0; //@line 4319
      HEAP32[$96 >> 2] = $12; //@line 4320
      $97 = $ReallocAsyncCtx3 + 28 | 0; //@line 4321
      HEAP32[$97 >> 2] = $14; //@line 4322
      $98 = $ReallocAsyncCtx3 + 32 | 0; //@line 4323
      HEAP32[$98 >> 2] = $16; //@line 4324
      $99 = $ReallocAsyncCtx3 + 36 | 0; //@line 4325
      HEAP32[$99 >> 2] = $18; //@line 4326
      $100 = $ReallocAsyncCtx3 + 40 | 0; //@line 4327
      HEAP16[$100 >> 1] = $trunc$i; //@line 4328
      $101 = $ReallocAsyncCtx3 + 42 | 0; //@line 4329
      HEAP16[$101 >> 1] = $$1202$i; //@line 4330
      $102 = $ReallocAsyncCtx3 + 44 | 0; //@line 4331
      HEAP32[$102 >> 2] = $24; //@line 4332
      $103 = $ReallocAsyncCtx3 + 48 | 0; //@line 4333
      HEAP32[$103 >> 2] = $26; //@line 4334
      $104 = $ReallocAsyncCtx3 + 52 | 0; //@line 4335
      HEAP32[$104 >> 2] = $28; //@line 4336
      $105 = $ReallocAsyncCtx3 + 56 | 0; //@line 4337
      HEAP32[$105 >> 2] = $30; //@line 4338
      $106 = $ReallocAsyncCtx3 + 60 | 0; //@line 4339
      HEAP32[$106 >> 2] = $67; //@line 4340
      $107 = $ReallocAsyncCtx3 + 64 | 0; //@line 4341
      HEAP32[$107 >> 2] = $34; //@line 4342
      $108 = $ReallocAsyncCtx3 + 68 | 0; //@line 4343
      HEAP32[$108 >> 2] = $36; //@line 4344
      $109 = $ReallocAsyncCtx3 + 72 | 0; //@line 4345
      HEAP16[$109 >> 1] = $85; //@line 4346
      $110 = $ReallocAsyncCtx3 + 76 | 0; //@line 4347
      HEAP32[$110 >> 2] = $40; //@line 4348
      $111 = $ReallocAsyncCtx3 + 80 | 0; //@line 4349
      HEAP32[$111 >> 2] = $42; //@line 4350
      sp = STACKTOP; //@line 4351
      return;
     }
     HEAP32[___async_retval >> 2] = $89; //@line 4355
     ___async_unwind = 0; //@line 4356
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 4357
     $90 = $ReallocAsyncCtx3 + 4 | 0; //@line 4358
     HEAP32[$90 >> 2] = $2; //@line 4359
     $91 = $ReallocAsyncCtx3 + 8 | 0; //@line 4360
     HEAP32[$91 >> 2] = $92; //@line 4361
     $93 = $ReallocAsyncCtx3 + 12 | 0; //@line 4362
     HEAP32[$93 >> 2] = $6; //@line 4363
     $94 = $ReallocAsyncCtx3 + 16 | 0; //@line 4364
     HEAP32[$94 >> 2] = $$1202$in$i; //@line 4365
     $95 = $ReallocAsyncCtx3 + 20 | 0; //@line 4366
     HEAP32[$95 >> 2] = $10; //@line 4367
     $96 = $ReallocAsyncCtx3 + 24 | 0; //@line 4368
     HEAP32[$96 >> 2] = $12; //@line 4369
     $97 = $ReallocAsyncCtx3 + 28 | 0; //@line 4370
     HEAP32[$97 >> 2] = $14; //@line 4371
     $98 = $ReallocAsyncCtx3 + 32 | 0; //@line 4372
     HEAP32[$98 >> 2] = $16; //@line 4373
     $99 = $ReallocAsyncCtx3 + 36 | 0; //@line 4374
     HEAP32[$99 >> 2] = $18; //@line 4375
     $100 = $ReallocAsyncCtx3 + 40 | 0; //@line 4376
     HEAP16[$100 >> 1] = $trunc$i; //@line 4377
     $101 = $ReallocAsyncCtx3 + 42 | 0; //@line 4378
     HEAP16[$101 >> 1] = $$1202$i; //@line 4379
     $102 = $ReallocAsyncCtx3 + 44 | 0; //@line 4380
     HEAP32[$102 >> 2] = $24; //@line 4381
     $103 = $ReallocAsyncCtx3 + 48 | 0; //@line 4382
     HEAP32[$103 >> 2] = $26; //@line 4383
     $104 = $ReallocAsyncCtx3 + 52 | 0; //@line 4384
     HEAP32[$104 >> 2] = $28; //@line 4385
     $105 = $ReallocAsyncCtx3 + 56 | 0; //@line 4386
     HEAP32[$105 >> 2] = $30; //@line 4387
     $106 = $ReallocAsyncCtx3 + 60 | 0; //@line 4388
     HEAP32[$106 >> 2] = $67; //@line 4389
     $107 = $ReallocAsyncCtx3 + 64 | 0; //@line 4390
     HEAP32[$107 >> 2] = $34; //@line 4391
     $108 = $ReallocAsyncCtx3 + 68 | 0; //@line 4392
     HEAP32[$108 >> 2] = $36; //@line 4393
     $109 = $ReallocAsyncCtx3 + 72 | 0; //@line 4394
     HEAP16[$109 >> 1] = $85; //@line 4395
     $110 = $ReallocAsyncCtx3 + 76 | 0; //@line 4396
     HEAP32[$110 >> 2] = $40; //@line 4397
     $111 = $ReallocAsyncCtx3 + 80 | 0; //@line 4398
     HEAP32[$111 >> 2] = $42; //@line 4399
     sp = STACKTOP; //@line 4400
     return;
    } else if ((label | 0) == 29) {
     $147 = $$1202$in$i$reg2mem$0 & 65535; //@line 4404
     if (($$1202$i$reg2mem$0 + -1 & 65535) > 1033) {
      break;
     }
     $150 = HEAP32[$18 >> 2] | 0; //@line 4410
     if (HEAP32[$150 + 44 >> 2] | 0) {
      break;
     }
     HEAP16[$150 + 2 >> 1] = $$1202$i$reg2mem$0; //@line 4418
     $155 = $$reg2mem$0 + 1 | 0; //@line 4419
     HEAP32[$6 >> 2] = $155; //@line 4420
     $156 = HEAP32[$14 >> 2] | 0; //@line 4421
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 4422
     $157 = FUNCTION_TABLE_ii[$156 & 15]($$1202$i$reg2mem$0) | 0; //@line 4423
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 4426
      $158 = $ReallocAsyncCtx4 + 4 | 0; //@line 4427
      HEAP32[$158 >> 2] = $2; //@line 4428
      $159 = $ReallocAsyncCtx4 + 8 | 0; //@line 4429
      HEAP32[$159 >> 2] = $6; //@line 4430
      $160 = $ReallocAsyncCtx4 + 12 | 0; //@line 4431
      HEAP32[$160 >> 2] = $10; //@line 4432
      $161 = $ReallocAsyncCtx4 + 16 | 0; //@line 4433
      HEAP32[$161 >> 2] = $12; //@line 4434
      $162 = $ReallocAsyncCtx4 + 20 | 0; //@line 4435
      HEAP32[$162 >> 2] = $14; //@line 4436
      $163 = $ReallocAsyncCtx4 + 24 | 0; //@line 4437
      HEAP32[$163 >> 2] = $16; //@line 4438
      $164 = $ReallocAsyncCtx4 + 28 | 0; //@line 4439
      HEAP32[$164 >> 2] = $18; //@line 4440
      $165 = $ReallocAsyncCtx4 + 32 | 0; //@line 4441
      HEAP32[$165 >> 2] = $24; //@line 4442
      $166 = $ReallocAsyncCtx4 + 36 | 0; //@line 4443
      HEAP32[$166 >> 2] = $26; //@line 4444
      $167 = $ReallocAsyncCtx4 + 40 | 0; //@line 4445
      HEAP32[$167 >> 2] = $28; //@line 4446
      $168 = $ReallocAsyncCtx4 + 44 | 0; //@line 4447
      HEAP32[$168 >> 2] = $30; //@line 4448
      $169 = $ReallocAsyncCtx4 + 48 | 0; //@line 4449
      HEAP32[$169 >> 2] = $34; //@line 4450
      $170 = $ReallocAsyncCtx4 + 52 | 0; //@line 4451
      HEAP32[$170 >> 2] = $36; //@line 4452
      $171 = $ReallocAsyncCtx4 + 56 | 0; //@line 4453
      HEAP32[$171 >> 2] = $40; //@line 4454
      $172 = $ReallocAsyncCtx4 + 60 | 0; //@line 4455
      HEAP32[$172 >> 2] = $42; //@line 4456
      $173 = $ReallocAsyncCtx4 + 64 | 0; //@line 4457
      HEAP32[$173 >> 2] = $$reg2mem64$0; //@line 4458
      $174 = $ReallocAsyncCtx4 + 68 | 0; //@line 4459
      HEAP32[$174 >> 2] = $155; //@line 4460
      $175 = $ReallocAsyncCtx4 + 72 | 0; //@line 4461
      HEAP32[$175 >> 2] = $147; //@line 4462
      sp = STACKTOP; //@line 4463
      return;
     }
     HEAP32[___async_retval >> 2] = $157; //@line 4467
     ___async_unwind = 0; //@line 4468
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 4469
     $158 = $ReallocAsyncCtx4 + 4 | 0; //@line 4470
     HEAP32[$158 >> 2] = $2; //@line 4471
     $159 = $ReallocAsyncCtx4 + 8 | 0; //@line 4472
     HEAP32[$159 >> 2] = $6; //@line 4473
     $160 = $ReallocAsyncCtx4 + 12 | 0; //@line 4474
     HEAP32[$160 >> 2] = $10; //@line 4475
     $161 = $ReallocAsyncCtx4 + 16 | 0; //@line 4476
     HEAP32[$161 >> 2] = $12; //@line 4477
     $162 = $ReallocAsyncCtx4 + 20 | 0; //@line 4478
     HEAP32[$162 >> 2] = $14; //@line 4479
     $163 = $ReallocAsyncCtx4 + 24 | 0; //@line 4480
     HEAP32[$163 >> 2] = $16; //@line 4481
     $164 = $ReallocAsyncCtx4 + 28 | 0; //@line 4482
     HEAP32[$164 >> 2] = $18; //@line 4483
     $165 = $ReallocAsyncCtx4 + 32 | 0; //@line 4484
     HEAP32[$165 >> 2] = $24; //@line 4485
     $166 = $ReallocAsyncCtx4 + 36 | 0; //@line 4486
     HEAP32[$166 >> 2] = $26; //@line 4487
     $167 = $ReallocAsyncCtx4 + 40 | 0; //@line 4488
     HEAP32[$167 >> 2] = $28; //@line 4489
     $168 = $ReallocAsyncCtx4 + 44 | 0; //@line 4490
     HEAP32[$168 >> 2] = $30; //@line 4491
     $169 = $ReallocAsyncCtx4 + 48 | 0; //@line 4492
     HEAP32[$169 >> 2] = $34; //@line 4493
     $170 = $ReallocAsyncCtx4 + 52 | 0; //@line 4494
     HEAP32[$170 >> 2] = $36; //@line 4495
     $171 = $ReallocAsyncCtx4 + 56 | 0; //@line 4496
     HEAP32[$171 >> 2] = $40; //@line 4497
     $172 = $ReallocAsyncCtx4 + 60 | 0; //@line 4498
     HEAP32[$172 >> 2] = $42; //@line 4499
     $173 = $ReallocAsyncCtx4 + 64 | 0; //@line 4500
     HEAP32[$173 >> 2] = $$reg2mem64$0; //@line 4501
     $174 = $ReallocAsyncCtx4 + 68 | 0; //@line 4502
     HEAP32[$174 >> 2] = $155; //@line 4503
     $175 = $ReallocAsyncCtx4 + 72 | 0; //@line 4504
     HEAP32[$175 >> 2] = $147; //@line 4505
     sp = STACKTOP; //@line 4506
     return;
    } else if ((label | 0) == 34) {
     $177 = HEAP32[$18 >> 2] | 0; //@line 4510
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 4512
     $179 = _sn_coap_parser_options_parse_multiple_options($36, $6, $$reg2mem75$0, $177 + 48 | 0, $177, 4, $$1202$i$reg2mem$0) | 0; //@line 4513
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 4516
      $180 = $ReallocAsyncCtx10 + 4 | 0; //@line 4517
      HEAP32[$180 >> 2] = $2; //@line 4518
      $181 = $ReallocAsyncCtx10 + 8 | 0; //@line 4519
      HEAP32[$181 >> 2] = $6; //@line 4520
      $182 = $ReallocAsyncCtx10 + 12 | 0; //@line 4521
      HEAP32[$182 >> 2] = $10; //@line 4522
      $183 = $ReallocAsyncCtx10 + 16 | 0; //@line 4523
      HEAP32[$183 >> 2] = $12; //@line 4524
      $184 = $ReallocAsyncCtx10 + 20 | 0; //@line 4525
      HEAP32[$184 >> 2] = $14; //@line 4526
      $185 = $ReallocAsyncCtx10 + 24 | 0; //@line 4527
      HEAP32[$185 >> 2] = $16; //@line 4528
      $186 = $ReallocAsyncCtx10 + 28 | 0; //@line 4529
      HEAP32[$186 >> 2] = $18; //@line 4530
      $187 = $ReallocAsyncCtx10 + 32 | 0; //@line 4531
      HEAP32[$187 >> 2] = $24; //@line 4532
      $188 = $ReallocAsyncCtx10 + 36 | 0; //@line 4533
      HEAP32[$188 >> 2] = $26; //@line 4534
      $189 = $ReallocAsyncCtx10 + 40 | 0; //@line 4535
      HEAP32[$189 >> 2] = $28; //@line 4536
      $190 = $ReallocAsyncCtx10 + 44 | 0; //@line 4537
      HEAP32[$190 >> 2] = $30; //@line 4538
      $191 = $ReallocAsyncCtx10 + 48 | 0; //@line 4539
      HEAP32[$191 >> 2] = $34; //@line 4540
      $192 = $ReallocAsyncCtx10 + 52 | 0; //@line 4541
      HEAP32[$192 >> 2] = $36; //@line 4542
      $193 = $ReallocAsyncCtx10 + 56 | 0; //@line 4543
      HEAP32[$193 >> 2] = $40; //@line 4544
      $194 = $ReallocAsyncCtx10 + 60 | 0; //@line 4545
      HEAP32[$194 >> 2] = $42; //@line 4546
      $195 = $ReallocAsyncCtx10 + 64 | 0; //@line 4547
      HEAP32[$195 >> 2] = $$reg2mem64$0; //@line 4548
      sp = STACKTOP; //@line 4549
      return;
     }
     HEAP8[___async_retval >> 0] = $179; //@line 4553
     ___async_unwind = 0; //@line 4554
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 4555
     $180 = $ReallocAsyncCtx10 + 4 | 0; //@line 4556
     HEAP32[$180 >> 2] = $2; //@line 4557
     $181 = $ReallocAsyncCtx10 + 8 | 0; //@line 4558
     HEAP32[$181 >> 2] = $6; //@line 4559
     $182 = $ReallocAsyncCtx10 + 12 | 0; //@line 4560
     HEAP32[$182 >> 2] = $10; //@line 4561
     $183 = $ReallocAsyncCtx10 + 16 | 0; //@line 4562
     HEAP32[$183 >> 2] = $12; //@line 4563
     $184 = $ReallocAsyncCtx10 + 20 | 0; //@line 4564
     HEAP32[$184 >> 2] = $14; //@line 4565
     $185 = $ReallocAsyncCtx10 + 24 | 0; //@line 4566
     HEAP32[$185 >> 2] = $16; //@line 4567
     $186 = $ReallocAsyncCtx10 + 28 | 0; //@line 4568
     HEAP32[$186 >> 2] = $18; //@line 4569
     $187 = $ReallocAsyncCtx10 + 32 | 0; //@line 4570
     HEAP32[$187 >> 2] = $24; //@line 4571
     $188 = $ReallocAsyncCtx10 + 36 | 0; //@line 4572
     HEAP32[$188 >> 2] = $26; //@line 4573
     $189 = $ReallocAsyncCtx10 + 40 | 0; //@line 4574
     HEAP32[$189 >> 2] = $28; //@line 4575
     $190 = $ReallocAsyncCtx10 + 44 | 0; //@line 4576
     HEAP32[$190 >> 2] = $30; //@line 4577
     $191 = $ReallocAsyncCtx10 + 48 | 0; //@line 4578
     HEAP32[$191 >> 2] = $34; //@line 4579
     $192 = $ReallocAsyncCtx10 + 52 | 0; //@line 4580
     HEAP32[$192 >> 2] = $36; //@line 4581
     $193 = $ReallocAsyncCtx10 + 56 | 0; //@line 4582
     HEAP32[$193 >> 2] = $40; //@line 4583
     $194 = $ReallocAsyncCtx10 + 60 | 0; //@line 4584
     HEAP32[$194 >> 2] = $42; //@line 4585
     $195 = $ReallocAsyncCtx10 + 64 | 0; //@line 4586
     HEAP32[$195 >> 2] = $$reg2mem64$0; //@line 4587
     sp = STACKTOP; //@line 4588
     return;
    } else if ((label | 0) == 37) {
     $197 = $$1202$in$i$reg2mem$0 & 65535; //@line 4592
     if (($$1202$i$reg2mem$0 + -1 & 65535) > 254) {
      break;
     }
     $200 = HEAP32[$18 >> 2] | 0; //@line 4598
     if (HEAP32[$200 + 52 >> 2] | 0) {
      break;
     }
     HEAP16[$200 + 4 >> 1] = $$1202$i$reg2mem$0; //@line 4606
     $205 = $$reg2mem$0 + 1 | 0; //@line 4607
     HEAP32[$6 >> 2] = $205; //@line 4608
     $206 = HEAP32[$14 >> 2] | 0; //@line 4609
     $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 4610
     $207 = FUNCTION_TABLE_ii[$206 & 15]($$1202$i$reg2mem$0) | 0; //@line 4611
     if (___async) {
      HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 4614
      $208 = $ReallocAsyncCtx5 + 4 | 0; //@line 4615
      HEAP32[$208 >> 2] = $2; //@line 4616
      $209 = $ReallocAsyncCtx5 + 8 | 0; //@line 4617
      HEAP32[$209 >> 2] = $6; //@line 4618
      $210 = $ReallocAsyncCtx5 + 12 | 0; //@line 4619
      HEAP32[$210 >> 2] = $10; //@line 4620
      $211 = $ReallocAsyncCtx5 + 16 | 0; //@line 4621
      HEAP32[$211 >> 2] = $12; //@line 4622
      $212 = $ReallocAsyncCtx5 + 20 | 0; //@line 4623
      HEAP32[$212 >> 2] = $14; //@line 4624
      $213 = $ReallocAsyncCtx5 + 24 | 0; //@line 4625
      HEAP32[$213 >> 2] = $16; //@line 4626
      $214 = $ReallocAsyncCtx5 + 28 | 0; //@line 4627
      HEAP32[$214 >> 2] = $18; //@line 4628
      $215 = $ReallocAsyncCtx5 + 32 | 0; //@line 4629
      HEAP32[$215 >> 2] = $24; //@line 4630
      $216 = $ReallocAsyncCtx5 + 36 | 0; //@line 4631
      HEAP32[$216 >> 2] = $26; //@line 4632
      $217 = $ReallocAsyncCtx5 + 40 | 0; //@line 4633
      HEAP32[$217 >> 2] = $28; //@line 4634
      $218 = $ReallocAsyncCtx5 + 44 | 0; //@line 4635
      HEAP32[$218 >> 2] = $30; //@line 4636
      $219 = $ReallocAsyncCtx5 + 48 | 0; //@line 4637
      HEAP32[$219 >> 2] = $34; //@line 4638
      $220 = $ReallocAsyncCtx5 + 52 | 0; //@line 4639
      HEAP32[$220 >> 2] = $36; //@line 4640
      $221 = $ReallocAsyncCtx5 + 56 | 0; //@line 4641
      HEAP32[$221 >> 2] = $40; //@line 4642
      $222 = $ReallocAsyncCtx5 + 60 | 0; //@line 4643
      HEAP32[$222 >> 2] = $42; //@line 4644
      $223 = $ReallocAsyncCtx5 + 64 | 0; //@line 4645
      HEAP32[$223 >> 2] = $$reg2mem64$0; //@line 4646
      $224 = $ReallocAsyncCtx5 + 68 | 0; //@line 4647
      HEAP32[$224 >> 2] = $205; //@line 4648
      $225 = $ReallocAsyncCtx5 + 72 | 0; //@line 4649
      HEAP32[$225 >> 2] = $197; //@line 4650
      sp = STACKTOP; //@line 4651
      return;
     }
     HEAP32[___async_retval >> 2] = $207; //@line 4655
     ___async_unwind = 0; //@line 4656
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 4657
     $208 = $ReallocAsyncCtx5 + 4 | 0; //@line 4658
     HEAP32[$208 >> 2] = $2; //@line 4659
     $209 = $ReallocAsyncCtx5 + 8 | 0; //@line 4660
     HEAP32[$209 >> 2] = $6; //@line 4661
     $210 = $ReallocAsyncCtx5 + 12 | 0; //@line 4662
     HEAP32[$210 >> 2] = $10; //@line 4663
     $211 = $ReallocAsyncCtx5 + 16 | 0; //@line 4664
     HEAP32[$211 >> 2] = $12; //@line 4665
     $212 = $ReallocAsyncCtx5 + 20 | 0; //@line 4666
     HEAP32[$212 >> 2] = $14; //@line 4667
     $213 = $ReallocAsyncCtx5 + 24 | 0; //@line 4668
     HEAP32[$213 >> 2] = $16; //@line 4669
     $214 = $ReallocAsyncCtx5 + 28 | 0; //@line 4670
     HEAP32[$214 >> 2] = $18; //@line 4671
     $215 = $ReallocAsyncCtx5 + 32 | 0; //@line 4672
     HEAP32[$215 >> 2] = $24; //@line 4673
     $216 = $ReallocAsyncCtx5 + 36 | 0; //@line 4674
     HEAP32[$216 >> 2] = $26; //@line 4675
     $217 = $ReallocAsyncCtx5 + 40 | 0; //@line 4676
     HEAP32[$217 >> 2] = $28; //@line 4677
     $218 = $ReallocAsyncCtx5 + 44 | 0; //@line 4678
     HEAP32[$218 >> 2] = $30; //@line 4679
     $219 = $ReallocAsyncCtx5 + 48 | 0; //@line 4680
     HEAP32[$219 >> 2] = $34; //@line 4681
     $220 = $ReallocAsyncCtx5 + 52 | 0; //@line 4682
     HEAP32[$220 >> 2] = $36; //@line 4683
     $221 = $ReallocAsyncCtx5 + 56 | 0; //@line 4684
     HEAP32[$221 >> 2] = $40; //@line 4685
     $222 = $ReallocAsyncCtx5 + 60 | 0; //@line 4686
     HEAP32[$222 >> 2] = $42; //@line 4687
     $223 = $ReallocAsyncCtx5 + 64 | 0; //@line 4688
     HEAP32[$223 >> 2] = $$reg2mem64$0; //@line 4689
     $224 = $ReallocAsyncCtx5 + 68 | 0; //@line 4690
     HEAP32[$224 >> 2] = $205; //@line 4691
     $225 = $ReallocAsyncCtx5 + 72 | 0; //@line 4692
     HEAP32[$225 >> 2] = $197; //@line 4693
     sp = STACKTOP; //@line 4694
     return;
    } else if ((label | 0) == 42) {
     $227 = HEAP32[$18 >> 2] | 0; //@line 4698
     $228 = $227 + 56 | 0; //@line 4699
     if (HEAP32[$228 >> 2] | 0) {
      break;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 4706
     $232 = _sn_coap_parser_options_parse_multiple_options($36, $6, $$reg2mem75$0, $228, $227 + 6 | 0, 8, $$1202$i$reg2mem$0) | 0; //@line 4707
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 4710
      $233 = $ReallocAsyncCtx9 + 4 | 0; //@line 4711
      HEAP32[$233 >> 2] = $2; //@line 4712
      $234 = $ReallocAsyncCtx9 + 8 | 0; //@line 4713
      HEAP32[$234 >> 2] = $6; //@line 4714
      $235 = $ReallocAsyncCtx9 + 12 | 0; //@line 4715
      HEAP32[$235 >> 2] = $10; //@line 4716
      $236 = $ReallocAsyncCtx9 + 16 | 0; //@line 4717
      HEAP32[$236 >> 2] = $12; //@line 4718
      $237 = $ReallocAsyncCtx9 + 20 | 0; //@line 4719
      HEAP32[$237 >> 2] = $14; //@line 4720
      $238 = $ReallocAsyncCtx9 + 24 | 0; //@line 4721
      HEAP32[$238 >> 2] = $16; //@line 4722
      $239 = $ReallocAsyncCtx9 + 28 | 0; //@line 4723
      HEAP32[$239 >> 2] = $18; //@line 4724
      $240 = $ReallocAsyncCtx9 + 32 | 0; //@line 4725
      HEAP32[$240 >> 2] = $24; //@line 4726
      $241 = $ReallocAsyncCtx9 + 36 | 0; //@line 4727
      HEAP32[$241 >> 2] = $26; //@line 4728
      $242 = $ReallocAsyncCtx9 + 40 | 0; //@line 4729
      HEAP32[$242 >> 2] = $28; //@line 4730
      $243 = $ReallocAsyncCtx9 + 44 | 0; //@line 4731
      HEAP32[$243 >> 2] = $30; //@line 4732
      $244 = $ReallocAsyncCtx9 + 48 | 0; //@line 4733
      HEAP32[$244 >> 2] = $34; //@line 4734
      $245 = $ReallocAsyncCtx9 + 52 | 0; //@line 4735
      HEAP32[$245 >> 2] = $36; //@line 4736
      $246 = $ReallocAsyncCtx9 + 56 | 0; //@line 4737
      HEAP32[$246 >> 2] = $40; //@line 4738
      $247 = $ReallocAsyncCtx9 + 60 | 0; //@line 4739
      HEAP32[$247 >> 2] = $42; //@line 4740
      $248 = $ReallocAsyncCtx9 + 64 | 0; //@line 4741
      HEAP32[$248 >> 2] = $$reg2mem64$0; //@line 4742
      sp = STACKTOP; //@line 4743
      return;
     }
     HEAP8[___async_retval >> 0] = $232; //@line 4747
     ___async_unwind = 0; //@line 4748
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 4749
     $233 = $ReallocAsyncCtx9 + 4 | 0; //@line 4750
     HEAP32[$233 >> 2] = $2; //@line 4751
     $234 = $ReallocAsyncCtx9 + 8 | 0; //@line 4752
     HEAP32[$234 >> 2] = $6; //@line 4753
     $235 = $ReallocAsyncCtx9 + 12 | 0; //@line 4754
     HEAP32[$235 >> 2] = $10; //@line 4755
     $236 = $ReallocAsyncCtx9 + 16 | 0; //@line 4756
     HEAP32[$236 >> 2] = $12; //@line 4757
     $237 = $ReallocAsyncCtx9 + 20 | 0; //@line 4758
     HEAP32[$237 >> 2] = $14; //@line 4759
     $238 = $ReallocAsyncCtx9 + 24 | 0; //@line 4760
     HEAP32[$238 >> 2] = $16; //@line 4761
     $239 = $ReallocAsyncCtx9 + 28 | 0; //@line 4762
     HEAP32[$239 >> 2] = $18; //@line 4763
     $240 = $ReallocAsyncCtx9 + 32 | 0; //@line 4764
     HEAP32[$240 >> 2] = $24; //@line 4765
     $241 = $ReallocAsyncCtx9 + 36 | 0; //@line 4766
     HEAP32[$241 >> 2] = $26; //@line 4767
     $242 = $ReallocAsyncCtx9 + 40 | 0; //@line 4768
     HEAP32[$242 >> 2] = $28; //@line 4769
     $243 = $ReallocAsyncCtx9 + 44 | 0; //@line 4770
     HEAP32[$243 >> 2] = $30; //@line 4771
     $244 = $ReallocAsyncCtx9 + 48 | 0; //@line 4772
     HEAP32[$244 >> 2] = $34; //@line 4773
     $245 = $ReallocAsyncCtx9 + 52 | 0; //@line 4774
     HEAP32[$245 >> 2] = $36; //@line 4775
     $246 = $ReallocAsyncCtx9 + 56 | 0; //@line 4776
     HEAP32[$246 >> 2] = $40; //@line 4777
     $247 = $ReallocAsyncCtx9 + 60 | 0; //@line 4778
     HEAP32[$247 >> 2] = $42; //@line 4779
     $248 = $ReallocAsyncCtx9 + 64 | 0; //@line 4780
     HEAP32[$248 >> 2] = $$reg2mem64$0; //@line 4781
     sp = STACKTOP; //@line 4782
     return;
    } else if ((label | 0) == 51) {
     $266 = HEAP32[$18 >> 2] | 0; //@line 4786
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 4789
     $269 = _sn_coap_parser_options_parse_multiple_options($36, $6, $$reg2mem75$0, $266 + 60 | 0, $266 + 8 | 0, 20, $$1202$i$reg2mem$0) | 0; //@line 4790
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 4793
      $270 = $ReallocAsyncCtx8 + 4 | 0; //@line 4794
      HEAP32[$270 >> 2] = $2; //@line 4795
      $271 = $ReallocAsyncCtx8 + 8 | 0; //@line 4796
      HEAP32[$271 >> 2] = $6; //@line 4797
      $272 = $ReallocAsyncCtx8 + 12 | 0; //@line 4798
      HEAP32[$272 >> 2] = $10; //@line 4799
      $273 = $ReallocAsyncCtx8 + 16 | 0; //@line 4800
      HEAP32[$273 >> 2] = $12; //@line 4801
      $274 = $ReallocAsyncCtx8 + 20 | 0; //@line 4802
      HEAP32[$274 >> 2] = $14; //@line 4803
      $275 = $ReallocAsyncCtx8 + 24 | 0; //@line 4804
      HEAP32[$275 >> 2] = $16; //@line 4805
      $276 = $ReallocAsyncCtx8 + 28 | 0; //@line 4806
      HEAP32[$276 >> 2] = $18; //@line 4807
      $277 = $ReallocAsyncCtx8 + 32 | 0; //@line 4808
      HEAP32[$277 >> 2] = $24; //@line 4809
      $278 = $ReallocAsyncCtx8 + 36 | 0; //@line 4810
      HEAP32[$278 >> 2] = $26; //@line 4811
      $279 = $ReallocAsyncCtx8 + 40 | 0; //@line 4812
      HEAP32[$279 >> 2] = $28; //@line 4813
      $280 = $ReallocAsyncCtx8 + 44 | 0; //@line 4814
      HEAP32[$280 >> 2] = $30; //@line 4815
      $281 = $ReallocAsyncCtx8 + 48 | 0; //@line 4816
      HEAP32[$281 >> 2] = $34; //@line 4817
      $282 = $ReallocAsyncCtx8 + 52 | 0; //@line 4818
      HEAP32[$282 >> 2] = $36; //@line 4819
      $283 = $ReallocAsyncCtx8 + 56 | 0; //@line 4820
      HEAP32[$283 >> 2] = $40; //@line 4821
      $284 = $ReallocAsyncCtx8 + 60 | 0; //@line 4822
      HEAP32[$284 >> 2] = $42; //@line 4823
      $285 = $ReallocAsyncCtx8 + 64 | 0; //@line 4824
      HEAP32[$285 >> 2] = $$reg2mem64$0; //@line 4825
      sp = STACKTOP; //@line 4826
      return;
     }
     HEAP8[___async_retval >> 0] = $269; //@line 4830
     ___async_unwind = 0; //@line 4831
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 4832
     $270 = $ReallocAsyncCtx8 + 4 | 0; //@line 4833
     HEAP32[$270 >> 2] = $2; //@line 4834
     $271 = $ReallocAsyncCtx8 + 8 | 0; //@line 4835
     HEAP32[$271 >> 2] = $6; //@line 4836
     $272 = $ReallocAsyncCtx8 + 12 | 0; //@line 4837
     HEAP32[$272 >> 2] = $10; //@line 4838
     $273 = $ReallocAsyncCtx8 + 16 | 0; //@line 4839
     HEAP32[$273 >> 2] = $12; //@line 4840
     $274 = $ReallocAsyncCtx8 + 20 | 0; //@line 4841
     HEAP32[$274 >> 2] = $14; //@line 4842
     $275 = $ReallocAsyncCtx8 + 24 | 0; //@line 4843
     HEAP32[$275 >> 2] = $16; //@line 4844
     $276 = $ReallocAsyncCtx8 + 28 | 0; //@line 4845
     HEAP32[$276 >> 2] = $18; //@line 4846
     $277 = $ReallocAsyncCtx8 + 32 | 0; //@line 4847
     HEAP32[$277 >> 2] = $24; //@line 4848
     $278 = $ReallocAsyncCtx8 + 36 | 0; //@line 4849
     HEAP32[$278 >> 2] = $26; //@line 4850
     $279 = $ReallocAsyncCtx8 + 40 | 0; //@line 4851
     HEAP32[$279 >> 2] = $28; //@line 4852
     $280 = $ReallocAsyncCtx8 + 44 | 0; //@line 4853
     HEAP32[$280 >> 2] = $30; //@line 4854
     $281 = $ReallocAsyncCtx8 + 48 | 0; //@line 4855
     HEAP32[$281 >> 2] = $34; //@line 4856
     $282 = $ReallocAsyncCtx8 + 52 | 0; //@line 4857
     HEAP32[$282 >> 2] = $36; //@line 4858
     $283 = $ReallocAsyncCtx8 + 56 | 0; //@line 4859
     HEAP32[$283 >> 2] = $40; //@line 4860
     $284 = $ReallocAsyncCtx8 + 60 | 0; //@line 4861
     HEAP32[$284 >> 2] = $42; //@line 4862
     $285 = $ReallocAsyncCtx8 + 64 | 0; //@line 4863
     HEAP32[$285 >> 2] = $$reg2mem64$0; //@line 4864
     sp = STACKTOP; //@line 4865
     return;
    } else if ((label | 0) == 54) {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 4869
     $287 = _sn_coap_parser_options_parse_multiple_options($36, $6, $$reg2mem75$1, $40, $42, 11, $$1202$i$reg2mem$2) | 0; //@line 4870
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 4873
      $288 = $ReallocAsyncCtx7 + 4 | 0; //@line 4874
      HEAP32[$288 >> 2] = $2; //@line 4875
      $289 = $ReallocAsyncCtx7 + 8 | 0; //@line 4876
      HEAP32[$289 >> 2] = $6; //@line 4877
      $290 = $ReallocAsyncCtx7 + 12 | 0; //@line 4878
      HEAP32[$290 >> 2] = $10; //@line 4879
      $291 = $ReallocAsyncCtx7 + 16 | 0; //@line 4880
      HEAP32[$291 >> 2] = $12; //@line 4881
      $292 = $ReallocAsyncCtx7 + 20 | 0; //@line 4882
      HEAP32[$292 >> 2] = $14; //@line 4883
      $293 = $ReallocAsyncCtx7 + 24 | 0; //@line 4884
      HEAP32[$293 >> 2] = $16; //@line 4885
      $294 = $ReallocAsyncCtx7 + 28 | 0; //@line 4886
      HEAP32[$294 >> 2] = $18; //@line 4887
      $295 = $ReallocAsyncCtx7 + 32 | 0; //@line 4888
      HEAP32[$295 >> 2] = $24; //@line 4889
      $296 = $ReallocAsyncCtx7 + 36 | 0; //@line 4890
      HEAP32[$296 >> 2] = $26; //@line 4891
      $297 = $ReallocAsyncCtx7 + 40 | 0; //@line 4892
      HEAP32[$297 >> 2] = $28; //@line 4893
      $298 = $ReallocAsyncCtx7 + 44 | 0; //@line 4894
      HEAP32[$298 >> 2] = $30; //@line 4895
      $299 = $ReallocAsyncCtx7 + 48 | 0; //@line 4896
      HEAP32[$299 >> 2] = $34; //@line 4897
      $300 = $ReallocAsyncCtx7 + 52 | 0; //@line 4898
      HEAP32[$300 >> 2] = $36; //@line 4899
      $301 = $ReallocAsyncCtx7 + 56 | 0; //@line 4900
      HEAP32[$301 >> 2] = $40; //@line 4901
      $302 = $ReallocAsyncCtx7 + 60 | 0; //@line 4902
      HEAP32[$302 >> 2] = $42; //@line 4903
      $303 = $ReallocAsyncCtx7 + 64 | 0; //@line 4904
      HEAP32[$303 >> 2] = $$reg2mem64$2; //@line 4905
      sp = STACKTOP; //@line 4906
      return;
     }
     HEAP8[___async_retval >> 0] = $287; //@line 4910
     ___async_unwind = 0; //@line 4911
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 4912
     $288 = $ReallocAsyncCtx7 + 4 | 0; //@line 4913
     HEAP32[$288 >> 2] = $2; //@line 4914
     $289 = $ReallocAsyncCtx7 + 8 | 0; //@line 4915
     HEAP32[$289 >> 2] = $6; //@line 4916
     $290 = $ReallocAsyncCtx7 + 12 | 0; //@line 4917
     HEAP32[$290 >> 2] = $10; //@line 4918
     $291 = $ReallocAsyncCtx7 + 16 | 0; //@line 4919
     HEAP32[$291 >> 2] = $12; //@line 4920
     $292 = $ReallocAsyncCtx7 + 20 | 0; //@line 4921
     HEAP32[$292 >> 2] = $14; //@line 4922
     $293 = $ReallocAsyncCtx7 + 24 | 0; //@line 4923
     HEAP32[$293 >> 2] = $16; //@line 4924
     $294 = $ReallocAsyncCtx7 + 28 | 0; //@line 4925
     HEAP32[$294 >> 2] = $18; //@line 4926
     $295 = $ReallocAsyncCtx7 + 32 | 0; //@line 4927
     HEAP32[$295 >> 2] = $24; //@line 4928
     $296 = $ReallocAsyncCtx7 + 36 | 0; //@line 4929
     HEAP32[$296 >> 2] = $26; //@line 4930
     $297 = $ReallocAsyncCtx7 + 40 | 0; //@line 4931
     HEAP32[$297 >> 2] = $28; //@line 4932
     $298 = $ReallocAsyncCtx7 + 44 | 0; //@line 4933
     HEAP32[$298 >> 2] = $30; //@line 4934
     $299 = $ReallocAsyncCtx7 + 48 | 0; //@line 4935
     HEAP32[$299 >> 2] = $34; //@line 4936
     $300 = $ReallocAsyncCtx7 + 52 | 0; //@line 4937
     HEAP32[$300 >> 2] = $36; //@line 4938
     $301 = $ReallocAsyncCtx7 + 56 | 0; //@line 4939
     HEAP32[$301 >> 2] = $40; //@line 4940
     $302 = $ReallocAsyncCtx7 + 60 | 0; //@line 4941
     HEAP32[$302 >> 2] = $42; //@line 4942
     $303 = $ReallocAsyncCtx7 + 64 | 0; //@line 4943
     HEAP32[$303 >> 2] = $$reg2mem64$2; //@line 4944
     sp = STACKTOP; //@line 4945
     return;
    } else if ((label | 0) == 62) {
     $321 = HEAP32[$18 >> 2] | 0; //@line 4949
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 4952
     $324 = _sn_coap_parser_options_parse_multiple_options($36, $6, $$reg2mem75$0, $321 + 64 | 0, $321 + 10 | 0, 15, $$1202$i$reg2mem$0) | 0; //@line 4953
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 4956
      $325 = $ReallocAsyncCtx6 + 4 | 0; //@line 4957
      HEAP32[$325 >> 2] = $2; //@line 4958
      $326 = $ReallocAsyncCtx6 + 8 | 0; //@line 4959
      HEAP32[$326 >> 2] = $6; //@line 4960
      $327 = $ReallocAsyncCtx6 + 12 | 0; //@line 4961
      HEAP32[$327 >> 2] = $10; //@line 4962
      $328 = $ReallocAsyncCtx6 + 16 | 0; //@line 4963
      HEAP32[$328 >> 2] = $12; //@line 4964
      $329 = $ReallocAsyncCtx6 + 20 | 0; //@line 4965
      HEAP32[$329 >> 2] = $14; //@line 4966
      $330 = $ReallocAsyncCtx6 + 24 | 0; //@line 4967
      HEAP32[$330 >> 2] = $16; //@line 4968
      $331 = $ReallocAsyncCtx6 + 28 | 0; //@line 4969
      HEAP32[$331 >> 2] = $18; //@line 4970
      $332 = $ReallocAsyncCtx6 + 32 | 0; //@line 4971
      HEAP32[$332 >> 2] = $24; //@line 4972
      $333 = $ReallocAsyncCtx6 + 36 | 0; //@line 4973
      HEAP32[$333 >> 2] = $26; //@line 4974
      $334 = $ReallocAsyncCtx6 + 40 | 0; //@line 4975
      HEAP32[$334 >> 2] = $28; //@line 4976
      $335 = $ReallocAsyncCtx6 + 44 | 0; //@line 4977
      HEAP32[$335 >> 2] = $30; //@line 4978
      $336 = $ReallocAsyncCtx6 + 48 | 0; //@line 4979
      HEAP32[$336 >> 2] = $34; //@line 4980
      $337 = $ReallocAsyncCtx6 + 52 | 0; //@line 4981
      HEAP32[$337 >> 2] = $36; //@line 4982
      $338 = $ReallocAsyncCtx6 + 56 | 0; //@line 4983
      HEAP32[$338 >> 2] = $40; //@line 4984
      $339 = $ReallocAsyncCtx6 + 60 | 0; //@line 4985
      HEAP32[$339 >> 2] = $42; //@line 4986
      $340 = $ReallocAsyncCtx6 + 64 | 0; //@line 4987
      HEAP32[$340 >> 2] = $$reg2mem64$0; //@line 4988
      sp = STACKTOP; //@line 4989
      return;
     }
     HEAP8[___async_retval >> 0] = $324; //@line 4993
     ___async_unwind = 0; //@line 4994
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 4995
     $325 = $ReallocAsyncCtx6 + 4 | 0; //@line 4996
     HEAP32[$325 >> 2] = $2; //@line 4997
     $326 = $ReallocAsyncCtx6 + 8 | 0; //@line 4998
     HEAP32[$326 >> 2] = $6; //@line 4999
     $327 = $ReallocAsyncCtx6 + 12 | 0; //@line 5000
     HEAP32[$327 >> 2] = $10; //@line 5001
     $328 = $ReallocAsyncCtx6 + 16 | 0; //@line 5002
     HEAP32[$328 >> 2] = $12; //@line 5003
     $329 = $ReallocAsyncCtx6 + 20 | 0; //@line 5004
     HEAP32[$329 >> 2] = $14; //@line 5005
     $330 = $ReallocAsyncCtx6 + 24 | 0; //@line 5006
     HEAP32[$330 >> 2] = $16; //@line 5007
     $331 = $ReallocAsyncCtx6 + 28 | 0; //@line 5008
     HEAP32[$331 >> 2] = $18; //@line 5009
     $332 = $ReallocAsyncCtx6 + 32 | 0; //@line 5010
     HEAP32[$332 >> 2] = $24; //@line 5011
     $333 = $ReallocAsyncCtx6 + 36 | 0; //@line 5012
     HEAP32[$333 >> 2] = $26; //@line 5013
     $334 = $ReallocAsyncCtx6 + 40 | 0; //@line 5014
     HEAP32[$334 >> 2] = $28; //@line 5015
     $335 = $ReallocAsyncCtx6 + 44 | 0; //@line 5016
     HEAP32[$335 >> 2] = $30; //@line 5017
     $336 = $ReallocAsyncCtx6 + 48 | 0; //@line 5018
     HEAP32[$336 >> 2] = $34; //@line 5019
     $337 = $ReallocAsyncCtx6 + 52 | 0; //@line 5020
     HEAP32[$337 >> 2] = $36; //@line 5021
     $338 = $ReallocAsyncCtx6 + 56 | 0; //@line 5022
     HEAP32[$338 >> 2] = $40; //@line 5023
     $339 = $ReallocAsyncCtx6 + 60 | 0; //@line 5024
     HEAP32[$339 >> 2] = $42; //@line 5025
     $340 = $ReallocAsyncCtx6 + 64 | 0; //@line 5026
     HEAP32[$340 >> 2] = $$reg2mem64$0; //@line 5027
     sp = STACKTOP; //@line 5028
     return;
    } else if ((label | 0) == 92) {
     if (($47 - $24 | 0) >= ($26 | 0)) {
      $451 = ___async_retval; //@line 5036
      HEAP32[$451 >> 2] = $10; //@line 5037
      return;
     }
     if ((HEAP8[$47 >> 0] | 0) == -1) {
      $441 = $47 + 1 | 0; //@line 5043
      HEAP32[$6 >> 2] = $441; //@line 5044
      $442 = $441; //@line 5045
      $444 = $24 - $442 + $26 | 0; //@line 5047
      HEAP16[$16 + 24 >> 1] = $444; //@line 5050
      if ($444 & 65535 | 0) {
       HEAP32[$16 + 36 >> 2] = $442; //@line 5055
       $451 = ___async_retval; //@line 5056
       HEAP32[$451 >> 2] = $10; //@line 5057
       return;
      }
     }
     HEAP32[$16 + 4 >> 2] = 1; //@line 5062
     $451 = ___async_retval; //@line 5063
     HEAP32[$451 >> 2] = $10; //@line 5064
     return;
    }
   }
  }
 } while (0);
 HEAP32[$16 + 4 >> 2] = 1; //@line 5071
 $451 = ___async_retval; //@line 5072
 HEAP32[$451 >> 2] = $10; //@line 5073
 return;
}
function _sn_coap_parser__async_cb_91($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $246$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 12105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12107
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12111
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12113
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12115
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12117
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12119
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12121
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12123
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12125
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12127
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12129
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12131
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12133
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12135
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 12143
   L3 : while (1) {
    $417 = HEAP32[$22 >> 2] | 0; //@line 12145
    $418 = $417 - $16 | 0; //@line 12146
    $37 = $417; //@line 12149
    if (($418 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 12156
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 12159
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 12162
     break;
    }
    $40 = $trunc277$i & 15; //@line 12166
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 12167
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 12179
      $$sink214$i = 13; //@line 12179
      $$sink3$i = 1; //@line 12179
      label = 7; //@line 12180
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 12192
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 12192
      $$sink3$i = 2; //@line 12192
      label = 7; //@line 12193
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 12197
      $437 = $417; //@line 12197
      $59 = $37; //@line 12197
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 12201
     $54 = $37 + $$sink3$i | 0; //@line 12203
     HEAP32[$4 >> 2] = $54; //@line 12204
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 12206
     $437 = $54; //@line 12206
     $59 = $54; //@line 12206
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 12209
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 12220
      $$sink216$i = 13; //@line 12220
      $$sink8$i = 1; //@line 12220
      label = 11; //@line 12221
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 12233
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 12233
      $$sink8$i = 2; //@line 12233
      label = 11; //@line 12234
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 12238
      $74 = $437; //@line 12238
      $82 = $59; //@line 12238
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 12242
     $71 = $59 + $$sink8$i | 0; //@line 12244
     HEAP32[$4 >> 2] = $71; //@line 12245
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 12247
     $74 = $71; //@line 12247
     $82 = $71; //@line 12247
    }
    $$1202$i = $$1202$in$i & 65535; //@line 12249
    $75 = $20 - $74 & 65535; //@line 12251
    $trunc$i = $57 & 65535; //@line 12252
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 53; //@line 12256
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 12264
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 12269
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 12274
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 12279
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 12284
         break L3;
         break;
        }
       case 20:
        {
         label = 50; //@line 12289
         break L3;
         break;
        }
       case 11:
        {
         label = 53; //@line 12294
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 12299
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $82 + 1 | 0; //@line 12312
         HEAP32[$4 >> 2] = $118; //@line 12313
         $119 = $$1202$in$i & 255; //@line 12314
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 12317
         } else {
          $$045$i256$i = $119; //@line 12319
          $$06$i255$i = 0; //@line 12319
          $124 = $118; //@line 12319
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 12321
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 12323
           HEAP32[$4 >> 2] = $124; //@line 12324
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 12327
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 12330
            break;
           } else {
            $$06$i255$i = $127; //@line 12333
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 12339
         $$reg2mem$0 = $57; //@line 12340
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $237 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 12350
         if ((HEAP32[$237 >> 2] | 0) != -1) {
          break L2;
         }
         $240 = $82 + 1 | 0; //@line 12356
         HEAP32[$4 >> 2] = $240; //@line 12357
         $241 = $$1202$in$i & 255; //@line 12358
         if (!($241 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 12361
         } else {
          $$045$i270$i = $241; //@line 12363
          $$06$i269$i = 0; //@line 12363
          $246 = $240; //@line 12363
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 12365
           $246$looptemp = $246;
           $246 = $246 + 1 | 0; //@line 12367
           HEAP32[$4 >> 2] = $246; //@line 12368
           $249 = $$06$i269$i << 8 | HEAPU8[$246$looptemp >> 0]; //@line 12371
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $249; //@line 12374
            break;
           } else {
            $$06$i269$i = $249; //@line 12377
           }
          }
         }
         HEAP32[$237 >> 2] = $$0$lcssa$i272$i; //@line 12381
         $$reg2mem$0 = $57; //@line 12382
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 12392
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $82 + 1 | 0; //@line 12398
         HEAP32[$4 >> 2] = $295; //@line 12399
         $296 = $$1202$in$i & 255; //@line 12400
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 12403
         } else {
          $$045$i263$i = $296; //@line 12405
          $$06$i262$i = 0; //@line 12405
          $301 = $295; //@line 12405
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 12407
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 12409
           HEAP32[$4 >> 2] = $301; //@line 12410
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 12413
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 12416
            break;
           } else {
            $$06$i262$i = $304; //@line 12419
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 12423
         $$reg2mem$0 = $57; //@line 12424
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 12434
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $82 + 1 | 0; //@line 12440
         HEAP32[$4 >> 2] = $332; //@line 12441
         $333 = $$1202$in$i & 255; //@line 12442
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 12445
         } else {
          $$045$i249$i = $333; //@line 12447
          $$06$i248$i = 0; //@line 12447
          $338 = $332; //@line 12447
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 12449
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 12451
           HEAP32[$4 >> 2] = $338; //@line 12452
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 12455
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 12458
            break;
           } else {
            $$06$i248$i = $341; //@line 12461
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 12465
         $$reg2mem$0 = $57; //@line 12466
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 12476
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $82 + 1 | 0; //@line 12482
         HEAP32[$4 >> 2] = $348; //@line 12483
         $349 = $$1202$in$i & 255; //@line 12484
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 12487
         } else {
          $$045$i242$i = $349; //@line 12489
          $$06$i241$i = 0; //@line 12489
          $354 = $348; //@line 12489
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 12491
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 12493
           HEAP32[$4 >> 2] = $354; //@line 12494
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 12497
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 12500
            break;
           } else {
            $$06$i241$i = $357; //@line 12503
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 12507
         $$reg2mem$0 = $57; //@line 12508
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 12518
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $82 + 1 | 0; //@line 12524
         HEAP32[$4 >> 2] = $364; //@line 12525
         $365 = $$1202$in$i & 255; //@line 12526
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 12529
         } else {
          $$045$i235$i = $365; //@line 12531
          $$06$i234$i = 0; //@line 12531
          $370 = $364; //@line 12531
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 12533
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 12535
           HEAP32[$4 >> 2] = $370; //@line 12536
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 12539
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 12542
            break;
           } else {
            $$06$i234$i = $373; //@line 12545
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 12549
         $$reg2mem$0 = $57; //@line 12550
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 12560
         $378 = HEAP8[$377 >> 0] | 0; //@line 12561
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 12568
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 12570
         HEAP32[$4 >> 2] = $383; //@line 12571
         $384 = $$1202$in$i & 255; //@line 12572
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 12575
         } else {
          $$045$i228$i = $384; //@line 12577
          $$06$i227$i = 0; //@line 12577
          $389 = $383; //@line 12577
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 12579
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 12581
           HEAP32[$4 >> 2] = $389; //@line 12582
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 12585
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 12588
            break;
           } else {
            $$06$i227$i = $392; //@line 12591
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 12597
         $$reg2mem$0 = $57; //@line 12598
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 12608
         $399 = HEAP8[$398 >> 0] | 0; //@line 12609
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 12616
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 12618
         HEAP32[$4 >> 2] = $404; //@line 12619
         $405 = $$1202$in$i & 255; //@line 12620
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 12623
         } else {
          $$045$i221$i = $405; //@line 12625
          $$06$i220$i = 0; //@line 12625
          $410 = $404; //@line 12625
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 12627
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 12629
           HEAP32[$4 >> 2] = $410; //@line 12630
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 12633
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 12636
            break;
           } else {
            $$06$i220$i = $413; //@line 12639
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 12645
         $$reg2mem$0 = $57; //@line 12646
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $82 + 1 | 0; //@line 12673
    HEAP32[$4 >> 2] = $106; //@line 12674
    $107 = $$1202$in$i & 255; //@line 12675
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 12678
    } else {
     $$045$i$i = $107; //@line 12680
     $$06$i$i = 0; //@line 12680
     $112 = $106; //@line 12680
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 12682
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 12684
      HEAP32[$4 >> 2] = $112; //@line 12685
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 12688
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 12691
       break;
      } else {
       $$06$i$i = $115; //@line 12694
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 12698
    $$reg2mem$0 = $57; //@line 12699
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$10 >> 2] | 0; //@line 12702
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 12703
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 12704
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 12707
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 12708
     HEAP32[$80 >> 2] = $2; //@line 12709
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 12710
     HEAP32[$81 >> 2] = $82; //@line 12711
     $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 12712
     HEAP32[$83 >> 2] = $4; //@line 12713
     $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 12714
     HEAP32[$84 >> 2] = $$1202$in$i; //@line 12715
     $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 12716
     HEAP32[$85 >> 2] = $6; //@line 12717
     $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 12718
     HEAP32[$86 >> 2] = $8; //@line 12719
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 12720
     HEAP32[$87 >> 2] = $10; //@line 12721
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 12722
     HEAP32[$88 >> 2] = $12; //@line 12723
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 12724
     HEAP32[$89 >> 2] = $14; //@line 12725
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 12726
     HEAP16[$90 >> 1] = $trunc$i; //@line 12727
     $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 12728
     HEAP16[$91 >> 1] = $$1202$i; //@line 12729
     $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 12730
     HEAP32[$92 >> 2] = $16; //@line 12731
     $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 12732
     HEAP32[$93 >> 2] = $18; //@line 12733
     $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 12734
     HEAP32[$94 >> 2] = $20; //@line 12735
     $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 12736
     HEAP32[$95 >> 2] = $22; //@line 12737
     $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 12738
     HEAP32[$96 >> 2] = $57; //@line 12739
     $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 12740
     HEAP32[$97 >> 2] = $24; //@line 12741
     $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 12742
     HEAP32[$98 >> 2] = $26; //@line 12743
     $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 12744
     HEAP16[$99 >> 1] = $75; //@line 12745
     $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 12746
     HEAP32[$100 >> 2] = $28; //@line 12747
     $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 12748
     HEAP32[$101 >> 2] = $30; //@line 12749
     sp = STACKTOP; //@line 12750
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 12754
    ___async_unwind = 0; //@line 12755
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 12756
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 12757
    HEAP32[$80 >> 2] = $2; //@line 12758
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 12759
    HEAP32[$81 >> 2] = $82; //@line 12760
    $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 12761
    HEAP32[$83 >> 2] = $4; //@line 12762
    $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 12763
    HEAP32[$84 >> 2] = $$1202$in$i; //@line 12764
    $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 12765
    HEAP32[$85 >> 2] = $6; //@line 12766
    $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 12767
    HEAP32[$86 >> 2] = $8; //@line 12768
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 12769
    HEAP32[$87 >> 2] = $10; //@line 12770
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 12771
    HEAP32[$88 >> 2] = $12; //@line 12772
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 12773
    HEAP32[$89 >> 2] = $14; //@line 12774
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 12775
    HEAP16[$90 >> 1] = $trunc$i; //@line 12776
    $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 12777
    HEAP16[$91 >> 1] = $$1202$i; //@line 12778
    $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 12779
    HEAP32[$92 >> 2] = $16; //@line 12780
    $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 12781
    HEAP32[$93 >> 2] = $18; //@line 12782
    $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 12783
    HEAP32[$94 >> 2] = $20; //@line 12784
    $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 12785
    HEAP32[$95 >> 2] = $22; //@line 12786
    $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 12787
    HEAP32[$96 >> 2] = $57; //@line 12788
    $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 12789
    HEAP32[$97 >> 2] = $24; //@line 12790
    $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 12791
    HEAP32[$98 >> 2] = $26; //@line 12792
    $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 12793
    HEAP16[$99 >> 1] = $75; //@line 12794
    $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 12795
    HEAP32[$100 >> 2] = $28; //@line 12796
    $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 12797
    HEAP32[$101 >> 2] = $30; //@line 12798
    sp = STACKTOP; //@line 12799
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 12803
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$14 >> 2] | 0; //@line 12809
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 12817
    $139 = $82 + 1 | 0; //@line 12818
    HEAP32[$4 >> 2] = $139; //@line 12819
    $140 = HEAP32[$10 >> 2] | 0; //@line 12820
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 12821
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 12822
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 12825
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 12826
     HEAP32[$142 >> 2] = $2; //@line 12827
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 12828
     HEAP32[$143 >> 2] = $4; //@line 12829
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 12830
     HEAP32[$144 >> 2] = $6; //@line 12831
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 12832
     HEAP32[$145 >> 2] = $8; //@line 12833
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 12834
     HEAP32[$146 >> 2] = $10; //@line 12835
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 12836
     HEAP32[$147 >> 2] = $12; //@line 12837
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 12838
     HEAP32[$148 >> 2] = $14; //@line 12839
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 12840
     HEAP32[$149 >> 2] = $16; //@line 12841
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 12842
     HEAP32[$150 >> 2] = $18; //@line 12843
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 12844
     HEAP32[$151 >> 2] = $20; //@line 12845
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 12846
     HEAP32[$152 >> 2] = $22; //@line 12847
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 12848
     HEAP32[$153 >> 2] = $24; //@line 12849
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 12850
     HEAP32[$154 >> 2] = $26; //@line 12851
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 12852
     HEAP32[$155 >> 2] = $28; //@line 12853
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 12854
     HEAP32[$156 >> 2] = $30; //@line 12855
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 12856
     HEAP32[$157 >> 2] = $57; //@line 12857
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 12858
     HEAP32[$158 >> 2] = $139; //@line 12859
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 12860
     HEAP32[$159 >> 2] = $131; //@line 12861
     sp = STACKTOP; //@line 12862
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 12866
    ___async_unwind = 0; //@line 12867
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 12868
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 12869
    HEAP32[$142 >> 2] = $2; //@line 12870
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 12871
    HEAP32[$143 >> 2] = $4; //@line 12872
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 12873
    HEAP32[$144 >> 2] = $6; //@line 12874
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 12875
    HEAP32[$145 >> 2] = $8; //@line 12876
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 12877
    HEAP32[$146 >> 2] = $10; //@line 12878
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 12879
    HEAP32[$147 >> 2] = $12; //@line 12880
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 12881
    HEAP32[$148 >> 2] = $14; //@line 12882
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 12883
    HEAP32[$149 >> 2] = $16; //@line 12884
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 12885
    HEAP32[$150 >> 2] = $18; //@line 12886
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 12887
    HEAP32[$151 >> 2] = $20; //@line 12888
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 12889
    HEAP32[$152 >> 2] = $22; //@line 12890
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 12891
    HEAP32[$153 >> 2] = $24; //@line 12892
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 12893
    HEAP32[$154 >> 2] = $26; //@line 12894
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 12895
    HEAP32[$155 >> 2] = $28; //@line 12896
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 12897
    HEAP32[$156 >> 2] = $30; //@line 12898
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 12899
    HEAP32[$157 >> 2] = $57; //@line 12900
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 12901
    HEAP32[$158 >> 2] = $139; //@line 12902
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 12903
    HEAP32[$159 >> 2] = $131; //@line 12904
    sp = STACKTOP; //@line 12905
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$14 >> 2] | 0; //@line 12909
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 12911
    $163 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 12912
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 12915
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 12916
     HEAP32[$164 >> 2] = $2; //@line 12917
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 12918
     HEAP32[$165 >> 2] = $4; //@line 12919
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 12920
     HEAP32[$166 >> 2] = $6; //@line 12921
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 12922
     HEAP32[$167 >> 2] = $8; //@line 12923
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 12924
     HEAP32[$168 >> 2] = $10; //@line 12925
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 12926
     HEAP32[$169 >> 2] = $12; //@line 12927
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 12928
     HEAP32[$170 >> 2] = $14; //@line 12929
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 12930
     HEAP32[$171 >> 2] = $16; //@line 12931
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 12932
     HEAP32[$172 >> 2] = $18; //@line 12933
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 12934
     HEAP32[$173 >> 2] = $20; //@line 12935
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 12936
     HEAP32[$174 >> 2] = $22; //@line 12937
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 12938
     HEAP32[$175 >> 2] = $24; //@line 12939
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 12940
     HEAP32[$176 >> 2] = $26; //@line 12941
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 12942
     HEAP32[$177 >> 2] = $28; //@line 12943
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 12944
     HEAP32[$178 >> 2] = $30; //@line 12945
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 12946
     HEAP32[$179 >> 2] = $57; //@line 12947
     sp = STACKTOP; //@line 12948
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 12952
    ___async_unwind = 0; //@line 12953
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 12954
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 12955
    HEAP32[$164 >> 2] = $2; //@line 12956
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 12957
    HEAP32[$165 >> 2] = $4; //@line 12958
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 12959
    HEAP32[$166 >> 2] = $6; //@line 12960
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 12961
    HEAP32[$167 >> 2] = $8; //@line 12962
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 12963
    HEAP32[$168 >> 2] = $10; //@line 12964
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 12965
    HEAP32[$169 >> 2] = $12; //@line 12966
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 12967
    HEAP32[$170 >> 2] = $14; //@line 12968
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 12969
    HEAP32[$171 >> 2] = $16; //@line 12970
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 12971
    HEAP32[$172 >> 2] = $18; //@line 12972
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 12973
    HEAP32[$173 >> 2] = $20; //@line 12974
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 12975
    HEAP32[$174 >> 2] = $22; //@line 12976
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 12977
    HEAP32[$175 >> 2] = $24; //@line 12978
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 12979
    HEAP32[$176 >> 2] = $26; //@line 12980
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 12981
    HEAP32[$177 >> 2] = $28; //@line 12982
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 12983
    HEAP32[$178 >> 2] = $30; //@line 12984
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 12985
    HEAP32[$179 >> 2] = $57; //@line 12986
    sp = STACKTOP; //@line 12987
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 12991
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$14 >> 2] | 0; //@line 12997
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 13005
    $189 = $82 + 1 | 0; //@line 13006
    HEAP32[$4 >> 2] = $189; //@line 13007
    $190 = HEAP32[$10 >> 2] | 0; //@line 13008
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 13009
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 13010
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 13013
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 13014
     HEAP32[$192 >> 2] = $2; //@line 13015
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 13016
     HEAP32[$193 >> 2] = $4; //@line 13017
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 13018
     HEAP32[$194 >> 2] = $6; //@line 13019
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 13020
     HEAP32[$195 >> 2] = $8; //@line 13021
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 13022
     HEAP32[$196 >> 2] = $10; //@line 13023
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 13024
     HEAP32[$197 >> 2] = $12; //@line 13025
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 13026
     HEAP32[$198 >> 2] = $14; //@line 13027
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 13028
     HEAP32[$199 >> 2] = $16; //@line 13029
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 13030
     HEAP32[$200 >> 2] = $18; //@line 13031
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 13032
     HEAP32[$201 >> 2] = $20; //@line 13033
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 13034
     HEAP32[$202 >> 2] = $22; //@line 13035
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 13036
     HEAP32[$203 >> 2] = $24; //@line 13037
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 13038
     HEAP32[$204 >> 2] = $26; //@line 13039
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 13040
     HEAP32[$205 >> 2] = $28; //@line 13041
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 13042
     HEAP32[$206 >> 2] = $30; //@line 13043
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 13044
     HEAP32[$207 >> 2] = $57; //@line 13045
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 13046
     HEAP32[$208 >> 2] = $189; //@line 13047
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 13048
     HEAP32[$209 >> 2] = $181; //@line 13049
     sp = STACKTOP; //@line 13050
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 13054
    ___async_unwind = 0; //@line 13055
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 13056
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 13057
    HEAP32[$192 >> 2] = $2; //@line 13058
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 13059
    HEAP32[$193 >> 2] = $4; //@line 13060
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 13061
    HEAP32[$194 >> 2] = $6; //@line 13062
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 13063
    HEAP32[$195 >> 2] = $8; //@line 13064
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 13065
    HEAP32[$196 >> 2] = $10; //@line 13066
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 13067
    HEAP32[$197 >> 2] = $12; //@line 13068
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 13069
    HEAP32[$198 >> 2] = $14; //@line 13070
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 13071
    HEAP32[$199 >> 2] = $16; //@line 13072
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 13073
    HEAP32[$200 >> 2] = $18; //@line 13074
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 13075
    HEAP32[$201 >> 2] = $20; //@line 13076
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 13077
    HEAP32[$202 >> 2] = $22; //@line 13078
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 13079
    HEAP32[$203 >> 2] = $24; //@line 13080
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 13081
    HEAP32[$204 >> 2] = $26; //@line 13082
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 13083
    HEAP32[$205 >> 2] = $28; //@line 13084
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 13085
    HEAP32[$206 >> 2] = $30; //@line 13086
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 13087
    HEAP32[$207 >> 2] = $57; //@line 13088
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 13089
    HEAP32[$208 >> 2] = $189; //@line 13090
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 13091
    HEAP32[$209 >> 2] = $181; //@line 13092
    sp = STACKTOP; //@line 13093
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$14 >> 2] | 0; //@line 13097
    $212 = $211 + 56 | 0; //@line 13098
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 13105
    $216 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 13106
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 13109
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 13110
     HEAP32[$217 >> 2] = $2; //@line 13111
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 13112
     HEAP32[$218 >> 2] = $4; //@line 13113
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 13114
     HEAP32[$219 >> 2] = $6; //@line 13115
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 13116
     HEAP32[$220 >> 2] = $8; //@line 13117
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 13118
     HEAP32[$221 >> 2] = $10; //@line 13119
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 13120
     HEAP32[$222 >> 2] = $12; //@line 13121
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 13122
     HEAP32[$223 >> 2] = $14; //@line 13123
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 13124
     HEAP32[$224 >> 2] = $16; //@line 13125
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 13126
     HEAP32[$225 >> 2] = $18; //@line 13127
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 13128
     HEAP32[$226 >> 2] = $20; //@line 13129
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 13130
     HEAP32[$227 >> 2] = $22; //@line 13131
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 13132
     HEAP32[$228 >> 2] = $24; //@line 13133
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 13134
     HEAP32[$229 >> 2] = $26; //@line 13135
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 13136
     HEAP32[$230 >> 2] = $28; //@line 13137
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 13138
     HEAP32[$231 >> 2] = $30; //@line 13139
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 13140
     HEAP32[$232 >> 2] = $57; //@line 13141
     sp = STACKTOP; //@line 13142
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 13146
    ___async_unwind = 0; //@line 13147
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 13148
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 13149
    HEAP32[$217 >> 2] = $2; //@line 13150
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 13151
    HEAP32[$218 >> 2] = $4; //@line 13152
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 13153
    HEAP32[$219 >> 2] = $6; //@line 13154
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 13155
    HEAP32[$220 >> 2] = $8; //@line 13156
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 13157
    HEAP32[$221 >> 2] = $10; //@line 13158
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 13159
    HEAP32[$222 >> 2] = $12; //@line 13160
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 13161
    HEAP32[$223 >> 2] = $14; //@line 13162
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 13163
    HEAP32[$224 >> 2] = $16; //@line 13164
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 13165
    HEAP32[$225 >> 2] = $18; //@line 13166
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 13167
    HEAP32[$226 >> 2] = $20; //@line 13168
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 13169
    HEAP32[$227 >> 2] = $22; //@line 13170
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 13171
    HEAP32[$228 >> 2] = $24; //@line 13172
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 13173
    HEAP32[$229 >> 2] = $26; //@line 13174
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 13175
    HEAP32[$230 >> 2] = $28; //@line 13176
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 13177
    HEAP32[$231 >> 2] = $30; //@line 13178
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 13179
    HEAP32[$232 >> 2] = $57; //@line 13180
    sp = STACKTOP; //@line 13181
    return;
   } else if ((label | 0) == 50) {
    $251 = HEAP32[$14 >> 2] | 0; //@line 13185
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 13188
    $254 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $251 + 60 | 0, $251 + 8 | 0, 20, $$1202$i) | 0; //@line 13189
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 13192
     $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 13193
     HEAP32[$255 >> 2] = $2; //@line 13194
     $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 13195
     HEAP32[$256 >> 2] = $4; //@line 13196
     $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 13197
     HEAP32[$257 >> 2] = $6; //@line 13198
     $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 13199
     HEAP32[$258 >> 2] = $8; //@line 13200
     $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 13201
     HEAP32[$259 >> 2] = $10; //@line 13202
     $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 13203
     HEAP32[$260 >> 2] = $12; //@line 13204
     $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 13205
     HEAP32[$261 >> 2] = $14; //@line 13206
     $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 13207
     HEAP32[$262 >> 2] = $16; //@line 13208
     $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 13209
     HEAP32[$263 >> 2] = $18; //@line 13210
     $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 13211
     HEAP32[$264 >> 2] = $20; //@line 13212
     $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 13213
     HEAP32[$265 >> 2] = $22; //@line 13214
     $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 13215
     HEAP32[$266 >> 2] = $24; //@line 13216
     $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 13217
     HEAP32[$267 >> 2] = $26; //@line 13218
     $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 13219
     HEAP32[$268 >> 2] = $28; //@line 13220
     $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 13221
     HEAP32[$269 >> 2] = $30; //@line 13222
     $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 13223
     HEAP32[$270 >> 2] = $57; //@line 13224
     sp = STACKTOP; //@line 13225
     return;
    }
    HEAP8[___async_retval >> 0] = $254; //@line 13229
    ___async_unwind = 0; //@line 13230
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 13231
    $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 13232
    HEAP32[$255 >> 2] = $2; //@line 13233
    $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 13234
    HEAP32[$256 >> 2] = $4; //@line 13235
    $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 13236
    HEAP32[$257 >> 2] = $6; //@line 13237
    $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 13238
    HEAP32[$258 >> 2] = $8; //@line 13239
    $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 13240
    HEAP32[$259 >> 2] = $10; //@line 13241
    $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 13242
    HEAP32[$260 >> 2] = $12; //@line 13243
    $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 13244
    HEAP32[$261 >> 2] = $14; //@line 13245
    $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 13246
    HEAP32[$262 >> 2] = $16; //@line 13247
    $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 13248
    HEAP32[$263 >> 2] = $18; //@line 13249
    $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 13250
    HEAP32[$264 >> 2] = $20; //@line 13251
    $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 13252
    HEAP32[$265 >> 2] = $22; //@line 13253
    $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 13254
    HEAP32[$266 >> 2] = $24; //@line 13255
    $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 13256
    HEAP32[$267 >> 2] = $26; //@line 13257
    $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 13258
    HEAP32[$268 >> 2] = $28; //@line 13259
    $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 13260
    HEAP32[$269 >> 2] = $30; //@line 13261
    $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 13262
    HEAP32[$270 >> 2] = $57; //@line 13263
    sp = STACKTOP; //@line 13264
    return;
   } else if ((label | 0) == 53) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 13268
    $272 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $28, $30, 11, $$1202$i) | 0; //@line 13269
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 13272
     $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 13273
     HEAP32[$273 >> 2] = $2; //@line 13274
     $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 13275
     HEAP32[$274 >> 2] = $4; //@line 13276
     $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 13277
     HEAP32[$275 >> 2] = $6; //@line 13278
     $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 13279
     HEAP32[$276 >> 2] = $8; //@line 13280
     $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 13281
     HEAP32[$277 >> 2] = $10; //@line 13282
     $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 13283
     HEAP32[$278 >> 2] = $12; //@line 13284
     $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 13285
     HEAP32[$279 >> 2] = $14; //@line 13286
     $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 13287
     HEAP32[$280 >> 2] = $16; //@line 13288
     $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 13289
     HEAP32[$281 >> 2] = $18; //@line 13290
     $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 13291
     HEAP32[$282 >> 2] = $20; //@line 13292
     $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 13293
     HEAP32[$283 >> 2] = $22; //@line 13294
     $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 13295
     HEAP32[$284 >> 2] = $24; //@line 13296
     $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 13297
     HEAP32[$285 >> 2] = $26; //@line 13298
     $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 13299
     HEAP32[$286 >> 2] = $28; //@line 13300
     $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 13301
     HEAP32[$287 >> 2] = $30; //@line 13302
     $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 13303
     HEAP32[$288 >> 2] = $57; //@line 13304
     sp = STACKTOP; //@line 13305
     return;
    }
    HEAP8[___async_retval >> 0] = $272; //@line 13309
    ___async_unwind = 0; //@line 13310
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 13311
    $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 13312
    HEAP32[$273 >> 2] = $2; //@line 13313
    $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 13314
    HEAP32[$274 >> 2] = $4; //@line 13315
    $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 13316
    HEAP32[$275 >> 2] = $6; //@line 13317
    $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 13318
    HEAP32[$276 >> 2] = $8; //@line 13319
    $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 13320
    HEAP32[$277 >> 2] = $10; //@line 13321
    $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 13322
    HEAP32[$278 >> 2] = $12; //@line 13323
    $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 13324
    HEAP32[$279 >> 2] = $14; //@line 13325
    $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 13326
    HEAP32[$280 >> 2] = $16; //@line 13327
    $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 13328
    HEAP32[$281 >> 2] = $18; //@line 13329
    $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 13330
    HEAP32[$282 >> 2] = $20; //@line 13331
    $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 13332
    HEAP32[$283 >> 2] = $22; //@line 13333
    $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 13334
    HEAP32[$284 >> 2] = $24; //@line 13335
    $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 13336
    HEAP32[$285 >> 2] = $26; //@line 13337
    $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 13338
    HEAP32[$286 >> 2] = $28; //@line 13339
    $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 13340
    HEAP32[$287 >> 2] = $30; //@line 13341
    $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 13342
    HEAP32[$288 >> 2] = $57; //@line 13343
    sp = STACKTOP; //@line 13344
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$14 >> 2] | 0; //@line 13348
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 13351
    $309 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 13352
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 13355
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 13356
     HEAP32[$310 >> 2] = $2; //@line 13357
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 13358
     HEAP32[$311 >> 2] = $4; //@line 13359
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 13360
     HEAP32[$312 >> 2] = $6; //@line 13361
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 13362
     HEAP32[$313 >> 2] = $8; //@line 13363
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 13364
     HEAP32[$314 >> 2] = $10; //@line 13365
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 13366
     HEAP32[$315 >> 2] = $12; //@line 13367
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 13368
     HEAP32[$316 >> 2] = $14; //@line 13369
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 13370
     HEAP32[$317 >> 2] = $16; //@line 13371
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 13372
     HEAP32[$318 >> 2] = $18; //@line 13373
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 13374
     HEAP32[$319 >> 2] = $20; //@line 13375
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 13376
     HEAP32[$320 >> 2] = $22; //@line 13377
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 13378
     HEAP32[$321 >> 2] = $24; //@line 13379
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 13380
     HEAP32[$322 >> 2] = $26; //@line 13381
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 13382
     HEAP32[$323 >> 2] = $28; //@line 13383
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 13384
     HEAP32[$324 >> 2] = $30; //@line 13385
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 13386
     HEAP32[$325 >> 2] = $57; //@line 13387
     sp = STACKTOP; //@line 13388
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 13392
    ___async_unwind = 0; //@line 13393
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 13394
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 13395
    HEAP32[$310 >> 2] = $2; //@line 13396
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 13397
    HEAP32[$311 >> 2] = $4; //@line 13398
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 13399
    HEAP32[$312 >> 2] = $6; //@line 13400
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 13401
    HEAP32[$313 >> 2] = $8; //@line 13402
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 13403
    HEAP32[$314 >> 2] = $10; //@line 13404
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 13405
    HEAP32[$315 >> 2] = $12; //@line 13406
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 13407
    HEAP32[$316 >> 2] = $14; //@line 13408
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 13409
    HEAP32[$317 >> 2] = $16; //@line 13410
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 13411
    HEAP32[$318 >> 2] = $18; //@line 13412
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 13413
    HEAP32[$319 >> 2] = $20; //@line 13414
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 13415
    HEAP32[$320 >> 2] = $22; //@line 13416
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 13417
    HEAP32[$321 >> 2] = $24; //@line 13418
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 13419
    HEAP32[$322 >> 2] = $26; //@line 13420
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 13421
    HEAP32[$323 >> 2] = $28; //@line 13422
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 13423
    HEAP32[$324 >> 2] = $30; //@line 13424
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 13425
    HEAP32[$325 >> 2] = $57; //@line 13426
    sp = STACKTOP; //@line 13427
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $16 | 0) >= ($18 | 0)) {
     $436 = ___async_retval; //@line 13435
     HEAP32[$436 >> 2] = $6; //@line 13436
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 13442
     HEAP32[$4 >> 2] = $426; //@line 13443
     $427 = $426; //@line 13444
     $429 = $16 - $427 + $18 | 0; //@line 13446
     HEAP16[$12 + 24 >> 1] = $429; //@line 13449
     if ($429 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $427; //@line 13454
      $436 = ___async_retval; //@line 13455
      HEAP32[$436 >> 2] = $6; //@line 13456
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 13461
    $436 = ___async_retval; //@line 13462
    HEAP32[$436 >> 2] = $6; //@line 13463
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 13469
 $436 = ___async_retval; //@line 13470
 HEAP32[$436 >> 2] = $6; //@line 13471
 return;
}
function _sn_coap_parser__async_cb_90($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $245$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 10709
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10717
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10719
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10721
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10723
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10725
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10727
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10729
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10731
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10733
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10735
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10737
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10739
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 10747
   L3 : while (1) {
    $417 = HEAP32[$22 >> 2] | 0; //@line 10749
    $418 = $417 - $16 | 0; //@line 10750
    $37 = $417; //@line 10753
    if (($418 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 10760
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 10763
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 10766
     break;
    }
    $40 = $trunc277$i & 15; //@line 10770
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 10771
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 10783
      $$sink214$i = 13; //@line 10783
      $$sink3$i = 1; //@line 10783
      label = 7; //@line 10784
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 10796
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 10796
      $$sink3$i = 2; //@line 10796
      label = 7; //@line 10797
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 10801
      $437 = $417; //@line 10801
      $59 = $37; //@line 10801
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 10805
     $54 = $37 + $$sink3$i | 0; //@line 10807
     HEAP32[$4 >> 2] = $54; //@line 10808
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 10810
     $437 = $54; //@line 10810
     $59 = $54; //@line 10810
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 10813
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 10824
      $$sink216$i = 13; //@line 10824
      $$sink8$i = 1; //@line 10824
      label = 11; //@line 10825
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 10837
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 10837
      $$sink8$i = 2; //@line 10837
      label = 11; //@line 10838
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 10842
      $74 = $437; //@line 10842
      $82 = $59; //@line 10842
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 10846
     $71 = $59 + $$sink8$i | 0; //@line 10848
     HEAP32[$4 >> 2] = $71; //@line 10849
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 10851
     $74 = $71; //@line 10851
     $82 = $71; //@line 10851
    }
    $$1202$i = $$1202$in$i & 65535; //@line 10853
    $75 = $20 - $74 & 65535; //@line 10855
    $trunc$i = $57 & 65535; //@line 10856
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 53; //@line 10860
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 10868
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 10873
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 10878
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 10883
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 10888
         break L3;
         break;
        }
       case 20:
        {
         label = 49; //@line 10893
         break L3;
         break;
        }
       case 11:
        {
         label = 53; //@line 10898
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 10903
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $82 + 1 | 0; //@line 10916
         HEAP32[$4 >> 2] = $118; //@line 10917
         $119 = $$1202$in$i & 255; //@line 10918
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 10921
         } else {
          $$045$i256$i = $119; //@line 10923
          $$06$i255$i = 0; //@line 10923
          $124 = $118; //@line 10923
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 10925
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 10927
           HEAP32[$4 >> 2] = $124; //@line 10928
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 10931
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 10934
            break;
           } else {
            $$06$i255$i = $127; //@line 10937
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 10943
         $$reg2mem$0 = $57; //@line 10944
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $236 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 10954
         if ((HEAP32[$236 >> 2] | 0) != -1) {
          break L2;
         }
         $239 = $82 + 1 | 0; //@line 10960
         HEAP32[$4 >> 2] = $239; //@line 10961
         $240 = $$1202$in$i & 255; //@line 10962
         if (!($240 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 10965
         } else {
          $$045$i270$i = $240; //@line 10967
          $$06$i269$i = 0; //@line 10967
          $245 = $239; //@line 10967
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 10969
           $245$looptemp = $245;
           $245 = $245 + 1 | 0; //@line 10971
           HEAP32[$4 >> 2] = $245; //@line 10972
           $248 = $$06$i269$i << 8 | HEAPU8[$245$looptemp >> 0]; //@line 10975
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $248; //@line 10978
            break;
           } else {
            $$06$i269$i = $248; //@line 10981
           }
          }
         }
         HEAP32[$236 >> 2] = $$0$lcssa$i272$i; //@line 10985
         $$reg2mem$0 = $57; //@line 10986
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 10996
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $82 + 1 | 0; //@line 11002
         HEAP32[$4 >> 2] = $295; //@line 11003
         $296 = $$1202$in$i & 255; //@line 11004
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 11007
         } else {
          $$045$i263$i = $296; //@line 11009
          $$06$i262$i = 0; //@line 11009
          $301 = $295; //@line 11009
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 11011
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 11013
           HEAP32[$4 >> 2] = $301; //@line 11014
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 11017
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 11020
            break;
           } else {
            $$06$i262$i = $304; //@line 11023
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 11027
         $$reg2mem$0 = $57; //@line 11028
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 11038
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $82 + 1 | 0; //@line 11044
         HEAP32[$4 >> 2] = $332; //@line 11045
         $333 = $$1202$in$i & 255; //@line 11046
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 11049
         } else {
          $$045$i249$i = $333; //@line 11051
          $$06$i248$i = 0; //@line 11051
          $338 = $332; //@line 11051
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 11053
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 11055
           HEAP32[$4 >> 2] = $338; //@line 11056
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 11059
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 11062
            break;
           } else {
            $$06$i248$i = $341; //@line 11065
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 11069
         $$reg2mem$0 = $57; //@line 11070
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 11080
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $82 + 1 | 0; //@line 11086
         HEAP32[$4 >> 2] = $348; //@line 11087
         $349 = $$1202$in$i & 255; //@line 11088
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 11091
         } else {
          $$045$i242$i = $349; //@line 11093
          $$06$i241$i = 0; //@line 11093
          $354 = $348; //@line 11093
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 11095
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 11097
           HEAP32[$4 >> 2] = $354; //@line 11098
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 11101
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 11104
            break;
           } else {
            $$06$i241$i = $357; //@line 11107
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 11111
         $$reg2mem$0 = $57; //@line 11112
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 11122
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $82 + 1 | 0; //@line 11128
         HEAP32[$4 >> 2] = $364; //@line 11129
         $365 = $$1202$in$i & 255; //@line 11130
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 11133
         } else {
          $$045$i235$i = $365; //@line 11135
          $$06$i234$i = 0; //@line 11135
          $370 = $364; //@line 11135
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 11137
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 11139
           HEAP32[$4 >> 2] = $370; //@line 11140
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 11143
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 11146
            break;
           } else {
            $$06$i234$i = $373; //@line 11149
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 11153
         $$reg2mem$0 = $57; //@line 11154
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 11164
         $378 = HEAP8[$377 >> 0] | 0; //@line 11165
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 11172
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 11174
         HEAP32[$4 >> 2] = $383; //@line 11175
         $384 = $$1202$in$i & 255; //@line 11176
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 11179
         } else {
          $$045$i228$i = $384; //@line 11181
          $$06$i227$i = 0; //@line 11181
          $389 = $383; //@line 11181
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 11183
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 11185
           HEAP32[$4 >> 2] = $389; //@line 11186
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 11189
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 11192
            break;
           } else {
            $$06$i227$i = $392; //@line 11195
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 11201
         $$reg2mem$0 = $57; //@line 11202
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 11212
         $399 = HEAP8[$398 >> 0] | 0; //@line 11213
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 11220
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 11222
         HEAP32[$4 >> 2] = $404; //@line 11223
         $405 = $$1202$in$i & 255; //@line 11224
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 11227
         } else {
          $$045$i221$i = $405; //@line 11229
          $$06$i220$i = 0; //@line 11229
          $410 = $404; //@line 11229
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 11231
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 11233
           HEAP32[$4 >> 2] = $410; //@line 11234
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 11237
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 11240
            break;
           } else {
            $$06$i220$i = $413; //@line 11243
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 11249
         $$reg2mem$0 = $57; //@line 11250
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $82 + 1 | 0; //@line 11277
    HEAP32[$4 >> 2] = $106; //@line 11278
    $107 = $$1202$in$i & 255; //@line 11279
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 11282
    } else {
     $$045$i$i = $107; //@line 11284
     $$06$i$i = 0; //@line 11284
     $112 = $106; //@line 11284
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 11286
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 11288
      HEAP32[$4 >> 2] = $112; //@line 11289
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 11292
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 11295
       break;
      } else {
       $$06$i$i = $115; //@line 11298
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 11302
    $$reg2mem$0 = $57; //@line 11303
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$10 >> 2] | 0; //@line 11306
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 11307
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 11308
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 11311
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 11312
     HEAP32[$80 >> 2] = $2; //@line 11313
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 11314
     HEAP32[$81 >> 2] = $82; //@line 11315
     $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 11316
     HEAP32[$83 >> 2] = $4; //@line 11317
     $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 11318
     HEAP32[$84 >> 2] = $$1202$in$i; //@line 11319
     $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 11320
     HEAP32[$85 >> 2] = $6; //@line 11321
     $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 11322
     HEAP32[$86 >> 2] = $8; //@line 11323
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 11324
     HEAP32[$87 >> 2] = $10; //@line 11325
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 11326
     HEAP32[$88 >> 2] = $12; //@line 11327
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 11328
     HEAP32[$89 >> 2] = $14; //@line 11329
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 11330
     HEAP16[$90 >> 1] = $trunc$i; //@line 11331
     $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 11332
     HEAP16[$91 >> 1] = $$1202$i; //@line 11333
     $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 11334
     HEAP32[$92 >> 2] = $16; //@line 11335
     $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 11336
     HEAP32[$93 >> 2] = $18; //@line 11337
     $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 11338
     HEAP32[$94 >> 2] = $20; //@line 11339
     $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 11340
     HEAP32[$95 >> 2] = $22; //@line 11341
     $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 11342
     HEAP32[$96 >> 2] = $57; //@line 11343
     $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 11344
     HEAP32[$97 >> 2] = $24; //@line 11345
     $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 11346
     HEAP32[$98 >> 2] = $26; //@line 11347
     $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 11348
     HEAP16[$99 >> 1] = $75; //@line 11349
     $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 11350
     HEAP32[$100 >> 2] = $28; //@line 11351
     $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 11352
     HEAP32[$101 >> 2] = $30; //@line 11353
     sp = STACKTOP; //@line 11354
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 11358
    ___async_unwind = 0; //@line 11359
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 11360
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 11361
    HEAP32[$80 >> 2] = $2; //@line 11362
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 11363
    HEAP32[$81 >> 2] = $82; //@line 11364
    $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 11365
    HEAP32[$83 >> 2] = $4; //@line 11366
    $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 11367
    HEAP32[$84 >> 2] = $$1202$in$i; //@line 11368
    $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 11369
    HEAP32[$85 >> 2] = $6; //@line 11370
    $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 11371
    HEAP32[$86 >> 2] = $8; //@line 11372
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 11373
    HEAP32[$87 >> 2] = $10; //@line 11374
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 11375
    HEAP32[$88 >> 2] = $12; //@line 11376
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 11377
    HEAP32[$89 >> 2] = $14; //@line 11378
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 11379
    HEAP16[$90 >> 1] = $trunc$i; //@line 11380
    $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 11381
    HEAP16[$91 >> 1] = $$1202$i; //@line 11382
    $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 11383
    HEAP32[$92 >> 2] = $16; //@line 11384
    $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 11385
    HEAP32[$93 >> 2] = $18; //@line 11386
    $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 11387
    HEAP32[$94 >> 2] = $20; //@line 11388
    $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 11389
    HEAP32[$95 >> 2] = $22; //@line 11390
    $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 11391
    HEAP32[$96 >> 2] = $57; //@line 11392
    $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 11393
    HEAP32[$97 >> 2] = $24; //@line 11394
    $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 11395
    HEAP32[$98 >> 2] = $26; //@line 11396
    $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 11397
    HEAP16[$99 >> 1] = $75; //@line 11398
    $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 11399
    HEAP32[$100 >> 2] = $28; //@line 11400
    $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 11401
    HEAP32[$101 >> 2] = $30; //@line 11402
    sp = STACKTOP; //@line 11403
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 11407
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$14 >> 2] | 0; //@line 11413
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 11421
    $139 = $82 + 1 | 0; //@line 11422
    HEAP32[$4 >> 2] = $139; //@line 11423
    $140 = HEAP32[$10 >> 2] | 0; //@line 11424
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 11425
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 11426
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 11429
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 11430
     HEAP32[$142 >> 2] = $2; //@line 11431
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 11432
     HEAP32[$143 >> 2] = $4; //@line 11433
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 11434
     HEAP32[$144 >> 2] = $6; //@line 11435
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 11436
     HEAP32[$145 >> 2] = $8; //@line 11437
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 11438
     HEAP32[$146 >> 2] = $10; //@line 11439
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 11440
     HEAP32[$147 >> 2] = $12; //@line 11441
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 11442
     HEAP32[$148 >> 2] = $14; //@line 11443
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 11444
     HEAP32[$149 >> 2] = $16; //@line 11445
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 11446
     HEAP32[$150 >> 2] = $18; //@line 11447
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 11448
     HEAP32[$151 >> 2] = $20; //@line 11449
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 11450
     HEAP32[$152 >> 2] = $22; //@line 11451
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 11452
     HEAP32[$153 >> 2] = $24; //@line 11453
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 11454
     HEAP32[$154 >> 2] = $26; //@line 11455
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 11456
     HEAP32[$155 >> 2] = $28; //@line 11457
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 11458
     HEAP32[$156 >> 2] = $30; //@line 11459
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 11460
     HEAP32[$157 >> 2] = $57; //@line 11461
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 11462
     HEAP32[$158 >> 2] = $139; //@line 11463
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 11464
     HEAP32[$159 >> 2] = $131; //@line 11465
     sp = STACKTOP; //@line 11466
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 11470
    ___async_unwind = 0; //@line 11471
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 11472
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 11473
    HEAP32[$142 >> 2] = $2; //@line 11474
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 11475
    HEAP32[$143 >> 2] = $4; //@line 11476
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 11477
    HEAP32[$144 >> 2] = $6; //@line 11478
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 11479
    HEAP32[$145 >> 2] = $8; //@line 11480
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 11481
    HEAP32[$146 >> 2] = $10; //@line 11482
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 11483
    HEAP32[$147 >> 2] = $12; //@line 11484
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 11485
    HEAP32[$148 >> 2] = $14; //@line 11486
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 11487
    HEAP32[$149 >> 2] = $16; //@line 11488
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 11489
    HEAP32[$150 >> 2] = $18; //@line 11490
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 11491
    HEAP32[$151 >> 2] = $20; //@line 11492
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 11493
    HEAP32[$152 >> 2] = $22; //@line 11494
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 11495
    HEAP32[$153 >> 2] = $24; //@line 11496
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 11497
    HEAP32[$154 >> 2] = $26; //@line 11498
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 11499
    HEAP32[$155 >> 2] = $28; //@line 11500
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 11501
    HEAP32[$156 >> 2] = $30; //@line 11502
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 11503
    HEAP32[$157 >> 2] = $57; //@line 11504
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 11505
    HEAP32[$158 >> 2] = $139; //@line 11506
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 11507
    HEAP32[$159 >> 2] = $131; //@line 11508
    sp = STACKTOP; //@line 11509
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$14 >> 2] | 0; //@line 11513
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 11515
    $163 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 11516
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 11519
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 11520
     HEAP32[$164 >> 2] = $2; //@line 11521
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 11522
     HEAP32[$165 >> 2] = $4; //@line 11523
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 11524
     HEAP32[$166 >> 2] = $6; //@line 11525
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 11526
     HEAP32[$167 >> 2] = $8; //@line 11527
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 11528
     HEAP32[$168 >> 2] = $10; //@line 11529
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 11530
     HEAP32[$169 >> 2] = $12; //@line 11531
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 11532
     HEAP32[$170 >> 2] = $14; //@line 11533
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 11534
     HEAP32[$171 >> 2] = $16; //@line 11535
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 11536
     HEAP32[$172 >> 2] = $18; //@line 11537
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 11538
     HEAP32[$173 >> 2] = $20; //@line 11539
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 11540
     HEAP32[$174 >> 2] = $22; //@line 11541
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 11542
     HEAP32[$175 >> 2] = $24; //@line 11543
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 11544
     HEAP32[$176 >> 2] = $26; //@line 11545
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 11546
     HEAP32[$177 >> 2] = $28; //@line 11547
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 11548
     HEAP32[$178 >> 2] = $30; //@line 11549
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 11550
     HEAP32[$179 >> 2] = $57; //@line 11551
     sp = STACKTOP; //@line 11552
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 11556
    ___async_unwind = 0; //@line 11557
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 11558
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 11559
    HEAP32[$164 >> 2] = $2; //@line 11560
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 11561
    HEAP32[$165 >> 2] = $4; //@line 11562
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 11563
    HEAP32[$166 >> 2] = $6; //@line 11564
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 11565
    HEAP32[$167 >> 2] = $8; //@line 11566
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 11567
    HEAP32[$168 >> 2] = $10; //@line 11568
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 11569
    HEAP32[$169 >> 2] = $12; //@line 11570
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 11571
    HEAP32[$170 >> 2] = $14; //@line 11572
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 11573
    HEAP32[$171 >> 2] = $16; //@line 11574
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 11575
    HEAP32[$172 >> 2] = $18; //@line 11576
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 11577
    HEAP32[$173 >> 2] = $20; //@line 11578
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 11579
    HEAP32[$174 >> 2] = $22; //@line 11580
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 11581
    HEAP32[$175 >> 2] = $24; //@line 11582
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 11583
    HEAP32[$176 >> 2] = $26; //@line 11584
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 11585
    HEAP32[$177 >> 2] = $28; //@line 11586
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 11587
    HEAP32[$178 >> 2] = $30; //@line 11588
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 11589
    HEAP32[$179 >> 2] = $57; //@line 11590
    sp = STACKTOP; //@line 11591
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 11595
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$14 >> 2] | 0; //@line 11601
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 11609
    $189 = $82 + 1 | 0; //@line 11610
    HEAP32[$4 >> 2] = $189; //@line 11611
    $190 = HEAP32[$10 >> 2] | 0; //@line 11612
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 11613
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 11614
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 11617
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 11618
     HEAP32[$192 >> 2] = $2; //@line 11619
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 11620
     HEAP32[$193 >> 2] = $4; //@line 11621
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 11622
     HEAP32[$194 >> 2] = $6; //@line 11623
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 11624
     HEAP32[$195 >> 2] = $8; //@line 11625
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 11626
     HEAP32[$196 >> 2] = $10; //@line 11627
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 11628
     HEAP32[$197 >> 2] = $12; //@line 11629
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 11630
     HEAP32[$198 >> 2] = $14; //@line 11631
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 11632
     HEAP32[$199 >> 2] = $16; //@line 11633
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 11634
     HEAP32[$200 >> 2] = $18; //@line 11635
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 11636
     HEAP32[$201 >> 2] = $20; //@line 11637
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 11638
     HEAP32[$202 >> 2] = $22; //@line 11639
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 11640
     HEAP32[$203 >> 2] = $24; //@line 11641
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 11642
     HEAP32[$204 >> 2] = $26; //@line 11643
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 11644
     HEAP32[$205 >> 2] = $28; //@line 11645
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 11646
     HEAP32[$206 >> 2] = $30; //@line 11647
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 11648
     HEAP32[$207 >> 2] = $57; //@line 11649
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 11650
     HEAP32[$208 >> 2] = $189; //@line 11651
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 11652
     HEAP32[$209 >> 2] = $181; //@line 11653
     sp = STACKTOP; //@line 11654
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 11658
    ___async_unwind = 0; //@line 11659
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 11660
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 11661
    HEAP32[$192 >> 2] = $2; //@line 11662
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 11663
    HEAP32[$193 >> 2] = $4; //@line 11664
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 11665
    HEAP32[$194 >> 2] = $6; //@line 11666
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 11667
    HEAP32[$195 >> 2] = $8; //@line 11668
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 11669
    HEAP32[$196 >> 2] = $10; //@line 11670
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 11671
    HEAP32[$197 >> 2] = $12; //@line 11672
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 11673
    HEAP32[$198 >> 2] = $14; //@line 11674
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 11675
    HEAP32[$199 >> 2] = $16; //@line 11676
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 11677
    HEAP32[$200 >> 2] = $18; //@line 11678
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 11679
    HEAP32[$201 >> 2] = $20; //@line 11680
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 11681
    HEAP32[$202 >> 2] = $22; //@line 11682
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 11683
    HEAP32[$203 >> 2] = $24; //@line 11684
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 11685
    HEAP32[$204 >> 2] = $26; //@line 11686
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 11687
    HEAP32[$205 >> 2] = $28; //@line 11688
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 11689
    HEAP32[$206 >> 2] = $30; //@line 11690
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 11691
    HEAP32[$207 >> 2] = $57; //@line 11692
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 11693
    HEAP32[$208 >> 2] = $189; //@line 11694
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 11695
    HEAP32[$209 >> 2] = $181; //@line 11696
    sp = STACKTOP; //@line 11697
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$14 >> 2] | 0; //@line 11701
    $212 = $211 + 56 | 0; //@line 11702
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 11709
    $216 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 11710
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 11713
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 11714
     HEAP32[$217 >> 2] = $2; //@line 11715
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 11716
     HEAP32[$218 >> 2] = $4; //@line 11717
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 11718
     HEAP32[$219 >> 2] = $6; //@line 11719
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 11720
     HEAP32[$220 >> 2] = $8; //@line 11721
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 11722
     HEAP32[$221 >> 2] = $10; //@line 11723
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 11724
     HEAP32[$222 >> 2] = $12; //@line 11725
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 11726
     HEAP32[$223 >> 2] = $14; //@line 11727
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 11728
     HEAP32[$224 >> 2] = $16; //@line 11729
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 11730
     HEAP32[$225 >> 2] = $18; //@line 11731
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 11732
     HEAP32[$226 >> 2] = $20; //@line 11733
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 11734
     HEAP32[$227 >> 2] = $22; //@line 11735
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 11736
     HEAP32[$228 >> 2] = $24; //@line 11737
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 11738
     HEAP32[$229 >> 2] = $26; //@line 11739
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 11740
     HEAP32[$230 >> 2] = $28; //@line 11741
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 11742
     HEAP32[$231 >> 2] = $30; //@line 11743
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 11744
     HEAP32[$232 >> 2] = $57; //@line 11745
     sp = STACKTOP; //@line 11746
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 11750
    ___async_unwind = 0; //@line 11751
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 11752
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 11753
    HEAP32[$217 >> 2] = $2; //@line 11754
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 11755
    HEAP32[$218 >> 2] = $4; //@line 11756
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 11757
    HEAP32[$219 >> 2] = $6; //@line 11758
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 11759
    HEAP32[$220 >> 2] = $8; //@line 11760
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 11761
    HEAP32[$221 >> 2] = $10; //@line 11762
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 11763
    HEAP32[$222 >> 2] = $12; //@line 11764
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 11765
    HEAP32[$223 >> 2] = $14; //@line 11766
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 11767
    HEAP32[$224 >> 2] = $16; //@line 11768
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 11769
    HEAP32[$225 >> 2] = $18; //@line 11770
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 11771
    HEAP32[$226 >> 2] = $20; //@line 11772
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 11773
    HEAP32[$227 >> 2] = $22; //@line 11774
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 11775
    HEAP32[$228 >> 2] = $24; //@line 11776
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 11777
    HEAP32[$229 >> 2] = $26; //@line 11778
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 11779
    HEAP32[$230 >> 2] = $28; //@line 11780
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 11781
    HEAP32[$231 >> 2] = $30; //@line 11782
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 11783
    HEAP32[$232 >> 2] = $57; //@line 11784
    sp = STACKTOP; //@line 11785
    return;
   } else if ((label | 0) == 49) {
    $250 = HEAP32[$14 >> 2] | 0; //@line 11789
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 11792
    $253 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $250 + 60 | 0, $250 + 8 | 0, 20, $$1202$i) | 0; //@line 11793
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 11796
     $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 11797
     HEAP32[$254 >> 2] = $2; //@line 11798
     $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 11799
     HEAP32[$255 >> 2] = $4; //@line 11800
     $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 11801
     HEAP32[$256 >> 2] = $6; //@line 11802
     $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 11803
     HEAP32[$257 >> 2] = $8; //@line 11804
     $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 11805
     HEAP32[$258 >> 2] = $10; //@line 11806
     $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 11807
     HEAP32[$259 >> 2] = $12; //@line 11808
     $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 11809
     HEAP32[$260 >> 2] = $14; //@line 11810
     $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 11811
     HEAP32[$261 >> 2] = $16; //@line 11812
     $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 11813
     HEAP32[$262 >> 2] = $18; //@line 11814
     $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 11815
     HEAP32[$263 >> 2] = $20; //@line 11816
     $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 11817
     HEAP32[$264 >> 2] = $22; //@line 11818
     $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 11819
     HEAP32[$265 >> 2] = $24; //@line 11820
     $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 11821
     HEAP32[$266 >> 2] = $26; //@line 11822
     $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 11823
     HEAP32[$267 >> 2] = $28; //@line 11824
     $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 11825
     HEAP32[$268 >> 2] = $30; //@line 11826
     $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 11827
     HEAP32[$269 >> 2] = $57; //@line 11828
     sp = STACKTOP; //@line 11829
     return;
    }
    HEAP8[___async_retval >> 0] = $253; //@line 11833
    ___async_unwind = 0; //@line 11834
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 11835
    $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 11836
    HEAP32[$254 >> 2] = $2; //@line 11837
    $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 11838
    HEAP32[$255 >> 2] = $4; //@line 11839
    $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 11840
    HEAP32[$256 >> 2] = $6; //@line 11841
    $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 11842
    HEAP32[$257 >> 2] = $8; //@line 11843
    $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 11844
    HEAP32[$258 >> 2] = $10; //@line 11845
    $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 11846
    HEAP32[$259 >> 2] = $12; //@line 11847
    $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 11848
    HEAP32[$260 >> 2] = $14; //@line 11849
    $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 11850
    HEAP32[$261 >> 2] = $16; //@line 11851
    $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 11852
    HEAP32[$262 >> 2] = $18; //@line 11853
    $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 11854
    HEAP32[$263 >> 2] = $20; //@line 11855
    $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 11856
    HEAP32[$264 >> 2] = $22; //@line 11857
    $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 11858
    HEAP32[$265 >> 2] = $24; //@line 11859
    $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 11860
    HEAP32[$266 >> 2] = $26; //@line 11861
    $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 11862
    HEAP32[$267 >> 2] = $28; //@line 11863
    $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 11864
    HEAP32[$268 >> 2] = $30; //@line 11865
    $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 11866
    HEAP32[$269 >> 2] = $57; //@line 11867
    sp = STACKTOP; //@line 11868
    return;
   } else if ((label | 0) == 53) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 11872
    $272 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $28, $30, 11, $$1202$i) | 0; //@line 11873
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 11876
     $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 11877
     HEAP32[$273 >> 2] = $2; //@line 11878
     $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 11879
     HEAP32[$274 >> 2] = $4; //@line 11880
     $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 11881
     HEAP32[$275 >> 2] = $6; //@line 11882
     $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 11883
     HEAP32[$276 >> 2] = $8; //@line 11884
     $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 11885
     HEAP32[$277 >> 2] = $10; //@line 11886
     $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 11887
     HEAP32[$278 >> 2] = $12; //@line 11888
     $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 11889
     HEAP32[$279 >> 2] = $14; //@line 11890
     $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 11891
     HEAP32[$280 >> 2] = $16; //@line 11892
     $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 11893
     HEAP32[$281 >> 2] = $18; //@line 11894
     $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 11895
     HEAP32[$282 >> 2] = $20; //@line 11896
     $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 11897
     HEAP32[$283 >> 2] = $22; //@line 11898
     $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 11899
     HEAP32[$284 >> 2] = $24; //@line 11900
     $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 11901
     HEAP32[$285 >> 2] = $26; //@line 11902
     $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 11903
     HEAP32[$286 >> 2] = $28; //@line 11904
     $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 11905
     HEAP32[$287 >> 2] = $30; //@line 11906
     $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 11907
     HEAP32[$288 >> 2] = $57; //@line 11908
     sp = STACKTOP; //@line 11909
     return;
    }
    HEAP8[___async_retval >> 0] = $272; //@line 11913
    ___async_unwind = 0; //@line 11914
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 11915
    $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 11916
    HEAP32[$273 >> 2] = $2; //@line 11917
    $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 11918
    HEAP32[$274 >> 2] = $4; //@line 11919
    $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 11920
    HEAP32[$275 >> 2] = $6; //@line 11921
    $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 11922
    HEAP32[$276 >> 2] = $8; //@line 11923
    $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 11924
    HEAP32[$277 >> 2] = $10; //@line 11925
    $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 11926
    HEAP32[$278 >> 2] = $12; //@line 11927
    $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 11928
    HEAP32[$279 >> 2] = $14; //@line 11929
    $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 11930
    HEAP32[$280 >> 2] = $16; //@line 11931
    $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 11932
    HEAP32[$281 >> 2] = $18; //@line 11933
    $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 11934
    HEAP32[$282 >> 2] = $20; //@line 11935
    $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 11936
    HEAP32[$283 >> 2] = $22; //@line 11937
    $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 11938
    HEAP32[$284 >> 2] = $24; //@line 11939
    $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 11940
    HEAP32[$285 >> 2] = $26; //@line 11941
    $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 11942
    HEAP32[$286 >> 2] = $28; //@line 11943
    $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 11944
    HEAP32[$287 >> 2] = $30; //@line 11945
    $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 11946
    HEAP32[$288 >> 2] = $57; //@line 11947
    sp = STACKTOP; //@line 11948
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$14 >> 2] | 0; //@line 11952
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 11955
    $309 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 11956
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 11959
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 11960
     HEAP32[$310 >> 2] = $2; //@line 11961
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 11962
     HEAP32[$311 >> 2] = $4; //@line 11963
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 11964
     HEAP32[$312 >> 2] = $6; //@line 11965
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 11966
     HEAP32[$313 >> 2] = $8; //@line 11967
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 11968
     HEAP32[$314 >> 2] = $10; //@line 11969
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 11970
     HEAP32[$315 >> 2] = $12; //@line 11971
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 11972
     HEAP32[$316 >> 2] = $14; //@line 11973
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 11974
     HEAP32[$317 >> 2] = $16; //@line 11975
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 11976
     HEAP32[$318 >> 2] = $18; //@line 11977
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 11978
     HEAP32[$319 >> 2] = $20; //@line 11979
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 11980
     HEAP32[$320 >> 2] = $22; //@line 11981
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 11982
     HEAP32[$321 >> 2] = $24; //@line 11983
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 11984
     HEAP32[$322 >> 2] = $26; //@line 11985
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 11986
     HEAP32[$323 >> 2] = $28; //@line 11987
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 11988
     HEAP32[$324 >> 2] = $30; //@line 11989
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 11990
     HEAP32[$325 >> 2] = $57; //@line 11991
     sp = STACKTOP; //@line 11992
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 11996
    ___async_unwind = 0; //@line 11997
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 11998
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 11999
    HEAP32[$310 >> 2] = $2; //@line 12000
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 12001
    HEAP32[$311 >> 2] = $4; //@line 12002
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 12003
    HEAP32[$312 >> 2] = $6; //@line 12004
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 12005
    HEAP32[$313 >> 2] = $8; //@line 12006
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 12007
    HEAP32[$314 >> 2] = $10; //@line 12008
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 12009
    HEAP32[$315 >> 2] = $12; //@line 12010
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 12011
    HEAP32[$316 >> 2] = $14; //@line 12012
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 12013
    HEAP32[$317 >> 2] = $16; //@line 12014
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 12015
    HEAP32[$318 >> 2] = $18; //@line 12016
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 12017
    HEAP32[$319 >> 2] = $20; //@line 12018
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 12019
    HEAP32[$320 >> 2] = $22; //@line 12020
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 12021
    HEAP32[$321 >> 2] = $24; //@line 12022
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 12023
    HEAP32[$322 >> 2] = $26; //@line 12024
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 12025
    HEAP32[$323 >> 2] = $28; //@line 12026
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 12027
    HEAP32[$324 >> 2] = $30; //@line 12028
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 12029
    HEAP32[$325 >> 2] = $57; //@line 12030
    sp = STACKTOP; //@line 12031
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $16 | 0) >= ($18 | 0)) {
     $436 = ___async_retval; //@line 12039
     HEAP32[$436 >> 2] = $6; //@line 12040
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 12046
     HEAP32[$4 >> 2] = $426; //@line 12047
     $427 = $426; //@line 12048
     $429 = $16 - $427 + $18 | 0; //@line 12050
     HEAP16[$12 + 24 >> 1] = $429; //@line 12053
     if ($429 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $427; //@line 12058
      $436 = ___async_retval; //@line 12059
      HEAP32[$436 >> 2] = $6; //@line 12060
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 12065
    $436 = ___async_retval; //@line 12066
    HEAP32[$436 >> 2] = $6; //@line 12067
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 12073
 $436 = ___async_retval; //@line 12074
 HEAP32[$436 >> 2] = $6; //@line 12075
 return;
}
function _sn_coap_parser__async_cb_89($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $245$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 9313
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9315
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9317
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9319
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9321
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9323
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9325
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9327
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9329
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9331
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9333
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9335
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9337
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9339
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9341
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9343
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 9351
   L3 : while (1) {
    $417 = HEAP32[$22 >> 2] | 0; //@line 9353
    $418 = $417 - $16 | 0; //@line 9354
    $37 = $417; //@line 9357
    if (($418 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 9364
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 9367
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 9370
     break;
    }
    $40 = $trunc277$i & 15; //@line 9374
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 9375
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 9387
      $$sink214$i = 13; //@line 9387
      $$sink3$i = 1; //@line 9387
      label = 7; //@line 9388
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 9400
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 9400
      $$sink3$i = 2; //@line 9400
      label = 7; //@line 9401
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 9405
      $437 = $417; //@line 9405
      $59 = $37; //@line 9405
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 9409
     $54 = $37 + $$sink3$i | 0; //@line 9411
     HEAP32[$4 >> 2] = $54; //@line 9412
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 9414
     $437 = $54; //@line 9414
     $59 = $54; //@line 9414
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 9417
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 9428
      $$sink216$i = 13; //@line 9428
      $$sink8$i = 1; //@line 9428
      label = 11; //@line 9429
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 9441
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 9441
      $$sink8$i = 2; //@line 9441
      label = 11; //@line 9442
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 9446
      $74 = $437; //@line 9446
      $82 = $59; //@line 9446
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 9450
     $71 = $59 + $$sink8$i | 0; //@line 9452
     HEAP32[$4 >> 2] = $71; //@line 9453
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 9455
     $74 = $71; //@line 9455
     $82 = $71; //@line 9455
    }
    $$1202$i = $$1202$in$i & 65535; //@line 9457
    $75 = $20 - $74 & 65535; //@line 9459
    $trunc$i = $57 & 65535; //@line 9460
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 52; //@line 9464
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 9472
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 9477
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 9482
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 9487
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 9492
         break L3;
         break;
        }
       case 20:
        {
         label = 49; //@line 9497
         break L3;
         break;
        }
       case 11:
        {
         label = 52; //@line 9502
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 9507
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $82 + 1 | 0; //@line 9520
         HEAP32[$4 >> 2] = $118; //@line 9521
         $119 = $$1202$in$i & 255; //@line 9522
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 9525
         } else {
          $$045$i256$i = $119; //@line 9527
          $$06$i255$i = 0; //@line 9527
          $124 = $118; //@line 9527
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 9529
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 9531
           HEAP32[$4 >> 2] = $124; //@line 9532
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 9535
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 9538
            break;
           } else {
            $$06$i255$i = $127; //@line 9541
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 9547
         $$reg2mem$0 = $57; //@line 9548
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $236 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 9558
         if ((HEAP32[$236 >> 2] | 0) != -1) {
          break L2;
         }
         $239 = $82 + 1 | 0; //@line 9564
         HEAP32[$4 >> 2] = $239; //@line 9565
         $240 = $$1202$in$i & 255; //@line 9566
         if (!($240 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 9569
         } else {
          $$045$i270$i = $240; //@line 9571
          $$06$i269$i = 0; //@line 9571
          $245 = $239; //@line 9571
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 9573
           $245$looptemp = $245;
           $245 = $245 + 1 | 0; //@line 9575
           HEAP32[$4 >> 2] = $245; //@line 9576
           $248 = $$06$i269$i << 8 | HEAPU8[$245$looptemp >> 0]; //@line 9579
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $248; //@line 9582
            break;
           } else {
            $$06$i269$i = $248; //@line 9585
           }
          }
         }
         HEAP32[$236 >> 2] = $$0$lcssa$i272$i; //@line 9589
         $$reg2mem$0 = $57; //@line 9590
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 9600
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $82 + 1 | 0; //@line 9606
         HEAP32[$4 >> 2] = $295; //@line 9607
         $296 = $$1202$in$i & 255; //@line 9608
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 9611
         } else {
          $$045$i263$i = $296; //@line 9613
          $$06$i262$i = 0; //@line 9613
          $301 = $295; //@line 9613
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 9615
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 9617
           HEAP32[$4 >> 2] = $301; //@line 9618
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 9621
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 9624
            break;
           } else {
            $$06$i262$i = $304; //@line 9627
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 9631
         $$reg2mem$0 = $57; //@line 9632
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 9642
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $82 + 1 | 0; //@line 9648
         HEAP32[$4 >> 2] = $332; //@line 9649
         $333 = $$1202$in$i & 255; //@line 9650
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 9653
         } else {
          $$045$i249$i = $333; //@line 9655
          $$06$i248$i = 0; //@line 9655
          $338 = $332; //@line 9655
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 9657
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 9659
           HEAP32[$4 >> 2] = $338; //@line 9660
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 9663
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 9666
            break;
           } else {
            $$06$i248$i = $341; //@line 9669
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 9673
         $$reg2mem$0 = $57; //@line 9674
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 9684
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $82 + 1 | 0; //@line 9690
         HEAP32[$4 >> 2] = $348; //@line 9691
         $349 = $$1202$in$i & 255; //@line 9692
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 9695
         } else {
          $$045$i242$i = $349; //@line 9697
          $$06$i241$i = 0; //@line 9697
          $354 = $348; //@line 9697
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 9699
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 9701
           HEAP32[$4 >> 2] = $354; //@line 9702
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 9705
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 9708
            break;
           } else {
            $$06$i241$i = $357; //@line 9711
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 9715
         $$reg2mem$0 = $57; //@line 9716
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 9726
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $82 + 1 | 0; //@line 9732
         HEAP32[$4 >> 2] = $364; //@line 9733
         $365 = $$1202$in$i & 255; //@line 9734
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 9737
         } else {
          $$045$i235$i = $365; //@line 9739
          $$06$i234$i = 0; //@line 9739
          $370 = $364; //@line 9739
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 9741
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 9743
           HEAP32[$4 >> 2] = $370; //@line 9744
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 9747
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 9750
            break;
           } else {
            $$06$i234$i = $373; //@line 9753
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 9757
         $$reg2mem$0 = $57; //@line 9758
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 9768
         $378 = HEAP8[$377 >> 0] | 0; //@line 9769
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 9776
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 9778
         HEAP32[$4 >> 2] = $383; //@line 9779
         $384 = $$1202$in$i & 255; //@line 9780
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 9783
         } else {
          $$045$i228$i = $384; //@line 9785
          $$06$i227$i = 0; //@line 9785
          $389 = $383; //@line 9785
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 9787
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 9789
           HEAP32[$4 >> 2] = $389; //@line 9790
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 9793
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 9796
            break;
           } else {
            $$06$i227$i = $392; //@line 9799
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 9805
         $$reg2mem$0 = $57; //@line 9806
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 9816
         $399 = HEAP8[$398 >> 0] | 0; //@line 9817
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 9824
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 9826
         HEAP32[$4 >> 2] = $404; //@line 9827
         $405 = $$1202$in$i & 255; //@line 9828
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 9831
         } else {
          $$045$i221$i = $405; //@line 9833
          $$06$i220$i = 0; //@line 9833
          $410 = $404; //@line 9833
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 9835
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 9837
           HEAP32[$4 >> 2] = $410; //@line 9838
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 9841
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 9844
            break;
           } else {
            $$06$i220$i = $413; //@line 9847
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 9853
         $$reg2mem$0 = $57; //@line 9854
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $82 + 1 | 0; //@line 9881
    HEAP32[$4 >> 2] = $106; //@line 9882
    $107 = $$1202$in$i & 255; //@line 9883
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 9886
    } else {
     $$045$i$i = $107; //@line 9888
     $$06$i$i = 0; //@line 9888
     $112 = $106; //@line 9888
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 9890
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 9892
      HEAP32[$4 >> 2] = $112; //@line 9893
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 9896
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 9899
       break;
      } else {
       $$06$i$i = $115; //@line 9902
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 9906
    $$reg2mem$0 = $57; //@line 9907
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$10 >> 2] | 0; //@line 9910
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 9911
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 9912
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 9915
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 9916
     HEAP32[$80 >> 2] = $2; //@line 9917
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 9918
     HEAP32[$81 >> 2] = $82; //@line 9919
     $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 9920
     HEAP32[$83 >> 2] = $4; //@line 9921
     $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 9922
     HEAP32[$84 >> 2] = $$1202$in$i; //@line 9923
     $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 9924
     HEAP32[$85 >> 2] = $6; //@line 9925
     $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 9926
     HEAP32[$86 >> 2] = $8; //@line 9927
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 9928
     HEAP32[$87 >> 2] = $10; //@line 9929
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 9930
     HEAP32[$88 >> 2] = $12; //@line 9931
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 9932
     HEAP32[$89 >> 2] = $14; //@line 9933
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 9934
     HEAP16[$90 >> 1] = $trunc$i; //@line 9935
     $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 9936
     HEAP16[$91 >> 1] = $$1202$i; //@line 9937
     $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 9938
     HEAP32[$92 >> 2] = $16; //@line 9939
     $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 9940
     HEAP32[$93 >> 2] = $18; //@line 9941
     $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 9942
     HEAP32[$94 >> 2] = $20; //@line 9943
     $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 9944
     HEAP32[$95 >> 2] = $22; //@line 9945
     $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 9946
     HEAP32[$96 >> 2] = $57; //@line 9947
     $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 9948
     HEAP32[$97 >> 2] = $24; //@line 9949
     $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 9950
     HEAP32[$98 >> 2] = $26; //@line 9951
     $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 9952
     HEAP16[$99 >> 1] = $75; //@line 9953
     $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 9954
     HEAP32[$100 >> 2] = $28; //@line 9955
     $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 9956
     HEAP32[$101 >> 2] = $30; //@line 9957
     sp = STACKTOP; //@line 9958
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 9962
    ___async_unwind = 0; //@line 9963
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 9964
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 9965
    HEAP32[$80 >> 2] = $2; //@line 9966
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 9967
    HEAP32[$81 >> 2] = $82; //@line 9968
    $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 9969
    HEAP32[$83 >> 2] = $4; //@line 9970
    $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 9971
    HEAP32[$84 >> 2] = $$1202$in$i; //@line 9972
    $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 9973
    HEAP32[$85 >> 2] = $6; //@line 9974
    $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 9975
    HEAP32[$86 >> 2] = $8; //@line 9976
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 9977
    HEAP32[$87 >> 2] = $10; //@line 9978
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 9979
    HEAP32[$88 >> 2] = $12; //@line 9980
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 9981
    HEAP32[$89 >> 2] = $14; //@line 9982
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 9983
    HEAP16[$90 >> 1] = $trunc$i; //@line 9984
    $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 9985
    HEAP16[$91 >> 1] = $$1202$i; //@line 9986
    $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 9987
    HEAP32[$92 >> 2] = $16; //@line 9988
    $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 9989
    HEAP32[$93 >> 2] = $18; //@line 9990
    $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 9991
    HEAP32[$94 >> 2] = $20; //@line 9992
    $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 9993
    HEAP32[$95 >> 2] = $22; //@line 9994
    $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 9995
    HEAP32[$96 >> 2] = $57; //@line 9996
    $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 9997
    HEAP32[$97 >> 2] = $24; //@line 9998
    $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 9999
    HEAP32[$98 >> 2] = $26; //@line 10000
    $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 10001
    HEAP16[$99 >> 1] = $75; //@line 10002
    $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 10003
    HEAP32[$100 >> 2] = $28; //@line 10004
    $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 10005
    HEAP32[$101 >> 2] = $30; //@line 10006
    sp = STACKTOP; //@line 10007
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 10011
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$14 >> 2] | 0; //@line 10017
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 10025
    $139 = $82 + 1 | 0; //@line 10026
    HEAP32[$4 >> 2] = $139; //@line 10027
    $140 = HEAP32[$10 >> 2] | 0; //@line 10028
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 10029
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 10030
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 10033
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 10034
     HEAP32[$142 >> 2] = $2; //@line 10035
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 10036
     HEAP32[$143 >> 2] = $4; //@line 10037
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 10038
     HEAP32[$144 >> 2] = $6; //@line 10039
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 10040
     HEAP32[$145 >> 2] = $8; //@line 10041
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 10042
     HEAP32[$146 >> 2] = $10; //@line 10043
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 10044
     HEAP32[$147 >> 2] = $12; //@line 10045
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 10046
     HEAP32[$148 >> 2] = $14; //@line 10047
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 10048
     HEAP32[$149 >> 2] = $16; //@line 10049
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 10050
     HEAP32[$150 >> 2] = $18; //@line 10051
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 10052
     HEAP32[$151 >> 2] = $20; //@line 10053
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 10054
     HEAP32[$152 >> 2] = $22; //@line 10055
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 10056
     HEAP32[$153 >> 2] = $24; //@line 10057
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 10058
     HEAP32[$154 >> 2] = $26; //@line 10059
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 10060
     HEAP32[$155 >> 2] = $28; //@line 10061
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 10062
     HEAP32[$156 >> 2] = $30; //@line 10063
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 10064
     HEAP32[$157 >> 2] = $57; //@line 10065
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 10066
     HEAP32[$158 >> 2] = $139; //@line 10067
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 10068
     HEAP32[$159 >> 2] = $131; //@line 10069
     sp = STACKTOP; //@line 10070
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 10074
    ___async_unwind = 0; //@line 10075
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 10076
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 10077
    HEAP32[$142 >> 2] = $2; //@line 10078
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 10079
    HEAP32[$143 >> 2] = $4; //@line 10080
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 10081
    HEAP32[$144 >> 2] = $6; //@line 10082
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 10083
    HEAP32[$145 >> 2] = $8; //@line 10084
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 10085
    HEAP32[$146 >> 2] = $10; //@line 10086
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 10087
    HEAP32[$147 >> 2] = $12; //@line 10088
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 10089
    HEAP32[$148 >> 2] = $14; //@line 10090
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 10091
    HEAP32[$149 >> 2] = $16; //@line 10092
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 10093
    HEAP32[$150 >> 2] = $18; //@line 10094
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 10095
    HEAP32[$151 >> 2] = $20; //@line 10096
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 10097
    HEAP32[$152 >> 2] = $22; //@line 10098
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 10099
    HEAP32[$153 >> 2] = $24; //@line 10100
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 10101
    HEAP32[$154 >> 2] = $26; //@line 10102
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 10103
    HEAP32[$155 >> 2] = $28; //@line 10104
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 10105
    HEAP32[$156 >> 2] = $30; //@line 10106
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 10107
    HEAP32[$157 >> 2] = $57; //@line 10108
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 10109
    HEAP32[$158 >> 2] = $139; //@line 10110
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 10111
    HEAP32[$159 >> 2] = $131; //@line 10112
    sp = STACKTOP; //@line 10113
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$14 >> 2] | 0; //@line 10117
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 10119
    $163 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 10120
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 10123
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 10124
     HEAP32[$164 >> 2] = $2; //@line 10125
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 10126
     HEAP32[$165 >> 2] = $4; //@line 10127
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 10128
     HEAP32[$166 >> 2] = $6; //@line 10129
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 10130
     HEAP32[$167 >> 2] = $8; //@line 10131
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 10132
     HEAP32[$168 >> 2] = $10; //@line 10133
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 10134
     HEAP32[$169 >> 2] = $12; //@line 10135
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 10136
     HEAP32[$170 >> 2] = $14; //@line 10137
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 10138
     HEAP32[$171 >> 2] = $16; //@line 10139
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 10140
     HEAP32[$172 >> 2] = $18; //@line 10141
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 10142
     HEAP32[$173 >> 2] = $20; //@line 10143
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 10144
     HEAP32[$174 >> 2] = $22; //@line 10145
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 10146
     HEAP32[$175 >> 2] = $24; //@line 10147
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 10148
     HEAP32[$176 >> 2] = $26; //@line 10149
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 10150
     HEAP32[$177 >> 2] = $28; //@line 10151
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 10152
     HEAP32[$178 >> 2] = $30; //@line 10153
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 10154
     HEAP32[$179 >> 2] = $57; //@line 10155
     sp = STACKTOP; //@line 10156
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 10160
    ___async_unwind = 0; //@line 10161
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 10162
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 10163
    HEAP32[$164 >> 2] = $2; //@line 10164
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 10165
    HEAP32[$165 >> 2] = $4; //@line 10166
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 10167
    HEAP32[$166 >> 2] = $6; //@line 10168
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 10169
    HEAP32[$167 >> 2] = $8; //@line 10170
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 10171
    HEAP32[$168 >> 2] = $10; //@line 10172
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 10173
    HEAP32[$169 >> 2] = $12; //@line 10174
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 10175
    HEAP32[$170 >> 2] = $14; //@line 10176
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 10177
    HEAP32[$171 >> 2] = $16; //@line 10178
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 10179
    HEAP32[$172 >> 2] = $18; //@line 10180
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 10181
    HEAP32[$173 >> 2] = $20; //@line 10182
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 10183
    HEAP32[$174 >> 2] = $22; //@line 10184
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 10185
    HEAP32[$175 >> 2] = $24; //@line 10186
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 10187
    HEAP32[$176 >> 2] = $26; //@line 10188
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 10189
    HEAP32[$177 >> 2] = $28; //@line 10190
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 10191
    HEAP32[$178 >> 2] = $30; //@line 10192
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 10193
    HEAP32[$179 >> 2] = $57; //@line 10194
    sp = STACKTOP; //@line 10195
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 10199
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$14 >> 2] | 0; //@line 10205
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 10213
    $189 = $82 + 1 | 0; //@line 10214
    HEAP32[$4 >> 2] = $189; //@line 10215
    $190 = HEAP32[$10 >> 2] | 0; //@line 10216
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 10217
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 10218
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 10221
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 10222
     HEAP32[$192 >> 2] = $2; //@line 10223
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 10224
     HEAP32[$193 >> 2] = $4; //@line 10225
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 10226
     HEAP32[$194 >> 2] = $6; //@line 10227
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 10228
     HEAP32[$195 >> 2] = $8; //@line 10229
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 10230
     HEAP32[$196 >> 2] = $10; //@line 10231
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 10232
     HEAP32[$197 >> 2] = $12; //@line 10233
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 10234
     HEAP32[$198 >> 2] = $14; //@line 10235
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 10236
     HEAP32[$199 >> 2] = $16; //@line 10237
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 10238
     HEAP32[$200 >> 2] = $18; //@line 10239
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 10240
     HEAP32[$201 >> 2] = $20; //@line 10241
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 10242
     HEAP32[$202 >> 2] = $22; //@line 10243
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 10244
     HEAP32[$203 >> 2] = $24; //@line 10245
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 10246
     HEAP32[$204 >> 2] = $26; //@line 10247
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 10248
     HEAP32[$205 >> 2] = $28; //@line 10249
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 10250
     HEAP32[$206 >> 2] = $30; //@line 10251
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 10252
     HEAP32[$207 >> 2] = $57; //@line 10253
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 10254
     HEAP32[$208 >> 2] = $189; //@line 10255
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 10256
     HEAP32[$209 >> 2] = $181; //@line 10257
     sp = STACKTOP; //@line 10258
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 10262
    ___async_unwind = 0; //@line 10263
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 10264
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 10265
    HEAP32[$192 >> 2] = $2; //@line 10266
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 10267
    HEAP32[$193 >> 2] = $4; //@line 10268
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 10269
    HEAP32[$194 >> 2] = $6; //@line 10270
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 10271
    HEAP32[$195 >> 2] = $8; //@line 10272
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 10273
    HEAP32[$196 >> 2] = $10; //@line 10274
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 10275
    HEAP32[$197 >> 2] = $12; //@line 10276
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 10277
    HEAP32[$198 >> 2] = $14; //@line 10278
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 10279
    HEAP32[$199 >> 2] = $16; //@line 10280
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 10281
    HEAP32[$200 >> 2] = $18; //@line 10282
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 10283
    HEAP32[$201 >> 2] = $20; //@line 10284
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 10285
    HEAP32[$202 >> 2] = $22; //@line 10286
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 10287
    HEAP32[$203 >> 2] = $24; //@line 10288
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 10289
    HEAP32[$204 >> 2] = $26; //@line 10290
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 10291
    HEAP32[$205 >> 2] = $28; //@line 10292
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 10293
    HEAP32[$206 >> 2] = $30; //@line 10294
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 10295
    HEAP32[$207 >> 2] = $57; //@line 10296
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 10297
    HEAP32[$208 >> 2] = $189; //@line 10298
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 10299
    HEAP32[$209 >> 2] = $181; //@line 10300
    sp = STACKTOP; //@line 10301
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$14 >> 2] | 0; //@line 10305
    $212 = $211 + 56 | 0; //@line 10306
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 10313
    $216 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 10314
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 10317
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 10318
     HEAP32[$217 >> 2] = $2; //@line 10319
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 10320
     HEAP32[$218 >> 2] = $4; //@line 10321
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 10322
     HEAP32[$219 >> 2] = $6; //@line 10323
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 10324
     HEAP32[$220 >> 2] = $8; //@line 10325
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 10326
     HEAP32[$221 >> 2] = $10; //@line 10327
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 10328
     HEAP32[$222 >> 2] = $12; //@line 10329
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 10330
     HEAP32[$223 >> 2] = $14; //@line 10331
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 10332
     HEAP32[$224 >> 2] = $16; //@line 10333
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 10334
     HEAP32[$225 >> 2] = $18; //@line 10335
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 10336
     HEAP32[$226 >> 2] = $20; //@line 10337
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 10338
     HEAP32[$227 >> 2] = $22; //@line 10339
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 10340
     HEAP32[$228 >> 2] = $24; //@line 10341
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 10342
     HEAP32[$229 >> 2] = $26; //@line 10343
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 10344
     HEAP32[$230 >> 2] = $28; //@line 10345
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 10346
     HEAP32[$231 >> 2] = $30; //@line 10347
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 10348
     HEAP32[$232 >> 2] = $57; //@line 10349
     sp = STACKTOP; //@line 10350
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 10354
    ___async_unwind = 0; //@line 10355
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 10356
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 10357
    HEAP32[$217 >> 2] = $2; //@line 10358
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 10359
    HEAP32[$218 >> 2] = $4; //@line 10360
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 10361
    HEAP32[$219 >> 2] = $6; //@line 10362
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 10363
    HEAP32[$220 >> 2] = $8; //@line 10364
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 10365
    HEAP32[$221 >> 2] = $10; //@line 10366
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 10367
    HEAP32[$222 >> 2] = $12; //@line 10368
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 10369
    HEAP32[$223 >> 2] = $14; //@line 10370
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 10371
    HEAP32[$224 >> 2] = $16; //@line 10372
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 10373
    HEAP32[$225 >> 2] = $18; //@line 10374
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 10375
    HEAP32[$226 >> 2] = $20; //@line 10376
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 10377
    HEAP32[$227 >> 2] = $22; //@line 10378
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 10379
    HEAP32[$228 >> 2] = $24; //@line 10380
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 10381
    HEAP32[$229 >> 2] = $26; //@line 10382
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 10383
    HEAP32[$230 >> 2] = $28; //@line 10384
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 10385
    HEAP32[$231 >> 2] = $30; //@line 10386
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 10387
    HEAP32[$232 >> 2] = $57; //@line 10388
    sp = STACKTOP; //@line 10389
    return;
   } else if ((label | 0) == 49) {
    $250 = HEAP32[$14 >> 2] | 0; //@line 10393
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 10396
    $253 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $250 + 60 | 0, $250 + 8 | 0, 20, $$1202$i) | 0; //@line 10397
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 10400
     $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 10401
     HEAP32[$254 >> 2] = $2; //@line 10402
     $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 10403
     HEAP32[$255 >> 2] = $4; //@line 10404
     $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 10405
     HEAP32[$256 >> 2] = $6; //@line 10406
     $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 10407
     HEAP32[$257 >> 2] = $8; //@line 10408
     $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 10409
     HEAP32[$258 >> 2] = $10; //@line 10410
     $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 10411
     HEAP32[$259 >> 2] = $12; //@line 10412
     $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 10413
     HEAP32[$260 >> 2] = $14; //@line 10414
     $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 10415
     HEAP32[$261 >> 2] = $16; //@line 10416
     $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 10417
     HEAP32[$262 >> 2] = $18; //@line 10418
     $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 10419
     HEAP32[$263 >> 2] = $20; //@line 10420
     $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 10421
     HEAP32[$264 >> 2] = $22; //@line 10422
     $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 10423
     HEAP32[$265 >> 2] = $24; //@line 10424
     $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 10425
     HEAP32[$266 >> 2] = $26; //@line 10426
     $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 10427
     HEAP32[$267 >> 2] = $28; //@line 10428
     $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 10429
     HEAP32[$268 >> 2] = $30; //@line 10430
     $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 10431
     HEAP32[$269 >> 2] = $57; //@line 10432
     sp = STACKTOP; //@line 10433
     return;
    }
    HEAP8[___async_retval >> 0] = $253; //@line 10437
    ___async_unwind = 0; //@line 10438
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 10439
    $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 10440
    HEAP32[$254 >> 2] = $2; //@line 10441
    $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 10442
    HEAP32[$255 >> 2] = $4; //@line 10443
    $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 10444
    HEAP32[$256 >> 2] = $6; //@line 10445
    $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 10446
    HEAP32[$257 >> 2] = $8; //@line 10447
    $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 10448
    HEAP32[$258 >> 2] = $10; //@line 10449
    $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 10450
    HEAP32[$259 >> 2] = $12; //@line 10451
    $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 10452
    HEAP32[$260 >> 2] = $14; //@line 10453
    $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 10454
    HEAP32[$261 >> 2] = $16; //@line 10455
    $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 10456
    HEAP32[$262 >> 2] = $18; //@line 10457
    $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 10458
    HEAP32[$263 >> 2] = $20; //@line 10459
    $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 10460
    HEAP32[$264 >> 2] = $22; //@line 10461
    $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 10462
    HEAP32[$265 >> 2] = $24; //@line 10463
    $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 10464
    HEAP32[$266 >> 2] = $26; //@line 10465
    $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 10466
    HEAP32[$267 >> 2] = $28; //@line 10467
    $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 10468
    HEAP32[$268 >> 2] = $30; //@line 10469
    $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 10470
    HEAP32[$269 >> 2] = $57; //@line 10471
    sp = STACKTOP; //@line 10472
    return;
   } else if ((label | 0) == 52) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 10476
    $271 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $28, $30, 11, $$1202$i) | 0; //@line 10477
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 10480
     $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 10481
     HEAP32[$272 >> 2] = $2; //@line 10482
     $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 10483
     HEAP32[$273 >> 2] = $4; //@line 10484
     $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 10485
     HEAP32[$274 >> 2] = $6; //@line 10486
     $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 10487
     HEAP32[$275 >> 2] = $8; //@line 10488
     $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 10489
     HEAP32[$276 >> 2] = $10; //@line 10490
     $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 10491
     HEAP32[$277 >> 2] = $12; //@line 10492
     $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 10493
     HEAP32[$278 >> 2] = $14; //@line 10494
     $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 10495
     HEAP32[$279 >> 2] = $16; //@line 10496
     $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 10497
     HEAP32[$280 >> 2] = $18; //@line 10498
     $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 10499
     HEAP32[$281 >> 2] = $20; //@line 10500
     $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 10501
     HEAP32[$282 >> 2] = $22; //@line 10502
     $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 10503
     HEAP32[$283 >> 2] = $24; //@line 10504
     $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 10505
     HEAP32[$284 >> 2] = $26; //@line 10506
     $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 10507
     HEAP32[$285 >> 2] = $28; //@line 10508
     $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 10509
     HEAP32[$286 >> 2] = $30; //@line 10510
     $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 10511
     HEAP32[$287 >> 2] = $57; //@line 10512
     sp = STACKTOP; //@line 10513
     return;
    }
    HEAP8[___async_retval >> 0] = $271; //@line 10517
    ___async_unwind = 0; //@line 10518
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 10519
    $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 10520
    HEAP32[$272 >> 2] = $2; //@line 10521
    $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 10522
    HEAP32[$273 >> 2] = $4; //@line 10523
    $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 10524
    HEAP32[$274 >> 2] = $6; //@line 10525
    $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 10526
    HEAP32[$275 >> 2] = $8; //@line 10527
    $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 10528
    HEAP32[$276 >> 2] = $10; //@line 10529
    $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 10530
    HEAP32[$277 >> 2] = $12; //@line 10531
    $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 10532
    HEAP32[$278 >> 2] = $14; //@line 10533
    $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 10534
    HEAP32[$279 >> 2] = $16; //@line 10535
    $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 10536
    HEAP32[$280 >> 2] = $18; //@line 10537
    $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 10538
    HEAP32[$281 >> 2] = $20; //@line 10539
    $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 10540
    HEAP32[$282 >> 2] = $22; //@line 10541
    $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 10542
    HEAP32[$283 >> 2] = $24; //@line 10543
    $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 10544
    HEAP32[$284 >> 2] = $26; //@line 10545
    $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 10546
    HEAP32[$285 >> 2] = $28; //@line 10547
    $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 10548
    HEAP32[$286 >> 2] = $30; //@line 10549
    $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 10550
    HEAP32[$287 >> 2] = $57; //@line 10551
    sp = STACKTOP; //@line 10552
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$14 >> 2] | 0; //@line 10556
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 10559
    $309 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 10560
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 10563
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 10564
     HEAP32[$310 >> 2] = $2; //@line 10565
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 10566
     HEAP32[$311 >> 2] = $4; //@line 10567
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 10568
     HEAP32[$312 >> 2] = $6; //@line 10569
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 10570
     HEAP32[$313 >> 2] = $8; //@line 10571
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 10572
     HEAP32[$314 >> 2] = $10; //@line 10573
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 10574
     HEAP32[$315 >> 2] = $12; //@line 10575
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 10576
     HEAP32[$316 >> 2] = $14; //@line 10577
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 10578
     HEAP32[$317 >> 2] = $16; //@line 10579
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 10580
     HEAP32[$318 >> 2] = $18; //@line 10581
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 10582
     HEAP32[$319 >> 2] = $20; //@line 10583
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 10584
     HEAP32[$320 >> 2] = $22; //@line 10585
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 10586
     HEAP32[$321 >> 2] = $24; //@line 10587
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 10588
     HEAP32[$322 >> 2] = $26; //@line 10589
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 10590
     HEAP32[$323 >> 2] = $28; //@line 10591
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 10592
     HEAP32[$324 >> 2] = $30; //@line 10593
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 10594
     HEAP32[$325 >> 2] = $57; //@line 10595
     sp = STACKTOP; //@line 10596
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 10600
    ___async_unwind = 0; //@line 10601
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 10602
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 10603
    HEAP32[$310 >> 2] = $2; //@line 10604
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 10605
    HEAP32[$311 >> 2] = $4; //@line 10606
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 10607
    HEAP32[$312 >> 2] = $6; //@line 10608
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 10609
    HEAP32[$313 >> 2] = $8; //@line 10610
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 10611
    HEAP32[$314 >> 2] = $10; //@line 10612
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 10613
    HEAP32[$315 >> 2] = $12; //@line 10614
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 10615
    HEAP32[$316 >> 2] = $14; //@line 10616
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 10617
    HEAP32[$317 >> 2] = $16; //@line 10618
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 10619
    HEAP32[$318 >> 2] = $18; //@line 10620
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 10621
    HEAP32[$319 >> 2] = $20; //@line 10622
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 10623
    HEAP32[$320 >> 2] = $22; //@line 10624
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 10625
    HEAP32[$321 >> 2] = $24; //@line 10626
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 10627
    HEAP32[$322 >> 2] = $26; //@line 10628
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 10629
    HEAP32[$323 >> 2] = $28; //@line 10630
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 10631
    HEAP32[$324 >> 2] = $30; //@line 10632
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 10633
    HEAP32[$325 >> 2] = $57; //@line 10634
    sp = STACKTOP; //@line 10635
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $16 | 0) >= ($18 | 0)) {
     $436 = ___async_retval; //@line 10643
     HEAP32[$436 >> 2] = $6; //@line 10644
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 10650
     HEAP32[$4 >> 2] = $426; //@line 10651
     $427 = $426; //@line 10652
     $429 = $16 - $427 + $18 | 0; //@line 10654
     HEAP16[$12 + 24 >> 1] = $429; //@line 10657
     if ($429 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $427; //@line 10662
      $436 = ___async_retval; //@line 10663
      HEAP32[$436 >> 2] = $6; //@line 10664
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 10669
    $436 = ___async_retval; //@line 10670
    HEAP32[$436 >> 2] = $6; //@line 10671
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 10677
 $436 = ___async_retval; //@line 10678
 HEAP32[$436 >> 2] = $6; //@line 10679
 return;
}
function _sn_coap_parser__async_cb_87($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $110 = 0, $111 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $131 = 0, $135 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $185 = 0, $188 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $219 = 0, $22 = 0, $220 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $247 = 0, $248 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $308 = 0, $311 = 0, $313 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $336 = 0, $339 = 0, $34 = 0, $340 = 0, $345 = 0, $348 = 0, $352 = 0, $355 = 0, $356 = 0, $36 = 0, $361 = 0, $364 = 0, $368 = 0, $371 = 0, $372 = 0, $377 = 0, $380 = 0, $384 = 0, $385 = 0, $390 = 0, $391 = 0, $396 = 0, $399 = 0, $4 = 0, $405 = 0, $406 = 0, $41 = 0, $411 = 0, $412 = 0, $417 = 0, $420 = 0, $424 = 0, $425 = 0, $433 = 0, $434 = 0, $436 = 0, $44 = 0, $443 = 0, $444 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $128$looptemp = 0, $253$looptemp = 0, $308$looptemp = 0, $345$looptemp = 0, $361$looptemp = 0, $377$looptemp = 0, $396$looptemp = 0, $417$looptemp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 6511
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6513
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6515
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6517
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6519
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6521
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6523
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6525
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6527
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6529
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6531
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6533
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6535
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6537
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6539
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6541
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6543
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6545
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6547
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6549
 HEAP32[(HEAP32[$14 >> 2] | 0) + 52 >> 2] = $AsyncRetVal; //@line 6552
 L2 : do {
  if ($AsyncRetVal | 0) {
   _memcpy($AsyncRetVal | 0, $34 | 0, $36 | 0) | 0; //@line 6556
   HEAP32[$4 >> 2] = $34 + $36; //@line 6558
   $$reg2mem$0 = $32; //@line 6559
   L4 : while (1) {
    $424 = HEAP32[$22 >> 2] | 0; //@line 6561
    $425 = $424 - $16 | 0; //@line 6562
    $41 = $424; //@line 6565
    if (($425 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $425 & 65535) << 16 >> 16)) {
     label = 92; //@line 6572
     break;
    }
    $trunc277$i = HEAP8[$41 >> 0] | 0; //@line 6575
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 92; //@line 6578
     break;
    }
    $44 = $trunc277$i & 15; //@line 6582
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 6583
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$41 + 1 >> 0] | 0; //@line 6595
      $$sink214$i = 13; //@line 6595
      $$sink3$i = 1; //@line 6595
      label = 7; //@line 6596
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$41 + 1 >> 0] << 8) + 269 | 0; //@line 6608
      $$sink214$i = HEAPU8[$41 + 2 >> 0] | 0; //@line 6608
      $$sink3$i = 2; //@line 6608
      label = 7; //@line 6609
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 6613
      $444 = $424; //@line 6613
      $63 = $41; //@line 6613
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 6617
     $58 = $41 + $$sink3$i | 0; //@line 6619
     HEAP32[$4 >> 2] = $58; //@line 6620
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 6622
     $444 = $58; //@line 6622
     $63 = $58; //@line 6622
    }
    $61 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 6625
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$63 + 1 >> 0] | 0; //@line 6636
      $$sink216$i = 13; //@line 6636
      $$sink8$i = 1; //@line 6636
      label = 11; //@line 6637
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$63 + 1 >> 0] << 8) + 269 | 0; //@line 6649
      $$sink216$i = HEAPU8[$63 + 2 >> 0] | 0; //@line 6649
      $$sink8$i = 2; //@line 6649
      label = 11; //@line 6650
      break;
     }
    default:
     {
      $$1202$in$i = $44; //@line 6654
      $78 = $444; //@line 6654
      $86 = $63; //@line 6654
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 6658
     $75 = $63 + $$sink8$i | 0; //@line 6660
     HEAP32[$4 >> 2] = $75; //@line 6661
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 6663
     $78 = $75; //@line 6663
     $86 = $75; //@line 6663
    }
    $$1202$i = $$1202$in$i & 65535; //@line 6665
    $79 = $20 - $78 & 65535; //@line 6667
    $trunc$i = $61 & 65535; //@line 6668
    L21 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 54; //@line 6672
       break L4;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 6680
        break L4;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 6685
         break L4;
         break;
        }
       case 4:
        {
         label = 32; //@line 6690
         break L4;
         break;
        }
       case 3:
        {
         label = 35; //@line 6695
         break L4;
         break;
        }
       case 8:
        {
         label = 42; //@line 6700
         break L4;
         break;
        }
       case 20:
        {
         label = 51; //@line 6705
         break L4;
         break;
        }
       case 11:
        {
         label = 54; //@line 6710
         break L4;
         break;
        }
       case 15:
        {
         label = 62; //@line 6715
         break L4;
         break;
        }
       case 12:
        {
         break L21;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $122 = $86 + 1 | 0; //@line 6728
         HEAP32[$4 >> 2] = $122; //@line 6729
         $123 = $$1202$in$i & 255; //@line 6730
         if (!($123 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 6733
         } else {
          $$045$i256$i = $123; //@line 6735
          $$06$i255$i = 0; //@line 6735
          $128 = $122; //@line 6735
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 6737
           $128$looptemp = $128;
           $128 = $128 + 1 | 0; //@line 6739
           HEAP32[$4 >> 2] = $128; //@line 6740
           $131 = $$06$i255$i << 8 | HEAPU8[$128$looptemp >> 0]; //@line 6743
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $131; //@line 6746
            break;
           } else {
            $$06$i255$i = $131; //@line 6749
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 6755
         $$reg2mem$0 = $61; //@line 6756
         continue L4;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $244 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 6766
         if ((HEAP32[$244 >> 2] | 0) != -1) {
          break L2;
         }
         $247 = $86 + 1 | 0; //@line 6772
         HEAP32[$4 >> 2] = $247; //@line 6773
         $248 = $$1202$in$i & 255; //@line 6774
         if (!($248 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 6777
         } else {
          $$045$i270$i = $248; //@line 6779
          $$06$i269$i = 0; //@line 6779
          $253 = $247; //@line 6779
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 6781
           $253$looptemp = $253;
           $253 = $253 + 1 | 0; //@line 6783
           HEAP32[$4 >> 2] = $253; //@line 6784
           $256 = $$06$i269$i << 8 | HEAPU8[$253$looptemp >> 0]; //@line 6787
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $256; //@line 6790
            break;
           } else {
            $$06$i269$i = $256; //@line 6793
           }
          }
         }
         HEAP32[$244 >> 2] = $$0$lcssa$i272$i; //@line 6797
         $$reg2mem$0 = $61; //@line 6798
         continue L4;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $299 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 6808
         if ((HEAP32[$299 >> 2] | 0) != -1) {
          break L2;
         }
         $302 = $86 + 1 | 0; //@line 6814
         HEAP32[$4 >> 2] = $302; //@line 6815
         $303 = $$1202$in$i & 255; //@line 6816
         if (!($303 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 6819
         } else {
          $$045$i263$i = $303; //@line 6821
          $$06$i262$i = 0; //@line 6821
          $308 = $302; //@line 6821
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 6823
           $308$looptemp = $308;
           $308 = $308 + 1 | 0; //@line 6825
           HEAP32[$4 >> 2] = $308; //@line 6826
           $311 = $$06$i262$i << 8 | HEAPU8[$308$looptemp >> 0]; //@line 6829
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $311; //@line 6832
            break;
           } else {
            $$06$i262$i = $311; //@line 6835
           }
          }
         }
         HEAP32[$299 >> 2] = $$0$lcssa$i265$i; //@line 6839
         $$reg2mem$0 = $61; //@line 6840
         continue L4;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $336 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 6850
         if ((HEAP32[$336 >> 2] | 0) != -1) {
          break L2;
         }
         $339 = $86 + 1 | 0; //@line 6856
         HEAP32[$4 >> 2] = $339; //@line 6857
         $340 = $$1202$in$i & 255; //@line 6858
         if (!($340 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 6861
         } else {
          $$045$i249$i = $340; //@line 6863
          $$06$i248$i = 0; //@line 6863
          $345 = $339; //@line 6863
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 6865
           $345$looptemp = $345;
           $345 = $345 + 1 | 0; //@line 6867
           HEAP32[$4 >> 2] = $345; //@line 6868
           $348 = $$06$i248$i << 8 | HEAPU8[$345$looptemp >> 0]; //@line 6871
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $348; //@line 6874
            break;
           } else {
            $$06$i248$i = $348; //@line 6877
           }
          }
         }
         HEAP32[$336 >> 2] = $$0$lcssa$i251$i; //@line 6881
         $$reg2mem$0 = $61; //@line 6882
         continue L4;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $352 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 6892
         if ((HEAP32[$352 >> 2] | 0) != -1) {
          break L2;
         }
         $355 = $86 + 1 | 0; //@line 6898
         HEAP32[$4 >> 2] = $355; //@line 6899
         $356 = $$1202$in$i & 255; //@line 6900
         if (!($356 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 6903
         } else {
          $$045$i242$i = $356; //@line 6905
          $$06$i241$i = 0; //@line 6905
          $361 = $355; //@line 6905
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 6907
           $361$looptemp = $361;
           $361 = $361 + 1 | 0; //@line 6909
           HEAP32[$4 >> 2] = $361; //@line 6910
           $364 = $$06$i241$i << 8 | HEAPU8[$361$looptemp >> 0]; //@line 6913
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $364; //@line 6916
            break;
           } else {
            $$06$i241$i = $364; //@line 6919
           }
          }
         }
         HEAP32[$352 >> 2] = $$0$lcssa$i244$i; //@line 6923
         $$reg2mem$0 = $61; //@line 6924
         continue L4;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $368 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 6934
         if ((HEAP32[$368 >> 2] | 0) != -1) {
          break L2;
         }
         $371 = $86 + 1 | 0; //@line 6940
         HEAP32[$4 >> 2] = $371; //@line 6941
         $372 = $$1202$in$i & 255; //@line 6942
         if (!($372 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 6945
         } else {
          $$045$i235$i = $372; //@line 6947
          $$06$i234$i = 0; //@line 6947
          $377 = $371; //@line 6947
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 6949
           $377$looptemp = $377;
           $377 = $377 + 1 | 0; //@line 6951
           HEAP32[$4 >> 2] = $377; //@line 6952
           $380 = $$06$i234$i << 8 | HEAPU8[$377$looptemp >> 0]; //@line 6955
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $380; //@line 6958
            break;
           } else {
            $$06$i234$i = $380; //@line 6961
           }
          }
         }
         HEAP32[$368 >> 2] = $$0$lcssa$i237$i; //@line 6965
         $$reg2mem$0 = $61; //@line 6966
         continue L4;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $384 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 6976
         $385 = HEAP8[$384 >> 0] | 0; //@line 6977
         if ($385 & 1) {
          break L2;
         }
         HEAP8[$384 >> 0] = $385 | 1; //@line 6984
         $390 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 6986
         HEAP32[$4 >> 2] = $390; //@line 6987
         $391 = $$1202$in$i & 255; //@line 6988
         if (!($391 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 6991
         } else {
          $$045$i228$i = $391; //@line 6993
          $$06$i227$i = 0; //@line 6993
          $396 = $390; //@line 6993
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 6995
           $396$looptemp = $396;
           $396 = $396 + 1 | 0; //@line 6997
           HEAP32[$4 >> 2] = $396; //@line 6998
           $399 = $$06$i227$i << 8 | HEAPU8[$396$looptemp >> 0]; //@line 7001
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $399; //@line 7004
            break;
           } else {
            $$06$i227$i = $399; //@line 7007
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 7013
         $$reg2mem$0 = $61; //@line 7014
         continue L4;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $405 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 7024
         $406 = HEAP8[$405 >> 0] | 0; //@line 7025
         if ($406 & 2) {
          break L2;
         }
         HEAP8[$405 >> 0] = $406 | 2; //@line 7032
         $411 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 7034
         HEAP32[$4 >> 2] = $411; //@line 7035
         $412 = $$1202$in$i & 255; //@line 7036
         if (!($412 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 7039
         } else {
          $$045$i221$i = $412; //@line 7041
          $$06$i220$i = 0; //@line 7041
          $417 = $411; //@line 7041
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 7043
           $417$looptemp = $417;
           $417 = $417 + 1 | 0; //@line 7045
           HEAP32[$4 >> 2] = $417; //@line 7046
           $420 = $$06$i220$i << 8 | HEAPU8[$417$looptemp >> 0]; //@line 7049
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $420; //@line 7052
            break;
           } else {
            $$06$i220$i = $420; //@line 7055
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 7061
         $$reg2mem$0 = $61; //@line 7062
         continue L4;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $110 = $86 + 1 | 0; //@line 7089
    HEAP32[$4 >> 2] = $110; //@line 7090
    $111 = $$1202$in$i & 255; //@line 7091
    if (!($111 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 7094
    } else {
     $$045$i$i = $111; //@line 7096
     $$06$i$i = 0; //@line 7096
     $116 = $110; //@line 7096
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 7098
      $116$looptemp = $116;
      $116 = $116 + 1 | 0; //@line 7100
      HEAP32[$4 >> 2] = $116; //@line 7101
      $119 = $$06$i$i << 8 | HEAPU8[$116$looptemp >> 0]; //@line 7104
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $119; //@line 7107
       break;
      } else {
       $$06$i$i = $119; //@line 7110
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 7114
    $$reg2mem$0 = $61; //@line 7115
   }
   if ((label | 0) == 14) {
    $82 = HEAP32[$10 >> 2] | 0; //@line 7118
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 7119
    $83 = FUNCTION_TABLE_ii[$82 & 15](68) | 0; //@line 7120
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 7123
     $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 7124
     HEAP32[$84 >> 2] = $2; //@line 7125
     $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 7126
     HEAP32[$85 >> 2] = $86; //@line 7127
     $87 = $ReallocAsyncCtx3 + 12 | 0; //@line 7128
     HEAP32[$87 >> 2] = $4; //@line 7129
     $88 = $ReallocAsyncCtx3 + 16 | 0; //@line 7130
     HEAP32[$88 >> 2] = $$1202$in$i; //@line 7131
     $89 = $ReallocAsyncCtx3 + 20 | 0; //@line 7132
     HEAP32[$89 >> 2] = $6; //@line 7133
     $90 = $ReallocAsyncCtx3 + 24 | 0; //@line 7134
     HEAP32[$90 >> 2] = $8; //@line 7135
     $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 7136
     HEAP32[$91 >> 2] = $10; //@line 7137
     $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 7138
     HEAP32[$92 >> 2] = $12; //@line 7139
     $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 7140
     HEAP32[$93 >> 2] = $14; //@line 7141
     $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 7142
     HEAP16[$94 >> 1] = $trunc$i; //@line 7143
     $95 = $ReallocAsyncCtx3 + 42 | 0; //@line 7144
     HEAP16[$95 >> 1] = $$1202$i; //@line 7145
     $96 = $ReallocAsyncCtx3 + 44 | 0; //@line 7146
     HEAP32[$96 >> 2] = $16; //@line 7147
     $97 = $ReallocAsyncCtx3 + 48 | 0; //@line 7148
     HEAP32[$97 >> 2] = $18; //@line 7149
     $98 = $ReallocAsyncCtx3 + 52 | 0; //@line 7150
     HEAP32[$98 >> 2] = $20; //@line 7151
     $99 = $ReallocAsyncCtx3 + 56 | 0; //@line 7152
     HEAP32[$99 >> 2] = $22; //@line 7153
     $100 = $ReallocAsyncCtx3 + 60 | 0; //@line 7154
     HEAP32[$100 >> 2] = $61; //@line 7155
     $101 = $ReallocAsyncCtx3 + 64 | 0; //@line 7156
     HEAP32[$101 >> 2] = $24; //@line 7157
     $102 = $ReallocAsyncCtx3 + 68 | 0; //@line 7158
     HEAP32[$102 >> 2] = $26; //@line 7159
     $103 = $ReallocAsyncCtx3 + 72 | 0; //@line 7160
     HEAP16[$103 >> 1] = $79; //@line 7161
     $104 = $ReallocAsyncCtx3 + 76 | 0; //@line 7162
     HEAP32[$104 >> 2] = $28; //@line 7163
     $105 = $ReallocAsyncCtx3 + 80 | 0; //@line 7164
     HEAP32[$105 >> 2] = $30; //@line 7165
     sp = STACKTOP; //@line 7166
     return;
    }
    HEAP32[___async_retval >> 2] = $83; //@line 7170
    ___async_unwind = 0; //@line 7171
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 7172
    $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 7173
    HEAP32[$84 >> 2] = $2; //@line 7174
    $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 7175
    HEAP32[$85 >> 2] = $86; //@line 7176
    $87 = $ReallocAsyncCtx3 + 12 | 0; //@line 7177
    HEAP32[$87 >> 2] = $4; //@line 7178
    $88 = $ReallocAsyncCtx3 + 16 | 0; //@line 7179
    HEAP32[$88 >> 2] = $$1202$in$i; //@line 7180
    $89 = $ReallocAsyncCtx3 + 20 | 0; //@line 7181
    HEAP32[$89 >> 2] = $6; //@line 7182
    $90 = $ReallocAsyncCtx3 + 24 | 0; //@line 7183
    HEAP32[$90 >> 2] = $8; //@line 7184
    $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 7185
    HEAP32[$91 >> 2] = $10; //@line 7186
    $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 7187
    HEAP32[$92 >> 2] = $12; //@line 7188
    $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 7189
    HEAP32[$93 >> 2] = $14; //@line 7190
    $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 7191
    HEAP16[$94 >> 1] = $trunc$i; //@line 7192
    $95 = $ReallocAsyncCtx3 + 42 | 0; //@line 7193
    HEAP16[$95 >> 1] = $$1202$i; //@line 7194
    $96 = $ReallocAsyncCtx3 + 44 | 0; //@line 7195
    HEAP32[$96 >> 2] = $16; //@line 7196
    $97 = $ReallocAsyncCtx3 + 48 | 0; //@line 7197
    HEAP32[$97 >> 2] = $18; //@line 7198
    $98 = $ReallocAsyncCtx3 + 52 | 0; //@line 7199
    HEAP32[$98 >> 2] = $20; //@line 7200
    $99 = $ReallocAsyncCtx3 + 56 | 0; //@line 7201
    HEAP32[$99 >> 2] = $22; //@line 7202
    $100 = $ReallocAsyncCtx3 + 60 | 0; //@line 7203
    HEAP32[$100 >> 2] = $61; //@line 7204
    $101 = $ReallocAsyncCtx3 + 64 | 0; //@line 7205
    HEAP32[$101 >> 2] = $24; //@line 7206
    $102 = $ReallocAsyncCtx3 + 68 | 0; //@line 7207
    HEAP32[$102 >> 2] = $26; //@line 7208
    $103 = $ReallocAsyncCtx3 + 72 | 0; //@line 7209
    HEAP16[$103 >> 1] = $79; //@line 7210
    $104 = $ReallocAsyncCtx3 + 76 | 0; //@line 7211
    HEAP32[$104 >> 2] = $28; //@line 7212
    $105 = $ReallocAsyncCtx3 + 80 | 0; //@line 7213
    HEAP32[$105 >> 2] = $30; //@line 7214
    sp = STACKTOP; //@line 7215
    return;
   } else if ((label | 0) == 27) {
    $135 = $$1202$in$i & 65535; //@line 7219
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $138 = HEAP32[$14 >> 2] | 0; //@line 7225
    if (HEAP32[$138 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$138 + 2 >> 1] = $$1202$i; //@line 7233
    $143 = $86 + 1 | 0; //@line 7234
    HEAP32[$4 >> 2] = $143; //@line 7235
    $144 = HEAP32[$10 >> 2] | 0; //@line 7236
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 7237
    $145 = FUNCTION_TABLE_ii[$144 & 15]($$1202$i) | 0; //@line 7238
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 7241
     $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 7242
     HEAP32[$146 >> 2] = $2; //@line 7243
     $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 7244
     HEAP32[$147 >> 2] = $4; //@line 7245
     $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 7246
     HEAP32[$148 >> 2] = $6; //@line 7247
     $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 7248
     HEAP32[$149 >> 2] = $8; //@line 7249
     $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 7250
     HEAP32[$150 >> 2] = $10; //@line 7251
     $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 7252
     HEAP32[$151 >> 2] = $12; //@line 7253
     $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 7254
     HEAP32[$152 >> 2] = $14; //@line 7255
     $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 7256
     HEAP32[$153 >> 2] = $16; //@line 7257
     $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 7258
     HEAP32[$154 >> 2] = $18; //@line 7259
     $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 7260
     HEAP32[$155 >> 2] = $20; //@line 7261
     $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 7262
     HEAP32[$156 >> 2] = $22; //@line 7263
     $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 7264
     HEAP32[$157 >> 2] = $24; //@line 7265
     $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 7266
     HEAP32[$158 >> 2] = $26; //@line 7267
     $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 7268
     HEAP32[$159 >> 2] = $28; //@line 7269
     $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 7270
     HEAP32[$160 >> 2] = $30; //@line 7271
     $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 7272
     HEAP32[$161 >> 2] = $61; //@line 7273
     $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 7274
     HEAP32[$162 >> 2] = $143; //@line 7275
     $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 7276
     HEAP32[$163 >> 2] = $135; //@line 7277
     sp = STACKTOP; //@line 7278
     return;
    }
    HEAP32[___async_retval >> 2] = $145; //@line 7282
    ___async_unwind = 0; //@line 7283
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 7284
    $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 7285
    HEAP32[$146 >> 2] = $2; //@line 7286
    $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 7287
    HEAP32[$147 >> 2] = $4; //@line 7288
    $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 7289
    HEAP32[$148 >> 2] = $6; //@line 7290
    $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 7291
    HEAP32[$149 >> 2] = $8; //@line 7292
    $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 7293
    HEAP32[$150 >> 2] = $10; //@line 7294
    $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 7295
    HEAP32[$151 >> 2] = $12; //@line 7296
    $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 7297
    HEAP32[$152 >> 2] = $14; //@line 7298
    $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 7299
    HEAP32[$153 >> 2] = $16; //@line 7300
    $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 7301
    HEAP32[$154 >> 2] = $18; //@line 7302
    $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 7303
    HEAP32[$155 >> 2] = $20; //@line 7304
    $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 7305
    HEAP32[$156 >> 2] = $22; //@line 7306
    $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 7307
    HEAP32[$157 >> 2] = $24; //@line 7308
    $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 7309
    HEAP32[$158 >> 2] = $26; //@line 7310
    $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 7311
    HEAP32[$159 >> 2] = $28; //@line 7312
    $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 7313
    HEAP32[$160 >> 2] = $30; //@line 7314
    $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 7315
    HEAP32[$161 >> 2] = $61; //@line 7316
    $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 7317
    HEAP32[$162 >> 2] = $143; //@line 7318
    $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 7319
    HEAP32[$163 >> 2] = $135; //@line 7320
    sp = STACKTOP; //@line 7321
    return;
   } else if ((label | 0) == 32) {
    $165 = HEAP32[$14 >> 2] | 0; //@line 7325
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 7327
    $167 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $165 + 48 | 0, $165, 4, $$1202$i) | 0; //@line 7328
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 7331
     $168 = $ReallocAsyncCtx10 + 4 | 0; //@line 7332
     HEAP32[$168 >> 2] = $2; //@line 7333
     $169 = $ReallocAsyncCtx10 + 8 | 0; //@line 7334
     HEAP32[$169 >> 2] = $4; //@line 7335
     $170 = $ReallocAsyncCtx10 + 12 | 0; //@line 7336
     HEAP32[$170 >> 2] = $6; //@line 7337
     $171 = $ReallocAsyncCtx10 + 16 | 0; //@line 7338
     HEAP32[$171 >> 2] = $8; //@line 7339
     $172 = $ReallocAsyncCtx10 + 20 | 0; //@line 7340
     HEAP32[$172 >> 2] = $10; //@line 7341
     $173 = $ReallocAsyncCtx10 + 24 | 0; //@line 7342
     HEAP32[$173 >> 2] = $12; //@line 7343
     $174 = $ReallocAsyncCtx10 + 28 | 0; //@line 7344
     HEAP32[$174 >> 2] = $14; //@line 7345
     $175 = $ReallocAsyncCtx10 + 32 | 0; //@line 7346
     HEAP32[$175 >> 2] = $16; //@line 7347
     $176 = $ReallocAsyncCtx10 + 36 | 0; //@line 7348
     HEAP32[$176 >> 2] = $18; //@line 7349
     $177 = $ReallocAsyncCtx10 + 40 | 0; //@line 7350
     HEAP32[$177 >> 2] = $20; //@line 7351
     $178 = $ReallocAsyncCtx10 + 44 | 0; //@line 7352
     HEAP32[$178 >> 2] = $22; //@line 7353
     $179 = $ReallocAsyncCtx10 + 48 | 0; //@line 7354
     HEAP32[$179 >> 2] = $24; //@line 7355
     $180 = $ReallocAsyncCtx10 + 52 | 0; //@line 7356
     HEAP32[$180 >> 2] = $26; //@line 7357
     $181 = $ReallocAsyncCtx10 + 56 | 0; //@line 7358
     HEAP32[$181 >> 2] = $28; //@line 7359
     $182 = $ReallocAsyncCtx10 + 60 | 0; //@line 7360
     HEAP32[$182 >> 2] = $30; //@line 7361
     $183 = $ReallocAsyncCtx10 + 64 | 0; //@line 7362
     HEAP32[$183 >> 2] = $61; //@line 7363
     sp = STACKTOP; //@line 7364
     return;
    }
    HEAP8[___async_retval >> 0] = $167; //@line 7368
    ___async_unwind = 0; //@line 7369
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 7370
    $168 = $ReallocAsyncCtx10 + 4 | 0; //@line 7371
    HEAP32[$168 >> 2] = $2; //@line 7372
    $169 = $ReallocAsyncCtx10 + 8 | 0; //@line 7373
    HEAP32[$169 >> 2] = $4; //@line 7374
    $170 = $ReallocAsyncCtx10 + 12 | 0; //@line 7375
    HEAP32[$170 >> 2] = $6; //@line 7376
    $171 = $ReallocAsyncCtx10 + 16 | 0; //@line 7377
    HEAP32[$171 >> 2] = $8; //@line 7378
    $172 = $ReallocAsyncCtx10 + 20 | 0; //@line 7379
    HEAP32[$172 >> 2] = $10; //@line 7380
    $173 = $ReallocAsyncCtx10 + 24 | 0; //@line 7381
    HEAP32[$173 >> 2] = $12; //@line 7382
    $174 = $ReallocAsyncCtx10 + 28 | 0; //@line 7383
    HEAP32[$174 >> 2] = $14; //@line 7384
    $175 = $ReallocAsyncCtx10 + 32 | 0; //@line 7385
    HEAP32[$175 >> 2] = $16; //@line 7386
    $176 = $ReallocAsyncCtx10 + 36 | 0; //@line 7387
    HEAP32[$176 >> 2] = $18; //@line 7388
    $177 = $ReallocAsyncCtx10 + 40 | 0; //@line 7389
    HEAP32[$177 >> 2] = $20; //@line 7390
    $178 = $ReallocAsyncCtx10 + 44 | 0; //@line 7391
    HEAP32[$178 >> 2] = $22; //@line 7392
    $179 = $ReallocAsyncCtx10 + 48 | 0; //@line 7393
    HEAP32[$179 >> 2] = $24; //@line 7394
    $180 = $ReallocAsyncCtx10 + 52 | 0; //@line 7395
    HEAP32[$180 >> 2] = $26; //@line 7396
    $181 = $ReallocAsyncCtx10 + 56 | 0; //@line 7397
    HEAP32[$181 >> 2] = $28; //@line 7398
    $182 = $ReallocAsyncCtx10 + 60 | 0; //@line 7399
    HEAP32[$182 >> 2] = $30; //@line 7400
    $183 = $ReallocAsyncCtx10 + 64 | 0; //@line 7401
    HEAP32[$183 >> 2] = $61; //@line 7402
    sp = STACKTOP; //@line 7403
    return;
   } else if ((label | 0) == 35) {
    $185 = $$1202$in$i & 65535; //@line 7407
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $188 = HEAP32[$14 >> 2] | 0; //@line 7413
    if (HEAP32[$188 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$188 + 4 >> 1] = $$1202$i; //@line 7421
    $193 = $86 + 1 | 0; //@line 7422
    HEAP32[$4 >> 2] = $193; //@line 7423
    $194 = HEAP32[$10 >> 2] | 0; //@line 7424
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 7425
    $195 = FUNCTION_TABLE_ii[$194 & 15]($$1202$i) | 0; //@line 7426
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 7429
     $196 = $ReallocAsyncCtx5 + 4 | 0; //@line 7430
     HEAP32[$196 >> 2] = $2; //@line 7431
     $197 = $ReallocAsyncCtx5 + 8 | 0; //@line 7432
     HEAP32[$197 >> 2] = $4; //@line 7433
     $198 = $ReallocAsyncCtx5 + 12 | 0; //@line 7434
     HEAP32[$198 >> 2] = $6; //@line 7435
     $199 = $ReallocAsyncCtx5 + 16 | 0; //@line 7436
     HEAP32[$199 >> 2] = $8; //@line 7437
     $200 = $ReallocAsyncCtx5 + 20 | 0; //@line 7438
     HEAP32[$200 >> 2] = $10; //@line 7439
     $201 = $ReallocAsyncCtx5 + 24 | 0; //@line 7440
     HEAP32[$201 >> 2] = $12; //@line 7441
     $202 = $ReallocAsyncCtx5 + 28 | 0; //@line 7442
     HEAP32[$202 >> 2] = $14; //@line 7443
     $203 = $ReallocAsyncCtx5 + 32 | 0; //@line 7444
     HEAP32[$203 >> 2] = $16; //@line 7445
     $204 = $ReallocAsyncCtx5 + 36 | 0; //@line 7446
     HEAP32[$204 >> 2] = $18; //@line 7447
     $205 = $ReallocAsyncCtx5 + 40 | 0; //@line 7448
     HEAP32[$205 >> 2] = $20; //@line 7449
     $206 = $ReallocAsyncCtx5 + 44 | 0; //@line 7450
     HEAP32[$206 >> 2] = $22; //@line 7451
     $207 = $ReallocAsyncCtx5 + 48 | 0; //@line 7452
     HEAP32[$207 >> 2] = $24; //@line 7453
     $208 = $ReallocAsyncCtx5 + 52 | 0; //@line 7454
     HEAP32[$208 >> 2] = $26; //@line 7455
     $209 = $ReallocAsyncCtx5 + 56 | 0; //@line 7456
     HEAP32[$209 >> 2] = $28; //@line 7457
     $210 = $ReallocAsyncCtx5 + 60 | 0; //@line 7458
     HEAP32[$210 >> 2] = $30; //@line 7459
     $211 = $ReallocAsyncCtx5 + 64 | 0; //@line 7460
     HEAP32[$211 >> 2] = $61; //@line 7461
     $212 = $ReallocAsyncCtx5 + 68 | 0; //@line 7462
     HEAP32[$212 >> 2] = $193; //@line 7463
     $213 = $ReallocAsyncCtx5 + 72 | 0; //@line 7464
     HEAP32[$213 >> 2] = $185; //@line 7465
     sp = STACKTOP; //@line 7466
     return;
    }
    HEAP32[___async_retval >> 2] = $195; //@line 7470
    ___async_unwind = 0; //@line 7471
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 7472
    $196 = $ReallocAsyncCtx5 + 4 | 0; //@line 7473
    HEAP32[$196 >> 2] = $2; //@line 7474
    $197 = $ReallocAsyncCtx5 + 8 | 0; //@line 7475
    HEAP32[$197 >> 2] = $4; //@line 7476
    $198 = $ReallocAsyncCtx5 + 12 | 0; //@line 7477
    HEAP32[$198 >> 2] = $6; //@line 7478
    $199 = $ReallocAsyncCtx5 + 16 | 0; //@line 7479
    HEAP32[$199 >> 2] = $8; //@line 7480
    $200 = $ReallocAsyncCtx5 + 20 | 0; //@line 7481
    HEAP32[$200 >> 2] = $10; //@line 7482
    $201 = $ReallocAsyncCtx5 + 24 | 0; //@line 7483
    HEAP32[$201 >> 2] = $12; //@line 7484
    $202 = $ReallocAsyncCtx5 + 28 | 0; //@line 7485
    HEAP32[$202 >> 2] = $14; //@line 7486
    $203 = $ReallocAsyncCtx5 + 32 | 0; //@line 7487
    HEAP32[$203 >> 2] = $16; //@line 7488
    $204 = $ReallocAsyncCtx5 + 36 | 0; //@line 7489
    HEAP32[$204 >> 2] = $18; //@line 7490
    $205 = $ReallocAsyncCtx5 + 40 | 0; //@line 7491
    HEAP32[$205 >> 2] = $20; //@line 7492
    $206 = $ReallocAsyncCtx5 + 44 | 0; //@line 7493
    HEAP32[$206 >> 2] = $22; //@line 7494
    $207 = $ReallocAsyncCtx5 + 48 | 0; //@line 7495
    HEAP32[$207 >> 2] = $24; //@line 7496
    $208 = $ReallocAsyncCtx5 + 52 | 0; //@line 7497
    HEAP32[$208 >> 2] = $26; //@line 7498
    $209 = $ReallocAsyncCtx5 + 56 | 0; //@line 7499
    HEAP32[$209 >> 2] = $28; //@line 7500
    $210 = $ReallocAsyncCtx5 + 60 | 0; //@line 7501
    HEAP32[$210 >> 2] = $30; //@line 7502
    $211 = $ReallocAsyncCtx5 + 64 | 0; //@line 7503
    HEAP32[$211 >> 2] = $61; //@line 7504
    $212 = $ReallocAsyncCtx5 + 68 | 0; //@line 7505
    HEAP32[$212 >> 2] = $193; //@line 7506
    $213 = $ReallocAsyncCtx5 + 72 | 0; //@line 7507
    HEAP32[$213 >> 2] = $185; //@line 7508
    sp = STACKTOP; //@line 7509
    return;
   } else if ((label | 0) == 42) {
    $219 = HEAP32[$14 >> 2] | 0; //@line 7513
    $220 = $219 + 56 | 0; //@line 7514
    if (HEAP32[$220 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 7521
    $224 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $220, $219 + 6 | 0, 8, $$1202$i) | 0; //@line 7522
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 7525
     $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 7526
     HEAP32[$225 >> 2] = $2; //@line 7527
     $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 7528
     HEAP32[$226 >> 2] = $4; //@line 7529
     $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 7530
     HEAP32[$227 >> 2] = $6; //@line 7531
     $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 7532
     HEAP32[$228 >> 2] = $8; //@line 7533
     $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 7534
     HEAP32[$229 >> 2] = $10; //@line 7535
     $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 7536
     HEAP32[$230 >> 2] = $12; //@line 7537
     $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 7538
     HEAP32[$231 >> 2] = $14; //@line 7539
     $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 7540
     HEAP32[$232 >> 2] = $16; //@line 7541
     $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 7542
     HEAP32[$233 >> 2] = $18; //@line 7543
     $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 7544
     HEAP32[$234 >> 2] = $20; //@line 7545
     $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 7546
     HEAP32[$235 >> 2] = $22; //@line 7547
     $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 7548
     HEAP32[$236 >> 2] = $24; //@line 7549
     $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 7550
     HEAP32[$237 >> 2] = $26; //@line 7551
     $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 7552
     HEAP32[$238 >> 2] = $28; //@line 7553
     $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 7554
     HEAP32[$239 >> 2] = $30; //@line 7555
     $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 7556
     HEAP32[$240 >> 2] = $61; //@line 7557
     sp = STACKTOP; //@line 7558
     return;
    }
    HEAP8[___async_retval >> 0] = $224; //@line 7562
    ___async_unwind = 0; //@line 7563
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 7564
    $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 7565
    HEAP32[$225 >> 2] = $2; //@line 7566
    $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 7567
    HEAP32[$226 >> 2] = $4; //@line 7568
    $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 7569
    HEAP32[$227 >> 2] = $6; //@line 7570
    $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 7571
    HEAP32[$228 >> 2] = $8; //@line 7572
    $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 7573
    HEAP32[$229 >> 2] = $10; //@line 7574
    $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 7575
    HEAP32[$230 >> 2] = $12; //@line 7576
    $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 7577
    HEAP32[$231 >> 2] = $14; //@line 7578
    $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 7579
    HEAP32[$232 >> 2] = $16; //@line 7580
    $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 7581
    HEAP32[$233 >> 2] = $18; //@line 7582
    $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 7583
    HEAP32[$234 >> 2] = $20; //@line 7584
    $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 7585
    HEAP32[$235 >> 2] = $22; //@line 7586
    $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 7587
    HEAP32[$236 >> 2] = $24; //@line 7588
    $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 7589
    HEAP32[$237 >> 2] = $26; //@line 7590
    $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 7591
    HEAP32[$238 >> 2] = $28; //@line 7592
    $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 7593
    HEAP32[$239 >> 2] = $30; //@line 7594
    $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 7595
    HEAP32[$240 >> 2] = $61; //@line 7596
    sp = STACKTOP; //@line 7597
    return;
   } else if ((label | 0) == 51) {
    $258 = HEAP32[$14 >> 2] | 0; //@line 7601
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 7604
    $261 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $258 + 60 | 0, $258 + 8 | 0, 20, $$1202$i) | 0; //@line 7605
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 7608
     $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 7609
     HEAP32[$262 >> 2] = $2; //@line 7610
     $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 7611
     HEAP32[$263 >> 2] = $4; //@line 7612
     $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 7613
     HEAP32[$264 >> 2] = $6; //@line 7614
     $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 7615
     HEAP32[$265 >> 2] = $8; //@line 7616
     $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 7617
     HEAP32[$266 >> 2] = $10; //@line 7618
     $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 7619
     HEAP32[$267 >> 2] = $12; //@line 7620
     $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 7621
     HEAP32[$268 >> 2] = $14; //@line 7622
     $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 7623
     HEAP32[$269 >> 2] = $16; //@line 7624
     $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 7625
     HEAP32[$270 >> 2] = $18; //@line 7626
     $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 7627
     HEAP32[$271 >> 2] = $20; //@line 7628
     $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 7629
     HEAP32[$272 >> 2] = $22; //@line 7630
     $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 7631
     HEAP32[$273 >> 2] = $24; //@line 7632
     $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 7633
     HEAP32[$274 >> 2] = $26; //@line 7634
     $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 7635
     HEAP32[$275 >> 2] = $28; //@line 7636
     $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 7637
     HEAP32[$276 >> 2] = $30; //@line 7638
     $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 7639
     HEAP32[$277 >> 2] = $61; //@line 7640
     sp = STACKTOP; //@line 7641
     return;
    }
    HEAP8[___async_retval >> 0] = $261; //@line 7645
    ___async_unwind = 0; //@line 7646
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 7647
    $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 7648
    HEAP32[$262 >> 2] = $2; //@line 7649
    $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 7650
    HEAP32[$263 >> 2] = $4; //@line 7651
    $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 7652
    HEAP32[$264 >> 2] = $6; //@line 7653
    $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 7654
    HEAP32[$265 >> 2] = $8; //@line 7655
    $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 7656
    HEAP32[$266 >> 2] = $10; //@line 7657
    $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 7658
    HEAP32[$267 >> 2] = $12; //@line 7659
    $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 7660
    HEAP32[$268 >> 2] = $14; //@line 7661
    $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 7662
    HEAP32[$269 >> 2] = $16; //@line 7663
    $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 7664
    HEAP32[$270 >> 2] = $18; //@line 7665
    $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 7666
    HEAP32[$271 >> 2] = $20; //@line 7667
    $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 7668
    HEAP32[$272 >> 2] = $22; //@line 7669
    $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 7670
    HEAP32[$273 >> 2] = $24; //@line 7671
    $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 7672
    HEAP32[$274 >> 2] = $26; //@line 7673
    $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 7674
    HEAP32[$275 >> 2] = $28; //@line 7675
    $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 7676
    HEAP32[$276 >> 2] = $30; //@line 7677
    $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 7678
    HEAP32[$277 >> 2] = $61; //@line 7679
    sp = STACKTOP; //@line 7680
    return;
   } else if ((label | 0) == 54) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 7684
    $279 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $28, $30, 11, $$1202$i) | 0; //@line 7685
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 7688
     $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 7689
     HEAP32[$280 >> 2] = $2; //@line 7690
     $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 7691
     HEAP32[$281 >> 2] = $4; //@line 7692
     $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 7693
     HEAP32[$282 >> 2] = $6; //@line 7694
     $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 7695
     HEAP32[$283 >> 2] = $8; //@line 7696
     $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 7697
     HEAP32[$284 >> 2] = $10; //@line 7698
     $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 7699
     HEAP32[$285 >> 2] = $12; //@line 7700
     $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 7701
     HEAP32[$286 >> 2] = $14; //@line 7702
     $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 7703
     HEAP32[$287 >> 2] = $16; //@line 7704
     $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 7705
     HEAP32[$288 >> 2] = $18; //@line 7706
     $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 7707
     HEAP32[$289 >> 2] = $20; //@line 7708
     $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 7709
     HEAP32[$290 >> 2] = $22; //@line 7710
     $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 7711
     HEAP32[$291 >> 2] = $24; //@line 7712
     $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 7713
     HEAP32[$292 >> 2] = $26; //@line 7714
     $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 7715
     HEAP32[$293 >> 2] = $28; //@line 7716
     $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 7717
     HEAP32[$294 >> 2] = $30; //@line 7718
     $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 7719
     HEAP32[$295 >> 2] = $61; //@line 7720
     sp = STACKTOP; //@line 7721
     return;
    }
    HEAP8[___async_retval >> 0] = $279; //@line 7725
    ___async_unwind = 0; //@line 7726
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 7727
    $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 7728
    HEAP32[$280 >> 2] = $2; //@line 7729
    $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 7730
    HEAP32[$281 >> 2] = $4; //@line 7731
    $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 7732
    HEAP32[$282 >> 2] = $6; //@line 7733
    $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 7734
    HEAP32[$283 >> 2] = $8; //@line 7735
    $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 7736
    HEAP32[$284 >> 2] = $10; //@line 7737
    $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 7738
    HEAP32[$285 >> 2] = $12; //@line 7739
    $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 7740
    HEAP32[$286 >> 2] = $14; //@line 7741
    $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 7742
    HEAP32[$287 >> 2] = $16; //@line 7743
    $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 7744
    HEAP32[$288 >> 2] = $18; //@line 7745
    $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 7746
    HEAP32[$289 >> 2] = $20; //@line 7747
    $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 7748
    HEAP32[$290 >> 2] = $22; //@line 7749
    $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 7750
    HEAP32[$291 >> 2] = $24; //@line 7751
    $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 7752
    HEAP32[$292 >> 2] = $26; //@line 7753
    $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 7754
    HEAP32[$293 >> 2] = $28; //@line 7755
    $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 7756
    HEAP32[$294 >> 2] = $30; //@line 7757
    $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 7758
    HEAP32[$295 >> 2] = $61; //@line 7759
    sp = STACKTOP; //@line 7760
    return;
   } else if ((label | 0) == 62) {
    $313 = HEAP32[$14 >> 2] | 0; //@line 7764
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 7767
    $316 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $313 + 64 | 0, $313 + 10 | 0, 15, $$1202$i) | 0; //@line 7768
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 7771
     $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 7772
     HEAP32[$317 >> 2] = $2; //@line 7773
     $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 7774
     HEAP32[$318 >> 2] = $4; //@line 7775
     $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 7776
     HEAP32[$319 >> 2] = $6; //@line 7777
     $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 7778
     HEAP32[$320 >> 2] = $8; //@line 7779
     $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 7780
     HEAP32[$321 >> 2] = $10; //@line 7781
     $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 7782
     HEAP32[$322 >> 2] = $12; //@line 7783
     $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 7784
     HEAP32[$323 >> 2] = $14; //@line 7785
     $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 7786
     HEAP32[$324 >> 2] = $16; //@line 7787
     $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 7788
     HEAP32[$325 >> 2] = $18; //@line 7789
     $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 7790
     HEAP32[$326 >> 2] = $20; //@line 7791
     $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 7792
     HEAP32[$327 >> 2] = $22; //@line 7793
     $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 7794
     HEAP32[$328 >> 2] = $24; //@line 7795
     $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 7796
     HEAP32[$329 >> 2] = $26; //@line 7797
     $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 7798
     HEAP32[$330 >> 2] = $28; //@line 7799
     $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 7800
     HEAP32[$331 >> 2] = $30; //@line 7801
     $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 7802
     HEAP32[$332 >> 2] = $61; //@line 7803
     sp = STACKTOP; //@line 7804
     return;
    }
    HEAP8[___async_retval >> 0] = $316; //@line 7808
    ___async_unwind = 0; //@line 7809
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 7810
    $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 7811
    HEAP32[$317 >> 2] = $2; //@line 7812
    $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 7813
    HEAP32[$318 >> 2] = $4; //@line 7814
    $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 7815
    HEAP32[$319 >> 2] = $6; //@line 7816
    $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 7817
    HEAP32[$320 >> 2] = $8; //@line 7818
    $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 7819
    HEAP32[$321 >> 2] = $10; //@line 7820
    $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 7821
    HEAP32[$322 >> 2] = $12; //@line 7822
    $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 7823
    HEAP32[$323 >> 2] = $14; //@line 7824
    $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 7825
    HEAP32[$324 >> 2] = $16; //@line 7826
    $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 7827
    HEAP32[$325 >> 2] = $18; //@line 7828
    $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 7829
    HEAP32[$326 >> 2] = $20; //@line 7830
    $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 7831
    HEAP32[$327 >> 2] = $22; //@line 7832
    $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 7833
    HEAP32[$328 >> 2] = $24; //@line 7834
    $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 7835
    HEAP32[$329 >> 2] = $26; //@line 7836
    $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 7837
    HEAP32[$330 >> 2] = $28; //@line 7838
    $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 7839
    HEAP32[$331 >> 2] = $30; //@line 7840
    $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 7841
    HEAP32[$332 >> 2] = $61; //@line 7842
    sp = STACKTOP; //@line 7843
    return;
   } else if ((label | 0) == 92) {
    if (($41 - $16 | 0) >= ($18 | 0)) {
     $443 = ___async_retval; //@line 7851
     HEAP32[$443 >> 2] = $6; //@line 7852
     return;
    }
    if ((HEAP8[$41 >> 0] | 0) == -1) {
     $433 = $41 + 1 | 0; //@line 7858
     HEAP32[$4 >> 2] = $433; //@line 7859
     $434 = $433; //@line 7860
     $436 = $16 - $434 + $18 | 0; //@line 7862
     HEAP16[$12 + 24 >> 1] = $436; //@line 7865
     if ($436 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $434; //@line 7870
      $443 = ___async_retval; //@line 7871
      HEAP32[$443 >> 2] = $6; //@line 7872
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 7877
    $443 = ___async_retval; //@line 7878
    HEAP32[$443 >> 2] = $6; //@line 7879
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 7885
 $443 = ___async_retval; //@line 7886
 HEAP32[$443 >> 2] = $6; //@line 7887
 return;
}
function _sn_coap_parser__async_cb_86($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $110 = 0, $111 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $123 = 0, $128 = 0, $131 = 0, $135 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $189 = 0, $192 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $219 = 0, $22 = 0, $220 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $247 = 0, $248 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $299 = 0, $30 = 0, $302 = 0, $303 = 0, $308 = 0, $311 = 0, $313 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $336 = 0, $339 = 0, $34 = 0, $340 = 0, $345 = 0, $348 = 0, $352 = 0, $355 = 0, $356 = 0, $36 = 0, $361 = 0, $364 = 0, $368 = 0, $371 = 0, $372 = 0, $377 = 0, $380 = 0, $384 = 0, $385 = 0, $390 = 0, $391 = 0, $396 = 0, $399 = 0, $4 = 0, $405 = 0, $406 = 0, $41 = 0, $411 = 0, $412 = 0, $417 = 0, $420 = 0, $424 = 0, $425 = 0, $433 = 0, $434 = 0, $436 = 0, $44 = 0, $443 = 0, $444 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $128$looptemp = 0, $253$looptemp = 0, $308$looptemp = 0, $345$looptemp = 0, $361$looptemp = 0, $377$looptemp = 0, $396$looptemp = 0, $417$looptemp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 5104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5108
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5110
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5112
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5114
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5116
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5118
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5120
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5122
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5124
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5126
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5128
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5130
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5132
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5134
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5136
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5138
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5140
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5142
 HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] = $AsyncRetVal; //@line 5145
 L2 : do {
  if ($AsyncRetVal | 0) {
   _memcpy($AsyncRetVal | 0, $34 | 0, $36 | 0) | 0; //@line 5149
   HEAP32[$4 >> 2] = $34 + $36; //@line 5151
   $$reg2mem$0 = $32; //@line 5152
   L4 : while (1) {
    $424 = HEAP32[$22 >> 2] | 0; //@line 5154
    $425 = $424 - $16 | 0; //@line 5155
    $41 = $424; //@line 5158
    if (($425 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $425 & 65535) << 16 >> 16)) {
     label = 92; //@line 5165
     break;
    }
    $trunc277$i = HEAP8[$41 >> 0] | 0; //@line 5168
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 92; //@line 5171
     break;
    }
    $44 = $trunc277$i & 15; //@line 5175
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 5176
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$41 + 1 >> 0] | 0; //@line 5188
      $$sink214$i = 13; //@line 5188
      $$sink3$i = 1; //@line 5188
      label = 7; //@line 5189
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$41 + 1 >> 0] << 8) + 269 | 0; //@line 5201
      $$sink214$i = HEAPU8[$41 + 2 >> 0] | 0; //@line 5201
      $$sink3$i = 2; //@line 5201
      label = 7; //@line 5202
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 5206
      $444 = $424; //@line 5206
      $63 = $41; //@line 5206
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 5210
     $58 = $41 + $$sink3$i | 0; //@line 5212
     HEAP32[$4 >> 2] = $58; //@line 5213
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 5215
     $444 = $58; //@line 5215
     $63 = $58; //@line 5215
    }
    $61 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 5218
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$63 + 1 >> 0] | 0; //@line 5229
      $$sink216$i = 13; //@line 5229
      $$sink8$i = 1; //@line 5229
      label = 11; //@line 5230
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$63 + 1 >> 0] << 8) + 269 | 0; //@line 5242
      $$sink216$i = HEAPU8[$63 + 2 >> 0] | 0; //@line 5242
      $$sink8$i = 2; //@line 5242
      label = 11; //@line 5243
      break;
     }
    default:
     {
      $$1202$in$i = $44; //@line 5247
      $78 = $444; //@line 5247
      $86 = $63; //@line 5247
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 5251
     $75 = $63 + $$sink8$i | 0; //@line 5253
     HEAP32[$4 >> 2] = $75; //@line 5254
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 5256
     $78 = $75; //@line 5256
     $86 = $75; //@line 5256
    }
    $$1202$i = $$1202$in$i & 65535; //@line 5258
    $79 = $20 - $78 & 65535; //@line 5260
    $trunc$i = $61 & 65535; //@line 5261
    L21 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 54; //@line 5265
       break L4;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 5273
        break L4;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 5278
         break L4;
         break;
        }
       case 4:
        {
         label = 34; //@line 5283
         break L4;
         break;
        }
       case 3:
        {
         label = 37; //@line 5288
         break L4;
         break;
        }
       case 8:
        {
         label = 42; //@line 5293
         break L4;
         break;
        }
       case 20:
        {
         label = 51; //@line 5298
         break L4;
         break;
        }
       case 11:
        {
         label = 54; //@line 5303
         break L4;
         break;
        }
       case 15:
        {
         label = 62; //@line 5308
         break L4;
         break;
        }
       case 12:
        {
         break L21;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $122 = $86 + 1 | 0; //@line 5321
         HEAP32[$4 >> 2] = $122; //@line 5322
         $123 = $$1202$in$i & 255; //@line 5323
         if (!($123 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 5326
         } else {
          $$045$i256$i = $123; //@line 5328
          $$06$i255$i = 0; //@line 5328
          $128 = $122; //@line 5328
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 5330
           $128$looptemp = $128;
           $128 = $128 + 1 | 0; //@line 5332
           HEAP32[$4 >> 2] = $128; //@line 5333
           $131 = $$06$i255$i << 8 | HEAPU8[$128$looptemp >> 0]; //@line 5336
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $131; //@line 5339
            break;
           } else {
            $$06$i255$i = $131; //@line 5342
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 5348
         $$reg2mem$0 = $61; //@line 5349
         continue L4;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $244 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 5359
         if ((HEAP32[$244 >> 2] | 0) != -1) {
          break L2;
         }
         $247 = $86 + 1 | 0; //@line 5365
         HEAP32[$4 >> 2] = $247; //@line 5366
         $248 = $$1202$in$i & 255; //@line 5367
         if (!($248 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 5370
         } else {
          $$045$i270$i = $248; //@line 5372
          $$06$i269$i = 0; //@line 5372
          $253 = $247; //@line 5372
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 5374
           $253$looptemp = $253;
           $253 = $253 + 1 | 0; //@line 5376
           HEAP32[$4 >> 2] = $253; //@line 5377
           $256 = $$06$i269$i << 8 | HEAPU8[$253$looptemp >> 0]; //@line 5380
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $256; //@line 5383
            break;
           } else {
            $$06$i269$i = $256; //@line 5386
           }
          }
         }
         HEAP32[$244 >> 2] = $$0$lcssa$i272$i; //@line 5390
         $$reg2mem$0 = $61; //@line 5391
         continue L4;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $299 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 5401
         if ((HEAP32[$299 >> 2] | 0) != -1) {
          break L2;
         }
         $302 = $86 + 1 | 0; //@line 5407
         HEAP32[$4 >> 2] = $302; //@line 5408
         $303 = $$1202$in$i & 255; //@line 5409
         if (!($303 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 5412
         } else {
          $$045$i263$i = $303; //@line 5414
          $$06$i262$i = 0; //@line 5414
          $308 = $302; //@line 5414
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 5416
           $308$looptemp = $308;
           $308 = $308 + 1 | 0; //@line 5418
           HEAP32[$4 >> 2] = $308; //@line 5419
           $311 = $$06$i262$i << 8 | HEAPU8[$308$looptemp >> 0]; //@line 5422
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $311; //@line 5425
            break;
           } else {
            $$06$i262$i = $311; //@line 5428
           }
          }
         }
         HEAP32[$299 >> 2] = $$0$lcssa$i265$i; //@line 5432
         $$reg2mem$0 = $61; //@line 5433
         continue L4;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $336 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 5443
         if ((HEAP32[$336 >> 2] | 0) != -1) {
          break L2;
         }
         $339 = $86 + 1 | 0; //@line 5449
         HEAP32[$4 >> 2] = $339; //@line 5450
         $340 = $$1202$in$i & 255; //@line 5451
         if (!($340 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 5454
         } else {
          $$045$i249$i = $340; //@line 5456
          $$06$i248$i = 0; //@line 5456
          $345 = $339; //@line 5456
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 5458
           $345$looptemp = $345;
           $345 = $345 + 1 | 0; //@line 5460
           HEAP32[$4 >> 2] = $345; //@line 5461
           $348 = $$06$i248$i << 8 | HEAPU8[$345$looptemp >> 0]; //@line 5464
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $348; //@line 5467
            break;
           } else {
            $$06$i248$i = $348; //@line 5470
           }
          }
         }
         HEAP32[$336 >> 2] = $$0$lcssa$i251$i; //@line 5474
         $$reg2mem$0 = $61; //@line 5475
         continue L4;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $352 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 5485
         if ((HEAP32[$352 >> 2] | 0) != -1) {
          break L2;
         }
         $355 = $86 + 1 | 0; //@line 5491
         HEAP32[$4 >> 2] = $355; //@line 5492
         $356 = $$1202$in$i & 255; //@line 5493
         if (!($356 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 5496
         } else {
          $$045$i242$i = $356; //@line 5498
          $$06$i241$i = 0; //@line 5498
          $361 = $355; //@line 5498
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 5500
           $361$looptemp = $361;
           $361 = $361 + 1 | 0; //@line 5502
           HEAP32[$4 >> 2] = $361; //@line 5503
           $364 = $$06$i241$i << 8 | HEAPU8[$361$looptemp >> 0]; //@line 5506
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $364; //@line 5509
            break;
           } else {
            $$06$i241$i = $364; //@line 5512
           }
          }
         }
         HEAP32[$352 >> 2] = $$0$lcssa$i244$i; //@line 5516
         $$reg2mem$0 = $61; //@line 5517
         continue L4;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $368 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 5527
         if ((HEAP32[$368 >> 2] | 0) != -1) {
          break L2;
         }
         $371 = $86 + 1 | 0; //@line 5533
         HEAP32[$4 >> 2] = $371; //@line 5534
         $372 = $$1202$in$i & 255; //@line 5535
         if (!($372 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 5538
         } else {
          $$045$i235$i = $372; //@line 5540
          $$06$i234$i = 0; //@line 5540
          $377 = $371; //@line 5540
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 5542
           $377$looptemp = $377;
           $377 = $377 + 1 | 0; //@line 5544
           HEAP32[$4 >> 2] = $377; //@line 5545
           $380 = $$06$i234$i << 8 | HEAPU8[$377$looptemp >> 0]; //@line 5548
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $380; //@line 5551
            break;
           } else {
            $$06$i234$i = $380; //@line 5554
           }
          }
         }
         HEAP32[$368 >> 2] = $$0$lcssa$i237$i; //@line 5558
         $$reg2mem$0 = $61; //@line 5559
         continue L4;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $384 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 5569
         $385 = HEAP8[$384 >> 0] | 0; //@line 5570
         if ($385 & 1) {
          break L2;
         }
         HEAP8[$384 >> 0] = $385 | 1; //@line 5577
         $390 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5579
         HEAP32[$4 >> 2] = $390; //@line 5580
         $391 = $$1202$in$i & 255; //@line 5581
         if (!($391 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 5584
         } else {
          $$045$i228$i = $391; //@line 5586
          $$06$i227$i = 0; //@line 5586
          $396 = $390; //@line 5586
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 5588
           $396$looptemp = $396;
           $396 = $396 + 1 | 0; //@line 5590
           HEAP32[$4 >> 2] = $396; //@line 5591
           $399 = $$06$i227$i << 8 | HEAPU8[$396$looptemp >> 0]; //@line 5594
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $399; //@line 5597
            break;
           } else {
            $$06$i227$i = $399; //@line 5600
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 5606
         $$reg2mem$0 = $61; //@line 5607
         continue L4;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $405 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 5617
         $406 = HEAP8[$405 >> 0] | 0; //@line 5618
         if ($406 & 2) {
          break L2;
         }
         HEAP8[$405 >> 0] = $406 | 2; //@line 5625
         $411 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5627
         HEAP32[$4 >> 2] = $411; //@line 5628
         $412 = $$1202$in$i & 255; //@line 5629
         if (!($412 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 5632
         } else {
          $$045$i221$i = $412; //@line 5634
          $$06$i220$i = 0; //@line 5634
          $417 = $411; //@line 5634
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 5636
           $417$looptemp = $417;
           $417 = $417 + 1 | 0; //@line 5638
           HEAP32[$4 >> 2] = $417; //@line 5639
           $420 = $$06$i220$i << 8 | HEAPU8[$417$looptemp >> 0]; //@line 5642
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $420; //@line 5645
            break;
           } else {
            $$06$i220$i = $420; //@line 5648
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 5654
         $$reg2mem$0 = $61; //@line 5655
         continue L4;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $110 = $86 + 1 | 0; //@line 5682
    HEAP32[$4 >> 2] = $110; //@line 5683
    $111 = $$1202$in$i & 255; //@line 5684
    if (!($111 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 5687
    } else {
     $$045$i$i = $111; //@line 5689
     $$06$i$i = 0; //@line 5689
     $116 = $110; //@line 5689
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 5691
      $116$looptemp = $116;
      $116 = $116 + 1 | 0; //@line 5693
      HEAP32[$4 >> 2] = $116; //@line 5694
      $119 = $$06$i$i << 8 | HEAPU8[$116$looptemp >> 0]; //@line 5697
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $119; //@line 5700
       break;
      } else {
       $$06$i$i = $119; //@line 5703
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 5707
    $$reg2mem$0 = $61; //@line 5708
   }
   if ((label | 0) == 14) {
    $82 = HEAP32[$10 >> 2] | 0; //@line 5711
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 5712
    $83 = FUNCTION_TABLE_ii[$82 & 15](68) | 0; //@line 5713
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 5716
     $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 5717
     HEAP32[$84 >> 2] = $2; //@line 5718
     $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 5719
     HEAP32[$85 >> 2] = $86; //@line 5720
     $87 = $ReallocAsyncCtx3 + 12 | 0; //@line 5721
     HEAP32[$87 >> 2] = $4; //@line 5722
     $88 = $ReallocAsyncCtx3 + 16 | 0; //@line 5723
     HEAP32[$88 >> 2] = $$1202$in$i; //@line 5724
     $89 = $ReallocAsyncCtx3 + 20 | 0; //@line 5725
     HEAP32[$89 >> 2] = $6; //@line 5726
     $90 = $ReallocAsyncCtx3 + 24 | 0; //@line 5727
     HEAP32[$90 >> 2] = $8; //@line 5728
     $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 5729
     HEAP32[$91 >> 2] = $10; //@line 5730
     $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 5731
     HEAP32[$92 >> 2] = $12; //@line 5732
     $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 5733
     HEAP32[$93 >> 2] = $14; //@line 5734
     $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 5735
     HEAP16[$94 >> 1] = $trunc$i; //@line 5736
     $95 = $ReallocAsyncCtx3 + 42 | 0; //@line 5737
     HEAP16[$95 >> 1] = $$1202$i; //@line 5738
     $96 = $ReallocAsyncCtx3 + 44 | 0; //@line 5739
     HEAP32[$96 >> 2] = $16; //@line 5740
     $97 = $ReallocAsyncCtx3 + 48 | 0; //@line 5741
     HEAP32[$97 >> 2] = $18; //@line 5742
     $98 = $ReallocAsyncCtx3 + 52 | 0; //@line 5743
     HEAP32[$98 >> 2] = $20; //@line 5744
     $99 = $ReallocAsyncCtx3 + 56 | 0; //@line 5745
     HEAP32[$99 >> 2] = $22; //@line 5746
     $100 = $ReallocAsyncCtx3 + 60 | 0; //@line 5747
     HEAP32[$100 >> 2] = $61; //@line 5748
     $101 = $ReallocAsyncCtx3 + 64 | 0; //@line 5749
     HEAP32[$101 >> 2] = $24; //@line 5750
     $102 = $ReallocAsyncCtx3 + 68 | 0; //@line 5751
     HEAP32[$102 >> 2] = $26; //@line 5752
     $103 = $ReallocAsyncCtx3 + 72 | 0; //@line 5753
     HEAP16[$103 >> 1] = $79; //@line 5754
     $104 = $ReallocAsyncCtx3 + 76 | 0; //@line 5755
     HEAP32[$104 >> 2] = $28; //@line 5756
     $105 = $ReallocAsyncCtx3 + 80 | 0; //@line 5757
     HEAP32[$105 >> 2] = $30; //@line 5758
     sp = STACKTOP; //@line 5759
     return;
    }
    HEAP32[___async_retval >> 2] = $83; //@line 5763
    ___async_unwind = 0; //@line 5764
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 5765
    $84 = $ReallocAsyncCtx3 + 4 | 0; //@line 5766
    HEAP32[$84 >> 2] = $2; //@line 5767
    $85 = $ReallocAsyncCtx3 + 8 | 0; //@line 5768
    HEAP32[$85 >> 2] = $86; //@line 5769
    $87 = $ReallocAsyncCtx3 + 12 | 0; //@line 5770
    HEAP32[$87 >> 2] = $4; //@line 5771
    $88 = $ReallocAsyncCtx3 + 16 | 0; //@line 5772
    HEAP32[$88 >> 2] = $$1202$in$i; //@line 5773
    $89 = $ReallocAsyncCtx3 + 20 | 0; //@line 5774
    HEAP32[$89 >> 2] = $6; //@line 5775
    $90 = $ReallocAsyncCtx3 + 24 | 0; //@line 5776
    HEAP32[$90 >> 2] = $8; //@line 5777
    $91 = $ReallocAsyncCtx3 + 28 | 0; //@line 5778
    HEAP32[$91 >> 2] = $10; //@line 5779
    $92 = $ReallocAsyncCtx3 + 32 | 0; //@line 5780
    HEAP32[$92 >> 2] = $12; //@line 5781
    $93 = $ReallocAsyncCtx3 + 36 | 0; //@line 5782
    HEAP32[$93 >> 2] = $14; //@line 5783
    $94 = $ReallocAsyncCtx3 + 40 | 0; //@line 5784
    HEAP16[$94 >> 1] = $trunc$i; //@line 5785
    $95 = $ReallocAsyncCtx3 + 42 | 0; //@line 5786
    HEAP16[$95 >> 1] = $$1202$i; //@line 5787
    $96 = $ReallocAsyncCtx3 + 44 | 0; //@line 5788
    HEAP32[$96 >> 2] = $16; //@line 5789
    $97 = $ReallocAsyncCtx3 + 48 | 0; //@line 5790
    HEAP32[$97 >> 2] = $18; //@line 5791
    $98 = $ReallocAsyncCtx3 + 52 | 0; //@line 5792
    HEAP32[$98 >> 2] = $20; //@line 5793
    $99 = $ReallocAsyncCtx3 + 56 | 0; //@line 5794
    HEAP32[$99 >> 2] = $22; //@line 5795
    $100 = $ReallocAsyncCtx3 + 60 | 0; //@line 5796
    HEAP32[$100 >> 2] = $61; //@line 5797
    $101 = $ReallocAsyncCtx3 + 64 | 0; //@line 5798
    HEAP32[$101 >> 2] = $24; //@line 5799
    $102 = $ReallocAsyncCtx3 + 68 | 0; //@line 5800
    HEAP32[$102 >> 2] = $26; //@line 5801
    $103 = $ReallocAsyncCtx3 + 72 | 0; //@line 5802
    HEAP16[$103 >> 1] = $79; //@line 5803
    $104 = $ReallocAsyncCtx3 + 76 | 0; //@line 5804
    HEAP32[$104 >> 2] = $28; //@line 5805
    $105 = $ReallocAsyncCtx3 + 80 | 0; //@line 5806
    HEAP32[$105 >> 2] = $30; //@line 5807
    sp = STACKTOP; //@line 5808
    return;
   } else if ((label | 0) == 27) {
    $135 = $$1202$in$i & 65535; //@line 5812
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $138 = HEAP32[$14 >> 2] | 0; //@line 5818
    if (HEAP32[$138 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$138 + 2 >> 1] = $$1202$i; //@line 5826
    $143 = $86 + 1 | 0; //@line 5827
    HEAP32[$4 >> 2] = $143; //@line 5828
    $144 = HEAP32[$10 >> 2] | 0; //@line 5829
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 5830
    $145 = FUNCTION_TABLE_ii[$144 & 15]($$1202$i) | 0; //@line 5831
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 5834
     $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 5835
     HEAP32[$146 >> 2] = $2; //@line 5836
     $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 5837
     HEAP32[$147 >> 2] = $4; //@line 5838
     $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 5839
     HEAP32[$148 >> 2] = $6; //@line 5840
     $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 5841
     HEAP32[$149 >> 2] = $8; //@line 5842
     $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 5843
     HEAP32[$150 >> 2] = $10; //@line 5844
     $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 5845
     HEAP32[$151 >> 2] = $12; //@line 5846
     $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 5847
     HEAP32[$152 >> 2] = $14; //@line 5848
     $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 5849
     HEAP32[$153 >> 2] = $16; //@line 5850
     $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 5851
     HEAP32[$154 >> 2] = $18; //@line 5852
     $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 5853
     HEAP32[$155 >> 2] = $20; //@line 5854
     $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 5855
     HEAP32[$156 >> 2] = $22; //@line 5856
     $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 5857
     HEAP32[$157 >> 2] = $24; //@line 5858
     $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 5859
     HEAP32[$158 >> 2] = $26; //@line 5860
     $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 5861
     HEAP32[$159 >> 2] = $28; //@line 5862
     $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 5863
     HEAP32[$160 >> 2] = $30; //@line 5864
     $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 5865
     HEAP32[$161 >> 2] = $61; //@line 5866
     $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 5867
     HEAP32[$162 >> 2] = $143; //@line 5868
     $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 5869
     HEAP32[$163 >> 2] = $135; //@line 5870
     sp = STACKTOP; //@line 5871
     return;
    }
    HEAP32[___async_retval >> 2] = $145; //@line 5875
    ___async_unwind = 0; //@line 5876
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 5877
    $146 = $ReallocAsyncCtx4 + 4 | 0; //@line 5878
    HEAP32[$146 >> 2] = $2; //@line 5879
    $147 = $ReallocAsyncCtx4 + 8 | 0; //@line 5880
    HEAP32[$147 >> 2] = $4; //@line 5881
    $148 = $ReallocAsyncCtx4 + 12 | 0; //@line 5882
    HEAP32[$148 >> 2] = $6; //@line 5883
    $149 = $ReallocAsyncCtx4 + 16 | 0; //@line 5884
    HEAP32[$149 >> 2] = $8; //@line 5885
    $150 = $ReallocAsyncCtx4 + 20 | 0; //@line 5886
    HEAP32[$150 >> 2] = $10; //@line 5887
    $151 = $ReallocAsyncCtx4 + 24 | 0; //@line 5888
    HEAP32[$151 >> 2] = $12; //@line 5889
    $152 = $ReallocAsyncCtx4 + 28 | 0; //@line 5890
    HEAP32[$152 >> 2] = $14; //@line 5891
    $153 = $ReallocAsyncCtx4 + 32 | 0; //@line 5892
    HEAP32[$153 >> 2] = $16; //@line 5893
    $154 = $ReallocAsyncCtx4 + 36 | 0; //@line 5894
    HEAP32[$154 >> 2] = $18; //@line 5895
    $155 = $ReallocAsyncCtx4 + 40 | 0; //@line 5896
    HEAP32[$155 >> 2] = $20; //@line 5897
    $156 = $ReallocAsyncCtx4 + 44 | 0; //@line 5898
    HEAP32[$156 >> 2] = $22; //@line 5899
    $157 = $ReallocAsyncCtx4 + 48 | 0; //@line 5900
    HEAP32[$157 >> 2] = $24; //@line 5901
    $158 = $ReallocAsyncCtx4 + 52 | 0; //@line 5902
    HEAP32[$158 >> 2] = $26; //@line 5903
    $159 = $ReallocAsyncCtx4 + 56 | 0; //@line 5904
    HEAP32[$159 >> 2] = $28; //@line 5905
    $160 = $ReallocAsyncCtx4 + 60 | 0; //@line 5906
    HEAP32[$160 >> 2] = $30; //@line 5907
    $161 = $ReallocAsyncCtx4 + 64 | 0; //@line 5908
    HEAP32[$161 >> 2] = $61; //@line 5909
    $162 = $ReallocAsyncCtx4 + 68 | 0; //@line 5910
    HEAP32[$162 >> 2] = $143; //@line 5911
    $163 = $ReallocAsyncCtx4 + 72 | 0; //@line 5912
    HEAP32[$163 >> 2] = $135; //@line 5913
    sp = STACKTOP; //@line 5914
    return;
   } else if ((label | 0) == 34) {
    $169 = HEAP32[$14 >> 2] | 0; //@line 5918
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 5920
    $171 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $169 + 48 | 0, $169, 4, $$1202$i) | 0; //@line 5921
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 5924
     $172 = $ReallocAsyncCtx10 + 4 | 0; //@line 5925
     HEAP32[$172 >> 2] = $2; //@line 5926
     $173 = $ReallocAsyncCtx10 + 8 | 0; //@line 5927
     HEAP32[$173 >> 2] = $4; //@line 5928
     $174 = $ReallocAsyncCtx10 + 12 | 0; //@line 5929
     HEAP32[$174 >> 2] = $6; //@line 5930
     $175 = $ReallocAsyncCtx10 + 16 | 0; //@line 5931
     HEAP32[$175 >> 2] = $8; //@line 5932
     $176 = $ReallocAsyncCtx10 + 20 | 0; //@line 5933
     HEAP32[$176 >> 2] = $10; //@line 5934
     $177 = $ReallocAsyncCtx10 + 24 | 0; //@line 5935
     HEAP32[$177 >> 2] = $12; //@line 5936
     $178 = $ReallocAsyncCtx10 + 28 | 0; //@line 5937
     HEAP32[$178 >> 2] = $14; //@line 5938
     $179 = $ReallocAsyncCtx10 + 32 | 0; //@line 5939
     HEAP32[$179 >> 2] = $16; //@line 5940
     $180 = $ReallocAsyncCtx10 + 36 | 0; //@line 5941
     HEAP32[$180 >> 2] = $18; //@line 5942
     $181 = $ReallocAsyncCtx10 + 40 | 0; //@line 5943
     HEAP32[$181 >> 2] = $20; //@line 5944
     $182 = $ReallocAsyncCtx10 + 44 | 0; //@line 5945
     HEAP32[$182 >> 2] = $22; //@line 5946
     $183 = $ReallocAsyncCtx10 + 48 | 0; //@line 5947
     HEAP32[$183 >> 2] = $24; //@line 5948
     $184 = $ReallocAsyncCtx10 + 52 | 0; //@line 5949
     HEAP32[$184 >> 2] = $26; //@line 5950
     $185 = $ReallocAsyncCtx10 + 56 | 0; //@line 5951
     HEAP32[$185 >> 2] = $28; //@line 5952
     $186 = $ReallocAsyncCtx10 + 60 | 0; //@line 5953
     HEAP32[$186 >> 2] = $30; //@line 5954
     $187 = $ReallocAsyncCtx10 + 64 | 0; //@line 5955
     HEAP32[$187 >> 2] = $61; //@line 5956
     sp = STACKTOP; //@line 5957
     return;
    }
    HEAP8[___async_retval >> 0] = $171; //@line 5961
    ___async_unwind = 0; //@line 5962
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 5963
    $172 = $ReallocAsyncCtx10 + 4 | 0; //@line 5964
    HEAP32[$172 >> 2] = $2; //@line 5965
    $173 = $ReallocAsyncCtx10 + 8 | 0; //@line 5966
    HEAP32[$173 >> 2] = $4; //@line 5967
    $174 = $ReallocAsyncCtx10 + 12 | 0; //@line 5968
    HEAP32[$174 >> 2] = $6; //@line 5969
    $175 = $ReallocAsyncCtx10 + 16 | 0; //@line 5970
    HEAP32[$175 >> 2] = $8; //@line 5971
    $176 = $ReallocAsyncCtx10 + 20 | 0; //@line 5972
    HEAP32[$176 >> 2] = $10; //@line 5973
    $177 = $ReallocAsyncCtx10 + 24 | 0; //@line 5974
    HEAP32[$177 >> 2] = $12; //@line 5975
    $178 = $ReallocAsyncCtx10 + 28 | 0; //@line 5976
    HEAP32[$178 >> 2] = $14; //@line 5977
    $179 = $ReallocAsyncCtx10 + 32 | 0; //@line 5978
    HEAP32[$179 >> 2] = $16; //@line 5979
    $180 = $ReallocAsyncCtx10 + 36 | 0; //@line 5980
    HEAP32[$180 >> 2] = $18; //@line 5981
    $181 = $ReallocAsyncCtx10 + 40 | 0; //@line 5982
    HEAP32[$181 >> 2] = $20; //@line 5983
    $182 = $ReallocAsyncCtx10 + 44 | 0; //@line 5984
    HEAP32[$182 >> 2] = $22; //@line 5985
    $183 = $ReallocAsyncCtx10 + 48 | 0; //@line 5986
    HEAP32[$183 >> 2] = $24; //@line 5987
    $184 = $ReallocAsyncCtx10 + 52 | 0; //@line 5988
    HEAP32[$184 >> 2] = $26; //@line 5989
    $185 = $ReallocAsyncCtx10 + 56 | 0; //@line 5990
    HEAP32[$185 >> 2] = $28; //@line 5991
    $186 = $ReallocAsyncCtx10 + 60 | 0; //@line 5992
    HEAP32[$186 >> 2] = $30; //@line 5993
    $187 = $ReallocAsyncCtx10 + 64 | 0; //@line 5994
    HEAP32[$187 >> 2] = $61; //@line 5995
    sp = STACKTOP; //@line 5996
    return;
   } else if ((label | 0) == 37) {
    $189 = $$1202$in$i & 65535; //@line 6000
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $192 = HEAP32[$14 >> 2] | 0; //@line 6006
    if (HEAP32[$192 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$192 + 4 >> 1] = $$1202$i; //@line 6014
    $197 = $86 + 1 | 0; //@line 6015
    HEAP32[$4 >> 2] = $197; //@line 6016
    $198 = HEAP32[$10 >> 2] | 0; //@line 6017
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 6018
    $199 = FUNCTION_TABLE_ii[$198 & 15]($$1202$i) | 0; //@line 6019
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 6022
     $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 6023
     HEAP32[$200 >> 2] = $2; //@line 6024
     $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 6025
     HEAP32[$201 >> 2] = $4; //@line 6026
     $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 6027
     HEAP32[$202 >> 2] = $6; //@line 6028
     $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 6029
     HEAP32[$203 >> 2] = $8; //@line 6030
     $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 6031
     HEAP32[$204 >> 2] = $10; //@line 6032
     $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 6033
     HEAP32[$205 >> 2] = $12; //@line 6034
     $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 6035
     HEAP32[$206 >> 2] = $14; //@line 6036
     $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 6037
     HEAP32[$207 >> 2] = $16; //@line 6038
     $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 6039
     HEAP32[$208 >> 2] = $18; //@line 6040
     $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 6041
     HEAP32[$209 >> 2] = $20; //@line 6042
     $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 6043
     HEAP32[$210 >> 2] = $22; //@line 6044
     $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 6045
     HEAP32[$211 >> 2] = $24; //@line 6046
     $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 6047
     HEAP32[$212 >> 2] = $26; //@line 6048
     $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 6049
     HEAP32[$213 >> 2] = $28; //@line 6050
     $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 6051
     HEAP32[$214 >> 2] = $30; //@line 6052
     $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 6053
     HEAP32[$215 >> 2] = $61; //@line 6054
     $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 6055
     HEAP32[$216 >> 2] = $197; //@line 6056
     $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 6057
     HEAP32[$217 >> 2] = $189; //@line 6058
     sp = STACKTOP; //@line 6059
     return;
    }
    HEAP32[___async_retval >> 2] = $199; //@line 6063
    ___async_unwind = 0; //@line 6064
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 6065
    $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 6066
    HEAP32[$200 >> 2] = $2; //@line 6067
    $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 6068
    HEAP32[$201 >> 2] = $4; //@line 6069
    $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 6070
    HEAP32[$202 >> 2] = $6; //@line 6071
    $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 6072
    HEAP32[$203 >> 2] = $8; //@line 6073
    $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 6074
    HEAP32[$204 >> 2] = $10; //@line 6075
    $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 6076
    HEAP32[$205 >> 2] = $12; //@line 6077
    $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 6078
    HEAP32[$206 >> 2] = $14; //@line 6079
    $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 6080
    HEAP32[$207 >> 2] = $16; //@line 6081
    $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 6082
    HEAP32[$208 >> 2] = $18; //@line 6083
    $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 6084
    HEAP32[$209 >> 2] = $20; //@line 6085
    $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 6086
    HEAP32[$210 >> 2] = $22; //@line 6087
    $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 6088
    HEAP32[$211 >> 2] = $24; //@line 6089
    $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 6090
    HEAP32[$212 >> 2] = $26; //@line 6091
    $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 6092
    HEAP32[$213 >> 2] = $28; //@line 6093
    $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 6094
    HEAP32[$214 >> 2] = $30; //@line 6095
    $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 6096
    HEAP32[$215 >> 2] = $61; //@line 6097
    $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 6098
    HEAP32[$216 >> 2] = $197; //@line 6099
    $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 6100
    HEAP32[$217 >> 2] = $189; //@line 6101
    sp = STACKTOP; //@line 6102
    return;
   } else if ((label | 0) == 42) {
    $219 = HEAP32[$14 >> 2] | 0; //@line 6106
    $220 = $219 + 56 | 0; //@line 6107
    if (HEAP32[$220 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 6114
    $224 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $220, $219 + 6 | 0, 8, $$1202$i) | 0; //@line 6115
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 6118
     $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 6119
     HEAP32[$225 >> 2] = $2; //@line 6120
     $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 6121
     HEAP32[$226 >> 2] = $4; //@line 6122
     $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 6123
     HEAP32[$227 >> 2] = $6; //@line 6124
     $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 6125
     HEAP32[$228 >> 2] = $8; //@line 6126
     $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 6127
     HEAP32[$229 >> 2] = $10; //@line 6128
     $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 6129
     HEAP32[$230 >> 2] = $12; //@line 6130
     $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 6131
     HEAP32[$231 >> 2] = $14; //@line 6132
     $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 6133
     HEAP32[$232 >> 2] = $16; //@line 6134
     $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 6135
     HEAP32[$233 >> 2] = $18; //@line 6136
     $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 6137
     HEAP32[$234 >> 2] = $20; //@line 6138
     $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 6139
     HEAP32[$235 >> 2] = $22; //@line 6140
     $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 6141
     HEAP32[$236 >> 2] = $24; //@line 6142
     $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 6143
     HEAP32[$237 >> 2] = $26; //@line 6144
     $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 6145
     HEAP32[$238 >> 2] = $28; //@line 6146
     $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 6147
     HEAP32[$239 >> 2] = $30; //@line 6148
     $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 6149
     HEAP32[$240 >> 2] = $61; //@line 6150
     sp = STACKTOP; //@line 6151
     return;
    }
    HEAP8[___async_retval >> 0] = $224; //@line 6155
    ___async_unwind = 0; //@line 6156
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 6157
    $225 = $ReallocAsyncCtx9 + 4 | 0; //@line 6158
    HEAP32[$225 >> 2] = $2; //@line 6159
    $226 = $ReallocAsyncCtx9 + 8 | 0; //@line 6160
    HEAP32[$226 >> 2] = $4; //@line 6161
    $227 = $ReallocAsyncCtx9 + 12 | 0; //@line 6162
    HEAP32[$227 >> 2] = $6; //@line 6163
    $228 = $ReallocAsyncCtx9 + 16 | 0; //@line 6164
    HEAP32[$228 >> 2] = $8; //@line 6165
    $229 = $ReallocAsyncCtx9 + 20 | 0; //@line 6166
    HEAP32[$229 >> 2] = $10; //@line 6167
    $230 = $ReallocAsyncCtx9 + 24 | 0; //@line 6168
    HEAP32[$230 >> 2] = $12; //@line 6169
    $231 = $ReallocAsyncCtx9 + 28 | 0; //@line 6170
    HEAP32[$231 >> 2] = $14; //@line 6171
    $232 = $ReallocAsyncCtx9 + 32 | 0; //@line 6172
    HEAP32[$232 >> 2] = $16; //@line 6173
    $233 = $ReallocAsyncCtx9 + 36 | 0; //@line 6174
    HEAP32[$233 >> 2] = $18; //@line 6175
    $234 = $ReallocAsyncCtx9 + 40 | 0; //@line 6176
    HEAP32[$234 >> 2] = $20; //@line 6177
    $235 = $ReallocAsyncCtx9 + 44 | 0; //@line 6178
    HEAP32[$235 >> 2] = $22; //@line 6179
    $236 = $ReallocAsyncCtx9 + 48 | 0; //@line 6180
    HEAP32[$236 >> 2] = $24; //@line 6181
    $237 = $ReallocAsyncCtx9 + 52 | 0; //@line 6182
    HEAP32[$237 >> 2] = $26; //@line 6183
    $238 = $ReallocAsyncCtx9 + 56 | 0; //@line 6184
    HEAP32[$238 >> 2] = $28; //@line 6185
    $239 = $ReallocAsyncCtx9 + 60 | 0; //@line 6186
    HEAP32[$239 >> 2] = $30; //@line 6187
    $240 = $ReallocAsyncCtx9 + 64 | 0; //@line 6188
    HEAP32[$240 >> 2] = $61; //@line 6189
    sp = STACKTOP; //@line 6190
    return;
   } else if ((label | 0) == 51) {
    $258 = HEAP32[$14 >> 2] | 0; //@line 6194
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 6197
    $261 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $258 + 60 | 0, $258 + 8 | 0, 20, $$1202$i) | 0; //@line 6198
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 6201
     $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 6202
     HEAP32[$262 >> 2] = $2; //@line 6203
     $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 6204
     HEAP32[$263 >> 2] = $4; //@line 6205
     $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 6206
     HEAP32[$264 >> 2] = $6; //@line 6207
     $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 6208
     HEAP32[$265 >> 2] = $8; //@line 6209
     $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 6210
     HEAP32[$266 >> 2] = $10; //@line 6211
     $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 6212
     HEAP32[$267 >> 2] = $12; //@line 6213
     $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 6214
     HEAP32[$268 >> 2] = $14; //@line 6215
     $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 6216
     HEAP32[$269 >> 2] = $16; //@line 6217
     $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 6218
     HEAP32[$270 >> 2] = $18; //@line 6219
     $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 6220
     HEAP32[$271 >> 2] = $20; //@line 6221
     $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 6222
     HEAP32[$272 >> 2] = $22; //@line 6223
     $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 6224
     HEAP32[$273 >> 2] = $24; //@line 6225
     $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 6226
     HEAP32[$274 >> 2] = $26; //@line 6227
     $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 6228
     HEAP32[$275 >> 2] = $28; //@line 6229
     $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 6230
     HEAP32[$276 >> 2] = $30; //@line 6231
     $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 6232
     HEAP32[$277 >> 2] = $61; //@line 6233
     sp = STACKTOP; //@line 6234
     return;
    }
    HEAP8[___async_retval >> 0] = $261; //@line 6238
    ___async_unwind = 0; //@line 6239
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 6240
    $262 = $ReallocAsyncCtx8 + 4 | 0; //@line 6241
    HEAP32[$262 >> 2] = $2; //@line 6242
    $263 = $ReallocAsyncCtx8 + 8 | 0; //@line 6243
    HEAP32[$263 >> 2] = $4; //@line 6244
    $264 = $ReallocAsyncCtx8 + 12 | 0; //@line 6245
    HEAP32[$264 >> 2] = $6; //@line 6246
    $265 = $ReallocAsyncCtx8 + 16 | 0; //@line 6247
    HEAP32[$265 >> 2] = $8; //@line 6248
    $266 = $ReallocAsyncCtx8 + 20 | 0; //@line 6249
    HEAP32[$266 >> 2] = $10; //@line 6250
    $267 = $ReallocAsyncCtx8 + 24 | 0; //@line 6251
    HEAP32[$267 >> 2] = $12; //@line 6252
    $268 = $ReallocAsyncCtx8 + 28 | 0; //@line 6253
    HEAP32[$268 >> 2] = $14; //@line 6254
    $269 = $ReallocAsyncCtx8 + 32 | 0; //@line 6255
    HEAP32[$269 >> 2] = $16; //@line 6256
    $270 = $ReallocAsyncCtx8 + 36 | 0; //@line 6257
    HEAP32[$270 >> 2] = $18; //@line 6258
    $271 = $ReallocAsyncCtx8 + 40 | 0; //@line 6259
    HEAP32[$271 >> 2] = $20; //@line 6260
    $272 = $ReallocAsyncCtx8 + 44 | 0; //@line 6261
    HEAP32[$272 >> 2] = $22; //@line 6262
    $273 = $ReallocAsyncCtx8 + 48 | 0; //@line 6263
    HEAP32[$273 >> 2] = $24; //@line 6264
    $274 = $ReallocAsyncCtx8 + 52 | 0; //@line 6265
    HEAP32[$274 >> 2] = $26; //@line 6266
    $275 = $ReallocAsyncCtx8 + 56 | 0; //@line 6267
    HEAP32[$275 >> 2] = $28; //@line 6268
    $276 = $ReallocAsyncCtx8 + 60 | 0; //@line 6269
    HEAP32[$276 >> 2] = $30; //@line 6270
    $277 = $ReallocAsyncCtx8 + 64 | 0; //@line 6271
    HEAP32[$277 >> 2] = $61; //@line 6272
    sp = STACKTOP; //@line 6273
    return;
   } else if ((label | 0) == 54) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 6277
    $279 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $28, $30, 11, $$1202$i) | 0; //@line 6278
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 6281
     $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 6282
     HEAP32[$280 >> 2] = $2; //@line 6283
     $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 6284
     HEAP32[$281 >> 2] = $4; //@line 6285
     $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 6286
     HEAP32[$282 >> 2] = $6; //@line 6287
     $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 6288
     HEAP32[$283 >> 2] = $8; //@line 6289
     $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 6290
     HEAP32[$284 >> 2] = $10; //@line 6291
     $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 6292
     HEAP32[$285 >> 2] = $12; //@line 6293
     $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 6294
     HEAP32[$286 >> 2] = $14; //@line 6295
     $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 6296
     HEAP32[$287 >> 2] = $16; //@line 6297
     $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 6298
     HEAP32[$288 >> 2] = $18; //@line 6299
     $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 6300
     HEAP32[$289 >> 2] = $20; //@line 6301
     $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 6302
     HEAP32[$290 >> 2] = $22; //@line 6303
     $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 6304
     HEAP32[$291 >> 2] = $24; //@line 6305
     $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 6306
     HEAP32[$292 >> 2] = $26; //@line 6307
     $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 6308
     HEAP32[$293 >> 2] = $28; //@line 6309
     $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 6310
     HEAP32[$294 >> 2] = $30; //@line 6311
     $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 6312
     HEAP32[$295 >> 2] = $61; //@line 6313
     sp = STACKTOP; //@line 6314
     return;
    }
    HEAP8[___async_retval >> 0] = $279; //@line 6318
    ___async_unwind = 0; //@line 6319
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 6320
    $280 = $ReallocAsyncCtx7 + 4 | 0; //@line 6321
    HEAP32[$280 >> 2] = $2; //@line 6322
    $281 = $ReallocAsyncCtx7 + 8 | 0; //@line 6323
    HEAP32[$281 >> 2] = $4; //@line 6324
    $282 = $ReallocAsyncCtx7 + 12 | 0; //@line 6325
    HEAP32[$282 >> 2] = $6; //@line 6326
    $283 = $ReallocAsyncCtx7 + 16 | 0; //@line 6327
    HEAP32[$283 >> 2] = $8; //@line 6328
    $284 = $ReallocAsyncCtx7 + 20 | 0; //@line 6329
    HEAP32[$284 >> 2] = $10; //@line 6330
    $285 = $ReallocAsyncCtx7 + 24 | 0; //@line 6331
    HEAP32[$285 >> 2] = $12; //@line 6332
    $286 = $ReallocAsyncCtx7 + 28 | 0; //@line 6333
    HEAP32[$286 >> 2] = $14; //@line 6334
    $287 = $ReallocAsyncCtx7 + 32 | 0; //@line 6335
    HEAP32[$287 >> 2] = $16; //@line 6336
    $288 = $ReallocAsyncCtx7 + 36 | 0; //@line 6337
    HEAP32[$288 >> 2] = $18; //@line 6338
    $289 = $ReallocAsyncCtx7 + 40 | 0; //@line 6339
    HEAP32[$289 >> 2] = $20; //@line 6340
    $290 = $ReallocAsyncCtx7 + 44 | 0; //@line 6341
    HEAP32[$290 >> 2] = $22; //@line 6342
    $291 = $ReallocAsyncCtx7 + 48 | 0; //@line 6343
    HEAP32[$291 >> 2] = $24; //@line 6344
    $292 = $ReallocAsyncCtx7 + 52 | 0; //@line 6345
    HEAP32[$292 >> 2] = $26; //@line 6346
    $293 = $ReallocAsyncCtx7 + 56 | 0; //@line 6347
    HEAP32[$293 >> 2] = $28; //@line 6348
    $294 = $ReallocAsyncCtx7 + 60 | 0; //@line 6349
    HEAP32[$294 >> 2] = $30; //@line 6350
    $295 = $ReallocAsyncCtx7 + 64 | 0; //@line 6351
    HEAP32[$295 >> 2] = $61; //@line 6352
    sp = STACKTOP; //@line 6353
    return;
   } else if ((label | 0) == 62) {
    $313 = HEAP32[$14 >> 2] | 0; //@line 6357
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 6360
    $316 = _sn_coap_parser_options_parse_multiple_options($26, $4, $79, $313 + 64 | 0, $313 + 10 | 0, 15, $$1202$i) | 0; //@line 6361
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 6364
     $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 6365
     HEAP32[$317 >> 2] = $2; //@line 6366
     $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 6367
     HEAP32[$318 >> 2] = $4; //@line 6368
     $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 6369
     HEAP32[$319 >> 2] = $6; //@line 6370
     $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 6371
     HEAP32[$320 >> 2] = $8; //@line 6372
     $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 6373
     HEAP32[$321 >> 2] = $10; //@line 6374
     $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 6375
     HEAP32[$322 >> 2] = $12; //@line 6376
     $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 6377
     HEAP32[$323 >> 2] = $14; //@line 6378
     $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 6379
     HEAP32[$324 >> 2] = $16; //@line 6380
     $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 6381
     HEAP32[$325 >> 2] = $18; //@line 6382
     $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 6383
     HEAP32[$326 >> 2] = $20; //@line 6384
     $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 6385
     HEAP32[$327 >> 2] = $22; //@line 6386
     $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 6387
     HEAP32[$328 >> 2] = $24; //@line 6388
     $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 6389
     HEAP32[$329 >> 2] = $26; //@line 6390
     $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 6391
     HEAP32[$330 >> 2] = $28; //@line 6392
     $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 6393
     HEAP32[$331 >> 2] = $30; //@line 6394
     $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 6395
     HEAP32[$332 >> 2] = $61; //@line 6396
     sp = STACKTOP; //@line 6397
     return;
    }
    HEAP8[___async_retval >> 0] = $316; //@line 6401
    ___async_unwind = 0; //@line 6402
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 6403
    $317 = $ReallocAsyncCtx6 + 4 | 0; //@line 6404
    HEAP32[$317 >> 2] = $2; //@line 6405
    $318 = $ReallocAsyncCtx6 + 8 | 0; //@line 6406
    HEAP32[$318 >> 2] = $4; //@line 6407
    $319 = $ReallocAsyncCtx6 + 12 | 0; //@line 6408
    HEAP32[$319 >> 2] = $6; //@line 6409
    $320 = $ReallocAsyncCtx6 + 16 | 0; //@line 6410
    HEAP32[$320 >> 2] = $8; //@line 6411
    $321 = $ReallocAsyncCtx6 + 20 | 0; //@line 6412
    HEAP32[$321 >> 2] = $10; //@line 6413
    $322 = $ReallocAsyncCtx6 + 24 | 0; //@line 6414
    HEAP32[$322 >> 2] = $12; //@line 6415
    $323 = $ReallocAsyncCtx6 + 28 | 0; //@line 6416
    HEAP32[$323 >> 2] = $14; //@line 6417
    $324 = $ReallocAsyncCtx6 + 32 | 0; //@line 6418
    HEAP32[$324 >> 2] = $16; //@line 6419
    $325 = $ReallocAsyncCtx6 + 36 | 0; //@line 6420
    HEAP32[$325 >> 2] = $18; //@line 6421
    $326 = $ReallocAsyncCtx6 + 40 | 0; //@line 6422
    HEAP32[$326 >> 2] = $20; //@line 6423
    $327 = $ReallocAsyncCtx6 + 44 | 0; //@line 6424
    HEAP32[$327 >> 2] = $22; //@line 6425
    $328 = $ReallocAsyncCtx6 + 48 | 0; //@line 6426
    HEAP32[$328 >> 2] = $24; //@line 6427
    $329 = $ReallocAsyncCtx6 + 52 | 0; //@line 6428
    HEAP32[$329 >> 2] = $26; //@line 6429
    $330 = $ReallocAsyncCtx6 + 56 | 0; //@line 6430
    HEAP32[$330 >> 2] = $28; //@line 6431
    $331 = $ReallocAsyncCtx6 + 60 | 0; //@line 6432
    HEAP32[$331 >> 2] = $30; //@line 6433
    $332 = $ReallocAsyncCtx6 + 64 | 0; //@line 6434
    HEAP32[$332 >> 2] = $61; //@line 6435
    sp = STACKTOP; //@line 6436
    return;
   } else if ((label | 0) == 92) {
    if (($41 - $16 | 0) >= ($18 | 0)) {
     $443 = ___async_retval; //@line 6444
     HEAP32[$443 >> 2] = $6; //@line 6445
     return;
    }
    if ((HEAP8[$41 >> 0] | 0) == -1) {
     $433 = $41 + 1 | 0; //@line 6451
     HEAP32[$4 >> 2] = $433; //@line 6452
     $434 = $433; //@line 6453
     $436 = $16 - $434 + $18 | 0; //@line 6455
     HEAP16[$12 + 24 >> 1] = $436; //@line 6458
     if ($436 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $434; //@line 6463
      $443 = ___async_retval; //@line 6464
      HEAP32[$443 >> 2] = $6; //@line 6465
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 6470
    $443 = ___async_retval; //@line 6471
    HEAP32[$443 >> 2] = $6; //@line 6472
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 6478
 $443 = ___async_retval; //@line 6479
 HEAP32[$443 >> 2] = $6; //@line 6480
 return;
}
function _sn_coap_parser__async_cb_84($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $109 = 0, $110 = 0, $115 = 0, $118 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $134 = 0, $137 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $187 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $214 = 0, $215 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $239 = 0, $242 = 0, $243 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $294 = 0, $297 = 0, $298 = 0, $30 = 0, $303 = 0, $306 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $331 = 0, $334 = 0, $335 = 0, $340 = 0, $343 = 0, $347 = 0, $35 = 0, $350 = 0, $351 = 0, $356 = 0, $359 = 0, $36 = 0, $363 = 0, $366 = 0, $367 = 0, $37 = 0, $372 = 0, $375 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $394 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $406 = 0, $407 = 0, $412 = 0, $415 = 0, $419 = 0, $420 = 0, $43 = 0, $430 = 0, $431 = 0, $433 = 0, $440 = 0, $441 = 0, $442 = 0, $57 = 0, $6 = 0, $62 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $127$looptemp = 0, $248$looptemp = 0, $303$looptemp = 0, $340$looptemp = 0, $356$looptemp = 0, $372$looptemp = 0, $391$looptemp = 0, $412$looptemp = 0, $115$looptemp = 0;
 sp = STACKTOP; //@line 2280
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2282
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2284
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2286
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2288
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2290
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2292
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2294
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 2296
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2298
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2300
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2304
 HEAP32[HEAP32[$0 + 44 >> 2] >> 2] = $AsyncRetVal; //@line 2305
 L2 : do {
  if ($AsyncRetVal | 0) {
   _memcpy($AsyncRetVal | 0, $14 | 0, HEAPU8[$12 >> 0] | 0) | 0; //@line 2311
   $29 = $14 + (HEAPU8[$12 >> 0] | 0) | 0; //@line 2314
   HEAP32[$4 >> 2] = $29; //@line 2315
   $30 = $29; //@line 2316
   $31 = $16 & 65535; //@line 2317
   $32 = $18; //@line 2318
   $33 = $32 + $31 | 0; //@line 2319
   $35 = $12 + 40 | 0; //@line 2321
   $36 = $12 + 32 | 0; //@line 2322
   $37 = $12 + 22 | 0; //@line 2323
   $$0208$i = 0; //@line 2324
   $$sink275$i = $33 - $30 | 0; //@line 2324
   $40 = $29; //@line 2324
   $441 = $30; //@line 2324
   L5 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 93; //@line 2329
     break;
    }
    $trunc277$i = HEAP8[$40 >> 0] | 0; //@line 2332
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 93; //@line 2335
     break;
    }
    $43 = $trunc277$i & 15; //@line 2339
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 2340
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$40 + 1 >> 0] | 0; //@line 2352
      $$sink214$i = 13; //@line 2352
      $$sink3$i = 1; //@line 2352
      label = 10; //@line 2353
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$40 + 1 >> 0] << 8) + 269 | 0; //@line 2365
      $$sink214$i = HEAPU8[$40 + 2 >> 0] | 0; //@line 2365
      $$sink3$i = 2; //@line 2365
      label = 10; //@line 2366
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 2370
      $442 = $441; //@line 2370
      $62 = $40; //@line 2370
     }
    }
    if ((label | 0) == 10) {
     label = 0; //@line 2374
     $57 = $40 + $$sink3$i | 0; //@line 2376
     HEAP32[$4 >> 2] = $57; //@line 2377
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 2379
     $442 = $57; //@line 2379
     $62 = $57; //@line 2379
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 2382
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$62 + 1 >> 0] | 0; //@line 2393
      $$sink216$i = 13; //@line 2393
      $$sink8$i = 1; //@line 2393
      label = 14; //@line 2394
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$62 + 1 >> 0] << 8) + 269 | 0; //@line 2406
      $$sink216$i = HEAPU8[$62 + 2 >> 0] | 0; //@line 2406
      $$sink8$i = 2; //@line 2406
      label = 14; //@line 2407
      break;
     }
    default:
     {
      $$1202$in$i = $43; //@line 2411
      $77 = $442; //@line 2411
      $85 = $62; //@line 2411
     }
    }
    if ((label | 0) == 14) {
     label = 0; //@line 2415
     $74 = $62 + $$sink8$i | 0; //@line 2417
     HEAP32[$4 >> 2] = $74; //@line 2418
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 2420
     $77 = $74; //@line 2420
     $85 = $74; //@line 2420
    }
    $$1202$i = $$1202$in$i & 65535; //@line 2422
    $78 = $33 - $77 & 65535; //@line 2424
    $trunc$i = $$0208$i & 65535; //@line 2425
    L21 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 55; //@line 2429
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$35 >> 2] | 0)) {
        label = 17; //@line 2437
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 30; //@line 2442
         break L5;
         break;
        }
       case 4:
        {
         label = 35; //@line 2447
         break L5;
         break;
        }
       case 3:
        {
         label = 38; //@line 2452
         break L5;
         break;
        }
       case 8:
        {
         label = 43; //@line 2457
         break L5;
         break;
        }
       case 20:
        {
         label = 52; //@line 2462
         break L5;
         break;
        }
       case 11:
        {
         label = 55; //@line 2467
         break L5;
         break;
        }
       case 15:
        {
         label = 63; //@line 2472
         break L5;
         break;
        }
       case 12:
        {
         label = 21; //@line 2477
         break L21;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $121 = $85 + 1 | 0; //@line 2486
         HEAP32[$4 >> 2] = $121; //@line 2487
         $122 = $$1202$in$i & 255; //@line 2488
         if (!($122 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 2491
         } else {
          $$045$i256$i = $122; //@line 2493
          $$06$i255$i = 0; //@line 2493
          $127 = $121; //@line 2493
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 2495
           $127$looptemp = $127;
           $127 = $127 + 1 | 0; //@line 2497
           HEAP32[$4 >> 2] = $127; //@line 2498
           $130 = $$06$i255$i << 8 | HEAPU8[$127$looptemp >> 0]; //@line 2501
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $130; //@line 2504
            break;
           } else {
            $$06$i255$i = $130; //@line 2507
           }
          }
         }
         HEAP32[(HEAP32[$35 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 2513
         break L21;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $239 = (HEAP32[$35 >> 2] | 0) + 28 | 0; //@line 2523
         if ((HEAP32[$239 >> 2] | 0) != -1) {
          break L2;
         }
         $242 = $85 + 1 | 0; //@line 2529
         HEAP32[$4 >> 2] = $242; //@line 2530
         $243 = $$1202$in$i & 255; //@line 2531
         if (!($243 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 2534
         } else {
          $$045$i270$i = $243; //@line 2536
          $$06$i269$i = 0; //@line 2536
          $248 = $242; //@line 2536
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 2538
           $248$looptemp = $248;
           $248 = $248 + 1 | 0; //@line 2540
           HEAP32[$4 >> 2] = $248; //@line 2541
           $251 = $$06$i269$i << 8 | HEAPU8[$248$looptemp >> 0]; //@line 2544
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $251; //@line 2547
            break;
           } else {
            $$06$i269$i = $251; //@line 2550
           }
          }
         }
         HEAP32[$239 >> 2] = $$0$lcssa$i272$i; //@line 2554
         break L21;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $294 = (HEAP32[$35 >> 2] | 0) + 32 | 0; //@line 2564
         if ((HEAP32[$294 >> 2] | 0) != -1) {
          break L2;
         }
         $297 = $85 + 1 | 0; //@line 2570
         HEAP32[$4 >> 2] = $297; //@line 2571
         $298 = $$1202$in$i & 255; //@line 2572
         if (!($298 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 2575
         } else {
          $$045$i263$i = $298; //@line 2577
          $$06$i262$i = 0; //@line 2577
          $303 = $297; //@line 2577
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 2579
           $303$looptemp = $303;
           $303 = $303 + 1 | 0; //@line 2581
           HEAP32[$4 >> 2] = $303; //@line 2582
           $306 = $$06$i262$i << 8 | HEAPU8[$303$looptemp >> 0]; //@line 2585
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $306; //@line 2588
            break;
           } else {
            $$06$i262$i = $306; //@line 2591
           }
          }
         }
         HEAP32[$294 >> 2] = $$0$lcssa$i265$i; //@line 2595
         break L21;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $331 = (HEAP32[$35 >> 2] | 0) + 40 | 0; //@line 2605
         if ((HEAP32[$331 >> 2] | 0) != -1) {
          break L2;
         }
         $334 = $85 + 1 | 0; //@line 2611
         HEAP32[$4 >> 2] = $334; //@line 2612
         $335 = $$1202$in$i & 255; //@line 2613
         if (!($335 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 2616
         } else {
          $$045$i249$i = $335; //@line 2618
          $$06$i248$i = 0; //@line 2618
          $340 = $334; //@line 2618
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 2620
           $340$looptemp = $340;
           $340 = $340 + 1 | 0; //@line 2622
           HEAP32[$4 >> 2] = $340; //@line 2623
           $343 = $$06$i248$i << 8 | HEAPU8[$340$looptemp >> 0]; //@line 2626
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $343; //@line 2629
            break;
           } else {
            $$06$i248$i = $343; //@line 2632
           }
          }
         }
         HEAP32[$331 >> 2] = $$0$lcssa$i251$i; //@line 2636
         break L21;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $347 = (HEAP32[$35 >> 2] | 0) + 36 | 0; //@line 2646
         if ((HEAP32[$347 >> 2] | 0) != -1) {
          break L2;
         }
         $350 = $85 + 1 | 0; //@line 2652
         HEAP32[$4 >> 2] = $350; //@line 2653
         $351 = $$1202$in$i & 255; //@line 2654
         if (!($351 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 2657
         } else {
          $$045$i242$i = $351; //@line 2659
          $$06$i241$i = 0; //@line 2659
          $356 = $350; //@line 2659
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 2661
           $356$looptemp = $356;
           $356 = $356 + 1 | 0; //@line 2663
           HEAP32[$4 >> 2] = $356; //@line 2664
           $359 = $$06$i241$i << 8 | HEAPU8[$356$looptemp >> 0]; //@line 2667
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $359; //@line 2670
            break;
           } else {
            $$06$i241$i = $359; //@line 2673
           }
          }
         }
         HEAP32[$347 >> 2] = $$0$lcssa$i244$i; //@line 2677
         break L21;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $363 = (HEAP32[$35 >> 2] | 0) + 12 | 0; //@line 2687
         if ((HEAP32[$363 >> 2] | 0) != -1) {
          break L2;
         }
         $366 = $85 + 1 | 0; //@line 2693
         HEAP32[$4 >> 2] = $366; //@line 2694
         $367 = $$1202$in$i & 255; //@line 2695
         if (!($367 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 2698
         } else {
          $$045$i235$i = $367; //@line 2700
          $$06$i234$i = 0; //@line 2700
          $372 = $366; //@line 2700
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 2702
           $372$looptemp = $372;
           $372 = $372 + 1 | 0; //@line 2704
           HEAP32[$4 >> 2] = $372; //@line 2705
           $375 = $$06$i234$i << 8 | HEAPU8[$372$looptemp >> 0]; //@line 2708
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $375; //@line 2711
            break;
           } else {
            $$06$i234$i = $375; //@line 2714
           }
          }
         }
         HEAP32[$363 >> 2] = $$0$lcssa$i237$i; //@line 2718
         break L21;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $379 = (HEAP32[$35 >> 2] | 0) + 1 | 0; //@line 2728
         $380 = HEAP8[$379 >> 0] | 0; //@line 2729
         if ($380 & 1) {
          break L2;
         }
         HEAP8[$379 >> 0] = $380 | 1; //@line 2736
         $385 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 2738
         HEAP32[$4 >> 2] = $385; //@line 2739
         $386 = $$1202$in$i & 255; //@line 2740
         if (!($386 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 2743
         } else {
          $$045$i228$i = $386; //@line 2745
          $$06$i227$i = 0; //@line 2745
          $391 = $385; //@line 2745
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 2747
           $391$looptemp = $391;
           $391 = $391 + 1 | 0; //@line 2749
           HEAP32[$4 >> 2] = $391; //@line 2750
           $394 = $$06$i227$i << 8 | HEAPU8[$391$looptemp >> 0]; //@line 2753
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $394; //@line 2756
            break;
           } else {
            $$06$i227$i = $394; //@line 2759
           }
          }
         }
         HEAP32[(HEAP32[$35 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 2765
         break L21;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $400 = (HEAP32[$35 >> 2] | 0) + 1 | 0; //@line 2775
         $401 = HEAP8[$400 >> 0] | 0; //@line 2776
         if ($401 & 2) {
          break L2;
         }
         HEAP8[$400 >> 0] = $401 | 2; //@line 2783
         $406 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 2785
         HEAP32[$4 >> 2] = $406; //@line 2786
         $407 = $$1202$in$i & 255; //@line 2787
         if (!($407 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 2790
         } else {
          $$045$i221$i = $407; //@line 2792
          $$06$i220$i = 0; //@line 2792
          $412 = $406; //@line 2792
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 2794
           $412$looptemp = $412;
           $412 = $412 + 1 | 0; //@line 2796
           HEAP32[$4 >> 2] = $412; //@line 2797
           $415 = $$06$i220$i << 8 | HEAPU8[$412$looptemp >> 0]; //@line 2800
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $415; //@line 2803
            break;
           } else {
            $$06$i220$i = $415; //@line 2806
           }
          }
         }
         HEAP32[(HEAP32[$35 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 2812
         break L21;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       label = 21; //@line 2823
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if ((label | 0) == 21) {
     label = 0; //@line 2832
     if (($$1202$i & 65535) > 2) {
      break L2;
     }
     if ((HEAP32[$2 >> 2] | 0) != -1) {
      break L2;
     }
     $109 = $85 + 1 | 0; //@line 2842
     HEAP32[$4 >> 2] = $109; //@line 2843
     $110 = $$1202$in$i & 255; //@line 2844
     if (!($110 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 2847
     } else {
      $$045$i$i = $110; //@line 2849
      $$06$i$i = 0; //@line 2849
      $115 = $109; //@line 2849
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 2851
       $115$looptemp = $115;
       $115 = $115 + 1 | 0; //@line 2853
       HEAP32[$4 >> 2] = $115; //@line 2854
       $118 = $$06$i$i << 8 | HEAPU8[$115$looptemp >> 0]; //@line 2857
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $118; //@line 2860
        break;
       } else {
        $$06$i$i = $118; //@line 2863
       }
      }
     }
     HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 2867
    }
    $419 = HEAP32[$4 >> 2] | 0; //@line 2869
    $420 = $419 - $32 | 0; //@line 2870
    if (($420 | 0) > ($31 | 0)) {
     break L2;
    } else {
     $$sink275$i = $31 - $420 | 0; //@line 2877
     $40 = $419; //@line 2877
     $441 = $419; //@line 2877
    }
   }
   if ((label | 0) == 17) {
    $81 = HEAP32[$10 >> 2] | 0; //@line 2881
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 2882
    $82 = FUNCTION_TABLE_ii[$81 & 15](68) | 0; //@line 2883
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 2886
     $83 = $ReallocAsyncCtx3 + 4 | 0; //@line 2887
     HEAP32[$83 >> 2] = $2; //@line 2888
     $84 = $ReallocAsyncCtx3 + 8 | 0; //@line 2889
     HEAP32[$84 >> 2] = $85; //@line 2890
     $86 = $ReallocAsyncCtx3 + 12 | 0; //@line 2891
     HEAP32[$86 >> 2] = $4; //@line 2892
     $87 = $ReallocAsyncCtx3 + 16 | 0; //@line 2893
     HEAP32[$87 >> 2] = $$1202$in$i; //@line 2894
     $88 = $ReallocAsyncCtx3 + 20 | 0; //@line 2895
     HEAP32[$88 >> 2] = $6; //@line 2896
     $89 = $ReallocAsyncCtx3 + 24 | 0; //@line 2897
     HEAP32[$89 >> 2] = $8; //@line 2898
     $90 = $ReallocAsyncCtx3 + 28 | 0; //@line 2899
     HEAP32[$90 >> 2] = $10; //@line 2900
     $91 = $ReallocAsyncCtx3 + 32 | 0; //@line 2901
     HEAP32[$91 >> 2] = $12; //@line 2902
     $92 = $ReallocAsyncCtx3 + 36 | 0; //@line 2903
     HEAP32[$92 >> 2] = $35; //@line 2904
     $93 = $ReallocAsyncCtx3 + 40 | 0; //@line 2905
     HEAP16[$93 >> 1] = $trunc$i; //@line 2906
     $94 = $ReallocAsyncCtx3 + 42 | 0; //@line 2907
     HEAP16[$94 >> 1] = $$1202$i; //@line 2908
     $95 = $ReallocAsyncCtx3 + 44 | 0; //@line 2909
     HEAP32[$95 >> 2] = $32; //@line 2910
     $96 = $ReallocAsyncCtx3 + 48 | 0; //@line 2911
     HEAP32[$96 >> 2] = $31; //@line 2912
     $97 = $ReallocAsyncCtx3 + 52 | 0; //@line 2913
     HEAP32[$97 >> 2] = $33; //@line 2914
     $98 = $ReallocAsyncCtx3 + 56 | 0; //@line 2915
     HEAP32[$98 >> 2] = $4; //@line 2916
     $99 = $ReallocAsyncCtx3 + 60 | 0; //@line 2917
     HEAP32[$99 >> 2] = $$0208$i; //@line 2918
     $100 = $ReallocAsyncCtx3 + 64 | 0; //@line 2919
     HEAP32[$100 >> 2] = $35; //@line 2920
     $101 = $ReallocAsyncCtx3 + 68 | 0; //@line 2921
     HEAP32[$101 >> 2] = $20; //@line 2922
     $102 = $ReallocAsyncCtx3 + 72 | 0; //@line 2923
     HEAP16[$102 >> 1] = $78; //@line 2924
     $103 = $ReallocAsyncCtx3 + 76 | 0; //@line 2925
     HEAP32[$103 >> 2] = $36; //@line 2926
     $104 = $ReallocAsyncCtx3 + 80 | 0; //@line 2927
     HEAP32[$104 >> 2] = $37; //@line 2928
     sp = STACKTOP; //@line 2929
     return;
    }
    HEAP32[___async_retval >> 2] = $82; //@line 2933
    ___async_unwind = 0; //@line 2934
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 2935
    $83 = $ReallocAsyncCtx3 + 4 | 0; //@line 2936
    HEAP32[$83 >> 2] = $2; //@line 2937
    $84 = $ReallocAsyncCtx3 + 8 | 0; //@line 2938
    HEAP32[$84 >> 2] = $85; //@line 2939
    $86 = $ReallocAsyncCtx3 + 12 | 0; //@line 2940
    HEAP32[$86 >> 2] = $4; //@line 2941
    $87 = $ReallocAsyncCtx3 + 16 | 0; //@line 2942
    HEAP32[$87 >> 2] = $$1202$in$i; //@line 2943
    $88 = $ReallocAsyncCtx3 + 20 | 0; //@line 2944
    HEAP32[$88 >> 2] = $6; //@line 2945
    $89 = $ReallocAsyncCtx3 + 24 | 0; //@line 2946
    HEAP32[$89 >> 2] = $8; //@line 2947
    $90 = $ReallocAsyncCtx3 + 28 | 0; //@line 2948
    HEAP32[$90 >> 2] = $10; //@line 2949
    $91 = $ReallocAsyncCtx3 + 32 | 0; //@line 2950
    HEAP32[$91 >> 2] = $12; //@line 2951
    $92 = $ReallocAsyncCtx3 + 36 | 0; //@line 2952
    HEAP32[$92 >> 2] = $35; //@line 2953
    $93 = $ReallocAsyncCtx3 + 40 | 0; //@line 2954
    HEAP16[$93 >> 1] = $trunc$i; //@line 2955
    $94 = $ReallocAsyncCtx3 + 42 | 0; //@line 2956
    HEAP16[$94 >> 1] = $$1202$i; //@line 2957
    $95 = $ReallocAsyncCtx3 + 44 | 0; //@line 2958
    HEAP32[$95 >> 2] = $32; //@line 2959
    $96 = $ReallocAsyncCtx3 + 48 | 0; //@line 2960
    HEAP32[$96 >> 2] = $31; //@line 2961
    $97 = $ReallocAsyncCtx3 + 52 | 0; //@line 2962
    HEAP32[$97 >> 2] = $33; //@line 2963
    $98 = $ReallocAsyncCtx3 + 56 | 0; //@line 2964
    HEAP32[$98 >> 2] = $4; //@line 2965
    $99 = $ReallocAsyncCtx3 + 60 | 0; //@line 2966
    HEAP32[$99 >> 2] = $$0208$i; //@line 2967
    $100 = $ReallocAsyncCtx3 + 64 | 0; //@line 2968
    HEAP32[$100 >> 2] = $35; //@line 2969
    $101 = $ReallocAsyncCtx3 + 68 | 0; //@line 2970
    HEAP32[$101 >> 2] = $20; //@line 2971
    $102 = $ReallocAsyncCtx3 + 72 | 0; //@line 2972
    HEAP16[$102 >> 1] = $78; //@line 2973
    $103 = $ReallocAsyncCtx3 + 76 | 0; //@line 2974
    HEAP32[$103 >> 2] = $36; //@line 2975
    $104 = $ReallocAsyncCtx3 + 80 | 0; //@line 2976
    HEAP32[$104 >> 2] = $37; //@line 2977
    sp = STACKTOP; //@line 2978
    return;
   } else if ((label | 0) == 30) {
    $134 = $$1202$in$i & 65535; //@line 2982
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $137 = HEAP32[$35 >> 2] | 0; //@line 2988
    if (HEAP32[$137 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$137 + 2 >> 1] = $$1202$i; //@line 2996
    $142 = $85 + 1 | 0; //@line 2997
    HEAP32[$4 >> 2] = $142; //@line 2998
    $143 = HEAP32[$10 >> 2] | 0; //@line 2999
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 3000
    $144 = FUNCTION_TABLE_ii[$143 & 15]($$1202$i) | 0; //@line 3001
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 3004
     $145 = $ReallocAsyncCtx4 + 4 | 0; //@line 3005
     HEAP32[$145 >> 2] = $2; //@line 3006
     $146 = $ReallocAsyncCtx4 + 8 | 0; //@line 3007
     HEAP32[$146 >> 2] = $4; //@line 3008
     $147 = $ReallocAsyncCtx4 + 12 | 0; //@line 3009
     HEAP32[$147 >> 2] = $6; //@line 3010
     $148 = $ReallocAsyncCtx4 + 16 | 0; //@line 3011
     HEAP32[$148 >> 2] = $8; //@line 3012
     $149 = $ReallocAsyncCtx4 + 20 | 0; //@line 3013
     HEAP32[$149 >> 2] = $10; //@line 3014
     $150 = $ReallocAsyncCtx4 + 24 | 0; //@line 3015
     HEAP32[$150 >> 2] = $12; //@line 3016
     $151 = $ReallocAsyncCtx4 + 28 | 0; //@line 3017
     HEAP32[$151 >> 2] = $35; //@line 3018
     $152 = $ReallocAsyncCtx4 + 32 | 0; //@line 3019
     HEAP32[$152 >> 2] = $32; //@line 3020
     $153 = $ReallocAsyncCtx4 + 36 | 0; //@line 3021
     HEAP32[$153 >> 2] = $31; //@line 3022
     $154 = $ReallocAsyncCtx4 + 40 | 0; //@line 3023
     HEAP32[$154 >> 2] = $33; //@line 3024
     $155 = $ReallocAsyncCtx4 + 44 | 0; //@line 3025
     HEAP32[$155 >> 2] = $4; //@line 3026
     $156 = $ReallocAsyncCtx4 + 48 | 0; //@line 3027
     HEAP32[$156 >> 2] = $35; //@line 3028
     $157 = $ReallocAsyncCtx4 + 52 | 0; //@line 3029
     HEAP32[$157 >> 2] = $20; //@line 3030
     $158 = $ReallocAsyncCtx4 + 56 | 0; //@line 3031
     HEAP32[$158 >> 2] = $36; //@line 3032
     $159 = $ReallocAsyncCtx4 + 60 | 0; //@line 3033
     HEAP32[$159 >> 2] = $37; //@line 3034
     $160 = $ReallocAsyncCtx4 + 64 | 0; //@line 3035
     HEAP32[$160 >> 2] = $$0208$i; //@line 3036
     $161 = $ReallocAsyncCtx4 + 68 | 0; //@line 3037
     HEAP32[$161 >> 2] = $142; //@line 3038
     $162 = $ReallocAsyncCtx4 + 72 | 0; //@line 3039
     HEAP32[$162 >> 2] = $134; //@line 3040
     sp = STACKTOP; //@line 3041
     return;
    }
    HEAP32[___async_retval >> 2] = $144; //@line 3045
    ___async_unwind = 0; //@line 3046
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 3047
    $145 = $ReallocAsyncCtx4 + 4 | 0; //@line 3048
    HEAP32[$145 >> 2] = $2; //@line 3049
    $146 = $ReallocAsyncCtx4 + 8 | 0; //@line 3050
    HEAP32[$146 >> 2] = $4; //@line 3051
    $147 = $ReallocAsyncCtx4 + 12 | 0; //@line 3052
    HEAP32[$147 >> 2] = $6; //@line 3053
    $148 = $ReallocAsyncCtx4 + 16 | 0; //@line 3054
    HEAP32[$148 >> 2] = $8; //@line 3055
    $149 = $ReallocAsyncCtx4 + 20 | 0; //@line 3056
    HEAP32[$149 >> 2] = $10; //@line 3057
    $150 = $ReallocAsyncCtx4 + 24 | 0; //@line 3058
    HEAP32[$150 >> 2] = $12; //@line 3059
    $151 = $ReallocAsyncCtx4 + 28 | 0; //@line 3060
    HEAP32[$151 >> 2] = $35; //@line 3061
    $152 = $ReallocAsyncCtx4 + 32 | 0; //@line 3062
    HEAP32[$152 >> 2] = $32; //@line 3063
    $153 = $ReallocAsyncCtx4 + 36 | 0; //@line 3064
    HEAP32[$153 >> 2] = $31; //@line 3065
    $154 = $ReallocAsyncCtx4 + 40 | 0; //@line 3066
    HEAP32[$154 >> 2] = $33; //@line 3067
    $155 = $ReallocAsyncCtx4 + 44 | 0; //@line 3068
    HEAP32[$155 >> 2] = $4; //@line 3069
    $156 = $ReallocAsyncCtx4 + 48 | 0; //@line 3070
    HEAP32[$156 >> 2] = $35; //@line 3071
    $157 = $ReallocAsyncCtx4 + 52 | 0; //@line 3072
    HEAP32[$157 >> 2] = $20; //@line 3073
    $158 = $ReallocAsyncCtx4 + 56 | 0; //@line 3074
    HEAP32[$158 >> 2] = $36; //@line 3075
    $159 = $ReallocAsyncCtx4 + 60 | 0; //@line 3076
    HEAP32[$159 >> 2] = $37; //@line 3077
    $160 = $ReallocAsyncCtx4 + 64 | 0; //@line 3078
    HEAP32[$160 >> 2] = $$0208$i; //@line 3079
    $161 = $ReallocAsyncCtx4 + 68 | 0; //@line 3080
    HEAP32[$161 >> 2] = $142; //@line 3081
    $162 = $ReallocAsyncCtx4 + 72 | 0; //@line 3082
    HEAP32[$162 >> 2] = $134; //@line 3083
    sp = STACKTOP; //@line 3084
    return;
   } else if ((label | 0) == 35) {
    $164 = HEAP32[$35 >> 2] | 0; //@line 3088
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 3090
    $166 = _sn_coap_parser_options_parse_multiple_options($20, $4, $78, $164 + 48 | 0, $164, 4, $$1202$i) | 0; //@line 3091
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 3094
     $167 = $ReallocAsyncCtx10 + 4 | 0; //@line 3095
     HEAP32[$167 >> 2] = $2; //@line 3096
     $168 = $ReallocAsyncCtx10 + 8 | 0; //@line 3097
     HEAP32[$168 >> 2] = $4; //@line 3098
     $169 = $ReallocAsyncCtx10 + 12 | 0; //@line 3099
     HEAP32[$169 >> 2] = $6; //@line 3100
     $170 = $ReallocAsyncCtx10 + 16 | 0; //@line 3101
     HEAP32[$170 >> 2] = $8; //@line 3102
     $171 = $ReallocAsyncCtx10 + 20 | 0; //@line 3103
     HEAP32[$171 >> 2] = $10; //@line 3104
     $172 = $ReallocAsyncCtx10 + 24 | 0; //@line 3105
     HEAP32[$172 >> 2] = $12; //@line 3106
     $173 = $ReallocAsyncCtx10 + 28 | 0; //@line 3107
     HEAP32[$173 >> 2] = $35; //@line 3108
     $174 = $ReallocAsyncCtx10 + 32 | 0; //@line 3109
     HEAP32[$174 >> 2] = $32; //@line 3110
     $175 = $ReallocAsyncCtx10 + 36 | 0; //@line 3111
     HEAP32[$175 >> 2] = $31; //@line 3112
     $176 = $ReallocAsyncCtx10 + 40 | 0; //@line 3113
     HEAP32[$176 >> 2] = $33; //@line 3114
     $177 = $ReallocAsyncCtx10 + 44 | 0; //@line 3115
     HEAP32[$177 >> 2] = $4; //@line 3116
     $178 = $ReallocAsyncCtx10 + 48 | 0; //@line 3117
     HEAP32[$178 >> 2] = $35; //@line 3118
     $179 = $ReallocAsyncCtx10 + 52 | 0; //@line 3119
     HEAP32[$179 >> 2] = $20; //@line 3120
     $180 = $ReallocAsyncCtx10 + 56 | 0; //@line 3121
     HEAP32[$180 >> 2] = $36; //@line 3122
     $181 = $ReallocAsyncCtx10 + 60 | 0; //@line 3123
     HEAP32[$181 >> 2] = $37; //@line 3124
     $182 = $ReallocAsyncCtx10 + 64 | 0; //@line 3125
     HEAP32[$182 >> 2] = $$0208$i; //@line 3126
     sp = STACKTOP; //@line 3127
     return;
    }
    HEAP8[___async_retval >> 0] = $166; //@line 3131
    ___async_unwind = 0; //@line 3132
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 3133
    $167 = $ReallocAsyncCtx10 + 4 | 0; //@line 3134
    HEAP32[$167 >> 2] = $2; //@line 3135
    $168 = $ReallocAsyncCtx10 + 8 | 0; //@line 3136
    HEAP32[$168 >> 2] = $4; //@line 3137
    $169 = $ReallocAsyncCtx10 + 12 | 0; //@line 3138
    HEAP32[$169 >> 2] = $6; //@line 3139
    $170 = $ReallocAsyncCtx10 + 16 | 0; //@line 3140
    HEAP32[$170 >> 2] = $8; //@line 3141
    $171 = $ReallocAsyncCtx10 + 20 | 0; //@line 3142
    HEAP32[$171 >> 2] = $10; //@line 3143
    $172 = $ReallocAsyncCtx10 + 24 | 0; //@line 3144
    HEAP32[$172 >> 2] = $12; //@line 3145
    $173 = $ReallocAsyncCtx10 + 28 | 0; //@line 3146
    HEAP32[$173 >> 2] = $35; //@line 3147
    $174 = $ReallocAsyncCtx10 + 32 | 0; //@line 3148
    HEAP32[$174 >> 2] = $32; //@line 3149
    $175 = $ReallocAsyncCtx10 + 36 | 0; //@line 3150
    HEAP32[$175 >> 2] = $31; //@line 3151
    $176 = $ReallocAsyncCtx10 + 40 | 0; //@line 3152
    HEAP32[$176 >> 2] = $33; //@line 3153
    $177 = $ReallocAsyncCtx10 + 44 | 0; //@line 3154
    HEAP32[$177 >> 2] = $4; //@line 3155
    $178 = $ReallocAsyncCtx10 + 48 | 0; //@line 3156
    HEAP32[$178 >> 2] = $35; //@line 3157
    $179 = $ReallocAsyncCtx10 + 52 | 0; //@line 3158
    HEAP32[$179 >> 2] = $20; //@line 3159
    $180 = $ReallocAsyncCtx10 + 56 | 0; //@line 3160
    HEAP32[$180 >> 2] = $36; //@line 3161
    $181 = $ReallocAsyncCtx10 + 60 | 0; //@line 3162
    HEAP32[$181 >> 2] = $37; //@line 3163
    $182 = $ReallocAsyncCtx10 + 64 | 0; //@line 3164
    HEAP32[$182 >> 2] = $$0208$i; //@line 3165
    sp = STACKTOP; //@line 3166
    return;
   } else if ((label | 0) == 38) {
    $184 = $$1202$in$i & 65535; //@line 3170
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $187 = HEAP32[$35 >> 2] | 0; //@line 3176
    if (HEAP32[$187 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$187 + 4 >> 1] = $$1202$i; //@line 3184
    $192 = $85 + 1 | 0; //@line 3185
    HEAP32[$4 >> 2] = $192; //@line 3186
    $193 = HEAP32[$10 >> 2] | 0; //@line 3187
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 3188
    $194 = FUNCTION_TABLE_ii[$193 & 15]($$1202$i) | 0; //@line 3189
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 3192
     $195 = $ReallocAsyncCtx5 + 4 | 0; //@line 3193
     HEAP32[$195 >> 2] = $2; //@line 3194
     $196 = $ReallocAsyncCtx5 + 8 | 0; //@line 3195
     HEAP32[$196 >> 2] = $4; //@line 3196
     $197 = $ReallocAsyncCtx5 + 12 | 0; //@line 3197
     HEAP32[$197 >> 2] = $6; //@line 3198
     $198 = $ReallocAsyncCtx5 + 16 | 0; //@line 3199
     HEAP32[$198 >> 2] = $8; //@line 3200
     $199 = $ReallocAsyncCtx5 + 20 | 0; //@line 3201
     HEAP32[$199 >> 2] = $10; //@line 3202
     $200 = $ReallocAsyncCtx5 + 24 | 0; //@line 3203
     HEAP32[$200 >> 2] = $12; //@line 3204
     $201 = $ReallocAsyncCtx5 + 28 | 0; //@line 3205
     HEAP32[$201 >> 2] = $35; //@line 3206
     $202 = $ReallocAsyncCtx5 + 32 | 0; //@line 3207
     HEAP32[$202 >> 2] = $32; //@line 3208
     $203 = $ReallocAsyncCtx5 + 36 | 0; //@line 3209
     HEAP32[$203 >> 2] = $31; //@line 3210
     $204 = $ReallocAsyncCtx5 + 40 | 0; //@line 3211
     HEAP32[$204 >> 2] = $33; //@line 3212
     $205 = $ReallocAsyncCtx5 + 44 | 0; //@line 3213
     HEAP32[$205 >> 2] = $4; //@line 3214
     $206 = $ReallocAsyncCtx5 + 48 | 0; //@line 3215
     HEAP32[$206 >> 2] = $35; //@line 3216
     $207 = $ReallocAsyncCtx5 + 52 | 0; //@line 3217
     HEAP32[$207 >> 2] = $20; //@line 3218
     $208 = $ReallocAsyncCtx5 + 56 | 0; //@line 3219
     HEAP32[$208 >> 2] = $36; //@line 3220
     $209 = $ReallocAsyncCtx5 + 60 | 0; //@line 3221
     HEAP32[$209 >> 2] = $37; //@line 3222
     $210 = $ReallocAsyncCtx5 + 64 | 0; //@line 3223
     HEAP32[$210 >> 2] = $$0208$i; //@line 3224
     $211 = $ReallocAsyncCtx5 + 68 | 0; //@line 3225
     HEAP32[$211 >> 2] = $192; //@line 3226
     $212 = $ReallocAsyncCtx5 + 72 | 0; //@line 3227
     HEAP32[$212 >> 2] = $184; //@line 3228
     sp = STACKTOP; //@line 3229
     return;
    }
    HEAP32[___async_retval >> 2] = $194; //@line 3233
    ___async_unwind = 0; //@line 3234
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 3235
    $195 = $ReallocAsyncCtx5 + 4 | 0; //@line 3236
    HEAP32[$195 >> 2] = $2; //@line 3237
    $196 = $ReallocAsyncCtx5 + 8 | 0; //@line 3238
    HEAP32[$196 >> 2] = $4; //@line 3239
    $197 = $ReallocAsyncCtx5 + 12 | 0; //@line 3240
    HEAP32[$197 >> 2] = $6; //@line 3241
    $198 = $ReallocAsyncCtx5 + 16 | 0; //@line 3242
    HEAP32[$198 >> 2] = $8; //@line 3243
    $199 = $ReallocAsyncCtx5 + 20 | 0; //@line 3244
    HEAP32[$199 >> 2] = $10; //@line 3245
    $200 = $ReallocAsyncCtx5 + 24 | 0; //@line 3246
    HEAP32[$200 >> 2] = $12; //@line 3247
    $201 = $ReallocAsyncCtx5 + 28 | 0; //@line 3248
    HEAP32[$201 >> 2] = $35; //@line 3249
    $202 = $ReallocAsyncCtx5 + 32 | 0; //@line 3250
    HEAP32[$202 >> 2] = $32; //@line 3251
    $203 = $ReallocAsyncCtx5 + 36 | 0; //@line 3252
    HEAP32[$203 >> 2] = $31; //@line 3253
    $204 = $ReallocAsyncCtx5 + 40 | 0; //@line 3254
    HEAP32[$204 >> 2] = $33; //@line 3255
    $205 = $ReallocAsyncCtx5 + 44 | 0; //@line 3256
    HEAP32[$205 >> 2] = $4; //@line 3257
    $206 = $ReallocAsyncCtx5 + 48 | 0; //@line 3258
    HEAP32[$206 >> 2] = $35; //@line 3259
    $207 = $ReallocAsyncCtx5 + 52 | 0; //@line 3260
    HEAP32[$207 >> 2] = $20; //@line 3261
    $208 = $ReallocAsyncCtx5 + 56 | 0; //@line 3262
    HEAP32[$208 >> 2] = $36; //@line 3263
    $209 = $ReallocAsyncCtx5 + 60 | 0; //@line 3264
    HEAP32[$209 >> 2] = $37; //@line 3265
    $210 = $ReallocAsyncCtx5 + 64 | 0; //@line 3266
    HEAP32[$210 >> 2] = $$0208$i; //@line 3267
    $211 = $ReallocAsyncCtx5 + 68 | 0; //@line 3268
    HEAP32[$211 >> 2] = $192; //@line 3269
    $212 = $ReallocAsyncCtx5 + 72 | 0; //@line 3270
    HEAP32[$212 >> 2] = $184; //@line 3271
    sp = STACKTOP; //@line 3272
    return;
   } else if ((label | 0) == 43) {
    $214 = HEAP32[$35 >> 2] | 0; //@line 3276
    $215 = $214 + 56 | 0; //@line 3277
    if (HEAP32[$215 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 3284
    $219 = _sn_coap_parser_options_parse_multiple_options($20, $4, $78, $215, $214 + 6 | 0, 8, $$1202$i) | 0; //@line 3285
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 3288
     $220 = $ReallocAsyncCtx9 + 4 | 0; //@line 3289
     HEAP32[$220 >> 2] = $2; //@line 3290
     $221 = $ReallocAsyncCtx9 + 8 | 0; //@line 3291
     HEAP32[$221 >> 2] = $4; //@line 3292
     $222 = $ReallocAsyncCtx9 + 12 | 0; //@line 3293
     HEAP32[$222 >> 2] = $6; //@line 3294
     $223 = $ReallocAsyncCtx9 + 16 | 0; //@line 3295
     HEAP32[$223 >> 2] = $8; //@line 3296
     $224 = $ReallocAsyncCtx9 + 20 | 0; //@line 3297
     HEAP32[$224 >> 2] = $10; //@line 3298
     $225 = $ReallocAsyncCtx9 + 24 | 0; //@line 3299
     HEAP32[$225 >> 2] = $12; //@line 3300
     $226 = $ReallocAsyncCtx9 + 28 | 0; //@line 3301
     HEAP32[$226 >> 2] = $35; //@line 3302
     $227 = $ReallocAsyncCtx9 + 32 | 0; //@line 3303
     HEAP32[$227 >> 2] = $32; //@line 3304
     $228 = $ReallocAsyncCtx9 + 36 | 0; //@line 3305
     HEAP32[$228 >> 2] = $31; //@line 3306
     $229 = $ReallocAsyncCtx9 + 40 | 0; //@line 3307
     HEAP32[$229 >> 2] = $33; //@line 3308
     $230 = $ReallocAsyncCtx9 + 44 | 0; //@line 3309
     HEAP32[$230 >> 2] = $4; //@line 3310
     $231 = $ReallocAsyncCtx9 + 48 | 0; //@line 3311
     HEAP32[$231 >> 2] = $35; //@line 3312
     $232 = $ReallocAsyncCtx9 + 52 | 0; //@line 3313
     HEAP32[$232 >> 2] = $20; //@line 3314
     $233 = $ReallocAsyncCtx9 + 56 | 0; //@line 3315
     HEAP32[$233 >> 2] = $36; //@line 3316
     $234 = $ReallocAsyncCtx9 + 60 | 0; //@line 3317
     HEAP32[$234 >> 2] = $37; //@line 3318
     $235 = $ReallocAsyncCtx9 + 64 | 0; //@line 3319
     HEAP32[$235 >> 2] = $$0208$i; //@line 3320
     sp = STACKTOP; //@line 3321
     return;
    }
    HEAP8[___async_retval >> 0] = $219; //@line 3325
    ___async_unwind = 0; //@line 3326
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 3327
    $220 = $ReallocAsyncCtx9 + 4 | 0; //@line 3328
    HEAP32[$220 >> 2] = $2; //@line 3329
    $221 = $ReallocAsyncCtx9 + 8 | 0; //@line 3330
    HEAP32[$221 >> 2] = $4; //@line 3331
    $222 = $ReallocAsyncCtx9 + 12 | 0; //@line 3332
    HEAP32[$222 >> 2] = $6; //@line 3333
    $223 = $ReallocAsyncCtx9 + 16 | 0; //@line 3334
    HEAP32[$223 >> 2] = $8; //@line 3335
    $224 = $ReallocAsyncCtx9 + 20 | 0; //@line 3336
    HEAP32[$224 >> 2] = $10; //@line 3337
    $225 = $ReallocAsyncCtx9 + 24 | 0; //@line 3338
    HEAP32[$225 >> 2] = $12; //@line 3339
    $226 = $ReallocAsyncCtx9 + 28 | 0; //@line 3340
    HEAP32[$226 >> 2] = $35; //@line 3341
    $227 = $ReallocAsyncCtx9 + 32 | 0; //@line 3342
    HEAP32[$227 >> 2] = $32; //@line 3343
    $228 = $ReallocAsyncCtx9 + 36 | 0; //@line 3344
    HEAP32[$228 >> 2] = $31; //@line 3345
    $229 = $ReallocAsyncCtx9 + 40 | 0; //@line 3346
    HEAP32[$229 >> 2] = $33; //@line 3347
    $230 = $ReallocAsyncCtx9 + 44 | 0; //@line 3348
    HEAP32[$230 >> 2] = $4; //@line 3349
    $231 = $ReallocAsyncCtx9 + 48 | 0; //@line 3350
    HEAP32[$231 >> 2] = $35; //@line 3351
    $232 = $ReallocAsyncCtx9 + 52 | 0; //@line 3352
    HEAP32[$232 >> 2] = $20; //@line 3353
    $233 = $ReallocAsyncCtx9 + 56 | 0; //@line 3354
    HEAP32[$233 >> 2] = $36; //@line 3355
    $234 = $ReallocAsyncCtx9 + 60 | 0; //@line 3356
    HEAP32[$234 >> 2] = $37; //@line 3357
    $235 = $ReallocAsyncCtx9 + 64 | 0; //@line 3358
    HEAP32[$235 >> 2] = $$0208$i; //@line 3359
    sp = STACKTOP; //@line 3360
    return;
   } else if ((label | 0) == 52) {
    $253 = HEAP32[$35 >> 2] | 0; //@line 3364
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 3367
    $256 = _sn_coap_parser_options_parse_multiple_options($20, $4, $78, $253 + 60 | 0, $253 + 8 | 0, 20, $$1202$i) | 0; //@line 3368
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 3371
     $257 = $ReallocAsyncCtx8 + 4 | 0; //@line 3372
     HEAP32[$257 >> 2] = $2; //@line 3373
     $258 = $ReallocAsyncCtx8 + 8 | 0; //@line 3374
     HEAP32[$258 >> 2] = $4; //@line 3375
     $259 = $ReallocAsyncCtx8 + 12 | 0; //@line 3376
     HEAP32[$259 >> 2] = $6; //@line 3377
     $260 = $ReallocAsyncCtx8 + 16 | 0; //@line 3378
     HEAP32[$260 >> 2] = $8; //@line 3379
     $261 = $ReallocAsyncCtx8 + 20 | 0; //@line 3380
     HEAP32[$261 >> 2] = $10; //@line 3381
     $262 = $ReallocAsyncCtx8 + 24 | 0; //@line 3382
     HEAP32[$262 >> 2] = $12; //@line 3383
     $263 = $ReallocAsyncCtx8 + 28 | 0; //@line 3384
     HEAP32[$263 >> 2] = $35; //@line 3385
     $264 = $ReallocAsyncCtx8 + 32 | 0; //@line 3386
     HEAP32[$264 >> 2] = $32; //@line 3387
     $265 = $ReallocAsyncCtx8 + 36 | 0; //@line 3388
     HEAP32[$265 >> 2] = $31; //@line 3389
     $266 = $ReallocAsyncCtx8 + 40 | 0; //@line 3390
     HEAP32[$266 >> 2] = $33; //@line 3391
     $267 = $ReallocAsyncCtx8 + 44 | 0; //@line 3392
     HEAP32[$267 >> 2] = $4; //@line 3393
     $268 = $ReallocAsyncCtx8 + 48 | 0; //@line 3394
     HEAP32[$268 >> 2] = $35; //@line 3395
     $269 = $ReallocAsyncCtx8 + 52 | 0; //@line 3396
     HEAP32[$269 >> 2] = $20; //@line 3397
     $270 = $ReallocAsyncCtx8 + 56 | 0; //@line 3398
     HEAP32[$270 >> 2] = $36; //@line 3399
     $271 = $ReallocAsyncCtx8 + 60 | 0; //@line 3400
     HEAP32[$271 >> 2] = $37; //@line 3401
     $272 = $ReallocAsyncCtx8 + 64 | 0; //@line 3402
     HEAP32[$272 >> 2] = $$0208$i; //@line 3403
     sp = STACKTOP; //@line 3404
     return;
    }
    HEAP8[___async_retval >> 0] = $256; //@line 3408
    ___async_unwind = 0; //@line 3409
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 3410
    $257 = $ReallocAsyncCtx8 + 4 | 0; //@line 3411
    HEAP32[$257 >> 2] = $2; //@line 3412
    $258 = $ReallocAsyncCtx8 + 8 | 0; //@line 3413
    HEAP32[$258 >> 2] = $4; //@line 3414
    $259 = $ReallocAsyncCtx8 + 12 | 0; //@line 3415
    HEAP32[$259 >> 2] = $6; //@line 3416
    $260 = $ReallocAsyncCtx8 + 16 | 0; //@line 3417
    HEAP32[$260 >> 2] = $8; //@line 3418
    $261 = $ReallocAsyncCtx8 + 20 | 0; //@line 3419
    HEAP32[$261 >> 2] = $10; //@line 3420
    $262 = $ReallocAsyncCtx8 + 24 | 0; //@line 3421
    HEAP32[$262 >> 2] = $12; //@line 3422
    $263 = $ReallocAsyncCtx8 + 28 | 0; //@line 3423
    HEAP32[$263 >> 2] = $35; //@line 3424
    $264 = $ReallocAsyncCtx8 + 32 | 0; //@line 3425
    HEAP32[$264 >> 2] = $32; //@line 3426
    $265 = $ReallocAsyncCtx8 + 36 | 0; //@line 3427
    HEAP32[$265 >> 2] = $31; //@line 3428
    $266 = $ReallocAsyncCtx8 + 40 | 0; //@line 3429
    HEAP32[$266 >> 2] = $33; //@line 3430
    $267 = $ReallocAsyncCtx8 + 44 | 0; //@line 3431
    HEAP32[$267 >> 2] = $4; //@line 3432
    $268 = $ReallocAsyncCtx8 + 48 | 0; //@line 3433
    HEAP32[$268 >> 2] = $35; //@line 3434
    $269 = $ReallocAsyncCtx8 + 52 | 0; //@line 3435
    HEAP32[$269 >> 2] = $20; //@line 3436
    $270 = $ReallocAsyncCtx8 + 56 | 0; //@line 3437
    HEAP32[$270 >> 2] = $36; //@line 3438
    $271 = $ReallocAsyncCtx8 + 60 | 0; //@line 3439
    HEAP32[$271 >> 2] = $37; //@line 3440
    $272 = $ReallocAsyncCtx8 + 64 | 0; //@line 3441
    HEAP32[$272 >> 2] = $$0208$i; //@line 3442
    sp = STACKTOP; //@line 3443
    return;
   } else if ((label | 0) == 55) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 3447
    $274 = _sn_coap_parser_options_parse_multiple_options($20, $4, $78, $36, $37, 11, $$1202$i) | 0; //@line 3448
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 3451
     $275 = $ReallocAsyncCtx7 + 4 | 0; //@line 3452
     HEAP32[$275 >> 2] = $2; //@line 3453
     $276 = $ReallocAsyncCtx7 + 8 | 0; //@line 3454
     HEAP32[$276 >> 2] = $4; //@line 3455
     $277 = $ReallocAsyncCtx7 + 12 | 0; //@line 3456
     HEAP32[$277 >> 2] = $6; //@line 3457
     $278 = $ReallocAsyncCtx7 + 16 | 0; //@line 3458
     HEAP32[$278 >> 2] = $8; //@line 3459
     $279 = $ReallocAsyncCtx7 + 20 | 0; //@line 3460
     HEAP32[$279 >> 2] = $10; //@line 3461
     $280 = $ReallocAsyncCtx7 + 24 | 0; //@line 3462
     HEAP32[$280 >> 2] = $12; //@line 3463
     $281 = $ReallocAsyncCtx7 + 28 | 0; //@line 3464
     HEAP32[$281 >> 2] = $35; //@line 3465
     $282 = $ReallocAsyncCtx7 + 32 | 0; //@line 3466
     HEAP32[$282 >> 2] = $32; //@line 3467
     $283 = $ReallocAsyncCtx7 + 36 | 0; //@line 3468
     HEAP32[$283 >> 2] = $31; //@line 3469
     $284 = $ReallocAsyncCtx7 + 40 | 0; //@line 3470
     HEAP32[$284 >> 2] = $33; //@line 3471
     $285 = $ReallocAsyncCtx7 + 44 | 0; //@line 3472
     HEAP32[$285 >> 2] = $4; //@line 3473
     $286 = $ReallocAsyncCtx7 + 48 | 0; //@line 3474
     HEAP32[$286 >> 2] = $35; //@line 3475
     $287 = $ReallocAsyncCtx7 + 52 | 0; //@line 3476
     HEAP32[$287 >> 2] = $20; //@line 3477
     $288 = $ReallocAsyncCtx7 + 56 | 0; //@line 3478
     HEAP32[$288 >> 2] = $36; //@line 3479
     $289 = $ReallocAsyncCtx7 + 60 | 0; //@line 3480
     HEAP32[$289 >> 2] = $37; //@line 3481
     $290 = $ReallocAsyncCtx7 + 64 | 0; //@line 3482
     HEAP32[$290 >> 2] = $$0208$i; //@line 3483
     sp = STACKTOP; //@line 3484
     return;
    }
    HEAP8[___async_retval >> 0] = $274; //@line 3488
    ___async_unwind = 0; //@line 3489
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 3490
    $275 = $ReallocAsyncCtx7 + 4 | 0; //@line 3491
    HEAP32[$275 >> 2] = $2; //@line 3492
    $276 = $ReallocAsyncCtx7 + 8 | 0; //@line 3493
    HEAP32[$276 >> 2] = $4; //@line 3494
    $277 = $ReallocAsyncCtx7 + 12 | 0; //@line 3495
    HEAP32[$277 >> 2] = $6; //@line 3496
    $278 = $ReallocAsyncCtx7 + 16 | 0; //@line 3497
    HEAP32[$278 >> 2] = $8; //@line 3498
    $279 = $ReallocAsyncCtx7 + 20 | 0; //@line 3499
    HEAP32[$279 >> 2] = $10; //@line 3500
    $280 = $ReallocAsyncCtx7 + 24 | 0; //@line 3501
    HEAP32[$280 >> 2] = $12; //@line 3502
    $281 = $ReallocAsyncCtx7 + 28 | 0; //@line 3503
    HEAP32[$281 >> 2] = $35; //@line 3504
    $282 = $ReallocAsyncCtx7 + 32 | 0; //@line 3505
    HEAP32[$282 >> 2] = $32; //@line 3506
    $283 = $ReallocAsyncCtx7 + 36 | 0; //@line 3507
    HEAP32[$283 >> 2] = $31; //@line 3508
    $284 = $ReallocAsyncCtx7 + 40 | 0; //@line 3509
    HEAP32[$284 >> 2] = $33; //@line 3510
    $285 = $ReallocAsyncCtx7 + 44 | 0; //@line 3511
    HEAP32[$285 >> 2] = $4; //@line 3512
    $286 = $ReallocAsyncCtx7 + 48 | 0; //@line 3513
    HEAP32[$286 >> 2] = $35; //@line 3514
    $287 = $ReallocAsyncCtx7 + 52 | 0; //@line 3515
    HEAP32[$287 >> 2] = $20; //@line 3516
    $288 = $ReallocAsyncCtx7 + 56 | 0; //@line 3517
    HEAP32[$288 >> 2] = $36; //@line 3518
    $289 = $ReallocAsyncCtx7 + 60 | 0; //@line 3519
    HEAP32[$289 >> 2] = $37; //@line 3520
    $290 = $ReallocAsyncCtx7 + 64 | 0; //@line 3521
    HEAP32[$290 >> 2] = $$0208$i; //@line 3522
    sp = STACKTOP; //@line 3523
    return;
   } else if ((label | 0) == 63) {
    $308 = HEAP32[$35 >> 2] | 0; //@line 3527
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 3530
    $311 = _sn_coap_parser_options_parse_multiple_options($20, $4, $78, $308 + 64 | 0, $308 + 10 | 0, 15, $$1202$i) | 0; //@line 3531
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 3534
     $312 = $ReallocAsyncCtx6 + 4 | 0; //@line 3535
     HEAP32[$312 >> 2] = $2; //@line 3536
     $313 = $ReallocAsyncCtx6 + 8 | 0; //@line 3537
     HEAP32[$313 >> 2] = $4; //@line 3538
     $314 = $ReallocAsyncCtx6 + 12 | 0; //@line 3539
     HEAP32[$314 >> 2] = $6; //@line 3540
     $315 = $ReallocAsyncCtx6 + 16 | 0; //@line 3541
     HEAP32[$315 >> 2] = $8; //@line 3542
     $316 = $ReallocAsyncCtx6 + 20 | 0; //@line 3543
     HEAP32[$316 >> 2] = $10; //@line 3544
     $317 = $ReallocAsyncCtx6 + 24 | 0; //@line 3545
     HEAP32[$317 >> 2] = $12; //@line 3546
     $318 = $ReallocAsyncCtx6 + 28 | 0; //@line 3547
     HEAP32[$318 >> 2] = $35; //@line 3548
     $319 = $ReallocAsyncCtx6 + 32 | 0; //@line 3549
     HEAP32[$319 >> 2] = $32; //@line 3550
     $320 = $ReallocAsyncCtx6 + 36 | 0; //@line 3551
     HEAP32[$320 >> 2] = $31; //@line 3552
     $321 = $ReallocAsyncCtx6 + 40 | 0; //@line 3553
     HEAP32[$321 >> 2] = $33; //@line 3554
     $322 = $ReallocAsyncCtx6 + 44 | 0; //@line 3555
     HEAP32[$322 >> 2] = $4; //@line 3556
     $323 = $ReallocAsyncCtx6 + 48 | 0; //@line 3557
     HEAP32[$323 >> 2] = $35; //@line 3558
     $324 = $ReallocAsyncCtx6 + 52 | 0; //@line 3559
     HEAP32[$324 >> 2] = $20; //@line 3560
     $325 = $ReallocAsyncCtx6 + 56 | 0; //@line 3561
     HEAP32[$325 >> 2] = $36; //@line 3562
     $326 = $ReallocAsyncCtx6 + 60 | 0; //@line 3563
     HEAP32[$326 >> 2] = $37; //@line 3564
     $327 = $ReallocAsyncCtx6 + 64 | 0; //@line 3565
     HEAP32[$327 >> 2] = $$0208$i; //@line 3566
     sp = STACKTOP; //@line 3567
     return;
    }
    HEAP8[___async_retval >> 0] = $311; //@line 3571
    ___async_unwind = 0; //@line 3572
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 3573
    $312 = $ReallocAsyncCtx6 + 4 | 0; //@line 3574
    HEAP32[$312 >> 2] = $2; //@line 3575
    $313 = $ReallocAsyncCtx6 + 8 | 0; //@line 3576
    HEAP32[$313 >> 2] = $4; //@line 3577
    $314 = $ReallocAsyncCtx6 + 12 | 0; //@line 3578
    HEAP32[$314 >> 2] = $6; //@line 3579
    $315 = $ReallocAsyncCtx6 + 16 | 0; //@line 3580
    HEAP32[$315 >> 2] = $8; //@line 3581
    $316 = $ReallocAsyncCtx6 + 20 | 0; //@line 3582
    HEAP32[$316 >> 2] = $10; //@line 3583
    $317 = $ReallocAsyncCtx6 + 24 | 0; //@line 3584
    HEAP32[$317 >> 2] = $12; //@line 3585
    $318 = $ReallocAsyncCtx6 + 28 | 0; //@line 3586
    HEAP32[$318 >> 2] = $35; //@line 3587
    $319 = $ReallocAsyncCtx6 + 32 | 0; //@line 3588
    HEAP32[$319 >> 2] = $32; //@line 3589
    $320 = $ReallocAsyncCtx6 + 36 | 0; //@line 3590
    HEAP32[$320 >> 2] = $31; //@line 3591
    $321 = $ReallocAsyncCtx6 + 40 | 0; //@line 3592
    HEAP32[$321 >> 2] = $33; //@line 3593
    $322 = $ReallocAsyncCtx6 + 44 | 0; //@line 3594
    HEAP32[$322 >> 2] = $4; //@line 3595
    $323 = $ReallocAsyncCtx6 + 48 | 0; //@line 3596
    HEAP32[$323 >> 2] = $35; //@line 3597
    $324 = $ReallocAsyncCtx6 + 52 | 0; //@line 3598
    HEAP32[$324 >> 2] = $20; //@line 3599
    $325 = $ReallocAsyncCtx6 + 56 | 0; //@line 3600
    HEAP32[$325 >> 2] = $36; //@line 3601
    $326 = $ReallocAsyncCtx6 + 60 | 0; //@line 3602
    HEAP32[$326 >> 2] = $37; //@line 3603
    $327 = $ReallocAsyncCtx6 + 64 | 0; //@line 3604
    HEAP32[$327 >> 2] = $$0208$i; //@line 3605
    sp = STACKTOP; //@line 3606
    return;
   } else if ((label | 0) == 93) {
    if (($40 - $32 | 0) >= ($31 | 0)) {
     $440 = ___async_retval; //@line 3614
     HEAP32[$440 >> 2] = $6; //@line 3615
     return;
    }
    if ((HEAP8[$40 >> 0] | 0) == -1) {
     $430 = $40 + 1 | 0; //@line 3621
     HEAP32[$4 >> 2] = $430; //@line 3622
     $431 = $430; //@line 3623
     $433 = $32 - $431 + $31 | 0; //@line 3625
     HEAP16[$12 + 24 >> 1] = $433; //@line 3628
     if ($433 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $431; //@line 3633
      $440 = ___async_retval; //@line 3634
      HEAP32[$440 >> 2] = $6; //@line 3635
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 3640
    $440 = ___async_retval; //@line 3641
    HEAP32[$440 >> 2] = $6; //@line 3642
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 3648
 $440 = ___async_retval; //@line 3649
 HEAP32[$440 >> 2] = $6; //@line 3650
 return;
}
function _sn_coap_parser__async_cb_88($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $184 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $239 = 0, $24 = 0, $240 = 0, $245 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $291 = 0, $294 = 0, $295 = 0, $30 = 0, $300 = 0, $303 = 0, $305 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $245$looptemp = 0, $300$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 7917
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7919
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7921
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7923
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7925
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7927
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7929
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7931
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7933
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7935
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7937
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7939
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7941
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7943
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7945
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7947
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 7955
   L3 : while (1) {
    $417 = HEAP32[$22 >> 2] | 0; //@line 7957
    $418 = $417 - $16 | 0; //@line 7958
    $37 = $417; //@line 7961
    if (($418 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 7968
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 7971
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 7974
     break;
    }
    $40 = $trunc277$i & 15; //@line 7978
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 7979
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 7991
      $$sink214$i = 13; //@line 7991
      $$sink3$i = 1; //@line 7991
      label = 7; //@line 7992
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 8004
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 8004
      $$sink3$i = 2; //@line 8004
      label = 7; //@line 8005
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 8009
      $437 = $417; //@line 8009
      $59 = $37; //@line 8009
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 8013
     $54 = $37 + $$sink3$i | 0; //@line 8015
     HEAP32[$4 >> 2] = $54; //@line 8016
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 8018
     $437 = $54; //@line 8018
     $59 = $54; //@line 8018
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 8021
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 8032
      $$sink216$i = 13; //@line 8032
      $$sink8$i = 1; //@line 8032
      label = 11; //@line 8033
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 8045
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 8045
      $$sink8$i = 2; //@line 8045
      label = 11; //@line 8046
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 8050
      $74 = $437; //@line 8050
      $82 = $59; //@line 8050
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 8054
     $71 = $59 + $$sink8$i | 0; //@line 8056
     HEAP32[$4 >> 2] = $71; //@line 8057
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 8059
     $74 = $71; //@line 8059
     $82 = $71; //@line 8059
    }
    $$1202$i = $$1202$in$i & 65535; //@line 8061
    $75 = $20 - $74 & 65535; //@line 8063
    $trunc$i = $57 & 65535; //@line 8064
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 52; //@line 8068
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 8076
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 8081
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 8086
         break L3;
         break;
        }
       case 3:
        {
         label = 35; //@line 8091
         break L3;
         break;
        }
       case 8:
        {
         label = 40; //@line 8096
         break L3;
         break;
        }
       case 20:
        {
         label = 49; //@line 8101
         break L3;
         break;
        }
       case 11:
        {
         label = 52; //@line 8106
         break L3;
         break;
        }
       case 15:
        {
         label = 60; //@line 8111
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $82 + 1 | 0; //@line 8124
         HEAP32[$4 >> 2] = $118; //@line 8125
         $119 = $$1202$in$i & 255; //@line 8126
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 8129
         } else {
          $$045$i256$i = $119; //@line 8131
          $$06$i255$i = 0; //@line 8131
          $124 = $118; //@line 8131
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 8133
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 8135
           HEAP32[$4 >> 2] = $124; //@line 8136
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 8139
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 8142
            break;
           } else {
            $$06$i255$i = $127; //@line 8145
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 8151
         $$reg2mem$0 = $57; //@line 8152
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $236 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 8162
         if ((HEAP32[$236 >> 2] | 0) != -1) {
          break L2;
         }
         $239 = $82 + 1 | 0; //@line 8168
         HEAP32[$4 >> 2] = $239; //@line 8169
         $240 = $$1202$in$i & 255; //@line 8170
         if (!($240 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 8173
         } else {
          $$045$i270$i = $240; //@line 8175
          $$06$i269$i = 0; //@line 8175
          $245 = $239; //@line 8175
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 8177
           $245$looptemp = $245;
           $245 = $245 + 1 | 0; //@line 8179
           HEAP32[$4 >> 2] = $245; //@line 8180
           $248 = $$06$i269$i << 8 | HEAPU8[$245$looptemp >> 0]; //@line 8183
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $248; //@line 8186
            break;
           } else {
            $$06$i269$i = $248; //@line 8189
           }
          }
         }
         HEAP32[$236 >> 2] = $$0$lcssa$i272$i; //@line 8193
         $$reg2mem$0 = $57; //@line 8194
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $291 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 8204
         if ((HEAP32[$291 >> 2] | 0) != -1) {
          break L2;
         }
         $294 = $82 + 1 | 0; //@line 8210
         HEAP32[$4 >> 2] = $294; //@line 8211
         $295 = $$1202$in$i & 255; //@line 8212
         if (!($295 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 8215
         } else {
          $$045$i263$i = $295; //@line 8217
          $$06$i262$i = 0; //@line 8217
          $300 = $294; //@line 8217
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 8219
           $300$looptemp = $300;
           $300 = $300 + 1 | 0; //@line 8221
           HEAP32[$4 >> 2] = $300; //@line 8222
           $303 = $$06$i262$i << 8 | HEAPU8[$300$looptemp >> 0]; //@line 8225
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $303; //@line 8228
            break;
           } else {
            $$06$i262$i = $303; //@line 8231
           }
          }
         }
         HEAP32[$291 >> 2] = $$0$lcssa$i265$i; //@line 8235
         $$reg2mem$0 = $57; //@line 8236
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 8246
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $82 + 1 | 0; //@line 8252
         HEAP32[$4 >> 2] = $332; //@line 8253
         $333 = $$1202$in$i & 255; //@line 8254
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 8257
         } else {
          $$045$i249$i = $333; //@line 8259
          $$06$i248$i = 0; //@line 8259
          $338 = $332; //@line 8259
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 8261
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 8263
           HEAP32[$4 >> 2] = $338; //@line 8264
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 8267
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 8270
            break;
           } else {
            $$06$i248$i = $341; //@line 8273
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 8277
         $$reg2mem$0 = $57; //@line 8278
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 8288
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $82 + 1 | 0; //@line 8294
         HEAP32[$4 >> 2] = $348; //@line 8295
         $349 = $$1202$in$i & 255; //@line 8296
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 8299
         } else {
          $$045$i242$i = $349; //@line 8301
          $$06$i241$i = 0; //@line 8301
          $354 = $348; //@line 8301
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 8303
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 8305
           HEAP32[$4 >> 2] = $354; //@line 8306
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 8309
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 8312
            break;
           } else {
            $$06$i241$i = $357; //@line 8315
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 8319
         $$reg2mem$0 = $57; //@line 8320
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 8330
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $82 + 1 | 0; //@line 8336
         HEAP32[$4 >> 2] = $364; //@line 8337
         $365 = $$1202$in$i & 255; //@line 8338
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 8341
         } else {
          $$045$i235$i = $365; //@line 8343
          $$06$i234$i = 0; //@line 8343
          $370 = $364; //@line 8343
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 8345
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 8347
           HEAP32[$4 >> 2] = $370; //@line 8348
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 8351
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 8354
            break;
           } else {
            $$06$i234$i = $373; //@line 8357
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 8361
         $$reg2mem$0 = $57; //@line 8362
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 8372
         $378 = HEAP8[$377 >> 0] | 0; //@line 8373
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 8380
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 8382
         HEAP32[$4 >> 2] = $383; //@line 8383
         $384 = $$1202$in$i & 255; //@line 8384
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 8387
         } else {
          $$045$i228$i = $384; //@line 8389
          $$06$i227$i = 0; //@line 8389
          $389 = $383; //@line 8389
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 8391
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 8393
           HEAP32[$4 >> 2] = $389; //@line 8394
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 8397
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 8400
            break;
           } else {
            $$06$i227$i = $392; //@line 8403
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 8409
         $$reg2mem$0 = $57; //@line 8410
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 8420
         $399 = HEAP8[$398 >> 0] | 0; //@line 8421
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 8428
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 8430
         HEAP32[$4 >> 2] = $404; //@line 8431
         $405 = $$1202$in$i & 255; //@line 8432
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 8435
         } else {
          $$045$i221$i = $405; //@line 8437
          $$06$i220$i = 0; //@line 8437
          $410 = $404; //@line 8437
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 8439
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 8441
           HEAP32[$4 >> 2] = $410; //@line 8442
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 8445
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 8448
            break;
           } else {
            $$06$i220$i = $413; //@line 8451
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 8457
         $$reg2mem$0 = $57; //@line 8458
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $82 + 1 | 0; //@line 8485
    HEAP32[$4 >> 2] = $106; //@line 8486
    $107 = $$1202$in$i & 255; //@line 8487
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 8490
    } else {
     $$045$i$i = $107; //@line 8492
     $$06$i$i = 0; //@line 8492
     $112 = $106; //@line 8492
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 8494
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 8496
      HEAP32[$4 >> 2] = $112; //@line 8497
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 8500
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 8503
       break;
      } else {
       $$06$i$i = $115; //@line 8506
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 8510
    $$reg2mem$0 = $57; //@line 8511
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$10 >> 2] | 0; //@line 8514
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 8515
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 8516
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 8519
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 8520
     HEAP32[$80 >> 2] = $2; //@line 8521
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 8522
     HEAP32[$81 >> 2] = $82; //@line 8523
     $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 8524
     HEAP32[$83 >> 2] = $4; //@line 8525
     $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 8526
     HEAP32[$84 >> 2] = $$1202$in$i; //@line 8527
     $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 8528
     HEAP32[$85 >> 2] = $6; //@line 8529
     $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 8530
     HEAP32[$86 >> 2] = $8; //@line 8531
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 8532
     HEAP32[$87 >> 2] = $10; //@line 8533
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 8534
     HEAP32[$88 >> 2] = $12; //@line 8535
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 8536
     HEAP32[$89 >> 2] = $14; //@line 8537
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 8538
     HEAP16[$90 >> 1] = $trunc$i; //@line 8539
     $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 8540
     HEAP16[$91 >> 1] = $$1202$i; //@line 8541
     $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 8542
     HEAP32[$92 >> 2] = $16; //@line 8543
     $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 8544
     HEAP32[$93 >> 2] = $18; //@line 8545
     $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 8546
     HEAP32[$94 >> 2] = $20; //@line 8547
     $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 8548
     HEAP32[$95 >> 2] = $22; //@line 8549
     $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 8550
     HEAP32[$96 >> 2] = $57; //@line 8551
     $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 8552
     HEAP32[$97 >> 2] = $24; //@line 8553
     $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 8554
     HEAP32[$98 >> 2] = $26; //@line 8555
     $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 8556
     HEAP16[$99 >> 1] = $75; //@line 8557
     $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 8558
     HEAP32[$100 >> 2] = $28; //@line 8559
     $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 8560
     HEAP32[$101 >> 2] = $30; //@line 8561
     sp = STACKTOP; //@line 8562
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 8566
    ___async_unwind = 0; //@line 8567
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 8568
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 8569
    HEAP32[$80 >> 2] = $2; //@line 8570
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 8571
    HEAP32[$81 >> 2] = $82; //@line 8572
    $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 8573
    HEAP32[$83 >> 2] = $4; //@line 8574
    $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 8575
    HEAP32[$84 >> 2] = $$1202$in$i; //@line 8576
    $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 8577
    HEAP32[$85 >> 2] = $6; //@line 8578
    $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 8579
    HEAP32[$86 >> 2] = $8; //@line 8580
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 8581
    HEAP32[$87 >> 2] = $10; //@line 8582
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 8583
    HEAP32[$88 >> 2] = $12; //@line 8584
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 8585
    HEAP32[$89 >> 2] = $14; //@line 8586
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 8587
    HEAP16[$90 >> 1] = $trunc$i; //@line 8588
    $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 8589
    HEAP16[$91 >> 1] = $$1202$i; //@line 8590
    $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 8591
    HEAP32[$92 >> 2] = $16; //@line 8592
    $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 8593
    HEAP32[$93 >> 2] = $18; //@line 8594
    $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 8595
    HEAP32[$94 >> 2] = $20; //@line 8596
    $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 8597
    HEAP32[$95 >> 2] = $22; //@line 8598
    $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 8599
    HEAP32[$96 >> 2] = $57; //@line 8600
    $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 8601
    HEAP32[$97 >> 2] = $24; //@line 8602
    $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 8603
    HEAP32[$98 >> 2] = $26; //@line 8604
    $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 8605
    HEAP16[$99 >> 1] = $75; //@line 8606
    $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 8607
    HEAP32[$100 >> 2] = $28; //@line 8608
    $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 8609
    HEAP32[$101 >> 2] = $30; //@line 8610
    sp = STACKTOP; //@line 8611
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 8615
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$14 >> 2] | 0; //@line 8621
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 8629
    $139 = $82 + 1 | 0; //@line 8630
    HEAP32[$4 >> 2] = $139; //@line 8631
    $140 = HEAP32[$10 >> 2] | 0; //@line 8632
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 8633
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 8634
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 8637
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 8638
     HEAP32[$142 >> 2] = $2; //@line 8639
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 8640
     HEAP32[$143 >> 2] = $4; //@line 8641
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 8642
     HEAP32[$144 >> 2] = $6; //@line 8643
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 8644
     HEAP32[$145 >> 2] = $8; //@line 8645
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 8646
     HEAP32[$146 >> 2] = $10; //@line 8647
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 8648
     HEAP32[$147 >> 2] = $12; //@line 8649
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 8650
     HEAP32[$148 >> 2] = $14; //@line 8651
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 8652
     HEAP32[$149 >> 2] = $16; //@line 8653
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 8654
     HEAP32[$150 >> 2] = $18; //@line 8655
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 8656
     HEAP32[$151 >> 2] = $20; //@line 8657
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 8658
     HEAP32[$152 >> 2] = $22; //@line 8659
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 8660
     HEAP32[$153 >> 2] = $24; //@line 8661
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 8662
     HEAP32[$154 >> 2] = $26; //@line 8663
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 8664
     HEAP32[$155 >> 2] = $28; //@line 8665
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 8666
     HEAP32[$156 >> 2] = $30; //@line 8667
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 8668
     HEAP32[$157 >> 2] = $57; //@line 8669
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 8670
     HEAP32[$158 >> 2] = $139; //@line 8671
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 8672
     HEAP32[$159 >> 2] = $131; //@line 8673
     sp = STACKTOP; //@line 8674
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 8678
    ___async_unwind = 0; //@line 8679
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 8680
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 8681
    HEAP32[$142 >> 2] = $2; //@line 8682
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 8683
    HEAP32[$143 >> 2] = $4; //@line 8684
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 8685
    HEAP32[$144 >> 2] = $6; //@line 8686
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 8687
    HEAP32[$145 >> 2] = $8; //@line 8688
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 8689
    HEAP32[$146 >> 2] = $10; //@line 8690
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 8691
    HEAP32[$147 >> 2] = $12; //@line 8692
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 8693
    HEAP32[$148 >> 2] = $14; //@line 8694
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 8695
    HEAP32[$149 >> 2] = $16; //@line 8696
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 8697
    HEAP32[$150 >> 2] = $18; //@line 8698
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 8699
    HEAP32[$151 >> 2] = $20; //@line 8700
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 8701
    HEAP32[$152 >> 2] = $22; //@line 8702
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 8703
    HEAP32[$153 >> 2] = $24; //@line 8704
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 8705
    HEAP32[$154 >> 2] = $26; //@line 8706
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 8707
    HEAP32[$155 >> 2] = $28; //@line 8708
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 8709
    HEAP32[$156 >> 2] = $30; //@line 8710
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 8711
    HEAP32[$157 >> 2] = $57; //@line 8712
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 8713
    HEAP32[$158 >> 2] = $139; //@line 8714
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 8715
    HEAP32[$159 >> 2] = $131; //@line 8716
    sp = STACKTOP; //@line 8717
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$14 >> 2] | 0; //@line 8721
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 8723
    $163 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 8724
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 8727
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 8728
     HEAP32[$164 >> 2] = $2; //@line 8729
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 8730
     HEAP32[$165 >> 2] = $4; //@line 8731
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 8732
     HEAP32[$166 >> 2] = $6; //@line 8733
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 8734
     HEAP32[$167 >> 2] = $8; //@line 8735
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 8736
     HEAP32[$168 >> 2] = $10; //@line 8737
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 8738
     HEAP32[$169 >> 2] = $12; //@line 8739
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 8740
     HEAP32[$170 >> 2] = $14; //@line 8741
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 8742
     HEAP32[$171 >> 2] = $16; //@line 8743
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 8744
     HEAP32[$172 >> 2] = $18; //@line 8745
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 8746
     HEAP32[$173 >> 2] = $20; //@line 8747
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 8748
     HEAP32[$174 >> 2] = $22; //@line 8749
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 8750
     HEAP32[$175 >> 2] = $24; //@line 8751
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 8752
     HEAP32[$176 >> 2] = $26; //@line 8753
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 8754
     HEAP32[$177 >> 2] = $28; //@line 8755
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 8756
     HEAP32[$178 >> 2] = $30; //@line 8757
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 8758
     HEAP32[$179 >> 2] = $57; //@line 8759
     sp = STACKTOP; //@line 8760
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 8764
    ___async_unwind = 0; //@line 8765
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 8766
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 8767
    HEAP32[$164 >> 2] = $2; //@line 8768
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 8769
    HEAP32[$165 >> 2] = $4; //@line 8770
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 8771
    HEAP32[$166 >> 2] = $6; //@line 8772
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 8773
    HEAP32[$167 >> 2] = $8; //@line 8774
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 8775
    HEAP32[$168 >> 2] = $10; //@line 8776
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 8777
    HEAP32[$169 >> 2] = $12; //@line 8778
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 8779
    HEAP32[$170 >> 2] = $14; //@line 8780
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 8781
    HEAP32[$171 >> 2] = $16; //@line 8782
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 8783
    HEAP32[$172 >> 2] = $18; //@line 8784
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 8785
    HEAP32[$173 >> 2] = $20; //@line 8786
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 8787
    HEAP32[$174 >> 2] = $22; //@line 8788
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 8789
    HEAP32[$175 >> 2] = $24; //@line 8790
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 8791
    HEAP32[$176 >> 2] = $26; //@line 8792
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 8793
    HEAP32[$177 >> 2] = $28; //@line 8794
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 8795
    HEAP32[$178 >> 2] = $30; //@line 8796
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 8797
    HEAP32[$179 >> 2] = $57; //@line 8798
    sp = STACKTOP; //@line 8799
    return;
   } else if ((label | 0) == 35) {
    $181 = $$1202$in$i & 65535; //@line 8803
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $184 = HEAP32[$14 >> 2] | 0; //@line 8809
    if (HEAP32[$184 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$184 + 4 >> 1] = $$1202$i; //@line 8817
    $189 = $82 + 1 | 0; //@line 8818
    HEAP32[$4 >> 2] = $189; //@line 8819
    $190 = HEAP32[$10 >> 2] | 0; //@line 8820
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 8821
    $191 = FUNCTION_TABLE_ii[$190 & 15]($$1202$i) | 0; //@line 8822
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 8825
     $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 8826
     HEAP32[$192 >> 2] = $2; //@line 8827
     $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 8828
     HEAP32[$193 >> 2] = $4; //@line 8829
     $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 8830
     HEAP32[$194 >> 2] = $6; //@line 8831
     $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 8832
     HEAP32[$195 >> 2] = $8; //@line 8833
     $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 8834
     HEAP32[$196 >> 2] = $10; //@line 8835
     $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 8836
     HEAP32[$197 >> 2] = $12; //@line 8837
     $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 8838
     HEAP32[$198 >> 2] = $14; //@line 8839
     $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 8840
     HEAP32[$199 >> 2] = $16; //@line 8841
     $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 8842
     HEAP32[$200 >> 2] = $18; //@line 8843
     $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 8844
     HEAP32[$201 >> 2] = $20; //@line 8845
     $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 8846
     HEAP32[$202 >> 2] = $22; //@line 8847
     $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 8848
     HEAP32[$203 >> 2] = $24; //@line 8849
     $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 8850
     HEAP32[$204 >> 2] = $26; //@line 8851
     $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 8852
     HEAP32[$205 >> 2] = $28; //@line 8853
     $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 8854
     HEAP32[$206 >> 2] = $30; //@line 8855
     $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 8856
     HEAP32[$207 >> 2] = $57; //@line 8857
     $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 8858
     HEAP32[$208 >> 2] = $189; //@line 8859
     $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 8860
     HEAP32[$209 >> 2] = $181; //@line 8861
     sp = STACKTOP; //@line 8862
     return;
    }
    HEAP32[___async_retval >> 2] = $191; //@line 8866
    ___async_unwind = 0; //@line 8867
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 8868
    $192 = $ReallocAsyncCtx5 + 4 | 0; //@line 8869
    HEAP32[$192 >> 2] = $2; //@line 8870
    $193 = $ReallocAsyncCtx5 + 8 | 0; //@line 8871
    HEAP32[$193 >> 2] = $4; //@line 8872
    $194 = $ReallocAsyncCtx5 + 12 | 0; //@line 8873
    HEAP32[$194 >> 2] = $6; //@line 8874
    $195 = $ReallocAsyncCtx5 + 16 | 0; //@line 8875
    HEAP32[$195 >> 2] = $8; //@line 8876
    $196 = $ReallocAsyncCtx5 + 20 | 0; //@line 8877
    HEAP32[$196 >> 2] = $10; //@line 8878
    $197 = $ReallocAsyncCtx5 + 24 | 0; //@line 8879
    HEAP32[$197 >> 2] = $12; //@line 8880
    $198 = $ReallocAsyncCtx5 + 28 | 0; //@line 8881
    HEAP32[$198 >> 2] = $14; //@line 8882
    $199 = $ReallocAsyncCtx5 + 32 | 0; //@line 8883
    HEAP32[$199 >> 2] = $16; //@line 8884
    $200 = $ReallocAsyncCtx5 + 36 | 0; //@line 8885
    HEAP32[$200 >> 2] = $18; //@line 8886
    $201 = $ReallocAsyncCtx5 + 40 | 0; //@line 8887
    HEAP32[$201 >> 2] = $20; //@line 8888
    $202 = $ReallocAsyncCtx5 + 44 | 0; //@line 8889
    HEAP32[$202 >> 2] = $22; //@line 8890
    $203 = $ReallocAsyncCtx5 + 48 | 0; //@line 8891
    HEAP32[$203 >> 2] = $24; //@line 8892
    $204 = $ReallocAsyncCtx5 + 52 | 0; //@line 8893
    HEAP32[$204 >> 2] = $26; //@line 8894
    $205 = $ReallocAsyncCtx5 + 56 | 0; //@line 8895
    HEAP32[$205 >> 2] = $28; //@line 8896
    $206 = $ReallocAsyncCtx5 + 60 | 0; //@line 8897
    HEAP32[$206 >> 2] = $30; //@line 8898
    $207 = $ReallocAsyncCtx5 + 64 | 0; //@line 8899
    HEAP32[$207 >> 2] = $57; //@line 8900
    $208 = $ReallocAsyncCtx5 + 68 | 0; //@line 8901
    HEAP32[$208 >> 2] = $189; //@line 8902
    $209 = $ReallocAsyncCtx5 + 72 | 0; //@line 8903
    HEAP32[$209 >> 2] = $181; //@line 8904
    sp = STACKTOP; //@line 8905
    return;
   } else if ((label | 0) == 40) {
    $211 = HEAP32[$14 >> 2] | 0; //@line 8909
    $212 = $211 + 56 | 0; //@line 8910
    if (HEAP32[$212 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 8917
    $216 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $212, $211 + 6 | 0, 8, $$1202$i) | 0; //@line 8918
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 8921
     $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 8922
     HEAP32[$217 >> 2] = $2; //@line 8923
     $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 8924
     HEAP32[$218 >> 2] = $4; //@line 8925
     $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 8926
     HEAP32[$219 >> 2] = $6; //@line 8927
     $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 8928
     HEAP32[$220 >> 2] = $8; //@line 8929
     $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 8930
     HEAP32[$221 >> 2] = $10; //@line 8931
     $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 8932
     HEAP32[$222 >> 2] = $12; //@line 8933
     $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 8934
     HEAP32[$223 >> 2] = $14; //@line 8935
     $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 8936
     HEAP32[$224 >> 2] = $16; //@line 8937
     $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 8938
     HEAP32[$225 >> 2] = $18; //@line 8939
     $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 8940
     HEAP32[$226 >> 2] = $20; //@line 8941
     $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 8942
     HEAP32[$227 >> 2] = $22; //@line 8943
     $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 8944
     HEAP32[$228 >> 2] = $24; //@line 8945
     $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 8946
     HEAP32[$229 >> 2] = $26; //@line 8947
     $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 8948
     HEAP32[$230 >> 2] = $28; //@line 8949
     $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 8950
     HEAP32[$231 >> 2] = $30; //@line 8951
     $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 8952
     HEAP32[$232 >> 2] = $57; //@line 8953
     sp = STACKTOP; //@line 8954
     return;
    }
    HEAP8[___async_retval >> 0] = $216; //@line 8958
    ___async_unwind = 0; //@line 8959
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 8960
    $217 = $ReallocAsyncCtx9 + 4 | 0; //@line 8961
    HEAP32[$217 >> 2] = $2; //@line 8962
    $218 = $ReallocAsyncCtx9 + 8 | 0; //@line 8963
    HEAP32[$218 >> 2] = $4; //@line 8964
    $219 = $ReallocAsyncCtx9 + 12 | 0; //@line 8965
    HEAP32[$219 >> 2] = $6; //@line 8966
    $220 = $ReallocAsyncCtx9 + 16 | 0; //@line 8967
    HEAP32[$220 >> 2] = $8; //@line 8968
    $221 = $ReallocAsyncCtx9 + 20 | 0; //@line 8969
    HEAP32[$221 >> 2] = $10; //@line 8970
    $222 = $ReallocAsyncCtx9 + 24 | 0; //@line 8971
    HEAP32[$222 >> 2] = $12; //@line 8972
    $223 = $ReallocAsyncCtx9 + 28 | 0; //@line 8973
    HEAP32[$223 >> 2] = $14; //@line 8974
    $224 = $ReallocAsyncCtx9 + 32 | 0; //@line 8975
    HEAP32[$224 >> 2] = $16; //@line 8976
    $225 = $ReallocAsyncCtx9 + 36 | 0; //@line 8977
    HEAP32[$225 >> 2] = $18; //@line 8978
    $226 = $ReallocAsyncCtx9 + 40 | 0; //@line 8979
    HEAP32[$226 >> 2] = $20; //@line 8980
    $227 = $ReallocAsyncCtx9 + 44 | 0; //@line 8981
    HEAP32[$227 >> 2] = $22; //@line 8982
    $228 = $ReallocAsyncCtx9 + 48 | 0; //@line 8983
    HEAP32[$228 >> 2] = $24; //@line 8984
    $229 = $ReallocAsyncCtx9 + 52 | 0; //@line 8985
    HEAP32[$229 >> 2] = $26; //@line 8986
    $230 = $ReallocAsyncCtx9 + 56 | 0; //@line 8987
    HEAP32[$230 >> 2] = $28; //@line 8988
    $231 = $ReallocAsyncCtx9 + 60 | 0; //@line 8989
    HEAP32[$231 >> 2] = $30; //@line 8990
    $232 = $ReallocAsyncCtx9 + 64 | 0; //@line 8991
    HEAP32[$232 >> 2] = $57; //@line 8992
    sp = STACKTOP; //@line 8993
    return;
   } else if ((label | 0) == 49) {
    $250 = HEAP32[$14 >> 2] | 0; //@line 8997
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 9000
    $253 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $250 + 60 | 0, $250 + 8 | 0, 20, $$1202$i) | 0; //@line 9001
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 9004
     $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 9005
     HEAP32[$254 >> 2] = $2; //@line 9006
     $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 9007
     HEAP32[$255 >> 2] = $4; //@line 9008
     $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 9009
     HEAP32[$256 >> 2] = $6; //@line 9010
     $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 9011
     HEAP32[$257 >> 2] = $8; //@line 9012
     $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 9013
     HEAP32[$258 >> 2] = $10; //@line 9014
     $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 9015
     HEAP32[$259 >> 2] = $12; //@line 9016
     $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 9017
     HEAP32[$260 >> 2] = $14; //@line 9018
     $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 9019
     HEAP32[$261 >> 2] = $16; //@line 9020
     $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 9021
     HEAP32[$262 >> 2] = $18; //@line 9022
     $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 9023
     HEAP32[$263 >> 2] = $20; //@line 9024
     $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 9025
     HEAP32[$264 >> 2] = $22; //@line 9026
     $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 9027
     HEAP32[$265 >> 2] = $24; //@line 9028
     $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 9029
     HEAP32[$266 >> 2] = $26; //@line 9030
     $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 9031
     HEAP32[$267 >> 2] = $28; //@line 9032
     $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 9033
     HEAP32[$268 >> 2] = $30; //@line 9034
     $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 9035
     HEAP32[$269 >> 2] = $57; //@line 9036
     sp = STACKTOP; //@line 9037
     return;
    }
    HEAP8[___async_retval >> 0] = $253; //@line 9041
    ___async_unwind = 0; //@line 9042
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 9043
    $254 = $ReallocAsyncCtx8 + 4 | 0; //@line 9044
    HEAP32[$254 >> 2] = $2; //@line 9045
    $255 = $ReallocAsyncCtx8 + 8 | 0; //@line 9046
    HEAP32[$255 >> 2] = $4; //@line 9047
    $256 = $ReallocAsyncCtx8 + 12 | 0; //@line 9048
    HEAP32[$256 >> 2] = $6; //@line 9049
    $257 = $ReallocAsyncCtx8 + 16 | 0; //@line 9050
    HEAP32[$257 >> 2] = $8; //@line 9051
    $258 = $ReallocAsyncCtx8 + 20 | 0; //@line 9052
    HEAP32[$258 >> 2] = $10; //@line 9053
    $259 = $ReallocAsyncCtx8 + 24 | 0; //@line 9054
    HEAP32[$259 >> 2] = $12; //@line 9055
    $260 = $ReallocAsyncCtx8 + 28 | 0; //@line 9056
    HEAP32[$260 >> 2] = $14; //@line 9057
    $261 = $ReallocAsyncCtx8 + 32 | 0; //@line 9058
    HEAP32[$261 >> 2] = $16; //@line 9059
    $262 = $ReallocAsyncCtx8 + 36 | 0; //@line 9060
    HEAP32[$262 >> 2] = $18; //@line 9061
    $263 = $ReallocAsyncCtx8 + 40 | 0; //@line 9062
    HEAP32[$263 >> 2] = $20; //@line 9063
    $264 = $ReallocAsyncCtx8 + 44 | 0; //@line 9064
    HEAP32[$264 >> 2] = $22; //@line 9065
    $265 = $ReallocAsyncCtx8 + 48 | 0; //@line 9066
    HEAP32[$265 >> 2] = $24; //@line 9067
    $266 = $ReallocAsyncCtx8 + 52 | 0; //@line 9068
    HEAP32[$266 >> 2] = $26; //@line 9069
    $267 = $ReallocAsyncCtx8 + 56 | 0; //@line 9070
    HEAP32[$267 >> 2] = $28; //@line 9071
    $268 = $ReallocAsyncCtx8 + 60 | 0; //@line 9072
    HEAP32[$268 >> 2] = $30; //@line 9073
    $269 = $ReallocAsyncCtx8 + 64 | 0; //@line 9074
    HEAP32[$269 >> 2] = $57; //@line 9075
    sp = STACKTOP; //@line 9076
    return;
   } else if ((label | 0) == 52) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 9080
    $271 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $28, $30, 11, $$1202$i) | 0; //@line 9081
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 9084
     $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 9085
     HEAP32[$272 >> 2] = $2; //@line 9086
     $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 9087
     HEAP32[$273 >> 2] = $4; //@line 9088
     $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 9089
     HEAP32[$274 >> 2] = $6; //@line 9090
     $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 9091
     HEAP32[$275 >> 2] = $8; //@line 9092
     $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 9093
     HEAP32[$276 >> 2] = $10; //@line 9094
     $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 9095
     HEAP32[$277 >> 2] = $12; //@line 9096
     $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 9097
     HEAP32[$278 >> 2] = $14; //@line 9098
     $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 9099
     HEAP32[$279 >> 2] = $16; //@line 9100
     $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 9101
     HEAP32[$280 >> 2] = $18; //@line 9102
     $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 9103
     HEAP32[$281 >> 2] = $20; //@line 9104
     $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 9105
     HEAP32[$282 >> 2] = $22; //@line 9106
     $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 9107
     HEAP32[$283 >> 2] = $24; //@line 9108
     $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 9109
     HEAP32[$284 >> 2] = $26; //@line 9110
     $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 9111
     HEAP32[$285 >> 2] = $28; //@line 9112
     $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 9113
     HEAP32[$286 >> 2] = $30; //@line 9114
     $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 9115
     HEAP32[$287 >> 2] = $57; //@line 9116
     sp = STACKTOP; //@line 9117
     return;
    }
    HEAP8[___async_retval >> 0] = $271; //@line 9121
    ___async_unwind = 0; //@line 9122
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 9123
    $272 = $ReallocAsyncCtx7 + 4 | 0; //@line 9124
    HEAP32[$272 >> 2] = $2; //@line 9125
    $273 = $ReallocAsyncCtx7 + 8 | 0; //@line 9126
    HEAP32[$273 >> 2] = $4; //@line 9127
    $274 = $ReallocAsyncCtx7 + 12 | 0; //@line 9128
    HEAP32[$274 >> 2] = $6; //@line 9129
    $275 = $ReallocAsyncCtx7 + 16 | 0; //@line 9130
    HEAP32[$275 >> 2] = $8; //@line 9131
    $276 = $ReallocAsyncCtx7 + 20 | 0; //@line 9132
    HEAP32[$276 >> 2] = $10; //@line 9133
    $277 = $ReallocAsyncCtx7 + 24 | 0; //@line 9134
    HEAP32[$277 >> 2] = $12; //@line 9135
    $278 = $ReallocAsyncCtx7 + 28 | 0; //@line 9136
    HEAP32[$278 >> 2] = $14; //@line 9137
    $279 = $ReallocAsyncCtx7 + 32 | 0; //@line 9138
    HEAP32[$279 >> 2] = $16; //@line 9139
    $280 = $ReallocAsyncCtx7 + 36 | 0; //@line 9140
    HEAP32[$280 >> 2] = $18; //@line 9141
    $281 = $ReallocAsyncCtx7 + 40 | 0; //@line 9142
    HEAP32[$281 >> 2] = $20; //@line 9143
    $282 = $ReallocAsyncCtx7 + 44 | 0; //@line 9144
    HEAP32[$282 >> 2] = $22; //@line 9145
    $283 = $ReallocAsyncCtx7 + 48 | 0; //@line 9146
    HEAP32[$283 >> 2] = $24; //@line 9147
    $284 = $ReallocAsyncCtx7 + 52 | 0; //@line 9148
    HEAP32[$284 >> 2] = $26; //@line 9149
    $285 = $ReallocAsyncCtx7 + 56 | 0; //@line 9150
    HEAP32[$285 >> 2] = $28; //@line 9151
    $286 = $ReallocAsyncCtx7 + 60 | 0; //@line 9152
    HEAP32[$286 >> 2] = $30; //@line 9153
    $287 = $ReallocAsyncCtx7 + 64 | 0; //@line 9154
    HEAP32[$287 >> 2] = $57; //@line 9155
    sp = STACKTOP; //@line 9156
    return;
   } else if ((label | 0) == 60) {
    $305 = HEAP32[$14 >> 2] | 0; //@line 9160
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 9163
    $308 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $305 + 64 | 0, $305 + 10 | 0, 15, $$1202$i) | 0; //@line 9164
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 9167
     $309 = $ReallocAsyncCtx6 + 4 | 0; //@line 9168
     HEAP32[$309 >> 2] = $2; //@line 9169
     $310 = $ReallocAsyncCtx6 + 8 | 0; //@line 9170
     HEAP32[$310 >> 2] = $4; //@line 9171
     $311 = $ReallocAsyncCtx6 + 12 | 0; //@line 9172
     HEAP32[$311 >> 2] = $6; //@line 9173
     $312 = $ReallocAsyncCtx6 + 16 | 0; //@line 9174
     HEAP32[$312 >> 2] = $8; //@line 9175
     $313 = $ReallocAsyncCtx6 + 20 | 0; //@line 9176
     HEAP32[$313 >> 2] = $10; //@line 9177
     $314 = $ReallocAsyncCtx6 + 24 | 0; //@line 9178
     HEAP32[$314 >> 2] = $12; //@line 9179
     $315 = $ReallocAsyncCtx6 + 28 | 0; //@line 9180
     HEAP32[$315 >> 2] = $14; //@line 9181
     $316 = $ReallocAsyncCtx6 + 32 | 0; //@line 9182
     HEAP32[$316 >> 2] = $16; //@line 9183
     $317 = $ReallocAsyncCtx6 + 36 | 0; //@line 9184
     HEAP32[$317 >> 2] = $18; //@line 9185
     $318 = $ReallocAsyncCtx6 + 40 | 0; //@line 9186
     HEAP32[$318 >> 2] = $20; //@line 9187
     $319 = $ReallocAsyncCtx6 + 44 | 0; //@line 9188
     HEAP32[$319 >> 2] = $22; //@line 9189
     $320 = $ReallocAsyncCtx6 + 48 | 0; //@line 9190
     HEAP32[$320 >> 2] = $24; //@line 9191
     $321 = $ReallocAsyncCtx6 + 52 | 0; //@line 9192
     HEAP32[$321 >> 2] = $26; //@line 9193
     $322 = $ReallocAsyncCtx6 + 56 | 0; //@line 9194
     HEAP32[$322 >> 2] = $28; //@line 9195
     $323 = $ReallocAsyncCtx6 + 60 | 0; //@line 9196
     HEAP32[$323 >> 2] = $30; //@line 9197
     $324 = $ReallocAsyncCtx6 + 64 | 0; //@line 9198
     HEAP32[$324 >> 2] = $57; //@line 9199
     sp = STACKTOP; //@line 9200
     return;
    }
    HEAP8[___async_retval >> 0] = $308; //@line 9204
    ___async_unwind = 0; //@line 9205
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 9206
    $309 = $ReallocAsyncCtx6 + 4 | 0; //@line 9207
    HEAP32[$309 >> 2] = $2; //@line 9208
    $310 = $ReallocAsyncCtx6 + 8 | 0; //@line 9209
    HEAP32[$310 >> 2] = $4; //@line 9210
    $311 = $ReallocAsyncCtx6 + 12 | 0; //@line 9211
    HEAP32[$311 >> 2] = $6; //@line 9212
    $312 = $ReallocAsyncCtx6 + 16 | 0; //@line 9213
    HEAP32[$312 >> 2] = $8; //@line 9214
    $313 = $ReallocAsyncCtx6 + 20 | 0; //@line 9215
    HEAP32[$313 >> 2] = $10; //@line 9216
    $314 = $ReallocAsyncCtx6 + 24 | 0; //@line 9217
    HEAP32[$314 >> 2] = $12; //@line 9218
    $315 = $ReallocAsyncCtx6 + 28 | 0; //@line 9219
    HEAP32[$315 >> 2] = $14; //@line 9220
    $316 = $ReallocAsyncCtx6 + 32 | 0; //@line 9221
    HEAP32[$316 >> 2] = $16; //@line 9222
    $317 = $ReallocAsyncCtx6 + 36 | 0; //@line 9223
    HEAP32[$317 >> 2] = $18; //@line 9224
    $318 = $ReallocAsyncCtx6 + 40 | 0; //@line 9225
    HEAP32[$318 >> 2] = $20; //@line 9226
    $319 = $ReallocAsyncCtx6 + 44 | 0; //@line 9227
    HEAP32[$319 >> 2] = $22; //@line 9228
    $320 = $ReallocAsyncCtx6 + 48 | 0; //@line 9229
    HEAP32[$320 >> 2] = $24; //@line 9230
    $321 = $ReallocAsyncCtx6 + 52 | 0; //@line 9231
    HEAP32[$321 >> 2] = $26; //@line 9232
    $322 = $ReallocAsyncCtx6 + 56 | 0; //@line 9233
    HEAP32[$322 >> 2] = $28; //@line 9234
    $323 = $ReallocAsyncCtx6 + 60 | 0; //@line 9235
    HEAP32[$323 >> 2] = $30; //@line 9236
    $324 = $ReallocAsyncCtx6 + 64 | 0; //@line 9237
    HEAP32[$324 >> 2] = $57; //@line 9238
    sp = STACKTOP; //@line 9239
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $16 | 0) >= ($18 | 0)) {
     $436 = ___async_retval; //@line 9247
     HEAP32[$436 >> 2] = $6; //@line 9248
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 9254
     HEAP32[$4 >> 2] = $426; //@line 9255
     $427 = $426; //@line 9256
     $429 = $16 - $427 + $18 | 0; //@line 9258
     HEAP16[$12 + 24 >> 1] = $429; //@line 9261
     if ($429 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $427; //@line 9266
      $436 = ___async_retval; //@line 9267
      HEAP32[$436 >> 2] = $6; //@line 9268
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 9273
    $436 = ___async_retval; //@line 9274
    HEAP32[$436 >> 2] = $6; //@line 9275
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 9281
 $436 = ___async_retval; //@line 9282
 HEAP32[$436 >> 2] = $6; //@line 9283
 return;
}
function _sn_coap_parser__async_cb_92($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $101 = 0, $106 = 0, $107 = 0, $112 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $185 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $292 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $329 = 0, $332 = 0, $333 = 0, $338 = 0, $341 = 0, $345 = 0, $348 = 0, $349 = 0, $354 = 0, $357 = 0, $361 = 0, $364 = 0, $365 = 0, $37 = 0, $370 = 0, $373 = 0, $377 = 0, $378 = 0, $383 = 0, $384 = 0, $389 = 0, $392 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $404 = 0, $405 = 0, $410 = 0, $413 = 0, $417 = 0, $418 = 0, $426 = 0, $427 = 0, $429 = 0, $436 = 0, $437 = 0, $54 = 0, $57 = 0, $59 = 0, $6 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $124$looptemp = 0, $246$looptemp = 0, $301$looptemp = 0, $338$looptemp = 0, $354$looptemp = 0, $370$looptemp = 0, $389$looptemp = 0, $410$looptemp = 0, $112$looptemp = 0;
 sp = STACKTOP; //@line 27
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 37
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 39
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 41
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 43
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 45
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 47
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 49
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 51
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 53
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 55
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 57
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 64 >> 2] | 0; //@line 65
   L3 : while (1) {
    $417 = HEAP32[$22 >> 2] | 0; //@line 67
    $418 = $417 - $16 | 0; //@line 68
    $37 = $417; //@line 71
    if (($418 | 0) > ($18 | 0)) {
     break L2;
    }
    if (!(($18 - $418 & 65535) << 16 >> 16)) {
     label = 91; //@line 78
     break;
    }
    $trunc277$i = HEAP8[$37 >> 0] | 0; //@line 81
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 91; //@line 84
     break;
    }
    $40 = $trunc277$i & 15; //@line 88
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 89
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$37 + 1 >> 0] | 0; //@line 101
      $$sink214$i = 13; //@line 101
      $$sink3$i = 1; //@line 101
      label = 7; //@line 102
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$37 + 1 >> 0] << 8) + 269 | 0; //@line 114
      $$sink214$i = HEAPU8[$37 + 2 >> 0] | 0; //@line 114
      $$sink3$i = 2; //@line 114
      label = 7; //@line 115
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 119
      $437 = $417; //@line 119
      $59 = $37; //@line 119
     }
    }
    if ((label | 0) == 7) {
     label = 0; //@line 123
     $54 = $37 + $$sink3$i | 0; //@line 125
     HEAP32[$4 >> 2] = $54; //@line 126
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 128
     $437 = $54; //@line 128
     $59 = $54; //@line 128
    }
    $57 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 131
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L2;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$59 + 1 >> 0] | 0; //@line 142
      $$sink216$i = 13; //@line 142
      $$sink8$i = 1; //@line 142
      label = 11; //@line 143
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$59 + 1 >> 0] << 8) + 269 | 0; //@line 155
      $$sink216$i = HEAPU8[$59 + 2 >> 0] | 0; //@line 155
      $$sink8$i = 2; //@line 155
      label = 11; //@line 156
      break;
     }
    default:
     {
      $$1202$in$i = $40; //@line 160
      $74 = $437; //@line 160
      $82 = $59; //@line 160
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 164
     $71 = $59 + $$sink8$i | 0; //@line 166
     HEAP32[$4 >> 2] = $71; //@line 167
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 169
     $74 = $71; //@line 169
     $82 = $71; //@line 169
    }
    $$1202$i = $$1202$in$i & 65535; //@line 171
    $75 = $20 - $74 & 65535; //@line 173
    $trunc$i = $57 & 65535; //@line 174
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 53; //@line 178
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$14 >> 2] | 0)) {
        label = 14; //@line 186
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 27; //@line 191
         break L3;
         break;
        }
       case 4:
        {
         label = 32; //@line 196
         break L3;
         break;
        }
       case 3:
        {
         label = 36; //@line 201
         break L3;
         break;
        }
       case 8:
        {
         label = 41; //@line 206
         break L3;
         break;
        }
       case 20:
        {
         label = 50; //@line 211
         break L3;
         break;
        }
       case 11:
        {
         label = 53; //@line 216
         break L3;
         break;
        }
       case 15:
        {
         label = 61; //@line 221
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $118 = $82 + 1 | 0; //@line 234
         HEAP32[$4 >> 2] = $118; //@line 235
         $119 = $$1202$in$i & 255; //@line 236
         if (!($119 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 239
         } else {
          $$045$i256$i = $119; //@line 241
          $$06$i255$i = 0; //@line 241
          $124 = $118; //@line 241
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 243
           $124$looptemp = $124;
           $124 = $124 + 1 | 0; //@line 245
           HEAP32[$4 >> 2] = $124; //@line 246
           $127 = $$06$i255$i << 8 | HEAPU8[$124$looptemp >> 0]; //@line 249
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $127; //@line 252
            break;
           } else {
            $$06$i255$i = $127; //@line 255
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 261
         $$reg2mem$0 = $57; //@line 262
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $237 = (HEAP32[$14 >> 2] | 0) + 28 | 0; //@line 272
         if ((HEAP32[$237 >> 2] | 0) != -1) {
          break L2;
         }
         $240 = $82 + 1 | 0; //@line 278
         HEAP32[$4 >> 2] = $240; //@line 279
         $241 = $$1202$in$i & 255; //@line 280
         if (!($241 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 283
         } else {
          $$045$i270$i = $241; //@line 285
          $$06$i269$i = 0; //@line 285
          $246 = $240; //@line 285
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 287
           $246$looptemp = $246;
           $246 = $246 + 1 | 0; //@line 289
           HEAP32[$4 >> 2] = $246; //@line 290
           $249 = $$06$i269$i << 8 | HEAPU8[$246$looptemp >> 0]; //@line 293
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $249; //@line 296
            break;
           } else {
            $$06$i269$i = $249; //@line 299
           }
          }
         }
         HEAP32[$237 >> 2] = $$0$lcssa$i272$i; //@line 303
         $$reg2mem$0 = $57; //@line 304
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $292 = (HEAP32[$14 >> 2] | 0) + 32 | 0; //@line 314
         if ((HEAP32[$292 >> 2] | 0) != -1) {
          break L2;
         }
         $295 = $82 + 1 | 0; //@line 320
         HEAP32[$4 >> 2] = $295; //@line 321
         $296 = $$1202$in$i & 255; //@line 322
         if (!($296 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 325
         } else {
          $$045$i263$i = $296; //@line 327
          $$06$i262$i = 0; //@line 327
          $301 = $295; //@line 327
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 329
           $301$looptemp = $301;
           $301 = $301 + 1 | 0; //@line 331
           HEAP32[$4 >> 2] = $301; //@line 332
           $304 = $$06$i262$i << 8 | HEAPU8[$301$looptemp >> 0]; //@line 335
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $304; //@line 338
            break;
           } else {
            $$06$i262$i = $304; //@line 341
           }
          }
         }
         HEAP32[$292 >> 2] = $$0$lcssa$i265$i; //@line 345
         $$reg2mem$0 = $57; //@line 346
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $329 = (HEAP32[$14 >> 2] | 0) + 40 | 0; //@line 356
         if ((HEAP32[$329 >> 2] | 0) != -1) {
          break L2;
         }
         $332 = $82 + 1 | 0; //@line 362
         HEAP32[$4 >> 2] = $332; //@line 363
         $333 = $$1202$in$i & 255; //@line 364
         if (!($333 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 367
         } else {
          $$045$i249$i = $333; //@line 369
          $$06$i248$i = 0; //@line 369
          $338 = $332; //@line 369
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 371
           $338$looptemp = $338;
           $338 = $338 + 1 | 0; //@line 373
           HEAP32[$4 >> 2] = $338; //@line 374
           $341 = $$06$i248$i << 8 | HEAPU8[$338$looptemp >> 0]; //@line 377
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $341; //@line 380
            break;
           } else {
            $$06$i248$i = $341; //@line 383
           }
          }
         }
         HEAP32[$329 >> 2] = $$0$lcssa$i251$i; //@line 387
         $$reg2mem$0 = $57; //@line 388
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          break L2;
         }
         $345 = (HEAP32[$14 >> 2] | 0) + 36 | 0; //@line 398
         if ((HEAP32[$345 >> 2] | 0) != -1) {
          break L2;
         }
         $348 = $82 + 1 | 0; //@line 404
         HEAP32[$4 >> 2] = $348; //@line 405
         $349 = $$1202$in$i & 255; //@line 406
         if (!($349 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 409
         } else {
          $$045$i242$i = $349; //@line 411
          $$06$i241$i = 0; //@line 411
          $354 = $348; //@line 411
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 413
           $354$looptemp = $354;
           $354 = $354 + 1 | 0; //@line 415
           HEAP32[$4 >> 2] = $354; //@line 416
           $357 = $$06$i241$i << 8 | HEAPU8[$354$looptemp >> 0]; //@line 419
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $357; //@line 422
            break;
           } else {
            $$06$i241$i = $357; //@line 425
           }
          }
         }
         HEAP32[$345 >> 2] = $$0$lcssa$i244$i; //@line 429
         $$reg2mem$0 = $57; //@line 430
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          break L2;
         }
         $361 = (HEAP32[$14 >> 2] | 0) + 12 | 0; //@line 440
         if ((HEAP32[$361 >> 2] | 0) != -1) {
          break L2;
         }
         $364 = $82 + 1 | 0; //@line 446
         HEAP32[$4 >> 2] = $364; //@line 447
         $365 = $$1202$in$i & 255; //@line 448
         if (!($365 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 451
         } else {
          $$045$i235$i = $365; //@line 453
          $$06$i234$i = 0; //@line 453
          $370 = $364; //@line 453
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 455
           $370$looptemp = $370;
           $370 = $370 + 1 | 0; //@line 457
           HEAP32[$4 >> 2] = $370; //@line 458
           $373 = $$06$i234$i << 8 | HEAPU8[$370$looptemp >> 0]; //@line 461
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $373; //@line 464
            break;
           } else {
            $$06$i234$i = $373; //@line 467
           }
          }
         }
         HEAP32[$361 >> 2] = $$0$lcssa$i237$i; //@line 471
         $$reg2mem$0 = $57; //@line 472
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $377 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 482
         $378 = HEAP8[$377 >> 0] | 0; //@line 483
         if ($378 & 1) {
          break L2;
         }
         HEAP8[$377 >> 0] = $378 | 1; //@line 490
         $383 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 492
         HEAP32[$4 >> 2] = $383; //@line 493
         $384 = $$1202$in$i & 255; //@line 494
         if (!($384 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 497
         } else {
          $$045$i228$i = $384; //@line 499
          $$06$i227$i = 0; //@line 499
          $389 = $383; //@line 499
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 501
           $389$looptemp = $389;
           $389 = $389 + 1 | 0; //@line 503
           HEAP32[$4 >> 2] = $389; //@line 504
           $392 = $$06$i227$i << 8 | HEAPU8[$389$looptemp >> 0]; //@line 507
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $392; //@line 510
            break;
           } else {
            $$06$i227$i = $392; //@line 513
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 519
         $$reg2mem$0 = $57; //@line 520
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          break L2;
         }
         $398 = (HEAP32[$14 >> 2] | 0) + 1 | 0; //@line 530
         $399 = HEAP8[$398 >> 0] | 0; //@line 531
         if ($399 & 2) {
          break L2;
         }
         HEAP8[$398 >> 0] = $399 | 2; //@line 538
         $404 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 540
         HEAP32[$4 >> 2] = $404; //@line 541
         $405 = $$1202$in$i & 255; //@line 542
         if (!($405 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 545
         } else {
          $$045$i221$i = $405; //@line 547
          $$06$i220$i = 0; //@line 547
          $410 = $404; //@line 547
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 549
           $410$looptemp = $410;
           $410 = $410 + 1 | 0; //@line 551
           HEAP32[$4 >> 2] = $410; //@line 552
           $413 = $$06$i220$i << 8 | HEAPU8[$410$looptemp >> 0]; //@line 555
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $413; //@line 558
            break;
           } else {
            $$06$i220$i = $413; //@line 561
           }
          }
         }
         HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 567
         $$reg2mem$0 = $57; //@line 568
         continue L3;
         break;
        }
       default:
        {
         break L2;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       break L2;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     break L2;
    }
    if ((HEAP32[$2 >> 2] | 0) != -1) {
     break L2;
    }
    $106 = $82 + 1 | 0; //@line 595
    HEAP32[$4 >> 2] = $106; //@line 596
    $107 = $$1202$in$i & 255; //@line 597
    if (!($107 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 600
    } else {
     $$045$i$i = $107; //@line 602
     $$06$i$i = 0; //@line 602
     $112 = $106; //@line 602
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 604
      $112$looptemp = $112;
      $112 = $112 + 1 | 0; //@line 606
      HEAP32[$4 >> 2] = $112; //@line 607
      $115 = $$06$i$i << 8 | HEAPU8[$112$looptemp >> 0]; //@line 610
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $115; //@line 613
       break;
      } else {
       $$06$i$i = $115; //@line 616
      }
     }
    }
    HEAP32[$2 >> 2] = $$0$lcssa$i$i; //@line 620
    $$reg2mem$0 = $57; //@line 621
   }
   if ((label | 0) == 14) {
    $78 = HEAP32[$10 >> 2] | 0; //@line 624
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(84) | 0; //@line 625
    $79 = FUNCTION_TABLE_ii[$78 & 15](68) | 0; //@line 626
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 629
     $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 630
     HEAP32[$80 >> 2] = $2; //@line 631
     $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 632
     HEAP32[$81 >> 2] = $82; //@line 633
     $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 634
     HEAP32[$83 >> 2] = $4; //@line 635
     $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 636
     HEAP32[$84 >> 2] = $$1202$in$i; //@line 637
     $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 638
     HEAP32[$85 >> 2] = $6; //@line 639
     $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 640
     HEAP32[$86 >> 2] = $8; //@line 641
     $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 642
     HEAP32[$87 >> 2] = $10; //@line 643
     $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 644
     HEAP32[$88 >> 2] = $12; //@line 645
     $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 646
     HEAP32[$89 >> 2] = $14; //@line 647
     $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 648
     HEAP16[$90 >> 1] = $trunc$i; //@line 649
     $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 650
     HEAP16[$91 >> 1] = $$1202$i; //@line 651
     $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 652
     HEAP32[$92 >> 2] = $16; //@line 653
     $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 654
     HEAP32[$93 >> 2] = $18; //@line 655
     $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 656
     HEAP32[$94 >> 2] = $20; //@line 657
     $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 658
     HEAP32[$95 >> 2] = $22; //@line 659
     $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 660
     HEAP32[$96 >> 2] = $57; //@line 661
     $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 662
     HEAP32[$97 >> 2] = $24; //@line 663
     $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 664
     HEAP32[$98 >> 2] = $26; //@line 665
     $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 666
     HEAP16[$99 >> 1] = $75; //@line 667
     $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 668
     HEAP32[$100 >> 2] = $28; //@line 669
     $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 670
     HEAP32[$101 >> 2] = $30; //@line 671
     sp = STACKTOP; //@line 672
     return;
    }
    HEAP32[___async_retval >> 2] = $79; //@line 676
    ___async_unwind = 0; //@line 677
    HEAP32[$ReallocAsyncCtx3 >> 2] = 50; //@line 678
    $80 = $ReallocAsyncCtx3 + 4 | 0; //@line 679
    HEAP32[$80 >> 2] = $2; //@line 680
    $81 = $ReallocAsyncCtx3 + 8 | 0; //@line 681
    HEAP32[$81 >> 2] = $82; //@line 682
    $83 = $ReallocAsyncCtx3 + 12 | 0; //@line 683
    HEAP32[$83 >> 2] = $4; //@line 684
    $84 = $ReallocAsyncCtx3 + 16 | 0; //@line 685
    HEAP32[$84 >> 2] = $$1202$in$i; //@line 686
    $85 = $ReallocAsyncCtx3 + 20 | 0; //@line 687
    HEAP32[$85 >> 2] = $6; //@line 688
    $86 = $ReallocAsyncCtx3 + 24 | 0; //@line 689
    HEAP32[$86 >> 2] = $8; //@line 690
    $87 = $ReallocAsyncCtx3 + 28 | 0; //@line 691
    HEAP32[$87 >> 2] = $10; //@line 692
    $88 = $ReallocAsyncCtx3 + 32 | 0; //@line 693
    HEAP32[$88 >> 2] = $12; //@line 694
    $89 = $ReallocAsyncCtx3 + 36 | 0; //@line 695
    HEAP32[$89 >> 2] = $14; //@line 696
    $90 = $ReallocAsyncCtx3 + 40 | 0; //@line 697
    HEAP16[$90 >> 1] = $trunc$i; //@line 698
    $91 = $ReallocAsyncCtx3 + 42 | 0; //@line 699
    HEAP16[$91 >> 1] = $$1202$i; //@line 700
    $92 = $ReallocAsyncCtx3 + 44 | 0; //@line 701
    HEAP32[$92 >> 2] = $16; //@line 702
    $93 = $ReallocAsyncCtx3 + 48 | 0; //@line 703
    HEAP32[$93 >> 2] = $18; //@line 704
    $94 = $ReallocAsyncCtx3 + 52 | 0; //@line 705
    HEAP32[$94 >> 2] = $20; //@line 706
    $95 = $ReallocAsyncCtx3 + 56 | 0; //@line 707
    HEAP32[$95 >> 2] = $22; //@line 708
    $96 = $ReallocAsyncCtx3 + 60 | 0; //@line 709
    HEAP32[$96 >> 2] = $57; //@line 710
    $97 = $ReallocAsyncCtx3 + 64 | 0; //@line 711
    HEAP32[$97 >> 2] = $24; //@line 712
    $98 = $ReallocAsyncCtx3 + 68 | 0; //@line 713
    HEAP32[$98 >> 2] = $26; //@line 714
    $99 = $ReallocAsyncCtx3 + 72 | 0; //@line 715
    HEAP16[$99 >> 1] = $75; //@line 716
    $100 = $ReallocAsyncCtx3 + 76 | 0; //@line 717
    HEAP32[$100 >> 2] = $28; //@line 718
    $101 = $ReallocAsyncCtx3 + 80 | 0; //@line 719
    HEAP32[$101 >> 2] = $30; //@line 720
    sp = STACKTOP; //@line 721
    return;
   } else if ((label | 0) == 27) {
    $131 = $$1202$in$i & 65535; //@line 725
    if (($$1202$i + -1 & 65535) > 1033) {
     break;
    }
    $134 = HEAP32[$14 >> 2] | 0; //@line 731
    if (HEAP32[$134 + 44 >> 2] | 0) {
     break;
    }
    HEAP16[$134 + 2 >> 1] = $$1202$i; //@line 739
    $139 = $82 + 1 | 0; //@line 740
    HEAP32[$4 >> 2] = $139; //@line 741
    $140 = HEAP32[$10 >> 2] | 0; //@line 742
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 743
    $141 = FUNCTION_TABLE_ii[$140 & 15]($$1202$i) | 0; //@line 744
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 747
     $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 748
     HEAP32[$142 >> 2] = $2; //@line 749
     $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 750
     HEAP32[$143 >> 2] = $4; //@line 751
     $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 752
     HEAP32[$144 >> 2] = $6; //@line 753
     $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 754
     HEAP32[$145 >> 2] = $8; //@line 755
     $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 756
     HEAP32[$146 >> 2] = $10; //@line 757
     $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 758
     HEAP32[$147 >> 2] = $12; //@line 759
     $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 760
     HEAP32[$148 >> 2] = $14; //@line 761
     $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 762
     HEAP32[$149 >> 2] = $16; //@line 763
     $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 764
     HEAP32[$150 >> 2] = $18; //@line 765
     $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 766
     HEAP32[$151 >> 2] = $20; //@line 767
     $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 768
     HEAP32[$152 >> 2] = $22; //@line 769
     $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 770
     HEAP32[$153 >> 2] = $24; //@line 771
     $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 772
     HEAP32[$154 >> 2] = $26; //@line 773
     $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 774
     HEAP32[$155 >> 2] = $28; //@line 775
     $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 776
     HEAP32[$156 >> 2] = $30; //@line 777
     $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 778
     HEAP32[$157 >> 2] = $57; //@line 779
     $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 780
     HEAP32[$158 >> 2] = $139; //@line 781
     $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 782
     HEAP32[$159 >> 2] = $131; //@line 783
     sp = STACKTOP; //@line 784
     return;
    }
    HEAP32[___async_retval >> 2] = $141; //@line 788
    ___async_unwind = 0; //@line 789
    HEAP32[$ReallocAsyncCtx4 >> 2] = 51; //@line 790
    $142 = $ReallocAsyncCtx4 + 4 | 0; //@line 791
    HEAP32[$142 >> 2] = $2; //@line 792
    $143 = $ReallocAsyncCtx4 + 8 | 0; //@line 793
    HEAP32[$143 >> 2] = $4; //@line 794
    $144 = $ReallocAsyncCtx4 + 12 | 0; //@line 795
    HEAP32[$144 >> 2] = $6; //@line 796
    $145 = $ReallocAsyncCtx4 + 16 | 0; //@line 797
    HEAP32[$145 >> 2] = $8; //@line 798
    $146 = $ReallocAsyncCtx4 + 20 | 0; //@line 799
    HEAP32[$146 >> 2] = $10; //@line 800
    $147 = $ReallocAsyncCtx4 + 24 | 0; //@line 801
    HEAP32[$147 >> 2] = $12; //@line 802
    $148 = $ReallocAsyncCtx4 + 28 | 0; //@line 803
    HEAP32[$148 >> 2] = $14; //@line 804
    $149 = $ReallocAsyncCtx4 + 32 | 0; //@line 805
    HEAP32[$149 >> 2] = $16; //@line 806
    $150 = $ReallocAsyncCtx4 + 36 | 0; //@line 807
    HEAP32[$150 >> 2] = $18; //@line 808
    $151 = $ReallocAsyncCtx4 + 40 | 0; //@line 809
    HEAP32[$151 >> 2] = $20; //@line 810
    $152 = $ReallocAsyncCtx4 + 44 | 0; //@line 811
    HEAP32[$152 >> 2] = $22; //@line 812
    $153 = $ReallocAsyncCtx4 + 48 | 0; //@line 813
    HEAP32[$153 >> 2] = $24; //@line 814
    $154 = $ReallocAsyncCtx4 + 52 | 0; //@line 815
    HEAP32[$154 >> 2] = $26; //@line 816
    $155 = $ReallocAsyncCtx4 + 56 | 0; //@line 817
    HEAP32[$155 >> 2] = $28; //@line 818
    $156 = $ReallocAsyncCtx4 + 60 | 0; //@line 819
    HEAP32[$156 >> 2] = $30; //@line 820
    $157 = $ReallocAsyncCtx4 + 64 | 0; //@line 821
    HEAP32[$157 >> 2] = $57; //@line 822
    $158 = $ReallocAsyncCtx4 + 68 | 0; //@line 823
    HEAP32[$158 >> 2] = $139; //@line 824
    $159 = $ReallocAsyncCtx4 + 72 | 0; //@line 825
    HEAP32[$159 >> 2] = $131; //@line 826
    sp = STACKTOP; //@line 827
    return;
   } else if ((label | 0) == 32) {
    $161 = HEAP32[$14 >> 2] | 0; //@line 831
    $ReallocAsyncCtx10 = _emscripten_realloc_async_context(68) | 0; //@line 833
    $163 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $161 + 48 | 0, $161, 4, $$1202$i) | 0; //@line 834
    if (___async) {
     HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 837
     $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 838
     HEAP32[$164 >> 2] = $2; //@line 839
     $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 840
     HEAP32[$165 >> 2] = $4; //@line 841
     $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 842
     HEAP32[$166 >> 2] = $6; //@line 843
     $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 844
     HEAP32[$167 >> 2] = $8; //@line 845
     $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 846
     HEAP32[$168 >> 2] = $10; //@line 847
     $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 848
     HEAP32[$169 >> 2] = $12; //@line 849
     $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 850
     HEAP32[$170 >> 2] = $14; //@line 851
     $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 852
     HEAP32[$171 >> 2] = $16; //@line 853
     $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 854
     HEAP32[$172 >> 2] = $18; //@line 855
     $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 856
     HEAP32[$173 >> 2] = $20; //@line 857
     $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 858
     HEAP32[$174 >> 2] = $22; //@line 859
     $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 860
     HEAP32[$175 >> 2] = $24; //@line 861
     $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 862
     HEAP32[$176 >> 2] = $26; //@line 863
     $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 864
     HEAP32[$177 >> 2] = $28; //@line 865
     $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 866
     HEAP32[$178 >> 2] = $30; //@line 867
     $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 868
     HEAP32[$179 >> 2] = $57; //@line 869
     sp = STACKTOP; //@line 870
     return;
    }
    HEAP8[___async_retval >> 0] = $163; //@line 874
    ___async_unwind = 0; //@line 875
    HEAP32[$ReallocAsyncCtx10 >> 2] = 52; //@line 876
    $164 = $ReallocAsyncCtx10 + 4 | 0; //@line 877
    HEAP32[$164 >> 2] = $2; //@line 878
    $165 = $ReallocAsyncCtx10 + 8 | 0; //@line 879
    HEAP32[$165 >> 2] = $4; //@line 880
    $166 = $ReallocAsyncCtx10 + 12 | 0; //@line 881
    HEAP32[$166 >> 2] = $6; //@line 882
    $167 = $ReallocAsyncCtx10 + 16 | 0; //@line 883
    HEAP32[$167 >> 2] = $8; //@line 884
    $168 = $ReallocAsyncCtx10 + 20 | 0; //@line 885
    HEAP32[$168 >> 2] = $10; //@line 886
    $169 = $ReallocAsyncCtx10 + 24 | 0; //@line 887
    HEAP32[$169 >> 2] = $12; //@line 888
    $170 = $ReallocAsyncCtx10 + 28 | 0; //@line 889
    HEAP32[$170 >> 2] = $14; //@line 890
    $171 = $ReallocAsyncCtx10 + 32 | 0; //@line 891
    HEAP32[$171 >> 2] = $16; //@line 892
    $172 = $ReallocAsyncCtx10 + 36 | 0; //@line 893
    HEAP32[$172 >> 2] = $18; //@line 894
    $173 = $ReallocAsyncCtx10 + 40 | 0; //@line 895
    HEAP32[$173 >> 2] = $20; //@line 896
    $174 = $ReallocAsyncCtx10 + 44 | 0; //@line 897
    HEAP32[$174 >> 2] = $22; //@line 898
    $175 = $ReallocAsyncCtx10 + 48 | 0; //@line 899
    HEAP32[$175 >> 2] = $24; //@line 900
    $176 = $ReallocAsyncCtx10 + 52 | 0; //@line 901
    HEAP32[$176 >> 2] = $26; //@line 902
    $177 = $ReallocAsyncCtx10 + 56 | 0; //@line 903
    HEAP32[$177 >> 2] = $28; //@line 904
    $178 = $ReallocAsyncCtx10 + 60 | 0; //@line 905
    HEAP32[$178 >> 2] = $30; //@line 906
    $179 = $ReallocAsyncCtx10 + 64 | 0; //@line 907
    HEAP32[$179 >> 2] = $57; //@line 908
    sp = STACKTOP; //@line 909
    return;
   } else if ((label | 0) == 36) {
    $182 = $$1202$in$i & 65535; //@line 913
    if (($$1202$i + -1 & 65535) > 254) {
     break;
    }
    $185 = HEAP32[$14 >> 2] | 0; //@line 919
    if (HEAP32[$185 + 52 >> 2] | 0) {
     break;
    }
    HEAP16[$185 + 4 >> 1] = $$1202$i; //@line 927
    $190 = $82 + 1 | 0; //@line 928
    HEAP32[$4 >> 2] = $190; //@line 929
    $191 = HEAP32[$10 >> 2] | 0; //@line 930
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 931
    $192 = FUNCTION_TABLE_ii[$191 & 15]($$1202$i) | 0; //@line 932
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 935
     $193 = $ReallocAsyncCtx5 + 4 | 0; //@line 936
     HEAP32[$193 >> 2] = $2; //@line 937
     $194 = $ReallocAsyncCtx5 + 8 | 0; //@line 938
     HEAP32[$194 >> 2] = $4; //@line 939
     $195 = $ReallocAsyncCtx5 + 12 | 0; //@line 940
     HEAP32[$195 >> 2] = $6; //@line 941
     $196 = $ReallocAsyncCtx5 + 16 | 0; //@line 942
     HEAP32[$196 >> 2] = $8; //@line 943
     $197 = $ReallocAsyncCtx5 + 20 | 0; //@line 944
     HEAP32[$197 >> 2] = $10; //@line 945
     $198 = $ReallocAsyncCtx5 + 24 | 0; //@line 946
     HEAP32[$198 >> 2] = $12; //@line 947
     $199 = $ReallocAsyncCtx5 + 28 | 0; //@line 948
     HEAP32[$199 >> 2] = $14; //@line 949
     $200 = $ReallocAsyncCtx5 + 32 | 0; //@line 950
     HEAP32[$200 >> 2] = $16; //@line 951
     $201 = $ReallocAsyncCtx5 + 36 | 0; //@line 952
     HEAP32[$201 >> 2] = $18; //@line 953
     $202 = $ReallocAsyncCtx5 + 40 | 0; //@line 954
     HEAP32[$202 >> 2] = $20; //@line 955
     $203 = $ReallocAsyncCtx5 + 44 | 0; //@line 956
     HEAP32[$203 >> 2] = $22; //@line 957
     $204 = $ReallocAsyncCtx5 + 48 | 0; //@line 958
     HEAP32[$204 >> 2] = $24; //@line 959
     $205 = $ReallocAsyncCtx5 + 52 | 0; //@line 960
     HEAP32[$205 >> 2] = $26; //@line 961
     $206 = $ReallocAsyncCtx5 + 56 | 0; //@line 962
     HEAP32[$206 >> 2] = $28; //@line 963
     $207 = $ReallocAsyncCtx5 + 60 | 0; //@line 964
     HEAP32[$207 >> 2] = $30; //@line 965
     $208 = $ReallocAsyncCtx5 + 64 | 0; //@line 966
     HEAP32[$208 >> 2] = $57; //@line 967
     $209 = $ReallocAsyncCtx5 + 68 | 0; //@line 968
     HEAP32[$209 >> 2] = $190; //@line 969
     $210 = $ReallocAsyncCtx5 + 72 | 0; //@line 970
     HEAP32[$210 >> 2] = $182; //@line 971
     sp = STACKTOP; //@line 972
     return;
    }
    HEAP32[___async_retval >> 2] = $192; //@line 976
    ___async_unwind = 0; //@line 977
    HEAP32[$ReallocAsyncCtx5 >> 2] = 53; //@line 978
    $193 = $ReallocAsyncCtx5 + 4 | 0; //@line 979
    HEAP32[$193 >> 2] = $2; //@line 980
    $194 = $ReallocAsyncCtx5 + 8 | 0; //@line 981
    HEAP32[$194 >> 2] = $4; //@line 982
    $195 = $ReallocAsyncCtx5 + 12 | 0; //@line 983
    HEAP32[$195 >> 2] = $6; //@line 984
    $196 = $ReallocAsyncCtx5 + 16 | 0; //@line 985
    HEAP32[$196 >> 2] = $8; //@line 986
    $197 = $ReallocAsyncCtx5 + 20 | 0; //@line 987
    HEAP32[$197 >> 2] = $10; //@line 988
    $198 = $ReallocAsyncCtx5 + 24 | 0; //@line 989
    HEAP32[$198 >> 2] = $12; //@line 990
    $199 = $ReallocAsyncCtx5 + 28 | 0; //@line 991
    HEAP32[$199 >> 2] = $14; //@line 992
    $200 = $ReallocAsyncCtx5 + 32 | 0; //@line 993
    HEAP32[$200 >> 2] = $16; //@line 994
    $201 = $ReallocAsyncCtx5 + 36 | 0; //@line 995
    HEAP32[$201 >> 2] = $18; //@line 996
    $202 = $ReallocAsyncCtx5 + 40 | 0; //@line 997
    HEAP32[$202 >> 2] = $20; //@line 998
    $203 = $ReallocAsyncCtx5 + 44 | 0; //@line 999
    HEAP32[$203 >> 2] = $22; //@line 1000
    $204 = $ReallocAsyncCtx5 + 48 | 0; //@line 1001
    HEAP32[$204 >> 2] = $24; //@line 1002
    $205 = $ReallocAsyncCtx5 + 52 | 0; //@line 1003
    HEAP32[$205 >> 2] = $26; //@line 1004
    $206 = $ReallocAsyncCtx5 + 56 | 0; //@line 1005
    HEAP32[$206 >> 2] = $28; //@line 1006
    $207 = $ReallocAsyncCtx5 + 60 | 0; //@line 1007
    HEAP32[$207 >> 2] = $30; //@line 1008
    $208 = $ReallocAsyncCtx5 + 64 | 0; //@line 1009
    HEAP32[$208 >> 2] = $57; //@line 1010
    $209 = $ReallocAsyncCtx5 + 68 | 0; //@line 1011
    HEAP32[$209 >> 2] = $190; //@line 1012
    $210 = $ReallocAsyncCtx5 + 72 | 0; //@line 1013
    HEAP32[$210 >> 2] = $182; //@line 1014
    sp = STACKTOP; //@line 1015
    return;
   } else if ((label | 0) == 41) {
    $212 = HEAP32[$14 >> 2] | 0; //@line 1019
    $213 = $212 + 56 | 0; //@line 1020
    if (HEAP32[$213 >> 2] | 0) {
     break;
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 1027
    $217 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $213, $212 + 6 | 0, 8, $$1202$i) | 0; //@line 1028
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 1031
     $218 = $ReallocAsyncCtx9 + 4 | 0; //@line 1032
     HEAP32[$218 >> 2] = $2; //@line 1033
     $219 = $ReallocAsyncCtx9 + 8 | 0; //@line 1034
     HEAP32[$219 >> 2] = $4; //@line 1035
     $220 = $ReallocAsyncCtx9 + 12 | 0; //@line 1036
     HEAP32[$220 >> 2] = $6; //@line 1037
     $221 = $ReallocAsyncCtx9 + 16 | 0; //@line 1038
     HEAP32[$221 >> 2] = $8; //@line 1039
     $222 = $ReallocAsyncCtx9 + 20 | 0; //@line 1040
     HEAP32[$222 >> 2] = $10; //@line 1041
     $223 = $ReallocAsyncCtx9 + 24 | 0; //@line 1042
     HEAP32[$223 >> 2] = $12; //@line 1043
     $224 = $ReallocAsyncCtx9 + 28 | 0; //@line 1044
     HEAP32[$224 >> 2] = $14; //@line 1045
     $225 = $ReallocAsyncCtx9 + 32 | 0; //@line 1046
     HEAP32[$225 >> 2] = $16; //@line 1047
     $226 = $ReallocAsyncCtx9 + 36 | 0; //@line 1048
     HEAP32[$226 >> 2] = $18; //@line 1049
     $227 = $ReallocAsyncCtx9 + 40 | 0; //@line 1050
     HEAP32[$227 >> 2] = $20; //@line 1051
     $228 = $ReallocAsyncCtx9 + 44 | 0; //@line 1052
     HEAP32[$228 >> 2] = $22; //@line 1053
     $229 = $ReallocAsyncCtx9 + 48 | 0; //@line 1054
     HEAP32[$229 >> 2] = $24; //@line 1055
     $230 = $ReallocAsyncCtx9 + 52 | 0; //@line 1056
     HEAP32[$230 >> 2] = $26; //@line 1057
     $231 = $ReallocAsyncCtx9 + 56 | 0; //@line 1058
     HEAP32[$231 >> 2] = $28; //@line 1059
     $232 = $ReallocAsyncCtx9 + 60 | 0; //@line 1060
     HEAP32[$232 >> 2] = $30; //@line 1061
     $233 = $ReallocAsyncCtx9 + 64 | 0; //@line 1062
     HEAP32[$233 >> 2] = $57; //@line 1063
     sp = STACKTOP; //@line 1064
     return;
    }
    HEAP8[___async_retval >> 0] = $217; //@line 1068
    ___async_unwind = 0; //@line 1069
    HEAP32[$ReallocAsyncCtx9 >> 2] = 54; //@line 1070
    $218 = $ReallocAsyncCtx9 + 4 | 0; //@line 1071
    HEAP32[$218 >> 2] = $2; //@line 1072
    $219 = $ReallocAsyncCtx9 + 8 | 0; //@line 1073
    HEAP32[$219 >> 2] = $4; //@line 1074
    $220 = $ReallocAsyncCtx9 + 12 | 0; //@line 1075
    HEAP32[$220 >> 2] = $6; //@line 1076
    $221 = $ReallocAsyncCtx9 + 16 | 0; //@line 1077
    HEAP32[$221 >> 2] = $8; //@line 1078
    $222 = $ReallocAsyncCtx9 + 20 | 0; //@line 1079
    HEAP32[$222 >> 2] = $10; //@line 1080
    $223 = $ReallocAsyncCtx9 + 24 | 0; //@line 1081
    HEAP32[$223 >> 2] = $12; //@line 1082
    $224 = $ReallocAsyncCtx9 + 28 | 0; //@line 1083
    HEAP32[$224 >> 2] = $14; //@line 1084
    $225 = $ReallocAsyncCtx9 + 32 | 0; //@line 1085
    HEAP32[$225 >> 2] = $16; //@line 1086
    $226 = $ReallocAsyncCtx9 + 36 | 0; //@line 1087
    HEAP32[$226 >> 2] = $18; //@line 1088
    $227 = $ReallocAsyncCtx9 + 40 | 0; //@line 1089
    HEAP32[$227 >> 2] = $20; //@line 1090
    $228 = $ReallocAsyncCtx9 + 44 | 0; //@line 1091
    HEAP32[$228 >> 2] = $22; //@line 1092
    $229 = $ReallocAsyncCtx9 + 48 | 0; //@line 1093
    HEAP32[$229 >> 2] = $24; //@line 1094
    $230 = $ReallocAsyncCtx9 + 52 | 0; //@line 1095
    HEAP32[$230 >> 2] = $26; //@line 1096
    $231 = $ReallocAsyncCtx9 + 56 | 0; //@line 1097
    HEAP32[$231 >> 2] = $28; //@line 1098
    $232 = $ReallocAsyncCtx9 + 60 | 0; //@line 1099
    HEAP32[$232 >> 2] = $30; //@line 1100
    $233 = $ReallocAsyncCtx9 + 64 | 0; //@line 1101
    HEAP32[$233 >> 2] = $57; //@line 1102
    sp = STACKTOP; //@line 1103
    return;
   } else if ((label | 0) == 50) {
    $251 = HEAP32[$14 >> 2] | 0; //@line 1107
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(68) | 0; //@line 1110
    $254 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $251 + 60 | 0, $251 + 8 | 0, 20, $$1202$i) | 0; //@line 1111
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 1114
     $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 1115
     HEAP32[$255 >> 2] = $2; //@line 1116
     $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 1117
     HEAP32[$256 >> 2] = $4; //@line 1118
     $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 1119
     HEAP32[$257 >> 2] = $6; //@line 1120
     $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 1121
     HEAP32[$258 >> 2] = $8; //@line 1122
     $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 1123
     HEAP32[$259 >> 2] = $10; //@line 1124
     $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 1125
     HEAP32[$260 >> 2] = $12; //@line 1126
     $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 1127
     HEAP32[$261 >> 2] = $14; //@line 1128
     $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 1129
     HEAP32[$262 >> 2] = $16; //@line 1130
     $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 1131
     HEAP32[$263 >> 2] = $18; //@line 1132
     $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 1133
     HEAP32[$264 >> 2] = $20; //@line 1134
     $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 1135
     HEAP32[$265 >> 2] = $22; //@line 1136
     $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 1137
     HEAP32[$266 >> 2] = $24; //@line 1138
     $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 1139
     HEAP32[$267 >> 2] = $26; //@line 1140
     $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 1141
     HEAP32[$268 >> 2] = $28; //@line 1142
     $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 1143
     HEAP32[$269 >> 2] = $30; //@line 1144
     $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 1145
     HEAP32[$270 >> 2] = $57; //@line 1146
     sp = STACKTOP; //@line 1147
     return;
    }
    HEAP8[___async_retval >> 0] = $254; //@line 1151
    ___async_unwind = 0; //@line 1152
    HEAP32[$ReallocAsyncCtx8 >> 2] = 55; //@line 1153
    $255 = $ReallocAsyncCtx8 + 4 | 0; //@line 1154
    HEAP32[$255 >> 2] = $2; //@line 1155
    $256 = $ReallocAsyncCtx8 + 8 | 0; //@line 1156
    HEAP32[$256 >> 2] = $4; //@line 1157
    $257 = $ReallocAsyncCtx8 + 12 | 0; //@line 1158
    HEAP32[$257 >> 2] = $6; //@line 1159
    $258 = $ReallocAsyncCtx8 + 16 | 0; //@line 1160
    HEAP32[$258 >> 2] = $8; //@line 1161
    $259 = $ReallocAsyncCtx8 + 20 | 0; //@line 1162
    HEAP32[$259 >> 2] = $10; //@line 1163
    $260 = $ReallocAsyncCtx8 + 24 | 0; //@line 1164
    HEAP32[$260 >> 2] = $12; //@line 1165
    $261 = $ReallocAsyncCtx8 + 28 | 0; //@line 1166
    HEAP32[$261 >> 2] = $14; //@line 1167
    $262 = $ReallocAsyncCtx8 + 32 | 0; //@line 1168
    HEAP32[$262 >> 2] = $16; //@line 1169
    $263 = $ReallocAsyncCtx8 + 36 | 0; //@line 1170
    HEAP32[$263 >> 2] = $18; //@line 1171
    $264 = $ReallocAsyncCtx8 + 40 | 0; //@line 1172
    HEAP32[$264 >> 2] = $20; //@line 1173
    $265 = $ReallocAsyncCtx8 + 44 | 0; //@line 1174
    HEAP32[$265 >> 2] = $22; //@line 1175
    $266 = $ReallocAsyncCtx8 + 48 | 0; //@line 1176
    HEAP32[$266 >> 2] = $24; //@line 1177
    $267 = $ReallocAsyncCtx8 + 52 | 0; //@line 1178
    HEAP32[$267 >> 2] = $26; //@line 1179
    $268 = $ReallocAsyncCtx8 + 56 | 0; //@line 1180
    HEAP32[$268 >> 2] = $28; //@line 1181
    $269 = $ReallocAsyncCtx8 + 60 | 0; //@line 1182
    HEAP32[$269 >> 2] = $30; //@line 1183
    $270 = $ReallocAsyncCtx8 + 64 | 0; //@line 1184
    HEAP32[$270 >> 2] = $57; //@line 1185
    sp = STACKTOP; //@line 1186
    return;
   } else if ((label | 0) == 53) {
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 1190
    $272 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $28, $30, 11, $$1202$i) | 0; //@line 1191
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 1194
     $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 1195
     HEAP32[$273 >> 2] = $2; //@line 1196
     $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 1197
     HEAP32[$274 >> 2] = $4; //@line 1198
     $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 1199
     HEAP32[$275 >> 2] = $6; //@line 1200
     $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 1201
     HEAP32[$276 >> 2] = $8; //@line 1202
     $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 1203
     HEAP32[$277 >> 2] = $10; //@line 1204
     $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 1205
     HEAP32[$278 >> 2] = $12; //@line 1206
     $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 1207
     HEAP32[$279 >> 2] = $14; //@line 1208
     $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 1209
     HEAP32[$280 >> 2] = $16; //@line 1210
     $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 1211
     HEAP32[$281 >> 2] = $18; //@line 1212
     $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 1213
     HEAP32[$282 >> 2] = $20; //@line 1214
     $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 1215
     HEAP32[$283 >> 2] = $22; //@line 1216
     $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 1217
     HEAP32[$284 >> 2] = $24; //@line 1218
     $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 1219
     HEAP32[$285 >> 2] = $26; //@line 1220
     $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 1221
     HEAP32[$286 >> 2] = $28; //@line 1222
     $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 1223
     HEAP32[$287 >> 2] = $30; //@line 1224
     $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 1225
     HEAP32[$288 >> 2] = $57; //@line 1226
     sp = STACKTOP; //@line 1227
     return;
    }
    HEAP8[___async_retval >> 0] = $272; //@line 1231
    ___async_unwind = 0; //@line 1232
    HEAP32[$ReallocAsyncCtx7 >> 2] = 56; //@line 1233
    $273 = $ReallocAsyncCtx7 + 4 | 0; //@line 1234
    HEAP32[$273 >> 2] = $2; //@line 1235
    $274 = $ReallocAsyncCtx7 + 8 | 0; //@line 1236
    HEAP32[$274 >> 2] = $4; //@line 1237
    $275 = $ReallocAsyncCtx7 + 12 | 0; //@line 1238
    HEAP32[$275 >> 2] = $6; //@line 1239
    $276 = $ReallocAsyncCtx7 + 16 | 0; //@line 1240
    HEAP32[$276 >> 2] = $8; //@line 1241
    $277 = $ReallocAsyncCtx7 + 20 | 0; //@line 1242
    HEAP32[$277 >> 2] = $10; //@line 1243
    $278 = $ReallocAsyncCtx7 + 24 | 0; //@line 1244
    HEAP32[$278 >> 2] = $12; //@line 1245
    $279 = $ReallocAsyncCtx7 + 28 | 0; //@line 1246
    HEAP32[$279 >> 2] = $14; //@line 1247
    $280 = $ReallocAsyncCtx7 + 32 | 0; //@line 1248
    HEAP32[$280 >> 2] = $16; //@line 1249
    $281 = $ReallocAsyncCtx7 + 36 | 0; //@line 1250
    HEAP32[$281 >> 2] = $18; //@line 1251
    $282 = $ReallocAsyncCtx7 + 40 | 0; //@line 1252
    HEAP32[$282 >> 2] = $20; //@line 1253
    $283 = $ReallocAsyncCtx7 + 44 | 0; //@line 1254
    HEAP32[$283 >> 2] = $22; //@line 1255
    $284 = $ReallocAsyncCtx7 + 48 | 0; //@line 1256
    HEAP32[$284 >> 2] = $24; //@line 1257
    $285 = $ReallocAsyncCtx7 + 52 | 0; //@line 1258
    HEAP32[$285 >> 2] = $26; //@line 1259
    $286 = $ReallocAsyncCtx7 + 56 | 0; //@line 1260
    HEAP32[$286 >> 2] = $28; //@line 1261
    $287 = $ReallocAsyncCtx7 + 60 | 0; //@line 1262
    HEAP32[$287 >> 2] = $30; //@line 1263
    $288 = $ReallocAsyncCtx7 + 64 | 0; //@line 1264
    HEAP32[$288 >> 2] = $57; //@line 1265
    sp = STACKTOP; //@line 1266
    return;
   } else if ((label | 0) == 61) {
    $306 = HEAP32[$14 >> 2] | 0; //@line 1270
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 1273
    $309 = _sn_coap_parser_options_parse_multiple_options($26, $4, $75, $306 + 64 | 0, $306 + 10 | 0, 15, $$1202$i) | 0; //@line 1274
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 1277
     $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 1278
     HEAP32[$310 >> 2] = $2; //@line 1279
     $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 1280
     HEAP32[$311 >> 2] = $4; //@line 1281
     $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 1282
     HEAP32[$312 >> 2] = $6; //@line 1283
     $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 1284
     HEAP32[$313 >> 2] = $8; //@line 1285
     $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 1286
     HEAP32[$314 >> 2] = $10; //@line 1287
     $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 1288
     HEAP32[$315 >> 2] = $12; //@line 1289
     $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 1290
     HEAP32[$316 >> 2] = $14; //@line 1291
     $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 1292
     HEAP32[$317 >> 2] = $16; //@line 1293
     $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 1294
     HEAP32[$318 >> 2] = $18; //@line 1295
     $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 1296
     HEAP32[$319 >> 2] = $20; //@line 1297
     $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 1298
     HEAP32[$320 >> 2] = $22; //@line 1299
     $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 1300
     HEAP32[$321 >> 2] = $24; //@line 1301
     $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 1302
     HEAP32[$322 >> 2] = $26; //@line 1303
     $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 1304
     HEAP32[$323 >> 2] = $28; //@line 1305
     $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 1306
     HEAP32[$324 >> 2] = $30; //@line 1307
     $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 1308
     HEAP32[$325 >> 2] = $57; //@line 1309
     sp = STACKTOP; //@line 1310
     return;
    }
    HEAP8[___async_retval >> 0] = $309; //@line 1314
    ___async_unwind = 0; //@line 1315
    HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 1316
    $310 = $ReallocAsyncCtx6 + 4 | 0; //@line 1317
    HEAP32[$310 >> 2] = $2; //@line 1318
    $311 = $ReallocAsyncCtx6 + 8 | 0; //@line 1319
    HEAP32[$311 >> 2] = $4; //@line 1320
    $312 = $ReallocAsyncCtx6 + 12 | 0; //@line 1321
    HEAP32[$312 >> 2] = $6; //@line 1322
    $313 = $ReallocAsyncCtx6 + 16 | 0; //@line 1323
    HEAP32[$313 >> 2] = $8; //@line 1324
    $314 = $ReallocAsyncCtx6 + 20 | 0; //@line 1325
    HEAP32[$314 >> 2] = $10; //@line 1326
    $315 = $ReallocAsyncCtx6 + 24 | 0; //@line 1327
    HEAP32[$315 >> 2] = $12; //@line 1328
    $316 = $ReallocAsyncCtx6 + 28 | 0; //@line 1329
    HEAP32[$316 >> 2] = $14; //@line 1330
    $317 = $ReallocAsyncCtx6 + 32 | 0; //@line 1331
    HEAP32[$317 >> 2] = $16; //@line 1332
    $318 = $ReallocAsyncCtx6 + 36 | 0; //@line 1333
    HEAP32[$318 >> 2] = $18; //@line 1334
    $319 = $ReallocAsyncCtx6 + 40 | 0; //@line 1335
    HEAP32[$319 >> 2] = $20; //@line 1336
    $320 = $ReallocAsyncCtx6 + 44 | 0; //@line 1337
    HEAP32[$320 >> 2] = $22; //@line 1338
    $321 = $ReallocAsyncCtx6 + 48 | 0; //@line 1339
    HEAP32[$321 >> 2] = $24; //@line 1340
    $322 = $ReallocAsyncCtx6 + 52 | 0; //@line 1341
    HEAP32[$322 >> 2] = $26; //@line 1342
    $323 = $ReallocAsyncCtx6 + 56 | 0; //@line 1343
    HEAP32[$323 >> 2] = $28; //@line 1344
    $324 = $ReallocAsyncCtx6 + 60 | 0; //@line 1345
    HEAP32[$324 >> 2] = $30; //@line 1346
    $325 = $ReallocAsyncCtx6 + 64 | 0; //@line 1347
    HEAP32[$325 >> 2] = $57; //@line 1348
    sp = STACKTOP; //@line 1349
    return;
   } else if ((label | 0) == 91) {
    if (($37 - $16 | 0) >= ($18 | 0)) {
     $436 = ___async_retval; //@line 1357
     HEAP32[$436 >> 2] = $6; //@line 1358
     return;
    }
    if ((HEAP8[$37 >> 0] | 0) == -1) {
     $426 = $37 + 1 | 0; //@line 1364
     HEAP32[$4 >> 2] = $426; //@line 1365
     $427 = $426; //@line 1366
     $429 = $16 - $427 + $18 | 0; //@line 1368
     HEAP16[$12 + 24 >> 1] = $429; //@line 1371
     if ($429 & 65535 | 0) {
      HEAP32[$12 + 36 >> 2] = $427; //@line 1376
      $436 = ___async_retval; //@line 1377
      HEAP32[$436 >> 2] = $6; //@line 1378
      return;
     }
    }
    HEAP32[$12 + 4 >> 2] = 1; //@line 1383
    $436 = ___async_retval; //@line 1384
    HEAP32[$436 >> 2] = $6; //@line 1385
    return;
   }
  }
 } while (0);
 HEAP32[$12 + 4 >> 2] = 1; //@line 1391
 $436 = ___async_retval; //@line 1392
 HEAP32[$436 >> 2] = $6; //@line 1393
 return;
}
function _sn_coap_builder_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$120$129$i$i = 0, $$120$129$i14$i = 0, $$120$129$i23$i = 0, $$120$129$i32$i = 0, $$120$129$i41$i = 0, $$120$129$i5$i = 0, $$120$129$i50$i = 0, $$120$129$i59$i = 0, $$120$129$i68$i = 0, $$120$232$i$i = 0, $$120$232$i16$i = 0, $$120$232$i25$i = 0, $$120$232$i34$i = 0, $$120$232$i43$i = 0, $$120$232$i52$i = 0, $$120$232$i61$i = 0, $$120$232$i7$i = 0, $$120$232$i70$i = 0, $$120$3$i$i = 0, $$120$3$i17$i = 0, $$120$3$i26$i = 0, $$120$3$i35$i = 0, $$120$3$i44$i = 0, $$120$3$i53$i = 0, $$120$3$i62$i = 0, $$120$3$i71$i = 0, $$120$3$i8$i = 0, $$12026$i$i = 0, $$12026$i12$i = 0, $$12026$i21$i = 0, $$12026$i3$i = 0, $$12026$i30$i = 0, $$12026$i39$i = 0, $$12026$i48$i = 0, $$12026$i57$i = 0, $$12026$i66$i = 0, $$sink13$i = 0, $$sink13$i70 = 0, $$sink63$i = 0, $$sink63$i69 = 0, $$sink7$i = 0, $$sink7$i106 = 0, $$sink7$i16 = 0, $$sink7$i24 = 0, $$sink7$i34 = 0, $$sink7$i44 = 0, $$sink7$i54 = 0, $$sink7$i76 = 0, $$sink7$i86 = 0, $$sink7$i96 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $108 = 0, $112 = 0, $118 = 0, $120 = 0, $129 = 0, $138 = 0, $14 = 0, $143 = 0, $144 = 0, $166 = 0, $167 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $181 = 0, $185 = 0, $191 = 0, $193 = 0, $202 = 0, $211 = 0, $216 = 0, $217 = 0, $22 = 0, $239 = 0, $243 = 0, $250 = 0, $251 = 0, $253 = 0, $254 = 0, $257 = 0, $261 = 0, $267 = 0, $269 = 0, $278 = 0, $287 = 0, $292 = 0, $293 = 0, $3 = 0, $314 = 0, $317 = 0, $324 = 0, $325 = 0, $327 = 0, $328 = 0, $33 = 0, $331 = 0, $335 = 0, $341 = 0, $343 = 0, $352 = 0, $361 = 0, $366 = 0, $367 = 0, $389 = 0, $391 = 0, $393 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $403 = 0, $404 = 0, $407 = 0, $411 = 0, $417 = 0, $419 = 0, $428 = 0, $43 = 0, $437 = 0, $442 = 0, $443 = 0, $465 = 0, $468 = 0, $470 = 0, $477 = 0, $478 = 0, $480 = 0, $481 = 0, $484 = 0, $488 = 0, $494 = 0, $496 = 0, $5 = 0, $505 = 0, $514 = 0, $519 = 0, $520 = 0, $542 = 0, $543 = 0, $55 = 0, $550 = 0, $552 = 0, $553 = 0, $557 = 0, $56 = 0, $561 = 0, $567 = 0, $569 = 0, $578 = 0, $587 = 0, $59 = 0, $592 = 0, $593 = 0, $615 = 0, $62 = 0, $620 = 0, $626 = 0, $628 = 0, $629 = 0, $63 = 0, $633 = 0, $637 = 0, $64 = 0, $643 = 0, $645 = 0, $65 = 0, $654 = 0, $663 = 0, $668 = 0, $669 = 0, $68 = 0, $691 = 0, $692 = 0, $694 = 0, $696 = 0, $698 = 0, $699 = 0, $70 = 0, $704 = 0, $708 = 0, $714 = 0, $716 = 0, $72 = 0, $725 = 0, $734 = 0, $738 = 0, $743 = 0, $745 = 0, $746 = 0, $749 = 0, $754 = 0, $760 = 0, $762 = 0, $763 = 0, $767 = 0, $771 = 0, $777 = 0, $779 = 0, $78 = 0, $788 = 0, $797 = 0, $8 = 0, $802 = 0, $803 = 0, $82 = 0, $824 = 0, $827 = 0, $832 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1206
 STACKTOP = STACKTOP + 16 | 0; //@line 1207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1207
 $3 = sp + 8 | 0; //@line 1208
 $4 = sp + 4 | 0; //@line 1209
 $5 = sp; //@line 1210
 HEAP32[$5 >> 2] = $0; //@line 1211
 $8 = $0; //@line 1215
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$1 = -2; //@line 1217
  STACKTOP = sp; //@line 1218
  return $$1 | 0; //@line 1218
 }
 $9 = _sn_coap_builder_calc_needed_packet_data_size_2($1, 0) | 0; //@line 1220
 if (!($9 << 16 >> 16)) {
  $$1 = -1; //@line 1223
  STACKTOP = sp; //@line 1224
  return $$1 | 0; //@line 1224
 }
 _memset($0 | 0, 0, $9 & 65535 | 0) | 0; //@line 1227
 if ((_sn_coap_header_validity_check($1, 64) | 0) << 24 >> 24) {
  $$1 = -1; //@line 1231
  STACKTOP = sp; //@line 1232
  return $$1 | 0; //@line 1232
 }
 $14 = HEAP8[$0 >> 0] | 0; //@line 1234
 HEAP8[$0 >> 0] = ($14 & 255) + 64; //@line 1238
 $18 = $1 + 12 | 0; //@line 1239
 $22 = (HEAP32[$18 >> 2] | 0) + ($14 + 64 & 255) | 0; //@line 1243
 HEAP8[$0 >> 0] = $22; //@line 1245
 HEAP8[$0 >> 0] = $22 + (HEAPU8[$1 >> 0] | 0); //@line 1250
 HEAP8[$0 + 1 >> 0] = HEAP32[$1 + 8 >> 2]; //@line 1255
 $33 = $1 + 20 | 0; //@line 1257
 HEAP8[$0 + 2 >> 0] = (HEAPU16[$33 >> 1] | 0) >>> 8; //@line 1261
 HEAP8[$0 + 3 >> 0] = HEAP16[$33 >> 1]; //@line 1265
 $40 = $0 + 4 | 0; //@line 1266
 HEAP32[$5 >> 2] = $40; //@line 1267
 if ((HEAP32[$18 >> 2] | 0) != 48) {
  $43 = $1 + 32 | 0; //@line 1271
  if (!(HEAP32[$43 >> 2] | 0)) {
   if (!(HEAP32[$1 + 28 >> 2] | 0)) {
    if ((HEAP32[$1 + 16 >> 2] | 0) == -1) {
     if (HEAP32[$1 + 40 >> 2] | 0) {
      label = 9; //@line 1287
     }
    } else {
     label = 9; //@line 1290
    }
   } else {
    label = 9; //@line 1293
   }
  } else {
   label = 9; //@line 1296
  }
  if ((label | 0) == 9) {
   $55 = HEAP8[$1 >> 0] | 0; //@line 1299
   $56 = $55 & 255; //@line 1300
   if (!($55 << 24 >> 24)) {
    $62 = 0; //@line 1303
   } else {
    $59 = HEAP32[$1 + 28 >> 2] | 0; //@line 1306
    if (!$59) {
     $62 = $55; //@line 1309
    } else {
     _memcpy($40 | 0, $59 | 0, $56 | 0) | 0; //@line 1311
     $62 = HEAP8[$1 >> 0] | 0; //@line 1313
    }
   }
   $63 = $40 + ($62 & 255) | 0; //@line 1317
   HEAP32[$5 >> 2] = $63; //@line 1318
   HEAP16[$4 >> 1] = 0; //@line 1319
   $64 = $1 + 40 | 0; //@line 1320
   $65 = HEAP32[$64 >> 2] | 0; //@line 1321
   if ($65 | 0) {
    $68 = HEAP16[$65 + 4 >> 1] | 0; //@line 1325
    $70 = HEAP32[$65 + 52 >> 2] | 0; //@line 1327
    if (!$70) {
     $91 = $65; //@line 1330
    } else {
     $72 = $68 & 65535; //@line 1332
     HEAP8[$63 >> 0] = (($68 & 65535) < 13 ? $68 & 65535 : ($68 & 65535) < 269 ? 13 : 14) + 48; //@line 1340
     $78 = $63 + 1 | 0; //@line 1341
     HEAP32[$5 >> 2] = $78; //@line 1342
     if (($68 + -13 & 65535) < 256) {
      $$sink13$i70 = 1; //@line 1347
      $$sink63$i69 = $72 + 243 | 0; //@line 1347
      label = 18; //@line 1348
     } else {
      if (($68 & 65535) > 268) {
       $82 = $72 + -269 | 0; //@line 1352
       HEAP8[$63 + 2 >> 0] = $82; //@line 1355
       $$sink13$i70 = 2; //@line 1357
       $$sink63$i69 = $82 >>> 8; //@line 1357
       label = 18; //@line 1358
      } else {
       $88 = $78; //@line 1360
      }
     }
     if ((label | 0) == 18) {
      HEAP8[$78 >> 0] = $$sink63$i69; //@line 1365
      $87 = $78 + $$sink13$i70 | 0; //@line 1366
      HEAP32[$5 >> 2] = $87; //@line 1367
      $88 = $87; //@line 1368
     }
     HEAP16[$4 >> 1] = 3; //@line 1370
     _memcpy($88 | 0, $70 | 0, $72 | 0) | 0; //@line 1371
     HEAP32[$5 >> 2] = $88 + $72; //@line 1373
     $91 = HEAP32[$64 >> 2] | 0; //@line 1375
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $91 + 48 | 0, $91, 4, $4); //@line 1378
    $92 = HEAP32[$64 >> 2] | 0; //@line 1379
    $94 = HEAP32[$92 + 32 >> 2] | 0; //@line 1381
    if (($94 | 0) == -1) {
     $166 = $92; //@line 1384
    } else {
     if ($94 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $94 >>> 24; //@line 1390
      $$12026$i$i = 1; //@line 1391
      label = 32; //@line 1392
     } else {
      if ($94 << 8 >>> 0 > 16777215) {
       $$12026$i$i = 0; //@line 1397
       label = 32; //@line 1398
      } else {
       if ($94 << 16 >>> 0 > 16777215) {
        $$120$129$i$i = 0; //@line 1403
        label = 34; //@line 1404
       } else {
        if ($94 << 24 >>> 0 > 16777215) {
         $$120$232$i$i = 0; //@line 1409
         label = 36; //@line 1410
        } else {
         $$120$3$i$i = 0; //@line 1412
        }
       }
      }
     }
     if ((label | 0) == 32) {
      HEAP8[$3 + ($$12026$i$i & 255) >> 0] = $94 >>> 16; //@line 1423
      $$120$129$i$i = $$12026$i$i + 1 << 24 >> 24; //@line 1424
      label = 34; //@line 1425
     }
     if ((label | 0) == 34) {
      HEAP8[$3 + ($$120$129$i$i & 255) >> 0] = $94 >>> 8; //@line 1433
      $$120$232$i$i = $$120$129$i$i + 1 << 24 >> 24; //@line 1434
      label = 36; //@line 1435
     }
     if ((label | 0) == 36) {
      HEAP8[$3 + ($$120$232$i$i & 255) >> 0] = $94; //@line 1442
      $$120$3$i$i = $$120$232$i$i + 1 << 24 >> 24; //@line 1443
     }
     $101 = $$120$3$i$i & 255; //@line 1445
     $102 = HEAP16[$4 >> 1] | 0; //@line 1446
     $104 = 6 - ($102 & 65535) | 0; //@line 1448
     $105 = $$120$3$i$i & 255; //@line 1449
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i$i & 255) < 13 ? $$120$3$i$i : 13; //@line 1453
     $108 = 6 - $102 << 16 >> 16; //@line 1454
     do {
      if (($108 & 65535) < 13) {
       $112 = HEAP32[$5 >> 2] | 0; //@line 1460
       HEAP8[$112 >> 0] = (($108 & 65535) << 4) + (HEAPU8[$112 >> 0] | 0); //@line 1465
       $$sink7$i96 = 1; //@line 1466
      } else {
       $118 = HEAP32[$5 >> 2] | 0; //@line 1469
       $120 = HEAPU8[$118 >> 0] | 0; //@line 1471
       if (($108 & 65535) < 269) {
        HEAP8[$118 >> 0] = $120 + 208; //@line 1475
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $104 + 243; //@line 1480
        $$sink7$i96 = 2; //@line 1481
        break;
       } else {
        HEAP8[$118 >> 0] = $120 + 224; //@line 1486
        $129 = $104 + 65267 | 0; //@line 1487
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $129; //@line 1491
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $129 >>> 8; //@line 1496
        $$sink7$i96 = 3; //@line 1497
        break;
       }
      }
     } while (0);
     $138 = (HEAP32[$5 >> 2] | 0) + $$sink7$i96 | 0; //@line 1503
     HEAP32[$5 >> 2] = $138; //@line 1504
     if (($101 + -13 & 65535) < 256) {
      HEAP8[$138 >> 0] = $105 + 243; //@line 1510
      $143 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1512
      HEAP32[$5 >> 2] = $143; //@line 1513
      $144 = $143; //@line 1514
     } else {
      $144 = $138; //@line 1516
     }
     HEAP16[$4 >> 1] = 6; //@line 1518
     _memcpy($144 | 0, $3 | 0, $105 | 0) | 0; //@line 1519
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $105; //@line 1522
     $166 = HEAP32[$64 >> 2] | 0; //@line 1524
    }
    $167 = HEAP32[$166 + 28 >> 2] | 0; //@line 1527
    if (($167 | 0) == -1) {
     $239 = $166; //@line 1530
    } else {
     if ($167 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $167 >>> 24; //@line 1536
      $$12026$i3$i = 1; //@line 1537
      label = 49; //@line 1538
     } else {
      if ($167 << 8 >>> 0 > 16777215) {
       $$12026$i3$i = 0; //@line 1543
       label = 49; //@line 1544
      } else {
       if ($167 << 16 >>> 0 > 16777215) {
        $$120$129$i5$i = 0; //@line 1549
        label = 51; //@line 1550
       } else {
        if ($167 << 24 >>> 0 > 16777215) {
         $$120$232$i7$i = 0; //@line 1555
         label = 53; //@line 1556
        } else {
         $$120$3$i8$i = 0; //@line 1558
        }
       }
      }
     }
     if ((label | 0) == 49) {
      HEAP8[$3 + ($$12026$i3$i & 255) >> 0] = $167 >>> 16; //@line 1569
      $$120$129$i5$i = $$12026$i3$i + 1 << 24 >> 24; //@line 1570
      label = 51; //@line 1571
     }
     if ((label | 0) == 51) {
      HEAP8[$3 + ($$120$129$i5$i & 255) >> 0] = $167 >>> 8; //@line 1579
      $$120$232$i7$i = $$120$129$i5$i + 1 << 24 >> 24; //@line 1580
      label = 53; //@line 1581
     }
     if ((label | 0) == 53) {
      HEAP8[$3 + ($$120$232$i7$i & 255) >> 0] = $167; //@line 1588
      $$120$3$i8$i = $$120$232$i7$i + 1 << 24 >> 24; //@line 1589
     }
     $174 = $$120$3$i8$i & 255; //@line 1591
     $175 = HEAP16[$4 >> 1] | 0; //@line 1592
     $177 = 7 - ($175 & 65535) | 0; //@line 1594
     $178 = $$120$3$i8$i & 255; //@line 1595
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i8$i & 255) < 13 ? $$120$3$i8$i : 13; //@line 1599
     $181 = 7 - $175 << 16 >> 16; //@line 1600
     do {
      if (($181 & 65535) < 13) {
       $185 = HEAP32[$5 >> 2] | 0; //@line 1606
       HEAP8[$185 >> 0] = (($181 & 65535) << 4) + (HEAPU8[$185 >> 0] | 0); //@line 1611
       $$sink7$i106 = 1; //@line 1612
      } else {
       $191 = HEAP32[$5 >> 2] | 0; //@line 1615
       $193 = HEAPU8[$191 >> 0] | 0; //@line 1617
       if (($181 & 65535) < 269) {
        HEAP8[$191 >> 0] = $193 + 208; //@line 1621
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $177 + 243; //@line 1626
        $$sink7$i106 = 2; //@line 1627
        break;
       } else {
        HEAP8[$191 >> 0] = $193 + 224; //@line 1632
        $202 = $177 + 65267 | 0; //@line 1633
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $202; //@line 1637
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $202 >>> 8; //@line 1642
        $$sink7$i106 = 3; //@line 1643
        break;
       }
      }
     } while (0);
     $211 = (HEAP32[$5 >> 2] | 0) + $$sink7$i106 | 0; //@line 1649
     HEAP32[$5 >> 2] = $211; //@line 1650
     if (($174 + -13 & 65535) < 256) {
      HEAP8[$211 >> 0] = $178 + 243; //@line 1656
      $216 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1658
      HEAP32[$5 >> 2] = $216; //@line 1659
      $217 = $216; //@line 1660
     } else {
      $217 = $211; //@line 1662
     }
     HEAP16[$4 >> 1] = 7; //@line 1664
     _memcpy($217 | 0, $3 | 0, $178 | 0) | 0; //@line 1665
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $178; //@line 1668
     $239 = HEAP32[$64 >> 2] | 0; //@line 1670
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $239 + 56 | 0, $239 + 6 | 0, 8, $4); //@line 1674
   }
   _sn_coap_builder_options_build_add_multiple_option($5, $43, $1 + 22 | 0, 11, $4); //@line 1677
   $243 = HEAP32[$1 + 16 >> 2] | 0; //@line 1679
   if (($243 | 0) != -1) {
    if ($243 >>> 0 > 16777215) {
     HEAP8[$3 >> 0] = $243 >>> 24; //@line 1686
     $$12026$i12$i = 1; //@line 1687
     label = 67; //@line 1688
    } else {
     if ($243 << 8 >>> 0 > 16777215) {
      $$12026$i12$i = 0; //@line 1693
      label = 67; //@line 1694
     } else {
      if ($243 << 16 >>> 0 > 16777215) {
       $$120$129$i14$i = 0; //@line 1699
       label = 69; //@line 1700
      } else {
       if ($243 << 24 >>> 0 > 16777215) {
        $$120$232$i16$i = 0; //@line 1705
        label = 71; //@line 1706
       } else {
        $$120$3$i17$i = 0; //@line 1708
       }
      }
     }
    }
    if ((label | 0) == 67) {
     HEAP8[$3 + ($$12026$i12$i & 255) >> 0] = $243 >>> 16; //@line 1719
     $$120$129$i14$i = $$12026$i12$i + 1 << 24 >> 24; //@line 1720
     label = 69; //@line 1721
    }
    if ((label | 0) == 69) {
     HEAP8[$3 + ($$120$129$i14$i & 255) >> 0] = $243 >>> 8; //@line 1729
     $$120$232$i16$i = $$120$129$i14$i + 1 << 24 >> 24; //@line 1730
     label = 71; //@line 1731
    }
    if ((label | 0) == 71) {
     HEAP8[$3 + ($$120$232$i16$i & 255) >> 0] = $243; //@line 1738
     $$120$3$i17$i = $$120$232$i16$i + 1 << 24 >> 24; //@line 1739
    }
    $250 = $$120$3$i17$i & 255; //@line 1741
    $251 = HEAP16[$4 >> 1] | 0; //@line 1742
    $253 = 12 - ($251 & 65535) | 0; //@line 1744
    $254 = $$120$3$i17$i & 255; //@line 1745
    HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i17$i & 255) < 13 ? $$120$3$i17$i : 13; //@line 1749
    $257 = 12 - $251 << 16 >> 16; //@line 1750
    do {
     if (($257 & 65535) < 13) {
      $261 = HEAP32[$5 >> 2] | 0; //@line 1756
      HEAP8[$261 >> 0] = (($257 & 65535) << 4) + (HEAPU8[$261 >> 0] | 0); //@line 1761
      $$sink7$i86 = 1; //@line 1762
     } else {
      $267 = HEAP32[$5 >> 2] | 0; //@line 1765
      $269 = HEAPU8[$267 >> 0] | 0; //@line 1767
      if (($257 & 65535) < 269) {
       HEAP8[$267 >> 0] = $269 + 208; //@line 1771
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $253 + 243; //@line 1776
       $$sink7$i86 = 2; //@line 1777
       break;
      } else {
       HEAP8[$267 >> 0] = $269 + 224; //@line 1782
       $278 = $253 + 65267 | 0; //@line 1783
       HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $278; //@line 1787
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $278 >>> 8; //@line 1792
       $$sink7$i86 = 3; //@line 1793
       break;
      }
     }
    } while (0);
    $287 = (HEAP32[$5 >> 2] | 0) + $$sink7$i86 | 0; //@line 1799
    HEAP32[$5 >> 2] = $287; //@line 1800
    if (($250 + -13 & 65535) < 256) {
     HEAP8[$287 >> 0] = $254 + 243; //@line 1806
     $292 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1808
     HEAP32[$5 >> 2] = $292; //@line 1809
     $293 = $292; //@line 1810
    } else {
     $293 = $287; //@line 1812
    }
    HEAP16[$4 >> 1] = 12; //@line 1814
    _memcpy($293 | 0, $3 | 0, $254 | 0) | 0; //@line 1815
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $254; //@line 1818
   }
   $314 = HEAP32[$64 >> 2] | 0; //@line 1820
   if ($314 | 0) {
    $317 = HEAP32[$314 + 16 >> 2] | 0; //@line 1824
    if (($317 | 0) == 60) {
     $389 = $314; //@line 1827
    } else {
     if ($317 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $317 >>> 24; //@line 1833
      $$12026$i21$i = 1; //@line 1834
      label = 85; //@line 1835
     } else {
      if ($317 << 8 >>> 0 > 16777215) {
       $$12026$i21$i = 0; //@line 1840
       label = 85; //@line 1841
      } else {
       if ($317 << 16 >>> 0 > 16777215) {
        $$120$129$i23$i = 0; //@line 1846
        label = 87; //@line 1847
       } else {
        if ($317 << 24 >>> 0 > 16777215) {
         $$120$232$i25$i = 0; //@line 1852
         label = 89; //@line 1853
        } else {
         $$120$3$i26$i = 0; //@line 1855
        }
       }
      }
     }
     if ((label | 0) == 85) {
      HEAP8[$3 + ($$12026$i21$i & 255) >> 0] = $317 >>> 16; //@line 1866
      $$120$129$i23$i = $$12026$i21$i + 1 << 24 >> 24; //@line 1867
      label = 87; //@line 1868
     }
     if ((label | 0) == 87) {
      HEAP8[$3 + ($$120$129$i23$i & 255) >> 0] = $317 >>> 8; //@line 1876
      $$120$232$i25$i = $$120$129$i23$i + 1 << 24 >> 24; //@line 1877
      label = 89; //@line 1878
     }
     if ((label | 0) == 89) {
      HEAP8[$3 + ($$120$232$i25$i & 255) >> 0] = $317; //@line 1885
      $$120$3$i26$i = $$120$232$i25$i + 1 << 24 >> 24; //@line 1886
     }
     $324 = $$120$3$i26$i & 255; //@line 1888
     $325 = HEAP16[$4 >> 1] | 0; //@line 1889
     $327 = 14 - ($325 & 65535) | 0; //@line 1891
     $328 = $$120$3$i26$i & 255; //@line 1892
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i26$i & 255) < 13 ? $$120$3$i26$i : 13; //@line 1896
     $331 = 14 - $325 << 16 >> 16; //@line 1897
     do {
      if (($331 & 65535) < 13) {
       $335 = HEAP32[$5 >> 2] | 0; //@line 1903
       HEAP8[$335 >> 0] = (($331 & 65535) << 4) + (HEAPU8[$335 >> 0] | 0); //@line 1908
       $$sink7$i76 = 1; //@line 1909
      } else {
       $341 = HEAP32[$5 >> 2] | 0; //@line 1912
       $343 = HEAPU8[$341 >> 0] | 0; //@line 1914
       if (($331 & 65535) < 269) {
        HEAP8[$341 >> 0] = $343 + 208; //@line 1918
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $327 + 243; //@line 1923
        $$sink7$i76 = 2; //@line 1924
        break;
       } else {
        HEAP8[$341 >> 0] = $343 + 224; //@line 1929
        $352 = $327 + 65267 | 0; //@line 1930
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $352; //@line 1934
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $352 >>> 8; //@line 1939
        $$sink7$i76 = 3; //@line 1940
        break;
       }
      }
     } while (0);
     $361 = (HEAP32[$5 >> 2] | 0) + $$sink7$i76 | 0; //@line 1946
     HEAP32[$5 >> 2] = $361; //@line 1947
     if (($324 + -13 & 65535) < 256) {
      HEAP8[$361 >> 0] = $328 + 243; //@line 1953
      $366 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1955
      HEAP32[$5 >> 2] = $366; //@line 1956
      $367 = $366; //@line 1957
     } else {
      $367 = $361; //@line 1959
     }
     HEAP16[$4 >> 1] = 14; //@line 1961
     _memcpy($367 | 0, $3 | 0, $328 | 0) | 0; //@line 1962
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $328; //@line 1965
     $389 = HEAP32[$64 >> 2] | 0; //@line 1967
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $389 + 64 | 0, $389 + 10 | 0, 15, $4); //@line 1971
    $391 = HEAP32[$64 >> 2] | 0; //@line 1972
    $393 = HEAP32[$391 + 12 >> 2] | 0; //@line 1974
    if (($393 | 0) == -1) {
     $465 = $391; //@line 1977
    } else {
     if ($393 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $393 >>> 24; //@line 1983
      $$12026$i30$i = 1; //@line 1984
      label = 102; //@line 1985
     } else {
      if ($393 << 8 >>> 0 > 16777215) {
       $$12026$i30$i = 0; //@line 1990
       label = 102; //@line 1991
      } else {
       if ($393 << 16 >>> 0 > 16777215) {
        $$120$129$i32$i = 0; //@line 1996
        label = 104; //@line 1997
       } else {
        if ($393 << 24 >>> 0 > 16777215) {
         $$120$232$i34$i = 0; //@line 2002
         label = 106; //@line 2003
        } else {
         $$120$3$i35$i = 0; //@line 2005
        }
       }
      }
     }
     if ((label | 0) == 102) {
      HEAP8[$3 + ($$12026$i30$i & 255) >> 0] = $393 >>> 16; //@line 2016
      $$120$129$i32$i = $$12026$i30$i + 1 << 24 >> 24; //@line 2017
      label = 104; //@line 2018
     }
     if ((label | 0) == 104) {
      HEAP8[$3 + ($$120$129$i32$i & 255) >> 0] = $393 >>> 8; //@line 2026
      $$120$232$i34$i = $$120$129$i32$i + 1 << 24 >> 24; //@line 2027
      label = 106; //@line 2028
     }
     if ((label | 0) == 106) {
      HEAP8[$3 + ($$120$232$i34$i & 255) >> 0] = $393; //@line 2035
      $$120$3$i35$i = $$120$232$i34$i + 1 << 24 >> 24; //@line 2036
     }
     $400 = $$120$3$i35$i & 255; //@line 2038
     $401 = HEAP16[$4 >> 1] | 0; //@line 2039
     $403 = 17 - ($401 & 65535) | 0; //@line 2041
     $404 = $$120$3$i35$i & 255; //@line 2042
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i35$i & 255) < 13 ? $$120$3$i35$i : 13; //@line 2046
     $407 = 17 - $401 << 16 >> 16; //@line 2047
     do {
      if (($407 & 65535) < 13) {
       $411 = HEAP32[$5 >> 2] | 0; //@line 2053
       HEAP8[$411 >> 0] = (($407 & 65535) << 4) + (HEAPU8[$411 >> 0] | 0); //@line 2058
       $$sink7$i54 = 1; //@line 2059
      } else {
       $417 = HEAP32[$5 >> 2] | 0; //@line 2062
       $419 = HEAPU8[$417 >> 0] | 0; //@line 2064
       if (($407 & 65535) < 269) {
        HEAP8[$417 >> 0] = $419 + 208; //@line 2068
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $403 + 243; //@line 2073
        $$sink7$i54 = 2; //@line 2074
        break;
       } else {
        HEAP8[$417 >> 0] = $419 + 224; //@line 2079
        $428 = $403 + 65267 | 0; //@line 2080
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $428; //@line 2084
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $428 >>> 8; //@line 2089
        $$sink7$i54 = 3; //@line 2090
        break;
       }
      }
     } while (0);
     $437 = (HEAP32[$5 >> 2] | 0) + $$sink7$i54 | 0; //@line 2096
     HEAP32[$5 >> 2] = $437; //@line 2097
     if (($400 + -13 & 65535) < 256) {
      HEAP8[$437 >> 0] = $404 + 243; //@line 2103
      $442 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2105
      HEAP32[$5 >> 2] = $442; //@line 2106
      $443 = $442; //@line 2107
     } else {
      $443 = $437; //@line 2109
     }
     HEAP16[$4 >> 1] = 17; //@line 2111
     _memcpy($443 | 0, $3 | 0, $404 | 0) | 0; //@line 2112
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $404; //@line 2115
     $465 = HEAP32[$64 >> 2] | 0; //@line 2117
    }
    if ($465 | 0) {
     _sn_coap_builder_options_build_add_multiple_option($5, $465 + 60 | 0, $465 + 8 | 0, 20, $4); //@line 2123
     $468 = HEAP32[$64 >> 2] | 0; //@line 2124
     $470 = HEAP32[$468 + 40 >> 2] | 0; //@line 2126
     if (($470 | 0) == -1) {
      $542 = $468; //@line 2129
     } else {
      do {
       if ($470 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $470 >>> 24; //@line 2136
        $$12026$i39$i = 1; //@line 2137
        label = 120; //@line 2138
       } else {
        if ($470 << 8 >>> 0 > 16777215) {
         $$12026$i39$i = 0; //@line 2143
         label = 120; //@line 2144
        } else {
         if ($470 << 16 >>> 0 > 16777215) {
          $$120$129$i41$i = 0; //@line 2149
          label = 122; //@line 2150
          break;
         }
         if ($470 << 24 >>> 0 > 16777215) {
          $$120$232$i43$i = 0; //@line 2156
          label = 124; //@line 2157
         } else {
          $$120$3$i44$i = 0; //@line 2159
         }
        }
       }
      } while (0);
      if ((label | 0) == 120) {
       HEAP8[$3 + ($$12026$i39$i & 255) >> 0] = $470 >>> 16; //@line 2170
       $$120$129$i41$i = $$12026$i39$i + 1 << 24 >> 24; //@line 2171
       label = 122; //@line 2172
      }
      if ((label | 0) == 122) {
       HEAP8[$3 + ($$120$129$i41$i & 255) >> 0] = $470 >>> 8; //@line 2180
       $$120$232$i43$i = $$120$129$i41$i + 1 << 24 >> 24; //@line 2181
       label = 124; //@line 2182
      }
      if ((label | 0) == 124) {
       HEAP8[$3 + ($$120$232$i43$i & 255) >> 0] = $470; //@line 2189
       $$120$3$i44$i = $$120$232$i43$i + 1 << 24 >> 24; //@line 2190
      }
      $477 = $$120$3$i44$i & 255; //@line 2192
      $478 = HEAP16[$4 >> 1] | 0; //@line 2193
      $480 = 23 - ($478 & 65535) | 0; //@line 2195
      $481 = $$120$3$i44$i & 255; //@line 2196
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i44$i & 255) < 13 ? $$120$3$i44$i : 13; //@line 2200
      $484 = 23 - $478 << 16 >> 16; //@line 2201
      do {
       if (($484 & 65535) < 13) {
        $488 = HEAP32[$5 >> 2] | 0; //@line 2207
        HEAP8[$488 >> 0] = (($484 & 65535) << 4) + (HEAPU8[$488 >> 0] | 0); //@line 2212
        $$sink7$i44 = 1; //@line 2213
       } else {
        $494 = HEAP32[$5 >> 2] | 0; //@line 2216
        $496 = HEAPU8[$494 >> 0] | 0; //@line 2218
        if (($484 & 65535) < 269) {
         HEAP8[$494 >> 0] = $496 + 208; //@line 2222
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $480 + 243; //@line 2227
         $$sink7$i44 = 2; //@line 2228
         break;
        } else {
         HEAP8[$494 >> 0] = $496 + 224; //@line 2233
         $505 = $480 + 65267 | 0; //@line 2234
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $505; //@line 2238
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $505 >>> 8; //@line 2243
         $$sink7$i44 = 3; //@line 2244
         break;
        }
       }
      } while (0);
      $514 = (HEAP32[$5 >> 2] | 0) + $$sink7$i44 | 0; //@line 2250
      HEAP32[$5 >> 2] = $514; //@line 2251
      if (($477 + -13 & 65535) < 256) {
       HEAP8[$514 >> 0] = $481 + 243; //@line 2257
       $519 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2259
       HEAP32[$5 >> 2] = $519; //@line 2260
       $520 = $519; //@line 2261
      } else {
       $520 = $514; //@line 2263
      }
      HEAP16[$4 >> 1] = 23; //@line 2265
      _memcpy($520 | 0, $3 | 0, $481 | 0) | 0; //@line 2266
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $481; //@line 2269
      $542 = HEAP32[$64 >> 2] | 0; //@line 2271
     }
     $543 = HEAP32[$542 + 36 >> 2] | 0; //@line 2274
     if (($543 | 0) == -1) {
      $615 = $542; //@line 2277
     } else {
      do {
       if ($543 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $543 >>> 24; //@line 2284
        $$12026$i48$i = 1; //@line 2285
        label = 137; //@line 2286
       } else {
        if ($543 << 8 >>> 0 > 16777215) {
         $$12026$i48$i = 0; //@line 2291
         label = 137; //@line 2292
         break;
        }
        if ($543 << 16 >>> 0 > 16777215) {
         $$120$129$i50$i = 0; //@line 2298
         label = 139; //@line 2299
         break;
        }
        if ($543 << 24 >>> 0 > 16777215) {
         $$120$232$i52$i = 0; //@line 2305
         label = 141; //@line 2306
        } else {
         $$120$3$i53$i = 0; //@line 2308
        }
       }
      } while (0);
      if ((label | 0) == 137) {
       HEAP8[$3 + ($$12026$i48$i & 255) >> 0] = $543 >>> 16; //@line 2318
       $$120$129$i50$i = $$12026$i48$i + 1 << 24 >> 24; //@line 2319
       label = 139; //@line 2320
      }
      if ((label | 0) == 139) {
       HEAP8[$3 + ($$120$129$i50$i & 255) >> 0] = $543 >>> 8; //@line 2328
       $$120$232$i52$i = $$120$129$i50$i + 1 << 24 >> 24; //@line 2329
       label = 141; //@line 2330
      }
      if ((label | 0) == 141) {
       HEAP8[$3 + ($$120$232$i52$i & 255) >> 0] = $543; //@line 2337
       $$120$3$i53$i = $$120$232$i52$i + 1 & 255; //@line 2339
      }
      $550 = HEAP16[$4 >> 1] | 0; //@line 2341
      $552 = 27 - ($550 & 65535) | 0; //@line 2343
      $553 = $$120$3$i53$i & 65535; //@line 2344
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i53$i & 65535) < 13 ? $$120$3$i53$i : 13; //@line 2349
      $557 = 27 - $550 << 16 >> 16; //@line 2350
      do {
       if (($557 & 65535) < 13) {
        $561 = HEAP32[$5 >> 2] | 0; //@line 2356
        HEAP8[$561 >> 0] = (($557 & 65535) << 4) + (HEAPU8[$561 >> 0] | 0); //@line 2361
        $$sink7$i34 = 1; //@line 2362
       } else {
        $567 = HEAP32[$5 >> 2] | 0; //@line 2365
        $569 = HEAPU8[$567 >> 0] | 0; //@line 2367
        if (($557 & 65535) < 269) {
         HEAP8[$567 >> 0] = $569 + 208; //@line 2371
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $552 + 243; //@line 2376
         $$sink7$i34 = 2; //@line 2377
         break;
        } else {
         HEAP8[$567 >> 0] = $569 + 224; //@line 2382
         $578 = $552 + 65267 | 0; //@line 2383
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $578; //@line 2387
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $578 >>> 8; //@line 2392
         $$sink7$i34 = 3; //@line 2393
         break;
        }
       }
      } while (0);
      $587 = (HEAP32[$5 >> 2] | 0) + $$sink7$i34 | 0; //@line 2399
      HEAP32[$5 >> 2] = $587; //@line 2400
      if (($$120$3$i53$i + -13 & 65535) < 256) {
       HEAP8[$587 >> 0] = $553 + 243; //@line 2406
       $592 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2408
       HEAP32[$5 >> 2] = $592; //@line 2409
       $593 = $592; //@line 2410
      } else {
       $593 = $587; //@line 2412
      }
      HEAP16[$4 >> 1] = 27; //@line 2414
      _memcpy($593 | 0, $3 | 0, $553 | 0) | 0; //@line 2415
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $553; //@line 2418
      $615 = HEAP32[$64 >> 2] | 0; //@line 2420
     }
     if (!(HEAP8[$615 + 1 >> 0] & 2)) {
      $691 = $615; //@line 2427
     } else {
      $620 = HEAP32[$615 + 24 >> 2] | 0; //@line 2430
      do {
       if ($620 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $620 >>> 24; //@line 2436
        $$12026$i57$i = 1; //@line 2437
        label = 154; //@line 2438
       } else {
        if ($620 << 8 >>> 0 > 16777215) {
         $$12026$i57$i = 0; //@line 2443
         label = 154; //@line 2444
         break;
        }
        if ($620 << 16 >>> 0 > 16777215) {
         $$120$129$i59$i = 0; //@line 2450
         label = 156; //@line 2451
         break;
        }
        if ($620 << 24 >>> 0 > 16777215) {
         $$120$232$i61$i = 0; //@line 2457
         label = 158; //@line 2458
        } else {
         $$120$3$i62$i = 0; //@line 2460
        }
       }
      } while (0);
      if ((label | 0) == 154) {
       HEAP8[$3 + ($$12026$i57$i & 255) >> 0] = $620 >>> 16; //@line 2470
       $$120$129$i59$i = $$12026$i57$i + 1 << 24 >> 24; //@line 2471
       label = 156; //@line 2472
      }
      if ((label | 0) == 156) {
       HEAP8[$3 + ($$120$129$i59$i & 255) >> 0] = $620 >>> 8; //@line 2480
       $$120$232$i61$i = $$120$129$i59$i + 1 << 24 >> 24; //@line 2481
       label = 158; //@line 2482
      }
      if ((label | 0) == 158) {
       HEAP8[$3 + ($$120$232$i61$i & 255) >> 0] = $620; //@line 2489
       $$120$3$i62$i = $$120$232$i61$i + 1 & 255; //@line 2491
      }
      $626 = HEAP16[$4 >> 1] | 0; //@line 2493
      $628 = 28 - ($626 & 65535) | 0; //@line 2495
      $629 = $$120$3$i62$i & 65535; //@line 2496
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i62$i & 65535) < 13 ? $$120$3$i62$i : 13; //@line 2501
      $633 = 28 - $626 << 16 >> 16; //@line 2502
      do {
       if (($633 & 65535) < 13) {
        $637 = HEAP32[$5 >> 2] | 0; //@line 2508
        HEAP8[$637 >> 0] = (($633 & 65535) << 4) + (HEAPU8[$637 >> 0] | 0); //@line 2513
        $$sink7$i24 = 1; //@line 2514
       } else {
        $643 = HEAP32[$5 >> 2] | 0; //@line 2517
        $645 = HEAPU8[$643 >> 0] | 0; //@line 2519
        if (($633 & 65535) < 269) {
         HEAP8[$643 >> 0] = $645 + 208; //@line 2523
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $628 + 243; //@line 2528
         $$sink7$i24 = 2; //@line 2529
         break;
        } else {
         HEAP8[$643 >> 0] = $645 + 224; //@line 2534
         $654 = $628 + 65267 | 0; //@line 2535
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $654; //@line 2539
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $654 >>> 8; //@line 2544
         $$sink7$i24 = 3; //@line 2545
         break;
        }
       }
      } while (0);
      $663 = (HEAP32[$5 >> 2] | 0) + $$sink7$i24 | 0; //@line 2551
      HEAP32[$5 >> 2] = $663; //@line 2552
      if (($$120$3$i62$i + -13 & 65535) < 256) {
       HEAP8[$663 >> 0] = $629 + 243; //@line 2558
       $668 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2560
       HEAP32[$5 >> 2] = $668; //@line 2561
       $669 = $668; //@line 2562
      } else {
       $669 = $663; //@line 2564
      }
      HEAP16[$4 >> 1] = 28; //@line 2566
      _memcpy($669 | 0, $3 | 0, $629 | 0) | 0; //@line 2567
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $629; //@line 2570
      $691 = HEAP32[$64 >> 2] | 0; //@line 2572
     }
     $692 = HEAP16[$691 + 2 >> 1] | 0; //@line 2575
     $694 = HEAP32[$691 + 44 >> 2] | 0; //@line 2577
     if (!$694) {
      $749 = $691; //@line 2580
     } else {
      $696 = HEAP16[$4 >> 1] | 0; //@line 2582
      $698 = 35 - ($696 & 65535) | 0; //@line 2584
      $699 = $692 & 65535; //@line 2585
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($692 & 65535) < 13 ? $692 & 255 : ($692 & 65535) < 269 ? 13 : 14; //@line 2592
      $704 = 35 - $696 << 16 >> 16; //@line 2593
      do {
       if (($704 & 65535) < 13) {
        $708 = HEAP32[$5 >> 2] | 0; //@line 2599
        HEAP8[$708 >> 0] = (($704 & 65535) << 4) + (HEAPU8[$708 >> 0] | 0); //@line 2604
        $$sink7$i16 = 1; //@line 2605
       } else {
        $714 = HEAP32[$5 >> 2] | 0; //@line 2608
        $716 = HEAPU8[$714 >> 0] | 0; //@line 2610
        if (($704 & 65535) < 269) {
         HEAP8[$714 >> 0] = $716 + 208; //@line 2614
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $698 + 243; //@line 2619
         $$sink7$i16 = 2; //@line 2620
         break;
        } else {
         HEAP8[$714 >> 0] = $716 + 224; //@line 2625
         $725 = $698 + 65267 | 0; //@line 2626
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $725; //@line 2630
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $725 >>> 8; //@line 2635
         $$sink7$i16 = 3; //@line 2636
         break;
        }
       }
      } while (0);
      $734 = (HEAP32[$5 >> 2] | 0) + $$sink7$i16 | 0; //@line 2642
      HEAP32[$5 >> 2] = $734; //@line 2643
      do {
       if (($692 + -13 & 65535) < 256) {
        $$sink13$i = 1; //@line 2649
        $$sink63$i = $699 + 243 | 0; //@line 2649
        $743 = $734; //@line 2649
        label = 169; //@line 2650
       } else {
        if (($692 & 65535) <= 268) {
         $746 = $734; //@line 2654
         break;
        }
        $738 = $699 + -269 | 0; //@line 2657
        HEAP8[$734 + 1 >> 0] = $738; //@line 2660
        $$sink13$i = 2; //@line 2663
        $$sink63$i = $738 >>> 8; //@line 2663
        $743 = HEAP32[$5 >> 2] | 0; //@line 2663
        label = 169; //@line 2664
       }
      } while (0);
      if ((label | 0) == 169) {
       HEAP8[$743 >> 0] = $$sink63$i; //@line 2669
       $745 = (HEAP32[$5 >> 2] | 0) + $$sink13$i | 0; //@line 2671
       HEAP32[$5 >> 2] = $745; //@line 2672
       $746 = $745; //@line 2673
      }
      HEAP16[$4 >> 1] = 35; //@line 2675
      _memcpy($746 | 0, $694 | 0, $699 | 0) | 0; //@line 2676
      HEAP32[$5 >> 2] = $746 + $699; //@line 2678
      $749 = HEAP32[$64 >> 2] | 0; //@line 2680
     }
     if (HEAP8[$749 + 1 >> 0] & 1) {
      $754 = HEAP32[$749 + 20 >> 2] | 0; //@line 2688
      do {
       if ($754 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $754 >>> 24; //@line 2694
        $$12026$i66$i = 1; //@line 2695
        label = 183; //@line 2696
       } else {
        if ($754 << 8 >>> 0 > 16777215) {
         $$12026$i66$i = 0; //@line 2701
         label = 183; //@line 2702
         break;
        }
        if ($754 << 16 >>> 0 > 16777215) {
         $$120$129$i68$i = 0; //@line 2708
         label = 185; //@line 2709
         break;
        }
        if ($754 << 24 >>> 0 > 16777215) {
         $$120$232$i70$i = 0; //@line 2715
         label = 187; //@line 2716
        } else {
         $$120$3$i71$i = 0; //@line 2718
        }
       }
      } while (0);
      if ((label | 0) == 183) {
       HEAP8[$3 + ($$12026$i66$i & 255) >> 0] = $754 >>> 16; //@line 2728
       $$120$129$i68$i = $$12026$i66$i + 1 << 24 >> 24; //@line 2729
       label = 185; //@line 2730
      }
      if ((label | 0) == 185) {
       HEAP8[$3 + ($$120$129$i68$i & 255) >> 0] = $754 >>> 8; //@line 2738
       $$120$232$i70$i = $$120$129$i68$i + 1 << 24 >> 24; //@line 2739
       label = 187; //@line 2740
      }
      if ((label | 0) == 187) {
       HEAP8[$3 + ($$120$232$i70$i & 255) >> 0] = $754; //@line 2747
       $$120$3$i71$i = $$120$232$i70$i + 1 & 255; //@line 2749
      }
      $760 = HEAP16[$4 >> 1] | 0; //@line 2751
      $762 = 60 - ($760 & 65535) | 0; //@line 2753
      $763 = $$120$3$i71$i & 65535; //@line 2754
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i71$i & 65535) < 13 ? $$120$3$i71$i : 13; //@line 2759
      $767 = 60 - $760 << 16 >> 16; //@line 2760
      do {
       if (($767 & 65535) < 13) {
        $771 = HEAP32[$5 >> 2] | 0; //@line 2766
        HEAP8[$771 >> 0] = (($767 & 65535) << 4) + (HEAPU8[$771 >> 0] | 0); //@line 2771
        $$sink7$i = 1; //@line 2772
       } else {
        $777 = HEAP32[$5 >> 2] | 0; //@line 2775
        $779 = HEAPU8[$777 >> 0] | 0; //@line 2777
        if (($767 & 65535) < 269) {
         HEAP8[$777 >> 0] = $779 + 208; //@line 2781
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $762 + 243; //@line 2786
         $$sink7$i = 2; //@line 2787
         break;
        } else {
         HEAP8[$777 >> 0] = $779 + 224; //@line 2792
         $788 = $762 + 65267 | 0; //@line 2793
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $788; //@line 2797
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $788 >>> 8; //@line 2802
         $$sink7$i = 3; //@line 2803
         break;
        }
       }
      } while (0);
      $797 = (HEAP32[$5 >> 2] | 0) + $$sink7$i | 0; //@line 2809
      HEAP32[$5 >> 2] = $797; //@line 2810
      if (($$120$3$i71$i + -13 & 65535) < 256) {
       HEAP8[$797 >> 0] = $763 + 243; //@line 2816
       $802 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2818
       HEAP32[$5 >> 2] = $802; //@line 2819
       $803 = $802; //@line 2820
      } else {
       $803 = $797; //@line 2822
      }
      HEAP16[$4 >> 1] = 60; //@line 2824
      _memcpy($803 | 0, $3 | 0, $763 | 0) | 0; //@line 2825
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $763; //@line 2828
     }
    }
   }
  }
  $824 = $1 + 24 | 0; //@line 2833
  if (HEAP16[$824 >> 1] | 0) {
   $827 = $1 + 36 | 0; //@line 2837
   if (HEAP32[$827 >> 2] | 0) {
    HEAP8[HEAP32[$5 >> 2] >> 0] = -1; //@line 2842
    $832 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2844
    _memcpy($832 | 0, HEAP32[$827 >> 2] | 0, HEAPU16[$824 >> 1] | 0) | 0; //@line 2848
    HEAP32[$5 >> 2] = $832 + (HEAPU16[$824 >> 1] | 0); //@line 2852
   }
  }
 }
 $$1 = (HEAP32[$5 >> 2] | 0) - $8 & 65535; //@line 2859
 STACKTOP = sp; //@line 2860
 return $$1 | 0; //@line 2860
}
function _sn_coap_parser($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$in = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $101 = 0, $113 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $124 = 0, $145 = 0, $147 = 0, $153 = 0, $154 = 0, $159 = 0, $162 = 0, $165 = 0, $166 = 0, $171 = 0, $174 = 0, $178 = 0, $18 = 0, $181 = 0, $186 = 0, $187 = 0, $188 = 0, $211 = 0, $213 = 0, $231 = 0, $234 = 0, $239 = 0, $240 = 0, $241 = 0, $264 = 0, $265 = 0, $269 = 0, $289 = 0, $292 = 0, $293 = 0, $298 = 0, $301 = 0, $303 = 0, $306 = 0, $32 = 0, $324 = 0, $34 = 0, $344 = 0, $347 = 0, $348 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $381 = 0, $384 = 0, $385 = 0, $390 = 0, $393 = 0, $397 = 0, $4 = 0, $400 = 0, $401 = 0, $406 = 0, $409 = 0, $41 = 0, $413 = 0, $416 = 0, $417 = 0, $422 = 0, $425 = 0, $429 = 0, $43 = 0, $430 = 0, $435 = 0, $436 = 0, $441 = 0, $444 = 0, $450 = 0, $451 = 0, $456 = 0, $457 = 0, $46 = 0, $462 = 0, $465 = 0, $469 = 0, $470 = 0, $480 = 0, $481 = 0, $483 = 0, $49 = 0, $490 = 0, $491 = 0, $51 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $82 = 0, $9 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx7 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $171$looptemp = 0, $298$looptemp = 0, $353$looptemp = 0, $390$looptemp = 0, $406$looptemp = 0, $422$looptemp = 0, $441$looptemp = 0, $462$looptemp = 0, $159$looptemp = 0;
 sp = STACKTOP; //@line 4667
 STACKTOP = STACKTOP + 16 | 0; //@line 4668
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4668
 $4 = sp; //@line 4669
 HEAP32[$4 >> 2] = $2; //@line 4670
 if (!$2) {
  $$0 = 0; //@line 4673
  STACKTOP = sp; //@line 4674
  return $$0 | 0; //@line 4674
 }
 if (($0 | 0) == 0 | ($1 & 65535) < 4) {
  $$0 = 0; //@line 4680
  STACKTOP = sp; //@line 4681
  return $$0 | 0; //@line 4681
 }
 $8 = HEAP32[$0 >> 2] | 0; //@line 4683
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 4684
 $9 = FUNCTION_TABLE_ii[$8 & 15](44) | 0; //@line 4685
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 4688
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4690
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4692
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4694
  HEAP16[$AsyncCtx + 16 >> 1] = $1; //@line 4696
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 4698
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 4700
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 4702
  sp = STACKTOP; //@line 4703
  STACKTOP = sp; //@line 4704
  return 0; //@line 4704
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4706
 if (!$9) {
  $$0 = 0; //@line 4709
  STACKTOP = sp; //@line 4710
  return $$0 | 0; //@line 4710
 }
 dest = $9; //@line 4712
 stop = dest + 44 | 0; //@line 4712
 do {
  HEAP32[dest >> 2] = 0; //@line 4712
  dest = dest + 4 | 0; //@line 4712
 } while ((dest | 0) < (stop | 0));
 $18 = $9 + 16 | 0; //@line 4713
 HEAP32[$18 >> 2] = -1; //@line 4714
 HEAP32[$3 >> 2] = HEAP8[$2 >> 0] & -64 & 255; //@line 4718
 HEAP32[$9 + 12 >> 2] = HEAP8[$2 >> 0] & 48; //@line 4723
 HEAP32[$9 + 8 >> 2] = HEAPU8[$2 + 1 >> 0]; //@line 4728
 $32 = HEAP8[$2 + 3 >> 0] | 0; //@line 4731
 $34 = $9 + 20 | 0; //@line 4733
 HEAP16[$34 >> 1] = $32 & 255; //@line 4734
 HEAP16[$34 >> 1] = HEAPU8[$2 + 2 >> 0] << 8 | $32 & 255; //@line 4741
 $41 = $2 + 4 | 0; //@line 4742
 HEAP32[$4 >> 2] = $41; //@line 4743
 $43 = HEAP8[$2 >> 0] & 15; //@line 4745
 HEAP8[$9 >> 0] = $43; //@line 4746
 if (!($43 << 24 >> 24)) {
  $$in = $41; //@line 4749
  label = 13; //@line 4750
 } else {
  if (($43 & 255) <= 8) {
   $46 = $9 + 28 | 0; //@line 4754
   if (!(HEAP32[$46 >> 2] | 0)) {
    $49 = HEAP32[$0 >> 2] | 0; //@line 4758
    $AsyncCtx3 = _emscripten_alloc_async_context(48, sp) | 0; //@line 4760
    $51 = FUNCTION_TABLE_ii[$49 & 15]($43 & 255) | 0; //@line 4761
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 49; //@line 4764
     HEAP32[$AsyncCtx3 + 4 >> 2] = $18; //@line 4766
     HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 4768
     HEAP32[$AsyncCtx3 + 12 >> 2] = $9; //@line 4770
     HEAP32[$AsyncCtx3 + 16 >> 2] = $4; //@line 4772
     HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 4774
     HEAP32[$AsyncCtx3 + 24 >> 2] = $9; //@line 4776
     HEAP32[$AsyncCtx3 + 28 >> 2] = $41; //@line 4778
     HEAP16[$AsyncCtx3 + 32 >> 1] = $1; //@line 4780
     HEAP32[$AsyncCtx3 + 36 >> 2] = $2; //@line 4782
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 4784
     HEAP32[$AsyncCtx3 + 44 >> 2] = $46; //@line 4786
     sp = STACKTOP; //@line 4787
     STACKTOP = sp; //@line 4788
     return 0; //@line 4788
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4790
    HEAP32[$46 >> 2] = $51; //@line 4791
    if ($51 | 0) {
     _memcpy($51 | 0, $41 | 0, HEAPU8[$9 >> 0] | 0) | 0; //@line 4796
     $68 = $41 + (HEAPU8[$9 >> 0] | 0) | 0; //@line 4799
     HEAP32[$4 >> 2] = $68; //@line 4800
     $$in = $68; //@line 4801
     label = 13; //@line 4802
    }
   }
  }
 }
 L21 : do {
  if ((label | 0) == 13) {
   $69 = $$in; //@line 4809
   $70 = $1 & 65535; //@line 4810
   $71 = $2; //@line 4811
   $72 = $71 + $70 | 0; //@line 4812
   $74 = $9 + 40 | 0; //@line 4814
   $75 = $9 + 32 | 0; //@line 4815
   $76 = $9 + 22 | 0; //@line 4816
   $$0208$i = 0; //@line 4817
   $$sink275$i = $72 - $69 | 0; //@line 4817
   $490 = $69; //@line 4817
   $79 = $$in; //@line 4817
   L23 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 105; //@line 4822
     break;
    }
    $trunc277$i = HEAP8[$79 >> 0] | 0; //@line 4825
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 105; //@line 4828
     break;
    }
    $82 = $trunc277$i & 15; //@line 4832
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 4833
    switch ($trunc276$i & 15) {
    case 15:
     {
      break L21;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$79 + 1 >> 0] | 0; //@line 4845
      $$sink214$i = 13; //@line 4845
      $$sink3$i = 1; //@line 4845
      label = 19; //@line 4846
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$79 + 1 >> 0] << 8) + 269 | 0; //@line 4858
      $$sink214$i = HEAPU8[$79 + 2 >> 0] | 0; //@line 4858
      $$sink3$i = 2; //@line 4858
      label = 19; //@line 4859
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 4863
      $101 = $79; //@line 4863
      $491 = $490; //@line 4863
     }
    }
    if ((label | 0) == 19) {
     label = 0; //@line 4867
     $96 = $79 + $$sink3$i | 0; //@line 4869
     HEAP32[$4 >> 2] = $96; //@line 4870
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 4872
     $101 = $96; //@line 4872
     $491 = $96; //@line 4872
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 4875
    switch ($trunc277$i & 15) {
    case 15:
     {
      break L21;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$101 + 1 >> 0] | 0; //@line 4886
      $$sink216$i = 13; //@line 4886
      $$sink8$i = 1; //@line 4886
      label = 23; //@line 4887
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$101 + 1 >> 0] << 8) + 269 | 0; //@line 4899
      $$sink216$i = HEAPU8[$101 + 2 >> 0] | 0; //@line 4899
      $$sink8$i = 2; //@line 4899
      label = 23; //@line 4900
      break;
     }
    default:
     {
      $$1202$in$i = $82; //@line 4904
      $116 = $491; //@line 4904
      $124 = $101; //@line 4904
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 4908
     $113 = $101 + $$sink8$i | 0; //@line 4910
     HEAP32[$4 >> 2] = $113; //@line 4911
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 4913
     $116 = $113; //@line 4913
     $124 = $113; //@line 4913
    }
    $$1202$i = $$1202$in$i & 65535; //@line 4915
    $117 = $72 - $116 & 65535; //@line 4917
    $trunc$i = $$0208$i & 65535; //@line 4918
    L39 : do {
     switch ($trunc$i << 16 >> 16) {
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$74 >> 2] | 0)) {
        $120 = HEAP32[$0 >> 2] | 0; //@line 4925
        $AsyncCtx7 = _emscripten_alloc_async_context(84, sp) | 0; //@line 4926
        $121 = FUNCTION_TABLE_ii[$120 & 15](68) | 0; //@line 4927
        if (___async) {
         label = 27; //@line 4930
         break L23;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4933
        HEAP32[$74 >> 2] = $121; //@line 4934
        if (!$121) {
         break L21;
        }
        dest = $121; //@line 4939
        stop = dest + 68 | 0; //@line 4939
        do {
         HEAP32[dest >> 2] = 0; //@line 4939
         dest = dest + 4 | 0; //@line 4939
        } while ((dest | 0) < (stop | 0));
        $145 = HEAP32[$74 >> 2] | 0; //@line 4940
        HEAP32[$145 + 16 >> 2] = 60; //@line 4942
        $147 = $145 + 28 | 0; //@line 4943
        HEAP32[$145 + 12 >> 2] = -1; //@line 4945
        HEAP32[$147 >> 2] = -1; //@line 4946
        HEAP32[$147 + 4 >> 2] = -1; //@line 4946
        HEAP32[$147 + 8 >> 2] = -1; //@line 4946
        HEAP32[$147 + 12 >> 2] = -1; //@line 4946
        if (!$145) {
         break L21;
        }
       }
       do {
        switch ($trunc$i << 16 >> 16) {
        case 12:
         {
          label = 31; //@line 4955
          break L39;
          break;
         }
        case 11:
         {
          label = 67; //@line 4960
          break L39;
          break;
         }
        case 14:
         {
          if (($$1202$i & 65535) > 4) {
           break L21;
          }
          $165 = $124 + 1 | 0; //@line 4969
          HEAP32[$4 >> 2] = $165; //@line 4970
          $166 = $$1202$in$i & 255; //@line 4971
          if (!($166 << 24 >> 24)) {
           $$0$lcssa$i258$i = 0; //@line 4974
          } else {
           $$045$i256$i = $166; //@line 4976
           $$06$i255$i = 0; //@line 4976
           $171 = $165; //@line 4976
           while (1) {
            $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 4978
            $171$looptemp = $171;
            $171 = $171 + 1 | 0; //@line 4980
            HEAP32[$4 >> 2] = $171; //@line 4981
            $174 = $$06$i255$i << 8 | HEAPU8[$171$looptemp >> 0]; //@line 4984
            if (!($$045$i256$i << 24 >> 24)) {
             $$0$lcssa$i258$i = $174; //@line 4987
             break;
            } else {
             $$06$i255$i = $174; //@line 4990
            }
           }
          }
          HEAP32[(HEAP32[$74 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i258$i; //@line 4996
          break L39;
          break;
         }
        case 35:
         {
          $178 = $$1202$in$i & 65535; //@line 5001
          if (($$1202$i + -1 & 65535) > 1033) {
           break L21;
          }
          $181 = HEAP32[$74 >> 2] | 0; //@line 5007
          if (HEAP32[$181 + 44 >> 2] | 0) {
           break L21;
          }
          HEAP16[$181 + 2 >> 1] = $$1202$i; //@line 5015
          $186 = $124 + 1 | 0; //@line 5016
          HEAP32[$4 >> 2] = $186; //@line 5017
          $187 = HEAP32[$0 >> 2] | 0; //@line 5018
          $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5019
          $188 = FUNCTION_TABLE_ii[$187 & 15]($$1202$i) | 0; //@line 5020
          if (___async) {
           label = 43; //@line 5023
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5026
          HEAP32[(HEAP32[$74 >> 2] | 0) + 44 >> 2] = $188; //@line 5029
          if (!$188) {
           break L21;
          }
          _memcpy($188 | 0, $186 | 0, $178 | 0) | 0; //@line 5034
          HEAP32[$4 >> 2] = $186 + $178; //@line 5036
          break L39;
          break;
         }
        case 4:
         {
          $211 = HEAP32[$74 >> 2] | 0; //@line 5041
          $AsyncCtx35 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5043
          $213 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $211 + 48 | 0, $211, 4, $$1202$i) | 0; //@line 5044
          if (___async) {
           label = 47; //@line 5047
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5050
          if ($213 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 3:
         {
          $231 = $$1202$in$i & 65535; //@line 5060
          if (($$1202$i + -1 & 65535) > 254) {
           break L21;
          }
          $234 = HEAP32[$74 >> 2] | 0; //@line 5066
          if (HEAP32[$234 + 52 >> 2] | 0) {
           break L21;
          }
          HEAP16[$234 + 4 >> 1] = $$1202$i; //@line 5074
          $239 = $124 + 1 | 0; //@line 5075
          HEAP32[$4 >> 2] = $239; //@line 5076
          $240 = HEAP32[$0 >> 2] | 0; //@line 5077
          $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 5078
          $241 = FUNCTION_TABLE_ii[$240 & 15]($$1202$i) | 0; //@line 5079
          if (___async) {
           label = 52; //@line 5082
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5085
          HEAP32[(HEAP32[$74 >> 2] | 0) + 52 >> 2] = $241; //@line 5088
          if (!$241) {
           break L21;
          }
          _memcpy($241 | 0, $239 | 0, $231 | 0) | 0; //@line 5093
          HEAP32[$4 >> 2] = $239 + $231; //@line 5095
          break L39;
          break;
         }
        case 8:
         {
          $264 = HEAP32[$74 >> 2] | 0; //@line 5100
          $265 = $264 + 56 | 0; //@line 5101
          if (HEAP32[$265 >> 2] | 0) {
           break L21;
          }
          $AsyncCtx31 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5108
          $269 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $265, $264 + 6 | 0, 8, $$1202$i) | 0; //@line 5109
          if (___async) {
           label = 57; //@line 5112
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5115
          if ($269 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 7:
         {
          if (($$1202$i & 65535) > 2) {
           break L21;
          }
          $289 = (HEAP32[$74 >> 2] | 0) + 28 | 0; //@line 5130
          if ((HEAP32[$289 >> 2] | 0) != -1) {
           break L21;
          }
          $292 = $124 + 1 | 0; //@line 5136
          HEAP32[$4 >> 2] = $292; //@line 5137
          $293 = $$1202$in$i & 255; //@line 5138
          if (!($293 << 24 >> 24)) {
           $$0$lcssa$i272$i = 0; //@line 5141
          } else {
           $$045$i270$i = $293; //@line 5143
           $$06$i269$i = 0; //@line 5143
           $298 = $292; //@line 5143
           while (1) {
            $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 5145
            $298$looptemp = $298;
            $298 = $298 + 1 | 0; //@line 5147
            HEAP32[$4 >> 2] = $298; //@line 5148
            $301 = $$06$i269$i << 8 | HEAPU8[$298$looptemp >> 0]; //@line 5151
            if (!($$045$i270$i << 24 >> 24)) {
             $$0$lcssa$i272$i = $301; //@line 5154
             break;
            } else {
             $$06$i269$i = $301; //@line 5157
            }
           }
          }
          HEAP32[$289 >> 2] = $$0$lcssa$i272$i; //@line 5161
          break L39;
          break;
         }
        case 20:
         {
          $303 = HEAP32[$74 >> 2] | 0; //@line 5166
          $AsyncCtx27 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5169
          $306 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $303 + 60 | 0, $303 + 8 | 0, 20, $$1202$i) | 0; //@line 5170
          if (___async) {
           label = 65; //@line 5173
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5176
          if ($306 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 6:
         {
          if (($$1202$i & 65535) > 2) {
           break L21;
          }
          $344 = (HEAP32[$74 >> 2] | 0) + 32 | 0; //@line 5191
          if ((HEAP32[$344 >> 2] | 0) != -1) {
           break L21;
          }
          $347 = $124 + 1 | 0; //@line 5197
          HEAP32[$4 >> 2] = $347; //@line 5198
          $348 = $$1202$in$i & 255; //@line 5199
          if (!($348 << 24 >> 24)) {
           $$0$lcssa$i265$i = 0; //@line 5202
          } else {
           $$045$i263$i = $348; //@line 5204
           $$06$i262$i = 0; //@line 5204
           $353 = $347; //@line 5204
           while (1) {
            $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 5206
            $353$looptemp = $353;
            $353 = $353 + 1 | 0; //@line 5208
            HEAP32[$4 >> 2] = $353; //@line 5209
            $356 = $$06$i262$i << 8 | HEAPU8[$353$looptemp >> 0]; //@line 5212
            if (!($$045$i263$i << 24 >> 24)) {
             $$0$lcssa$i265$i = $356; //@line 5215
             break;
            } else {
             $$06$i262$i = $356; //@line 5218
            }
           }
          }
          HEAP32[$344 >> 2] = $$0$lcssa$i265$i; //@line 5222
          break L39;
          break;
         }
        case 15:
         {
          $358 = HEAP32[$74 >> 2] | 0; //@line 5227
          $AsyncCtx19 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5230
          $361 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $358 + 64 | 0, $358 + 10 | 0, 15, $$1202$i) | 0; //@line 5231
          if (___async) {
           label = 76; //@line 5234
           break L23;
          }
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5237
          if ($361 << 24 >> 24 > -1) {
           break L39;
          } else {
           break L21;
          }
          break;
         }
        case 23:
         {
          if (($$1202$i & 65535) > 3) {
           break L21;
          }
          $381 = (HEAP32[$74 >> 2] | 0) + 40 | 0; //@line 5252
          if ((HEAP32[$381 >> 2] | 0) != -1) {
           break L21;
          }
          $384 = $124 + 1 | 0; //@line 5258
          HEAP32[$4 >> 2] = $384; //@line 5259
          $385 = $$1202$in$i & 255; //@line 5260
          if (!($385 << 24 >> 24)) {
           $$0$lcssa$i251$i = 0; //@line 5263
          } else {
           $$045$i249$i = $385; //@line 5265
           $$06$i248$i = 0; //@line 5265
           $390 = $384; //@line 5265
           while (1) {
            $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 5267
            $390$looptemp = $390;
            $390 = $390 + 1 | 0; //@line 5269
            HEAP32[$4 >> 2] = $390; //@line 5270
            $393 = $$06$i248$i << 8 | HEAPU8[$390$looptemp >> 0]; //@line 5273
            if (!($$045$i249$i << 24 >> 24)) {
             $$0$lcssa$i251$i = $393; //@line 5276
             break;
            } else {
             $$06$i248$i = $393; //@line 5279
            }
           }
          }
          HEAP32[$381 >> 2] = $$0$lcssa$i251$i; //@line 5283
          break L39;
          break;
         }
        case 27:
         {
          if (($$1202$i & 65535) > 3) {
           break L21;
          }
          $397 = (HEAP32[$74 >> 2] | 0) + 36 | 0; //@line 5293
          if ((HEAP32[$397 >> 2] | 0) != -1) {
           break L21;
          }
          $400 = $124 + 1 | 0; //@line 5299
          HEAP32[$4 >> 2] = $400; //@line 5300
          $401 = $$1202$in$i & 255; //@line 5301
          if (!($401 << 24 >> 24)) {
           $$0$lcssa$i244$i = 0; //@line 5304
          } else {
           $$045$i242$i = $401; //@line 5306
           $$06$i241$i = 0; //@line 5306
           $406 = $400; //@line 5306
           while (1) {
            $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 5308
            $406$looptemp = $406;
            $406 = $406 + 1 | 0; //@line 5310
            HEAP32[$4 >> 2] = $406; //@line 5311
            $409 = $$06$i241$i << 8 | HEAPU8[$406$looptemp >> 0]; //@line 5314
            if (!($$045$i242$i << 24 >> 24)) {
             $$0$lcssa$i244$i = $409; //@line 5317
             break;
            } else {
             $$06$i241$i = $409; //@line 5320
            }
           }
          }
          HEAP32[$397 >> 2] = $$0$lcssa$i244$i; //@line 5324
          break L39;
          break;
         }
        case 17:
         {
          if (($$1202$i & 65535) > 2) {
           break L21;
          }
          $413 = (HEAP32[$74 >> 2] | 0) + 12 | 0; //@line 5334
          if ((HEAP32[$413 >> 2] | 0) != -1) {
           break L21;
          }
          $416 = $124 + 1 | 0; //@line 5340
          HEAP32[$4 >> 2] = $416; //@line 5341
          $417 = $$1202$in$i & 255; //@line 5342
          if (!($417 << 24 >> 24)) {
           $$0$lcssa$i237$i = 0; //@line 5345
          } else {
           $$045$i235$i = $417; //@line 5347
           $$06$i234$i = 0; //@line 5347
           $422 = $416; //@line 5347
           while (1) {
            $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 5349
            $422$looptemp = $422;
            $422 = $422 + 1 | 0; //@line 5351
            HEAP32[$4 >> 2] = $422; //@line 5352
            $425 = $$06$i234$i << 8 | HEAPU8[$422$looptemp >> 0]; //@line 5355
            if (!($$045$i235$i << 24 >> 24)) {
             $$0$lcssa$i237$i = $425; //@line 5358
             break;
            } else {
             $$06$i234$i = $425; //@line 5361
            }
           }
          }
          HEAP32[$413 >> 2] = $$0$lcssa$i237$i; //@line 5365
          break L39;
          break;
         }
        case 60:
         {
          if (($$1202$i & 65535) > 4) {
           break L21;
          }
          $429 = (HEAP32[$74 >> 2] | 0) + 1 | 0; //@line 5375
          $430 = HEAP8[$429 >> 0] | 0; //@line 5376
          if ($430 & 1) {
           break L21;
          }
          HEAP8[$429 >> 0] = $430 | 1; //@line 5383
          $435 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5385
          HEAP32[$4 >> 2] = $435; //@line 5386
          $436 = $$1202$in$i & 255; //@line 5387
          if (!($436 << 24 >> 24)) {
           $$0$lcssa$i230$i = 0; //@line 5390
          } else {
           $$045$i228$i = $436; //@line 5392
           $$06$i227$i = 0; //@line 5392
           $441 = $435; //@line 5392
           while (1) {
            $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 5394
            $441$looptemp = $441;
            $441 = $441 + 1 | 0; //@line 5396
            HEAP32[$4 >> 2] = $441; //@line 5397
            $444 = $$06$i227$i << 8 | HEAPU8[$441$looptemp >> 0]; //@line 5400
            if (!($$045$i228$i << 24 >> 24)) {
             $$0$lcssa$i230$i = $444; //@line 5403
             break;
            } else {
             $$06$i227$i = $444; //@line 5406
            }
           }
          }
          HEAP32[(HEAP32[$74 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i230$i; //@line 5412
          break L39;
          break;
         }
        case 28:
         {
          if (($$1202$i & 65535) > 4) {
           break L21;
          }
          $450 = (HEAP32[$74 >> 2] | 0) + 1 | 0; //@line 5422
          $451 = HEAP8[$450 >> 0] | 0; //@line 5423
          if ($451 & 2) {
           break L21;
          }
          HEAP8[$450 >> 0] = $451 | 2; //@line 5430
          $456 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5432
          HEAP32[$4 >> 2] = $456; //@line 5433
          $457 = $$1202$in$i & 255; //@line 5434
          if (!($457 << 24 >> 24)) {
           $$0$lcssa$i223$i = 0; //@line 5437
          } else {
           $$045$i221$i = $457; //@line 5439
           $$06$i220$i = 0; //@line 5439
           $462 = $456; //@line 5439
           while (1) {
            $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 5441
            $462$looptemp = $462;
            $462 = $462 + 1 | 0; //@line 5443
            HEAP32[$4 >> 2] = $462; //@line 5444
            $465 = $$06$i220$i << 8 | HEAPU8[$462$looptemp >> 0]; //@line 5447
            if (!($$045$i221$i << 24 >> 24)) {
             $$0$lcssa$i223$i = $465; //@line 5450
             break;
            } else {
             $$06$i220$i = $465; //@line 5453
            }
           }
          }
          HEAP32[(HEAP32[$74 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i223$i; //@line 5459
          break L39;
          break;
         }
        default:
         {
          break L21;
         }
        }
       } while (0);
       break;
      }
     case 12:
      {
       label = 31; //@line 5471
       break;
      }
     case 11:
      {
       label = 67; //@line 5475
       break;
      }
     default:
      {
       break L21;
      }
     }
    } while (0);
    if ((label | 0) == 31) {
     label = 0; //@line 5484
     if (($$1202$i & 65535) > 2) {
      break L21;
     }
     if ((HEAP32[$18 >> 2] | 0) != -1) {
      break L21;
     }
     $153 = $124 + 1 | 0; //@line 5494
     HEAP32[$4 >> 2] = $153; //@line 5495
     $154 = $$1202$in$i & 255; //@line 5496
     if (!($154 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 5499
     } else {
      $$045$i$i = $154; //@line 5501
      $$06$i$i = 0; //@line 5501
      $159 = $153; //@line 5501
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 5503
       $159$looptemp = $159;
       $159 = $159 + 1 | 0; //@line 5505
       HEAP32[$4 >> 2] = $159; //@line 5506
       $162 = $$06$i$i << 8 | HEAPU8[$159$looptemp >> 0]; //@line 5509
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $162; //@line 5512
        break;
       } else {
        $$06$i$i = $162; //@line 5515
       }
      }
     }
     HEAP32[$18 >> 2] = $$0$lcssa$i$i; //@line 5519
    } else if ((label | 0) == 67) {
     label = 0; //@line 5522
     $AsyncCtx23 = _emscripten_alloc_async_context(68, sp) | 0; //@line 5523
     $324 = _sn_coap_parser_options_parse_multiple_options($0, $4, $117, $75, $76, 11, $$1202$i) | 0; //@line 5524
     if (___async) {
      label = 68; //@line 5527
      break;
     }
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5530
     if ($324 << 24 >> 24 <= -1) {
      break L21;
     }
    }
    $469 = HEAP32[$4 >> 2] | 0; //@line 5536
    $470 = $469 - $71 | 0; //@line 5537
    if (($470 | 0) > ($70 | 0)) {
     break L21;
    } else {
     $$sink275$i = $70 - $470 | 0; //@line 5544
     $490 = $469; //@line 5544
     $79 = $469; //@line 5544
    }
   }
   if ((label | 0) == 27) {
    HEAP32[$AsyncCtx7 >> 2] = 50; //@line 5548
    HEAP32[$AsyncCtx7 + 4 >> 2] = $18; //@line 5550
    HEAP32[$AsyncCtx7 + 8 >> 2] = $124; //@line 5552
    HEAP32[$AsyncCtx7 + 12 >> 2] = $4; //@line 5554
    HEAP32[$AsyncCtx7 + 16 >> 2] = $$1202$in$i; //@line 5556
    HEAP32[$AsyncCtx7 + 20 >> 2] = $9; //@line 5558
    HEAP32[$AsyncCtx7 + 24 >> 2] = $4; //@line 5560
    HEAP32[$AsyncCtx7 + 28 >> 2] = $0; //@line 5562
    HEAP32[$AsyncCtx7 + 32 >> 2] = $9; //@line 5564
    HEAP32[$AsyncCtx7 + 36 >> 2] = $74; //@line 5566
    HEAP16[$AsyncCtx7 + 40 >> 1] = $trunc$i; //@line 5568
    HEAP16[$AsyncCtx7 + 42 >> 1] = $$1202$i; //@line 5570
    HEAP32[$AsyncCtx7 + 44 >> 2] = $71; //@line 5572
    HEAP32[$AsyncCtx7 + 48 >> 2] = $70; //@line 5574
    HEAP32[$AsyncCtx7 + 52 >> 2] = $72; //@line 5576
    HEAP32[$AsyncCtx7 + 56 >> 2] = $4; //@line 5578
    HEAP32[$AsyncCtx7 + 60 >> 2] = $$0208$i; //@line 5580
    HEAP32[$AsyncCtx7 + 64 >> 2] = $74; //@line 5582
    HEAP32[$AsyncCtx7 + 68 >> 2] = $0; //@line 5584
    HEAP16[$AsyncCtx7 + 72 >> 1] = $117; //@line 5586
    HEAP32[$AsyncCtx7 + 76 >> 2] = $75; //@line 5588
    HEAP32[$AsyncCtx7 + 80 >> 2] = $76; //@line 5590
    sp = STACKTOP; //@line 5591
    STACKTOP = sp; //@line 5592
    return 0; //@line 5592
   } else if ((label | 0) == 43) {
    HEAP32[$AsyncCtx11 >> 2] = 51; //@line 5595
    HEAP32[$AsyncCtx11 + 4 >> 2] = $18; //@line 5597
    HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 5599
    HEAP32[$AsyncCtx11 + 12 >> 2] = $9; //@line 5601
    HEAP32[$AsyncCtx11 + 16 >> 2] = $4; //@line 5603
    HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 5605
    HEAP32[$AsyncCtx11 + 24 >> 2] = $9; //@line 5607
    HEAP32[$AsyncCtx11 + 28 >> 2] = $74; //@line 5609
    HEAP32[$AsyncCtx11 + 32 >> 2] = $71; //@line 5611
    HEAP32[$AsyncCtx11 + 36 >> 2] = $70; //@line 5613
    HEAP32[$AsyncCtx11 + 40 >> 2] = $72; //@line 5615
    HEAP32[$AsyncCtx11 + 44 >> 2] = $4; //@line 5617
    HEAP32[$AsyncCtx11 + 48 >> 2] = $74; //@line 5619
    HEAP32[$AsyncCtx11 + 52 >> 2] = $0; //@line 5621
    HEAP32[$AsyncCtx11 + 56 >> 2] = $75; //@line 5623
    HEAP32[$AsyncCtx11 + 60 >> 2] = $76; //@line 5625
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$0208$i; //@line 5627
    HEAP32[$AsyncCtx11 + 68 >> 2] = $186; //@line 5629
    HEAP32[$AsyncCtx11 + 72 >> 2] = $178; //@line 5631
    sp = STACKTOP; //@line 5632
    STACKTOP = sp; //@line 5633
    return 0; //@line 5633
   } else if ((label | 0) == 47) {
    HEAP32[$AsyncCtx35 >> 2] = 52; //@line 5636
    HEAP32[$AsyncCtx35 + 4 >> 2] = $18; //@line 5638
    HEAP32[$AsyncCtx35 + 8 >> 2] = $4; //@line 5640
    HEAP32[$AsyncCtx35 + 12 >> 2] = $9; //@line 5642
    HEAP32[$AsyncCtx35 + 16 >> 2] = $4; //@line 5644
    HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 5646
    HEAP32[$AsyncCtx35 + 24 >> 2] = $9; //@line 5648
    HEAP32[$AsyncCtx35 + 28 >> 2] = $74; //@line 5650
    HEAP32[$AsyncCtx35 + 32 >> 2] = $71; //@line 5652
    HEAP32[$AsyncCtx35 + 36 >> 2] = $70; //@line 5654
    HEAP32[$AsyncCtx35 + 40 >> 2] = $72; //@line 5656
    HEAP32[$AsyncCtx35 + 44 >> 2] = $4; //@line 5658
    HEAP32[$AsyncCtx35 + 48 >> 2] = $74; //@line 5660
    HEAP32[$AsyncCtx35 + 52 >> 2] = $0; //@line 5662
    HEAP32[$AsyncCtx35 + 56 >> 2] = $75; //@line 5664
    HEAP32[$AsyncCtx35 + 60 >> 2] = $76; //@line 5666
    HEAP32[$AsyncCtx35 + 64 >> 2] = $$0208$i; //@line 5668
    sp = STACKTOP; //@line 5669
    STACKTOP = sp; //@line 5670
    return 0; //@line 5670
   } else if ((label | 0) == 52) {
    HEAP32[$AsyncCtx15 >> 2] = 53; //@line 5673
    HEAP32[$AsyncCtx15 + 4 >> 2] = $18; //@line 5675
    HEAP32[$AsyncCtx15 + 8 >> 2] = $4; //@line 5677
    HEAP32[$AsyncCtx15 + 12 >> 2] = $9; //@line 5679
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 5681
    HEAP32[$AsyncCtx15 + 20 >> 2] = $0; //@line 5683
    HEAP32[$AsyncCtx15 + 24 >> 2] = $9; //@line 5685
    HEAP32[$AsyncCtx15 + 28 >> 2] = $74; //@line 5687
    HEAP32[$AsyncCtx15 + 32 >> 2] = $71; //@line 5689
    HEAP32[$AsyncCtx15 + 36 >> 2] = $70; //@line 5691
    HEAP32[$AsyncCtx15 + 40 >> 2] = $72; //@line 5693
    HEAP32[$AsyncCtx15 + 44 >> 2] = $4; //@line 5695
    HEAP32[$AsyncCtx15 + 48 >> 2] = $74; //@line 5697
    HEAP32[$AsyncCtx15 + 52 >> 2] = $0; //@line 5699
    HEAP32[$AsyncCtx15 + 56 >> 2] = $75; //@line 5701
    HEAP32[$AsyncCtx15 + 60 >> 2] = $76; //@line 5703
    HEAP32[$AsyncCtx15 + 64 >> 2] = $$0208$i; //@line 5705
    HEAP32[$AsyncCtx15 + 68 >> 2] = $239; //@line 5707
    HEAP32[$AsyncCtx15 + 72 >> 2] = $231; //@line 5709
    sp = STACKTOP; //@line 5710
    STACKTOP = sp; //@line 5711
    return 0; //@line 5711
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx31 >> 2] = 54; //@line 5714
    HEAP32[$AsyncCtx31 + 4 >> 2] = $18; //@line 5716
    HEAP32[$AsyncCtx31 + 8 >> 2] = $4; //@line 5718
    HEAP32[$AsyncCtx31 + 12 >> 2] = $9; //@line 5720
    HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 5722
    HEAP32[$AsyncCtx31 + 20 >> 2] = $0; //@line 5724
    HEAP32[$AsyncCtx31 + 24 >> 2] = $9; //@line 5726
    HEAP32[$AsyncCtx31 + 28 >> 2] = $74; //@line 5728
    HEAP32[$AsyncCtx31 + 32 >> 2] = $71; //@line 5730
    HEAP32[$AsyncCtx31 + 36 >> 2] = $70; //@line 5732
    HEAP32[$AsyncCtx31 + 40 >> 2] = $72; //@line 5734
    HEAP32[$AsyncCtx31 + 44 >> 2] = $4; //@line 5736
    HEAP32[$AsyncCtx31 + 48 >> 2] = $74; //@line 5738
    HEAP32[$AsyncCtx31 + 52 >> 2] = $0; //@line 5740
    HEAP32[$AsyncCtx31 + 56 >> 2] = $75; //@line 5742
    HEAP32[$AsyncCtx31 + 60 >> 2] = $76; //@line 5744
    HEAP32[$AsyncCtx31 + 64 >> 2] = $$0208$i; //@line 5746
    sp = STACKTOP; //@line 5747
    STACKTOP = sp; //@line 5748
    return 0; //@line 5748
   } else if ((label | 0) == 65) {
    HEAP32[$AsyncCtx27 >> 2] = 55; //@line 5751
    HEAP32[$AsyncCtx27 + 4 >> 2] = $18; //@line 5753
    HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 5755
    HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 5757
    HEAP32[$AsyncCtx27 + 16 >> 2] = $4; //@line 5759
    HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 5761
    HEAP32[$AsyncCtx27 + 24 >> 2] = $9; //@line 5763
    HEAP32[$AsyncCtx27 + 28 >> 2] = $74; //@line 5765
    HEAP32[$AsyncCtx27 + 32 >> 2] = $71; //@line 5767
    HEAP32[$AsyncCtx27 + 36 >> 2] = $70; //@line 5769
    HEAP32[$AsyncCtx27 + 40 >> 2] = $72; //@line 5771
    HEAP32[$AsyncCtx27 + 44 >> 2] = $4; //@line 5773
    HEAP32[$AsyncCtx27 + 48 >> 2] = $74; //@line 5775
    HEAP32[$AsyncCtx27 + 52 >> 2] = $0; //@line 5777
    HEAP32[$AsyncCtx27 + 56 >> 2] = $75; //@line 5779
    HEAP32[$AsyncCtx27 + 60 >> 2] = $76; //@line 5781
    HEAP32[$AsyncCtx27 + 64 >> 2] = $$0208$i; //@line 5783
    sp = STACKTOP; //@line 5784
    STACKTOP = sp; //@line 5785
    return 0; //@line 5785
   } else if ((label | 0) == 68) {
    HEAP32[$AsyncCtx23 >> 2] = 56; //@line 5788
    HEAP32[$AsyncCtx23 + 4 >> 2] = $18; //@line 5790
    HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 5792
    HEAP32[$AsyncCtx23 + 12 >> 2] = $9; //@line 5794
    HEAP32[$AsyncCtx23 + 16 >> 2] = $4; //@line 5796
    HEAP32[$AsyncCtx23 + 20 >> 2] = $0; //@line 5798
    HEAP32[$AsyncCtx23 + 24 >> 2] = $9; //@line 5800
    HEAP32[$AsyncCtx23 + 28 >> 2] = $74; //@line 5802
    HEAP32[$AsyncCtx23 + 32 >> 2] = $71; //@line 5804
    HEAP32[$AsyncCtx23 + 36 >> 2] = $70; //@line 5806
    HEAP32[$AsyncCtx23 + 40 >> 2] = $72; //@line 5808
    HEAP32[$AsyncCtx23 + 44 >> 2] = $4; //@line 5810
    HEAP32[$AsyncCtx23 + 48 >> 2] = $74; //@line 5812
    HEAP32[$AsyncCtx23 + 52 >> 2] = $0; //@line 5814
    HEAP32[$AsyncCtx23 + 56 >> 2] = $75; //@line 5816
    HEAP32[$AsyncCtx23 + 60 >> 2] = $76; //@line 5818
    HEAP32[$AsyncCtx23 + 64 >> 2] = $$0208$i; //@line 5820
    sp = STACKTOP; //@line 5821
    STACKTOP = sp; //@line 5822
    return 0; //@line 5822
   } else if ((label | 0) == 76) {
    HEAP32[$AsyncCtx19 >> 2] = 57; //@line 5825
    HEAP32[$AsyncCtx19 + 4 >> 2] = $18; //@line 5827
    HEAP32[$AsyncCtx19 + 8 >> 2] = $4; //@line 5829
    HEAP32[$AsyncCtx19 + 12 >> 2] = $9; //@line 5831
    HEAP32[$AsyncCtx19 + 16 >> 2] = $4; //@line 5833
    HEAP32[$AsyncCtx19 + 20 >> 2] = $0; //@line 5835
    HEAP32[$AsyncCtx19 + 24 >> 2] = $9; //@line 5837
    HEAP32[$AsyncCtx19 + 28 >> 2] = $74; //@line 5839
    HEAP32[$AsyncCtx19 + 32 >> 2] = $71; //@line 5841
    HEAP32[$AsyncCtx19 + 36 >> 2] = $70; //@line 5843
    HEAP32[$AsyncCtx19 + 40 >> 2] = $72; //@line 5845
    HEAP32[$AsyncCtx19 + 44 >> 2] = $4; //@line 5847
    HEAP32[$AsyncCtx19 + 48 >> 2] = $74; //@line 5849
    HEAP32[$AsyncCtx19 + 52 >> 2] = $0; //@line 5851
    HEAP32[$AsyncCtx19 + 56 >> 2] = $75; //@line 5853
    HEAP32[$AsyncCtx19 + 60 >> 2] = $76; //@line 5855
    HEAP32[$AsyncCtx19 + 64 >> 2] = $$0208$i; //@line 5857
    sp = STACKTOP; //@line 5858
    STACKTOP = sp; //@line 5859
    return 0; //@line 5859
   } else if ((label | 0) == 105) {
    if (($79 - $71 | 0) >= ($70 | 0)) {
     $$0 = $9; //@line 5866
     STACKTOP = sp; //@line 5867
     return $$0 | 0; //@line 5867
    }
    if ((HEAP8[$79 >> 0] | 0) == -1) {
     $480 = $79 + 1 | 0; //@line 5872
     HEAP32[$4 >> 2] = $480; //@line 5873
     $481 = $480; //@line 5874
     $483 = $71 - $481 + $70 | 0; //@line 5876
     HEAP16[$9 + 24 >> 1] = $483; //@line 5879
     if ($483 & 65535 | 0) {
      HEAP32[$9 + 36 >> 2] = $481; //@line 5884
      $$0 = $9; //@line 5885
      STACKTOP = sp; //@line 5886
      return $$0 | 0; //@line 5886
     }
    }
    HEAP32[$9 + 4 >> 2] = 1; //@line 5890
    $$0 = $9; //@line 5891
    STACKTOP = sp; //@line 5892
    return $$0 | 0; //@line 5892
   }
  }
 } while (0);
 HEAP32[$9 + 4 >> 2] = 1; //@line 5897
 $$0 = $9; //@line 5898
 STACKTOP = sp; //@line 5899
 return $$0 | 0; //@line 5899
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$019$i = 0, $$019$i$1 = 0, $$019$i$2 = 0, $$019$i$3 = 0, $$019$i$4 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$2 = 0, $$3 = 0, $$355 = 0, $$byval_copy58 = 0, $$lcssa$i = 0, $$lcssa127 = 0, $$sink$i = 0, $11 = 0, $114 = 0, $120 = 0, $127 = 0, $128 = 0, $133 = 0, $135 = 0, $136 = 0, $139 = 0, $143 = 0, $144 = 0, $148 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $167 = 0, $178 = 0, $183 = 0, $184 = 0, $186 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $261 = 0, $268 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $283 = 0, $29 = 0, $290 = 0, $30 = 0, $31 = 0, $311 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $349 = 0, $35 = 0, $356 = 0, $37 = 0, $377 = 0, $38 = 0, $39 = 0, $40 = 0, $400 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $415 = 0, $422 = 0, $443 = 0, $466 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $481 = 0, $488 = 0, $5 = 0, $50 = 0, $505 = 0, $521 = 0, $57 = 0, $6 = 0, $78 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8701
 STACKTOP = STACKTOP + 144 | 0; //@line 8702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 8702
 $$byval_copy58 = sp + 120 | 0; //@line 8703
 $5 = sp + 64 | 0; //@line 8704
 $6 = sp; //@line 8705
 if (!$1) {
  $$3 = -3003; //@line 8708
  STACKTOP = sp; //@line 8709
  return $$3 | 0; //@line 8709
 }
 $8 = _strlen($1) | 0; //@line 8711
 if (($8 | 0) > 128 | ($8 | 0) == 0) {
  $$3 = -3003; //@line 8716
  STACKTOP = sp; //@line 8717
  return $$3 | 0; //@line 8717
 }
 __ZN9UDPSocketC2Ev($5); //@line 8719
 $AsyncCtx41 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8720
 $11 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 8721
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 90; //@line 8724
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 8726
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 8728
  HEAP32[$AsyncCtx41 + 12 >> 2] = $2; //@line 8730
  HEAP32[$AsyncCtx41 + 16 >> 2] = $5; //@line 8732
  HEAP32[$AsyncCtx41 + 20 >> 2] = $5; //@line 8734
  HEAP32[$AsyncCtx41 + 24 >> 2] = $5; //@line 8736
  HEAP32[$AsyncCtx41 + 28 >> 2] = $6; //@line 8738
  HEAP32[$AsyncCtx41 + 32 >> 2] = $4; //@line 8740
  sp = STACKTOP; //@line 8741
  STACKTOP = sp; //@line 8742
  return 0; //@line 8742
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 8744
 do {
  if (!$11) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 8748
   $21 = _malloc(512) | 0; //@line 8749
   if (!$21) {
    $$2 = -3007; //@line 8752
   } else {
    $23 = $21; //@line 8754
    $24 = $21 + 1 | 0; //@line 8755
    $25 = $21 + 2 | 0; //@line 8756
    $26 = $21 + 3 | 0; //@line 8757
    $27 = $21 + 4 | 0; //@line 8758
    $28 = $21 + 5 | 0; //@line 8759
    $29 = $21 + 6 | 0; //@line 8760
    $30 = $21 + 7 | 0; //@line 8761
    $31 = $21 + 12 | 0; //@line 8762
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 8764
    HEAP8[$21 >> 0] = 0; //@line 8765
    HEAP8[$24 >> 0] = 1; //@line 8766
    HEAP8[$25 >> 0] = 1; //@line 8767
    HEAP8[$26 >> 0] = 0; //@line 8768
    HEAP8[$27 >> 0] = 0; //@line 8769
    HEAP8[$28 >> 0] = 1; //@line 8770
    HEAP8[$29 >> 0] = 0; //@line 8771
    HEAP8[$29 + 1 >> 0] = 0; //@line 8771
    HEAP8[$29 + 2 >> 0] = 0; //@line 8771
    HEAP8[$29 + 3 >> 0] = 0; //@line 8771
    HEAP8[$29 + 4 >> 0] = 0; //@line 8771
    HEAP8[$29 + 5 >> 0] = 0; //@line 8771
    if (!(HEAP8[$1 >> 0] | 0)) {
     $50 = $31; //@line 8775
    } else {
     $$019$i = $1; //@line 8777
     $38 = $31; //@line 8777
     while (1) {
      $35 = _strcspn($$019$i, 3745) | 0; //@line 8779
      $37 = $38 + 1 | 0; //@line 8781
      HEAP8[$38 >> 0] = $35; //@line 8782
      $39 = $35 & 255; //@line 8783
      _memcpy($37 | 0, $$019$i | 0, $39 | 0) | 0; //@line 8784
      $40 = $37 + $39 | 0; //@line 8785
      $$019$i = $$019$i + ($35 + ((HEAP8[$$019$i + $35 >> 0] | 0) == 46 & 1)) | 0; //@line 8791
      if (!(HEAP8[$$019$i >> 0] | 0)) {
       $50 = $40; //@line 8795
       break;
      } else {
       $38 = $40; //@line 8798
      }
     }
    }
    HEAP8[$50 >> 0] = 0; //@line 8803
    HEAP8[$50 + 1 >> 0] = 0; //@line 8805
    HEAP8[$50 + 2 >> 0] = $$sink$i; //@line 8807
    HEAP8[$50 + 3 >> 0] = 0; //@line 8809
    HEAP8[$50 + 4 >> 0] = 1; //@line 8810
    HEAP32[$$byval_copy58 >> 2] = HEAP32[114]; //@line 8811
    HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[115]; //@line 8811
    HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[116]; //@line 8811
    HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[117]; //@line 8811
    HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[118]; //@line 8811
    __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 8812
    $AsyncCtx30 = _emscripten_alloc_async_context(80, sp) | 0; //@line 8816
    $57 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $50 + 5 - $23 | 0) | 0; //@line 8817
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 91; //@line 8820
     HEAP32[$AsyncCtx30 + 4 >> 2] = $31; //@line 8822
     HEAP32[$AsyncCtx30 + 8 >> 2] = $1; //@line 8824
     HEAP32[$AsyncCtx30 + 12 >> 2] = $3; //@line 8826
     HEAP32[$AsyncCtx30 + 16 >> 2] = $2; //@line 8828
     HEAP32[$AsyncCtx30 + 20 >> 2] = $5; //@line 8830
     HEAP32[$AsyncCtx30 + 24 >> 2] = $21; //@line 8832
     HEAP32[$AsyncCtx30 + 28 >> 2] = $24; //@line 8834
     HEAP32[$AsyncCtx30 + 32 >> 2] = $25; //@line 8836
     HEAP32[$AsyncCtx30 + 36 >> 2] = $26; //@line 8838
     HEAP32[$AsyncCtx30 + 40 >> 2] = $27; //@line 8840
     HEAP32[$AsyncCtx30 + 44 >> 2] = $28; //@line 8842
     HEAP32[$AsyncCtx30 + 48 >> 2] = $29; //@line 8844
     HEAP32[$AsyncCtx30 + 52 >> 2] = $30; //@line 8846
     HEAP32[$AsyncCtx30 + 56 >> 2] = $5; //@line 8848
     HEAP32[$AsyncCtx30 + 60 >> 2] = $5; //@line 8850
     HEAP32[$AsyncCtx30 + 64 >> 2] = $6; //@line 8852
     HEAP8[$AsyncCtx30 + 68 >> 0] = $$sink$i; //@line 8854
     HEAP32[$AsyncCtx30 + 72 >> 2] = $6; //@line 8856
     HEAP32[$AsyncCtx30 + 76 >> 2] = $23; //@line 8858
     sp = STACKTOP; //@line 8859
     STACKTOP = sp; //@line 8860
     return 0; //@line 8860
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8862
    do {
     if (($57 | 0) < 0) {
      label = 35; //@line 8866
     } else {
      $AsyncCtx15 = _emscripten_alloc_async_context(80, sp) | 0; //@line 8868
      $78 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 8869
      if (___async) {
       HEAP32[$AsyncCtx15 >> 2] = 92; //@line 8872
       HEAP32[$AsyncCtx15 + 4 >> 2] = $31; //@line 8874
       HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 8876
       HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8878
       HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 8880
       HEAP32[$AsyncCtx15 + 20 >> 2] = $5; //@line 8882
       HEAP32[$AsyncCtx15 + 24 >> 2] = $21; //@line 8884
       HEAP32[$AsyncCtx15 + 28 >> 2] = $24; //@line 8886
       HEAP32[$AsyncCtx15 + 32 >> 2] = $25; //@line 8888
       HEAP32[$AsyncCtx15 + 36 >> 2] = $26; //@line 8890
       HEAP32[$AsyncCtx15 + 40 >> 2] = $27; //@line 8892
       HEAP32[$AsyncCtx15 + 44 >> 2] = $28; //@line 8894
       HEAP32[$AsyncCtx15 + 48 >> 2] = $29; //@line 8896
       HEAP32[$AsyncCtx15 + 52 >> 2] = $30; //@line 8898
       HEAP32[$AsyncCtx15 + 56 >> 2] = $5; //@line 8900
       HEAP32[$AsyncCtx15 + 60 >> 2] = $5; //@line 8902
       HEAP32[$AsyncCtx15 + 64 >> 2] = $6; //@line 8904
       HEAP8[$AsyncCtx15 + 68 >> 0] = $$sink$i; //@line 8906
       HEAP32[$AsyncCtx15 + 72 >> 2] = $6; //@line 8908
       HEAP32[$AsyncCtx15 + 76 >> 2] = $23; //@line 8910
       sp = STACKTOP; //@line 8911
       STACKTOP = sp; //@line 8912
       return 0; //@line 8912
      } else {
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8914
       if (($78 | 0) == -3001) {
        label = 35; //@line 8917
        break;
       } else {
        $$lcssa127 = $78; //@line 8920
        label = 15; //@line 8921
        break;
       }
      }
     }
    } while (0);
    L25 : do {
     if ((label | 0) == 35) {
      HEAP8[$21 >> 0] = 0; //@line 8929
      HEAP8[$24 >> 0] = 1; //@line 8930
      HEAP8[$25 >> 0] = 1; //@line 8931
      HEAP8[$26 >> 0] = 0; //@line 8932
      HEAP8[$27 >> 0] = 0; //@line 8933
      HEAP8[$28 >> 0] = 1; //@line 8934
      HEAP8[$29 >> 0] = 0; //@line 8935
      HEAP8[$29 + 1 >> 0] = 0; //@line 8935
      HEAP8[$29 + 2 >> 0] = 0; //@line 8935
      HEAP8[$29 + 3 >> 0] = 0; //@line 8935
      HEAP8[$29 + 4 >> 0] = 0; //@line 8935
      HEAP8[$29 + 5 >> 0] = 0; //@line 8935
      if (!(HEAP8[$1 >> 0] | 0)) {
       $283 = $31; //@line 8939
      } else {
       $$019$i$1 = $1; //@line 8941
       $271 = $31; //@line 8941
       while (1) {
        $268 = _strcspn($$019$i$1, 3745) | 0; //@line 8943
        $270 = $271 + 1 | 0; //@line 8945
        HEAP8[$271 >> 0] = $268; //@line 8946
        $272 = $268 & 255; //@line 8947
        _memcpy($270 | 0, $$019$i$1 | 0, $272 | 0) | 0; //@line 8948
        $273 = $270 + $272 | 0; //@line 8949
        $$019$i$1 = $$019$i$1 + ($268 + ((HEAP8[$$019$i$1 + $268 >> 0] | 0) == 46 & 1)) | 0; //@line 8955
        if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
         $283 = $273; //@line 8959
         break;
        } else {
         $271 = $273; //@line 8962
        }
       }
      }
      HEAP8[$283 >> 0] = 0; //@line 8967
      HEAP8[$283 + 1 >> 0] = 0; //@line 8969
      HEAP8[$283 + 2 >> 0] = $$sink$i; //@line 8971
      HEAP8[$283 + 3 >> 0] = 0; //@line 8973
      HEAP8[$283 + 4 >> 0] = 1; //@line 8974
      HEAP32[$$byval_copy58 >> 2] = HEAP32[119]; //@line 8975
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[120]; //@line 8975
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[121]; //@line 8975
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[122]; //@line 8975
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[123]; //@line 8975
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 8976
      $AsyncCtx27 = _emscripten_alloc_async_context(80, sp) | 0; //@line 8980
      $290 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $283 + 5 - $23 | 0) | 0; //@line 8981
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 95; //@line 8984
       HEAP32[$AsyncCtx27 + 4 >> 2] = $31; //@line 8986
       HEAP32[$AsyncCtx27 + 8 >> 2] = $1; //@line 8988
       HEAP32[$AsyncCtx27 + 12 >> 2] = $3; //@line 8990
       HEAP32[$AsyncCtx27 + 16 >> 2] = $2; //@line 8992
       HEAP32[$AsyncCtx27 + 20 >> 2] = $5; //@line 8994
       HEAP32[$AsyncCtx27 + 24 >> 2] = $21; //@line 8996
       HEAP32[$AsyncCtx27 + 28 >> 2] = $24; //@line 8998
       HEAP32[$AsyncCtx27 + 32 >> 2] = $25; //@line 9000
       HEAP32[$AsyncCtx27 + 36 >> 2] = $26; //@line 9002
       HEAP32[$AsyncCtx27 + 40 >> 2] = $27; //@line 9004
       HEAP32[$AsyncCtx27 + 44 >> 2] = $28; //@line 9006
       HEAP32[$AsyncCtx27 + 48 >> 2] = $29; //@line 9008
       HEAP32[$AsyncCtx27 + 52 >> 2] = $30; //@line 9010
       HEAP32[$AsyncCtx27 + 56 >> 2] = $5; //@line 9012
       HEAP32[$AsyncCtx27 + 60 >> 2] = $5; //@line 9014
       HEAP32[$AsyncCtx27 + 64 >> 2] = $6; //@line 9016
       HEAP8[$AsyncCtx27 + 68 >> 0] = $$sink$i; //@line 9018
       HEAP32[$AsyncCtx27 + 72 >> 2] = $6; //@line 9020
       HEAP32[$AsyncCtx27 + 76 >> 2] = $23; //@line 9022
       sp = STACKTOP; //@line 9023
       STACKTOP = sp; //@line 9024
       return 0; //@line 9024
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 9026
      do {
       if (($290 | 0) >= 0) {
        $AsyncCtx11 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9030
        $311 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9031
        if (___async) {
         HEAP32[$AsyncCtx11 >> 2] = 96; //@line 9034
         HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 9036
         HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 9038
         HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 9040
         HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 9042
         HEAP32[$AsyncCtx11 + 20 >> 2] = $5; //@line 9044
         HEAP32[$AsyncCtx11 + 24 >> 2] = $21; //@line 9046
         HEAP32[$AsyncCtx11 + 28 >> 2] = $24; //@line 9048
         HEAP32[$AsyncCtx11 + 32 >> 2] = $25; //@line 9050
         HEAP32[$AsyncCtx11 + 36 >> 2] = $26; //@line 9052
         HEAP32[$AsyncCtx11 + 40 >> 2] = $27; //@line 9054
         HEAP32[$AsyncCtx11 + 44 >> 2] = $28; //@line 9056
         HEAP32[$AsyncCtx11 + 48 >> 2] = $29; //@line 9058
         HEAP32[$AsyncCtx11 + 52 >> 2] = $30; //@line 9060
         HEAP32[$AsyncCtx11 + 56 >> 2] = $5; //@line 9062
         HEAP32[$AsyncCtx11 + 60 >> 2] = $5; //@line 9064
         HEAP32[$AsyncCtx11 + 64 >> 2] = $6; //@line 9066
         HEAP8[$AsyncCtx11 + 68 >> 0] = $$sink$i; //@line 9068
         HEAP32[$AsyncCtx11 + 72 >> 2] = $6; //@line 9070
         HEAP32[$AsyncCtx11 + 76 >> 2] = $23; //@line 9072
         sp = STACKTOP; //@line 9073
         STACKTOP = sp; //@line 9074
         return 0; //@line 9074
        } else {
         _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9076
         if (($311 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $311; //@line 9081
          label = 15; //@line 9082
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 9088
      HEAP8[$24 >> 0] = 1; //@line 9089
      HEAP8[$25 >> 0] = 1; //@line 9090
      HEAP8[$26 >> 0] = 0; //@line 9091
      HEAP8[$27 >> 0] = 0; //@line 9092
      HEAP8[$28 >> 0] = 1; //@line 9093
      HEAP8[$29 >> 0] = 0; //@line 9094
      HEAP8[$29 + 1 >> 0] = 0; //@line 9094
      HEAP8[$29 + 2 >> 0] = 0; //@line 9094
      HEAP8[$29 + 3 >> 0] = 0; //@line 9094
      HEAP8[$29 + 4 >> 0] = 0; //@line 9094
      HEAP8[$29 + 5 >> 0] = 0; //@line 9094
      if (!(HEAP8[$1 >> 0] | 0)) {
       $349 = $31; //@line 9098
      } else {
       $$019$i$2 = $1; //@line 9100
       $337 = $31; //@line 9100
       while (1) {
        $334 = _strcspn($$019$i$2, 3745) | 0; //@line 9102
        $336 = $337 + 1 | 0; //@line 9104
        HEAP8[$337 >> 0] = $334; //@line 9105
        $338 = $334 & 255; //@line 9106
        _memcpy($336 | 0, $$019$i$2 | 0, $338 | 0) | 0; //@line 9107
        $339 = $336 + $338 | 0; //@line 9108
        $$019$i$2 = $$019$i$2 + ($334 + ((HEAP8[$$019$i$2 + $334 >> 0] | 0) == 46 & 1)) | 0; //@line 9114
        if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
         $349 = $339; //@line 9118
         break;
        } else {
         $337 = $339; //@line 9121
        }
       }
      }
      HEAP8[$349 >> 0] = 0; //@line 9126
      HEAP8[$349 + 1 >> 0] = 0; //@line 9128
      HEAP8[$349 + 2 >> 0] = $$sink$i; //@line 9130
      HEAP8[$349 + 3 >> 0] = 0; //@line 9132
      HEAP8[$349 + 4 >> 0] = 1; //@line 9133
      HEAP32[$$byval_copy58 >> 2] = HEAP32[124]; //@line 9134
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[125]; //@line 9134
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[126]; //@line 9134
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[127]; //@line 9134
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[128]; //@line 9134
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 9135
      $AsyncCtx24 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9139
      $356 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $349 + 5 - $23 | 0) | 0; //@line 9140
      if (___async) {
       HEAP32[$AsyncCtx24 >> 2] = 97; //@line 9143
       HEAP32[$AsyncCtx24 + 4 >> 2] = $31; //@line 9145
       HEAP32[$AsyncCtx24 + 8 >> 2] = $3; //@line 9147
       HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 9149
       HEAP32[$AsyncCtx24 + 16 >> 2] = $5; //@line 9151
       HEAP32[$AsyncCtx24 + 20 >> 2] = $21; //@line 9153
       HEAP32[$AsyncCtx24 + 24 >> 2] = $24; //@line 9155
       HEAP32[$AsyncCtx24 + 28 >> 2] = $25; //@line 9157
       HEAP32[$AsyncCtx24 + 32 >> 2] = $26; //@line 9159
       HEAP32[$AsyncCtx24 + 36 >> 2] = $27; //@line 9161
       HEAP32[$AsyncCtx24 + 40 >> 2] = $28; //@line 9163
       HEAP32[$AsyncCtx24 + 44 >> 2] = $29; //@line 9165
       HEAP32[$AsyncCtx24 + 48 >> 2] = $30; //@line 9167
       HEAP32[$AsyncCtx24 + 52 >> 2] = $5; //@line 9169
       HEAP32[$AsyncCtx24 + 56 >> 2] = $5; //@line 9171
       HEAP32[$AsyncCtx24 + 60 >> 2] = $1; //@line 9173
       HEAP32[$AsyncCtx24 + 64 >> 2] = $6; //@line 9175
       HEAP8[$AsyncCtx24 + 68 >> 0] = $$sink$i; //@line 9177
       HEAP32[$AsyncCtx24 + 72 >> 2] = $6; //@line 9179
       HEAP32[$AsyncCtx24 + 76 >> 2] = $23; //@line 9181
       sp = STACKTOP; //@line 9182
       STACKTOP = sp; //@line 9183
       return 0; //@line 9183
      }
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9185
      do {
       if (($356 | 0) >= 0) {
        $AsyncCtx7 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9189
        $377 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9190
        if (___async) {
         HEAP32[$AsyncCtx7 >> 2] = 98; //@line 9193
         HEAP32[$AsyncCtx7 + 4 >> 2] = $31; //@line 9195
         HEAP32[$AsyncCtx7 + 8 >> 2] = $3; //@line 9197
         HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 9199
         HEAP32[$AsyncCtx7 + 16 >> 2] = $5; //@line 9201
         HEAP32[$AsyncCtx7 + 20 >> 2] = $21; //@line 9203
         HEAP32[$AsyncCtx7 + 24 >> 2] = $24; //@line 9205
         HEAP32[$AsyncCtx7 + 28 >> 2] = $25; //@line 9207
         HEAP32[$AsyncCtx7 + 32 >> 2] = $26; //@line 9209
         HEAP32[$AsyncCtx7 + 36 >> 2] = $27; //@line 9211
         HEAP32[$AsyncCtx7 + 40 >> 2] = $28; //@line 9213
         HEAP32[$AsyncCtx7 + 44 >> 2] = $29; //@line 9215
         HEAP32[$AsyncCtx7 + 48 >> 2] = $30; //@line 9217
         HEAP32[$AsyncCtx7 + 52 >> 2] = $5; //@line 9219
         HEAP32[$AsyncCtx7 + 56 >> 2] = $5; //@line 9221
         HEAP32[$AsyncCtx7 + 60 >> 2] = $1; //@line 9223
         HEAP32[$AsyncCtx7 + 64 >> 2] = $6; //@line 9225
         HEAP8[$AsyncCtx7 + 68 >> 0] = $$sink$i; //@line 9227
         HEAP32[$AsyncCtx7 + 72 >> 2] = $6; //@line 9229
         HEAP32[$AsyncCtx7 + 76 >> 2] = $23; //@line 9231
         sp = STACKTOP; //@line 9232
         STACKTOP = sp; //@line 9233
         return 0; //@line 9233
        } else {
         _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9235
         if (($377 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $377; //@line 9240
          label = 15; //@line 9241
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 9247
      HEAP8[$24 >> 0] = 1; //@line 9248
      HEAP8[$25 >> 0] = 1; //@line 9249
      HEAP8[$26 >> 0] = 0; //@line 9250
      HEAP8[$27 >> 0] = 0; //@line 9251
      HEAP8[$28 >> 0] = 1; //@line 9252
      HEAP8[$29 >> 0] = 0; //@line 9253
      HEAP8[$29 + 1 >> 0] = 0; //@line 9253
      HEAP8[$29 + 2 >> 0] = 0; //@line 9253
      HEAP8[$29 + 3 >> 0] = 0; //@line 9253
      HEAP8[$29 + 4 >> 0] = 0; //@line 9253
      HEAP8[$29 + 5 >> 0] = 0; //@line 9253
      if (!(HEAP8[$1 >> 0] | 0)) {
       $415 = $31; //@line 9257
      } else {
       $$019$i$3 = $1; //@line 9259
       $403 = $31; //@line 9259
       while (1) {
        $400 = _strcspn($$019$i$3, 3745) | 0; //@line 9261
        $402 = $403 + 1 | 0; //@line 9263
        HEAP8[$403 >> 0] = $400; //@line 9264
        $404 = $400 & 255; //@line 9265
        _memcpy($402 | 0, $$019$i$3 | 0, $404 | 0) | 0; //@line 9266
        $405 = $402 + $404 | 0; //@line 9267
        $$019$i$3 = $$019$i$3 + ($400 + ((HEAP8[$$019$i$3 + $400 >> 0] | 0) == 46 & 1)) | 0; //@line 9273
        if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
         $415 = $405; //@line 9277
         break;
        } else {
         $403 = $405; //@line 9280
        }
       }
      }
      HEAP8[$415 >> 0] = 0; //@line 9285
      HEAP8[$415 + 1 >> 0] = 0; //@line 9287
      HEAP8[$415 + 2 >> 0] = $$sink$i; //@line 9289
      HEAP8[$415 + 3 >> 0] = 0; //@line 9291
      HEAP8[$415 + 4 >> 0] = 1; //@line 9292
      HEAP32[$$byval_copy58 >> 2] = HEAP32[129]; //@line 9293
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[130]; //@line 9293
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[131]; //@line 9293
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[132]; //@line 9293
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[133]; //@line 9293
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 9294
      $AsyncCtx21 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9298
      $422 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $415 + 5 - $23 | 0) | 0; //@line 9299
      if (___async) {
       HEAP32[$AsyncCtx21 >> 2] = 99; //@line 9302
       HEAP32[$AsyncCtx21 + 4 >> 2] = $31; //@line 9304
       HEAP32[$AsyncCtx21 + 8 >> 2] = $3; //@line 9306
       HEAP32[$AsyncCtx21 + 12 >> 2] = $2; //@line 9308
       HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 9310
       HEAP32[$AsyncCtx21 + 20 >> 2] = $21; //@line 9312
       HEAP32[$AsyncCtx21 + 24 >> 2] = $24; //@line 9314
       HEAP32[$AsyncCtx21 + 28 >> 2] = $25; //@line 9316
       HEAP32[$AsyncCtx21 + 32 >> 2] = $26; //@line 9318
       HEAP32[$AsyncCtx21 + 36 >> 2] = $27; //@line 9320
       HEAP32[$AsyncCtx21 + 40 >> 2] = $28; //@line 9322
       HEAP32[$AsyncCtx21 + 44 >> 2] = $29; //@line 9324
       HEAP32[$AsyncCtx21 + 48 >> 2] = $30; //@line 9326
       HEAP32[$AsyncCtx21 + 52 >> 2] = $5; //@line 9328
       HEAP32[$AsyncCtx21 + 56 >> 2] = $5; //@line 9330
       HEAP32[$AsyncCtx21 + 60 >> 2] = $6; //@line 9332
       HEAP8[$AsyncCtx21 + 64 >> 0] = $$sink$i; //@line 9334
       HEAP32[$AsyncCtx21 + 68 >> 2] = $6; //@line 9336
       HEAP32[$AsyncCtx21 + 72 >> 2] = $23; //@line 9338
       HEAP32[$AsyncCtx21 + 76 >> 2] = $1; //@line 9340
       sp = STACKTOP; //@line 9341
       STACKTOP = sp; //@line 9342
       return 0; //@line 9342
      }
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 9344
      do {
       if (($422 | 0) >= 0) {
        $AsyncCtx3 = _emscripten_alloc_async_context(80, sp) | 0; //@line 9348
        $443 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9349
        if (___async) {
         HEAP32[$AsyncCtx3 >> 2] = 100; //@line 9352
         HEAP32[$AsyncCtx3 + 4 >> 2] = $31; //@line 9354
         HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 9356
         HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 9358
         HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 9360
         HEAP32[$AsyncCtx3 + 20 >> 2] = $21; //@line 9362
         HEAP32[$AsyncCtx3 + 24 >> 2] = $24; //@line 9364
         HEAP32[$AsyncCtx3 + 28 >> 2] = $25; //@line 9366
         HEAP32[$AsyncCtx3 + 32 >> 2] = $26; //@line 9368
         HEAP32[$AsyncCtx3 + 36 >> 2] = $27; //@line 9370
         HEAP32[$AsyncCtx3 + 40 >> 2] = $28; //@line 9372
         HEAP32[$AsyncCtx3 + 44 >> 2] = $29; //@line 9374
         HEAP32[$AsyncCtx3 + 48 >> 2] = $30; //@line 9376
         HEAP32[$AsyncCtx3 + 52 >> 2] = $5; //@line 9378
         HEAP32[$AsyncCtx3 + 56 >> 2] = $5; //@line 9380
         HEAP32[$AsyncCtx3 + 60 >> 2] = $6; //@line 9382
         HEAP8[$AsyncCtx3 + 64 >> 0] = $$sink$i; //@line 9384
         HEAP32[$AsyncCtx3 + 68 >> 2] = $6; //@line 9386
         HEAP32[$AsyncCtx3 + 72 >> 2] = $23; //@line 9388
         HEAP32[$AsyncCtx3 + 76 >> 2] = $1; //@line 9390
         sp = STACKTOP; //@line 9391
         STACKTOP = sp; //@line 9392
         return 0; //@line 9392
        } else {
         _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9394
         if (($443 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $443; //@line 9399
          label = 15; //@line 9400
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 9406
      HEAP8[$24 >> 0] = 1; //@line 9407
      HEAP8[$25 >> 0] = 1; //@line 9408
      HEAP8[$26 >> 0] = 0; //@line 9409
      HEAP8[$27 >> 0] = 0; //@line 9410
      HEAP8[$28 >> 0] = 1; //@line 9411
      HEAP8[$29 >> 0] = 0; //@line 9412
      HEAP8[$29 + 1 >> 0] = 0; //@line 9412
      HEAP8[$29 + 2 >> 0] = 0; //@line 9412
      HEAP8[$29 + 3 >> 0] = 0; //@line 9412
      HEAP8[$29 + 4 >> 0] = 0; //@line 9412
      HEAP8[$29 + 5 >> 0] = 0; //@line 9412
      if (!(HEAP8[$1 >> 0] | 0)) {
       $481 = $31; //@line 9416
      } else {
       $$019$i$4 = $1; //@line 9418
       $469 = $31; //@line 9418
       while (1) {
        $466 = _strcspn($$019$i$4, 3745) | 0; //@line 9420
        $468 = $469 + 1 | 0; //@line 9422
        HEAP8[$469 >> 0] = $466; //@line 9423
        $470 = $466 & 255; //@line 9424
        _memcpy($468 | 0, $$019$i$4 | 0, $470 | 0) | 0; //@line 9425
        $471 = $468 + $470 | 0; //@line 9426
        $$019$i$4 = $$019$i$4 + ($466 + ((HEAP8[$$019$i$4 + $466 >> 0] | 0) == 46 & 1)) | 0; //@line 9432
        if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
         $481 = $471; //@line 9436
         break;
        } else {
         $469 = $471; //@line 9439
        }
       }
      }
      HEAP8[$481 >> 0] = 0; //@line 9444
      HEAP8[$481 + 1 >> 0] = 0; //@line 9446
      HEAP8[$481 + 2 >> 0] = $$sink$i; //@line 9448
      HEAP8[$481 + 3 >> 0] = 0; //@line 9450
      HEAP8[$481 + 4 >> 0] = 1; //@line 9451
      HEAP32[$$byval_copy58 >> 2] = HEAP32[134]; //@line 9452
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[135]; //@line 9452
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[136]; //@line 9452
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[137]; //@line 9452
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[138]; //@line 9452
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 9453
      $AsyncCtx18 = _emscripten_alloc_async_context(64, sp) | 0; //@line 9457
      $488 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $481 + 5 - $23 | 0) | 0; //@line 9458
      if (___async) {
       HEAP32[$AsyncCtx18 >> 2] = 101; //@line 9461
       HEAP32[$AsyncCtx18 + 4 >> 2] = $31; //@line 9463
       HEAP32[$AsyncCtx18 + 8 >> 2] = $3; //@line 9465
       HEAP32[$AsyncCtx18 + 12 >> 2] = $2; //@line 9467
       HEAP32[$AsyncCtx18 + 16 >> 2] = $5; //@line 9469
       HEAP32[$AsyncCtx18 + 20 >> 2] = $21; //@line 9471
       HEAP32[$AsyncCtx18 + 24 >> 2] = $24; //@line 9473
       HEAP32[$AsyncCtx18 + 28 >> 2] = $25; //@line 9475
       HEAP32[$AsyncCtx18 + 32 >> 2] = $26; //@line 9477
       HEAP32[$AsyncCtx18 + 36 >> 2] = $27; //@line 9479
       HEAP32[$AsyncCtx18 + 40 >> 2] = $28; //@line 9481
       HEAP32[$AsyncCtx18 + 44 >> 2] = $29; //@line 9483
       HEAP32[$AsyncCtx18 + 48 >> 2] = $30; //@line 9485
       HEAP32[$AsyncCtx18 + 52 >> 2] = $5; //@line 9487
       HEAP32[$AsyncCtx18 + 56 >> 2] = $5; //@line 9489
       HEAP32[$AsyncCtx18 + 60 >> 2] = $6; //@line 9491
       sp = STACKTOP; //@line 9492
       STACKTOP = sp; //@line 9493
       return 0; //@line 9493
      }
      _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9495
      if (($488 | 0) < 0) {
       $$355 = -3009; //@line 9498
       break;
      }
      $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 9501
      $505 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 9502
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 102; //@line 9505
       HEAP32[$AsyncCtx + 4 >> 2] = $31; //@line 9507
       HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9509
       HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 9511
       HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 9513
       HEAP32[$AsyncCtx + 20 >> 2] = $21; //@line 9515
       HEAP32[$AsyncCtx + 24 >> 2] = $24; //@line 9517
       HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 9519
       HEAP32[$AsyncCtx + 32 >> 2] = $26; //@line 9521
       HEAP32[$AsyncCtx + 36 >> 2] = $27; //@line 9523
       HEAP32[$AsyncCtx + 40 >> 2] = $28; //@line 9525
       HEAP32[$AsyncCtx + 44 >> 2] = $29; //@line 9527
       HEAP32[$AsyncCtx + 48 >> 2] = $30; //@line 9529
       HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 9531
       HEAP32[$AsyncCtx + 56 >> 2] = $5; //@line 9533
       sp = STACKTOP; //@line 9534
       STACKTOP = sp; //@line 9535
       return 0; //@line 9535
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 9537
       if (($505 | 0) == -3001) {
        $$355 = -3009; //@line 9540
        break;
       } else {
        $$lcssa127 = $505; //@line 9543
        label = 15; //@line 9544
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 15) {
     if (($$lcssa127 | 0) < 0) {
      $$355 = $$lcssa127; //@line 9553
     } else {
      $114 = HEAPU8[$27 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 9569
      $120 = HEAPU8[$29 >> 0] << 8 | HEAPU8[$30 >> 0]; //@line 9575
      if (((HEAP8[$25 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$21 >> 0] << 8 | HEAPU8[$24 >> 0] | 0) == 1 : 0) & (HEAP8[$26 >> 0] & 15) == 0) {
       if (!$114) {
        $521 = $31; //@line 9585
       } else {
        $$093119$i = 0; //@line 9587
        $128 = $31; //@line 9587
        while (1) {
         $127 = HEAP8[$128 >> 0] | 0; //@line 9589
         if (!($127 << 24 >> 24)) {
          $$lcssa$i = $128; //@line 9592
         } else {
          $133 = $128; //@line 9594
          $135 = $127; //@line 9594
          while (1) {
           $136 = $133 + 1 + ($135 & 255) | 0; //@line 9598
           $135 = HEAP8[$136 >> 0] | 0; //@line 9599
           if (!($135 << 24 >> 24)) {
            $$lcssa$i = $136; //@line 9602
            break;
           } else {
            $133 = $136; //@line 9605
           }
          }
         }
         $139 = $$lcssa$i + 5 | 0; //@line 9609
         $$093119$i = $$093119$i + 1 | 0; //@line 9610
         if (($$093119$i | 0) >= ($114 | 0)) {
          $521 = $139; //@line 9615
          break;
         } else {
          $128 = $139; //@line 9613
         }
        }
       }
       if (($3 | 0) != 0 & ($120 | 0) != 0) {
        $$090117$i = $2; //@line 9624
        $$094116$i = 0; //@line 9624
        $$095115$i = 0; //@line 9624
        $143 = $521; //@line 9624
        while (1) {
         $144 = HEAP8[$143 >> 0] | 0; //@line 9627
         do {
          if (!($144 << 24 >> 24)) {
           $159 = $143 + 1 | 0; //@line 9631
          } else {
           $148 = $144 & 255; //@line 9634
           $151 = $143; //@line 9634
           while (1) {
            if ($148 & 192 | 0) {
             label = 25; //@line 9639
             break;
            }
            $153 = $151 + 1 + $148 | 0; //@line 9643
            $154 = HEAP8[$153 >> 0] | 0; //@line 9644
            if (!($154 << 24 >> 24)) {
             label = 27; //@line 9648
             break;
            } else {
             $148 = $154 & 255; //@line 9651
             $151 = $153; //@line 9651
            }
           }
           if ((label | 0) == 25) {
            label = 0; //@line 9655
            $159 = $151 + 2 | 0; //@line 9657
            break;
           } else if ((label | 0) == 27) {
            label = 0; //@line 9661
            $159 = $153 + 1 | 0; //@line 9663
            break;
           }
          }
         } while (0);
         $167 = (HEAPU8[$159 >> 0] << 8 | HEAPU8[$159 + 1 >> 0]) & 65535; //@line 9676
         $178 = $159 + 10 | 0; //@line 9687
         $183 = HEAPU8[$159 + 8 >> 0] << 8 | HEAPU8[$159 + 9 >> 0]; //@line 9692
         $184 = $183 & 65535; //@line 9693
         $186 = (HEAPU8[$159 + 2 >> 0] << 8 | HEAPU8[$159 + 3 >> 0] | 0) == 1; //@line 9695
         do {
          if ($167 << 16 >> 16 == 1 & $186 & $184 << 16 >> 16 == 4) {
           HEAP32[$$090117$i >> 2] = 1; //@line 9701
           HEAP8[$$090117$i + 4 >> 0] = HEAP8[$178 >> 0] | 0; //@line 9705
           HEAP8[$$090117$i + 5 >> 0] = HEAP8[$159 + 11 >> 0] | 0; //@line 9709
           HEAP8[$$090117$i + 6 >> 0] = HEAP8[$159 + 12 >> 0] | 0; //@line 9713
           HEAP8[$$090117$i + 7 >> 0] = HEAP8[$159 + 13 >> 0] | 0; //@line 9717
           $$0 = $159 + 14 | 0; //@line 9720
           $$1$i = $$090117$i + 20 | 0; //@line 9720
           $$196$i = $$095115$i + 1 | 0; //@line 9720
          } else {
           if ($167 << 16 >> 16 == 28 & $186 & $184 << 16 >> 16 == 16) {
            HEAP32[$$090117$i >> 2] = 2; //@line 9727
            HEAP8[$$090117$i + 4 >> 0] = HEAP8[$178 >> 0] | 0; //@line 9731
            HEAP8[$$090117$i + 5 >> 0] = HEAP8[$159 + 11 >> 0] | 0; //@line 9735
            HEAP8[$$090117$i + 6 >> 0] = HEAP8[$159 + 12 >> 0] | 0; //@line 9739
            HEAP8[$$090117$i + 7 >> 0] = HEAP8[$159 + 13 >> 0] | 0; //@line 9743
            HEAP8[$$090117$i + 8 >> 0] = HEAP8[$159 + 14 >> 0] | 0; //@line 9747
            HEAP8[$$090117$i + 9 >> 0] = HEAP8[$159 + 15 >> 0] | 0; //@line 9751
            HEAP8[$$090117$i + 10 >> 0] = HEAP8[$159 + 16 >> 0] | 0; //@line 9755
            HEAP8[$$090117$i + 11 >> 0] = HEAP8[$159 + 17 >> 0] | 0; //@line 9759
            HEAP8[$$090117$i + 12 >> 0] = HEAP8[$159 + 18 >> 0] | 0; //@line 9763
            HEAP8[$$090117$i + 13 >> 0] = HEAP8[$159 + 19 >> 0] | 0; //@line 9767
            HEAP8[$$090117$i + 14 >> 0] = HEAP8[$159 + 20 >> 0] | 0; //@line 9771
            HEAP8[$$090117$i + 15 >> 0] = HEAP8[$159 + 21 >> 0] | 0; //@line 9775
            HEAP8[$$090117$i + 16 >> 0] = HEAP8[$159 + 22 >> 0] | 0; //@line 9779
            HEAP8[$$090117$i + 17 >> 0] = HEAP8[$159 + 23 >> 0] | 0; //@line 9783
            HEAP8[$$090117$i + 18 >> 0] = HEAP8[$159 + 24 >> 0] | 0; //@line 9787
            HEAP8[$$090117$i + 19 >> 0] = HEAP8[$159 + 25 >> 0] | 0; //@line 9791
            $$0 = $159 + 26 | 0; //@line 9794
            $$1$i = $$090117$i + 20 | 0; //@line 9794
            $$196$i = $$095115$i + 1 | 0; //@line 9794
            break;
           } else {
            $$0 = $178 + $183 | 0; //@line 9798
            $$1$i = $$090117$i; //@line 9798
            $$196$i = $$095115$i; //@line 9798
            break;
           }
          }
         } while (0);
         $$094116$i = $$094116$i + 1 | 0; //@line 9803
         if (!(($$094116$i | 0) < ($120 | 0) & $$196$i >>> 0 < $3 >>> 0)) {
          $$089$i = $$196$i; //@line 9810
          break;
         } else {
          $$090117$i = $$1$i; //@line 9808
          $$095115$i = $$196$i; //@line 9808
          $143 = $$0; //@line 9808
         }
        }
       } else {
        $$089$i = 0; //@line 9815
       }
      } else {
       $$089$i = 0; //@line 9818
      }
      $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 9822
     }
    }
    _free($21); //@line 9825
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9826
    $261 = __ZN6Socket5closeEv($5) | 0; //@line 9827
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 93; //@line 9830
     HEAP32[$AsyncCtx37 + 4 >> 2] = $$355; //@line 9832
     HEAP32[$AsyncCtx37 + 8 >> 2] = $5; //@line 9834
     HEAP32[$AsyncCtx37 + 12 >> 2] = $5; //@line 9836
     sp = STACKTOP; //@line 9837
     STACKTOP = sp; //@line 9838
     return 0; //@line 9838
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 9840
     $$2 = ($261 | 0) == 0 ? $$355 : $261; //@line 9843
     break;
    }
   }
  } else {
   $$2 = $11; //@line 9848
  }
 } while (0);
 $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9851
 __ZN9UDPSocketD2Ev($5); //@line 9852
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 94; //@line 9855
  HEAP32[$AsyncCtx34 + 4 >> 2] = $5; //@line 9857
  HEAP32[$AsyncCtx34 + 8 >> 2] = $$2; //@line 9859
  sp = STACKTOP; //@line 9860
  STACKTOP = sp; //@line 9861
  return 0; //@line 9861
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 9863
 $$3 = $$2; //@line 9864
 STACKTOP = sp; //@line 9865
 return $$3 | 0; //@line 9865
}
function _sn_coap_builder_calc_needed_packet_data_size_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$$65$i = 0, $$0104 = 0, $$012$lcssa$i54$i = 0, $$012$lcssa$i54$i146 = 0, $$012$lcssa$i54$i181 = 0, $$012$lcssa$i54$i216 = 0, $$012$lcssa$i54$i238 = 0, $$01213$i$i = 0, $$01213$i$i142 = 0, $$01213$i$i177 = 0, $$01213$i$i212 = 0, $$01213$i$i234 = 0, $$014$i$i = 0, $$014$i$i141 = 0, $$014$i$i176 = 0, $$014$i$i211 = 0, $$014$i$i233 = 0, $$02441$i = 0, $$02441$i157 = 0, $$02441$i192 = 0, $$02441$i222 = 0, $$02441$i244 = 0, $$02540$i = 0, $$02540$i158 = 0, $$02540$i193 = 0, $$02540$i223 = 0, $$02540$i245 = 0, $$028$lcssa$i = 0, $$028$lcssa$i165 = 0, $$028$lcssa$i200 = 0, $$028$lcssa$i230 = 0, $$028$lcssa$i252 = 0, $$02839$i = 0, $$02839$i159 = 0, $$02839$i194 = 0, $$02839$i224 = 0, $$02839$i246 = 0, $$03138$i = 0, $$03138$i160 = 0, $$03138$i195 = 0, $$03138$i225 = 0, $$03138$i247 = 0, $$03239$i = 0, $$03239$i$us = 0, $$03239$i148 = 0, $$03239$i183 = 0, $$03239$i183$us = 0, $$03239$us$i = 0, $$03239$us46$i = 0, $$03239$us46$i$us = 0, $$03538$i = 0, $$03538$i$us = 0, $$03538$i149 = 0, $$03538$i184 = 0, $$03538$i184$us = 0, $$03538$us$i = 0, $$03538$us47$i = 0, $$03538$us47$i$us = 0, $$10 = 0, $$1058$i = 0, $$11 = 0, $$11$i = 0, $$1105 = 0, $$1159$i = 0, $$12 = 0, $$120$232$i = 0, $$120$232$i121 = 0, $$120$232$i129 = 0, $$120$232$i137 = 0, $$120$232$i172 = 0, $$120$232$i207 = 0, $$120$232$i259 = 0, $$120$232$i267 = 0, $$120$232$i275 = 0, $$120$3$i = 0, $$120$3$i122 = 0, $$120$3$i130 = 0, $$120$3$i138 = 0, $$120$3$i173 = 0, $$120$3$i208 = 0, $$120$3$i260 = 0, $$120$3$i268 = 0, $$120$3$i276 = 0, $$126$i = 0, $$126$i164 = 0, $$126$i199 = 0, $$126$i229 = 0, $$126$i251 = 0, $$1260$i = 0, $$129$i = 0, $$129$i163 = 0, $$129$i198 = 0, $$129$i228 = 0, $$129$i250 = 0, $$13 = 0, $$13$i = 0, $$133$i = 0, $$133$i152 = 0, $$133$i187 = 0, $$133$us49$i = 0, $$1361$i = 0, $$14 = 0, $$1462$i = 0, $$15 = 0, $$16 = 0, $$16$i = 0, $$17 = 0, $$18 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$i = 0, $$553$$$i = 0, $$553$$$i$ = 0, $$553$$i = 0, $$6 = 0, $$7 = 0, $$7$i = 0, $$8 = 0, $$9 = 0, $$9$i = 0, $$957$i = 0, $$lcssa296 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $115 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $139 = 0, $149 = 0, $16 = 0, $17 = 0, $174 = 0, $186 = 0, $189 = 0, $19 = 0, $191 = 0, $194 = 0, $203 = 0, $208 = 0, $21 = 0, $224 = 0, $225 = 0, $234 = 0, $24 = 0, $249 = 0, $252 = 0, $254 = 0, $257 = 0, $266 = 0, $271 = 0, $287 = 0, $288 = 0, $297 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $33 = 0, $330 = 0, $347 = 0, $356 = 0, $371 = 0, $375 = 0, $38 = 0, $389 = 0, $406 = 0, $418 = 0, $426 = 0, $428 = 0, $466 = 0, $474 = 0, $475 = 0, $504 = 0, $517 = 0, $54 = 0, $55 = 0, $64 = 0, $65 = 0, $79 = 0, $80 = 0, $82 = 0, $9 = 0, $97 = 0, $merge$i = 0, $narrow$i = 0, $phitmp$i$i = 0, $phitmp$i$i144 = 0, $phitmp$i$i179 = 0, $phitmp$i$i214 = 0, $phitmp$i$i236 = 0, label = 0;
 if (!$0) {
  $$2108 = 0; //@line 2904
  return $$2108 | 0; //@line 2905
 }
 if ((HEAP32[$0 + 12 >> 2] | 0) == 48) {
  $$2108 = 4; //@line 2911
  return $$2108 | 0; //@line 2912
 }
 do {
  if (!(HEAP32[$0 + 28 >> 2] | 0)) {
   $$0104 = 4; //@line 2919
  } else {
   $9 = HEAP8[$0 >> 0] | 0; //@line 2921
   if (($9 + -1 & 255) > 7) {
    $$2108 = 0; //@line 2925
    return $$2108 | 0; //@line 2926
   } else {
    $$0104 = ($9 & 255) + 4 & 65535; //@line 2931
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2937
 $17 = ($16 | 0) == 0; //@line 2938
 do {
  if ($17) {
   $$1105 = $$0104; //@line 2941
  } else {
   $19 = HEAP16[$0 + 22 >> 1] | 0; //@line 2944
   $21 = ($19 & 65535) + -1 | 0; //@line 2946
   if (($19 & 65535) > 2) {
    $$01213$i$i = 0; //@line 2949
    $$014$i$i = 1; //@line 2949
    $24 = 1; //@line 2949
    do {
     $$01213$i$i = $$01213$i$i + ((HEAP8[$16 + $24 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 2955
     $$014$i$i = $$014$i$i + 1 << 16 >> 16; //@line 2956
     $24 = $$014$i$i & 65535; //@line 2957
    } while (($21 | 0) > ($24 | 0));
    $phitmp$i$i = $$01213$i$i + 1 << 24 >> 24; //@line 2965
    if (!($phitmp$i$i << 24 >> 24)) {
     $$2108 = 0; //@line 2968
     return $$2108 | 0; //@line 2969
    } else {
     $$012$lcssa$i54$i = $phitmp$i$i; //@line 2971
    }
   } else {
    $$012$lcssa$i54$i = 1; //@line 2974
   }
   L21 : do {
    if (!($19 << 16 >> 16)) {
     $$03239$i$us = 0; //@line 2979
     $$03538$i$us = 0; //@line 2979
     do {
      $33 = $$03239$i$us + 1 | 0; //@line 2981
      $$03239$i$us = $33 & 65535; //@line 2982
      $$03538$i$us = $$03538$i$us + 1 << 24 >> 24; //@line 2983
     } while (($$03538$i$us & 255) < ($$012$lcssa$i54$i & 255));
     $$lcssa301 = $33 & 65535; //@line 2992
     $$lcssa302 = $$03239$i$us; //@line 2992
    } else {
     $$03239$i = 0; //@line 2994
     $$03538$i = 0; //@line 2994
     while (1) {
      $$02441$i = 0; //@line 2996
      $$02540$i = 0; //@line 2996
      $$02839$i = 0; //@line 2996
      $$03138$i = $16; //@line 2996
      while (1) {
       $38 = (HEAP8[$$03138$i >> 0] | 0) != 47; //@line 2999
       if ($$02839$i << 16 >> 16 == 0 | $38) {
        $$126$i = $$02540$i; //@line 3005
        $$129$i = $$02839$i + ($38 & 1) << 16 >> 16; //@line 3005
       } else {
        if ($$02540$i << 24 >> 24 == $$03538$i << 24 >> 24) {
         $$028$lcssa$i = $$02839$i; //@line 3009
         break;
        }
        $$126$i = $$02540$i + 1 << 24 >> 24; //@line 3013
        $$129$i = 0; //@line 3013
       }
       $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 3016
       if (($$02441$i & 65535) >= ($19 & 65535)) {
        $$028$lcssa$i = $$129$i; //@line 3021
        break;
       } else {
        $$02540$i = $$126$i; //@line 3019
        $$02839$i = $$129$i; //@line 3019
        $$03138$i = $$03138$i + 1 | 0; //@line 3019
       }
      }
      if (($$028$lcssa$i & 65535) > 255) {
       $$2108 = 0; //@line 3027
       break;
      }
      if (($$028$lcssa$i & 65535) < 13) {
       $$133$i = $$03239$i + 1 << 16 >> 16; //@line 3034
      } else {
       $$133$i = ($$03239$i & 65535) + 2 & 65535; //@line 3039
      }
      $54 = ($$133$i & 65535) + ($$028$lcssa$i & 65535) | 0; //@line 3042
      $55 = $54 & 65535; //@line 3043
      $$03538$i = $$03538$i + 1 << 24 >> 24; //@line 3044
      if (($$03538$i & 255) >= ($$012$lcssa$i54$i & 255)) {
       $$lcssa301 = $55; //@line 3049
       $$lcssa302 = $54; //@line 3049
       break L21;
      } else {
       $$03239$i = $55; //@line 3047
      }
     }
     return $$2108 | 0; //@line 3053
    }
   } while (0);
   if (!($$lcssa301 << 16 >> 16)) {
    $$2108 = 0; //@line 3058
    return $$2108 | 0; //@line 3059
   } else {
    $$1105 = $$lcssa302 + ($$0104 & 65535) & 65535; //@line 3064
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$0 + 16 >> 2] | 0; //@line 3070
 $65 = ($64 | 0) == -1; //@line 3071
 if ($65) {
  $$2 = $$1105; //@line 3073
 } else {
  if ($64 >>> 0 > 65535) {
   $$2108 = 0; //@line 3077
   return $$2108 | 0; //@line 3078
  }
  if ($64 << 8 >>> 0 > 16777215) {
   $$120$232$i275 = 3; //@line 3083
   label = 31; //@line 3084
  } else {
   if ($64 << 16 >>> 0 > 16777215) {
    $$120$232$i275 = 2; //@line 3089
    label = 31; //@line 3090
   } else {
    if ($64 << 24 >>> 0 > 16777215) {
     $$120$232$i275 = 1; //@line 3095
     label = 31; //@line 3096
    } else {
     $$120$3$i276 = 0; //@line 3098
    }
   }
  }
  if ((label | 0) == 31) {
   $$120$3$i276 = $$120$232$i275; //@line 3103
  }
  $$2 = ($$120$3$i276 + 1 & 255) + ($$1105 & 65535) & 65535; //@line 3110
 }
 $79 = HEAP32[$0 + 40 >> 2] | 0; //@line 3113
 $80 = ($79 | 0) == 0; //@line 3114
 do {
  if ($80) {
   $$18 = $$2; //@line 3117
  } else {
   $82 = HEAP32[$79 + 12 >> 2] | 0; //@line 3120
   if (($82 | 0) == -1) {
    $$3 = $$2; //@line 3123
   } else {
    if ($82 >>> 0 > 65535) {
     $$2108 = 0; //@line 3127
     return $$2108 | 0; //@line 3128
    }
    if ($82 << 8 >>> 0 > 16777215) {
     $$120$232$i267 = 3; //@line 3133
     label = 39; //@line 3134
    } else {
     if ($82 << 16 >>> 0 > 16777215) {
      $$120$232$i267 = 2; //@line 3139
      label = 39; //@line 3140
     } else {
      if ($82 << 24 >>> 0 > 16777215) {
       $$120$232$i267 = 1; //@line 3145
       label = 39; //@line 3146
      } else {
       $$120$3$i268 = 0; //@line 3148
      }
     }
    }
    if ((label | 0) == 39) {
     $$120$3$i268 = $$120$232$i267; //@line 3153
    }
    $$3 = ($$120$3$i268 + 1 & 255) + ($$2 & 65535) & 65535; //@line 3160
   }
   $97 = HEAP32[$79 + 16 >> 2] | 0; //@line 3163
   if (($97 | 0) == 60) {
    $$4 = $$3; //@line 3166
   } else {
    if ($97 >>> 0 > 16777215) {
     $$120$232$i259 = 4; //@line 3170
     label = 46; //@line 3171
    } else {
     if ($97 << 8 >>> 0 > 16777215) {
      $$120$232$i259 = 3; //@line 3176
      label = 46; //@line 3177
     } else {
      if ($97 << 16 >>> 0 > 16777215) {
       $$120$232$i259 = 2; //@line 3182
       label = 46; //@line 3183
      } else {
       if ($97 << 24 >>> 0 > 16777215) {
        $$120$232$i259 = 1; //@line 3188
        label = 46; //@line 3189
       } else {
        $$120$3$i260 = 0; //@line 3191
       }
      }
     }
    }
    if ((label | 0) == 46) {
     $$120$3$i260 = $$120$232$i259; //@line 3197
    }
    $$4 = ($$120$3$i260 + 1 & 255) + ($$3 & 65535) & 65535; //@line 3204
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$6 = $$4; //@line 3210
   } else {
    $115 = HEAP16[$79 + 2 >> 1] | 0; //@line 3213
    do {
     if (($115 + -1 & 65535) < 12) {
      $$5 = $$4 + 1 << 16 >> 16; //@line 3219
     } else {
      if (($115 + -13 & 65535) < 257) {
       $$5 = ($$4 & 65535) + 2 & 65535; //@line 3227
       break;
      }
      if (($115 + -270 & 65535) < 765) {
       $$5 = ($$4 & 65535) + 3 & 65535; //@line 3236
       break;
      } else {
       $$2108 = 0; //@line 3239
       return $$2108 | 0; //@line 3240
      }
     }
    } while (0);
    $$6 = ($115 & 65535) + ($$5 & 65535) & 65535; //@line 3248
   }
   $131 = HEAP32[$79 + 48 >> 2] | 0; //@line 3251
   do {
    if (!$131) {
     $$7 = $$6; //@line 3255
    } else {
     $133 = HEAP8[$79 >> 0] | 0; //@line 3257
     $134 = $133 & 255; //@line 3258
     $136 = ($133 & 255) + -1 | 0; //@line 3260
     if (($133 & 255) > 2) {
      $$01213$i$i234 = 0; //@line 3263
      $$014$i$i233 = 1; //@line 3263
      $139 = 1; //@line 3263
      do {
       $$01213$i$i234 = $$01213$i$i234 + ((HEAP8[$131 + $139 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3269
       $$014$i$i233 = $$014$i$i233 + 1 << 16 >> 16; //@line 3270
       $139 = $$014$i$i233 & 65535; //@line 3271
      } while (($136 | 0) > ($139 | 0));
      $phitmp$i$i236 = $$01213$i$i234 + 1 << 24 >> 24; //@line 3279
      if (!($phitmp$i$i236 << 24 >> 24)) {
       $$2108 = 0; //@line 3282
       return $$2108 | 0; //@line 3283
      } else {
       $$012$lcssa$i54$i238 = $phitmp$i$i236; //@line 3285
      }
     } else {
      $$012$lcssa$i54$i238 = 1; //@line 3288
     }
     if (!($133 << 24 >> 24)) {
      $$2108 = 0; //@line 3292
      return $$2108 | 0; //@line 3293
     } else {
      $$03239$us$i = 0; //@line 3295
      $$03538$us$i = 0; //@line 3295
     }
     do {
      $$02441$i244 = 0; //@line 3298
      $$02540$i245 = 0; //@line 3298
      $$02839$i246 = 0; //@line 3298
      $$03138$i247 = $131; //@line 3298
      while (1) {
       $149 = (HEAP8[$$03138$i247 >> 0] | 0) != 38; //@line 3301
       if ($$02839$i246 << 16 >> 16 == 0 | $149) {
        $$126$i251 = $$02540$i245; //@line 3307
        $$129$i250 = $$02839$i246 + ($149 & 1) << 16 >> 16; //@line 3307
       } else {
        if ($$02540$i245 << 24 >> 24 == $$03538$us$i << 24 >> 24) {
         $$028$lcssa$i252 = $$02839$i246; //@line 3311
         break;
        }
        $$126$i251 = $$02540$i245 + 1 << 24 >> 24; //@line 3315
        $$129$i250 = 0; //@line 3315
       }
       $$02441$i244 = $$02441$i244 + 1 << 16 >> 16; //@line 3318
       if (($$02441$i244 & 65535) >= ($134 & 65535)) {
        $$028$lcssa$i252 = $$129$i250; //@line 3323
        break;
       } else {
        $$02540$i245 = $$126$i251; //@line 3321
        $$02839$i246 = $$129$i250; //@line 3321
        $$03138$i247 = $$03138$i247 + 1 | 0; //@line 3321
       }
      }
      if (($$028$lcssa$i252 + -1 & 65535) > 7) {
       $$2108 = 0; //@line 3330
       label = 204; //@line 3331
       break;
      }
      $$03239$us$i = ($$03239$us$i + 1 & 65535) + ($$028$lcssa$i252 & 65535) | 0; //@line 3337
      $$03538$us$i = $$03538$us$i + 1 << 24 >> 24; //@line 3338
     } while (($$03538$us$i & 255) < ($$012$lcssa$i54$i238 & 255));
     if ((label | 0) == 204) {
      return $$2108 | 0; //@line 3347
     }
     if (!(($$03239$us$i & 65535) << 16 >> 16)) {
      $$2108 = 0; //@line 3352
      return $$2108 | 0; //@line 3353
     } else {
      $$7 = $$03239$us$i + ($$6 & 65535) & 65535; //@line 3358
      break;
     }
    }
   } while (0);
   if (!(HEAP32[$79 + 52 >> 2] | 0)) {
    $$9 = $$7; //@line 3367
   } else {
    $174 = HEAP16[$79 + 4 >> 1] | 0; //@line 3370
    do {
     if (($174 + -1 & 65535) < 12) {
      $$8 = $$7 + 1 << 16 >> 16; //@line 3376
     } else {
      if (($174 + -13 & 65535) < 243) {
       $$8 = ($$7 & 65535) + 2 & 65535; //@line 3384
       break;
      } else {
       $$2108 = 0; //@line 3387
       return $$2108 | 0; //@line 3388
      }
     }
    } while (0);
    $$9 = ($174 & 65535) + ($$8 & 65535) & 65535; //@line 3396
   }
   $186 = HEAP32[$79 + 56 >> 2] | 0; //@line 3399
   do {
    if (!$186) {
     $$10 = $$9; //@line 3403
    } else {
     $189 = HEAP16[$79 + 6 >> 1] | 0; //@line 3406
     $191 = ($189 & 65535) + -1 | 0; //@line 3408
     if (($189 & 65535) > 2) {
      $$01213$i$i212 = 0; //@line 3411
      $$014$i$i211 = 1; //@line 3411
      $194 = 1; //@line 3411
      do {
       $$01213$i$i212 = $$01213$i$i212 + ((HEAP8[$186 + $194 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 3417
       $$014$i$i211 = $$014$i$i211 + 1 << 16 >> 16; //@line 3418
       $194 = $$014$i$i211 & 65535; //@line 3419
      } while (($191 | 0) > ($194 | 0));
      $phitmp$i$i214 = $$01213$i$i212 + 1 << 24 >> 24; //@line 3427
      if (!($phitmp$i$i214 << 24 >> 24)) {
       $$2108 = 0; //@line 3430
       return $$2108 | 0; //@line 3431
      } else {
       $$012$lcssa$i54$i216 = $phitmp$i$i214; //@line 3433
      }
     } else {
      $$012$lcssa$i54$i216 = 1; //@line 3436
     }
     L141 : do {
      if (!($189 << 16 >> 16)) {
       $$03239$us46$i$us = 0; //@line 3441
       $$03538$us47$i$us = 0; //@line 3441
       do {
        $203 = $$03239$us46$i$us + 1 | 0; //@line 3443
        $$03239$us46$i$us = $203 & 65535; //@line 3444
        $$03538$us47$i$us = $$03538$us47$i$us + 1 << 24 >> 24; //@line 3445
       } while (($$03538$us47$i$us & 255) < ($$012$lcssa$i54$i216 & 255));
       $$lcssa298 = $203 & 65535; //@line 3454
       $$lcssa299 = $$03239$us46$i$us; //@line 3454
      } else {
       $$03239$us46$i = 0; //@line 3456
       $$03538$us47$i = 0; //@line 3456
       while (1) {
        $$02441$i222 = 0; //@line 3458
        $$02540$i223 = 0; //@line 3458
        $$02839$i224 = 0; //@line 3458
        $$03138$i225 = $186; //@line 3458
        while (1) {
         $208 = (HEAP8[$$03138$i225 >> 0] | 0) != 47; //@line 3461
         if ($$02839$i224 << 16 >> 16 == 0 | $208) {
          $$126$i229 = $$02540$i223; //@line 3467
          $$129$i228 = $$02839$i224 + ($208 & 1) << 16 >> 16; //@line 3467
         } else {
          if ($$02540$i223 << 24 >> 24 == $$03538$us47$i << 24 >> 24) {
           $$028$lcssa$i230 = $$02839$i224; //@line 3471
           break;
          }
          $$126$i229 = $$02540$i223 + 1 << 24 >> 24; //@line 3475
          $$129$i228 = 0; //@line 3475
         }
         $$02441$i222 = $$02441$i222 + 1 << 16 >> 16; //@line 3478
         if (($$02441$i222 & 65535) >= ($189 & 65535)) {
          $$028$lcssa$i230 = $$129$i228; //@line 3483
          break;
         } else {
          $$02540$i223 = $$126$i229; //@line 3481
          $$02839$i224 = $$129$i228; //@line 3481
          $$03138$i225 = $$03138$i225 + 1 | 0; //@line 3481
         }
        }
        if (($$028$lcssa$i230 & 65535) > 255) {
         $$2108 = 0; //@line 3489
         break;
        }
        if (($$028$lcssa$i230 & 65535) < 13) {
         $$133$us49$i = $$03239$us46$i + 1 << 16 >> 16; //@line 3496
        } else {
         $$133$us49$i = ($$03239$us46$i & 65535) + 2 & 65535; //@line 3501
        }
        $224 = ($$133$us49$i & 65535) + ($$028$lcssa$i230 & 65535) | 0; //@line 3504
        $225 = $224 & 65535; //@line 3505
        $$03538$us47$i = $$03538$us47$i + 1 << 24 >> 24; //@line 3506
        if (($$03538$us47$i & 255) >= ($$012$lcssa$i54$i216 & 255)) {
         $$lcssa298 = $225; //@line 3511
         $$lcssa299 = $224; //@line 3511
         break L141;
        } else {
         $$03239$us46$i = $225; //@line 3509
        }
       }
       return $$2108 | 0; //@line 3515
      }
     } while (0);
     if (!($$lcssa298 << 16 >> 16)) {
      $$2108 = 0; //@line 3520
      return $$2108 | 0; //@line 3521
     } else {
      $$10 = $$lcssa299 + ($$9 & 65535) & 65535; //@line 3526
      break;
     }
    }
   } while (0);
   $234 = HEAP32[$79 + 28 >> 2] | 0; //@line 3532
   if (($234 | 0) == -1) {
    $$11 = $$10; //@line 3535
   } else {
    if ($234 >>> 0 > 65535) {
     $$2108 = 0; //@line 3539
     return $$2108 | 0; //@line 3540
    }
    if ($234 << 8 >>> 0 > 16777215) {
     $$120$232$i207 = 3; //@line 3545
     label = 102; //@line 3546
    } else {
     if ($234 << 16 >>> 0 > 16777215) {
      $$120$232$i207 = 2; //@line 3551
      label = 102; //@line 3552
     } else {
      if ($234 << 24 >>> 0 > 16777215) {
       $$120$232$i207 = 1; //@line 3557
       label = 102; //@line 3558
      } else {
       $$120$3$i208 = 0; //@line 3560
      }
     }
    }
    if ((label | 0) == 102) {
     $$120$3$i208 = $$120$232$i207; //@line 3565
    }
    $$11 = ($$120$3$i208 + 1 & 255) + ($$10 & 65535) & 65535; //@line 3572
   }
   $249 = HEAP32[$79 + 60 >> 2] | 0; //@line 3575
   do {
    if (!$249) {
     $$12 = $$11; //@line 3579
    } else {
     $252 = HEAP16[$79 + 8 >> 1] | 0; //@line 3582
     $254 = ($252 & 65535) + -1 | 0; //@line 3584
     if (($252 & 65535) > 2) {
      $$01213$i$i177 = 0; //@line 3587
      $$014$i$i176 = 1; //@line 3587
      $257 = 1; //@line 3587
      do {
       $$01213$i$i177 = $$01213$i$i177 + ((HEAP8[$249 + $257 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3593
       $$014$i$i176 = $$014$i$i176 + 1 << 16 >> 16; //@line 3594
       $257 = $$014$i$i176 & 65535; //@line 3595
      } while (($254 | 0) > ($257 | 0));
      $phitmp$i$i179 = $$01213$i$i177 + 1 << 24 >> 24; //@line 3603
      if (!($phitmp$i$i179 << 24 >> 24)) {
       $$2108 = 0; //@line 3606
       return $$2108 | 0; //@line 3607
      } else {
       $$012$lcssa$i54$i181 = $phitmp$i$i179; //@line 3609
      }
     } else {
      $$012$lcssa$i54$i181 = 1; //@line 3612
     }
     L186 : do {
      if (!($252 << 16 >> 16)) {
       $$03239$i183$us = 0; //@line 3617
       $$03538$i184$us = 0; //@line 3617
       do {
        $266 = $$03239$i183$us + 1 | 0; //@line 3619
        $$03239$i183$us = $266 & 65535; //@line 3620
        $$03538$i184$us = $$03538$i184$us + 1 << 24 >> 24; //@line 3621
       } while (($$03538$i184$us & 255) < ($$012$lcssa$i54$i181 & 255));
       $$lcssa296 = $266 & 65535; //@line 3630
       $$lcssa297 = $$03239$i183$us; //@line 3630
      } else {
       $$03239$i183 = 0; //@line 3632
       $$03538$i184 = 0; //@line 3632
       while (1) {
        $$02441$i192 = 0; //@line 3634
        $$02540$i193 = 0; //@line 3634
        $$02839$i194 = 0; //@line 3634
        $$03138$i195 = $249; //@line 3634
        while (1) {
         $271 = (HEAP8[$$03138$i195 >> 0] | 0) != 38; //@line 3637
         if ($$02839$i194 << 16 >> 16 == 0 | $271) {
          $$126$i199 = $$02540$i193; //@line 3643
          $$129$i198 = $$02839$i194 + ($271 & 1) << 16 >> 16; //@line 3643
         } else {
          if ($$02540$i193 << 24 >> 24 == $$03538$i184 << 24 >> 24) {
           $$028$lcssa$i200 = $$02839$i194; //@line 3647
           break;
          }
          $$126$i199 = $$02540$i193 + 1 << 24 >> 24; //@line 3651
          $$129$i198 = 0; //@line 3651
         }
         $$02441$i192 = $$02441$i192 + 1 << 16 >> 16; //@line 3654
         if (($$02441$i192 & 65535) >= ($252 & 65535)) {
          $$028$lcssa$i200 = $$129$i198; //@line 3659
          break;
         } else {
          $$02540$i193 = $$126$i199; //@line 3657
          $$02839$i194 = $$129$i198; //@line 3657
          $$03138$i195 = $$03138$i195 + 1 | 0; //@line 3657
         }
        }
        if (($$028$lcssa$i200 & 65535) > 255) {
         $$2108 = 0; //@line 3665
         break;
        }
        if (($$028$lcssa$i200 & 65535) < 13) {
         $$133$i187 = $$03239$i183 + 1 << 16 >> 16; //@line 3672
        } else {
         $$133$i187 = ($$03239$i183 & 65535) + 2 & 65535; //@line 3677
        }
        $287 = ($$133$i187 & 65535) + ($$028$lcssa$i200 & 65535) | 0; //@line 3680
        $288 = $287 & 65535; //@line 3681
        $$03538$i184 = $$03538$i184 + 1 << 24 >> 24; //@line 3682
        if (($$03538$i184 & 255) >= ($$012$lcssa$i54$i181 & 255)) {
         $$lcssa296 = $288; //@line 3687
         $$lcssa297 = $287; //@line 3687
         break L186;
        } else {
         $$03239$i183 = $288; //@line 3685
        }
       }
       return $$2108 | 0; //@line 3691
      }
     } while (0);
     if (!($$lcssa296 << 16 >> 16)) {
      $$2108 = 0; //@line 3696
      return $$2108 | 0; //@line 3697
     } else {
      $$12 = $$lcssa297 + ($$11 & 65535) & 65535; //@line 3702
      break;
     }
    }
   } while (0);
   $297 = HEAP32[$79 + 32 >> 2] | 0; //@line 3708
   if (($297 | 0) == -1) {
    $$13 = $$12; //@line 3711
   } else {
    if ($297 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3715
     return $$2108 | 0; //@line 3716
    }
    do {
     if ($297 << 8 >>> 0 > 16777215) {
      $$120$232$i172 = 3; //@line 3722
      label = 129; //@line 3723
     } else {
      if ($297 << 16 >>> 0 > 16777215) {
       $$120$232$i172 = 2; //@line 3728
       label = 129; //@line 3729
       break;
      }
      if ($297 << 24 >>> 0 > 16777215) {
       $$120$232$i172 = 1; //@line 3735
       label = 129; //@line 3736
      } else {
       $$120$3$i173 = 0; //@line 3738
      }
     }
    } while (0);
    if ((label | 0) == 129) {
     $$120$3$i173 = $$120$232$i172; //@line 3743
    }
    $$13 = ($$120$3$i173 + 1 & 255) + ($$12 & 65535) & 65535; //@line 3750
   }
   $312 = HEAP32[$79 + 64 >> 2] | 0; //@line 3753
   do {
    if (!$312) {
     $$14 = $$13; //@line 3757
    } else {
     $315 = HEAP16[$79 + 10 >> 1] | 0; //@line 3760
     $317 = ($315 & 65535) + -1 | 0; //@line 3762
     do {
      if (($315 & 65535) > 2) {
       $$01213$i$i142 = 0; //@line 3766
       $$014$i$i141 = 1; //@line 3766
       $320 = 1; //@line 3766
       do {
        $$01213$i$i142 = $$01213$i$i142 + ((HEAP8[$312 + $320 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3772
        $$014$i$i141 = $$014$i$i141 + 1 << 16 >> 16; //@line 3773
        $320 = $$014$i$i141 & 65535; //@line 3774
       } while (($317 | 0) > ($320 | 0));
       $phitmp$i$i144 = $$01213$i$i142 + 1 << 24 >> 24; //@line 3782
       if (!($phitmp$i$i144 << 24 >> 24)) {
        $$2108 = 0; //@line 3785
       } else {
        $$012$lcssa$i54$i146 = $phitmp$i$i144; //@line 3787
        break;
       }
       return $$2108 | 0; //@line 3790
      } else {
       $$012$lcssa$i54$i146 = 1; //@line 3792
      }
     } while (0);
     if (!($315 << 16 >> 16)) {
      $$2108 = 0; //@line 3797
      return $$2108 | 0; //@line 3798
     } else {
      $$03239$i148 = 0; //@line 3800
      $$03538$i149 = 0; //@line 3800
     }
     do {
      $$02441$i157 = 0; //@line 3803
      $$02540$i158 = 0; //@line 3803
      $$02839$i159 = 0; //@line 3803
      $$03138$i160 = $312; //@line 3803
      while (1) {
       $330 = (HEAP8[$$03138$i160 >> 0] | 0) != 38; //@line 3806
       if ($$02839$i159 << 16 >> 16 == 0 | $330) {
        $$126$i164 = $$02540$i158; //@line 3812
        $$129$i163 = $$02839$i159 + ($330 & 1) << 16 >> 16; //@line 3812
       } else {
        if ($$02540$i158 << 24 >> 24 == $$03538$i149 << 24 >> 24) {
         $$028$lcssa$i165 = $$02839$i159; //@line 3816
         break;
        }
        $$126$i164 = $$02540$i158 + 1 << 24 >> 24; //@line 3820
        $$129$i163 = 0; //@line 3820
       }
       $$02441$i157 = $$02441$i157 + 1 << 16 >> 16; //@line 3823
       if (($$02441$i157 & 65535) >= ($315 & 65535)) {
        $$028$lcssa$i165 = $$129$i163; //@line 3828
        break;
       } else {
        $$02540$i158 = $$126$i164; //@line 3826
        $$02839$i159 = $$129$i163; //@line 3826
        $$03138$i160 = $$03138$i160 + 1 | 0; //@line 3826
       }
      }
      if (($$028$lcssa$i165 + -1 & 65535) > 254) {
       $$2108 = 0; //@line 3835
       label = 204; //@line 3836
       break;
      }
      if (($$028$lcssa$i165 & 65535) < 13) {
       $$133$i152 = $$03239$i148 + 1 << 16 >> 16; //@line 3843
      } else {
       $$133$i152 = ($$03239$i148 & 65535) + 2 & 65535; //@line 3848
      }
      $347 = ($$133$i152 & 65535) + ($$028$lcssa$i165 & 65535) | 0; //@line 3851
      $$03239$i148 = $347 & 65535; //@line 3852
      $$03538$i149 = $$03538$i149 + 1 << 24 >> 24; //@line 3853
     } while (($$03538$i149 & 255) < ($$012$lcssa$i54$i146 & 255));
     if ((label | 0) == 204) {
      return $$2108 | 0; //@line 3862
     }
     if (!($$03239$i148 << 16 >> 16)) {
      $$2108 = 0; //@line 3866
      return $$2108 | 0; //@line 3867
     } else {
      $$14 = $347 + ($$13 & 65535) & 65535; //@line 3872
      break;
     }
    }
   } while (0);
   $356 = HEAP32[$79 + 36 >> 2] | 0; //@line 3878
   if (($356 | 0) == -1) {
    $$15 = $$14; //@line 3881
   } else {
    if ($356 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3885
     return $$2108 | 0; //@line 3886
    }
    do {
     if ($356 << 8 >>> 0 > 16777215) {
      $$120$232$i137 = 3; //@line 3892
      label = 154; //@line 3893
     } else {
      if ($356 << 16 >>> 0 > 16777215) {
       $$120$232$i137 = 2; //@line 3898
       label = 154; //@line 3899
       break;
      }
      if ($356 << 24 >>> 0 > 16777215) {
       $$120$232$i137 = 1; //@line 3905
       label = 154; //@line 3906
      } else {
       $$120$3$i138 = 0; //@line 3908
      }
     }
    } while (0);
    if ((label | 0) == 154) {
     $$120$3$i138 = $$120$232$i137; //@line 3913
    }
    $$15 = ($$120$3$i138 + 1 & 255) + ($$14 & 65535) & 65535; //@line 3920
   }
   $371 = HEAP8[$79 + 1 >> 0] | 0; //@line 3923
   if (!($371 & 1)) {
    $$16 = $$15; //@line 3927
   } else {
    $375 = HEAP32[$79 + 20 >> 2] | 0; //@line 3930
    do {
     if ($375 >>> 0 > 16777215) {
      $$120$232$i129 = 4; //@line 3934
      label = 161; //@line 3935
     } else {
      if ($375 << 8 >>> 0 > 16777215) {
       $$120$232$i129 = 3; //@line 3940
       label = 161; //@line 3941
       break;
      }
      if ($375 << 16 >>> 0 > 16777215) {
       $$120$232$i129 = 2; //@line 3947
       label = 161; //@line 3948
       break;
      }
      if ($375 << 24 >>> 0 > 16777215) {
       $$120$232$i129 = 1; //@line 3954
       label = 161; //@line 3955
      } else {
       $$120$3$i130 = 0; //@line 3957
      }
     }
    } while (0);
    if ((label | 0) == 161) {
     $$120$3$i130 = $$120$232$i129; //@line 3962
    }
    $$16 = ($$120$3$i130 + 1 & 255) + ($$15 & 65535) & 65535; //@line 3969
   }
   $389 = HEAP32[$79 + 40 >> 2] | 0; //@line 3972
   if (($389 | 0) == -1) {
    $$17 = $$16; //@line 3975
   } else {
    if ($389 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3979
     return $$2108 | 0; //@line 3980
    }
    do {
     if ($389 << 8 >>> 0 > 16777215) {
      $$120$232$i121 = 3; //@line 3986
      label = 168; //@line 3987
     } else {
      if ($389 << 16 >>> 0 > 16777215) {
       $$120$232$i121 = 2; //@line 3992
       label = 168; //@line 3993
       break;
      }
      if ($389 << 24 >>> 0 > 16777215) {
       $$120$232$i121 = 1; //@line 3999
       label = 168; //@line 4000
      } else {
       $$120$3$i122 = 0; //@line 4002
      }
     }
    } while (0);
    if ((label | 0) == 168) {
     $$120$3$i122 = $$120$232$i121; //@line 4007
    }
    $$17 = ($$120$3$i122 + 1 & 255) + ($$16 & 65535) & 65535; //@line 4014
   }
   if (!($371 & 2)) {
    $$18 = $$17; //@line 4019
    break;
   }
   $406 = HEAP32[$79 + 24 >> 2] | 0; //@line 4023
   do {
    if ($406 >>> 0 > 16777215) {
     $$120$232$i = 5; //@line 4027
     label = 175; //@line 4028
    } else {
     if ($406 << 8 >>> 0 > 16777215) {
      $$120$232$i = 4; //@line 4033
      label = 175; //@line 4034
      break;
     }
     if ($406 << 16 >>> 0 > 16777215) {
      $$120$232$i = 3; //@line 4040
      label = 175; //@line 4041
      break;
     }
     if ($406 << 24 >>> 0 > 16777215) {
      $$120$232$i = 2; //@line 4047
      label = 175; //@line 4048
     } else {
      $$120$3$i = 1; //@line 4050
     }
    }
   } while (0);
   if ((label | 0) == 175) {
    $$120$3$i = $$120$232$i; //@line 4055
   }
   $$18 = $$120$3$i + ($$17 & 65535) & 65535; //@line 4060
  }
 } while (0);
 $418 = HEAP16[$0 + 24 >> 1] | 0; //@line 4064
 $$ = ($418 & 65535) + ($$18 & 65535) + ($418 << 16 >> 16 != 0 & 1) | 0; //@line 4070
 do {
  if ($80) {
   $merge$i = 0; //@line 4073
  } else {
   $426 = (HEAP32[$79 + 64 >> 2] | 0) == 0; //@line 4077
   $428 = HEAP32[$79 + 12 >> 2] | 0; //@line 4079
   if ($426 & ($428 | 0) == -1) {
    if (!(HEAP32[$79 + 60 >> 2] | 0)) {
     if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
      if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
       if (!(HEAP32[$79 + 44 >> 2] | 0)) {
        if ((HEAP32[$79 + 16 >> 2] | 0) == 60) {
         if (!(HEAP8[$79 + 1 >> 0] & 3)) {
          $merge$i = 0; //@line 4108
          break;
         } else {
          $475 = -1; //@line 4111
         }
        } else {
         $475 = -1; //@line 4114
        }
       } else {
        $475 = -1; //@line 4117
       }
      } else {
       $475 = -1; //@line 4120
      }
     } else {
      $475 = -1; //@line 4123
     }
    } else {
     $475 = -1; //@line 4126
    }
   } else {
    $475 = $428; //@line 4129
   }
   $$553$$i = $65 ? $17 ? (HEAP32[$79 + 56 >> 2] | 0) == 0 ? (HEAP32[$79 + 28 >> 2] | 0) == -1 ? (HEAP32[$79 + 32 >> 2] | 0) == -1 ? (HEAP32[$79 + 48 >> 2] | 0) == 0 ? (HEAP32[$79 + 52 >> 2] | 0) == 0 ? 0 : 3 : 4 : 6 : 7 : 8 : 11 : 12; //@line 4152
   $466 = (HEAP32[$79 + 16 >> 2] | 0) == 60; //@line 4155
   $$553$$$i = $466 ? $$553$$i : 14; //@line 4159
   $narrow$i = (14 - ($$553$$i & 255) | 0) > 12 & ($466 ^ 1); //@line 4161
   $$$65$i = $narrow$i & 1; //@line 4162
   $$553$$$i$ = $426 ? $$553$$$i : 15; //@line 4168
   $474 = ($475 | 0) == -1; //@line 4170
   $$957$i = $474 ? $$553$$$i$ : 17; //@line 4174
   $$5$i = ($426 ? $$$65$i : (15 - ($$553$$$i & 255) | 0) > 12 ? $narrow$i ? 2 : 1 : $$$65$i) + ((17 - ($$553$$$i$ & 255) | 0) > 12 & ($474 ^ 1) & 1) << 24 >> 24; //@line 4178
   if (!(HEAP32[$79 + 60 >> 2] | 0)) {
    $$1058$i = $$957$i; //@line 4183
    $$7$i = $$5$i; //@line 4183
   } else {
    $$1058$i = 20; //@line 4190
    $$7$i = $$5$i + ((20 - ($$957$i & 255) | 0) > 12 & 1) << 24 >> 24; //@line 4190
   }
   if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
    $$1159$i = $$1058$i; //@line 4196
    $$9$i = $$7$i; //@line 4196
   } else {
    if ((23 - ($$1058$i & 255) | 0) > 12) {
     $$1159$i = 23; //@line 4205
     $$9$i = ($$7$i & 255) + 1 & 255; //@line 4205
    } else {
     $$1159$i = 23; //@line 4207
     $$9$i = $$7$i; //@line 4207
    }
   }
   if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
    $$11$i = $$9$i; //@line 4214
    $$1260$i = $$1159$i; //@line 4214
   } else {
    if ((27 - ($$1159$i & 255) | 0) > 12) {
     $$11$i = ($$9$i & 255) + 1 & 255; //@line 4223
     $$1260$i = 27; //@line 4223
    } else {
     $$11$i = $$9$i; //@line 4225
     $$1260$i = 27; //@line 4225
    }
   }
   $504 = HEAP8[$79 + 1 >> 0] | 0; //@line 4229
   if (!($504 & 2)) {
    $$13$i = $$11$i; //@line 4233
    $$1361$i = $$1260$i; //@line 4233
   } else {
    if ((28 - ($$1260$i & 255) | 0) > 12) {
     $$13$i = ($$11$i & 255) + 1 & 255; //@line 4242
     $$1361$i = 28; //@line 4242
    } else {
     $$13$i = $$11$i; //@line 4244
     $$1361$i = 28; //@line 4244
    }
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$1462$i = $$1361$i; //@line 4251
    $$16$i = $$13$i; //@line 4251
   } else {
    $517 = 35 - ($$1361$i & 255) | 0; //@line 4254
    if (($517 | 0) > 12) {
     if (($517 | 0) > 269) {
      $$1462$i = 35; //@line 4266
      $$16$i = ($$13$i + 1 & 255) + 1 & 255; //@line 4266
     } else {
      $$1462$i = 35; //@line 4268
      $$16$i = ($$13$i & 255) + 1 & 255; //@line 4268
     }
    } else {
     $$1462$i = 35; //@line 4271
     $$16$i = $$13$i; //@line 4271
    }
   }
   if (!($504 & 1)) {
    $merge$i = $$16$i; //@line 4277
   } else {
    if ((60 - ($$1462$i & 255) | 0) > 12) {
     $merge$i = ($$16$i & 255) + 1 & 255; //@line 4286
    } else {
     $merge$i = $$16$i; //@line 4288
    }
   }
  }
 } while (0);
 $$2108 = $$ + ($merge$i & 255) & 65535; //@line 4296
 return $$2108 | 0; //@line 4297
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5669
 STACKTOP = STACKTOP + 288 | 0; //@line 5670
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5670
 $3 = sp + 8 | 0; //@line 5671
 $4 = sp + 17 | 0; //@line 5672
 $5 = sp; //@line 5673
 $6 = sp + 16 | 0; //@line 5674
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5680
 } else {
  $314 = 0; //@line 5682
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5684
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5688
  } else {
   $13 = $0 + 4 | 0; //@line 5690
   $14 = $0 + 100 | 0; //@line 5691
   $15 = $0 + 108 | 0; //@line 5692
   $16 = $0 + 8 | 0; //@line 5693
   $17 = $4 + 10 | 0; //@line 5694
   $18 = $4 + 33 | 0; //@line 5695
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5696
   $$0273408 = $1; //@line 5697
   $$0283407 = 0; //@line 5697
   $$0288404 = 0; //@line 5697
   $$0305402 = 0; //@line 5697
   $20 = $11; //@line 5697
   $315 = 0; //@line 5697
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5705
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5708
        $52 = HEAP8[$51 >> 0] | 0; //@line 5709
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5718
           $$2275 = $$0273408 + 2 | 0; //@line 5718
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5735
             $$2275 = $$0273408 + 3 | 0; //@line 5735
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5750
           $91 = HEAP32[$90 >> 2] | 0; //@line 5751
           HEAP32[$2 >> 2] = $90 + 4; //@line 5753
           $$0293 = $91; //@line 5754
           $$2275 = $51; //@line 5754
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5763
         $$3$lcssa = $$2275; //@line 5763
        } else {
         $$0266397 = 0; //@line 5765
         $$3396 = $$2275; //@line 5765
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5771
          $101 = $$3396 + 1 | 0; //@line 5772
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5778
           $$3$lcssa = $101; //@line 5778
           break;
          } else {
           $$0266397 = $100; //@line 5781
           $$3396 = $101; //@line 5781
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5785
        $108 = $$3$lcssa + 1 | 0; //@line 5787
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5792
         $$1306 = 0; //@line 5792
         $$4 = $108; //@line 5792
         $112 = HEAP8[$108 >> 0] | 0; //@line 5792
         $318 = 0; //@line 5792
        } else {
         $$0270 = 0; //@line 5794
         $$1306 = $$0305402; //@line 5794
         $$4 = $$3$lcssa; //@line 5794
         $112 = $106; //@line 5794
         $318 = $315; //@line 5794
        }
        $111 = $$4 + 1 | 0; //@line 5796
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5800
          $$0268 = $114 ? -2 : -1; //@line 5804
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5804
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5809
          $$0268 = $117 ? 3 : 1; //@line 5813
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5813
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5817
          $$5 = $111; //@line 5817
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5821
          $$5 = $111; //@line 5821
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5825
          $$5 = $111; //@line 5825
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5829
          $$5 = $$4; //@line 5829
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5833
          $319 = $318; //@line 5833
          label = 136; //@line 5834
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5839
        $122 = ($120 & 47 | 0) == 3; //@line 5841
        $$ = $122 ? $120 | 32 : $120; //@line 5843
        $$$0268 = $122 ? 1 : $$0268; //@line 5844
        $trunc = $$ & 255; //@line 5845
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5850
          $$1284 = $$0283407; //@line 5850
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5854
          $$1284 = $$0283407; //@line 5854
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5860
          $$11 = $$5; //@line 5861
          $$1289 = $$0288404; //@line 5861
          $$2285 = $$0283407; //@line 5861
          $$6311 = $$1306; //@line 5861
          $316 = $318; //@line 5861
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5866
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5868
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5873
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5876
           } else {
            $134 = ___shgetc($0) | 0; //@line 5879
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5891
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5894
           HEAP32[$13 >> 2] = $140; //@line 5895
           $146 = $140; //@line 5897
          }
          $$1267 = $$0266$lcssa; //@line 5904
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5904
         }
        }
        ___shlim($0, $$1267); //@line 5907
        $148 = HEAP32[$13 >> 2] | 0; //@line 5908
        $149 = HEAP32[$14 >> 2] | 0; //@line 5909
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5913
         $155 = $149; //@line 5914
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5919
          $319 = $318; //@line 5919
          label = 136; //@line 5920
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5924
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5930
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5935
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5941
             HEAP8[$4 >> 0] = 0; //@line 5942
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5944
              HEAP8[$17 >> 0] = 0; //@line 5945
              HEAP8[$17 + 1 >> 0] = 0; //@line 5945
              HEAP8[$17 + 2 >> 0] = 0; //@line 5945
              HEAP8[$17 + 3 >> 0] = 0; //@line 5945
              HEAP8[$17 + 4 >> 0] = 0; //@line 5945
              $$9 = $$5; //@line 5946
             } else {
              $$9 = $$5; //@line 5948
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5951
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5953
             $$0292 = $164 & 1; //@line 5955
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5956
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5957
             HEAP8[$4 >> 0] = 0; //@line 5958
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5959
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5962
               $$sink330 = 46; //@line 5962
               label = 65; //@line 5963
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5967
               $$sink330 = 94; //@line 5967
               label = 65; //@line 5968
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5972
               $168 = $166; //@line 5972
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5977
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5981
               $$7$ph = $$6$pn + 1 | 0; //@line 5982
               $$7 = $$7$ph; //@line 5984
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5984
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5989
                 $319 = $318; //@line 5989
                 label = 136; //@line 5990
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5995
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 6000
                 $170 = HEAP8[$169 >> 0] | 0; //@line 6001
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 6004
                   $183 = 45; //@line 6004
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 6012
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 6017
                  $$0286399 = $172 & 255; //@line 6018
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 6020
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 6022
                   $179 = HEAP8[$169 >> 0] | 0; //@line 6023
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 6029
                  $183 = $179; //@line 6029
                 } else {
                  $$8 = $169; //@line 6034
                  $183 = $170; //@line 6034
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 6039
                 $183 = $168; //@line 6039
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 6045
              $$sink330 = ($183 & 255) + 1 | 0; //@line 6045
              label = 65; //@line 6046
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 6051
           $187 = ($$$0268 | 0) == 1; //@line 6052
           $188 = ($$0270 | 0) != 0; //@line 6053
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 6058
              if (!$190) {
               $$7312 = 0; //@line 6061
               $319 = 0; //@line 6061
               label = 136; //@line 6062
               break L6;
              } else {
               $321 = $190; //@line 6065
              }
             } else {
              $321 = $$0293; //@line 6068
             }
             HEAP32[$3 >> 2] = 0; //@line 6070
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 6071
             $$0276$ph = $186; //@line 6072
             $$0278$ph = 0; //@line 6072
             $$ph = $321; //@line 6072
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 6074
              $$0278$ph336 = $$0278$ph; //@line 6075
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 6078
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 6083
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 6086
                } else {
                 $201 = ___shgetc($0) | 0; //@line 6089
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 6099
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6103
                  $319 = $$ph; //@line 6103
                  label = 136; //@line 6104
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6117
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6122
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6123
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6130
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6134
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6136
              if (!$213) {
               $$7312 = 0; //@line 6139
               $319 = $$ph; //@line 6139
               label = 136; //@line 6140
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6143
               $$0276$ph = $211; //@line 6143
               $$ph = $213; //@line 6143
               $$0278$ph = $$0278$ph$phi; //@line 6143
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6149
              $319 = $$ph; //@line 6149
              label = 136; //@line 6150
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6153
              $$4309 = 0; //@line 6153
              $$5299 = $$ph; //@line 6153
              $322 = $$ph; //@line 6153
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6157
              if (!$217) {
               $$7312 = 0; //@line 6160
               $319 = 0; //@line 6160
               label = 136; //@line 6161
               break L6;
              } else {
               $$1277$ph = $186; //@line 6164
               $$2280$ph = 0; //@line 6164
               $$2307$ph = $217; //@line 6164
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6167
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6169
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6174
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6177
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6180
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6187
                 $$4309 = $$2307$ph; //@line 6187
                 $$5299 = 0; //@line 6187
                 $322 = 0; //@line 6187
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6193
                $$2280 = $$2280 + 1 | 0; //@line 6191
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6202
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6203
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6206
                $319 = 0; //@line 6206
                label = 136; //@line 6207
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6210
                $$1277$ph = $235; //@line 6210
                $$2307$ph = $236; //@line 6210
                $$2280$ph = $$2280$ph$phi; //@line 6210
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6217
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6222
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6225
               } else {
                $262 = ___shgetc($0) | 0; //@line 6228
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6235
                $$4309 = 0; //@line 6235
                $$5299 = 0; //@line 6235
                $322 = 0; //@line 6235
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6240
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6243
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6248
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6251
              } else {
               $247 = ___shgetc($0) | 0; //@line 6254
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6261
               $$4309 = $$0293; //@line 6261
               $$5299 = 0; //@line 6261
               $322 = 0; //@line 6261
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6267
              $$3281 = $$3281 + 1 | 0; //@line 6268
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6276
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6279
            HEAP32[$13 >> 2] = $269; //@line 6280
            $274 = $269; //@line 6282
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6287
           if (!$275) {
            $$2 = $$0270; //@line 6290
            $$2290 = $$0288404; //@line 6290
            $$9314 = $$4309; //@line 6290
            $312 = $322; //@line 6290
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6297
            $$2290 = $$0288404; //@line 6297
            $$9314 = $$4309; //@line 6297
            $312 = $322; //@line 6297
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6303
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6306
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6312
            $$5310 = $$4309; //@line 6312
            $320 = $322; //@line 6312
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6317
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6321
             $$5310 = 0; //@line 6321
             $320 = $322; //@line 6321
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6325
            $$10 = $$9; //@line 6326
            $$5310 = $$4309; //@line 6326
            $320 = $322; //@line 6326
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6331
           label = 124; //@line 6332
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6336
           label = 124; //@line 6337
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6341
           label = 124; //@line 6342
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6346
           label = 124; //@line 6347
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6351
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6358
            $$2290 = $$0288404; //@line 6358
            $$9314 = $$1306; //@line 6358
            $312 = $318; //@line 6358
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6363
            $$5310 = $$1306; //@line 6363
            $320 = $318; //@line 6363
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6368
              $$10 = $$5; //@line 6369
              $$5310 = $$1306; //@line 6369
              $320 = $318; //@line 6369
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6374
              $$10 = $$5; //@line 6375
              $$5310 = $$1306; //@line 6375
              $320 = $318; //@line 6375
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6380
              $$10 = $$5; //@line 6381
              $$5310 = $$1306; //@line 6381
              $320 = $318; //@line 6381
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6386
              $$5310 = $$1306; //@line 6386
              $320 = $318; //@line 6386
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6394
           $$5310 = $$1306; //@line 6394
           $320 = $318; //@line 6394
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6400
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6401
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6409
           $$2290 = $$0288404; //@line 6409
           $$9314 = $$1306; //@line 6409
           $312 = $318; //@line 6409
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6417
           $$10 = $$5; //@line 6418
           $$5310 = $$1306; //@line 6418
           $320 = $318; //@line 6418
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6421
           $$10 = $$5; //@line 6422
           $$5310 = $$1306; //@line 6422
           $320 = $318; //@line 6422
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6436
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6436
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6436
        $$6311 = $$5310; //@line 6436
        $316 = $320; //@line 6436
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6441
      ___shlim($0, 0); //@line 6442
      $55 = HEAP32[$13 >> 2] | 0; //@line 6443
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6448
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6451
      } else {
       $65 = ___shgetc($0) | 0; //@line 6454
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6460
       break L6;
      }
      $$11 = $54; //@line 6464
      $$1289 = $$0288404; //@line 6464
      $$2285 = $$0283407 + 1 | 0; //@line 6464
      $$6311 = $$0305402; //@line 6464
      $316 = $315; //@line 6464
     } else {
      $$1274 = $$0273408; //@line 6466
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6468
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6476
       }
      }
      ___shlim($0, 0); //@line 6479
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6481
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6486
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6489
       } else {
        $35 = ___shgetc($0) | 0; //@line 6492
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6504
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6507
       HEAP32[$13 >> 2] = $41; //@line 6508
       $47 = $41; //@line 6510
      }
      $$11 = $$1274; //@line 6517
      $$1289 = $$0288404; //@line 6517
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6517
      $$6311 = $$0305402; //@line 6517
      $316 = $315; //@line 6517
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6520
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6521
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6524
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6527
     $$0288404 = $$1289; //@line 6527
     $$0305402 = $$6311; //@line 6527
     $315 = $316; //@line 6527
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6536
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6542
     break;
    } else {
     $$1271 = 0; //@line 6545
     $$8313 = $$0305402; //@line 6545
     $317 = $315; //@line 6545
     label = 137; //@line 6546
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6552
     $$8313 = $$7312; //@line 6552
     $317 = $319; //@line 6552
     label = 137; //@line 6553
    } else {
     $$2 = $$0270; //@line 6555
     $$2290 = $$0288404; //@line 6555
     $$9314 = $$7312; //@line 6555
     $312 = $319; //@line 6555
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6559
    $$2290 = -1; //@line 6559
    $$9314 = $$8313; //@line 6559
    $312 = $317; //@line 6559
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6563
   } else {
    _free($$9314); //@line 6565
    _free($312); //@line 6566
    $$3291 = $$2290; //@line 6567
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6573
 }
 STACKTOP = sp; //@line 6575
 return $$3291 | 0; //@line 6575
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8392
 STACKTOP = STACKTOP + 512 | 0; //@line 8393
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8393
 $6 = sp; //@line 8394
 $sum = $3 + $2 | 0; //@line 8395
 $7 = 0 - $sum | 0; //@line 8396
 $8 = $0 + 4 | 0; //@line 8397
 $9 = $0 + 100 | 0; //@line 8398
 $$0329 = $1; //@line 8399
 $$0396 = 0; //@line 8399
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8403
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8411
    $$2 = $$0329; //@line 8411
    $$2398 = $$0396; //@line 8411
    $368 = 0; //@line 8411
    $369 = 0; //@line 8411
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8415
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8420
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8423
   $$0396 = 1; //@line 8423
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8427
   $$0396 = 1; //@line 8427
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8432
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8437
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8440
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8443
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8447
   $26 = 0; //@line 8447
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8449
    $28 = tempRet0; //@line 8450
    $29 = HEAP32[$8 >> 2] | 0; //@line 8451
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8456
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8459
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8462
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8466
     $26 = $28; //@line 8466
    } else {
     $$0393 = 1; //@line 8468
     $$2 = $$1330$be; //@line 8468
     $$2398 = 1; //@line 8468
     $368 = $27; //@line 8468
     $369 = $28; //@line 8468
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8473
   $$2 = $$1330$ph; //@line 8473
   $$2398 = $$0396; //@line 8473
   $368 = 0; //@line 8473
   $369 = 0; //@line 8473
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8476
 $37 = $$2 + -48 | 0; //@line 8477
 $39 = ($$2 | 0) == 46; //@line 8479
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8483
   $$0341511 = 0; //@line 8484
   $$0345510 = 0; //@line 8484
   $$0401507 = 0; //@line 8484
   $$1394509 = $$0393; //@line 8484
   $$3399508 = $$2398; //@line 8484
   $$3512 = $$2; //@line 8484
   $370 = $39; //@line 8484
   $371 = $37; //@line 8484
   $372 = $368; //@line 8484
   $373 = $369; //@line 8484
   $44 = 0; //@line 8484
   $45 = 0; //@line 8484
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8490
       $$2347 = $$0345510; //@line 8490
       $$2395 = 1; //@line 8490
       $$2403 = $$0401507; //@line 8490
       $$4400 = $$3399508; //@line 8490
       $374 = $44; //@line 8490
       $375 = $45; //@line 8490
       $376 = $44; //@line 8490
       $377 = $45; //@line 8490
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8496
      $47 = tempRet0; //@line 8497
      $48 = ($$3512 | 0) != 48; //@line 8498
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8501
        $$2347 = $$0345510; //@line 8501
        $$2395 = $$1394509; //@line 8501
        $$2403 = $$0401507; //@line 8501
        $$4400 = $$3399508; //@line 8501
        $374 = $372; //@line 8501
        $375 = $373; //@line 8501
        $376 = $46; //@line 8501
        $377 = $47; //@line 8501
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8506
       $$2343 = $$0341511; //@line 8507
       $$2347 = $$0345510; //@line 8507
       $$2395 = $$1394509; //@line 8507
       $$2403 = $$0401507; //@line 8507
       $$4400 = $$3399508; //@line 8507
       $374 = $372; //@line 8507
       $375 = $373; //@line 8507
       $376 = $46; //@line 8507
       $377 = $47; //@line 8507
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8512
      if (!$$0341511) {
       $$sink = $371; //@line 8514
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8520
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8522
      $54 = $$0341511 + 1 | 0; //@line 8523
      $55 = ($54 | 0) == 9; //@line 8524
      $$2343 = $55 ? 0 : $54; //@line 8528
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8528
      $$2395 = $$1394509; //@line 8528
      $$2403 = $48 ? $46 : $$0401507; //@line 8528
      $$4400 = 1; //@line 8528
      $374 = $372; //@line 8528
      $375 = $373; //@line 8528
      $376 = $46; //@line 8528
      $377 = $47; //@line 8528
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8531
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8536
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8539
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8542
    }
    $371 = $$3$be + -48 | 0; //@line 8544
    $370 = ($$3$be | 0) == 46; //@line 8546
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8551
     $$0345$lcssa = $$2347; //@line 8551
     $$0401$lcssa = $$2403; //@line 8551
     $$1394$lcssa = $$2395; //@line 8551
     $$3$lcssa = $$3$be; //@line 8551
     $$3399$lcssa = $$4400; //@line 8551
     $72 = $376; //@line 8551
     $73 = $374; //@line 8551
     $75 = $377; //@line 8551
     $76 = $375; //@line 8551
     label = 29; //@line 8552
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8549
     $$0345510 = $$2347; //@line 8549
     $$0401507 = $$2403; //@line 8549
     $$1394509 = $$2395; //@line 8549
     $$3399508 = $$4400; //@line 8549
     $$3512 = $$3$be; //@line 8549
     $372 = $374; //@line 8549
     $373 = $375; //@line 8549
     $44 = $376; //@line 8549
     $45 = $377; //@line 8549
    }
   }
   $$0341463 = $$0341511; //@line 8557
   $$0345467 = $$0345510; //@line 8557
   $$0401473 = $$0401507; //@line 8557
   $378 = $44; //@line 8557
   $379 = $45; //@line 8557
   $380 = $372; //@line 8557
   $381 = $373; //@line 8557
   $382 = ($$3399508 | 0) != 0; //@line 8557
   label = 37; //@line 8558
  } else {
   $$0341$lcssa = 0; //@line 8560
   $$0345$lcssa = 0; //@line 8560
   $$0401$lcssa = 0; //@line 8560
   $$1394$lcssa = $$0393; //@line 8560
   $$3$lcssa = $$2; //@line 8560
   $$3399$lcssa = $$2398; //@line 8560
   $72 = 0; //@line 8560
   $73 = $368; //@line 8560
   $75 = 0; //@line 8560
   $76 = $369; //@line 8560
   label = 29; //@line 8561
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8566
   $71 = $70 ? $72 : $73; //@line 8567
   $74 = $70 ? $75 : $76; //@line 8568
   $77 = ($$3399$lcssa | 0) != 0; //@line 8569
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8576
     $$0345467 = $$0345$lcssa; //@line 8576
     $$0401473 = $$0401$lcssa; //@line 8576
     $378 = $72; //@line 8576
     $379 = $75; //@line 8576
     $380 = $71; //@line 8576
     $381 = $74; //@line 8576
     $382 = $77; //@line 8576
     label = 37; //@line 8577
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8580
     $$0345466 = $$0345$lcssa; //@line 8580
     $$0401472 = $$0401$lcssa; //@line 8580
     $383 = $72; //@line 8580
     $384 = $75; //@line 8580
     $385 = $77; //@line 8580
     $386 = $71; //@line 8580
     $387 = $74; //@line 8580
     label = 39; //@line 8581
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8585
   $81 = tempRet0; //@line 8586
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8593
     $$1 = 0.0; //@line 8594
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8600
     $91 = 0; //@line 8600
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8604
     $90 = 0; //@line 8605
     $91 = 0; //@line 8605
    }
   } else {
    $90 = $80; //@line 8608
    $91 = $81; //@line 8608
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8610
   $$0341461 = $$0341$lcssa; //@line 8612
   $$0345465 = $$0345$lcssa; //@line 8612
   $$0401471 = $$0401$lcssa; //@line 8612
   $105 = $92; //@line 8612
   $106 = $72; //@line 8612
   $108 = tempRet0; //@line 8612
   $109 = $75; //@line 8612
   label = 41; //@line 8613
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8620
   $$0345466 = $$0345467; //@line 8620
   $$0401472 = $$0401473; //@line 8620
   $383 = $378; //@line 8620
   $384 = $379; //@line 8620
   $385 = $382; //@line 8620
   $386 = $380; //@line 8620
   $387 = $381; //@line 8620
   label = 39; //@line 8621
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8625
   if ($382) {
    $$0341461 = $$0341463; //@line 8627
    $$0345465 = $$0345467; //@line 8627
    $$0401471 = $$0401473; //@line 8627
    $105 = $380; //@line 8627
    $106 = $378; //@line 8627
    $108 = $381; //@line 8627
    $109 = $379; //@line 8627
    label = 41; //@line 8628
   } else {
    label = 40; //@line 8630
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8636
   $$0345465 = $$0345466; //@line 8636
   $$0401471 = $$0401472; //@line 8636
   $105 = $386; //@line 8636
   $106 = $383; //@line 8636
   $108 = $387; //@line 8636
   $109 = $384; //@line 8636
   label = 41; //@line 8637
  } else {
   label = 40; //@line 8639
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8645
   ___shlim($0, 0); //@line 8646
   $$1 = 0.0; //@line 8647
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8650
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8655
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8676
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8680
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8682
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8690
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8694
    break;
   }
   $134 = $3 + -106 | 0; //@line 8697
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8699
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8707
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8711
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8716
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8720
     $$3344501 = $$0341461; //@line 8722
     $150 = HEAP32[$148 >> 2] | 0; //@line 8722
     while (1) {
      $150 = $150 * 10 | 0; //@line 8724
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8728
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8733
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8736
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8750
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1268 + (8 - $105 << 2) >> 2] | 0); //@line 8764
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8769
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8771
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1268 + ($105 + -10 << 2) >> 2] | 0); //@line 8784
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8789
   if (!$184) {
    $$0380$ph = 0; //@line 8792
    $$1373$ph446 = $$3348; //@line 8792
    $$2352$ph447 = 0; //@line 8792
    $$2387$ph445 = $105; //@line 8792
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8796
    $191 = HEAP32[1268 + (8 - $188 << 2) >> 2] | 0; //@line 8799
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8802
     $$0372 = 0; //@line 8802
     $$0385$lcssa552 = $105; //@line 8802
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8804
     $$0340494 = 0; //@line 8805
     $$0350492 = 0; //@line 8805
     $$0385491 = $105; //@line 8805
     $$4349493 = 0; //@line 8805
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8807
      $195 = HEAP32[$194 >> 2] | 0; //@line 8808
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8811
      HEAP32[$194 >> 2] = $198; //@line 8812
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8813
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8816
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8820
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8821
      $$4349493 = $$4349493 + 1 | 0; //@line 8822
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8832
      $$0372 = $$3348; //@line 8832
      $$0385$lcssa552 = $$0385491; //@line 8832
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8836
      $$0350$lcssa553 = $$0350492; //@line 8837
      $$0372 = $$3348 + 1 | 0; //@line 8837
      $$0385$lcssa552 = $$0385491; //@line 8837
     }
    }
    $$0380$ph = 0; //@line 8842
    $$1373$ph446 = $$0372; //@line 8842
    $$2352$ph447 = $$0350$lcssa553; //@line 8842
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8842
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8845
    $213 = ($$2387$ph445 | 0) == 18; //@line 8846
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8847
    $$0380 = $$0380$ph; //@line 8848
    $$1373 = $$1373$ph446; //@line 8848
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8852
       $$4354$ph = $$2352$ph447; //@line 8852
       $$4389$ph443 = $$2387$ph445; //@line 8852
       $$6378$ph = $$1373; //@line 8852
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8858
       $$4354$ph = $$2352$ph447; //@line 8858
       $$4389$ph443 = 18; //@line 8858
       $$6378$ph = $$1373; //@line 8858
       break L101;
      }
     }
     $$0334 = 0; //@line 8863
     $$2374 = $$1373; //@line 8863
     $$5$in = $$1373 + 127 | 0; //@line 8863
     while (1) {
      $$5 = $$5$in & 127; //@line 8865
      $218 = $6 + ($$5 << 2) | 0; //@line 8866
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8868
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8870
      $223 = tempRet0; //@line 8871
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8878
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8880
       $$1335 = $229; //@line 8882
       $$sink419$off0 = $231; //@line 8882
      } else {
       $$1335 = 0; //@line 8884
       $$sink419$off0 = $222; //@line 8884
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8886
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8890
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8895
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8900
       $$5$in = $$5 + -1 | 0; //@line 8900
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8903
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8906
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8913
    $246 = $$2374 + 127 & 127; //@line 8916
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8919
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8925
     $$4376 = $246; //@line 8926
    } else {
     $$4376 = $$2374; //@line 8928
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8931
    $$0380$ph = $$0380; //@line 8932
    $$1373$ph446 = $$4376; //@line 8932
    $$2352$ph447 = $243; //@line 8932
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8932
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8936
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8939
    $$1381$ph557 = $$1381$ph; //@line 8940
    $$4354$ph558 = $$4354$ph; //@line 8940
    $$4389$ph = $$4389$ph443; //@line 8940
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8942
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8944
     $$1381 = $$1381$ph557; //@line 8945
     $$4354 = $$4354$ph558; //@line 8945
     while (1) {
      $$0336484 = 0; //@line 8947
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8950
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8953
        label = 88; //@line 8954
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8958
       $261 = HEAP32[1300 + ($$0336484 << 2) >> 2] | 0; //@line 8960
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8963
        label = 88; //@line 8964
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8971
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8974
       } else {
        $$1337 = $264; //@line 8976
        label = 88; //@line 8977
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8982
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8986
        $$4483 = 0; //@line 8986
        $$9481 = $$6378$ph; //@line 8986
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8990
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8993
       $$4354 = $$6378$ph; //@line 8993
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8999
     $272 = 1e9 >>> $$423; //@line 9000
     $$0332488 = 0; //@line 9001
     $$5355486 = $$4354; //@line 9001
     $$5390485 = $$4389$ph; //@line 9001
     $$6487 = $$4354; //@line 9001
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 9003
      $274 = HEAP32[$273 >> 2] | 0; //@line 9004
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 9007
      HEAP32[$273 >> 2] = $277; //@line 9008
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 9009
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 9012
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 9016
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 9017
      $$6487 = $$6487 + 1 & 127; //@line 9019
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 9029
      $$4354$ph558 = $$5355486; //@line 9029
      $$4389$ph = $$5390485; //@line 9029
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 9038
     $$1381$ph557 = $268; //@line 9039
     $$4354$ph558 = $$5355486; //@line 9039
     $$4389$ph = $$5390485; //@line 9039
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 9042
    $$1381$ph = $268; //@line 9043
    $$4354$ph = $$5355486; //@line 9043
    $$4389$ph443 = $$5390485; //@line 9043
    $$6378$ph = $289; //@line 9043
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 9047
    $302 = $$9481 + 1 & 127; //@line 9050
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 9054
     $$10 = $302; //@line 9055
    } else {
     $$10 = $$9481; //@line 9057
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 9063
    $$4483 = $$4483 + 1 | 0; //@line 9064
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 9069
    }
   }
   $311 = +($4 | 0); //@line 9072
   $312 = $$0365482 * $311; //@line 9073
   $313 = $$1381 + 53 | 0; //@line 9074
   $314 = $313 - $3 | 0; //@line 9075
   $315 = ($314 | 0) < ($2 | 0); //@line 9076
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 9079
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 9084
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 9087
    $$0360 = $320; //@line 9090
    $$0361 = $323; //@line 9090
    $$1366 = $320 + ($312 - $323); //@line 9090
   } else {
    $$0360 = 0.0; //@line 9092
    $$0361 = 0.0; //@line 9092
    $$1366 = $312; //@line 9092
   }
   $327 = $$4354 + 2 & 127; //@line 9095
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 9098
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9101
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9111
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9117
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9123
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9132
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9137
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9148
     } else {
      $$3364 = $$1362 + 1.0; //@line 9151
     }
    } else {
     $$3364 = $$1362; //@line 9154
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9158
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9165
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9169
     $$2367 = $359 ? $354 : $354 * .5; //@line 9170
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9180
       $$4384 = $$3383; //@line 9180
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9185
     $$3368 = $$2367; //@line 9186
     $$4384 = $$3383; //@line 9186
    } else {
     $$3368 = $354; //@line 9188
     $$4384 = $$1381; //@line 9188
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9192
  }
 } while (0);
 STACKTOP = sp; //@line 9195
 return +$$1;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11564
 STACKTOP = STACKTOP + 560 | 0; //@line 11565
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11565
 $6 = sp + 8 | 0; //@line 11566
 $7 = sp; //@line 11567
 $8 = sp + 524 | 0; //@line 11568
 $9 = $8; //@line 11569
 $10 = sp + 512 | 0; //@line 11570
 HEAP32[$7 >> 2] = 0; //@line 11571
 $11 = $10 + 12 | 0; //@line 11572
 ___DOUBLE_BITS_677($1) | 0; //@line 11573
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11578
  $$0520 = 1; //@line 11578
  $$0521 = 3694; //@line 11578
 } else {
  $$0471 = $1; //@line 11589
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11589
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 3695 : 3700 : 3697; //@line 11589
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11591
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11600
   $31 = $$0520 + 3 | 0; //@line 11605
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11607
   _out_670($0, $$0521, $$0520); //@line 11608
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 3721 : 3725 : $27 ? 3713 : 3717, 3); //@line 11609
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11611
   $$sink560 = $31; //@line 11612
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11615
   $36 = $35 != 0.0; //@line 11616
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11620
   }
   $39 = $5 | 32; //@line 11622
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11625
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11628
    $44 = $$0520 | 2; //@line 11629
    $46 = 12 - $3 | 0; //@line 11631
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11636
     } else {
      $$0509585 = 8.0; //@line 11638
      $$1508586 = $46; //@line 11638
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11640
       $$0509585 = $$0509585 * 16.0; //@line 11641
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11656
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11661
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11666
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11669
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11672
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11675
     HEAP8[$68 >> 0] = 48; //@line 11676
     $$0511 = $68; //@line 11677
    } else {
     $$0511 = $66; //@line 11679
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11686
    $76 = $$0511 + -2 | 0; //@line 11689
    HEAP8[$76 >> 0] = $5 + 15; //@line 11690
    $77 = ($3 | 0) < 1; //@line 11691
    $79 = ($4 & 8 | 0) == 0; //@line 11693
    $$0523 = $8; //@line 11694
    $$2473 = $$1472; //@line 11694
    while (1) {
     $80 = ~~$$2473; //@line 11696
     $86 = $$0523 + 1 | 0; //@line 11702
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[3729 + $80 >> 0]; //@line 11703
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11706
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11715
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11718
       $$1524 = $$0523 + 2 | 0; //@line 11719
      }
     } else {
      $$1524 = $86; //@line 11722
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11726
     }
    }
    $$pre693 = $$1524; //@line 11732
    if (!$3) {
     label = 24; //@line 11734
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11742
      $$sink = $3 + 2 | 0; //@line 11742
     } else {
      label = 24; //@line 11744
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11748
     $$pre$phi691Z2D = $101; //@line 11749
     $$sink = $101; //@line 11749
    }
    $104 = $11 - $76 | 0; //@line 11753
    $106 = $104 + $44 + $$sink | 0; //@line 11755
    _pad_676($0, 32, $2, $106, $4); //@line 11756
    _out_670($0, $$0521$, $44); //@line 11757
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11759
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11760
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11762
    _out_670($0, $76, $104); //@line 11763
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11765
    $$sink560 = $106; //@line 11766
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11770
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11774
    HEAP32[$7 >> 2] = $113; //@line 11775
    $$3 = $35 * 268435456.0; //@line 11776
    $$pr = $113; //@line 11776
   } else {
    $$3 = $35; //@line 11779
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11779
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11783
   $$0498 = $$561; //@line 11784
   $$4 = $$3; //@line 11784
   do {
    $116 = ~~$$4 >>> 0; //@line 11786
    HEAP32[$$0498 >> 2] = $116; //@line 11787
    $$0498 = $$0498 + 4 | 0; //@line 11788
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11791
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11801
    $$1499662 = $$0498; //@line 11801
    $124 = $$pr; //@line 11801
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11804
     $$0488655 = $$1499662 + -4 | 0; //@line 11805
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11808
     } else {
      $$0488657 = $$0488655; //@line 11810
      $$0497656 = 0; //@line 11810
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11813
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11815
       $131 = tempRet0; //@line 11816
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11817
       HEAP32[$$0488657 >> 2] = $132; //@line 11819
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11820
       $$0488657 = $$0488657 + -4 | 0; //@line 11822
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11832
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11834
       HEAP32[$138 >> 2] = $$0497656; //@line 11835
       $$2483$ph = $138; //@line 11836
      }
     }
     $$2500 = $$1499662; //@line 11839
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11845
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11849
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11855
     HEAP32[$7 >> 2] = $144; //@line 11856
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11859
      $$1499662 = $$2500; //@line 11859
      $124 = $144; //@line 11859
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11861
      $$1499$lcssa = $$2500; //@line 11861
      $$pr566 = $144; //@line 11861
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11866
    $$1499$lcssa = $$0498; //@line 11866
    $$pr566 = $$pr; //@line 11866
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11872
    $150 = ($39 | 0) == 102; //@line 11873
    $$3484650 = $$1482$lcssa; //@line 11874
    $$3501649 = $$1499$lcssa; //@line 11874
    $152 = $$pr566; //@line 11874
    while (1) {
     $151 = 0 - $152 | 0; //@line 11876
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11878
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11882
      $161 = 1e9 >>> $154; //@line 11883
      $$0487644 = 0; //@line 11884
      $$1489643 = $$3484650; //@line 11884
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11886
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11890
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11891
       $$1489643 = $$1489643 + 4 | 0; //@line 11892
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11903
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11906
       $$4502 = $$3501649; //@line 11906
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11909
       $$$3484700 = $$$3484; //@line 11910
       $$4502 = $$3501649 + 4 | 0; //@line 11910
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11917
      $$4502 = $$3501649; //@line 11917
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11919
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11926
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11928
     HEAP32[$7 >> 2] = $152; //@line 11929
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11934
      $$3501$lcssa = $$$4502; //@line 11934
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11932
      $$3501649 = $$$4502; //@line 11932
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11939
    $$3501$lcssa = $$1499$lcssa; //@line 11939
   }
   $185 = $$561; //@line 11942
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11947
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11948
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11951
    } else {
     $$0514639 = $189; //@line 11953
     $$0530638 = 10; //@line 11953
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11955
      $193 = $$0514639 + 1 | 0; //@line 11956
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11959
       break;
      } else {
       $$0514639 = $193; //@line 11962
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11967
   }
   $198 = ($39 | 0) == 103; //@line 11972
   $199 = ($$540 | 0) != 0; //@line 11973
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11976
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11985
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11988
    $213 = ($209 | 0) % 9 | 0; //@line 11989
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11992
     $$1531632 = 10; //@line 11992
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11995
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11998
       $$1531632 = $215; //@line 11998
      } else {
       $$1531$lcssa = $215; //@line 12000
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 12005
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 12007
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 12008
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 12011
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 12014
     $$4518 = $$1515; //@line 12014
     $$8 = $$3484$lcssa; //@line 12014
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 12019
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 12020
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 12025
     if (!$$0520) {
      $$1467 = $$$564; //@line 12028
      $$1469 = $$543; //@line 12028
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 12031
      $$1467 = $230 ? -$$$564 : $$$564; //@line 12036
      $$1469 = $230 ? -$$543 : $$543; //@line 12036
     }
     $233 = $217 - $218 | 0; //@line 12038
     HEAP32[$212 >> 2] = $233; //@line 12039
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 12043
      HEAP32[$212 >> 2] = $236; //@line 12044
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 12047
       $$sink547625 = $212; //@line 12047
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 12049
        HEAP32[$$sink547625 >> 2] = 0; //@line 12050
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 12053
         HEAP32[$240 >> 2] = 0; //@line 12054
         $$6 = $240; //@line 12055
        } else {
         $$6 = $$5486626; //@line 12057
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 12060
        HEAP32[$238 >> 2] = $242; //@line 12061
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 12064
         $$sink547625 = $238; //@line 12064
        } else {
         $$5486$lcssa = $$6; //@line 12066
         $$sink547$lcssa = $238; //@line 12066
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 12071
       $$sink547$lcssa = $212; //@line 12071
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 12076
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 12077
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 12080
       $$4518 = $247; //@line 12080
       $$8 = $$5486$lcssa; //@line 12080
      } else {
       $$2516621 = $247; //@line 12082
       $$2532620 = 10; //@line 12082
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 12084
        $251 = $$2516621 + 1 | 0; //@line 12085
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 12088
         $$4518 = $251; //@line 12088
         $$8 = $$5486$lcssa; //@line 12088
         break;
        } else {
         $$2516621 = $251; //@line 12091
        }
       }
      }
     } else {
      $$4492 = $212; //@line 12096
      $$4518 = $$1515; //@line 12096
      $$8 = $$3484$lcssa; //@line 12096
     }
    }
    $253 = $$4492 + 4 | 0; //@line 12099
    $$5519$ph = $$4518; //@line 12102
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12102
    $$9$ph = $$8; //@line 12102
   } else {
    $$5519$ph = $$1515; //@line 12104
    $$7505$ph = $$3501$lcssa; //@line 12104
    $$9$ph = $$3484$lcssa; //@line 12104
   }
   $$7505 = $$7505$ph; //@line 12106
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12110
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12113
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12117
    } else {
     $$lcssa675 = 1; //@line 12119
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12123
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12128
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12136
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12136
     } else {
      $$0479 = $5 + -2 | 0; //@line 12140
      $$2476 = $$540$ + -1 | 0; //@line 12140
     }
     $267 = $4 & 8; //@line 12142
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12147
       if (!$270) {
        $$2529 = 9; //@line 12150
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12155
         $$3533616 = 10; //@line 12155
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12157
          $275 = $$1528617 + 1 | 0; //@line 12158
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12164
           break;
          } else {
           $$1528617 = $275; //@line 12162
          }
         }
        } else {
         $$2529 = 0; //@line 12169
        }
       }
      } else {
       $$2529 = 9; //@line 12173
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12181
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12183
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12185
       $$1480 = $$0479; //@line 12188
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12188
       $$pre$phi698Z2D = 0; //@line 12188
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12192
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12194
       $$1480 = $$0479; //@line 12197
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12197
       $$pre$phi698Z2D = 0; //@line 12197
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12201
      $$3477 = $$2476; //@line 12201
      $$pre$phi698Z2D = $267; //@line 12201
     }
    } else {
     $$1480 = $5; //@line 12205
     $$3477 = $$540; //@line 12205
     $$pre$phi698Z2D = $4 & 8; //@line 12205
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12208
   $294 = ($292 | 0) != 0 & 1; //@line 12210
   $296 = ($$1480 | 32 | 0) == 102; //@line 12212
   if ($296) {
    $$2513 = 0; //@line 12216
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12216
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12219
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12222
    $304 = $11; //@line 12223
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12228
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12230
      HEAP8[$308 >> 0] = 48; //@line 12231
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12236
      } else {
       $$1512$lcssa = $308; //@line 12238
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12243
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12250
    $318 = $$1512$lcssa + -2 | 0; //@line 12252
    HEAP8[$318 >> 0] = $$1480; //@line 12253
    $$2513 = $318; //@line 12256
    $$pn = $304 - $318 | 0; //@line 12256
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12261
   _pad_676($0, 32, $2, $323, $4); //@line 12262
   _out_670($0, $$0521, $$0520); //@line 12263
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12265
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12268
    $326 = $8 + 9 | 0; //@line 12269
    $327 = $326; //@line 12270
    $328 = $8 + 8 | 0; //@line 12271
    $$5493600 = $$0496$$9; //@line 12272
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12275
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12280
       $$1465 = $328; //@line 12281
      } else {
       $$1465 = $330; //@line 12283
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12290
       $$0464597 = $330; //@line 12291
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12293
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12296
        } else {
         $$1465 = $335; //@line 12298
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12303
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12308
     $$5493600 = $$5493600 + 4 | 0; //@line 12309
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 3745, 1); //@line 12319
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12325
     $$6494592 = $$5493600; //@line 12325
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12328
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12333
       $$0463587 = $347; //@line 12334
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12336
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12339
        } else {
         $$0463$lcssa = $351; //@line 12341
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12346
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12350
      $$6494592 = $$6494592 + 4 | 0; //@line 12351
      $356 = $$4478593 + -9 | 0; //@line 12352
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12359
       break;
      } else {
       $$4478593 = $356; //@line 12357
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12364
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12367
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12370
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12373
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12374
     $365 = $363; //@line 12375
     $366 = 0 - $9 | 0; //@line 12376
     $367 = $8 + 8 | 0; //@line 12377
     $$5605 = $$3477; //@line 12378
     $$7495604 = $$9$ph; //@line 12378
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12381
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12384
       $$0 = $367; //@line 12385
      } else {
       $$0 = $369; //@line 12387
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12392
        _out_670($0, $$0, 1); //@line 12393
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12397
         break;
        }
        _out_670($0, 3745, 1); //@line 12400
        $$2 = $375; //@line 12401
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12405
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12410
        $$1601 = $$0; //@line 12411
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12413
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12416
         } else {
          $$2 = $373; //@line 12418
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12425
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12428
      $381 = $$5605 - $378 | 0; //@line 12429
      $$7495604 = $$7495604 + 4 | 0; //@line 12430
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12437
       break;
      } else {
       $$5605 = $381; //@line 12435
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12442
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12445
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12449
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12452
   $$sink560 = $323; //@line 12453
  }
 } while (0);
 STACKTOP = sp; //@line 12458
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12458
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10136
 STACKTOP = STACKTOP + 64 | 0; //@line 10137
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10137
 $5 = sp + 16 | 0; //@line 10138
 $6 = sp; //@line 10139
 $7 = sp + 24 | 0; //@line 10140
 $8 = sp + 8 | 0; //@line 10141
 $9 = sp + 20 | 0; //@line 10142
 HEAP32[$5 >> 2] = $1; //@line 10143
 $10 = ($0 | 0) != 0; //@line 10144
 $11 = $7 + 40 | 0; //@line 10145
 $12 = $11; //@line 10146
 $13 = $7 + 39 | 0; //@line 10147
 $14 = $8 + 4 | 0; //@line 10148
 $$0243 = 0; //@line 10149
 $$0247 = 0; //@line 10149
 $$0269 = 0; //@line 10149
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10158
     $$1248 = -1; //@line 10159
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10163
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10167
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10170
  $21 = HEAP8[$20 >> 0] | 0; //@line 10171
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10174
   break;
  } else {
   $23 = $21; //@line 10177
   $25 = $20; //@line 10177
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10182
     $27 = $25; //@line 10182
     label = 9; //@line 10183
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10188
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10195
   HEAP32[$5 >> 2] = $24; //@line 10196
   $23 = HEAP8[$24 >> 0] | 0; //@line 10198
   $25 = $24; //@line 10198
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10203
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10208
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10211
     $27 = $27 + 2 | 0; //@line 10212
     HEAP32[$5 >> 2] = $27; //@line 10213
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10220
      break;
     } else {
      $$0249303 = $30; //@line 10217
      label = 9; //@line 10218
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10228
  if ($10) {
   _out_670($0, $20, $36); //@line 10230
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10234
   $$0247 = $$1248; //@line 10234
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10242
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10243
  if ($43) {
   $$0253 = -1; //@line 10245
   $$1270 = $$0269; //@line 10245
   $$sink = 1; //@line 10245
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10255
    $$1270 = 1; //@line 10255
    $$sink = 3; //@line 10255
   } else {
    $$0253 = -1; //@line 10257
    $$1270 = $$0269; //@line 10257
    $$sink = 1; //@line 10257
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10260
  HEAP32[$5 >> 2] = $51; //@line 10261
  $52 = HEAP8[$51 >> 0] | 0; //@line 10262
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10264
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10271
   $$lcssa291 = $52; //@line 10271
   $$lcssa292 = $51; //@line 10271
  } else {
   $$0262309 = 0; //@line 10273
   $60 = $52; //@line 10273
   $65 = $51; //@line 10273
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10278
    $64 = $65 + 1 | 0; //@line 10279
    HEAP32[$5 >> 2] = $64; //@line 10280
    $66 = HEAP8[$64 >> 0] | 0; //@line 10281
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10283
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10290
     $$lcssa291 = $66; //@line 10290
     $$lcssa292 = $64; //@line 10290
     break;
    } else {
     $$0262309 = $63; //@line 10293
     $60 = $66; //@line 10293
     $65 = $64; //@line 10293
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10305
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10307
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10312
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10317
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10329
     $$2271 = 1; //@line 10329
     $storemerge274 = $79 + 3 | 0; //@line 10329
    } else {
     label = 23; //@line 10331
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10335
    if ($$1270 | 0) {
     $$0 = -1; //@line 10338
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10353
     $106 = HEAP32[$105 >> 2] | 0; //@line 10354
     HEAP32[$2 >> 2] = $105 + 4; //@line 10356
     $363 = $106; //@line 10357
    } else {
     $363 = 0; //@line 10359
    }
    $$0259 = $363; //@line 10363
    $$2271 = 0; //@line 10363
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10363
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10365
   $109 = ($$0259 | 0) < 0; //@line 10366
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10371
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10371
   $$3272 = $$2271; //@line 10371
   $115 = $storemerge274; //@line 10371
  } else {
   $112 = _getint_671($5) | 0; //@line 10373
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10376
    break;
   }
   $$1260 = $112; //@line 10380
   $$1263 = $$0262$lcssa; //@line 10380
   $$3272 = $$1270; //@line 10380
   $115 = HEAP32[$5 >> 2] | 0; //@line 10380
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10391
     $156 = _getint_671($5) | 0; //@line 10392
     $$0254 = $156; //@line 10394
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10394
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10403
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10408
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10413
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10420
      $144 = $125 + 4 | 0; //@line 10424
      HEAP32[$5 >> 2] = $144; //@line 10425
      $$0254 = $140; //@line 10426
      $$pre345 = $144; //@line 10426
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10432
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10447
     $152 = HEAP32[$151 >> 2] | 0; //@line 10448
     HEAP32[$2 >> 2] = $151 + 4; //@line 10450
     $364 = $152; //@line 10451
    } else {
     $364 = 0; //@line 10453
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10456
    HEAP32[$5 >> 2] = $154; //@line 10457
    $$0254 = $364; //@line 10458
    $$pre345 = $154; //@line 10458
   } else {
    $$0254 = -1; //@line 10460
    $$pre345 = $115; //@line 10460
   }
  } while (0);
  $$0252 = 0; //@line 10463
  $158 = $$pre345; //@line 10463
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10470
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10473
   HEAP32[$5 >> 2] = $158; //@line 10474
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (3213 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10479
   $168 = $167 & 255; //@line 10480
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10484
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10491
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10495
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10499
     break L1;
    } else {
     label = 50; //@line 10502
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10507
     $176 = $3 + ($$0253 << 3) | 0; //@line 10509
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10514
     $182 = $6; //@line 10515
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10517
     HEAP32[$182 + 4 >> 2] = $181; //@line 10520
     label = 50; //@line 10521
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10525
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10528
    $187 = HEAP32[$5 >> 2] | 0; //@line 10530
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10534
   if ($10) {
    $187 = $158; //@line 10536
   } else {
    $$0243 = 0; //@line 10538
    $$0247 = $$1248; //@line 10538
    $$0269 = $$3272; //@line 10538
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10544
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10550
  $196 = $$1263 & -65537; //@line 10553
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10554
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10562
       $$0243 = 0; //@line 10563
       $$0247 = $$1248; //@line 10563
       $$0269 = $$3272; //@line 10563
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10569
       $$0243 = 0; //@line 10570
       $$0247 = $$1248; //@line 10570
       $$0269 = $$3272; //@line 10570
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10578
       HEAP32[$208 >> 2] = $$1248; //@line 10580
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10583
       $$0243 = 0; //@line 10584
       $$0247 = $$1248; //@line 10584
       $$0269 = $$3272; //@line 10584
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10591
       $$0243 = 0; //@line 10592
       $$0247 = $$1248; //@line 10592
       $$0269 = $$3272; //@line 10592
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10599
       $$0243 = 0; //@line 10600
       $$0247 = $$1248; //@line 10600
       $$0269 = $$3272; //@line 10600
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10606
       $$0243 = 0; //@line 10607
       $$0247 = $$1248; //@line 10607
       $$0269 = $$3272; //@line 10607
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10615
       HEAP32[$220 >> 2] = $$1248; //@line 10617
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10620
       $$0243 = 0; //@line 10621
       $$0247 = $$1248; //@line 10621
       $$0269 = $$3272; //@line 10621
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10626
       $$0247 = $$1248; //@line 10626
       $$0269 = $$3272; //@line 10626
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10636
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10636
     $$3265 = $$1263$ | 8; //@line 10636
     label = 62; //@line 10637
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10641
     $$1255 = $$0254; //@line 10641
     $$3265 = $$1263$; //@line 10641
     label = 62; //@line 10642
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10646
     $244 = HEAP32[$242 >> 2] | 0; //@line 10648
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10651
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10652
     $252 = $12 - $248 | 0; //@line 10656
     $$0228 = $248; //@line 10661
     $$1233 = 0; //@line 10661
     $$1238 = 3677; //@line 10661
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10661
     $$4266 = $$1263$; //@line 10661
     $281 = $244; //@line 10661
     $283 = $247; //@line 10661
     label = 68; //@line 10662
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10666
     $258 = HEAP32[$256 >> 2] | 0; //@line 10668
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10671
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10674
      $264 = tempRet0; //@line 10675
      $265 = $6; //@line 10676
      HEAP32[$265 >> 2] = $263; //@line 10678
      HEAP32[$265 + 4 >> 2] = $264; //@line 10681
      $$0232 = 1; //@line 10682
      $$0237 = 3677; //@line 10682
      $275 = $263; //@line 10682
      $276 = $264; //@line 10682
      label = 67; //@line 10683
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10695
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 3677 : 3679 : 3678; //@line 10695
      $275 = $258; //@line 10695
      $276 = $261; //@line 10695
      label = 67; //@line 10696
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10702
     $$0232 = 0; //@line 10708
     $$0237 = 3677; //@line 10708
     $275 = HEAP32[$197 >> 2] | 0; //@line 10708
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10708
     label = 67; //@line 10709
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10720
     $$2 = $13; //@line 10721
     $$2234 = 0; //@line 10721
     $$2239 = 3677; //@line 10721
     $$2251 = $11; //@line 10721
     $$5 = 1; //@line 10721
     $$6268 = $196; //@line 10721
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10728
     label = 72; //@line 10729
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10733
     $$1 = $302 | 0 ? $302 : 3687; //@line 10736
     label = 72; //@line 10737
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10747
     HEAP32[$14 >> 2] = 0; //@line 10748
     HEAP32[$6 >> 2] = $8; //@line 10749
     $$4258354 = -1; //@line 10750
     $365 = $8; //@line 10750
     label = 76; //@line 10751
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10755
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10758
      $$0240$lcssa356 = 0; //@line 10759
      label = 85; //@line 10760
     } else {
      $$4258354 = $$0254; //@line 10762
      $365 = $$pre348; //@line 10762
      label = 76; //@line 10763
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10770
     $$0247 = $$1248; //@line 10770
     $$0269 = $$3272; //@line 10770
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10775
     $$2234 = 0; //@line 10775
     $$2239 = 3677; //@line 10775
     $$2251 = $11; //@line 10775
     $$5 = $$0254; //@line 10775
     $$6268 = $$1263$; //@line 10775
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10781
    $227 = $6; //@line 10782
    $229 = HEAP32[$227 >> 2] | 0; //@line 10784
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10787
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10789
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10795
    $$0228 = $234; //@line 10800
    $$1233 = $or$cond278 ? 0 : 2; //@line 10800
    $$1238 = $or$cond278 ? 3677 : 3677 + ($$1236 >> 4) | 0; //@line 10800
    $$2256 = $$1255; //@line 10800
    $$4266 = $$3265; //@line 10800
    $281 = $229; //@line 10800
    $283 = $232; //@line 10800
    label = 68; //@line 10801
   } else if ((label | 0) == 67) {
    label = 0; //@line 10804
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10806
    $$1233 = $$0232; //@line 10806
    $$1238 = $$0237; //@line 10806
    $$2256 = $$0254; //@line 10806
    $$4266 = $$1263$; //@line 10806
    $281 = $275; //@line 10806
    $283 = $276; //@line 10806
    label = 68; //@line 10807
   } else if ((label | 0) == 72) {
    label = 0; //@line 10810
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10811
    $306 = ($305 | 0) == 0; //@line 10812
    $$2 = $$1; //@line 10819
    $$2234 = 0; //@line 10819
    $$2239 = 3677; //@line 10819
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10819
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10819
    $$6268 = $196; //@line 10819
   } else if ((label | 0) == 76) {
    label = 0; //@line 10822
    $$0229316 = $365; //@line 10823
    $$0240315 = 0; //@line 10823
    $$1244314 = 0; //@line 10823
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10825
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10828
      $$2245 = $$1244314; //@line 10828
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10831
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10837
      $$2245 = $320; //@line 10837
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10841
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10844
      $$0240315 = $325; //@line 10844
      $$1244314 = $320; //@line 10844
     } else {
      $$0240$lcssa = $325; //@line 10846
      $$2245 = $320; //@line 10846
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10852
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10855
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10858
     label = 85; //@line 10859
    } else {
     $$1230327 = $365; //@line 10861
     $$1241326 = 0; //@line 10861
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10863
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10866
       label = 85; //@line 10867
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10870
      $$1241326 = $331 + $$1241326 | 0; //@line 10871
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10874
       label = 85; //@line 10875
       break L97;
      }
      _out_670($0, $9, $331); //@line 10879
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10884
       label = 85; //@line 10885
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10882
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10893
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10899
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10901
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10906
   $$2 = $or$cond ? $$0228 : $11; //@line 10911
   $$2234 = $$1233; //@line 10911
   $$2239 = $$1238; //@line 10911
   $$2251 = $11; //@line 10911
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10911
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10911
  } else if ((label | 0) == 85) {
   label = 0; //@line 10914
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10916
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10919
   $$0247 = $$1248; //@line 10919
   $$0269 = $$3272; //@line 10919
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10924
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10926
  $345 = $$$5 + $$2234 | 0; //@line 10927
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10929
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10930
  _out_670($0, $$2239, $$2234); //@line 10931
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10933
  _pad_676($0, 48, $$$5, $343, 0); //@line 10934
  _out_670($0, $$2, $343); //@line 10935
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10937
  $$0243 = $$2261; //@line 10938
  $$0247 = $$1248; //@line 10938
  $$0269 = $$3272; //@line 10938
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10946
    } else {
     $$2242302 = 1; //@line 10948
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10951
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10954
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10958
      $356 = $$2242302 + 1 | 0; //@line 10959
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10962
      } else {
       $$2242$lcssa = $356; //@line 10964
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10970
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10976
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10982
       } else {
        $$0 = 1; //@line 10984
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10989
     }
    }
   } else {
    $$0 = $$1248; //@line 10993
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10997
 return $$0 | 0; //@line 10997
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1580] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1581] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1578] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 6344 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1576] = HEAP32[1576] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 6608 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1577] = HEAP32[1577] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1580] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1580] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1580] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1582] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1579] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1579] = $124; //@line 2682
   HEAP32[1582] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1581] | 0)) {
    return;
   }
   HEAP32[1581] = 0; //@line 2692
   HEAP32[1578] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1581] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1578] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1578] = $132; //@line 2701
   HEAP32[1581] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 6344 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1580] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1576] = HEAP32[1576] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1580] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1580] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1580] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 6608 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1577] = HEAP32[1577] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1580] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1580] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1580] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1581] | 0)) {
   HEAP32[1578] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 6344 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1576] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1576] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1580] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 6608 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1577] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1577] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1580] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1580] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1584] | 0) + -1 | 0; //@line 3125
 HEAP32[1584] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 6760; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1584] = -1; //@line 3143
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3675
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3677
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3682
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3689
   $12 = $7 + $1 | 0; //@line 3690
   $13 = HEAP32[1580] | 0; //@line 3691
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3694
   }
   if ((HEAP32[1581] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3700
    $102 = HEAP32[$101 >> 2] | 0; //@line 3701
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3705
     $$1418 = $12; //@line 3705
     break;
    }
    HEAP32[1578] = $12; //@line 3708
    HEAP32[$101 >> 2] = $102 & -2; //@line 3710
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3713
    HEAP32[$2 >> 2] = $12; //@line 3714
    return;
   }
   $17 = $7 >>> 3; //@line 3717
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3721
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3723
    $24 = 6344 + ($17 << 1 << 2) | 0; //@line 3725
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3730
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3737
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1576] = HEAP32[1576] & ~(1 << $17); //@line 3747
     $$1 = $11; //@line 3748
     $$1418 = $12; //@line 3748
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3754
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3758
     }
     $37 = $22 + 8 | 0; //@line 3761
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3765
     } else {
      _abort(); //@line 3767
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3772
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3773
    $$1 = $11; //@line 3774
    $$1418 = $12; //@line 3774
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3778
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3780
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3784
     $56 = $55 + 4 | 0; //@line 3785
     $57 = HEAP32[$56 >> 2] | 0; //@line 3786
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3789
      if (!$59) {
       $$3 = 0; //@line 3792
       break;
      } else {
       $$1426 = $59; //@line 3795
       $$1429 = $55; //@line 3795
      }
     } else {
      $$1426 = $57; //@line 3798
      $$1429 = $56; //@line 3798
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3801
      $62 = HEAP32[$61 >> 2] | 0; //@line 3802
      if ($62 | 0) {
       $$1426 = $62; //@line 3805
       $$1429 = $61; //@line 3805
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3808
      $65 = HEAP32[$64 >> 2] | 0; //@line 3809
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3814
       $$1429 = $64; //@line 3814
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3819
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3822
      $$3 = $$1426; //@line 3823
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3828
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3831
     }
     $49 = $47 + 12 | 0; //@line 3834
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3838
     }
     $52 = $44 + 8 | 0; //@line 3841
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3845
      HEAP32[$52 >> 2] = $47; //@line 3846
      $$3 = $44; //@line 3847
      break;
     } else {
      _abort(); //@line 3850
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3857
    $$1418 = $12; //@line 3857
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3860
    $71 = 6608 + ($70 << 2) | 0; //@line 3861
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3866
      if (!$$3) {
       HEAP32[1577] = HEAP32[1577] & ~(1 << $70); //@line 3873
       $$1 = $11; //@line 3874
       $$1418 = $12; //@line 3874
       break L1;
      }
     } else {
      if ((HEAP32[1580] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3881
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3889
       if (!$$3) {
        $$1 = $11; //@line 3892
        $$1418 = $12; //@line 3892
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1580] | 0; //@line 3900
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3903
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3907
    $88 = $11 + 16 | 0; //@line 3908
    $89 = HEAP32[$88 >> 2] | 0; //@line 3909
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3915
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3919
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3921
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3927
    if (!$95) {
     $$1 = $11; //@line 3930
     $$1418 = $12; //@line 3930
    } else {
     if ((HEAP32[1580] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3935
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3939
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3941
      $$1 = $11; //@line 3942
      $$1418 = $12; //@line 3942
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3948
   $$1418 = $1; //@line 3948
  }
 } while (0);
 $108 = HEAP32[1580] | 0; //@line 3951
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3954
 }
 $110 = $2 + 4 | 0; //@line 3957
 $111 = HEAP32[$110 >> 2] | 0; //@line 3958
 if (!($111 & 2)) {
  if ((HEAP32[1582] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1579] | 0) + $$1418 | 0; //@line 3966
   HEAP32[1579] = $117; //@line 3967
   HEAP32[1582] = $$1; //@line 3968
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3971
   if (($$1 | 0) != (HEAP32[1581] | 0)) {
    return;
   }
   HEAP32[1581] = 0; //@line 3977
   HEAP32[1578] = 0; //@line 3978
   return;
  }
  if ((HEAP32[1581] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1578] | 0) + $$1418 | 0; //@line 3985
   HEAP32[1578] = $125; //@line 3986
   HEAP32[1581] = $$1; //@line 3987
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3990
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3992
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3996
  $131 = $111 >>> 3; //@line 3997
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 4002
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 4004
    $138 = 6344 + ($131 << 1 << 2) | 0; //@line 4006
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 4011
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 4018
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1576] = HEAP32[1576] & ~(1 << $131); //@line 4028
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 4034
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4038
     }
     $151 = $136 + 8 | 0; //@line 4041
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4045
     } else {
      _abort(); //@line 4047
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4052
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4053
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4056
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4058
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4062
      $170 = $169 + 4 | 0; //@line 4063
      $171 = HEAP32[$170 >> 2] | 0; //@line 4064
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4067
       if (!$173) {
        $$3435 = 0; //@line 4070
        break;
       } else {
        $$1433 = $173; //@line 4073
        $$1437 = $169; //@line 4073
       }
      } else {
       $$1433 = $171; //@line 4076
       $$1437 = $170; //@line 4076
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4079
       $176 = HEAP32[$175 >> 2] | 0; //@line 4080
       if ($176 | 0) {
        $$1433 = $176; //@line 4083
        $$1437 = $175; //@line 4083
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4086
       $179 = HEAP32[$178 >> 2] | 0; //@line 4087
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4092
        $$1437 = $178; //@line 4092
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4097
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4100
       $$3435 = $$1433; //@line 4101
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4106
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4109
      }
      $163 = $161 + 12 | 0; //@line 4112
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4116
      }
      $166 = $158 + 8 | 0; //@line 4119
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4123
       HEAP32[$166 >> 2] = $161; //@line 4124
       $$3435 = $158; //@line 4125
       break;
      } else {
       _abort(); //@line 4128
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4136
     $185 = 6608 + ($184 << 2) | 0; //@line 4137
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4142
       if (!$$3435) {
        HEAP32[1577] = HEAP32[1577] & ~(1 << $184); //@line 4149
        break L96;
       }
      } else {
       if ((HEAP32[1580] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4156
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4164
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1580] | 0; //@line 4174
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4177
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4181
     $202 = $2 + 16 | 0; //@line 4182
     $203 = HEAP32[$202 >> 2] | 0; //@line 4183
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4189
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4193
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4195
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4201
     if ($209 | 0) {
      if ((HEAP32[1580] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4207
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4211
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4213
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4222
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4224
  if (($$1 | 0) == (HEAP32[1581] | 0)) {
   HEAP32[1578] = $130; //@line 4228
   return;
  } else {
   $$2 = $130; //@line 4231
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4235
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4238
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4240
  $$2 = $$1418; //@line 4241
 }
 $224 = $$2 >>> 3; //@line 4243
 if ($$2 >>> 0 < 256) {
  $227 = 6344 + ($224 << 1 << 2) | 0; //@line 4247
  $228 = HEAP32[1576] | 0; //@line 4248
  $229 = 1 << $224; //@line 4249
  if (!($228 & $229)) {
   HEAP32[1576] = $228 | $229; //@line 4254
   $$0438 = $227; //@line 4256
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4256
  } else {
   $233 = $227 + 8 | 0; //@line 4258
   $234 = HEAP32[$233 >> 2] | 0; //@line 4259
   if ((HEAP32[1580] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4263
   } else {
    $$0438 = $234; //@line 4266
    $$pre$phiZ2D = $233; //@line 4266
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4269
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4271
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4273
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4275
  return;
 }
 $240 = $$2 >>> 8; //@line 4278
 if (!$240) {
  $$0431 = 0; //@line 4281
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4285
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4289
   $246 = $240 << $245; //@line 4290
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4293
   $251 = $246 << $249; //@line 4295
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4298
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4303
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4309
  }
 }
 $265 = 6608 + ($$0431 << 2) | 0; //@line 4312
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4314
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4317
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4318
 $269 = HEAP32[1577] | 0; //@line 4319
 $270 = 1 << $$0431; //@line 4320
 if (!($269 & $270)) {
  HEAP32[1577] = $269 | $270; //@line 4325
  HEAP32[$265 >> 2] = $$1; //@line 4326
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4328
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4330
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4332
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4341
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4341
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4348
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4352
  $290 = HEAP32[$288 >> 2] | 0; //@line 4354
  if (!$290) {
   label = 118; //@line 4357
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4360
   $$0420 = $290; //@line 4360
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1580] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4367
  }
  HEAP32[$288 >> 2] = $$1; //@line 4370
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4372
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4374
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4376
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4380
  $298 = HEAP32[$297 >> 2] | 0; //@line 4381
  $299 = HEAP32[1580] | 0; //@line 4382
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4387
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4391
  HEAP32[$297 >> 2] = $$1; //@line 4392
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4394
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4396
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4398
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6964
   $289 = 0; //@line 6965
   $290 = 0; //@line 6965
  } else {
   $6 = $0 + 4 | 0; //@line 6967
   $7 = $0 + 100 | 0; //@line 6968
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6970
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6975
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6978
    } else {
     $16 = ___shgetc($0) | 0; //@line 6981
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6993
      $21 = HEAP32[$6 >> 2] | 0; //@line 6994
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6999
       $$0157 = $20; //@line 7002
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 7002
       break L11;
      } else {
       $$0157 = $20; //@line 7006
       $$0159 = ___shgetc($0) | 0; //@line 7006
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 7012
      $$0159 = $16; //@line 7012
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 7016
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 7023
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 7028
      $40 = HEAPU8[$32 >> 0] | 0; //@line 7031
     } else {
      $40 = ___shgetc($0) | 0; //@line 7034
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 7040
       $$1165167 = 8; //@line 7040
       label = 46; //@line 7041
       break;
      } else {
       $$1160 = $40; //@line 7044
       $$1165 = $1; //@line 7044
       label = 32; //@line 7045
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 7049
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 7054
      $50 = HEAPU8[$42 >> 0] | 0; //@line 7057
     } else {
      $50 = ___shgetc($0) | 0; //@line 7060
     }
     if ((HEAPU8[2948 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 7067
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7071
      }
      if (!$2) {
       ___shlim($0, 0); //@line 7075
       $289 = 0; //@line 7076
       $290 = 0; //@line 7076
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 7080
       $290 = 0; //@line 7080
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7085
      $289 = 0; //@line 7086
      $290 = 0; //@line 7086
      break L1;
     } else {
      $$1160169 = $50; //@line 7089
      $$1165167 = 16; //@line 7089
      label = 46; //@line 7090
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 7093
     if ($$166 >>> 0 > (HEAPU8[2948 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 7099
      $$1165 = $$166; //@line 7099
      label = 32; //@line 7100
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7107
      }
      ___shlim($0, 0); //@line 7109
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7111
      $289 = 0; //@line 7112
      $290 = 0; //@line 7112
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7121
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7124
       $74 = $70; //@line 7124
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7127
        $75 = HEAP32[$6 >> 2] | 0; //@line 7128
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7133
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7136
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7139
        }
        $74 = $$2161$be + -48 | 0; //@line 7141
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7151
       $291 = $$0154222; //@line 7151
       $292 = 0; //@line 7151
      } else {
       $$2161$lcssa = $$1160; //@line 7153
       $291 = 0; //@line 7153
       $292 = 0; //@line 7153
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7155
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7158
       $88 = $291; //@line 7158
       $89 = $292; //@line 7158
       $93 = $86; //@line 7158
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7160
        $91 = tempRet0; //@line 7161
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7163
        $96 = ~$94; //@line 7165
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7172
         $$8 = $$3162215; //@line 7172
         $293 = $88; //@line 7172
         $294 = $89; //@line 7172
         label = 72; //@line 7173
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7176
        $89 = tempRet0; //@line 7177
        $104 = HEAP32[$6 >> 2] | 0; //@line 7178
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7183
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7186
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7189
        }
        $93 = $$3162$be + -48 | 0; //@line 7191
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7200
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7207
        $263 = $89; //@line 7207
        $265 = $88; //@line 7207
       } else {
        $$1165168 = 10; //@line 7209
        $$8 = $$3162$be; //@line 7209
        $293 = $88; //@line 7209
        $294 = $89; //@line 7209
        label = 72; //@line 7210
       }
      } else {
       $$1158 = $$0157; //@line 7213
       $263 = $292; //@line 7213
       $265 = $291; //@line 7213
      }
     } else {
      $$1160169 = $$1160; //@line 7216
      $$1165167 = $$1165; //@line 7216
      label = 46; //@line 7217
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[3204 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7232
      $133 = HEAP8[2948 + $$1160169 >> 0] | 0; //@line 7234
      $134 = $133 & 255; //@line 7235
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7238
       $138 = $134; //@line 7238
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7241
        $139 = HEAP32[$6 >> 2] | 0; //@line 7242
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7247
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7250
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7253
        }
        $147 = HEAP8[2948 + $$4163$be >> 0] | 0; //@line 7256
        $138 = $147 & 255; //@line 7257
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7267
       $155 = $147; //@line 7267
       $158 = 0; //@line 7267
       $160 = $$1155192; //@line 7267
      } else {
       $$4163$lcssa = $$1160169; //@line 7269
       $155 = $133; //@line 7269
       $158 = 0; //@line 7269
       $160 = 0; //@line 7269
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7271
      $153 = tempRet0; //@line 7272
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7282
       $$8 = $$4163$lcssa; //@line 7282
       $293 = $160; //@line 7282
       $294 = $158; //@line 7282
       label = 72; //@line 7283
       break;
      } else {
       $164 = $160; //@line 7286
       $165 = $158; //@line 7286
       $169 = $155; //@line 7286
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7289
       $167 = tempRet0; //@line 7290
       $170 = $166 | $169 & 255; //@line 7292
       $171 = HEAP32[$6 >> 2] | 0; //@line 7293
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7298
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7301
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7304
       }
       $169 = HEAP8[2948 + $$5$be >> 0] | 0; //@line 7307
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7317
        $$8 = $$5$be; //@line 7317
        $293 = $170; //@line 7317
        $294 = $167; //@line 7317
        label = 72; //@line 7318
        break L63;
       } else {
        $164 = $170; //@line 7321
        $165 = $167; //@line 7321
       }
      }
     }
     $123 = HEAP8[2948 + $$1160169 >> 0] | 0; //@line 7326
     $124 = $123 & 255; //@line 7327
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7330
      $189 = $124; //@line 7330
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7333
       $190 = HEAP32[$6 >> 2] | 0; //@line 7334
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7339
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7342
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7345
       }
       $198 = HEAP8[2948 + $$6$be >> 0] | 0; //@line 7348
       $189 = $198 & 255; //@line 7349
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7359
      $204 = $198; //@line 7359
      $295 = $$2156210; //@line 7359
      $296 = 0; //@line 7359
     } else {
      $$6$lcssa = $$1160169; //@line 7361
      $204 = $123; //@line 7361
      $295 = 0; //@line 7361
      $296 = 0; //@line 7361
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7366
      $207 = tempRet0; //@line 7367
      $$7198 = $$6$lcssa; //@line 7368
      $209 = $296; //@line 7368
      $211 = $295; //@line 7368
      $218 = $204; //@line 7368
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7376
        $$8 = $$7198; //@line 7376
        $293 = $211; //@line 7376
        $294 = $209; //@line 7376
        label = 72; //@line 7377
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7380
       $216 = tempRet0; //@line 7381
       $217 = $218 & 255; //@line 7382
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7390
        $$8 = $$7198; //@line 7390
        $293 = $211; //@line 7390
        $294 = $209; //@line 7390
        label = 72; //@line 7391
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7394
       $226 = tempRet0; //@line 7395
       $227 = HEAP32[$6 >> 2] | 0; //@line 7396
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7401
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7404
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7407
       }
       $218 = HEAP8[2948 + $$7$be >> 0] | 0; //@line 7410
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7416
        $$8 = $$7$be; //@line 7416
        $293 = $225; //@line 7416
        $294 = $226; //@line 7416
        label = 72; //@line 7417
        break;
       } else {
        $$7198 = $$7$be; //@line 7414
        $209 = $226; //@line 7414
        $211 = $225; //@line 7414
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7422
      $$8 = $$6$lcssa; //@line 7422
      $293 = $295; //@line 7422
      $294 = $296; //@line 7422
      label = 72; //@line 7423
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[2948 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7434
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7439
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7442
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7445
      }
     } while ($$1165168 >>> 0 > (HEAPU8[2948 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7456
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7462
     $263 = $4; //@line 7462
     $265 = $3; //@line 7462
    } else {
     $$1158 = $$0157; //@line 7464
     $263 = $294; //@line 7464
     $265 = $293; //@line 7464
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7472
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7488
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7489
     $289 = tempRet0; //@line 7491
     $290 = $275; //@line 7491
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7501
     $289 = $4; //@line 7502
     $290 = $3; //@line 7502
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7507
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7510
   $289 = tempRet0; //@line 7512
   $290 = $287; //@line 7512
  }
 } while (0);
 tempRet0 = $289; //@line 7515
 return $290 | 0; //@line 7516
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_30($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$1 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $101 = 0, $109 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $56 = 0, $6 = 0, $62 = 0, $69 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $85 = 0, $86 = 0, $90 = 0, $93 = 0, $95 = 0, $96 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18768
 STACKTOP = STACKTOP + 32 | 0; //@line 18769
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18769
 $$byval_copy = sp; //@line 18770
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18772
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18774
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18776
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18778
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18780
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18782
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18784
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18786
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18788
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18790
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18792
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18794
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18796
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18798
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18800
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18802
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 18804
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18806
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18808
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18810
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$12 >> 0] = 0; //@line 18813
  HEAP8[$14 >> 0] = 1; //@line 18814
  HEAP8[$16 >> 0] = 1; //@line 18815
  HEAP8[$18 >> 0] = 0; //@line 18816
  HEAP8[$20 >> 0] = 0; //@line 18817
  HEAP8[$22 >> 0] = 1; //@line 18818
  HEAP8[$24 >> 0] = 0; //@line 18819
  HEAP8[$24 + 1 >> 0] = 0; //@line 18819
  HEAP8[$24 + 2 >> 0] = 0; //@line 18819
  HEAP8[$24 + 3 >> 0] = 0; //@line 18819
  HEAP8[$24 + 4 >> 0] = 0; //@line 18819
  HEAP8[$24 + 5 >> 0] = 0; //@line 18819
  if (!(HEAP8[$4 >> 0] | 0)) {
   $223 = $2; //@line 18823
  } else {
   $$019$i$1 = $4; //@line 18825
   $211 = $2; //@line 18825
   while (1) {
    $208 = _strcspn($$019$i$1, 3745) | 0; //@line 18827
    $210 = $211 + 1 | 0; //@line 18829
    HEAP8[$211 >> 0] = $208; //@line 18830
    $212 = $208 & 255; //@line 18831
    _memcpy($210 | 0, $$019$i$1 | 0, $212 | 0) | 0; //@line 18832
    $213 = $210 + $212 | 0; //@line 18833
    $$019$i$1 = $$019$i$1 + ($208 + ((HEAP8[$$019$i$1 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 18839
    if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
     $223 = $213; //@line 18843
     break;
    } else {
     $211 = $213; //@line 18846
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 18851
  HEAP8[$223 + 1 >> 0] = 0; //@line 18853
  HEAP8[$223 + 2 >> 0] = $34; //@line 18855
  HEAP8[$223 + 3 >> 0] = 0; //@line 18857
  HEAP8[$223 + 4 >> 0] = 1; //@line 18858
  HEAP32[$$byval_copy >> 2] = HEAP32[119]; //@line 18859
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[120]; //@line 18859
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[121]; //@line 18859
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[122]; //@line 18859
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[123]; //@line 18859
  __ZN13SocketAddressC2E10nsapi_addrt($36, $$byval_copy, 53); //@line 18860
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(80) | 0; //@line 18864
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($30, $36, $12, $223 + 5 - $38 | 0) | 0; //@line 18865
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 18868
   $231 = $ReallocAsyncCtx9 + 4 | 0; //@line 18869
   HEAP32[$231 >> 2] = $2; //@line 18870
   $232 = $ReallocAsyncCtx9 + 8 | 0; //@line 18871
   HEAP32[$232 >> 2] = $4; //@line 18872
   $233 = $ReallocAsyncCtx9 + 12 | 0; //@line 18873
   HEAP32[$233 >> 2] = $6; //@line 18874
   $234 = $ReallocAsyncCtx9 + 16 | 0; //@line 18875
   HEAP32[$234 >> 2] = $8; //@line 18876
   $235 = $ReallocAsyncCtx9 + 20 | 0; //@line 18877
   HEAP32[$235 >> 2] = $10; //@line 18878
   $236 = $ReallocAsyncCtx9 + 24 | 0; //@line 18879
   HEAP32[$236 >> 2] = $12; //@line 18880
   $237 = $ReallocAsyncCtx9 + 28 | 0; //@line 18881
   HEAP32[$237 >> 2] = $14; //@line 18882
   $238 = $ReallocAsyncCtx9 + 32 | 0; //@line 18883
   HEAP32[$238 >> 2] = $16; //@line 18884
   $239 = $ReallocAsyncCtx9 + 36 | 0; //@line 18885
   HEAP32[$239 >> 2] = $18; //@line 18886
   $240 = $ReallocAsyncCtx9 + 40 | 0; //@line 18887
   HEAP32[$240 >> 2] = $20; //@line 18888
   $241 = $ReallocAsyncCtx9 + 44 | 0; //@line 18889
   HEAP32[$241 >> 2] = $22; //@line 18890
   $242 = $ReallocAsyncCtx9 + 48 | 0; //@line 18891
   HEAP32[$242 >> 2] = $24; //@line 18892
   $243 = $ReallocAsyncCtx9 + 52 | 0; //@line 18893
   HEAP32[$243 >> 2] = $26; //@line 18894
   $244 = $ReallocAsyncCtx9 + 56 | 0; //@line 18895
   HEAP32[$244 >> 2] = $28; //@line 18896
   $245 = $ReallocAsyncCtx9 + 60 | 0; //@line 18897
   HEAP32[$245 >> 2] = $30; //@line 18898
   $246 = $ReallocAsyncCtx9 + 64 | 0; //@line 18899
   HEAP32[$246 >> 2] = $32; //@line 18900
   $247 = $ReallocAsyncCtx9 + 68 | 0; //@line 18901
   HEAP8[$247 >> 0] = $34; //@line 18902
   $248 = $ReallocAsyncCtx9 + 72 | 0; //@line 18903
   HEAP32[$248 >> 2] = $36; //@line 18904
   $249 = $ReallocAsyncCtx9 + 76 | 0; //@line 18905
   HEAP32[$249 >> 2] = $38; //@line 18906
   sp = STACKTOP; //@line 18907
   STACKTOP = sp; //@line 18908
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 18911
  ___async_unwind = 0; //@line 18912
  HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 18913
  $231 = $ReallocAsyncCtx9 + 4 | 0; //@line 18914
  HEAP32[$231 >> 2] = $2; //@line 18915
  $232 = $ReallocAsyncCtx9 + 8 | 0; //@line 18916
  HEAP32[$232 >> 2] = $4; //@line 18917
  $233 = $ReallocAsyncCtx9 + 12 | 0; //@line 18918
  HEAP32[$233 >> 2] = $6; //@line 18919
  $234 = $ReallocAsyncCtx9 + 16 | 0; //@line 18920
  HEAP32[$234 >> 2] = $8; //@line 18921
  $235 = $ReallocAsyncCtx9 + 20 | 0; //@line 18922
  HEAP32[$235 >> 2] = $10; //@line 18923
  $236 = $ReallocAsyncCtx9 + 24 | 0; //@line 18924
  HEAP32[$236 >> 2] = $12; //@line 18925
  $237 = $ReallocAsyncCtx9 + 28 | 0; //@line 18926
  HEAP32[$237 >> 2] = $14; //@line 18927
  $238 = $ReallocAsyncCtx9 + 32 | 0; //@line 18928
  HEAP32[$238 >> 2] = $16; //@line 18929
  $239 = $ReallocAsyncCtx9 + 36 | 0; //@line 18930
  HEAP32[$239 >> 2] = $18; //@line 18931
  $240 = $ReallocAsyncCtx9 + 40 | 0; //@line 18932
  HEAP32[$240 >> 2] = $20; //@line 18933
  $241 = $ReallocAsyncCtx9 + 44 | 0; //@line 18934
  HEAP32[$241 >> 2] = $22; //@line 18935
  $242 = $ReallocAsyncCtx9 + 48 | 0; //@line 18936
  HEAP32[$242 >> 2] = $24; //@line 18937
  $243 = $ReallocAsyncCtx9 + 52 | 0; //@line 18938
  HEAP32[$243 >> 2] = $26; //@line 18939
  $244 = $ReallocAsyncCtx9 + 56 | 0; //@line 18940
  HEAP32[$244 >> 2] = $28; //@line 18941
  $245 = $ReallocAsyncCtx9 + 60 | 0; //@line 18942
  HEAP32[$245 >> 2] = $30; //@line 18943
  $246 = $ReallocAsyncCtx9 + 64 | 0; //@line 18944
  HEAP32[$246 >> 2] = $32; //@line 18945
  $247 = $ReallocAsyncCtx9 + 68 | 0; //@line 18946
  HEAP8[$247 >> 0] = $34; //@line 18947
  $248 = $ReallocAsyncCtx9 + 72 | 0; //@line 18948
  HEAP32[$248 >> 2] = $36; //@line 18949
  $249 = $ReallocAsyncCtx9 + 76 | 0; //@line 18950
  HEAP32[$249 >> 2] = $38; //@line 18951
  sp = STACKTOP; //@line 18952
  STACKTOP = sp; //@line 18953
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 18957
 } else {
  $56 = HEAPU8[$20 >> 0] << 8 | HEAPU8[$22 >> 0]; //@line 18973
  $62 = HEAPU8[$24 >> 0] << 8 | HEAPU8[$26 >> 0]; //@line 18979
  if (((HEAP8[$16 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$12 >> 0] << 8 | HEAPU8[$14 >> 0] | 0) == 1 : 0) & (HEAP8[$18 >> 0] & 15) == 0) {
   if (!$56) {
    $251 = $2; //@line 18989
   } else {
    $$093119$i = 0; //@line 18991
    $70 = $2; //@line 18991
    while (1) {
     $69 = HEAP8[$70 >> 0] | 0; //@line 18993
     if (!($69 << 24 >> 24)) {
      $$lcssa$i = $70; //@line 18996
     } else {
      $75 = $70; //@line 18998
      $77 = $69; //@line 18998
      while (1) {
       $78 = $75 + 1 + ($77 & 255) | 0; //@line 19002
       $77 = HEAP8[$78 >> 0] | 0; //@line 19003
       if (!($77 << 24 >> 24)) {
        $$lcssa$i = $78; //@line 19006
        break;
       } else {
        $75 = $78; //@line 19009
       }
      }
     }
     $81 = $$lcssa$i + 5 | 0; //@line 19013
     $$093119$i = $$093119$i + 1 | 0; //@line 19014
     if (($$093119$i | 0) >= ($56 | 0)) {
      $251 = $81; //@line 19019
      break;
     } else {
      $70 = $81; //@line 19017
     }
    }
   }
   if (($6 | 0) != 0 & ($62 | 0) != 0) {
    $$090117$i = $8; //@line 19028
    $$094116$i = 0; //@line 19028
    $$095115$i = 0; //@line 19028
    $85 = $251; //@line 19028
    while (1) {
     $86 = HEAP8[$85 >> 0] | 0; //@line 19031
     do {
      if (!($86 << 24 >> 24)) {
       $101 = $85 + 1 | 0; //@line 19035
      } else {
       $90 = $86 & 255; //@line 19038
       $93 = $85; //@line 19038
       while (1) {
        if ($90 & 192 | 0) {
         label = 13; //@line 19043
         break;
        }
        $95 = $93 + 1 + $90 | 0; //@line 19047
        $96 = HEAP8[$95 >> 0] | 0; //@line 19048
        if (!($96 << 24 >> 24)) {
         label = 15; //@line 19052
         break;
        } else {
         $90 = $96 & 255; //@line 19055
         $93 = $95; //@line 19055
        }
       }
       if ((label | 0) == 13) {
        label = 0; //@line 19059
        $101 = $93 + 2 | 0; //@line 19061
        break;
       } else if ((label | 0) == 15) {
        label = 0; //@line 19065
        $101 = $95 + 1 | 0; //@line 19067
        break;
       }
      }
     } while (0);
     $109 = (HEAPU8[$101 >> 0] << 8 | HEAPU8[$101 + 1 >> 0]) & 65535; //@line 19080
     $120 = $101 + 10 | 0; //@line 19091
     $125 = HEAPU8[$101 + 8 >> 0] << 8 | HEAPU8[$101 + 9 >> 0]; //@line 19096
     $126 = $125 & 65535; //@line 19097
     $128 = (HEAPU8[$101 + 2 >> 0] << 8 | HEAPU8[$101 + 3 >> 0] | 0) == 1; //@line 19099
     do {
      if ($109 << 16 >> 16 == 1 & $128 & $126 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 19105
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$120 >> 0] | 0; //@line 19109
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$101 + 11 >> 0] | 0; //@line 19113
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$101 + 12 >> 0] | 0; //@line 19117
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$101 + 13 >> 0] | 0; //@line 19121
       $$0 = $101 + 14 | 0; //@line 19124
       $$1$i = $$090117$i + 20 | 0; //@line 19124
       $$196$i = $$095115$i + 1 | 0; //@line 19124
      } else {
       if ($109 << 16 >> 16 == 28 & $128 & $126 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 19131
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$120 >> 0] | 0; //@line 19135
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$101 + 11 >> 0] | 0; //@line 19139
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$101 + 12 >> 0] | 0; //@line 19143
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$101 + 13 >> 0] | 0; //@line 19147
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$101 + 14 >> 0] | 0; //@line 19151
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$101 + 15 >> 0] | 0; //@line 19155
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$101 + 16 >> 0] | 0; //@line 19159
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$101 + 17 >> 0] | 0; //@line 19163
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$101 + 18 >> 0] | 0; //@line 19167
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$101 + 19 >> 0] | 0; //@line 19171
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$101 + 20 >> 0] | 0; //@line 19175
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$101 + 21 >> 0] | 0; //@line 19179
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$101 + 22 >> 0] | 0; //@line 19183
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$101 + 23 >> 0] | 0; //@line 19187
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$101 + 24 >> 0] | 0; //@line 19191
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$101 + 25 >> 0] | 0; //@line 19195
        $$0 = $101 + 26 | 0; //@line 19198
        $$1$i = $$090117$i + 20 | 0; //@line 19198
        $$196$i = $$095115$i + 1 | 0; //@line 19198
        break;
       } else {
        $$0 = $120 + $125 | 0; //@line 19202
        $$1$i = $$090117$i; //@line 19202
        $$196$i = $$095115$i; //@line 19202
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 19207
     if (!(($$094116$i | 0) < ($62 | 0) & $$196$i >>> 0 < $6 >>> 0)) {
      $$089$i = $$196$i; //@line 19214
      break;
     } else {
      $$090117$i = $$1$i; //@line 19212
      $$095115$i = $$196$i; //@line 19212
      $85 = $$0; //@line 19212
     }
    }
   } else {
    $$089$i = 0; //@line 19219
   }
  } else {
   $$089$i = 0; //@line 19222
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 19226
 }
 _free($12); //@line 19228
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 19229
 $203 = __ZN6Socket5closeEv($28) | 0; //@line 19230
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 19233
  $204 = $ReallocAsyncCtx12 + 4 | 0; //@line 19234
  HEAP32[$204 >> 2] = $$355; //@line 19235
  $205 = $ReallocAsyncCtx12 + 8 | 0; //@line 19236
  HEAP32[$205 >> 2] = $30; //@line 19237
  $206 = $ReallocAsyncCtx12 + 12 | 0; //@line 19238
  HEAP32[$206 >> 2] = $10; //@line 19239
  sp = STACKTOP; //@line 19240
  STACKTOP = sp; //@line 19241
  return;
 }
 HEAP32[___async_retval >> 2] = $203; //@line 19244
 ___async_unwind = 0; //@line 19245
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 19246
 $204 = $ReallocAsyncCtx12 + 4 | 0; //@line 19247
 HEAP32[$204 >> 2] = $$355; //@line 19248
 $205 = $ReallocAsyncCtx12 + 8 | 0; //@line 19249
 HEAP32[$205 >> 2] = $30; //@line 19250
 $206 = $ReallocAsyncCtx12 + 12 | 0; //@line 19251
 HEAP32[$206 >> 2] = $10; //@line 19252
 sp = STACKTOP; //@line 19253
 STACKTOP = sp; //@line 19254
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_29($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$2 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18264
 STACKTOP = STACKTOP + 32 | 0; //@line 18265
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18265
 $$byval_copy = sp; //@line 18266
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18268
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18270
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18272
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18274
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18276
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18278
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18280
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18282
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18284
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18286
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18288
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18290
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18292
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18294
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18296
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18298
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 18300
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18302
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18304
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18306
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$12 >> 0] = 0; //@line 18309
  HEAP8[$14 >> 0] = 1; //@line 18310
  HEAP8[$16 >> 0] = 1; //@line 18311
  HEAP8[$18 >> 0] = 0; //@line 18312
  HEAP8[$20 >> 0] = 0; //@line 18313
  HEAP8[$22 >> 0] = 1; //@line 18314
  HEAP8[$24 >> 0] = 0; //@line 18315
  HEAP8[$24 + 1 >> 0] = 0; //@line 18315
  HEAP8[$24 + 2 >> 0] = 0; //@line 18315
  HEAP8[$24 + 3 >> 0] = 0; //@line 18315
  HEAP8[$24 + 4 >> 0] = 0; //@line 18315
  HEAP8[$24 + 5 >> 0] = 0; //@line 18315
  if (!(HEAP8[$4 >> 0] | 0)) {
   $223 = $2; //@line 18319
  } else {
   $$019$i$2 = $4; //@line 18321
   $211 = $2; //@line 18321
   while (1) {
    $208 = _strcspn($$019$i$2, 3745) | 0; //@line 18323
    $210 = $211 + 1 | 0; //@line 18325
    HEAP8[$211 >> 0] = $208; //@line 18326
    $212 = $208 & 255; //@line 18327
    _memcpy($210 | 0, $$019$i$2 | 0, $212 | 0) | 0; //@line 18328
    $213 = $210 + $212 | 0; //@line 18329
    $$019$i$2 = $$019$i$2 + ($208 + ((HEAP8[$$019$i$2 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 18335
    if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
     $223 = $213; //@line 18339
     break;
    } else {
     $211 = $213; //@line 18342
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 18347
  HEAP8[$223 + 1 >> 0] = 0; //@line 18349
  HEAP8[$223 + 2 >> 0] = $34; //@line 18351
  HEAP8[$223 + 3 >> 0] = 0; //@line 18353
  HEAP8[$223 + 4 >> 0] = 1; //@line 18354
  HEAP32[$$byval_copy >> 2] = HEAP32[124]; //@line 18355
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[125]; //@line 18355
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[126]; //@line 18355
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[127]; //@line 18355
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[128]; //@line 18355
  __ZN13SocketAddressC2E10nsapi_addrt($36, $$byval_copy, 53); //@line 18356
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(80) | 0; //@line 18360
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($30, $36, $12, $223 + 5 - $38 | 0) | 0; //@line 18361
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 18364
   $231 = $ReallocAsyncCtx8 + 4 | 0; //@line 18365
   HEAP32[$231 >> 2] = $2; //@line 18366
   $232 = $ReallocAsyncCtx8 + 8 | 0; //@line 18367
   HEAP32[$232 >> 2] = $6; //@line 18368
   $233 = $ReallocAsyncCtx8 + 12 | 0; //@line 18369
   HEAP32[$233 >> 2] = $8; //@line 18370
   $234 = $ReallocAsyncCtx8 + 16 | 0; //@line 18371
   HEAP32[$234 >> 2] = $10; //@line 18372
   $235 = $ReallocAsyncCtx8 + 20 | 0; //@line 18373
   HEAP32[$235 >> 2] = $12; //@line 18374
   $236 = $ReallocAsyncCtx8 + 24 | 0; //@line 18375
   HEAP32[$236 >> 2] = $14; //@line 18376
   $237 = $ReallocAsyncCtx8 + 28 | 0; //@line 18377
   HEAP32[$237 >> 2] = $16; //@line 18378
   $238 = $ReallocAsyncCtx8 + 32 | 0; //@line 18379
   HEAP32[$238 >> 2] = $18; //@line 18380
   $239 = $ReallocAsyncCtx8 + 36 | 0; //@line 18381
   HEAP32[$239 >> 2] = $20; //@line 18382
   $240 = $ReallocAsyncCtx8 + 40 | 0; //@line 18383
   HEAP32[$240 >> 2] = $22; //@line 18384
   $241 = $ReallocAsyncCtx8 + 44 | 0; //@line 18385
   HEAP32[$241 >> 2] = $24; //@line 18386
   $242 = $ReallocAsyncCtx8 + 48 | 0; //@line 18387
   HEAP32[$242 >> 2] = $26; //@line 18388
   $243 = $ReallocAsyncCtx8 + 52 | 0; //@line 18389
   HEAP32[$243 >> 2] = $28; //@line 18390
   $244 = $ReallocAsyncCtx8 + 56 | 0; //@line 18391
   HEAP32[$244 >> 2] = $30; //@line 18392
   $245 = $ReallocAsyncCtx8 + 60 | 0; //@line 18393
   HEAP32[$245 >> 2] = $4; //@line 18394
   $246 = $ReallocAsyncCtx8 + 64 | 0; //@line 18395
   HEAP32[$246 >> 2] = $32; //@line 18396
   $247 = $ReallocAsyncCtx8 + 68 | 0; //@line 18397
   HEAP8[$247 >> 0] = $34; //@line 18398
   $248 = $ReallocAsyncCtx8 + 72 | 0; //@line 18399
   HEAP32[$248 >> 2] = $36; //@line 18400
   $249 = $ReallocAsyncCtx8 + 76 | 0; //@line 18401
   HEAP32[$249 >> 2] = $38; //@line 18402
   sp = STACKTOP; //@line 18403
   STACKTOP = sp; //@line 18404
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 18407
  ___async_unwind = 0; //@line 18408
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 18409
  $231 = $ReallocAsyncCtx8 + 4 | 0; //@line 18410
  HEAP32[$231 >> 2] = $2; //@line 18411
  $232 = $ReallocAsyncCtx8 + 8 | 0; //@line 18412
  HEAP32[$232 >> 2] = $6; //@line 18413
  $233 = $ReallocAsyncCtx8 + 12 | 0; //@line 18414
  HEAP32[$233 >> 2] = $8; //@line 18415
  $234 = $ReallocAsyncCtx8 + 16 | 0; //@line 18416
  HEAP32[$234 >> 2] = $10; //@line 18417
  $235 = $ReallocAsyncCtx8 + 20 | 0; //@line 18418
  HEAP32[$235 >> 2] = $12; //@line 18419
  $236 = $ReallocAsyncCtx8 + 24 | 0; //@line 18420
  HEAP32[$236 >> 2] = $14; //@line 18421
  $237 = $ReallocAsyncCtx8 + 28 | 0; //@line 18422
  HEAP32[$237 >> 2] = $16; //@line 18423
  $238 = $ReallocAsyncCtx8 + 32 | 0; //@line 18424
  HEAP32[$238 >> 2] = $18; //@line 18425
  $239 = $ReallocAsyncCtx8 + 36 | 0; //@line 18426
  HEAP32[$239 >> 2] = $20; //@line 18427
  $240 = $ReallocAsyncCtx8 + 40 | 0; //@line 18428
  HEAP32[$240 >> 2] = $22; //@line 18429
  $241 = $ReallocAsyncCtx8 + 44 | 0; //@line 18430
  HEAP32[$241 >> 2] = $24; //@line 18431
  $242 = $ReallocAsyncCtx8 + 48 | 0; //@line 18432
  HEAP32[$242 >> 2] = $26; //@line 18433
  $243 = $ReallocAsyncCtx8 + 52 | 0; //@line 18434
  HEAP32[$243 >> 2] = $28; //@line 18435
  $244 = $ReallocAsyncCtx8 + 56 | 0; //@line 18436
  HEAP32[$244 >> 2] = $30; //@line 18437
  $245 = $ReallocAsyncCtx8 + 60 | 0; //@line 18438
  HEAP32[$245 >> 2] = $4; //@line 18439
  $246 = $ReallocAsyncCtx8 + 64 | 0; //@line 18440
  HEAP32[$246 >> 2] = $32; //@line 18441
  $247 = $ReallocAsyncCtx8 + 68 | 0; //@line 18442
  HEAP8[$247 >> 0] = $34; //@line 18443
  $248 = $ReallocAsyncCtx8 + 72 | 0; //@line 18444
  HEAP32[$248 >> 2] = $36; //@line 18445
  $249 = $ReallocAsyncCtx8 + 76 | 0; //@line 18446
  HEAP32[$249 >> 2] = $38; //@line 18447
  sp = STACKTOP; //@line 18448
  STACKTOP = sp; //@line 18449
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 18453
 } else {
  $55 = HEAPU8[$20 >> 0] << 8 | HEAPU8[$22 >> 0]; //@line 18469
  $61 = HEAPU8[$24 >> 0] << 8 | HEAPU8[$26 >> 0]; //@line 18475
  if (((HEAP8[$16 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$12 >> 0] << 8 | HEAPU8[$14 >> 0] | 0) == 1 : 0) & (HEAP8[$18 >> 0] & 15) == 0) {
   if (!$55) {
    $251 = $2; //@line 18485
   } else {
    $$093119$i = 0; //@line 18487
    $69 = $2; //@line 18487
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 18489
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 18492
     } else {
      $74 = $69; //@line 18494
      $76 = $68; //@line 18494
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 18498
       $76 = HEAP8[$77 >> 0] | 0; //@line 18499
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 18502
        break;
       } else {
        $74 = $77; //@line 18505
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 18509
     $$093119$i = $$093119$i + 1 | 0; //@line 18510
     if (($$093119$i | 0) >= ($55 | 0)) {
      $251 = $80; //@line 18515
      break;
     } else {
      $69 = $80; //@line 18513
     }
    }
   }
   if (($6 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $8; //@line 18524
    $$094116$i = 0; //@line 18524
    $$095115$i = 0; //@line 18524
    $84 = $251; //@line 18524
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 18527
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 18531
      } else {
       $89 = $85 & 255; //@line 18534
       $92 = $84; //@line 18534
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 18539
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 18543
        $95 = HEAP8[$94 >> 0] | 0; //@line 18544
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 18548
         break;
        } else {
         $89 = $95 & 255; //@line 18551
         $92 = $94; //@line 18551
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 18555
        $100 = $92 + 2 | 0; //@line 18557
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 18561
        $100 = $94 + 1 | 0; //@line 18563
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 18576
     $119 = $100 + 10 | 0; //@line 18587
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 18592
     $125 = $124 & 65535; //@line 18593
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 18595
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 18601
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 18605
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 18609
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 18613
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 18617
       $$0 = $100 + 14 | 0; //@line 18620
       $$1$i = $$090117$i + 20 | 0; //@line 18620
       $$196$i = $$095115$i + 1 | 0; //@line 18620
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 18627
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 18631
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 18635
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 18639
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 18643
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 18647
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 18651
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 18655
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 18659
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 18663
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 18667
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 18671
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 18675
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 18679
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 18683
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 18687
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 18691
        $$0 = $100 + 26 | 0; //@line 18694
        $$1$i = $$090117$i + 20 | 0; //@line 18694
        $$196$i = $$095115$i + 1 | 0; //@line 18694
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 18698
        $$1$i = $$090117$i; //@line 18698
        $$196$i = $$095115$i; //@line 18698
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 18703
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $6 >>> 0)) {
      $$089$i = $$196$i; //@line 18710
      break;
     } else {
      $$090117$i = $$1$i; //@line 18708
      $$095115$i = $$196$i; //@line 18708
      $84 = $$0; //@line 18708
     }
    }
   } else {
    $$089$i = 0; //@line 18715
   }
  } else {
   $$089$i = 0; //@line 18718
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 18722
 }
 _free($12); //@line 18724
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 18725
 $200 = __ZN6Socket5closeEv($28) | 0; //@line 18726
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 18729
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 18730
  HEAP32[$201 >> 2] = $$355; //@line 18731
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 18732
  HEAP32[$202 >> 2] = $30; //@line 18733
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 18734
  HEAP32[$203 >> 2] = $10; //@line 18735
  sp = STACKTOP; //@line 18736
  STACKTOP = sp; //@line 18737
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 18740
 ___async_unwind = 0; //@line 18741
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 18742
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 18743
 HEAP32[$201 >> 2] = $$355; //@line 18744
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 18745
 HEAP32[$202 >> 2] = $30; //@line 18746
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 18747
 HEAP32[$203 >> 2] = $10; //@line 18748
 sp = STACKTOP; //@line 18749
 STACKTOP = sp; //@line 18750
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_28($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$3 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17760
 STACKTOP = STACKTOP + 32 | 0; //@line 17761
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17761
 $$byval_copy = sp; //@line 17762
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17764
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17766
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17768
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17770
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17772
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17774
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17776
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17778
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17780
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17782
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17784
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17786
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17788
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17790
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17792
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17794
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 17796
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17798
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17800
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17802
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$10 >> 0] = 0; //@line 17805
  HEAP8[$12 >> 0] = 1; //@line 17806
  HEAP8[$14 >> 0] = 1; //@line 17807
  HEAP8[$16 >> 0] = 0; //@line 17808
  HEAP8[$18 >> 0] = 0; //@line 17809
  HEAP8[$20 >> 0] = 1; //@line 17810
  HEAP8[$22 >> 0] = 0; //@line 17811
  HEAP8[$22 + 1 >> 0] = 0; //@line 17811
  HEAP8[$22 + 2 >> 0] = 0; //@line 17811
  HEAP8[$22 + 3 >> 0] = 0; //@line 17811
  HEAP8[$22 + 4 >> 0] = 0; //@line 17811
  HEAP8[$22 + 5 >> 0] = 0; //@line 17811
  if (!(HEAP8[$30 >> 0] | 0)) {
   $223 = $2; //@line 17815
  } else {
   $$019$i$3 = $30; //@line 17817
   $211 = $2; //@line 17817
   while (1) {
    $208 = _strcspn($$019$i$3, 3745) | 0; //@line 17819
    $210 = $211 + 1 | 0; //@line 17821
    HEAP8[$211 >> 0] = $208; //@line 17822
    $212 = $208 & 255; //@line 17823
    _memcpy($210 | 0, $$019$i$3 | 0, $212 | 0) | 0; //@line 17824
    $213 = $210 + $212 | 0; //@line 17825
    $$019$i$3 = $$019$i$3 + ($208 + ((HEAP8[$$019$i$3 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 17831
    if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
     $223 = $213; //@line 17835
     break;
    } else {
     $211 = $213; //@line 17838
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 17843
  HEAP8[$223 + 1 >> 0] = 0; //@line 17845
  HEAP8[$223 + 2 >> 0] = $34; //@line 17847
  HEAP8[$223 + 3 >> 0] = 0; //@line 17849
  HEAP8[$223 + 4 >> 0] = 1; //@line 17850
  HEAP32[$$byval_copy >> 2] = HEAP32[129]; //@line 17851
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[130]; //@line 17851
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[131]; //@line 17851
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[132]; //@line 17851
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[133]; //@line 17851
  __ZN13SocketAddressC2E10nsapi_addrt($36, $$byval_copy, 53); //@line 17852
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(80) | 0; //@line 17856
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($28, $36, $10, $223 + 5 - $38 | 0) | 0; //@line 17857
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 17860
   $231 = $ReallocAsyncCtx7 + 4 | 0; //@line 17861
   HEAP32[$231 >> 2] = $2; //@line 17862
   $232 = $ReallocAsyncCtx7 + 8 | 0; //@line 17863
   HEAP32[$232 >> 2] = $4; //@line 17864
   $233 = $ReallocAsyncCtx7 + 12 | 0; //@line 17865
   HEAP32[$233 >> 2] = $6; //@line 17866
   $234 = $ReallocAsyncCtx7 + 16 | 0; //@line 17867
   HEAP32[$234 >> 2] = $8; //@line 17868
   $235 = $ReallocAsyncCtx7 + 20 | 0; //@line 17869
   HEAP32[$235 >> 2] = $10; //@line 17870
   $236 = $ReallocAsyncCtx7 + 24 | 0; //@line 17871
   HEAP32[$236 >> 2] = $12; //@line 17872
   $237 = $ReallocAsyncCtx7 + 28 | 0; //@line 17873
   HEAP32[$237 >> 2] = $14; //@line 17874
   $238 = $ReallocAsyncCtx7 + 32 | 0; //@line 17875
   HEAP32[$238 >> 2] = $16; //@line 17876
   $239 = $ReallocAsyncCtx7 + 36 | 0; //@line 17877
   HEAP32[$239 >> 2] = $18; //@line 17878
   $240 = $ReallocAsyncCtx7 + 40 | 0; //@line 17879
   HEAP32[$240 >> 2] = $20; //@line 17880
   $241 = $ReallocAsyncCtx7 + 44 | 0; //@line 17881
   HEAP32[$241 >> 2] = $22; //@line 17882
   $242 = $ReallocAsyncCtx7 + 48 | 0; //@line 17883
   HEAP32[$242 >> 2] = $24; //@line 17884
   $243 = $ReallocAsyncCtx7 + 52 | 0; //@line 17885
   HEAP32[$243 >> 2] = $26; //@line 17886
   $244 = $ReallocAsyncCtx7 + 56 | 0; //@line 17887
   HEAP32[$244 >> 2] = $28; //@line 17888
   $245 = $ReallocAsyncCtx7 + 60 | 0; //@line 17889
   HEAP32[$245 >> 2] = $32; //@line 17890
   $246 = $ReallocAsyncCtx7 + 64 | 0; //@line 17891
   HEAP8[$246 >> 0] = $34; //@line 17892
   $247 = $ReallocAsyncCtx7 + 68 | 0; //@line 17893
   HEAP32[$247 >> 2] = $36; //@line 17894
   $248 = $ReallocAsyncCtx7 + 72 | 0; //@line 17895
   HEAP32[$248 >> 2] = $38; //@line 17896
   $249 = $ReallocAsyncCtx7 + 76 | 0; //@line 17897
   HEAP32[$249 >> 2] = $30; //@line 17898
   sp = STACKTOP; //@line 17899
   STACKTOP = sp; //@line 17900
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 17903
  ___async_unwind = 0; //@line 17904
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 17905
  $231 = $ReallocAsyncCtx7 + 4 | 0; //@line 17906
  HEAP32[$231 >> 2] = $2; //@line 17907
  $232 = $ReallocAsyncCtx7 + 8 | 0; //@line 17908
  HEAP32[$232 >> 2] = $4; //@line 17909
  $233 = $ReallocAsyncCtx7 + 12 | 0; //@line 17910
  HEAP32[$233 >> 2] = $6; //@line 17911
  $234 = $ReallocAsyncCtx7 + 16 | 0; //@line 17912
  HEAP32[$234 >> 2] = $8; //@line 17913
  $235 = $ReallocAsyncCtx7 + 20 | 0; //@line 17914
  HEAP32[$235 >> 2] = $10; //@line 17915
  $236 = $ReallocAsyncCtx7 + 24 | 0; //@line 17916
  HEAP32[$236 >> 2] = $12; //@line 17917
  $237 = $ReallocAsyncCtx7 + 28 | 0; //@line 17918
  HEAP32[$237 >> 2] = $14; //@line 17919
  $238 = $ReallocAsyncCtx7 + 32 | 0; //@line 17920
  HEAP32[$238 >> 2] = $16; //@line 17921
  $239 = $ReallocAsyncCtx7 + 36 | 0; //@line 17922
  HEAP32[$239 >> 2] = $18; //@line 17923
  $240 = $ReallocAsyncCtx7 + 40 | 0; //@line 17924
  HEAP32[$240 >> 2] = $20; //@line 17925
  $241 = $ReallocAsyncCtx7 + 44 | 0; //@line 17926
  HEAP32[$241 >> 2] = $22; //@line 17927
  $242 = $ReallocAsyncCtx7 + 48 | 0; //@line 17928
  HEAP32[$242 >> 2] = $24; //@line 17929
  $243 = $ReallocAsyncCtx7 + 52 | 0; //@line 17930
  HEAP32[$243 >> 2] = $26; //@line 17931
  $244 = $ReallocAsyncCtx7 + 56 | 0; //@line 17932
  HEAP32[$244 >> 2] = $28; //@line 17933
  $245 = $ReallocAsyncCtx7 + 60 | 0; //@line 17934
  HEAP32[$245 >> 2] = $32; //@line 17935
  $246 = $ReallocAsyncCtx7 + 64 | 0; //@line 17936
  HEAP8[$246 >> 0] = $34; //@line 17937
  $247 = $ReallocAsyncCtx7 + 68 | 0; //@line 17938
  HEAP32[$247 >> 2] = $36; //@line 17939
  $248 = $ReallocAsyncCtx7 + 72 | 0; //@line 17940
  HEAP32[$248 >> 2] = $38; //@line 17941
  $249 = $ReallocAsyncCtx7 + 76 | 0; //@line 17942
  HEAP32[$249 >> 2] = $30; //@line 17943
  sp = STACKTOP; //@line 17944
  STACKTOP = sp; //@line 17945
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 17949
 } else {
  $55 = HEAPU8[$18 >> 0] << 8 | HEAPU8[$20 >> 0]; //@line 17965
  $61 = HEAPU8[$22 >> 0] << 8 | HEAPU8[$24 >> 0]; //@line 17971
  if (((HEAP8[$14 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$10 >> 0] << 8 | HEAPU8[$12 >> 0] | 0) == 1 : 0) & (HEAP8[$16 >> 0] & 15) == 0) {
   if (!$55) {
    $251 = $2; //@line 17981
   } else {
    $$093119$i = 0; //@line 17983
    $69 = $2; //@line 17983
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 17985
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 17988
     } else {
      $74 = $69; //@line 17990
      $76 = $68; //@line 17990
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 17994
       $76 = HEAP8[$77 >> 0] | 0; //@line 17995
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 17998
        break;
       } else {
        $74 = $77; //@line 18001
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 18005
     $$093119$i = $$093119$i + 1 | 0; //@line 18006
     if (($$093119$i | 0) >= ($55 | 0)) {
      $251 = $80; //@line 18011
      break;
     } else {
      $69 = $80; //@line 18009
     }
    }
   }
   if (($4 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $6; //@line 18020
    $$094116$i = 0; //@line 18020
    $$095115$i = 0; //@line 18020
    $84 = $251; //@line 18020
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 18023
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 18027
      } else {
       $89 = $85 & 255; //@line 18030
       $92 = $84; //@line 18030
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 18035
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 18039
        $95 = HEAP8[$94 >> 0] | 0; //@line 18040
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 18044
         break;
        } else {
         $89 = $95 & 255; //@line 18047
         $92 = $94; //@line 18047
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 18051
        $100 = $92 + 2 | 0; //@line 18053
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 18057
        $100 = $94 + 1 | 0; //@line 18059
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 18072
     $119 = $100 + 10 | 0; //@line 18083
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 18088
     $125 = $124 & 65535; //@line 18089
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 18091
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 18097
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 18101
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 18105
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 18109
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 18113
       $$0 = $100 + 14 | 0; //@line 18116
       $$1$i = $$090117$i + 20 | 0; //@line 18116
       $$196$i = $$095115$i + 1 | 0; //@line 18116
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 18123
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 18127
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 18131
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 18135
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 18139
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 18143
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 18147
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 18151
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 18155
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 18159
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 18163
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 18167
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 18171
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 18175
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 18179
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 18183
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 18187
        $$0 = $100 + 26 | 0; //@line 18190
        $$1$i = $$090117$i + 20 | 0; //@line 18190
        $$196$i = $$095115$i + 1 | 0; //@line 18190
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 18194
        $$1$i = $$090117$i; //@line 18194
        $$196$i = $$095115$i; //@line 18194
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 18199
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $4 >>> 0)) {
      $$089$i = $$196$i; //@line 18206
      break;
     } else {
      $$090117$i = $$1$i; //@line 18204
      $$095115$i = $$196$i; //@line 18204
      $84 = $$0; //@line 18204
     }
    }
   } else {
    $$089$i = 0; //@line 18211
   }
  } else {
   $$089$i = 0; //@line 18214
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 18218
 }
 _free($10); //@line 18220
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 18221
 $200 = __ZN6Socket5closeEv($26) | 0; //@line 18222
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 18225
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 18226
  HEAP32[$201 >> 2] = $$355; //@line 18227
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 18228
  HEAP32[$202 >> 2] = $28; //@line 18229
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 18230
  HEAP32[$203 >> 2] = $8; //@line 18231
  sp = STACKTOP; //@line 18232
  STACKTOP = sp; //@line 18233
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 18236
 ___async_unwind = 0; //@line 18237
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 18238
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 18239
 HEAP32[$201 >> 2] = $$355; //@line 18240
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 18241
 HEAP32[$202 >> 2] = $28; //@line 18242
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 18243
 HEAP32[$203 >> 2] = $8; //@line 18244
 sp = STACKTOP; //@line 18245
 STACKTOP = sp; //@line 18246
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_27($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$4 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17272
 STACKTOP = STACKTOP + 32 | 0; //@line 17273
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17273
 $$byval_copy = sp; //@line 17274
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17276
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17280
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17282
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17284
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17286
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17288
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17290
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17292
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17294
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17296
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17298
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17300
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17302
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17304
 $32 = HEAP8[$0 + 64 >> 0] | 0; //@line 17306
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17308
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17310
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17312
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17314
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$10 >> 0] = 0; //@line 17317
  HEAP8[$12 >> 0] = 1; //@line 17318
  HEAP8[$14 >> 0] = 1; //@line 17319
  HEAP8[$16 >> 0] = 0; //@line 17320
  HEAP8[$18 >> 0] = 0; //@line 17321
  HEAP8[$20 >> 0] = 1; //@line 17322
  HEAP8[$22 >> 0] = 0; //@line 17323
  HEAP8[$22 + 1 >> 0] = 0; //@line 17323
  HEAP8[$22 + 2 >> 0] = 0; //@line 17323
  HEAP8[$22 + 3 >> 0] = 0; //@line 17323
  HEAP8[$22 + 4 >> 0] = 0; //@line 17323
  HEAP8[$22 + 5 >> 0] = 0; //@line 17323
  if (!(HEAP8[$38 >> 0] | 0)) {
   $223 = $2; //@line 17327
  } else {
   $$019$i$4 = $38; //@line 17329
   $211 = $2; //@line 17329
   while (1) {
    $208 = _strcspn($$019$i$4, 3745) | 0; //@line 17331
    $210 = $211 + 1 | 0; //@line 17333
    HEAP8[$211 >> 0] = $208; //@line 17334
    $212 = $208 & 255; //@line 17335
    _memcpy($210 | 0, $$019$i$4 | 0, $212 | 0) | 0; //@line 17336
    $213 = $210 + $212 | 0; //@line 17337
    $$019$i$4 = $$019$i$4 + ($208 + ((HEAP8[$$019$i$4 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 17343
    if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
     $223 = $213; //@line 17347
     break;
    } else {
     $211 = $213; //@line 17350
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 17355
  HEAP8[$223 + 1 >> 0] = 0; //@line 17357
  HEAP8[$223 + 2 >> 0] = $32; //@line 17359
  HEAP8[$223 + 3 >> 0] = 0; //@line 17361
  HEAP8[$223 + 4 >> 0] = 1; //@line 17362
  HEAP32[$$byval_copy >> 2] = HEAP32[134]; //@line 17363
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[135]; //@line 17363
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[136]; //@line 17363
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[137]; //@line 17363
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[138]; //@line 17363
  __ZN13SocketAddressC2E10nsapi_addrt($34, $$byval_copy, 53); //@line 17364
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 17368
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($28, $34, $10, $223 + 5 - $36 | 0) | 0; //@line 17369
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 17372
   $231 = $ReallocAsyncCtx6 + 4 | 0; //@line 17373
   HEAP32[$231 >> 2] = $2; //@line 17374
   $232 = $ReallocAsyncCtx6 + 8 | 0; //@line 17375
   HEAP32[$232 >> 2] = $4; //@line 17376
   $233 = $ReallocAsyncCtx6 + 12 | 0; //@line 17377
   HEAP32[$233 >> 2] = $6; //@line 17378
   $234 = $ReallocAsyncCtx6 + 16 | 0; //@line 17379
   HEAP32[$234 >> 2] = $8; //@line 17380
   $235 = $ReallocAsyncCtx6 + 20 | 0; //@line 17381
   HEAP32[$235 >> 2] = $10; //@line 17382
   $236 = $ReallocAsyncCtx6 + 24 | 0; //@line 17383
   HEAP32[$236 >> 2] = $12; //@line 17384
   $237 = $ReallocAsyncCtx6 + 28 | 0; //@line 17385
   HEAP32[$237 >> 2] = $14; //@line 17386
   $238 = $ReallocAsyncCtx6 + 32 | 0; //@line 17387
   HEAP32[$238 >> 2] = $16; //@line 17388
   $239 = $ReallocAsyncCtx6 + 36 | 0; //@line 17389
   HEAP32[$239 >> 2] = $18; //@line 17390
   $240 = $ReallocAsyncCtx6 + 40 | 0; //@line 17391
   HEAP32[$240 >> 2] = $20; //@line 17392
   $241 = $ReallocAsyncCtx6 + 44 | 0; //@line 17393
   HEAP32[$241 >> 2] = $22; //@line 17394
   $242 = $ReallocAsyncCtx6 + 48 | 0; //@line 17395
   HEAP32[$242 >> 2] = $24; //@line 17396
   $243 = $ReallocAsyncCtx6 + 52 | 0; //@line 17397
   HEAP32[$243 >> 2] = $26; //@line 17398
   $244 = $ReallocAsyncCtx6 + 56 | 0; //@line 17399
   HEAP32[$244 >> 2] = $28; //@line 17400
   $245 = $ReallocAsyncCtx6 + 60 | 0; //@line 17401
   HEAP32[$245 >> 2] = $30; //@line 17402
   sp = STACKTOP; //@line 17403
   STACKTOP = sp; //@line 17404
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 17407
  ___async_unwind = 0; //@line 17408
  HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 17409
  $231 = $ReallocAsyncCtx6 + 4 | 0; //@line 17410
  HEAP32[$231 >> 2] = $2; //@line 17411
  $232 = $ReallocAsyncCtx6 + 8 | 0; //@line 17412
  HEAP32[$232 >> 2] = $4; //@line 17413
  $233 = $ReallocAsyncCtx6 + 12 | 0; //@line 17414
  HEAP32[$233 >> 2] = $6; //@line 17415
  $234 = $ReallocAsyncCtx6 + 16 | 0; //@line 17416
  HEAP32[$234 >> 2] = $8; //@line 17417
  $235 = $ReallocAsyncCtx6 + 20 | 0; //@line 17418
  HEAP32[$235 >> 2] = $10; //@line 17419
  $236 = $ReallocAsyncCtx6 + 24 | 0; //@line 17420
  HEAP32[$236 >> 2] = $12; //@line 17421
  $237 = $ReallocAsyncCtx6 + 28 | 0; //@line 17422
  HEAP32[$237 >> 2] = $14; //@line 17423
  $238 = $ReallocAsyncCtx6 + 32 | 0; //@line 17424
  HEAP32[$238 >> 2] = $16; //@line 17425
  $239 = $ReallocAsyncCtx6 + 36 | 0; //@line 17426
  HEAP32[$239 >> 2] = $18; //@line 17427
  $240 = $ReallocAsyncCtx6 + 40 | 0; //@line 17428
  HEAP32[$240 >> 2] = $20; //@line 17429
  $241 = $ReallocAsyncCtx6 + 44 | 0; //@line 17430
  HEAP32[$241 >> 2] = $22; //@line 17431
  $242 = $ReallocAsyncCtx6 + 48 | 0; //@line 17432
  HEAP32[$242 >> 2] = $24; //@line 17433
  $243 = $ReallocAsyncCtx6 + 52 | 0; //@line 17434
  HEAP32[$243 >> 2] = $26; //@line 17435
  $244 = $ReallocAsyncCtx6 + 56 | 0; //@line 17436
  HEAP32[$244 >> 2] = $28; //@line 17437
  $245 = $ReallocAsyncCtx6 + 60 | 0; //@line 17438
  HEAP32[$245 >> 2] = $30; //@line 17439
  sp = STACKTOP; //@line 17440
  STACKTOP = sp; //@line 17441
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 17445
 } else {
  $55 = HEAPU8[$18 >> 0] << 8 | HEAPU8[$20 >> 0]; //@line 17461
  $61 = HEAPU8[$22 >> 0] << 8 | HEAPU8[$24 >> 0]; //@line 17467
  if (((HEAP8[$14 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$10 >> 0] << 8 | HEAPU8[$12 >> 0] | 0) == 1 : 0) & (HEAP8[$16 >> 0] & 15) == 0) {
   if (!$55) {
    $247 = $2; //@line 17477
   } else {
    $$093119$i = 0; //@line 17479
    $69 = $2; //@line 17479
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 17481
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 17484
     } else {
      $74 = $69; //@line 17486
      $76 = $68; //@line 17486
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 17490
       $76 = HEAP8[$77 >> 0] | 0; //@line 17491
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 17494
        break;
       } else {
        $74 = $77; //@line 17497
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 17501
     $$093119$i = $$093119$i + 1 | 0; //@line 17502
     if (($$093119$i | 0) >= ($55 | 0)) {
      $247 = $80; //@line 17507
      break;
     } else {
      $69 = $80; //@line 17505
     }
    }
   }
   if (($4 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $6; //@line 17516
    $$094116$i = 0; //@line 17516
    $$095115$i = 0; //@line 17516
    $84 = $247; //@line 17516
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 17519
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 17523
      } else {
       $89 = $85 & 255; //@line 17526
       $92 = $84; //@line 17526
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 17531
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 17535
        $95 = HEAP8[$94 >> 0] | 0; //@line 17536
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 17540
         break;
        } else {
         $89 = $95 & 255; //@line 17543
         $92 = $94; //@line 17543
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 17547
        $100 = $92 + 2 | 0; //@line 17549
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 17553
        $100 = $94 + 1 | 0; //@line 17555
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 17568
     $119 = $100 + 10 | 0; //@line 17579
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 17584
     $125 = $124 & 65535; //@line 17585
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 17587
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 17593
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 17597
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 17601
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 17605
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 17609
       $$0 = $100 + 14 | 0; //@line 17612
       $$1$i = $$090117$i + 20 | 0; //@line 17612
       $$196$i = $$095115$i + 1 | 0; //@line 17612
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 17619
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 17623
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 17627
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 17631
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 17635
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 17639
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 17643
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 17647
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 17651
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 17655
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 17659
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 17663
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 17667
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 17671
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 17675
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 17679
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 17683
        $$0 = $100 + 26 | 0; //@line 17686
        $$1$i = $$090117$i + 20 | 0; //@line 17686
        $$196$i = $$095115$i + 1 | 0; //@line 17686
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 17690
        $$1$i = $$090117$i; //@line 17690
        $$196$i = $$095115$i; //@line 17690
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 17695
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $4 >>> 0)) {
      $$089$i = $$196$i; //@line 17702
      break;
     } else {
      $$090117$i = $$1$i; //@line 17700
      $$095115$i = $$196$i; //@line 17700
      $84 = $$0; //@line 17700
     }
    }
   } else {
    $$089$i = 0; //@line 17707
   }
  } else {
   $$089$i = 0; //@line 17710
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 17714
 }
 _free($10); //@line 17716
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 17717
 $200 = __ZN6Socket5closeEv($26) | 0; //@line 17718
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 17721
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 17722
  HEAP32[$201 >> 2] = $$355; //@line 17723
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 17724
  HEAP32[$202 >> 2] = $28; //@line 17725
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 17726
  HEAP32[$203 >> 2] = $8; //@line 17727
  sp = STACKTOP; //@line 17728
  STACKTOP = sp; //@line 17729
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 17732
 ___async_unwind = 0; //@line 17733
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 17734
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 17735
 HEAP32[$201 >> 2] = $$355; //@line 17736
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 17737
 HEAP32[$202 >> 2] = $28; //@line 17738
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 17739
 HEAP32[$203 >> 2] = $8; //@line 17740
 sp = STACKTOP; //@line 17741
 STACKTOP = sp; //@line 17742
 return;
}
function _sn_coap_parser_options_parse_multiple_options($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$04966$i = 0, $$04966$us$i = 0, $$05165$i = 0, $$05165$us$i = 0, $$053$i68 = 0, $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$i = 0, $$1$us = 0, $$1$us$i = 0, $$152$in$i = 0, $$152$in$us$i = 0, $$lcssa94$sink$i = 0, $$sink = 0, $$sink69 = 0, $$sink69$in = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $116 = 0, $121 = 0, $123 = 0, $124 = 0, $127 = 0, $130 = 0, $139 = 0, $144 = 0, $148 = 0, $15 = 0, $150 = 0, $153 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $164 = 0, $167 = 0, $17 = 0, $172 = 0, $174 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $43 = 0, $49 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $88 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $sext = 0, $trunc = 0, $trunc$i = 0, $trunc$us$i = 0, $trunc110 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5921
 $7 = HEAP32[$1 >> 2] | 0; //@line 5922
 $8 = $2 & 65535; //@line 5923
 do {
  if ($2 << 16 >> 16) {
   $10 = ($5 | 0) == 17; //@line 5927
   $11 = ($5 | 0) == 4; //@line 5928
   L3 : do {
    switch ($5 | 0) {
    case 8:
    case 11:
    case 15:
    case 20:
     {
      $$04966$us$i = 0; //@line 5932
      $$05165$us$i = $6; //@line 5932
      $17 = 1; //@line 5932
      L22 : while (1) {
       if ($11 & ($$05165$us$i & 65535) > 8 | (($$05165$us$i & 65535) > 255 | $10 & ($$05165$us$i & 65535) > 2)) {
        $$064 = -1; //@line 5942
        label = 54; //@line 5943
        break;
       }
       $15 = $$05165$us$i & 65535; //@line 5946
       $16 = $17 + $15 | 0; //@line 5947
       $18 = $16 & 65535; //@line 5948
       $21 = ($$04966$us$i & 65535) + 1 + $15 | 0; //@line 5951
       $22 = $16 & 65535; //@line 5952
       if (($22 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $21; //@line 5955
        label = 23; //@line 5956
        break L3;
       }
       if ($22 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 5961
        label = 54; //@line 5962
        break;
       }
       $25 = $7 + $22 | 0; //@line 5965
       $trunc$us$i = HEAP8[$25 >> 0] | 0; //@line 5966
       $26 = $trunc$us$i & 255; //@line 5967
       if ($26 & 240 | 0) {
        $$sink69$in = $21; //@line 5971
        break L3;
       }
       switch ($trunc$us$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 5978
         label = 54; //@line 5979
         break L22;
         break;
        }
       case 13:
        {
         if (($22 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 5987
          label = 54; //@line 5988
          break L22;
         }
         $43 = $18 + 1 << 16 >> 16; //@line 5991
         $$1$us$i = $43; //@line 5997
         $$152$in$us$i = (HEAPU8[$7 + ($43 & 65535) >> 0] | 0) + 13 | 0; //@line 5997
         break;
        }
       case 14:
        {
         $29 = $22 + 2 | 0; //@line 6001
         if ($29 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 6004
          label = 54; //@line 6005
          break L22;
         }
         $$1$us$i = $29 & 65535; //@line 6018
         $$152$in$us$i = (HEAPU8[$25 + 2 >> 0] | 0) + 269 + ((HEAPU8[$25 + 1 >> 0] | 0) << 8) | 0; //@line 6018
         break;
        }
       default:
        {
         $$1$us$i = $18; //@line 6022
         $$152$in$us$i = $26 & 15; //@line 6022
        }
       }
       $49 = $$1$us$i + 1 << 16 >> 16; //@line 6026
       if (($49 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $21; //@line 6030
        label = 23; //@line 6031
        break L3;
       } else {
        $$04966$us$i = $21; //@line 6034
        $$05165$us$i = $$152$in$us$i & 65535; //@line 6034
        $17 = $49 & 65535; //@line 6034
       }
      }
      if ((label | 0) == 54) {
       return $$064 | 0; //@line 6038
      }
      break;
     }
    default:
     {
      $$04966$i = 0; //@line 6043
      $$05165$i = $6; //@line 6043
      $56 = 1; //@line 6043
      L4 : while (1) {
       if ($10 & ($$05165$i & 65535) > 2 | $11 & ($$05165$i & 65535) > 8) {
        $$064 = -1; //@line 6051
        label = 54; //@line 6052
        break;
       }
       $54 = $$05165$i & 65535; //@line 6055
       $55 = $56 + $54 | 0; //@line 6056
       $57 = $55 & 65535; //@line 6057
       $60 = ($$04966$i & 65535) + 1 + $54 | 0; //@line 6060
       $61 = $55 & 65535; //@line 6061
       if (($61 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $60; //@line 6064
        label = 23; //@line 6065
        break L3;
       }
       if ($61 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 6070
        label = 54; //@line 6071
        break;
       }
       $64 = $7 + $61 | 0; //@line 6074
       $trunc$i = HEAP8[$64 >> 0] | 0; //@line 6075
       $65 = $trunc$i & 255; //@line 6076
       if ($65 & 240 | 0) {
        $$sink69$in = $60; //@line 6080
        break L3;
       }
       switch ($trunc$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 6087
         label = 54; //@line 6088
         break L4;
         break;
        }
       case 13:
        {
         if (($61 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 6096
          label = 54; //@line 6097
          break L4;
         }
         $70 = $57 + 1 << 16 >> 16; //@line 6100
         $$1$i = $70; //@line 6106
         $$152$in$i = (HEAPU8[$7 + ($70 & 65535) >> 0] | 0) + 13 | 0; //@line 6106
         break;
        }
       case 14:
        {
         $76 = $61 + 2 | 0; //@line 6110
         if ($76 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 6113
          label = 54; //@line 6114
          break L4;
         }
         $$1$i = $76 & 65535; //@line 6127
         $$152$in$i = (HEAPU8[$64 + 2 >> 0] | 0) + 269 + ((HEAPU8[$64 + 1 >> 0] | 0) << 8) | 0; //@line 6127
         break;
        }
       default:
        {
         $$1$i = $57; //@line 6131
         $$152$in$i = $65 & 15; //@line 6131
        }
       }
       $88 = $$1$i + 1 << 16 >> 16; //@line 6135
       if (($88 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $60; //@line 6139
        label = 23; //@line 6140
        break L3;
       } else {
        $$04966$i = $60; //@line 6143
        $$05165$i = $$152$in$i & 65535; //@line 6143
        $56 = $88 & 65535; //@line 6143
       }
      }
      if ((label | 0) == 54) {
       return $$064 | 0; //@line 6147
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    if (!(($$lcssa94$sink$i & 65535) << 16 >> 16)) {
     break;
    } else {
     $$sink69$in = $$lcssa94$sink$i; //@line 6158
    }
   }
   $$sink69 = $$sink69$in + 65535 | 0; //@line 6161
   $93 = $$sink69 & 65535; //@line 6162
   $sext = $$sink69 << 16; //@line 6163
   $94 = $sext >> 16; //@line 6164
   switch ($93 << 16 >> 16) {
   case 0:
    {
     $$053$i68 = 0; //@line 6167
     break;
    }
   case -1:
    {
     $$064 = -1; //@line 6171
     return $$064 | 0; //@line 6172
    }
   default:
    {
     label = 25; //@line 6176
    }
   }
   if ((label | 0) == 25) {
    $95 = HEAP32[$0 >> 2] | 0; //@line 6180
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 6181
    $96 = FUNCTION_TABLE_ii[$95 & 15]($93) | 0; //@line 6182
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 58; //@line 6185
     HEAP16[$AsyncCtx + 4 >> 1] = $93; //@line 6187
     HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6189
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6191
     HEAP32[$AsyncCtx + 16 >> 2] = $sext; //@line 6193
     HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6195
     HEAP32[$AsyncCtx + 24 >> 2] = $94; //@line 6197
     HEAP16[$AsyncCtx + 28 >> 1] = $6; //@line 6199
     HEAP32[$AsyncCtx + 32 >> 2] = $5; //@line 6201
     sp = STACKTOP; //@line 6202
     return 0; //@line 6203
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6205
    HEAP32[$3 >> 2] = $96; //@line 6206
    if (!$96) {
     $$064 = -1; //@line 6209
     return $$064 | 0; //@line 6210
    } else {
     $$053$i68 = $93; //@line 6212
    }
   }
   HEAP16[$4 >> 1] = $$053$i68; //@line 6215
   $106 = HEAP32[$3 >> 2] | 0; //@line 6216
   if (($sext | 0) <= 0) {
    $$064 = 0; //@line 6219
    return $$064 | 0; //@line 6220
   }
   if (($5 | 0) == 20) {
    $$06378$us = $106; //@line 6224
    $$06577$us = $6; //@line 6224
    $$080$us = 0; //@line 6224
    while (1) {
     if (!($$080$us << 24 >> 24)) {
      $$1$us = $$06378$us; //@line 6228
     } else {
      HEAP8[$$06378$us >> 0] = 38; //@line 6230
      $$1$us = $$06378$us + 1 | 0; //@line 6232
     }
     $111 = $$080$us + 1 << 24 >> 24; //@line 6234
     $113 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 6236
     HEAP32[$1 >> 2] = $113; //@line 6237
     $116 = $$06577$us & 65535; //@line 6240
     if (($$1$us + $116 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
      $$064 = -1; //@line 6245
      label = 54; //@line 6246
      break;
     }
     _memcpy($$1$us | 0, $113 | 0, $116 | 0) | 0; //@line 6249
     $121 = (HEAP32[$1 >> 2] | 0) + $116 | 0; //@line 6251
     HEAP32[$1 >> 2] = $121; //@line 6252
     $$06378$us = $$1$us + $116 | 0; //@line 6253
     $123 = HEAP32[$3 >> 2] | 0; //@line 6254
     $124 = $$06378$us; //@line 6255
     if (($124 - $123 | 0) >= ($94 | 0)) {
      $$064 = $111; //@line 6259
      label = 54; //@line 6260
      break;
     }
     $trunc110 = HEAP8[$121 >> 0] | 0; //@line 6263
     $127 = $trunc110 & 255; //@line 6264
     if ($127 & 240 | 0) {
      $$064 = $111; //@line 6268
      label = 54; //@line 6269
      break;
     }
     switch ($trunc110 & 15) {
     case 13:
      {
       $139 = $121 + 1 | 0; //@line 6276
       $$sink87 = $139; //@line 6280
       $$sink88 = (HEAPU8[$139 >> 0] | 0) + 13 | 0; //@line 6280
       label = 39; //@line 6281
       break;
      }
     case 14:
      {
       $130 = $121 + 2 | 0; //@line 6285
       $$sink87 = $130; //@line 6294
       $$sink88 = (HEAPU8[$130 >> 0] | 0) + 269 + ((HEAPU8[$121 + 1 >> 0] | 0) << 8) | 0; //@line 6294
       label = 39; //@line 6295
       break;
      }
     default:
      {
       $$065$be$us$in = $127 & 15; //@line 6299
       $144 = $123; //@line 6299
      }
     }
     if ((label | 0) == 39) {
      label = 0; //@line 6303
      HEAP32[$1 >> 2] = $$sink87; //@line 6304
      $$065$be$us$in = $$sink88; //@line 6306
      $144 = HEAP32[$3 >> 2] | 0; //@line 6306
     }
     if (($124 - $144 | 0) >= ($94 | 0)) {
      $$064 = $111; //@line 6314
      label = 54; //@line 6315
      break;
     } else {
      $$06577$us = $$065$be$us$in & 65535; //@line 6312
      $$080$us = $111; //@line 6312
     }
    }
    if ((label | 0) == 54) {
     return $$064 | 0; //@line 6320
    }
   } else {
    $$06378 = $106; //@line 6323
    $$06577 = $6; //@line 6323
    $$080 = 0; //@line 6323
   }
   while (1) {
    if (!($$080 << 24 >> 24)) {
     $$1 = $$06378; //@line 6328
    } else {
     switch ($5 | 0) {
     case 4:
     case 15:
     case 17:
     case 20:
      {
       $$sink = 38; //@line 6332
       label = 44; //@line 6333
       break;
      }
     case 8:
     case 11:
      {
       $$sink = 47; //@line 6337
       label = 44; //@line 6338
       break;
      }
     default:
      {}
     }
     if ((label | 0) == 44) {
      label = 0; //@line 6345
      HEAP8[$$06378 >> 0] = $$sink; //@line 6346
     }
     $$1 = $$06378 + 1 | 0; //@line 6349
    }
    $148 = $$080 + 1 << 24 >> 24; //@line 6351
    $150 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 6353
    HEAP32[$1 >> 2] = $150; //@line 6354
    $153 = $$06577 & 65535; //@line 6357
    if (($$1 + $153 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
     $$064 = -1; //@line 6362
     label = 54; //@line 6363
     break;
    }
    _memcpy($$1 | 0, $150 | 0, $153 | 0) | 0; //@line 6366
    $158 = (HEAP32[$1 >> 2] | 0) + $153 | 0; //@line 6368
    HEAP32[$1 >> 2] = $158; //@line 6369
    $$06378 = $$1 + $153 | 0; //@line 6370
    $160 = HEAP32[$3 >> 2] | 0; //@line 6371
    $161 = $$06378; //@line 6372
    if (($161 - $160 | 0) >= ($94 | 0)) {
     $$064 = $148; //@line 6376
     label = 54; //@line 6377
     break;
    }
    $trunc = HEAP8[$158 >> 0] | 0; //@line 6380
    $164 = $trunc & 255; //@line 6381
    if ($164 & 240 | 0) {
     $$064 = $148; //@line 6385
     label = 54; //@line 6386
     break;
    }
    switch ($trunc & 15) {
    case 13:
     {
      $167 = $158 + 1 | 0; //@line 6393
      $$sink89 = $167; //@line 6397
      $$sink90 = (HEAPU8[$167 >> 0] | 0) + 13 | 0; //@line 6397
      label = 51; //@line 6398
      break;
     }
    case 14:
     {
      $174 = $158 + 2 | 0; //@line 6402
      $$sink89 = $174; //@line 6411
      $$sink90 = (HEAPU8[$174 >> 0] | 0) + 269 + ((HEAPU8[$158 + 1 >> 0] | 0) << 8) | 0; //@line 6411
      label = 51; //@line 6412
      break;
     }
    default:
     {
      $$065$be$in = $164 & 15; //@line 6416
      $172 = $160; //@line 6416
     }
    }
    if ((label | 0) == 51) {
     label = 0; //@line 6420
     HEAP32[$1 >> 2] = $$sink89; //@line 6421
     $$065$be$in = $$sink90; //@line 6423
     $172 = HEAP32[$3 >> 2] | 0; //@line 6423
    }
    if (($161 - $172 | 0) >= ($94 | 0)) {
     $$064 = $148; //@line 6431
     label = 54; //@line 6432
     break;
    } else {
     $$06577 = $$065$be$in & 65535; //@line 6429
     $$080 = $148; //@line 6429
    }
   }
   if ((label | 0) == 54) {
    return $$064 | 0; //@line 6437
   }
  }
 } while (0);
 HEAP16[$4 >> 1] = 0; //@line 6441
 $$064 = 0; //@line 6442
 return $$064 | 0; //@line 6443
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7939
 $6 = HEAP32[$5 >> 2] | 0; //@line 7940
 $7 = $0 + 100 | 0; //@line 7941
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7946
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7949
  $$0142 = 0; //@line 7949
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7952
  $$0142 = 0; //@line 7952
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7957
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7965
    $$0148 = 0; //@line 7965
    $$0152 = 1.0; //@line 7965
    $$0155 = 0.0; //@line 7965
    $$0159 = 0; //@line 7965
    $$2 = $$0; //@line 7965
    $$2144 = $$0142; //@line 7965
    $51 = 0; //@line 7965
    $53 = 0; //@line 7965
    $96 = 0; //@line 7965
    $98 = 0; //@line 7965
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7969
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7974
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7977
   $$0142 = 1; //@line 7977
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7981
   $$0142 = 1; //@line 7981
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7986
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7991
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7994
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7997
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 8001
   $37 = 0; //@line 8001
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 8003
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 8008
     $41 = HEAPU8[$29 >> 0] | 0; //@line 8011
    } else {
     $41 = ___shgetc($0) | 0; //@line 8014
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 8016
    $39 = tempRet0; //@line 8017
    if (($41 | 0) == 48) {
     $36 = $38; //@line 8020
     $37 = $39; //@line 8020
    } else {
     $$0146 = 1; //@line 8022
     $$0148 = 0; //@line 8022
     $$0152 = 1.0; //@line 8022
     $$0155 = 0.0; //@line 8022
     $$0159 = 0; //@line 8022
     $$2 = $41; //@line 8022
     $$2144 = 1; //@line 8022
     $51 = 0; //@line 8022
     $53 = 0; //@line 8022
     $96 = $38; //@line 8022
     $98 = $39; //@line 8022
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 8027
   $$0148 = 0; //@line 8027
   $$0152 = 1.0; //@line 8027
   $$0155 = 0.0; //@line 8027
   $$0159 = 0; //@line 8027
   $$2 = $$1$ph; //@line 8027
   $$2144 = $$0142; //@line 8027
   $51 = 0; //@line 8027
   $53 = 0; //@line 8027
   $96 = 0; //@line 8027
   $98 = 0; //@line 8027
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 8031
  $$pre = $$2 | 32; //@line 8033
  if ($42 >>> 0 < 10) {
   label = 20; //@line 8035
  } else {
   $46 = ($$2 | 0) == 46; //@line 8039
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 8042
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 8048
     $$2150 = $$0148; //@line 8048
     $$2154 = $$0152; //@line 8048
     $$2157 = $$0155; //@line 8048
     $$2161 = $$0159; //@line 8048
     $$3145 = $$2144; //@line 8048
     $211 = $53; //@line 8048
     $212 = $51; //@line 8048
     $213 = $53; //@line 8048
     $214 = $51; //@line 8048
    } else {
     $$2$lcssa = 46; //@line 8050
     break;
    }
   } else {
    label = 20; //@line 8054
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 8058
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 8061
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 8071
     $$1153 = $$0152; //@line 8071
     $$1156 = $$0155; //@line 8071
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 8071
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 8080
      $$1149 = $$0148; //@line 8083
      $$1153 = $65; //@line 8083
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 8083
      $$1160 = $$0159; //@line 8083
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 8088
      $$1149 = $or$cond ? $$0148 : 1; //@line 8093
      $$1153 = $$0152; //@line 8093
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 8093
      $$1160 = $$0159; //@line 8093
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 8098
   $$1147 = $$0146; //@line 8100
   $$2150 = $$1149; //@line 8100
   $$2154 = $$1153; //@line 8100
   $$2157 = $$1156; //@line 8100
   $$2161 = $$1160; //@line 8100
   $$3145 = 1; //@line 8100
   $211 = $96; //@line 8100
   $212 = $98; //@line 8100
   $213 = $72; //@line 8100
   $214 = tempRet0; //@line 8100
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8102
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8107
   $$0146 = $$1147; //@line 8110
   $$0148 = $$2150; //@line 8110
   $$0152 = $$2154; //@line 8110
   $$0155 = $$2157; //@line 8110
   $$0159 = $$2161; //@line 8110
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8110
   $$2144 = $$3145; //@line 8110
   $51 = $214; //@line 8110
   $53 = $213; //@line 8110
   $96 = $211; //@line 8110
   $98 = $212; //@line 8110
   continue;
  } else {
   $$0146 = $$1147; //@line 8114
   $$0148 = $$2150; //@line 8114
   $$0152 = $$2154; //@line 8114
   $$0155 = $$2157; //@line 8114
   $$0159 = $$2161; //@line 8114
   $$2 = ___shgetc($0) | 0; //@line 8114
   $$2144 = $$3145; //@line 8114
   $51 = $214; //@line 8114
   $53 = $213; //@line 8114
   $96 = $211; //@line 8114
   $98 = $212; //@line 8114
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8122
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8126
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8130
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8135
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8142
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8147
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8149
   $95 = $94 ? $53 : $96; //@line 8150
   $97 = $94 ? $51 : $98; //@line 8151
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8158
    $105 = $53; //@line 8158
    $106 = $51; //@line 8158
    while (1) {
     $104 = $$3162183 << 4; //@line 8160
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8161
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8171
      break;
     } else {
      $$3162183 = $104; //@line 8169
      $106 = tempRet0; //@line 8169
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8176
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8181
    $117 = tempRet0; //@line 8182
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8189
      $$0165 = 0.0; //@line 8190
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8196
      $135 = 0; //@line 8196
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8200
      $134 = 0; //@line 8201
      $135 = 0; //@line 8201
     }
    } else {
     $134 = $116; //@line 8204
     $135 = $117; //@line 8204
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8210
     $135 = 0; //@line 8210
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8214
     $134 = 0; //@line 8215
     $135 = 0; //@line 8215
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8218
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8220
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8222
   $137 = tempRet0; //@line 8223
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8228
    break;
   }
   $141 = 0 - $2 | 0; //@line 8231
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8233
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8241
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8245
    break;
   }
   $153 = $2 + -106 | 0; //@line 8248
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8250
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8258
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8262
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8267
    $$4163178 = $$3162$lcssa; //@line 8267
    $170 = $136; //@line 8267
    $171 = $137; //@line 8267
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8269
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8274
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8276
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8277
     $173 = tempRet0; //@line 8278
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8281
      $$4163178 = $$5164; //@line 8281
      $170 = $172; //@line 8281
      $171 = $173; //@line 8281
     } else {
      $$3158$lcssa = $$4; //@line 8283
      $$4163$lcssa = $$5164; //@line 8283
      $181 = $172; //@line 8283
      $182 = $173; //@line 8283
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8288
    $$4163$lcssa = $$3162$lcssa; //@line 8288
    $181 = $136; //@line 8288
    $182 = $137; //@line 8288
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8291
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8294
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8296
   $184 = tempRet0; //@line 8297
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8306
     label = 59; //@line 8307
    } else {
     $$0166170 = 0; //@line 8309
     $194 = 84; //@line 8309
     label = 61; //@line 8310
    }
   } else {
    $$0166 = $1; //@line 8313
    label = 59; //@line 8314
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8320
     $194 = 84 - $$0166 | 0; //@line 8320
     label = 61; //@line 8321
    } else {
     $$0151 = 0.0; //@line 8324
     $$0166169 = $$0166; //@line 8324
     $$pre$phi201Z2D = +($3 | 0); //@line 8324
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8328
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8331
    $$0166169 = $$0166170; //@line 8331
    $$pre$phi201Z2D = $193; //@line 8331
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8338
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8347
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8351
   }
   $$0165 = +_scalbnl($207, $181); //@line 8354
  }
 } while (0);
 return +$$0165;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_33($0) {
 $0 = $0 | 0;
 var $$019$i$3 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19642
 STACKTOP = STACKTOP + 32 | 0; //@line 19643
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19643
 $$byval_copy = sp; //@line 19644
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19648
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19650
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19652
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19654
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19656
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19658
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19660
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19662
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19664
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19666
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19668
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19670
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19672
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19674
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19676
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 19678
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19680
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19682
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(80) | 0; //@line 19687
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($28, 0, $10, 512) | 0; //@line 19688
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 19691
   $42 = $ReallocAsyncCtx3 + 4 | 0; //@line 19692
   HEAP32[$42 >> 2] = $2; //@line 19693
   $43 = $ReallocAsyncCtx3 + 8 | 0; //@line 19694
   HEAP32[$43 >> 2] = $4; //@line 19695
   $44 = $ReallocAsyncCtx3 + 12 | 0; //@line 19696
   HEAP32[$44 >> 2] = $6; //@line 19697
   $45 = $ReallocAsyncCtx3 + 16 | 0; //@line 19698
   HEAP32[$45 >> 2] = $8; //@line 19699
   $46 = $ReallocAsyncCtx3 + 20 | 0; //@line 19700
   HEAP32[$46 >> 2] = $10; //@line 19701
   $47 = $ReallocAsyncCtx3 + 24 | 0; //@line 19702
   HEAP32[$47 >> 2] = $12; //@line 19703
   $48 = $ReallocAsyncCtx3 + 28 | 0; //@line 19704
   HEAP32[$48 >> 2] = $14; //@line 19705
   $49 = $ReallocAsyncCtx3 + 32 | 0; //@line 19706
   HEAP32[$49 >> 2] = $16; //@line 19707
   $50 = $ReallocAsyncCtx3 + 36 | 0; //@line 19708
   HEAP32[$50 >> 2] = $18; //@line 19709
   $51 = $ReallocAsyncCtx3 + 40 | 0; //@line 19710
   HEAP32[$51 >> 2] = $20; //@line 19711
   $52 = $ReallocAsyncCtx3 + 44 | 0; //@line 19712
   HEAP32[$52 >> 2] = $22; //@line 19713
   $53 = $ReallocAsyncCtx3 + 48 | 0; //@line 19714
   HEAP32[$53 >> 2] = $24; //@line 19715
   $54 = $ReallocAsyncCtx3 + 52 | 0; //@line 19716
   HEAP32[$54 >> 2] = $26; //@line 19717
   $55 = $ReallocAsyncCtx3 + 56 | 0; //@line 19718
   HEAP32[$55 >> 2] = $28; //@line 19719
   $56 = $ReallocAsyncCtx3 + 60 | 0; //@line 19720
   HEAP32[$56 >> 2] = $30; //@line 19721
   $57 = $ReallocAsyncCtx3 + 64 | 0; //@line 19722
   HEAP32[$57 >> 2] = $32; //@line 19723
   $58 = $ReallocAsyncCtx3 + 68 | 0; //@line 19724
   HEAP8[$58 >> 0] = $34; //@line 19725
   $59 = $ReallocAsyncCtx3 + 72 | 0; //@line 19726
   HEAP32[$59 >> 2] = $36; //@line 19727
   $60 = $ReallocAsyncCtx3 + 76 | 0; //@line 19728
   HEAP32[$60 >> 2] = $38; //@line 19729
   sp = STACKTOP; //@line 19730
   STACKTOP = sp; //@line 19731
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 19734
  ___async_unwind = 0; //@line 19735
  HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 19736
  $42 = $ReallocAsyncCtx3 + 4 | 0; //@line 19737
  HEAP32[$42 >> 2] = $2; //@line 19738
  $43 = $ReallocAsyncCtx3 + 8 | 0; //@line 19739
  HEAP32[$43 >> 2] = $4; //@line 19740
  $44 = $ReallocAsyncCtx3 + 12 | 0; //@line 19741
  HEAP32[$44 >> 2] = $6; //@line 19742
  $45 = $ReallocAsyncCtx3 + 16 | 0; //@line 19743
  HEAP32[$45 >> 2] = $8; //@line 19744
  $46 = $ReallocAsyncCtx3 + 20 | 0; //@line 19745
  HEAP32[$46 >> 2] = $10; //@line 19746
  $47 = $ReallocAsyncCtx3 + 24 | 0; //@line 19747
  HEAP32[$47 >> 2] = $12; //@line 19748
  $48 = $ReallocAsyncCtx3 + 28 | 0; //@line 19749
  HEAP32[$48 >> 2] = $14; //@line 19750
  $49 = $ReallocAsyncCtx3 + 32 | 0; //@line 19751
  HEAP32[$49 >> 2] = $16; //@line 19752
  $50 = $ReallocAsyncCtx3 + 36 | 0; //@line 19753
  HEAP32[$50 >> 2] = $18; //@line 19754
  $51 = $ReallocAsyncCtx3 + 40 | 0; //@line 19755
  HEAP32[$51 >> 2] = $20; //@line 19756
  $52 = $ReallocAsyncCtx3 + 44 | 0; //@line 19757
  HEAP32[$52 >> 2] = $22; //@line 19758
  $53 = $ReallocAsyncCtx3 + 48 | 0; //@line 19759
  HEAP32[$53 >> 2] = $24; //@line 19760
  $54 = $ReallocAsyncCtx3 + 52 | 0; //@line 19761
  HEAP32[$54 >> 2] = $26; //@line 19762
  $55 = $ReallocAsyncCtx3 + 56 | 0; //@line 19763
  HEAP32[$55 >> 2] = $28; //@line 19764
  $56 = $ReallocAsyncCtx3 + 60 | 0; //@line 19765
  HEAP32[$56 >> 2] = $30; //@line 19766
  $57 = $ReallocAsyncCtx3 + 64 | 0; //@line 19767
  HEAP32[$57 >> 2] = $32; //@line 19768
  $58 = $ReallocAsyncCtx3 + 68 | 0; //@line 19769
  HEAP8[$58 >> 0] = $34; //@line 19770
  $59 = $ReallocAsyncCtx3 + 72 | 0; //@line 19771
  HEAP32[$59 >> 2] = $36; //@line 19772
  $60 = $ReallocAsyncCtx3 + 76 | 0; //@line 19773
  HEAP32[$60 >> 2] = $38; //@line 19774
  sp = STACKTOP; //@line 19775
  STACKTOP = sp; //@line 19776
  return;
 }
 HEAP8[$10 >> 0] = 0; //@line 19778
 HEAP8[$12 >> 0] = 1; //@line 19779
 HEAP8[$14 >> 0] = 1; //@line 19780
 HEAP8[$16 >> 0] = 0; //@line 19781
 HEAP8[$18 >> 0] = 0; //@line 19782
 HEAP8[$20 >> 0] = 1; //@line 19783
 HEAP8[$22 >> 0] = 0; //@line 19784
 HEAP8[$22 + 1 >> 0] = 0; //@line 19784
 HEAP8[$22 + 2 >> 0] = 0; //@line 19784
 HEAP8[$22 + 3 >> 0] = 0; //@line 19784
 HEAP8[$22 + 4 >> 0] = 0; //@line 19784
 HEAP8[$22 + 5 >> 0] = 0; //@line 19784
 if (!(HEAP8[$30 >> 0] | 0)) {
  $79 = $2; //@line 19788
 } else {
  $$019$i$3 = $30; //@line 19790
  $67 = $2; //@line 19790
  while (1) {
   $64 = _strcspn($$019$i$3, 3745) | 0; //@line 19792
   $66 = $67 + 1 | 0; //@line 19794
   HEAP8[$67 >> 0] = $64; //@line 19795
   $68 = $64 & 255; //@line 19796
   _memcpy($66 | 0, $$019$i$3 | 0, $68 | 0) | 0; //@line 19797
   $69 = $66 + $68 | 0; //@line 19798
   $$019$i$3 = $$019$i$3 + ($64 + ((HEAP8[$$019$i$3 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 19804
   if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
    $79 = $69; //@line 19808
    break;
   } else {
    $67 = $69; //@line 19811
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 19816
 HEAP8[$79 + 1 >> 0] = 0; //@line 19818
 HEAP8[$79 + 2 >> 0] = $34; //@line 19820
 HEAP8[$79 + 3 >> 0] = 0; //@line 19822
 HEAP8[$79 + 4 >> 0] = 1; //@line 19823
 HEAP32[$$byval_copy >> 2] = HEAP32[129]; //@line 19824
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[130]; //@line 19824
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[131]; //@line 19824
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[132]; //@line 19824
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[133]; //@line 19824
 __ZN13SocketAddressC2E10nsapi_addrt($36, $$byval_copy, 53); //@line 19825
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(80) | 0; //@line 19829
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($28, $36, $10, $79 + 5 - $38 | 0) | 0; //@line 19830
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 19833
  $87 = $ReallocAsyncCtx7 + 4 | 0; //@line 19834
  HEAP32[$87 >> 2] = $2; //@line 19835
  $88 = $ReallocAsyncCtx7 + 8 | 0; //@line 19836
  HEAP32[$88 >> 2] = $4; //@line 19837
  $89 = $ReallocAsyncCtx7 + 12 | 0; //@line 19838
  HEAP32[$89 >> 2] = $6; //@line 19839
  $90 = $ReallocAsyncCtx7 + 16 | 0; //@line 19840
  HEAP32[$90 >> 2] = $8; //@line 19841
  $91 = $ReallocAsyncCtx7 + 20 | 0; //@line 19842
  HEAP32[$91 >> 2] = $10; //@line 19843
  $92 = $ReallocAsyncCtx7 + 24 | 0; //@line 19844
  HEAP32[$92 >> 2] = $12; //@line 19845
  $93 = $ReallocAsyncCtx7 + 28 | 0; //@line 19846
  HEAP32[$93 >> 2] = $14; //@line 19847
  $94 = $ReallocAsyncCtx7 + 32 | 0; //@line 19848
  HEAP32[$94 >> 2] = $16; //@line 19849
  $95 = $ReallocAsyncCtx7 + 36 | 0; //@line 19850
  HEAP32[$95 >> 2] = $18; //@line 19851
  $96 = $ReallocAsyncCtx7 + 40 | 0; //@line 19852
  HEAP32[$96 >> 2] = $20; //@line 19853
  $97 = $ReallocAsyncCtx7 + 44 | 0; //@line 19854
  HEAP32[$97 >> 2] = $22; //@line 19855
  $98 = $ReallocAsyncCtx7 + 48 | 0; //@line 19856
  HEAP32[$98 >> 2] = $24; //@line 19857
  $99 = $ReallocAsyncCtx7 + 52 | 0; //@line 19858
  HEAP32[$99 >> 2] = $26; //@line 19859
  $100 = $ReallocAsyncCtx7 + 56 | 0; //@line 19860
  HEAP32[$100 >> 2] = $28; //@line 19861
  $101 = $ReallocAsyncCtx7 + 60 | 0; //@line 19862
  HEAP32[$101 >> 2] = $32; //@line 19863
  $102 = $ReallocAsyncCtx7 + 64 | 0; //@line 19864
  HEAP8[$102 >> 0] = $34; //@line 19865
  $103 = $ReallocAsyncCtx7 + 68 | 0; //@line 19866
  HEAP32[$103 >> 2] = $36; //@line 19867
  $104 = $ReallocAsyncCtx7 + 72 | 0; //@line 19868
  HEAP32[$104 >> 2] = $38; //@line 19869
  $105 = $ReallocAsyncCtx7 + 76 | 0; //@line 19870
  HEAP32[$105 >> 2] = $30; //@line 19871
  sp = STACKTOP; //@line 19872
  STACKTOP = sp; //@line 19873
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 19876
 ___async_unwind = 0; //@line 19877
 HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 19878
 $87 = $ReallocAsyncCtx7 + 4 | 0; //@line 19879
 HEAP32[$87 >> 2] = $2; //@line 19880
 $88 = $ReallocAsyncCtx7 + 8 | 0; //@line 19881
 HEAP32[$88 >> 2] = $4; //@line 19882
 $89 = $ReallocAsyncCtx7 + 12 | 0; //@line 19883
 HEAP32[$89 >> 2] = $6; //@line 19884
 $90 = $ReallocAsyncCtx7 + 16 | 0; //@line 19885
 HEAP32[$90 >> 2] = $8; //@line 19886
 $91 = $ReallocAsyncCtx7 + 20 | 0; //@line 19887
 HEAP32[$91 >> 2] = $10; //@line 19888
 $92 = $ReallocAsyncCtx7 + 24 | 0; //@line 19889
 HEAP32[$92 >> 2] = $12; //@line 19890
 $93 = $ReallocAsyncCtx7 + 28 | 0; //@line 19891
 HEAP32[$93 >> 2] = $14; //@line 19892
 $94 = $ReallocAsyncCtx7 + 32 | 0; //@line 19893
 HEAP32[$94 >> 2] = $16; //@line 19894
 $95 = $ReallocAsyncCtx7 + 36 | 0; //@line 19895
 HEAP32[$95 >> 2] = $18; //@line 19896
 $96 = $ReallocAsyncCtx7 + 40 | 0; //@line 19897
 HEAP32[$96 >> 2] = $20; //@line 19898
 $97 = $ReallocAsyncCtx7 + 44 | 0; //@line 19899
 HEAP32[$97 >> 2] = $22; //@line 19900
 $98 = $ReallocAsyncCtx7 + 48 | 0; //@line 19901
 HEAP32[$98 >> 2] = $24; //@line 19902
 $99 = $ReallocAsyncCtx7 + 52 | 0; //@line 19903
 HEAP32[$99 >> 2] = $26; //@line 19904
 $100 = $ReallocAsyncCtx7 + 56 | 0; //@line 19905
 HEAP32[$100 >> 2] = $28; //@line 19906
 $101 = $ReallocAsyncCtx7 + 60 | 0; //@line 19907
 HEAP32[$101 >> 2] = $32; //@line 19908
 $102 = $ReallocAsyncCtx7 + 64 | 0; //@line 19909
 HEAP8[$102 >> 0] = $34; //@line 19910
 $103 = $ReallocAsyncCtx7 + 68 | 0; //@line 19911
 HEAP32[$103 >> 2] = $36; //@line 19912
 $104 = $ReallocAsyncCtx7 + 72 | 0; //@line 19913
 HEAP32[$104 >> 2] = $38; //@line 19914
 $105 = $ReallocAsyncCtx7 + 76 | 0; //@line 19915
 HEAP32[$105 >> 2] = $30; //@line 19916
 sp = STACKTOP; //@line 19917
 STACKTOP = sp; //@line 19918
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_35($0) {
 $0 = $0 | 0;
 var $$019$i$1 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20214
 STACKTOP = STACKTOP + 32 | 0; //@line 20215
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20215
 $$byval_copy = sp; //@line 20216
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20222
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20224
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20226
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20228
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20230
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20232
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20234
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20236
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20238
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20240
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20242
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20244
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20246
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20248
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 20250
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20252
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20254
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(80) | 0; //@line 20259
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($30, 0, $12, 512) | 0; //@line 20260
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 92; //@line 20263
   $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 20264
   HEAP32[$42 >> 2] = $2; //@line 20265
   $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 20266
   HEAP32[$43 >> 2] = $4; //@line 20267
   $44 = $ReallocAsyncCtx5 + 12 | 0; //@line 20268
   HEAP32[$44 >> 2] = $6; //@line 20269
   $45 = $ReallocAsyncCtx5 + 16 | 0; //@line 20270
   HEAP32[$45 >> 2] = $8; //@line 20271
   $46 = $ReallocAsyncCtx5 + 20 | 0; //@line 20272
   HEAP32[$46 >> 2] = $10; //@line 20273
   $47 = $ReallocAsyncCtx5 + 24 | 0; //@line 20274
   HEAP32[$47 >> 2] = $12; //@line 20275
   $48 = $ReallocAsyncCtx5 + 28 | 0; //@line 20276
   HEAP32[$48 >> 2] = $14; //@line 20277
   $49 = $ReallocAsyncCtx5 + 32 | 0; //@line 20278
   HEAP32[$49 >> 2] = $16; //@line 20279
   $50 = $ReallocAsyncCtx5 + 36 | 0; //@line 20280
   HEAP32[$50 >> 2] = $18; //@line 20281
   $51 = $ReallocAsyncCtx5 + 40 | 0; //@line 20282
   HEAP32[$51 >> 2] = $20; //@line 20283
   $52 = $ReallocAsyncCtx5 + 44 | 0; //@line 20284
   HEAP32[$52 >> 2] = $22; //@line 20285
   $53 = $ReallocAsyncCtx5 + 48 | 0; //@line 20286
   HEAP32[$53 >> 2] = $24; //@line 20287
   $54 = $ReallocAsyncCtx5 + 52 | 0; //@line 20288
   HEAP32[$54 >> 2] = $26; //@line 20289
   $55 = $ReallocAsyncCtx5 + 56 | 0; //@line 20290
   HEAP32[$55 >> 2] = $28; //@line 20291
   $56 = $ReallocAsyncCtx5 + 60 | 0; //@line 20292
   HEAP32[$56 >> 2] = $30; //@line 20293
   $57 = $ReallocAsyncCtx5 + 64 | 0; //@line 20294
   HEAP32[$57 >> 2] = $32; //@line 20295
   $58 = $ReallocAsyncCtx5 + 68 | 0; //@line 20296
   HEAP8[$58 >> 0] = $34; //@line 20297
   $59 = $ReallocAsyncCtx5 + 72 | 0; //@line 20298
   HEAP32[$59 >> 2] = $36; //@line 20299
   $60 = $ReallocAsyncCtx5 + 76 | 0; //@line 20300
   HEAP32[$60 >> 2] = $38; //@line 20301
   sp = STACKTOP; //@line 20302
   STACKTOP = sp; //@line 20303
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 20306
  ___async_unwind = 0; //@line 20307
  HEAP32[$ReallocAsyncCtx5 >> 2] = 92; //@line 20308
  $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 20309
  HEAP32[$42 >> 2] = $2; //@line 20310
  $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 20311
  HEAP32[$43 >> 2] = $4; //@line 20312
  $44 = $ReallocAsyncCtx5 + 12 | 0; //@line 20313
  HEAP32[$44 >> 2] = $6; //@line 20314
  $45 = $ReallocAsyncCtx5 + 16 | 0; //@line 20315
  HEAP32[$45 >> 2] = $8; //@line 20316
  $46 = $ReallocAsyncCtx5 + 20 | 0; //@line 20317
  HEAP32[$46 >> 2] = $10; //@line 20318
  $47 = $ReallocAsyncCtx5 + 24 | 0; //@line 20319
  HEAP32[$47 >> 2] = $12; //@line 20320
  $48 = $ReallocAsyncCtx5 + 28 | 0; //@line 20321
  HEAP32[$48 >> 2] = $14; //@line 20322
  $49 = $ReallocAsyncCtx5 + 32 | 0; //@line 20323
  HEAP32[$49 >> 2] = $16; //@line 20324
  $50 = $ReallocAsyncCtx5 + 36 | 0; //@line 20325
  HEAP32[$50 >> 2] = $18; //@line 20326
  $51 = $ReallocAsyncCtx5 + 40 | 0; //@line 20327
  HEAP32[$51 >> 2] = $20; //@line 20328
  $52 = $ReallocAsyncCtx5 + 44 | 0; //@line 20329
  HEAP32[$52 >> 2] = $22; //@line 20330
  $53 = $ReallocAsyncCtx5 + 48 | 0; //@line 20331
  HEAP32[$53 >> 2] = $24; //@line 20332
  $54 = $ReallocAsyncCtx5 + 52 | 0; //@line 20333
  HEAP32[$54 >> 2] = $26; //@line 20334
  $55 = $ReallocAsyncCtx5 + 56 | 0; //@line 20335
  HEAP32[$55 >> 2] = $28; //@line 20336
  $56 = $ReallocAsyncCtx5 + 60 | 0; //@line 20337
  HEAP32[$56 >> 2] = $30; //@line 20338
  $57 = $ReallocAsyncCtx5 + 64 | 0; //@line 20339
  HEAP32[$57 >> 2] = $32; //@line 20340
  $58 = $ReallocAsyncCtx5 + 68 | 0; //@line 20341
  HEAP8[$58 >> 0] = $34; //@line 20342
  $59 = $ReallocAsyncCtx5 + 72 | 0; //@line 20343
  HEAP32[$59 >> 2] = $36; //@line 20344
  $60 = $ReallocAsyncCtx5 + 76 | 0; //@line 20345
  HEAP32[$60 >> 2] = $38; //@line 20346
  sp = STACKTOP; //@line 20347
  STACKTOP = sp; //@line 20348
  return;
 }
 HEAP8[$12 >> 0] = 0; //@line 20350
 HEAP8[$14 >> 0] = 1; //@line 20351
 HEAP8[$16 >> 0] = 1; //@line 20352
 HEAP8[$18 >> 0] = 0; //@line 20353
 HEAP8[$20 >> 0] = 0; //@line 20354
 HEAP8[$22 >> 0] = 1; //@line 20355
 HEAP8[$24 >> 0] = 0; //@line 20356
 HEAP8[$24 + 1 >> 0] = 0; //@line 20356
 HEAP8[$24 + 2 >> 0] = 0; //@line 20356
 HEAP8[$24 + 3 >> 0] = 0; //@line 20356
 HEAP8[$24 + 4 >> 0] = 0; //@line 20356
 HEAP8[$24 + 5 >> 0] = 0; //@line 20356
 if (!(HEAP8[$4 >> 0] | 0)) {
  $79 = $2; //@line 20360
 } else {
  $$019$i$1 = $4; //@line 20362
  $67 = $2; //@line 20362
  while (1) {
   $64 = _strcspn($$019$i$1, 3745) | 0; //@line 20364
   $66 = $67 + 1 | 0; //@line 20366
   HEAP8[$67 >> 0] = $64; //@line 20367
   $68 = $64 & 255; //@line 20368
   _memcpy($66 | 0, $$019$i$1 | 0, $68 | 0) | 0; //@line 20369
   $69 = $66 + $68 | 0; //@line 20370
   $$019$i$1 = $$019$i$1 + ($64 + ((HEAP8[$$019$i$1 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 20376
   if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
    $79 = $69; //@line 20380
    break;
   } else {
    $67 = $69; //@line 20383
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 20388
 HEAP8[$79 + 1 >> 0] = 0; //@line 20390
 HEAP8[$79 + 2 >> 0] = $34; //@line 20392
 HEAP8[$79 + 3 >> 0] = 0; //@line 20394
 HEAP8[$79 + 4 >> 0] = 1; //@line 20395
 HEAP32[$$byval_copy >> 2] = HEAP32[119]; //@line 20396
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[120]; //@line 20396
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[121]; //@line 20396
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[122]; //@line 20396
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[123]; //@line 20396
 __ZN13SocketAddressC2E10nsapi_addrt($36, $$byval_copy, 53); //@line 20397
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(80) | 0; //@line 20401
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($30, $36, $12, $79 + 5 - $38 | 0) | 0; //@line 20402
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 20405
  $87 = $ReallocAsyncCtx9 + 4 | 0; //@line 20406
  HEAP32[$87 >> 2] = $2; //@line 20407
  $88 = $ReallocAsyncCtx9 + 8 | 0; //@line 20408
  HEAP32[$88 >> 2] = $4; //@line 20409
  $89 = $ReallocAsyncCtx9 + 12 | 0; //@line 20410
  HEAP32[$89 >> 2] = $6; //@line 20411
  $90 = $ReallocAsyncCtx9 + 16 | 0; //@line 20412
  HEAP32[$90 >> 2] = $8; //@line 20413
  $91 = $ReallocAsyncCtx9 + 20 | 0; //@line 20414
  HEAP32[$91 >> 2] = $10; //@line 20415
  $92 = $ReallocAsyncCtx9 + 24 | 0; //@line 20416
  HEAP32[$92 >> 2] = $12; //@line 20417
  $93 = $ReallocAsyncCtx9 + 28 | 0; //@line 20418
  HEAP32[$93 >> 2] = $14; //@line 20419
  $94 = $ReallocAsyncCtx9 + 32 | 0; //@line 20420
  HEAP32[$94 >> 2] = $16; //@line 20421
  $95 = $ReallocAsyncCtx9 + 36 | 0; //@line 20422
  HEAP32[$95 >> 2] = $18; //@line 20423
  $96 = $ReallocAsyncCtx9 + 40 | 0; //@line 20424
  HEAP32[$96 >> 2] = $20; //@line 20425
  $97 = $ReallocAsyncCtx9 + 44 | 0; //@line 20426
  HEAP32[$97 >> 2] = $22; //@line 20427
  $98 = $ReallocAsyncCtx9 + 48 | 0; //@line 20428
  HEAP32[$98 >> 2] = $24; //@line 20429
  $99 = $ReallocAsyncCtx9 + 52 | 0; //@line 20430
  HEAP32[$99 >> 2] = $26; //@line 20431
  $100 = $ReallocAsyncCtx9 + 56 | 0; //@line 20432
  HEAP32[$100 >> 2] = $28; //@line 20433
  $101 = $ReallocAsyncCtx9 + 60 | 0; //@line 20434
  HEAP32[$101 >> 2] = $30; //@line 20435
  $102 = $ReallocAsyncCtx9 + 64 | 0; //@line 20436
  HEAP32[$102 >> 2] = $32; //@line 20437
  $103 = $ReallocAsyncCtx9 + 68 | 0; //@line 20438
  HEAP8[$103 >> 0] = $34; //@line 20439
  $104 = $ReallocAsyncCtx9 + 72 | 0; //@line 20440
  HEAP32[$104 >> 2] = $36; //@line 20441
  $105 = $ReallocAsyncCtx9 + 76 | 0; //@line 20442
  HEAP32[$105 >> 2] = $38; //@line 20443
  sp = STACKTOP; //@line 20444
  STACKTOP = sp; //@line 20445
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 20448
 ___async_unwind = 0; //@line 20449
 HEAP32[$ReallocAsyncCtx9 >> 2] = 95; //@line 20450
 $87 = $ReallocAsyncCtx9 + 4 | 0; //@line 20451
 HEAP32[$87 >> 2] = $2; //@line 20452
 $88 = $ReallocAsyncCtx9 + 8 | 0; //@line 20453
 HEAP32[$88 >> 2] = $4; //@line 20454
 $89 = $ReallocAsyncCtx9 + 12 | 0; //@line 20455
 HEAP32[$89 >> 2] = $6; //@line 20456
 $90 = $ReallocAsyncCtx9 + 16 | 0; //@line 20457
 HEAP32[$90 >> 2] = $8; //@line 20458
 $91 = $ReallocAsyncCtx9 + 20 | 0; //@line 20459
 HEAP32[$91 >> 2] = $10; //@line 20460
 $92 = $ReallocAsyncCtx9 + 24 | 0; //@line 20461
 HEAP32[$92 >> 2] = $12; //@line 20462
 $93 = $ReallocAsyncCtx9 + 28 | 0; //@line 20463
 HEAP32[$93 >> 2] = $14; //@line 20464
 $94 = $ReallocAsyncCtx9 + 32 | 0; //@line 20465
 HEAP32[$94 >> 2] = $16; //@line 20466
 $95 = $ReallocAsyncCtx9 + 36 | 0; //@line 20467
 HEAP32[$95 >> 2] = $18; //@line 20468
 $96 = $ReallocAsyncCtx9 + 40 | 0; //@line 20469
 HEAP32[$96 >> 2] = $20; //@line 20470
 $97 = $ReallocAsyncCtx9 + 44 | 0; //@line 20471
 HEAP32[$97 >> 2] = $22; //@line 20472
 $98 = $ReallocAsyncCtx9 + 48 | 0; //@line 20473
 HEAP32[$98 >> 2] = $24; //@line 20474
 $99 = $ReallocAsyncCtx9 + 52 | 0; //@line 20475
 HEAP32[$99 >> 2] = $26; //@line 20476
 $100 = $ReallocAsyncCtx9 + 56 | 0; //@line 20477
 HEAP32[$100 >> 2] = $28; //@line 20478
 $101 = $ReallocAsyncCtx9 + 60 | 0; //@line 20479
 HEAP32[$101 >> 2] = $30; //@line 20480
 $102 = $ReallocAsyncCtx9 + 64 | 0; //@line 20481
 HEAP32[$102 >> 2] = $32; //@line 20482
 $103 = $ReallocAsyncCtx9 + 68 | 0; //@line 20483
 HEAP8[$103 >> 0] = $34; //@line 20484
 $104 = $ReallocAsyncCtx9 + 72 | 0; //@line 20485
 HEAP32[$104 >> 2] = $36; //@line 20486
 $105 = $ReallocAsyncCtx9 + 76 | 0; //@line 20487
 HEAP32[$105 >> 2] = $38; //@line 20488
 sp = STACKTOP; //@line 20489
 STACKTOP = sp; //@line 20490
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_34($0) {
 $0 = $0 | 0;
 var $$019$i$2 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19928
 STACKTOP = STACKTOP + 32 | 0; //@line 19929
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19929
 $$byval_copy = sp; //@line 19930
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19932
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19938
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19940
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19942
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19944
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19946
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19948
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19950
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19952
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19954
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19956
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19958
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19960
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19962
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 19964
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19966
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19968
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 19973
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($30, 0, $12, 512) | 0; //@line 19974
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 96; //@line 19977
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 19978
   HEAP32[$42 >> 2] = $2; //@line 19979
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 19980
   HEAP32[$43 >> 2] = $4; //@line 19981
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 19982
   HEAP32[$44 >> 2] = $6; //@line 19983
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 19984
   HEAP32[$45 >> 2] = $8; //@line 19985
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 19986
   HEAP32[$46 >> 2] = $10; //@line 19987
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 19988
   HEAP32[$47 >> 2] = $12; //@line 19989
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 19990
   HEAP32[$48 >> 2] = $14; //@line 19991
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 19992
   HEAP32[$49 >> 2] = $16; //@line 19993
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 19994
   HEAP32[$50 >> 2] = $18; //@line 19995
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 19996
   HEAP32[$51 >> 2] = $20; //@line 19997
   $52 = $ReallocAsyncCtx4 + 44 | 0; //@line 19998
   HEAP32[$52 >> 2] = $22; //@line 19999
   $53 = $ReallocAsyncCtx4 + 48 | 0; //@line 20000
   HEAP32[$53 >> 2] = $24; //@line 20001
   $54 = $ReallocAsyncCtx4 + 52 | 0; //@line 20002
   HEAP32[$54 >> 2] = $26; //@line 20003
   $55 = $ReallocAsyncCtx4 + 56 | 0; //@line 20004
   HEAP32[$55 >> 2] = $28; //@line 20005
   $56 = $ReallocAsyncCtx4 + 60 | 0; //@line 20006
   HEAP32[$56 >> 2] = $30; //@line 20007
   $57 = $ReallocAsyncCtx4 + 64 | 0; //@line 20008
   HEAP32[$57 >> 2] = $32; //@line 20009
   $58 = $ReallocAsyncCtx4 + 68 | 0; //@line 20010
   HEAP8[$58 >> 0] = $34; //@line 20011
   $59 = $ReallocAsyncCtx4 + 72 | 0; //@line 20012
   HEAP32[$59 >> 2] = $36; //@line 20013
   $60 = $ReallocAsyncCtx4 + 76 | 0; //@line 20014
   HEAP32[$60 >> 2] = $38; //@line 20015
   sp = STACKTOP; //@line 20016
   STACKTOP = sp; //@line 20017
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 20020
  ___async_unwind = 0; //@line 20021
  HEAP32[$ReallocAsyncCtx4 >> 2] = 96; //@line 20022
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 20023
  HEAP32[$42 >> 2] = $2; //@line 20024
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 20025
  HEAP32[$43 >> 2] = $4; //@line 20026
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 20027
  HEAP32[$44 >> 2] = $6; //@line 20028
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 20029
  HEAP32[$45 >> 2] = $8; //@line 20030
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 20031
  HEAP32[$46 >> 2] = $10; //@line 20032
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 20033
  HEAP32[$47 >> 2] = $12; //@line 20034
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 20035
  HEAP32[$48 >> 2] = $14; //@line 20036
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 20037
  HEAP32[$49 >> 2] = $16; //@line 20038
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 20039
  HEAP32[$50 >> 2] = $18; //@line 20040
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 20041
  HEAP32[$51 >> 2] = $20; //@line 20042
  $52 = $ReallocAsyncCtx4 + 44 | 0; //@line 20043
  HEAP32[$52 >> 2] = $22; //@line 20044
  $53 = $ReallocAsyncCtx4 + 48 | 0; //@line 20045
  HEAP32[$53 >> 2] = $24; //@line 20046
  $54 = $ReallocAsyncCtx4 + 52 | 0; //@line 20047
  HEAP32[$54 >> 2] = $26; //@line 20048
  $55 = $ReallocAsyncCtx4 + 56 | 0; //@line 20049
  HEAP32[$55 >> 2] = $28; //@line 20050
  $56 = $ReallocAsyncCtx4 + 60 | 0; //@line 20051
  HEAP32[$56 >> 2] = $30; //@line 20052
  $57 = $ReallocAsyncCtx4 + 64 | 0; //@line 20053
  HEAP32[$57 >> 2] = $32; //@line 20054
  $58 = $ReallocAsyncCtx4 + 68 | 0; //@line 20055
  HEAP8[$58 >> 0] = $34; //@line 20056
  $59 = $ReallocAsyncCtx4 + 72 | 0; //@line 20057
  HEAP32[$59 >> 2] = $36; //@line 20058
  $60 = $ReallocAsyncCtx4 + 76 | 0; //@line 20059
  HEAP32[$60 >> 2] = $38; //@line 20060
  sp = STACKTOP; //@line 20061
  STACKTOP = sp; //@line 20062
  return;
 }
 HEAP8[$12 >> 0] = 0; //@line 20064
 HEAP8[$14 >> 0] = 1; //@line 20065
 HEAP8[$16 >> 0] = 1; //@line 20066
 HEAP8[$18 >> 0] = 0; //@line 20067
 HEAP8[$20 >> 0] = 0; //@line 20068
 HEAP8[$22 >> 0] = 1; //@line 20069
 HEAP8[$24 >> 0] = 0; //@line 20070
 HEAP8[$24 + 1 >> 0] = 0; //@line 20070
 HEAP8[$24 + 2 >> 0] = 0; //@line 20070
 HEAP8[$24 + 3 >> 0] = 0; //@line 20070
 HEAP8[$24 + 4 >> 0] = 0; //@line 20070
 HEAP8[$24 + 5 >> 0] = 0; //@line 20070
 if (!(HEAP8[$4 >> 0] | 0)) {
  $79 = $2; //@line 20074
 } else {
  $$019$i$2 = $4; //@line 20076
  $67 = $2; //@line 20076
  while (1) {
   $64 = _strcspn($$019$i$2, 3745) | 0; //@line 20078
   $66 = $67 + 1 | 0; //@line 20080
   HEAP8[$67 >> 0] = $64; //@line 20081
   $68 = $64 & 255; //@line 20082
   _memcpy($66 | 0, $$019$i$2 | 0, $68 | 0) | 0; //@line 20083
   $69 = $66 + $68 | 0; //@line 20084
   $$019$i$2 = $$019$i$2 + ($64 + ((HEAP8[$$019$i$2 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 20090
   if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
    $79 = $69; //@line 20094
    break;
   } else {
    $67 = $69; //@line 20097
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 20102
 HEAP8[$79 + 1 >> 0] = 0; //@line 20104
 HEAP8[$79 + 2 >> 0] = $34; //@line 20106
 HEAP8[$79 + 3 >> 0] = 0; //@line 20108
 HEAP8[$79 + 4 >> 0] = 1; //@line 20109
 HEAP32[$$byval_copy >> 2] = HEAP32[124]; //@line 20110
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[125]; //@line 20110
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[126]; //@line 20110
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[127]; //@line 20110
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[128]; //@line 20110
 __ZN13SocketAddressC2E10nsapi_addrt($36, $$byval_copy, 53); //@line 20111
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(80) | 0; //@line 20115
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($30, $36, $12, $79 + 5 - $38 | 0) | 0; //@line 20116
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 20119
  $87 = $ReallocAsyncCtx8 + 4 | 0; //@line 20120
  HEAP32[$87 >> 2] = $2; //@line 20121
  $88 = $ReallocAsyncCtx8 + 8 | 0; //@line 20122
  HEAP32[$88 >> 2] = $6; //@line 20123
  $89 = $ReallocAsyncCtx8 + 12 | 0; //@line 20124
  HEAP32[$89 >> 2] = $8; //@line 20125
  $90 = $ReallocAsyncCtx8 + 16 | 0; //@line 20126
  HEAP32[$90 >> 2] = $10; //@line 20127
  $91 = $ReallocAsyncCtx8 + 20 | 0; //@line 20128
  HEAP32[$91 >> 2] = $12; //@line 20129
  $92 = $ReallocAsyncCtx8 + 24 | 0; //@line 20130
  HEAP32[$92 >> 2] = $14; //@line 20131
  $93 = $ReallocAsyncCtx8 + 28 | 0; //@line 20132
  HEAP32[$93 >> 2] = $16; //@line 20133
  $94 = $ReallocAsyncCtx8 + 32 | 0; //@line 20134
  HEAP32[$94 >> 2] = $18; //@line 20135
  $95 = $ReallocAsyncCtx8 + 36 | 0; //@line 20136
  HEAP32[$95 >> 2] = $20; //@line 20137
  $96 = $ReallocAsyncCtx8 + 40 | 0; //@line 20138
  HEAP32[$96 >> 2] = $22; //@line 20139
  $97 = $ReallocAsyncCtx8 + 44 | 0; //@line 20140
  HEAP32[$97 >> 2] = $24; //@line 20141
  $98 = $ReallocAsyncCtx8 + 48 | 0; //@line 20142
  HEAP32[$98 >> 2] = $26; //@line 20143
  $99 = $ReallocAsyncCtx8 + 52 | 0; //@line 20144
  HEAP32[$99 >> 2] = $28; //@line 20145
  $100 = $ReallocAsyncCtx8 + 56 | 0; //@line 20146
  HEAP32[$100 >> 2] = $30; //@line 20147
  $101 = $ReallocAsyncCtx8 + 60 | 0; //@line 20148
  HEAP32[$101 >> 2] = $4; //@line 20149
  $102 = $ReallocAsyncCtx8 + 64 | 0; //@line 20150
  HEAP32[$102 >> 2] = $32; //@line 20151
  $103 = $ReallocAsyncCtx8 + 68 | 0; //@line 20152
  HEAP8[$103 >> 0] = $34; //@line 20153
  $104 = $ReallocAsyncCtx8 + 72 | 0; //@line 20154
  HEAP32[$104 >> 2] = $36; //@line 20155
  $105 = $ReallocAsyncCtx8 + 76 | 0; //@line 20156
  HEAP32[$105 >> 2] = $38; //@line 20157
  sp = STACKTOP; //@line 20158
  STACKTOP = sp; //@line 20159
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 20162
 ___async_unwind = 0; //@line 20163
 HEAP32[$ReallocAsyncCtx8 >> 2] = 97; //@line 20164
 $87 = $ReallocAsyncCtx8 + 4 | 0; //@line 20165
 HEAP32[$87 >> 2] = $2; //@line 20166
 $88 = $ReallocAsyncCtx8 + 8 | 0; //@line 20167
 HEAP32[$88 >> 2] = $6; //@line 20168
 $89 = $ReallocAsyncCtx8 + 12 | 0; //@line 20169
 HEAP32[$89 >> 2] = $8; //@line 20170
 $90 = $ReallocAsyncCtx8 + 16 | 0; //@line 20171
 HEAP32[$90 >> 2] = $10; //@line 20172
 $91 = $ReallocAsyncCtx8 + 20 | 0; //@line 20173
 HEAP32[$91 >> 2] = $12; //@line 20174
 $92 = $ReallocAsyncCtx8 + 24 | 0; //@line 20175
 HEAP32[$92 >> 2] = $14; //@line 20176
 $93 = $ReallocAsyncCtx8 + 28 | 0; //@line 20177
 HEAP32[$93 >> 2] = $16; //@line 20178
 $94 = $ReallocAsyncCtx8 + 32 | 0; //@line 20179
 HEAP32[$94 >> 2] = $18; //@line 20180
 $95 = $ReallocAsyncCtx8 + 36 | 0; //@line 20181
 HEAP32[$95 >> 2] = $20; //@line 20182
 $96 = $ReallocAsyncCtx8 + 40 | 0; //@line 20183
 HEAP32[$96 >> 2] = $22; //@line 20184
 $97 = $ReallocAsyncCtx8 + 44 | 0; //@line 20185
 HEAP32[$97 >> 2] = $24; //@line 20186
 $98 = $ReallocAsyncCtx8 + 48 | 0; //@line 20187
 HEAP32[$98 >> 2] = $26; //@line 20188
 $99 = $ReallocAsyncCtx8 + 52 | 0; //@line 20189
 HEAP32[$99 >> 2] = $28; //@line 20190
 $100 = $ReallocAsyncCtx8 + 56 | 0; //@line 20191
 HEAP32[$100 >> 2] = $30; //@line 20192
 $101 = $ReallocAsyncCtx8 + 60 | 0; //@line 20193
 HEAP32[$101 >> 2] = $4; //@line 20194
 $102 = $ReallocAsyncCtx8 + 64 | 0; //@line 20195
 HEAP32[$102 >> 2] = $32; //@line 20196
 $103 = $ReallocAsyncCtx8 + 68 | 0; //@line 20197
 HEAP8[$103 >> 0] = $34; //@line 20198
 $104 = $ReallocAsyncCtx8 + 72 | 0; //@line 20199
 HEAP32[$104 >> 2] = $36; //@line 20200
 $105 = $ReallocAsyncCtx8 + 76 | 0; //@line 20201
 HEAP32[$105 >> 2] = $38; //@line 20202
 sp = STACKTOP; //@line 20203
 STACKTOP = sp; //@line 20204
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_32($0) {
 $0 = $0 | 0;
 var $$019$i$4 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19372
 STACKTOP = STACKTOP + 32 | 0; //@line 19373
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19373
 $$byval_copy = sp; //@line 19374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19382
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19384
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19386
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19388
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19390
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19392
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19394
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19396
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19398
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19400
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19402
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19404
 $32 = HEAP8[$0 + 64 >> 0] | 0; //@line 19406
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19408
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19410
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19412
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(80) | 0; //@line 19417
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($28, 0, $10, 512) | 0; //@line 19418
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 100; //@line 19421
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 19422
   HEAP32[$42 >> 2] = $2; //@line 19423
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 19424
   HEAP32[$43 >> 2] = $4; //@line 19425
   $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 19426
   HEAP32[$44 >> 2] = $6; //@line 19427
   $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 19428
   HEAP32[$45 >> 2] = $8; //@line 19429
   $46 = $ReallocAsyncCtx2 + 20 | 0; //@line 19430
   HEAP32[$46 >> 2] = $10; //@line 19431
   $47 = $ReallocAsyncCtx2 + 24 | 0; //@line 19432
   HEAP32[$47 >> 2] = $12; //@line 19433
   $48 = $ReallocAsyncCtx2 + 28 | 0; //@line 19434
   HEAP32[$48 >> 2] = $14; //@line 19435
   $49 = $ReallocAsyncCtx2 + 32 | 0; //@line 19436
   HEAP32[$49 >> 2] = $16; //@line 19437
   $50 = $ReallocAsyncCtx2 + 36 | 0; //@line 19438
   HEAP32[$50 >> 2] = $18; //@line 19439
   $51 = $ReallocAsyncCtx2 + 40 | 0; //@line 19440
   HEAP32[$51 >> 2] = $20; //@line 19441
   $52 = $ReallocAsyncCtx2 + 44 | 0; //@line 19442
   HEAP32[$52 >> 2] = $22; //@line 19443
   $53 = $ReallocAsyncCtx2 + 48 | 0; //@line 19444
   HEAP32[$53 >> 2] = $24; //@line 19445
   $54 = $ReallocAsyncCtx2 + 52 | 0; //@line 19446
   HEAP32[$54 >> 2] = $26; //@line 19447
   $55 = $ReallocAsyncCtx2 + 56 | 0; //@line 19448
   HEAP32[$55 >> 2] = $28; //@line 19449
   $56 = $ReallocAsyncCtx2 + 60 | 0; //@line 19450
   HEAP32[$56 >> 2] = $30; //@line 19451
   $57 = $ReallocAsyncCtx2 + 64 | 0; //@line 19452
   HEAP8[$57 >> 0] = $32; //@line 19453
   $58 = $ReallocAsyncCtx2 + 68 | 0; //@line 19454
   HEAP32[$58 >> 2] = $34; //@line 19455
   $59 = $ReallocAsyncCtx2 + 72 | 0; //@line 19456
   HEAP32[$59 >> 2] = $36; //@line 19457
   $60 = $ReallocAsyncCtx2 + 76 | 0; //@line 19458
   HEAP32[$60 >> 2] = $38; //@line 19459
   sp = STACKTOP; //@line 19460
   STACKTOP = sp; //@line 19461
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 19464
  ___async_unwind = 0; //@line 19465
  HEAP32[$ReallocAsyncCtx2 >> 2] = 100; //@line 19466
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 19467
  HEAP32[$42 >> 2] = $2; //@line 19468
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 19469
  HEAP32[$43 >> 2] = $4; //@line 19470
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 19471
  HEAP32[$44 >> 2] = $6; //@line 19472
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 19473
  HEAP32[$45 >> 2] = $8; //@line 19474
  $46 = $ReallocAsyncCtx2 + 20 | 0; //@line 19475
  HEAP32[$46 >> 2] = $10; //@line 19476
  $47 = $ReallocAsyncCtx2 + 24 | 0; //@line 19477
  HEAP32[$47 >> 2] = $12; //@line 19478
  $48 = $ReallocAsyncCtx2 + 28 | 0; //@line 19479
  HEAP32[$48 >> 2] = $14; //@line 19480
  $49 = $ReallocAsyncCtx2 + 32 | 0; //@line 19481
  HEAP32[$49 >> 2] = $16; //@line 19482
  $50 = $ReallocAsyncCtx2 + 36 | 0; //@line 19483
  HEAP32[$50 >> 2] = $18; //@line 19484
  $51 = $ReallocAsyncCtx2 + 40 | 0; //@line 19485
  HEAP32[$51 >> 2] = $20; //@line 19486
  $52 = $ReallocAsyncCtx2 + 44 | 0; //@line 19487
  HEAP32[$52 >> 2] = $22; //@line 19488
  $53 = $ReallocAsyncCtx2 + 48 | 0; //@line 19489
  HEAP32[$53 >> 2] = $24; //@line 19490
  $54 = $ReallocAsyncCtx2 + 52 | 0; //@line 19491
  HEAP32[$54 >> 2] = $26; //@line 19492
  $55 = $ReallocAsyncCtx2 + 56 | 0; //@line 19493
  HEAP32[$55 >> 2] = $28; //@line 19494
  $56 = $ReallocAsyncCtx2 + 60 | 0; //@line 19495
  HEAP32[$56 >> 2] = $30; //@line 19496
  $57 = $ReallocAsyncCtx2 + 64 | 0; //@line 19497
  HEAP8[$57 >> 0] = $32; //@line 19498
  $58 = $ReallocAsyncCtx2 + 68 | 0; //@line 19499
  HEAP32[$58 >> 2] = $34; //@line 19500
  $59 = $ReallocAsyncCtx2 + 72 | 0; //@line 19501
  HEAP32[$59 >> 2] = $36; //@line 19502
  $60 = $ReallocAsyncCtx2 + 76 | 0; //@line 19503
  HEAP32[$60 >> 2] = $38; //@line 19504
  sp = STACKTOP; //@line 19505
  STACKTOP = sp; //@line 19506
  return;
 }
 HEAP8[$10 >> 0] = 0; //@line 19508
 HEAP8[$12 >> 0] = 1; //@line 19509
 HEAP8[$14 >> 0] = 1; //@line 19510
 HEAP8[$16 >> 0] = 0; //@line 19511
 HEAP8[$18 >> 0] = 0; //@line 19512
 HEAP8[$20 >> 0] = 1; //@line 19513
 HEAP8[$22 >> 0] = 0; //@line 19514
 HEAP8[$22 + 1 >> 0] = 0; //@line 19514
 HEAP8[$22 + 2 >> 0] = 0; //@line 19514
 HEAP8[$22 + 3 >> 0] = 0; //@line 19514
 HEAP8[$22 + 4 >> 0] = 0; //@line 19514
 HEAP8[$22 + 5 >> 0] = 0; //@line 19514
 if (!(HEAP8[$38 >> 0] | 0)) {
  $79 = $2; //@line 19518
 } else {
  $$019$i$4 = $38; //@line 19520
  $67 = $2; //@line 19520
  while (1) {
   $64 = _strcspn($$019$i$4, 3745) | 0; //@line 19522
   $66 = $67 + 1 | 0; //@line 19524
   HEAP8[$67 >> 0] = $64; //@line 19525
   $68 = $64 & 255; //@line 19526
   _memcpy($66 | 0, $$019$i$4 | 0, $68 | 0) | 0; //@line 19527
   $69 = $66 + $68 | 0; //@line 19528
   $$019$i$4 = $$019$i$4 + ($64 + ((HEAP8[$$019$i$4 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 19534
   if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
    $79 = $69; //@line 19538
    break;
   } else {
    $67 = $69; //@line 19541
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 19546
 HEAP8[$79 + 1 >> 0] = 0; //@line 19548
 HEAP8[$79 + 2 >> 0] = $32; //@line 19550
 HEAP8[$79 + 3 >> 0] = 0; //@line 19552
 HEAP8[$79 + 4 >> 0] = 1; //@line 19553
 HEAP32[$$byval_copy >> 2] = HEAP32[134]; //@line 19554
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[135]; //@line 19554
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[136]; //@line 19554
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[137]; //@line 19554
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[138]; //@line 19554
 __ZN13SocketAddressC2E10nsapi_addrt($34, $$byval_copy, 53); //@line 19555
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 19559
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($28, $34, $10, $79 + 5 - $36 | 0) | 0; //@line 19560
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 19563
  $87 = $ReallocAsyncCtx6 + 4 | 0; //@line 19564
  HEAP32[$87 >> 2] = $2; //@line 19565
  $88 = $ReallocAsyncCtx6 + 8 | 0; //@line 19566
  HEAP32[$88 >> 2] = $4; //@line 19567
  $89 = $ReallocAsyncCtx6 + 12 | 0; //@line 19568
  HEAP32[$89 >> 2] = $6; //@line 19569
  $90 = $ReallocAsyncCtx6 + 16 | 0; //@line 19570
  HEAP32[$90 >> 2] = $8; //@line 19571
  $91 = $ReallocAsyncCtx6 + 20 | 0; //@line 19572
  HEAP32[$91 >> 2] = $10; //@line 19573
  $92 = $ReallocAsyncCtx6 + 24 | 0; //@line 19574
  HEAP32[$92 >> 2] = $12; //@line 19575
  $93 = $ReallocAsyncCtx6 + 28 | 0; //@line 19576
  HEAP32[$93 >> 2] = $14; //@line 19577
  $94 = $ReallocAsyncCtx6 + 32 | 0; //@line 19578
  HEAP32[$94 >> 2] = $16; //@line 19579
  $95 = $ReallocAsyncCtx6 + 36 | 0; //@line 19580
  HEAP32[$95 >> 2] = $18; //@line 19581
  $96 = $ReallocAsyncCtx6 + 40 | 0; //@line 19582
  HEAP32[$96 >> 2] = $20; //@line 19583
  $97 = $ReallocAsyncCtx6 + 44 | 0; //@line 19584
  HEAP32[$97 >> 2] = $22; //@line 19585
  $98 = $ReallocAsyncCtx6 + 48 | 0; //@line 19586
  HEAP32[$98 >> 2] = $24; //@line 19587
  $99 = $ReallocAsyncCtx6 + 52 | 0; //@line 19588
  HEAP32[$99 >> 2] = $26; //@line 19589
  $100 = $ReallocAsyncCtx6 + 56 | 0; //@line 19590
  HEAP32[$100 >> 2] = $28; //@line 19591
  $101 = $ReallocAsyncCtx6 + 60 | 0; //@line 19592
  HEAP32[$101 >> 2] = $30; //@line 19593
  sp = STACKTOP; //@line 19594
  STACKTOP = sp; //@line 19595
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 19598
 ___async_unwind = 0; //@line 19599
 HEAP32[$ReallocAsyncCtx6 >> 2] = 101; //@line 19600
 $87 = $ReallocAsyncCtx6 + 4 | 0; //@line 19601
 HEAP32[$87 >> 2] = $2; //@line 19602
 $88 = $ReallocAsyncCtx6 + 8 | 0; //@line 19603
 HEAP32[$88 >> 2] = $4; //@line 19604
 $89 = $ReallocAsyncCtx6 + 12 | 0; //@line 19605
 HEAP32[$89 >> 2] = $6; //@line 19606
 $90 = $ReallocAsyncCtx6 + 16 | 0; //@line 19607
 HEAP32[$90 >> 2] = $8; //@line 19608
 $91 = $ReallocAsyncCtx6 + 20 | 0; //@line 19609
 HEAP32[$91 >> 2] = $10; //@line 19610
 $92 = $ReallocAsyncCtx6 + 24 | 0; //@line 19611
 HEAP32[$92 >> 2] = $12; //@line 19612
 $93 = $ReallocAsyncCtx6 + 28 | 0; //@line 19613
 HEAP32[$93 >> 2] = $14; //@line 19614
 $94 = $ReallocAsyncCtx6 + 32 | 0; //@line 19615
 HEAP32[$94 >> 2] = $16; //@line 19616
 $95 = $ReallocAsyncCtx6 + 36 | 0; //@line 19617
 HEAP32[$95 >> 2] = $18; //@line 19618
 $96 = $ReallocAsyncCtx6 + 40 | 0; //@line 19619
 HEAP32[$96 >> 2] = $20; //@line 19620
 $97 = $ReallocAsyncCtx6 + 44 | 0; //@line 19621
 HEAP32[$97 >> 2] = $22; //@line 19622
 $98 = $ReallocAsyncCtx6 + 48 | 0; //@line 19623
 HEAP32[$98 >> 2] = $24; //@line 19624
 $99 = $ReallocAsyncCtx6 + 52 | 0; //@line 19625
 HEAP32[$99 >> 2] = $26; //@line 19626
 $100 = $ReallocAsyncCtx6 + 56 | 0; //@line 19627
 HEAP32[$100 >> 2] = $28; //@line 19628
 $101 = $ReallocAsyncCtx6 + 60 | 0; //@line 19629
 HEAP32[$101 >> 2] = $30; //@line 19630
 sp = STACKTOP; //@line 19631
 STACKTOP = sp; //@line 19632
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14361
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14367
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14376
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14381
      $19 = $1 + 44 | 0; //@line 14382
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 14391
      $26 = $1 + 52 | 0; //@line 14392
      $27 = $1 + 53 | 0; //@line 14393
      $28 = $1 + 54 | 0; //@line 14394
      $29 = $0 + 8 | 0; //@line 14395
      $30 = $1 + 24 | 0; //@line 14396
      $$081$off0 = 0; //@line 14397
      $$084 = $0 + 16 | 0; //@line 14397
      $$085$off0 = 0; //@line 14397
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 14401
        label = 20; //@line 14402
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 14405
       HEAP8[$27 >> 0] = 0; //@line 14406
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14407
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 14408
       if (___async) {
        label = 12; //@line 14411
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 14414
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 14418
        label = 20; //@line 14419
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 14426
         $$186$off0 = $$085$off0; //@line 14426
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 14435
           label = 20; //@line 14436
           break L10;
          } else {
           $$182$off0 = 1; //@line 14439
           $$186$off0 = $$085$off0; //@line 14439
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 14446
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 14453
          break L10;
         } else {
          $$182$off0 = 1; //@line 14456
          $$186$off0 = 1; //@line 14456
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 14461
       $$084 = $$084 + 8 | 0; //@line 14461
       $$085$off0 = $$186$off0; //@line 14461
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 178; //@line 14464
       HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 14466
       HEAP32[$AsyncCtx15 + 8 >> 2] = $27; //@line 14468
       HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 14470
       HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 14472
       HEAP8[$AsyncCtx15 + 20 >> 0] = $4 & 1; //@line 14475
       HEAP32[$AsyncCtx15 + 24 >> 2] = $25; //@line 14477
       HEAP32[$AsyncCtx15 + 28 >> 2] = $28; //@line 14479
       HEAP32[$AsyncCtx15 + 32 >> 2] = $19; //@line 14481
       HEAP8[$AsyncCtx15 + 36 >> 0] = $$085$off0 & 1; //@line 14484
       HEAP8[$AsyncCtx15 + 37 >> 0] = $$081$off0 & 1; //@line 14487
       HEAP32[$AsyncCtx15 + 40 >> 2] = $$084; //@line 14489
       HEAP32[$AsyncCtx15 + 44 >> 2] = $29; //@line 14491
       HEAP32[$AsyncCtx15 + 48 >> 2] = $30; //@line 14493
       HEAP32[$AsyncCtx15 + 52 >> 2] = $13; //@line 14495
       sp = STACKTOP; //@line 14496
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 14502
         $61 = $1 + 40 | 0; //@line 14503
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 14506
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 14514
           if ($$283$off0) {
            label = 25; //@line 14516
            break;
           } else {
            $69 = 4; //@line 14519
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 14526
        } else {
         $69 = 4; //@line 14528
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 14533
      }
      HEAP32[$19 >> 2] = $69; //@line 14535
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 14544
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 14549
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 14550
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14551
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 14552
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 179; //@line 14555
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 14557
    HEAP32[$AsyncCtx11 + 8 >> 2] = $72; //@line 14559
    HEAP32[$AsyncCtx11 + 12 >> 2] = $73; //@line 14561
    HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 14563
    HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 14565
    HEAP32[$AsyncCtx11 + 24 >> 2] = $3; //@line 14567
    HEAP8[$AsyncCtx11 + 28 >> 0] = $4 & 1; //@line 14570
    sp = STACKTOP; //@line 14571
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14574
   $81 = $0 + 24 | 0; //@line 14575
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 14579
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 14583
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 14590
       $$2 = $81; //@line 14591
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 14603
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 14604
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 14609
        $136 = $$2 + 8 | 0; //@line 14610
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 14613
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 182; //@line 14618
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 14620
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 14622
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 14624
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 14626
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 14628
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 14630
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 14632
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 14635
       sp = STACKTOP; //@line 14636
       return;
      }
      $104 = $1 + 24 | 0; //@line 14639
      $105 = $1 + 54 | 0; //@line 14640
      $$1 = $81; //@line 14641
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 14657
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 14658
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14663
       $122 = $$1 + 8 | 0; //@line 14664
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 14667
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 181; //@line 14672
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 14674
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 14676
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 14678
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 14680
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 14682
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 14684
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 14686
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 14688
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 14691
      sp = STACKTOP; //@line 14692
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 14696
    $$0 = $81; //@line 14697
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14704
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 14705
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14710
     $100 = $$0 + 8 | 0; //@line 14711
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 14714
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 180; //@line 14719
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 14721
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 14723
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 14725
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 14727
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 14729
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 14731
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 14734
    sp = STACKTOP; //@line 14735
    return;
   }
  }
 } while (0);
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 1462
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 1463
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 1464
 $d_sroa_0_0_extract_trunc = $b$0; //@line 1465
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 1466
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 1467
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 1469
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 1472
    HEAP32[$rem + 4 >> 2] = 0; //@line 1473
   }
   $_0$1 = 0; //@line 1475
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 1476
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1477
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 1480
    $_0$0 = 0; //@line 1481
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1482
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 1484
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 1485
   $_0$1 = 0; //@line 1486
   $_0$0 = 0; //@line 1487
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1488
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 1491
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 1496
     HEAP32[$rem + 4 >> 2] = 0; //@line 1497
    }
    $_0$1 = 0; //@line 1499
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 1500
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1501
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 1505
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 1506
    }
    $_0$1 = 0; //@line 1508
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 1509
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1510
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 1512
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 1515
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 1516
    }
    $_0$1 = 0; //@line 1518
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 1519
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1520
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 1523
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 1525
    $58 = 31 - $51 | 0; //@line 1526
    $sr_1_ph = $57; //@line 1527
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 1528
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 1529
    $q_sroa_0_1_ph = 0; //@line 1530
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 1531
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 1535
    $_0$0 = 0; //@line 1536
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1537
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 1539
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 1540
   $_0$1 = 0; //@line 1541
   $_0$0 = 0; //@line 1542
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1543
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 1547
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 1549
     $126 = 31 - $119 | 0; //@line 1550
     $130 = $119 - 31 >> 31; //@line 1551
     $sr_1_ph = $125; //@line 1552
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 1553
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 1554
     $q_sroa_0_1_ph = 0; //@line 1555
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 1556
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 1560
     $_0$0 = 0; //@line 1561
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1562
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 1564
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 1565
    $_0$1 = 0; //@line 1566
    $_0$0 = 0; //@line 1567
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1568
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 1570
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 1573
    $89 = 64 - $88 | 0; //@line 1574
    $91 = 32 - $88 | 0; //@line 1575
    $92 = $91 >> 31; //@line 1576
    $95 = $88 - 32 | 0; //@line 1577
    $105 = $95 >> 31; //@line 1578
    $sr_1_ph = $88; //@line 1579
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 1580
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 1581
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 1582
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 1583
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 1587
    HEAP32[$rem + 4 >> 2] = 0; //@line 1588
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 1591
    $_0$0 = $a$0 | 0 | 0; //@line 1592
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1593
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 1595
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 1596
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 1597
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1598
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 1603
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 1604
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 1605
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 1606
  $carry_0_lcssa$1 = 0; //@line 1607
  $carry_0_lcssa$0 = 0; //@line 1608
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 1610
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 1611
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 1612
  $137$1 = tempRet0; //@line 1613
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 1614
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 1615
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 1616
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 1617
  $sr_1202 = $sr_1_ph; //@line 1618
  $carry_0203 = 0; //@line 1619
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 1621
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 1622
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 1623
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 1624
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 1625
   $150$1 = tempRet0; //@line 1626
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 1627
   $carry_0203 = $151$0 & 1; //@line 1628
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 1630
   $r_sroa_1_1200 = tempRet0; //@line 1631
   $sr_1202 = $sr_1202 - 1 | 0; //@line 1632
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 1644
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 1645
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 1646
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 1647
  $carry_0_lcssa$1 = 0; //@line 1648
  $carry_0_lcssa$0 = $carry_0203; //@line 1649
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 1651
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 1652
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 1655
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 1656
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 1658
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 1659
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 1660
}
function __Z17recv_coap_messagev() {
 var $$016$i$i = 0, $$017$i$i = 0, $$byval_copy = 0, $$pre$phi23Z2D = 0, $$pre22$pre$phiZZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $76 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10548
 STACKTOP = STACKTOP + 176 | 0; //@line 10549
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 10549
 $$byval_copy = sp + 144 | 0; //@line 10550
 $vararg_buffer19 = sp + 56 | 0; //@line 10551
 $vararg_buffer16 = sp + 48 | 0; //@line 10552
 $vararg_buffer13 = sp + 40 | 0; //@line 10553
 $vararg_buffer10 = sp + 32 | 0; //@line 10554
 $vararg_buffer7 = sp + 24 | 0; //@line 10555
 $vararg_buffer4 = sp + 16 | 0; //@line 10556
 $vararg_buffer1 = sp + 8 | 0; //@line 10557
 $vararg_buffer = sp; //@line 10558
 $0 = sp + 80 | 0; //@line 10559
 $1 = sp + 60 | 0; //@line 10560
 HEAP32[$1 >> 2] = 0; //@line 10561
 HEAP32[$1 + 4 >> 2] = 0; //@line 10561
 HEAP32[$1 + 8 >> 2] = 0; //@line 10561
 HEAP32[$1 + 12 >> 2] = 0; //@line 10561
 HEAP32[$1 + 16 >> 2] = 0; //@line 10561
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10562
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10562
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10562
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 10562
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 10562
 __ZN13SocketAddressC2E10nsapi_addrt($0, $$byval_copy, 0); //@line 10563
 $2 = _malloc(1280) | 0; //@line 10564
 $AsyncCtx23 = _emscripten_alloc_async_context(80, sp) | 0; //@line 10565
 $3 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj(6244, $0, $2, 1280) | 0; //@line 10566
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 131; //@line 10569
  HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 10571
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 10573
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 10575
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer19; //@line 10577
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer19; //@line 10579
  HEAP32[$AsyncCtx23 + 24 >> 2] = $0; //@line 10581
  HEAP32[$AsyncCtx23 + 28 >> 2] = $$byval_copy; //@line 10583
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer1; //@line 10585
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer1; //@line 10587
  HEAP32[$AsyncCtx23 + 40 >> 2] = $vararg_buffer4; //@line 10589
  HEAP32[$AsyncCtx23 + 44 >> 2] = $vararg_buffer4; //@line 10591
  HEAP32[$AsyncCtx23 + 48 >> 2] = $vararg_buffer7; //@line 10593
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer7; //@line 10595
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer10; //@line 10597
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 10599
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer13; //@line 10601
  HEAP32[$AsyncCtx23 + 68 >> 2] = $vararg_buffer13; //@line 10603
  HEAP32[$AsyncCtx23 + 72 >> 2] = $vararg_buffer16; //@line 10605
  HEAP32[$AsyncCtx23 + 76 >> 2] = $vararg_buffer16; //@line 10607
  sp = STACKTOP; //@line 10608
  STACKTOP = sp; //@line 10609
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10611
 if (($3 | 0) <= 0) {
  HEAP32[$vararg_buffer19 >> 2] = $3; //@line 10614
  _printf(2705, $vararg_buffer19) | 0; //@line 10615
  _free($2); //@line 10616
  STACKTOP = sp; //@line 10617
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $3; //@line 10619
 _printf(2532, $vararg_buffer) | 0; //@line 10620
 $24 = HEAP32[1575] | 0; //@line 10621
 $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 10623
 $26 = _sn_coap_parser($24, $3 & 65535, $2, 556) | 0; //@line 10624
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 132; //@line 10627
  HEAP32[$AsyncCtx27 + 4 >> 2] = $$byval_copy; //@line 10629
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 10631
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 10633
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer4; //@line 10635
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer4; //@line 10637
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer7; //@line 10639
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 10641
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer10; //@line 10643
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 10645
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer13; //@line 10647
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer13; //@line 10649
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer16; //@line 10651
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer16; //@line 10653
  HEAP32[$AsyncCtx27 + 56 >> 2] = $2; //@line 10655
  HEAP32[$AsyncCtx27 + 60 >> 2] = $0; //@line 10657
  sp = STACKTOP; //@line 10658
  STACKTOP = sp; //@line 10659
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10661
 $43 = HEAP32[$26 + 36 >> 2] | 0; //@line 10663
 $44 = $26 + 24 | 0; //@line 10664
 $45 = HEAP16[$44 >> 1] | 0; //@line 10665
 $46 = $45 & 65535; //@line 10666
 HEAP32[$$byval_copy >> 2] = 0; //@line 10667
 HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 10667
 HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 10667
 do {
  if (($45 & 65535) < 11) {
   $76 = $$byval_copy + 11 | 0; //@line 10672
   HEAP8[$76 >> 0] = $45; //@line 10673
   if (!($45 << 16 >> 16)) {
    $$017$i$i = $$byval_copy; //@line 10676
    $$pre$phi23Z2D = $76; //@line 10676
   } else {
    $$016$i$i = $$byval_copy; //@line 10678
    $$pre22$pre$phiZZ2D = $76; //@line 10678
    label = 11; //@line 10679
   }
  } else {
   $49 = $46 + 16 & 131056; //@line 10683
   $AsyncCtx = _emscripten_alloc_async_context(88, sp) | 0; //@line 10684
   $50 = __Znwj($49) | 0; //@line 10685
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 133; //@line 10688
    HEAP32[$AsyncCtx + 4 >> 2] = $$byval_copy; //@line 10690
    HEAP32[$AsyncCtx + 8 >> 2] = $49; //@line 10692
    HEAP32[$AsyncCtx + 12 >> 2] = $46; //@line 10694
    HEAP32[$AsyncCtx + 16 >> 2] = $43; //@line 10696
    HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 10698
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 10700
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 10702
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer4; //@line 10704
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer4; //@line 10706
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 10708
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer7; //@line 10710
    HEAP32[$AsyncCtx + 48 >> 2] = $44; //@line 10712
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer10; //@line 10714
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer10; //@line 10716
    HEAP32[$AsyncCtx + 60 >> 2] = $$byval_copy; //@line 10718
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer13; //@line 10720
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer13; //@line 10722
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer16; //@line 10724
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer16; //@line 10726
    HEAP32[$AsyncCtx + 80 >> 2] = $2; //@line 10728
    HEAP32[$AsyncCtx + 84 >> 2] = $0; //@line 10730
    sp = STACKTOP; //@line 10731
    STACKTOP = sp; //@line 10732
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10734
    HEAP32[$$byval_copy >> 2] = $50; //@line 10735
    HEAP32[$$byval_copy + 8 >> 2] = $49 | -2147483648; //@line 10738
    HEAP32[$$byval_copy + 4 >> 2] = $46; //@line 10740
    $$016$i$i = $50; //@line 10742
    $$pre22$pre$phiZZ2D = $$byval_copy + 11 | 0; //@line 10742
    label = 11; //@line 10743
    break;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  _memcpy($$016$i$i | 0, $43 | 0, $46 | 0) | 0; //@line 10749
  $$017$i$i = $$016$i$i; //@line 10750
  $$pre$phi23Z2D = $$pre22$pre$phiZZ2D; //@line 10750
 }
 HEAP8[$$017$i$i + $46 >> 0] = 0; //@line 10753
 HEAP32[$vararg_buffer1 >> 2] = HEAPU16[$26 + 20 >> 1]; //@line 10757
 _printf(2567, $vararg_buffer1) | 0; //@line 10758
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 10761
 _printf(2590, $vararg_buffer4) | 0; //@line 10762
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 10765
 _printf(2613, $vararg_buffer7) | 0; //@line 10766
 HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$44 >> 1]; //@line 10769
 _printf(2636, $vararg_buffer10) | 0; //@line 10770
 HEAP32[$vararg_buffer13 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$$byval_copy >> 2] | 0 : $$byval_copy; //@line 10775
 _printf(2659, $vararg_buffer13) | 0; //@line 10776
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$26 + 40 >> 2]; //@line 10779
 _printf(2682, $vararg_buffer16) | 0; //@line 10780
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 10785
 }
 _free($2); //@line 10787
 STACKTOP = sp; //@line 10788
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_38($0) {
 $0 = $0 | 0;
 var $$019$i = 0, $$2 = 0, $$byval_copy = 0, $$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20539
 STACKTOP = STACKTOP + 32 | 0; //@line 20540
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 20540
 $$byval_copy = sp; //@line 20541
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20543
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20545
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20547
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20549
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20551
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20553
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20555
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20557
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20559
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($10, 5e3); //@line 20562
  $19 = _malloc(512) | 0; //@line 20563
  if (!$19) {
   $$2 = -3007; //@line 20566
  } else {
   $21 = $19; //@line 20568
   $22 = $19 + 1 | 0; //@line 20569
   $23 = $19 + 2 | 0; //@line 20570
   $24 = $19 + 3 | 0; //@line 20571
   $25 = $19 + 4 | 0; //@line 20572
   $26 = $19 + 5 | 0; //@line 20573
   $27 = $19 + 6 | 0; //@line 20574
   $28 = $19 + 7 | 0; //@line 20575
   $29 = $19 + 12 | 0; //@line 20576
   $$sink$i = ($16 | 0) == 2 ? 28 : 1; //@line 20578
   HEAP8[$19 >> 0] = 0; //@line 20579
   HEAP8[$22 >> 0] = 1; //@line 20580
   HEAP8[$23 >> 0] = 1; //@line 20581
   HEAP8[$24 >> 0] = 0; //@line 20582
   HEAP8[$25 >> 0] = 0; //@line 20583
   HEAP8[$26 >> 0] = 1; //@line 20584
   HEAP8[$27 >> 0] = 0; //@line 20585
   HEAP8[$27 + 1 >> 0] = 0; //@line 20585
   HEAP8[$27 + 2 >> 0] = 0; //@line 20585
   HEAP8[$27 + 3 >> 0] = 0; //@line 20585
   HEAP8[$27 + 4 >> 0] = 0; //@line 20585
   HEAP8[$27 + 5 >> 0] = 0; //@line 20585
   if (!(HEAP8[$2 >> 0] | 0)) {
    $48 = $29; //@line 20589
   } else {
    $$019$i = $2; //@line 20591
    $36 = $29; //@line 20591
    while (1) {
     $33 = _strcspn($$019$i, 3745) | 0; //@line 20593
     $35 = $36 + 1 | 0; //@line 20595
     HEAP8[$36 >> 0] = $33; //@line 20596
     $37 = $33 & 255; //@line 20597
     _memcpy($35 | 0, $$019$i | 0, $37 | 0) | 0; //@line 20598
     $38 = $35 + $37 | 0; //@line 20599
     $$019$i = $$019$i + ($33 + ((HEAP8[$$019$i + $33 >> 0] | 0) == 46 & 1)) | 0; //@line 20605
     if (!(HEAP8[$$019$i >> 0] | 0)) {
      $48 = $38; //@line 20609
      break;
     } else {
      $36 = $38; //@line 20612
     }
    }
   }
   HEAP8[$48 >> 0] = 0; //@line 20617
   HEAP8[$48 + 1 >> 0] = 0; //@line 20619
   HEAP8[$48 + 2 >> 0] = $$sink$i; //@line 20621
   HEAP8[$48 + 3 >> 0] = 0; //@line 20623
   HEAP8[$48 + 4 >> 0] = 1; //@line 20624
   HEAP32[$$byval_copy >> 2] = HEAP32[114]; //@line 20625
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[115]; //@line 20625
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[116]; //@line 20625
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[117]; //@line 20625
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[118]; //@line 20625
   __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy, 53); //@line 20626
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(80) | 0; //@line 20630
   $55 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($12, $14, $19, $48 + 5 - $21 | 0) | 0; //@line 20631
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 91; //@line 20634
    $56 = $ReallocAsyncCtx10 + 4 | 0; //@line 20635
    HEAP32[$56 >> 2] = $29; //@line 20636
    $57 = $ReallocAsyncCtx10 + 8 | 0; //@line 20637
    HEAP32[$57 >> 2] = $2; //@line 20638
    $58 = $ReallocAsyncCtx10 + 12 | 0; //@line 20639
    HEAP32[$58 >> 2] = $4; //@line 20640
    $59 = $ReallocAsyncCtx10 + 16 | 0; //@line 20641
    HEAP32[$59 >> 2] = $6; //@line 20642
    $60 = $ReallocAsyncCtx10 + 20 | 0; //@line 20643
    HEAP32[$60 >> 2] = $8; //@line 20644
    $61 = $ReallocAsyncCtx10 + 24 | 0; //@line 20645
    HEAP32[$61 >> 2] = $19; //@line 20646
    $62 = $ReallocAsyncCtx10 + 28 | 0; //@line 20647
    HEAP32[$62 >> 2] = $22; //@line 20648
    $63 = $ReallocAsyncCtx10 + 32 | 0; //@line 20649
    HEAP32[$63 >> 2] = $23; //@line 20650
    $64 = $ReallocAsyncCtx10 + 36 | 0; //@line 20651
    HEAP32[$64 >> 2] = $24; //@line 20652
    $65 = $ReallocAsyncCtx10 + 40 | 0; //@line 20653
    HEAP32[$65 >> 2] = $25; //@line 20654
    $66 = $ReallocAsyncCtx10 + 44 | 0; //@line 20655
    HEAP32[$66 >> 2] = $26; //@line 20656
    $67 = $ReallocAsyncCtx10 + 48 | 0; //@line 20657
    HEAP32[$67 >> 2] = $27; //@line 20658
    $68 = $ReallocAsyncCtx10 + 52 | 0; //@line 20659
    HEAP32[$68 >> 2] = $28; //@line 20660
    $69 = $ReallocAsyncCtx10 + 56 | 0; //@line 20661
    HEAP32[$69 >> 2] = $10; //@line 20662
    $70 = $ReallocAsyncCtx10 + 60 | 0; //@line 20663
    HEAP32[$70 >> 2] = $12; //@line 20664
    $71 = $ReallocAsyncCtx10 + 64 | 0; //@line 20665
    HEAP32[$71 >> 2] = $14; //@line 20666
    $72 = $ReallocAsyncCtx10 + 68 | 0; //@line 20667
    HEAP8[$72 >> 0] = $$sink$i; //@line 20668
    $73 = $ReallocAsyncCtx10 + 72 | 0; //@line 20669
    HEAP32[$73 >> 2] = $14; //@line 20670
    $74 = $ReallocAsyncCtx10 + 76 | 0; //@line 20671
    HEAP32[$74 >> 2] = $21; //@line 20672
    sp = STACKTOP; //@line 20673
    STACKTOP = sp; //@line 20674
    return;
   }
   HEAP32[___async_retval >> 2] = $55; //@line 20677
   ___async_unwind = 0; //@line 20678
   HEAP32[$ReallocAsyncCtx10 >> 2] = 91; //@line 20679
   $56 = $ReallocAsyncCtx10 + 4 | 0; //@line 20680
   HEAP32[$56 >> 2] = $29; //@line 20681
   $57 = $ReallocAsyncCtx10 + 8 | 0; //@line 20682
   HEAP32[$57 >> 2] = $2; //@line 20683
   $58 = $ReallocAsyncCtx10 + 12 | 0; //@line 20684
   HEAP32[$58 >> 2] = $4; //@line 20685
   $59 = $ReallocAsyncCtx10 + 16 | 0; //@line 20686
   HEAP32[$59 >> 2] = $6; //@line 20687
   $60 = $ReallocAsyncCtx10 + 20 | 0; //@line 20688
   HEAP32[$60 >> 2] = $8; //@line 20689
   $61 = $ReallocAsyncCtx10 + 24 | 0; //@line 20690
   HEAP32[$61 >> 2] = $19; //@line 20691
   $62 = $ReallocAsyncCtx10 + 28 | 0; //@line 20692
   HEAP32[$62 >> 2] = $22; //@line 20693
   $63 = $ReallocAsyncCtx10 + 32 | 0; //@line 20694
   HEAP32[$63 >> 2] = $23; //@line 20695
   $64 = $ReallocAsyncCtx10 + 36 | 0; //@line 20696
   HEAP32[$64 >> 2] = $24; //@line 20697
   $65 = $ReallocAsyncCtx10 + 40 | 0; //@line 20698
   HEAP32[$65 >> 2] = $25; //@line 20699
   $66 = $ReallocAsyncCtx10 + 44 | 0; //@line 20700
   HEAP32[$66 >> 2] = $26; //@line 20701
   $67 = $ReallocAsyncCtx10 + 48 | 0; //@line 20702
   HEAP32[$67 >> 2] = $27; //@line 20703
   $68 = $ReallocAsyncCtx10 + 52 | 0; //@line 20704
   HEAP32[$68 >> 2] = $28; //@line 20705
   $69 = $ReallocAsyncCtx10 + 56 | 0; //@line 20706
   HEAP32[$69 >> 2] = $10; //@line 20707
   $70 = $ReallocAsyncCtx10 + 60 | 0; //@line 20708
   HEAP32[$70 >> 2] = $12; //@line 20709
   $71 = $ReallocAsyncCtx10 + 64 | 0; //@line 20710
   HEAP32[$71 >> 2] = $14; //@line 20711
   $72 = $ReallocAsyncCtx10 + 68 | 0; //@line 20712
   HEAP8[$72 >> 0] = $$sink$i; //@line 20713
   $73 = $ReallocAsyncCtx10 + 72 | 0; //@line 20714
   HEAP32[$73 >> 2] = $14; //@line 20715
   $74 = $ReallocAsyncCtx10 + 76 | 0; //@line 20716
   HEAP32[$74 >> 2] = $21; //@line 20717
   sp = STACKTOP; //@line 20718
   STACKTOP = sp; //@line 20719
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 20722
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 20724
 __ZN9UDPSocketD2Ev($12); //@line 20725
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 94; //@line 20728
  $76 = $ReallocAsyncCtx11 + 4 | 0; //@line 20729
  HEAP32[$76 >> 2] = $8; //@line 20730
  $77 = $ReallocAsyncCtx11 + 8 | 0; //@line 20731
  HEAP32[$77 >> 2] = $$2; //@line 20732
  sp = STACKTOP; //@line 20733
  STACKTOP = sp; //@line 20734
  return;
 }
 ___async_unwind = 0; //@line 20736
 HEAP32[$ReallocAsyncCtx11 >> 2] = 94; //@line 20737
 $76 = $ReallocAsyncCtx11 + 4 | 0; //@line 20738
 HEAP32[$76 >> 2] = $8; //@line 20739
 $77 = $ReallocAsyncCtx11 + 8 | 0; //@line 20740
 HEAP32[$77 >> 2] = $$2; //@line 20741
 sp = STACKTOP; //@line 20742
 STACKTOP = sp; //@line 20743
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9932
 STACKTOP = STACKTOP + 32 | 0; //@line 9933
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9933
 $0 = sp; //@line 9934
 _gpio_init_out($0, 50); //@line 9935
 while (1) {
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9938
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9939
  _wait_ms(150); //@line 9940
  if (___async) {
   label = 3; //@line 9943
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 9946
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 9948
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9949
  _wait_ms(150); //@line 9950
  if (___async) {
   label = 5; //@line 9953
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 9956
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9958
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9959
  _wait_ms(150); //@line 9960
  if (___async) {
   label = 7; //@line 9963
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 9966
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 9968
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9969
  _wait_ms(150); //@line 9970
  if (___async) {
   label = 9; //@line 9973
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 9976
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9978
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9979
  _wait_ms(150); //@line 9980
  if (___async) {
   label = 11; //@line 9983
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 9986
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 9988
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9989
  _wait_ms(150); //@line 9990
  if (___async) {
   label = 13; //@line 9993
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9996
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 9998
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9999
  _wait_ms(150); //@line 10000
  if (___async) {
   label = 15; //@line 10003
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 10006
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10008
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10009
  _wait_ms(150); //@line 10010
  if (___async) {
   label = 17; //@line 10013
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 10016
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10018
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10019
  _wait_ms(400); //@line 10020
  if (___async) {
   label = 19; //@line 10023
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10026
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10028
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10029
  _wait_ms(400); //@line 10030
  if (___async) {
   label = 21; //@line 10033
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10036
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10038
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10039
  _wait_ms(400); //@line 10040
  if (___async) {
   label = 23; //@line 10043
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 10046
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10048
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10049
  _wait_ms(400); //@line 10050
  if (___async) {
   label = 25; //@line 10053
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10056
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10058
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10059
  _wait_ms(400); //@line 10060
  if (___async) {
   label = 27; //@line 10063
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10066
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10068
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10069
  _wait_ms(400); //@line 10070
  if (___async) {
   label = 29; //@line 10073
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10076
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 10078
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10079
  _wait_ms(400); //@line 10080
  if (___async) {
   label = 31; //@line 10083
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10086
  _emscripten_asm_const_iii(8, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 10088
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10089
  _wait_ms(400); //@line 10090
  if (___async) {
   label = 33; //@line 10093
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10096
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 105; //@line 10100
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 10102
   sp = STACKTOP; //@line 10103
   STACKTOP = sp; //@line 10104
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 106; //@line 10108
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 10110
   sp = STACKTOP; //@line 10111
   STACKTOP = sp; //@line 10112
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 107; //@line 10116
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 10118
   sp = STACKTOP; //@line 10119
   STACKTOP = sp; //@line 10120
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 108; //@line 10124
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 10126
   sp = STACKTOP; //@line 10127
   STACKTOP = sp; //@line 10128
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 109; //@line 10132
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 10134
   sp = STACKTOP; //@line 10135
   STACKTOP = sp; //@line 10136
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 110; //@line 10140
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 10142
   sp = STACKTOP; //@line 10143
   STACKTOP = sp; //@line 10144
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 111; //@line 10148
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 10150
   sp = STACKTOP; //@line 10151
   STACKTOP = sp; //@line 10152
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 112; //@line 10156
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 10158
   sp = STACKTOP; //@line 10159
   STACKTOP = sp; //@line 10160
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 113; //@line 10164
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 10166
   sp = STACKTOP; //@line 10167
   STACKTOP = sp; //@line 10168
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 114; //@line 10172
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 10174
   sp = STACKTOP; //@line 10175
   STACKTOP = sp; //@line 10176
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 115; //@line 10180
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 10182
   sp = STACKTOP; //@line 10183
   STACKTOP = sp; //@line 10184
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 116; //@line 10188
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 10190
   sp = STACKTOP; //@line 10191
   STACKTOP = sp; //@line 10192
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 117; //@line 10196
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10198
   sp = STACKTOP; //@line 10199
   STACKTOP = sp; //@line 10200
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 118; //@line 10204
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10206
   sp = STACKTOP; //@line 10207
   STACKTOP = sp; //@line 10208
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 119; //@line 10212
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10214
   sp = STACKTOP; //@line 10215
   STACKTOP = sp; //@line 10216
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 120; //@line 10220
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10222
   sp = STACKTOP; //@line 10223
   STACKTOP = sp; //@line 10224
   return;
  }
 }
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7533
   $$0106$ph = 24; //@line 7533
   label = 4; //@line 7534
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7538
   $$0106$ph = 53; //@line 7538
   label = 4; //@line 7539
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7543
   $$0106$ph = 53; //@line 7543
   label = 4; //@line 7544
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7548
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7553
   $4 = $0 + 100 | 0; //@line 7554
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7556
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7561
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7564
    } else {
     $12 = ___shgetc($0) | 0; //@line 7567
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7581
      $19 = HEAP32[$3 >> 2] | 0; //@line 7582
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7587
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7590
       $$0113 = $18; //@line 7590
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7594
       $$0113 = $18; //@line 7594
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7600
      $$0113 = 1; //@line 7600
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7604
   $$1128 = $$0; //@line 7604
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[2938 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7612
     $$1$lcssa = $$1128; //@line 7612
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7618
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7623
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7626
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7630
       break;
      }
     } else {
      $$2 = $$1128; //@line 7634
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7637
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7640
     $$1128 = $$2; //@line 7640
    } else {
     $$0107$lcssa = $39; //@line 7642
     $$1$lcssa = $$2; //@line 7642
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7652
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7657
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7664
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7671
        $$3126 = $$1$lcssa; //@line 7671
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[3721 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7679
          $$5 = $$3126; //@line 7679
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7685
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7690
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7693
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7697
            break;
           }
          } else {
           $$4 = $$3126; //@line 7701
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7704
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7707
          $$3126 = $$4; //@line 7707
         } else {
          $$3110 = $70; //@line 7709
          $$5 = $$4; //@line 7709
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7714
        $$5 = $$1$lcssa; //@line 7714
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7719
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7724
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7727
        } else {
         $80 = ___shgetc($0) | 0; //@line 7730
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7734
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7739
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7744
         $$0114 = nan; //@line 7745
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7749
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7754
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7757
         } else {
          $93 = ___shgetc($0) | 0; //@line 7760
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7777
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7781
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7785
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7789
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7793
         ___shlim($0, 0); //@line 7794
         $$0114 = 0.0; //@line 7795
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7800
         break L4;
        } else {
         $$in = $$4111; //@line 7803
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7806
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7810
         }
         if (!$$in) {
          $$0114 = nan; //@line 7814
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7825
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7830
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7833
         } else {
          $126 = ___shgetc($0) | 0; //@line 7836
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7842
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7848
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7852
          $$6 = 48; //@line 7853
         }
        } else {
         $$6 = $$5; //@line 7856
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7859
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7869
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7872
        ___shlim($0, 0); //@line 7873
        $$0114 = 0.0; //@line 7874
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7883
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7887
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7893
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7898
      }
      $$1108 = $$1108 + -1 | 0; //@line 7900
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7913
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3247
 $3 = HEAP32[$2 >> 2] | 0; //@line 3248
 $4 = $3 & -8; //@line 3249
 $5 = $0 + $4 | 0; //@line 3250
 $6 = HEAP32[1580] | 0; //@line 3251
 $8 = $3 & 3; //@line 3253
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3259
 }
 $11 = $5 + 4 | 0; //@line 3262
 $12 = HEAP32[$11 >> 2] | 0; //@line 3263
 if (!($12 & 1)) {
  _abort(); //@line 3267
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3274
   return $$2 | 0; //@line 3275
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[1696] << 1 >>> 0) {
    $$2 = $0; //@line 3285
    return $$2 | 0; //@line 3286
   }
  }
  $$2 = 0; //@line 3289
  return $$2 | 0; //@line 3290
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3294
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3297
   return $$2 | 0; //@line 3298
  }
  $26 = $0 + $1 | 0; //@line 3300
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3304
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3307
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3310
  _dispose_chunk($26, $24); //@line 3311
  $$2 = $0; //@line 3312
  return $$2 | 0; //@line 3313
 }
 if ((HEAP32[1582] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1579] | 0) + $4 | 0; //@line 3319
  $39 = $37 - $1 | 0; //@line 3321
  $40 = $0 + $1 | 0; //@line 3322
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3324
   return $$2 | 0; //@line 3325
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3332
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3333
  HEAP32[1582] = $40; //@line 3334
  HEAP32[1579] = $39; //@line 3335
  $$2 = $0; //@line 3336
  return $$2 | 0; //@line 3337
 }
 if ((HEAP32[1581] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1578] | 0) + $4 | 0; //@line 3343
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3346
   return $$2 | 0; //@line 3347
  }
  $51 = $49 - $1 | 0; //@line 3349
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3352
   $54 = $0 + $49 | 0; //@line 3353
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3357
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3360
   HEAP32[$54 >> 2] = $51; //@line 3361
   $60 = $54 + 4 | 0; //@line 3362
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3365
   $storemerge = $53; //@line 3366
   $storemerge4 = $51; //@line 3366
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3371
   $67 = $0 + $49 + 4 | 0; //@line 3373
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3376
   $storemerge = 0; //@line 3377
   $storemerge4 = 0; //@line 3377
  }
  HEAP32[1578] = $storemerge4; //@line 3379
  HEAP32[1581] = $storemerge; //@line 3380
  $$2 = $0; //@line 3381
  return $$2 | 0; //@line 3382
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3387
  return $$2 | 0; //@line 3388
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3391
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3394
  return $$2 | 0; //@line 3395
 }
 $75 = $73 - $1 | 0; //@line 3397
 $76 = $12 >>> 3; //@line 3398
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3403
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3405
   $83 = 6344 + ($76 << 1 << 2) | 0; //@line 3407
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3412
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3419
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1576] = HEAP32[1576] & ~(1 << $76); //@line 3429
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3435
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3439
    }
    $96 = $81 + 8 | 0; //@line 3442
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3446
    } else {
     _abort(); //@line 3448
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3453
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3454
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3457
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3459
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3463
     $115 = $114 + 4 | 0; //@line 3464
     $116 = HEAP32[$115 >> 2] | 0; //@line 3465
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3468
      if (!$118) {
       $$3 = 0; //@line 3471
       break;
      } else {
       $$1272 = $118; //@line 3474
       $$1275 = $114; //@line 3474
      }
     } else {
      $$1272 = $116; //@line 3477
      $$1275 = $115; //@line 3477
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3480
      $121 = HEAP32[$120 >> 2] | 0; //@line 3481
      if ($121 | 0) {
       $$1272 = $121; //@line 3484
       $$1275 = $120; //@line 3484
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3487
      $124 = HEAP32[$123 >> 2] | 0; //@line 3488
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3493
       $$1275 = $123; //@line 3493
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3498
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3501
      $$3 = $$1272; //@line 3502
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3507
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3510
     }
     $108 = $106 + 12 | 0; //@line 3513
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3517
     }
     $111 = $103 + 8 | 0; //@line 3520
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3524
      HEAP32[$111 >> 2] = $106; //@line 3525
      $$3 = $103; //@line 3526
      break;
     } else {
      _abort(); //@line 3529
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3537
    $130 = 6608 + ($129 << 2) | 0; //@line 3538
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3543
      if (!$$3) {
       HEAP32[1577] = HEAP32[1577] & ~(1 << $129); //@line 3550
       break L49;
      }
     } else {
      if ((HEAP32[1580] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3557
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3565
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1580] | 0; //@line 3575
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3578
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3582
    $147 = $5 + 16 | 0; //@line 3583
    $148 = HEAP32[$147 >> 2] | 0; //@line 3584
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3590
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3594
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3596
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3602
    if ($154 | 0) {
     if ((HEAP32[1580] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3608
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3612
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3614
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3626
  $165 = $0 + $73 + 4 | 0; //@line 3628
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3631
  $$2 = $0; //@line 3632
  return $$2 | 0; //@line 3633
 } else {
  $168 = $0 + $1 | 0; //@line 3635
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3639
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3642
  $175 = $0 + $73 + 4 | 0; //@line 3644
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3647
  _dispose_chunk($168, $75); //@line 3648
  $$2 = $0; //@line 3649
  return $$2 | 0; //@line 3650
 }
 return 0; //@line 3652
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$lcssa$i = 0, $10 = 0, $109 = 0, $114 = 0, $115 = 0, $117 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $196 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $45 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $90 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16919
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16921
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16923
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16925
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16927
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16929
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16931
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16933
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16935
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16937
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16939
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16941
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16943
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16945
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16947
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16949
 if (($AsyncRetVal | 0) == -3001) {
  $$355 = -3009; //@line 16952
 } else {
  if (($AsyncRetVal | 0) < 0) {
   $$355 = $AsyncRetVal; //@line 16956
  } else {
   $45 = (HEAPU8[$18 >> 0] | 0) << 8 | (HEAPU8[$20 >> 0] | 0); //@line 16972
   $51 = (HEAPU8[$22 >> 0] | 0) << 8 | (HEAPU8[$24 >> 0] | 0); //@line 16978
   if (((HEAP8[$14 >> 0] & -8) << 24 >> 24 == -128 ? ((HEAPU8[$10 >> 0] | 0) << 8 | (HEAPU8[$12 >> 0] | 0) | 0) == 1 : 0) & (HEAP8[$16 >> 0] & 15) == 0) {
    if (!$45) {
     $196 = $2; //@line 16988
    } else {
     $$093119$i = 0; //@line 16990
     $59 = $2; //@line 16990
     while (1) {
      $58 = HEAP8[$59 >> 0] | 0; //@line 16992
      if (!($58 << 24 >> 24)) {
       $$lcssa$i = $59; //@line 16995
      } else {
       $64 = $59; //@line 16997
       $66 = $58; //@line 16997
       while (1) {
        $67 = $64 + 1 + ($66 & 255) | 0; //@line 17001
        $66 = HEAP8[$67 >> 0] | 0; //@line 17002
        if (!($66 << 24 >> 24)) {
         $$lcssa$i = $67; //@line 17005
         break;
        } else {
         $64 = $67; //@line 17008
        }
       }
      }
      $70 = $$lcssa$i + 5 | 0; //@line 17012
      $$093119$i = $$093119$i + 1 | 0; //@line 17013
      if (($$093119$i | 0) >= ($45 | 0)) {
       $196 = $70; //@line 17018
       break;
      } else {
       $59 = $70; //@line 17016
      }
     }
    }
    if (($4 | 0) != 0 & ($51 | 0) != 0) {
     $$090117$i = $6; //@line 17027
     $$094116$i = 0; //@line 17027
     $$095115$i = 0; //@line 17027
     $74 = $196; //@line 17027
     while (1) {
      $75 = HEAP8[$74 >> 0] | 0; //@line 17030
      do {
       if (!($75 << 24 >> 24)) {
        $90 = $74 + 1 | 0; //@line 17034
       } else {
        $79 = $75 & 255; //@line 17037
        $82 = $74; //@line 17037
        while (1) {
         if ($79 & 192 | 0) {
          label = 12; //@line 17042
          break;
         }
         $84 = $82 + 1 + $79 | 0; //@line 17046
         $85 = HEAP8[$84 >> 0] | 0; //@line 17047
         if (!($85 << 24 >> 24)) {
          label = 14; //@line 17051
          break;
         } else {
          $79 = $85 & 255; //@line 17054
          $82 = $84; //@line 17054
         }
        }
        if ((label | 0) == 12) {
         label = 0; //@line 17058
         $90 = $82 + 2 | 0; //@line 17060
         break;
        } else if ((label | 0) == 14) {
         label = 0; //@line 17064
         $90 = $84 + 1 | 0; //@line 17066
         break;
        }
       }
      } while (0);
      $98 = ((HEAPU8[$90 >> 0] | 0) << 8 | (HEAPU8[$90 + 1 >> 0] | 0)) & 65535; //@line 17079
      $109 = $90 + 10 | 0; //@line 17090
      $114 = (HEAPU8[$90 + 8 >> 0] | 0) << 8 | (HEAPU8[$90 + 9 >> 0] | 0); //@line 17095
      $115 = $114 & 65535; //@line 17096
      $117 = ((HEAPU8[$90 + 2 >> 0] | 0) << 8 | (HEAPU8[$90 + 3 >> 0] | 0) | 0) == 1; //@line 17098
      do {
       if ($98 << 16 >> 16 == 1 & $117 & $115 << 16 >> 16 == 4) {
        HEAP32[$$090117$i >> 2] = 1; //@line 17104
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$109 >> 0] | 0; //@line 17108
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$90 + 11 >> 0] | 0; //@line 17112
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$90 + 12 >> 0] | 0; //@line 17116
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$90 + 13 >> 0] | 0; //@line 17120
        $$0 = $90 + 14 | 0; //@line 17123
        $$1$i = $$090117$i + 20 | 0; //@line 17123
        $$196$i = $$095115$i + 1 | 0; //@line 17123
       } else {
        if ($98 << 16 >> 16 == 28 & $117 & $115 << 16 >> 16 == 16) {
         HEAP32[$$090117$i >> 2] = 2; //@line 17130
         HEAP8[$$090117$i + 4 >> 0] = HEAP8[$109 >> 0] | 0; //@line 17134
         HEAP8[$$090117$i + 5 >> 0] = HEAP8[$90 + 11 >> 0] | 0; //@line 17138
         HEAP8[$$090117$i + 6 >> 0] = HEAP8[$90 + 12 >> 0] | 0; //@line 17142
         HEAP8[$$090117$i + 7 >> 0] = HEAP8[$90 + 13 >> 0] | 0; //@line 17146
         HEAP8[$$090117$i + 8 >> 0] = HEAP8[$90 + 14 >> 0] | 0; //@line 17150
         HEAP8[$$090117$i + 9 >> 0] = HEAP8[$90 + 15 >> 0] | 0; //@line 17154
         HEAP8[$$090117$i + 10 >> 0] = HEAP8[$90 + 16 >> 0] | 0; //@line 17158
         HEAP8[$$090117$i + 11 >> 0] = HEAP8[$90 + 17 >> 0] | 0; //@line 17162
         HEAP8[$$090117$i + 12 >> 0] = HEAP8[$90 + 18 >> 0] | 0; //@line 17166
         HEAP8[$$090117$i + 13 >> 0] = HEAP8[$90 + 19 >> 0] | 0; //@line 17170
         HEAP8[$$090117$i + 14 >> 0] = HEAP8[$90 + 20 >> 0] | 0; //@line 17174
         HEAP8[$$090117$i + 15 >> 0] = HEAP8[$90 + 21 >> 0] | 0; //@line 17178
         HEAP8[$$090117$i + 16 >> 0] = HEAP8[$90 + 22 >> 0] | 0; //@line 17182
         HEAP8[$$090117$i + 17 >> 0] = HEAP8[$90 + 23 >> 0] | 0; //@line 17186
         HEAP8[$$090117$i + 18 >> 0] = HEAP8[$90 + 24 >> 0] | 0; //@line 17190
         HEAP8[$$090117$i + 19 >> 0] = HEAP8[$90 + 25 >> 0] | 0; //@line 17194
         $$0 = $90 + 26 | 0; //@line 17197
         $$1$i = $$090117$i + 20 | 0; //@line 17197
         $$196$i = $$095115$i + 1 | 0; //@line 17197
         break;
        } else {
         $$0 = $109 + $114 | 0; //@line 17201
         $$1$i = $$090117$i; //@line 17201
         $$196$i = $$095115$i; //@line 17201
         break;
        }
       }
      } while (0);
      $$094116$i = $$094116$i + 1 | 0; //@line 17206
      if (!(($$094116$i | 0) < ($51 | 0) & $$196$i >>> 0 < $4 >>> 0)) {
       $$089$i = $$196$i; //@line 17213
       break;
      } else {
       $$090117$i = $$1$i; //@line 17211
       $$095115$i = $$196$i; //@line 17211
       $74 = $$0; //@line 17211
      }
     }
    } else {
     $$089$i = 0; //@line 17218
    }
   } else {
    $$089$i = 0; //@line 17221
   }
   $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 17225
  }
 }
 _free($10); //@line 17228
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 17229
 $190 = __ZN6Socket5closeEv($26) | 0; //@line 17230
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 17233
  $191 = $ReallocAsyncCtx12 + 4 | 0; //@line 17234
  HEAP32[$191 >> 2] = $$355; //@line 17235
  $192 = $ReallocAsyncCtx12 + 8 | 0; //@line 17236
  HEAP32[$192 >> 2] = $28; //@line 17237
  $193 = $ReallocAsyncCtx12 + 12 | 0; //@line 17238
  HEAP32[$193 >> 2] = $8; //@line 17239
  sp = STACKTOP; //@line 17240
  return;
 }
 HEAP32[___async_retval >> 2] = $190; //@line 17244
 ___async_unwind = 0; //@line 17245
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 17246
 $191 = $ReallocAsyncCtx12 + 4 | 0; //@line 17247
 HEAP32[$191 >> 2] = $$355; //@line 17248
 $192 = $ReallocAsyncCtx12 + 8 | 0; //@line 17249
 HEAP32[$192 >> 2] = $28; //@line 17250
 $193 = $ReallocAsyncCtx12 + 12 | 0; //@line 17251
 HEAP32[$193 >> 2] = $8; //@line 17252
 sp = STACKTOP; //@line 17253
 return;
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9471
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9471
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9472
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9473
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9473
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9474
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9475
 $8 = $6 & 2047; //@line 9477
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9478
 $11 = $9 & 2047; //@line 9480
 $12 = $3 & -2147483648; //@line 9481
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9482
 $14 = tempRet0; //@line 9483
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9489
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9491
   $20 = tempRet0 & 2147483647; //@line 9493
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9502
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9504
    $30 = tempRet0; //@line 9505
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9521
     $42 = tempRet0; //@line 9522
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9529
      $49 = $41; //@line 9529
      $50 = $42; //@line 9529
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9531
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9532
       $50 = tempRet0; //@line 9533
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9542
        break;
       } else {
        $$073100 = $48; //@line 9540
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9547
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9550
     $$174 = $$073$lcssa; //@line 9552
     $87 = $59; //@line 9552
     $88 = tempRet0; //@line 9552
    } else {
     $$174 = $8; //@line 9556
     $87 = $2; //@line 9556
     $88 = $3 & 1048575 | 1048576; //@line 9556
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9560
     $65 = tempRet0; //@line 9561
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9568
      $72 = $64; //@line 9568
      $73 = $65; //@line 9568
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9570
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9571
       $73 = tempRet0; //@line 9572
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9581
        break;
       } else {
        $$07194 = $71; //@line 9579
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9586
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9589
     $$172$ph = $$071$lcssa; //@line 9591
     $89 = $82; //@line 9591
     $90 = tempRet0; //@line 9591
    } else {
     $$172$ph = $11; //@line 9595
     $89 = $4; //@line 9595
     $90 = $5 & 1048575 | 1048576; //@line 9595
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9598
    $92 = tempRet0; //@line 9599
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9604
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9607
      $101 = $92; //@line 9607
      $156 = $97; //@line 9607
      $157 = $87; //@line 9607
      $158 = $88; //@line 9607
      $99 = $91; //@line 9607
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9616
         $105 = $101; //@line 9616
        }
       } else {
        $104 = $157; //@line 9619
        $105 = $158; //@line 9619
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9621
       $107 = tempRet0; //@line 9622
       $108 = $$27586 + -1 | 0; //@line 9623
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9625
       $111 = tempRet0; //@line 9626
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9631
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9633
        $101 = $111; //@line 9633
        $156 = $116; //@line 9633
        $157 = $106; //@line 9633
        $158 = $107; //@line 9633
        $99 = $110; //@line 9633
       } else {
        $$275$lcssa = $108; //@line 9635
        $$lcssa = $116; //@line 9635
        $118 = $110; //@line 9635
        $120 = $111; //@line 9635
        $159 = $106; //@line 9635
        $160 = $107; //@line 9635
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9640
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9643
      $$lcssa = $97; //@line 9643
      $118 = $91; //@line 9643
      $120 = $92; //@line 9643
      $159 = $87; //@line 9643
      $160 = $88; //@line 9643
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9652
      break;
     } else {
      $123 = $120; //@line 9655
      $125 = $118; //@line 9655
     }
    } else {
     $123 = $160; //@line 9658
     $125 = $159; //@line 9658
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9666
     $130 = $125; //@line 9666
     $131 = $123; //@line 9666
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9668
      $133 = tempRet0; //@line 9669
      $134 = $$37683 + -1 | 0; //@line 9670
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9677
       $130 = $132; //@line 9677
       $131 = $133; //@line 9677
      } else {
       $$376$lcssa = $134; //@line 9679
       $141 = $132; //@line 9679
       $142 = $133; //@line 9679
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9684
     $141 = $125; //@line 9684
     $142 = $123; //@line 9684
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9688
     $144 = tempRet0; //@line 9689
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9690
     $153 = $144 | tempRet0; //@line 9694
     $154 = $143 | $145; //@line 9694
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9697
     $153 = tempRet0; //@line 9699
     $154 = $150; //@line 9699
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9702
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9702
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9703
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9708
  $$070 = $27 / $27; //@line 9710
 }
 return +$$070;
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$025$i = 0, $$02537$i = 0, $$026$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $$pre$phi$iZ2D = 0, $103 = 0, $110 = 0, $117 = 0, $124 = 0, $130 = 0, $2 = 0, $25 = 0, $33 = 0, $4 = 0, $42 = 0, $52 = 0, $6 = 0, $62 = 0, $65 = 0, $72 = 0, $76 = 0, $82 = 0, $89 = 0, $9 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7265
 STACKTOP = STACKTOP + 48 | 0; //@line 7266
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7266
 $vararg_buffer7 = sp + 24 | 0; //@line 7267
 $vararg_buffer4 = sp + 16 | 0; //@line 7268
 $vararg_buffer1 = sp + 8 | 0; //@line 7269
 $vararg_buffer = sp; //@line 7270
 $2 = sp + 32 | 0; //@line 7271
 HEAP8[$0 >> 0] = 0; //@line 7272
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 7276
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 7280
     $6 = $4; //@line 7280
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 7287
       $$02636$i = 0; //@line 7287
       $52 = $4; //@line 7287
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 7290
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 7292
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 7295
       break;
      } else {
       $$016$i = $9; //@line 7298
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 7310
       $$02636$i = 0; //@line 7310
       $52 = $4; //@line 7310
      } else {
       break;
      }
     }
     do {
      if (!(($52 + -48 & 255) < 10 | ($52 + -97 & 255) < 6)) {
       switch ($52 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($52 << 24 >> 24 == 58 & 1) | 0; //@line 7333
      $$02537$i = $$02537$i + 1 | 0; //@line 7334
      $52 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 7336
     } while ($52 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 7349
     $62 = $0 + 44 | 0; //@line 7350
     $$025$i = 0; //@line 7351
     L17 : while (1) {
      switch (HEAP8[$1 + $$025$i >> 0] | 0) {
      case 0:
       {
        label = 34; //@line 7357
        break L17;
        break;
       }
      case 58:
       {
        $65 = $$025$i + 1 | 0; //@line 7362
        if ((HEAP8[$1 + $65 >> 0] | 0) == 58) {
         label = 33; //@line 7367
         break L17;
        } else {
         $$025$i = $65; //@line 7370
         continue L17;
        }
        break;
       }
      default:
       {
        $$025$i = $$025$i + 1 | 0; //@line 7377
        continue L17;
       }
      }
     }
     if ((label | 0) == 33) {
      $$026$i = __ZL15ipv6_scan_chunkPtPKc($2, $1 + ($$025$i + 2) | 0) | 0; //@line 7386
      $$pre$phi$iZ2D = $2; //@line 7386
     } else if ((label | 0) == 34) {
      $$026$i = 0; //@line 7389
      $$pre$phi$iZ2D = $2; //@line 7389
     }
     $72 = 8 - $$026$i | 0; //@line 7391
     _memmove($2 + ($72 << 1) | 0, $2 | 0, $$026$i << 1 | 0) | 0; //@line 7394
     _memset($2 | 0, 0, $72 << 1 | 0) | 0; //@line 7396
     __ZL15ipv6_scan_chunkPtPKc($$pre$phi$iZ2D, $1) | 0; //@line 7397
     $76 = HEAP16[$$pre$phi$iZ2D >> 1] | 0; //@line 7398
     HEAP8[$62 >> 0] = ($76 & 65535) >>> 8; //@line 7401
     HEAP8[$0 + 45 >> 0] = $76; //@line 7404
     $82 = HEAP16[$2 + 2 >> 1] | 0; //@line 7406
     HEAP8[$0 + 46 >> 0] = ($82 & 65535) >>> 8; //@line 7410
     HEAP8[$0 + 47 >> 0] = $82; //@line 7413
     $89 = HEAP16[$2 + 4 >> 1] | 0; //@line 7415
     HEAP8[$0 + 48 >> 0] = ($89 & 65535) >>> 8; //@line 7419
     HEAP8[$0 + 49 >> 0] = $89; //@line 7422
     $96 = HEAP16[$2 + 6 >> 1] | 0; //@line 7424
     HEAP8[$0 + 50 >> 0] = ($96 & 65535) >>> 8; //@line 7428
     HEAP8[$0 + 51 >> 0] = $96; //@line 7431
     $103 = HEAP16[$2 + 8 >> 1] | 0; //@line 7433
     HEAP8[$0 + 52 >> 0] = ($103 & 65535) >>> 8; //@line 7437
     HEAP8[$0 + 53 >> 0] = $103; //@line 7440
     $110 = HEAP16[$2 + 10 >> 1] | 0; //@line 7442
     HEAP8[$0 + 54 >> 0] = ($110 & 65535) >>> 8; //@line 7446
     HEAP8[$0 + 55 >> 0] = $110; //@line 7449
     $117 = HEAP16[$2 + 12 >> 1] | 0; //@line 7451
     HEAP8[$0 + 56 >> 0] = ($117 & 65535) >>> 8; //@line 7455
     HEAP8[$0 + 57 >> 0] = $117; //@line 7458
     $124 = HEAP16[$2 + 14 >> 1] | 0; //@line 7460
     HEAP8[$0 + 58 >> 0] = ($124 & 65535) >>> 8; //@line 7464
     HEAP8[$0 + 59 >> 0] = $124; //@line 7467
     $$0 = 1; //@line 7468
     STACKTOP = sp; //@line 7469
     return $$0 | 0; //@line 7469
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 7473
   HEAP32[$vararg_buffer >> 2] = $2; //@line 7474
   L28 : do {
    if ((_sscanf($1, 2257, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7481
     $$1$i = 0; //@line 7482
     L30 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L28;
        break;
       }
      case 46:
       {
        break L30;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 7499
     }
     $25 = $$1$i + 1 | 0; //@line 7501
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 7503
     if ((_sscanf($1 + $25 | 0, 2257, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7509
      $$1$1$i = $25; //@line 7510
      L35 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L28;
         break;
        }
       case 46:
        {
         break L35;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 7527
      }
      $33 = $$1$1$i + 1 | 0; //@line 7529
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 7531
      if ((_sscanf($1 + $33 | 0, 2257, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7537
       $$1$2$i = $33; //@line 7538
       L40 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L28;
          break;
         }
        case 46:
         {
          break L40;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 7555
       }
       $42 = $$1$2$i + 1 | 0; //@line 7557
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 7559
       if ((_sscanf($1 + $42 | 0, 2257, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP8[$2 >> 0] | 0; //@line 7565
        $$1$3$i = $42; //@line 7566
        L45 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L28;
           break;
          }
         case 46:
          {
           break L45;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 7583
        }
        $$0 = 1; //@line 7585
        STACKTOP = sp; //@line 7586
        return $$0 | 0; //@line 7586
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 7592
   STACKTOP = sp; //@line 7593
   return $$0 | 0; //@line 7593
  }
 } while (0);
 $130 = $0 + 40 | 0; //@line 7596
 HEAP32[$130 >> 2] = 0; //@line 7597
 HEAP32[$130 + 4 >> 2] = 0; //@line 7597
 HEAP32[$130 + 8 >> 2] = 0; //@line 7597
 HEAP32[$130 + 12 >> 2] = 0; //@line 7597
 HEAP32[$130 + 16 >> 2] = 0; //@line 7597
 $$0 = 0; //@line 7598
 STACKTOP = sp; //@line 7599
 return $$0 | 0; //@line 7599
}
function __Z17recv_coap_messagev__async_cb_73($0) {
 $0 = $0 | 0;
 var $$017$i$i = 0, $$pre$phi23Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 35
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 37
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 39
 $33 = HEAP32[$AsyncRetVal + 36 >> 2] | 0; //@line 41
 $34 = $AsyncRetVal + 24 | 0; //@line 42
 $35 = HEAP16[$34 >> 1] | 0; //@line 43
 $36 = $35 & 65535; //@line 44
 HEAP32[$2 >> 2] = 0; //@line 45
 HEAP32[$2 + 4 >> 2] = 0; //@line 45
 HEAP32[$2 + 8 >> 2] = 0; //@line 45
 if (($35 & 65535) >= 11) {
  $39 = $36 + 16 & 131056; //@line 49
  $ReallocAsyncCtx = _emscripten_realloc_async_context(88) | 0; //@line 50
  $40 = __Znwj($39) | 0; //@line 51
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 133; //@line 54
   $41 = $ReallocAsyncCtx + 4 | 0; //@line 55
   HEAP32[$41 >> 2] = $2; //@line 56
   $42 = $ReallocAsyncCtx + 8 | 0; //@line 57
   HEAP32[$42 >> 2] = $39; //@line 58
   $43 = $ReallocAsyncCtx + 12 | 0; //@line 59
   HEAP32[$43 >> 2] = $36; //@line 60
   $44 = $ReallocAsyncCtx + 16 | 0; //@line 61
   HEAP32[$44 >> 2] = $33; //@line 62
   $45 = $ReallocAsyncCtx + 20 | 0; //@line 63
   HEAP32[$45 >> 2] = $AsyncRetVal; //@line 64
   $46 = $ReallocAsyncCtx + 24 | 0; //@line 65
   HEAP32[$46 >> 2] = $4; //@line 66
   $47 = $ReallocAsyncCtx + 28 | 0; //@line 67
   HEAP32[$47 >> 2] = $6; //@line 68
   $48 = $ReallocAsyncCtx + 32 | 0; //@line 69
   HEAP32[$48 >> 2] = $8; //@line 70
   $49 = $ReallocAsyncCtx + 36 | 0; //@line 71
   HEAP32[$49 >> 2] = $10; //@line 72
   $50 = $ReallocAsyncCtx + 40 | 0; //@line 73
   HEAP32[$50 >> 2] = $12; //@line 74
   $51 = $ReallocAsyncCtx + 44 | 0; //@line 75
   HEAP32[$51 >> 2] = $14; //@line 76
   $52 = $ReallocAsyncCtx + 48 | 0; //@line 77
   HEAP32[$52 >> 2] = $34; //@line 78
   $53 = $ReallocAsyncCtx + 52 | 0; //@line 79
   HEAP32[$53 >> 2] = $16; //@line 80
   $54 = $ReallocAsyncCtx + 56 | 0; //@line 81
   HEAP32[$54 >> 2] = $18; //@line 82
   $55 = $ReallocAsyncCtx + 60 | 0; //@line 83
   HEAP32[$55 >> 2] = $2; //@line 84
   $56 = $ReallocAsyncCtx + 64 | 0; //@line 85
   HEAP32[$56 >> 2] = $20; //@line 86
   $57 = $ReallocAsyncCtx + 68 | 0; //@line 87
   HEAP32[$57 >> 2] = $22; //@line 88
   $58 = $ReallocAsyncCtx + 72 | 0; //@line 89
   HEAP32[$58 >> 2] = $24; //@line 90
   $59 = $ReallocAsyncCtx + 76 | 0; //@line 91
   HEAP32[$59 >> 2] = $26; //@line 92
   $60 = $ReallocAsyncCtx + 80 | 0; //@line 93
   HEAP32[$60 >> 2] = $28; //@line 94
   $61 = $ReallocAsyncCtx + 84 | 0; //@line 95
   HEAP32[$61 >> 2] = $30; //@line 96
   sp = STACKTOP; //@line 97
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 101
  ___async_unwind = 0; //@line 102
  HEAP32[$ReallocAsyncCtx >> 2] = 133; //@line 103
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 104
  HEAP32[$41 >> 2] = $2; //@line 105
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 106
  HEAP32[$42 >> 2] = $39; //@line 107
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 108
  HEAP32[$43 >> 2] = $36; //@line 109
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 110
  HEAP32[$44 >> 2] = $33; //@line 111
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 112
  HEAP32[$45 >> 2] = $AsyncRetVal; //@line 113
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 114
  HEAP32[$46 >> 2] = $4; //@line 115
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 116
  HEAP32[$47 >> 2] = $6; //@line 117
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 118
  HEAP32[$48 >> 2] = $8; //@line 119
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 120
  HEAP32[$49 >> 2] = $10; //@line 121
  $50 = $ReallocAsyncCtx + 40 | 0; //@line 122
  HEAP32[$50 >> 2] = $12; //@line 123
  $51 = $ReallocAsyncCtx + 44 | 0; //@line 124
  HEAP32[$51 >> 2] = $14; //@line 125
  $52 = $ReallocAsyncCtx + 48 | 0; //@line 126
  HEAP32[$52 >> 2] = $34; //@line 127
  $53 = $ReallocAsyncCtx + 52 | 0; //@line 128
  HEAP32[$53 >> 2] = $16; //@line 129
  $54 = $ReallocAsyncCtx + 56 | 0; //@line 130
  HEAP32[$54 >> 2] = $18; //@line 131
  $55 = $ReallocAsyncCtx + 60 | 0; //@line 132
  HEAP32[$55 >> 2] = $2; //@line 133
  $56 = $ReallocAsyncCtx + 64 | 0; //@line 134
  HEAP32[$56 >> 2] = $20; //@line 135
  $57 = $ReallocAsyncCtx + 68 | 0; //@line 136
  HEAP32[$57 >> 2] = $22; //@line 137
  $58 = $ReallocAsyncCtx + 72 | 0; //@line 138
  HEAP32[$58 >> 2] = $24; //@line 139
  $59 = $ReallocAsyncCtx + 76 | 0; //@line 140
  HEAP32[$59 >> 2] = $26; //@line 141
  $60 = $ReallocAsyncCtx + 80 | 0; //@line 142
  HEAP32[$60 >> 2] = $28; //@line 143
  $61 = $ReallocAsyncCtx + 84 | 0; //@line 144
  HEAP32[$61 >> 2] = $30; //@line 145
  sp = STACKTOP; //@line 146
  return;
 }
 $64 = $2 + 11 | 0; //@line 150
 HEAP8[$64 >> 0] = $35; //@line 151
 if (!($35 << 16 >> 16)) {
  $$017$i$i = $2; //@line 154
  $$pre$phi23Z2D = $64; //@line 154
 } else {
  _memcpy($2 | 0, $33 | 0, $36 | 0) | 0; //@line 156
  $$017$i$i = $2; //@line 157
  $$pre$phi23Z2D = $64; //@line 157
 }
 HEAP8[$$017$i$i + $36 >> 0] = 0; //@line 160
 HEAP32[$4 >> 2] = HEAPU16[$AsyncRetVal + 20 >> 1]; //@line 164
 _printf(2567, $4) | 0; //@line 165
 HEAP32[$8 >> 2] = HEAP32[$AsyncRetVal + 8 >> 2]; //@line 168
 _printf(2590, $8) | 0; //@line 169
 HEAP32[$12 >> 2] = HEAP32[$AsyncRetVal + 16 >> 2]; //@line 172
 _printf(2613, $12) | 0; //@line 173
 HEAP32[$16 >> 2] = HEAPU16[$34 >> 1]; //@line 176
 _printf(2636, $16) | 0; //@line 177
 HEAP32[$20 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2; //@line 182
 _printf(2659, $20) | 0; //@line 183
 HEAP32[$24 >> 2] = HEAP32[$AsyncRetVal + 40 >> 2]; //@line 186
 _printf(2682, $24) | 0; //@line 187
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 192
 }
 _free($28); //@line 194
 return;
}
function _main() {
 var $$0 = 0, $0 = 0, $12 = 0, $13 = 0, $19 = 0, $25 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10795
 STACKTOP = STACKTOP + 880 | 0; //@line 10796
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880); //@line 10796
 $vararg_buffer1 = sp + 8 | 0; //@line 10797
 $vararg_buffer = sp; //@line 10798
 $0 = sp + 16 | 0; //@line 10799
 __ZN17EthernetInterfaceC2Ev($0); //@line 10800
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10804
  _puts(2737) | 0; //@line 10805
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 134; //@line 10808
   HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 10810
   sp = STACKTOP; //@line 10811
   STACKTOP = sp; //@line 10812
   return 0; //@line 10812
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10814
  $$0 = 1; //@line 10815
  STACKTOP = sp; //@line 10816
  return $$0 | 0; //@line 10816
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10818
 _puts(2786) | 0; //@line 10819
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 135; //@line 10822
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 10824
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 10826
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 10828
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 10830
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 10832
  HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 10834
  sp = STACKTOP; //@line 10835
  STACKTOP = sp; //@line 10836
  return 0; //@line 10836
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10838
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 10841
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10842
 $13 = FUNCTION_TABLE_ii[$12 & 15]($0) | 0; //@line 10843
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 136; //@line 10846
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 10848
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 10850
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10852
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 10854
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 10856
  sp = STACKTOP; //@line 10857
  STACKTOP = sp; //@line 10858
  return 0; //@line 10858
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10860
 $19 = __Z18nsapi_create_stackP12NetworkStack($13) | 0; //@line 10861
 $AsyncCtx24 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10862
 __ZN6Socket4openEP12NetworkStack(6244, $19) | 0; //@line 10863
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 137; //@line 10866
  HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 10868
  HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer; //@line 10870
  HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer1; //@line 10872
  HEAP32[$AsyncCtx24 + 16 >> 2] = $vararg_buffer1; //@line 10874
  HEAP32[$AsyncCtx24 + 20 >> 2] = $0; //@line 10876
  sp = STACKTOP; //@line 10877
  STACKTOP = sp; //@line 10878
  return 0; //@line 10878
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10880
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10881
 $25 = _sn_coap_protocol_init(12, 138, 10, 14) | 0; //@line 10882
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 139; //@line 10885
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 10887
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 10889
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 10891
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer1; //@line 10893
  HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 10895
  sp = STACKTOP; //@line 10896
  STACKTOP = sp; //@line 10897
  return 0; //@line 10897
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 10899
 HEAP32[1575] = $25; //@line 10900
 $31 = _calloc(44, 1) | 0; //@line 10901
 HEAP32[$31 + 32 >> 2] = 2832; //@line 10903
 HEAP16[$31 + 22 >> 1] = 6; //@line 10905
 HEAP32[$31 + 8 >> 2] = 1; //@line 10907
 HEAP16[$31 + 20 >> 1] = 7; //@line 10909
 $37 = (_sn_coap_builder_calc_needed_packet_data_size($31) | 0) & 65535; //@line 10911
 HEAP32[$vararg_buffer >> 2] = $37; //@line 10912
 _printf(2839, $vararg_buffer) | 0; //@line 10913
 $38 = _malloc($37) | 0; //@line 10914
 _sn_coap_builder($38, $31) | 0; //@line 10915
 $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10916
 $39 = __ZN9UDPSocket6sendtoEPKctPKvj(6244, 2876, 5683, $38, $37) | 0; //@line 10917
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 140; //@line 10920
  HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 10922
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer1; //@line 10924
  HEAP32[$AsyncCtx20 + 12 >> 2] = $31; //@line 10926
  HEAP32[$AsyncCtx20 + 16 >> 2] = $38; //@line 10928
  HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 10930
  sp = STACKTOP; //@line 10931
  STACKTOP = sp; //@line 10932
  return 0; //@line 10932
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10934
 HEAP32[$vararg_buffer1 >> 2] = $39; //@line 10935
 HEAP32[$vararg_buffer1 + 4 >> 2] = 2832; //@line 10937
 _printf(2884, $vararg_buffer1) | 0; //@line 10938
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10939
 __Z17recv_coap_messagev(); //@line 10940
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 141; //@line 10943
  HEAP32[$AsyncCtx6 + 4 >> 2] = $31; //@line 10945
  HEAP32[$AsyncCtx6 + 8 >> 2] = $38; //@line 10947
  HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 10949
  sp = STACKTOP; //@line 10950
  STACKTOP = sp; //@line 10951
  return 0; //@line 10951
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10953
 _free($31); //@line 10954
 _free($38); //@line 10955
 $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10956
 _puts(2932) | 0; //@line 10957
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 142; //@line 10960
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 10962
  sp = STACKTOP; //@line 10963
  STACKTOP = sp; //@line 10964
  return 0; //@line 10964
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10966
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10967
 _wait(4294967296.0); //@line 10968
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 143; //@line 10971
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 10973
  sp = STACKTOP; //@line 10974
  STACKTOP = sp; //@line 10975
  return 0; //@line 10975
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 10977
 $$0 = 0; //@line 10978
 STACKTOP = sp; //@line 10979
 return $$0 | 0; //@line 10979
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6831
 STACKTOP = STACKTOP + 32 | 0; //@line 6832
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6832
 $2 = sp + 16 | 0; //@line 6833
 $3 = sp; //@line 6834
 $4 = $0 + 4 | 0; //@line 6835
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 6841
  STACKTOP = sp; //@line 6842
  return $$1 | 0; //@line 6842
 }
 HEAP32[$4 >> 2] = $1; //@line 6844
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] | 0; //@line 6847
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 6850
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 6851
 $14 = FUNCTION_TABLE_ii[$13 & 15]($0) | 0; //@line 6852
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 68; //@line 6855
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6857
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6859
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 6861
  HEAP32[$AsyncCtx + 16 >> 2] = $10; //@line 6863
  HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6865
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6867
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 6869
  sp = STACKTOP; //@line 6870
  STACKTOP = sp; //@line 6871
  return 0; //@line 6871
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6873
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6874
 $22 = FUNCTION_TABLE_iiii[$10 & 15]($1, $2, $14) | 0; //@line 6875
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 69; //@line 6878
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6880
  HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 6882
  HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 6884
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6886
  HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 6888
  sp = STACKTOP; //@line 6889
  STACKTOP = sp; //@line 6890
  return 0; //@line 6890
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6892
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 6897
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 6898
   $31 = $3 + 12 | 0; //@line 6899
   HEAP32[$3 >> 2] = 12; //@line 6900
   HEAP32[$3 + 4 >> 2] = 1; //@line 6902
   HEAP32[$3 + 8 >> 2] = $0; //@line 6904
   HEAP32[$31 >> 2] = 420; //@line 6905
   $32 = $0 + 16 | 0; //@line 6906
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 420; //@line 6910
     label = 16; //@line 6911
    } else {
     $34 = $0 + 28 | 0; //@line 6913
     $35 = HEAP32[$34 >> 2] | 0; //@line 6914
     if (!$35) {
      $48 = 420; //@line 6917
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 6920
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6921
      FUNCTION_TABLE_vi[$38 & 255]($32); //@line 6922
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 70; //@line 6925
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 6927
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 6929
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 6931
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 6933
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 6935
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 6937
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 6939
       sp = STACKTOP; //@line 6940
       STACKTOP = sp; //@line 6941
       return 0; //@line 6941
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6943
      $$pre = HEAP32[$31 >> 2] | 0; //@line 6944
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 6947
       break;
      } else {
       $48 = $$pre; //@line 6950
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 6954
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6955
     FUNCTION_TABLE_vii[$49 & 3]($32, $3); //@line 6956
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 71; //@line 6959
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 6961
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 6963
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 6965
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 6967
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 6969
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 6971
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 6973
      sp = STACKTOP; //@line 6974
      STACKTOP = sp; //@line 6975
      return 0; //@line 6975
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6977
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 6978
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 6980
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 6985
       label = 16; //@line 6986
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 6995
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6996
     FUNCTION_TABLE_vi[$61 & 255]($3); //@line 6997
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 72; //@line 7000
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 7002
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 7004
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 7006
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 7008
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 7010
      sp = STACKTOP; //@line 7011
      STACKTOP = sp; //@line 7012
      return 0; //@line 7012
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 7014
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 7019
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 68 >> 2] | 0; //@line 7022
   $71 = HEAP32[$30 >> 2] | 0; //@line 7023
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7024
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 73, $32); //@line 7025
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 74; //@line 7028
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 7030
    sp = STACKTOP; //@line 7031
    STACKTOP = sp; //@line 7032
    return 0; //@line 7032
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7034
    $$0 = 0; //@line 7035
    break;
   }
  } else {
   $$0 = $22; //@line 7039
  }
 } while (0);
 $$1 = $$0; //@line 7042
 STACKTOP = sp; //@line 7043
 return $$1 | 0; //@line 7043
}
function __ZL15ipv6_scan_chunkPtPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$ph = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$4 = 0, $$124$5 = 0, $$124$6 = 0, $$124$7 = 0, $$2 = 0, $17 = 0, $2 = 0, $26 = 0, $35 = 0, $44 = 0, $53 = 0, $62 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 7609
 STACKTOP = STACKTOP + 64 | 0; //@line 7610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7610
 $vararg_buffer19 = sp + 56 | 0; //@line 7611
 $vararg_buffer16 = sp + 48 | 0; //@line 7612
 $vararg_buffer13 = sp + 40 | 0; //@line 7613
 $vararg_buffer10 = sp + 32 | 0; //@line 7614
 $vararg_buffer7 = sp + 24 | 0; //@line 7615
 $vararg_buffer4 = sp + 16 | 0; //@line 7616
 $vararg_buffer1 = sp + 8 | 0; //@line 7617
 $vararg_buffer = sp; //@line 7618
 $2 = sp + 60 | 0; //@line 7619
 HEAP32[$vararg_buffer >> 2] = $2; //@line 7620
 L1 : do {
  if ((_sscanf($1, 2262, $vararg_buffer) | 0) < 1) {
   $$1$ph = 0; //@line 7625
  } else {
   HEAP16[$0 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7628
   $$124 = 0; //@line 7629
   L3 : while (1) {
    switch (HEAP8[$1 + $$124 >> 0] | 0) {
    case 0:
     {
      $$1$ph = 1; //@line 7635
      break L1;
      break;
     }
    case 58:
     {
      break L3;
      break;
     }
    default:
     {}
    }
    $$124 = $$124 + 1 | 0; //@line 7647
   }
   $9 = $$124 + 1 | 0; //@line 7649
   HEAP32[$vararg_buffer1 >> 2] = $2; //@line 7651
   if ((_sscanf($1 + $9 | 0, 2262, $vararg_buffer1) | 0) < 1) {
    $$1$ph = 1; //@line 7655
   } else {
    HEAP16[$0 + 2 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7659
    $$124$1 = $9; //@line 7660
    L8 : while (1) {
     switch (HEAP8[$1 + $$124$1 >> 0] | 0) {
     case 0:
      {
       $$1$ph = 2; //@line 7666
       break L1;
       break;
      }
     case 58:
      {
       break L8;
       break;
      }
     default:
      {}
     }
     $$124$1 = $$124$1 + 1 | 0; //@line 7678
    }
    $17 = $$124$1 + 1 | 0; //@line 7680
    HEAP32[$vararg_buffer4 >> 2] = $2; //@line 7682
    if ((_sscanf($1 + $17 | 0, 2262, $vararg_buffer4) | 0) < 1) {
     $$1$ph = 2; //@line 7686
    } else {
     HEAP16[$0 + 4 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7690
     $$124$2 = $17; //@line 7691
     L13 : while (1) {
      switch (HEAP8[$1 + $$124$2 >> 0] | 0) {
      case 0:
       {
        $$1$ph = 3; //@line 7697
        break L1;
        break;
       }
      case 58:
       {
        break L13;
        break;
       }
      default:
       {}
      }
      $$124$2 = $$124$2 + 1 | 0; //@line 7709
     }
     $26 = $$124$2 + 1 | 0; //@line 7711
     HEAP32[$vararg_buffer7 >> 2] = $2; //@line 7713
     if ((_sscanf($1 + $26 | 0, 2262, $vararg_buffer7) | 0) < 1) {
      $$1$ph = 3; //@line 7717
     } else {
      HEAP16[$0 + 6 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7721
      $$124$3 = $26; //@line 7722
      L18 : while (1) {
       switch (HEAP8[$1 + $$124$3 >> 0] | 0) {
       case 0:
        {
         $$1$ph = 4; //@line 7728
         break L1;
         break;
        }
       case 58:
        {
         break L18;
         break;
        }
       default:
        {}
       }
       $$124$3 = $$124$3 + 1 | 0; //@line 7740
      }
      $35 = $$124$3 + 1 | 0; //@line 7742
      HEAP32[$vararg_buffer10 >> 2] = $2; //@line 7744
      if ((_sscanf($1 + $35 | 0, 2262, $vararg_buffer10) | 0) < 1) {
       $$1$ph = 4; //@line 7748
      } else {
       HEAP16[$0 + 8 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7752
       $$124$4 = $35; //@line 7753
       L23 : while (1) {
        switch (HEAP8[$1 + $$124$4 >> 0] | 0) {
        case 0:
         {
          $$1$ph = 5; //@line 7759
          break L1;
          break;
         }
        case 58:
         {
          break L23;
          break;
         }
        default:
         {}
        }
        $$124$4 = $$124$4 + 1 | 0; //@line 7771
       }
       $44 = $$124$4 + 1 | 0; //@line 7773
       HEAP32[$vararg_buffer13 >> 2] = $2; //@line 7775
       if ((_sscanf($1 + $44 | 0, 2262, $vararg_buffer13) | 0) < 1) {
        $$1$ph = 5; //@line 7779
       } else {
        HEAP16[$0 + 10 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7783
        $$124$5 = $44; //@line 7784
        L28 : while (1) {
         switch (HEAP8[$1 + $$124$5 >> 0] | 0) {
         case 0:
          {
           $$1$ph = 6; //@line 7790
           break L1;
           break;
          }
         case 58:
          {
           break L28;
           break;
          }
         default:
          {}
         }
         $$124$5 = $$124$5 + 1 | 0; //@line 7802
        }
        $53 = $$124$5 + 1 | 0; //@line 7804
        HEAP32[$vararg_buffer16 >> 2] = $2; //@line 7806
        if ((_sscanf($1 + $53 | 0, 2262, $vararg_buffer16) | 0) < 1) {
         $$1$ph = 6; //@line 7810
        } else {
         HEAP16[$0 + 12 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7814
         $$124$6 = $53; //@line 7815
         L33 : while (1) {
          switch (HEAP8[$1 + $$124$6 >> 0] | 0) {
          case 0:
           {
            $$1$ph = 7; //@line 7821
            break L1;
            break;
           }
          case 58:
           {
            break L33;
            break;
           }
          default:
           {}
          }
          $$124$6 = $$124$6 + 1 | 0; //@line 7833
         }
         $62 = $$124$6 + 1 | 0; //@line 7835
         HEAP32[$vararg_buffer19 >> 2] = $2; //@line 7837
         if ((_sscanf($1 + $62 | 0, 2262, $vararg_buffer19) | 0) < 1) {
          $$1$ph = 7; //@line 7841
         } else {
          HEAP16[$0 + 14 >> 1] = HEAP16[$2 >> 1] | 0; //@line 7845
          $$124$7 = $62; //@line 7846
          L38 : while (1) {
           switch (HEAP8[$1 + $$124$7 >> 0] | 0) {
           case 0:
            {
             $$1$ph = 8; //@line 7852
             break L1;
             break;
            }
           case 58:
            {
             break L38;
             break;
            }
           default:
            {}
           }
           $$124$7 = $$124$7 + 1 | 0; //@line 7864
          }
          $$2 = 8; //@line 7866
          STACKTOP = sp; //@line 7867
          return $$2 | 0; //@line 7867
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $$2 = $$1$ph; //@line 7877
 STACKTOP = sp; //@line 7878
 return $$2 | 0; //@line 7878
}
function _sn_coap_parser_options_parse_multiple_options__async_cb($0) {
 $0 = $0 | 0;
 var $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$us = 0, $$sink = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $52 = 0, $57 = 0, $6 = 0, $61 = 0, $63 = 0, $66 = 0, $71 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $80 = 0, $85 = 0, $87 = 0, $96 = 0, $AsyncRetVal = 0, $trunc = 0, $trunc110 = 0, label = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 22196
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22198
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22200
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22202
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22204
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22206
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 22208
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22210
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22212
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 22213
 if (!$AsyncRetVal) {
  $$064 = -1; //@line 22216
  $96 = ___async_retval; //@line 22217
  HEAP8[$96 >> 0] = $$064; //@line 22218
  return;
 }
 HEAP16[$4 >> 1] = $2; //@line 22221
 $19 = HEAP32[$6 >> 2] | 0; //@line 22222
 if (($8 | 0) <= 0) {
  $$064 = 0; //@line 22225
  $96 = ___async_retval; //@line 22226
  HEAP8[$96 >> 0] = $$064; //@line 22227
  return;
 }
 if (($16 | 0) == 20) {
  $$06378$us = $19; //@line 22232
  $$06577$us = $14; //@line 22232
  $$080$us = 0; //@line 22232
  while (1) {
   if (!($$080$us << 24 >> 24)) {
    $$1$us = $$06378$us; //@line 22236
   } else {
    HEAP8[$$06378$us >> 0] = 38; //@line 22238
    $$1$us = $$06378$us + 1 | 0; //@line 22240
   }
   $24 = $$080$us + 1 << 24 >> 24; //@line 22242
   $26 = (HEAP32[$10 >> 2] | 0) + 1 | 0; //@line 22244
   HEAP32[$10 >> 2] = $26; //@line 22245
   $29 = $$06577$us & 65535; //@line 22248
   if (($$1$us + $29 - (HEAP32[$6 >> 2] | 0) | 0) > ($12 | 0)) {
    $$064 = -1; //@line 22253
    label = 28; //@line 22254
    break;
   }
   _memcpy($$1$us | 0, $26 | 0, $29 | 0) | 0; //@line 22257
   $34 = (HEAP32[$10 >> 2] | 0) + $29 | 0; //@line 22259
   HEAP32[$10 >> 2] = $34; //@line 22260
   $$06378$us = $$1$us + $29 | 0; //@line 22261
   $36 = HEAP32[$6 >> 2] | 0; //@line 22262
   $37 = $$06378$us; //@line 22263
   if (($37 - $36 | 0) >= ($12 | 0)) {
    $$064 = $24; //@line 22267
    label = 28; //@line 22268
    break;
   }
   $trunc110 = HEAP8[$34 >> 0] | 0; //@line 22271
   $40 = $trunc110 & 255; //@line 22272
   if ($40 & 240 | 0) {
    $$064 = $24; //@line 22276
    label = 28; //@line 22277
    break;
   }
   switch ($trunc110 & 15) {
   case 13:
    {
     $52 = $34 + 1 | 0; //@line 22284
     $$sink87 = $52; //@line 22288
     $$sink88 = (HEAPU8[$52 >> 0] | 0) + 13 | 0; //@line 22288
     label = 13; //@line 22289
     break;
    }
   case 14:
    {
     $43 = $34 + 2 | 0; //@line 22293
     $$sink87 = $43; //@line 22302
     $$sink88 = (HEAPU8[$43 >> 0] | 0) + 269 + ((HEAPU8[$34 + 1 >> 0] | 0) << 8) | 0; //@line 22302
     label = 13; //@line 22303
     break;
    }
   default:
    {
     $$065$be$us$in = $40 & 15; //@line 22307
     $57 = $36; //@line 22307
    }
   }
   if ((label | 0) == 13) {
    label = 0; //@line 22311
    HEAP32[$10 >> 2] = $$sink87; //@line 22312
    $$065$be$us$in = $$sink88; //@line 22314
    $57 = HEAP32[$6 >> 2] | 0; //@line 22314
   }
   if (($37 - $57 | 0) >= ($12 | 0)) {
    $$064 = $24; //@line 22322
    label = 28; //@line 22323
    break;
   } else {
    $$06577$us = $$065$be$us$in & 65535; //@line 22320
    $$080$us = $24; //@line 22320
   }
  }
  if ((label | 0) == 28) {
   $96 = ___async_retval; //@line 22328
   HEAP8[$96 >> 0] = $$064; //@line 22329
   return;
  }
 } else {
  $$06378 = $19; //@line 22333
  $$06577 = $14; //@line 22333
  $$080 = 0; //@line 22333
 }
 while (1) {
  if (!($$080 << 24 >> 24)) {
   $$1 = $$06378; //@line 22338
  } else {
   switch ($16 | 0) {
   case 4:
   case 15:
   case 17:
   case 20:
    {
     $$sink = 38; //@line 22342
     label = 18; //@line 22343
     break;
    }
   case 8:
   case 11:
    {
     $$sink = 47; //@line 22347
     label = 18; //@line 22348
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 18) {
    label = 0; //@line 22355
    HEAP8[$$06378 >> 0] = $$sink; //@line 22356
   }
   $$1 = $$06378 + 1 | 0; //@line 22359
  }
  $61 = $$080 + 1 << 24 >> 24; //@line 22361
  $63 = (HEAP32[$10 >> 2] | 0) + 1 | 0; //@line 22363
  HEAP32[$10 >> 2] = $63; //@line 22364
  $66 = $$06577 & 65535; //@line 22367
  if (($$1 + $66 - (HEAP32[$6 >> 2] | 0) | 0) > ($12 | 0)) {
   $$064 = -1; //@line 22372
   label = 28; //@line 22373
   break;
  }
  _memcpy($$1 | 0, $63 | 0, $66 | 0) | 0; //@line 22376
  $71 = (HEAP32[$10 >> 2] | 0) + $66 | 0; //@line 22378
  HEAP32[$10 >> 2] = $71; //@line 22379
  $$06378 = $$1 + $66 | 0; //@line 22380
  $73 = HEAP32[$6 >> 2] | 0; //@line 22381
  $74 = $$06378; //@line 22382
  if (($74 - $73 | 0) >= ($12 | 0)) {
   $$064 = $61; //@line 22386
   label = 28; //@line 22387
   break;
  }
  $trunc = HEAP8[$71 >> 0] | 0; //@line 22390
  $77 = $trunc & 255; //@line 22391
  if ($77 & 240 | 0) {
   $$064 = $61; //@line 22395
   label = 28; //@line 22396
   break;
  }
  switch ($trunc & 15) {
  case 13:
   {
    $80 = $71 + 1 | 0; //@line 22403
    $$sink89 = $80; //@line 22407
    $$sink90 = (HEAPU8[$80 >> 0] | 0) + 13 | 0; //@line 22407
    label = 25; //@line 22408
    break;
   }
  case 14:
   {
    $87 = $71 + 2 | 0; //@line 22412
    $$sink89 = $87; //@line 22421
    $$sink90 = (HEAPU8[$87 >> 0] | 0) + 269 + ((HEAPU8[$71 + 1 >> 0] | 0) << 8) | 0; //@line 22421
    label = 25; //@line 22422
    break;
   }
  default:
   {
    $$065$be$in = $77 & 15; //@line 22426
    $85 = $73; //@line 22426
   }
  }
  if ((label | 0) == 25) {
   label = 0; //@line 22430
   HEAP32[$10 >> 2] = $$sink89; //@line 22431
   $$065$be$in = $$sink90; //@line 22433
   $85 = HEAP32[$6 >> 2] | 0; //@line 22433
  }
  if (($74 - $85 | 0) >= ($12 | 0)) {
   $$064 = $61; //@line 22441
   label = 28; //@line 22442
   break;
  } else {
   $$06577 = $$065$be$in & 65535; //@line 22439
   $$080 = $61; //@line 22439
  }
 }
 if ((label | 0) == 28) {
  $96 = ___async_retval; //@line 22447
  HEAP8[$96 >> 0] = $$064; //@line 22448
  return;
 }
}
function __ZN6Socket4openEP12NetworkStack__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22500
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22502
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22504
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22506
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22508
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22510
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22512
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22516
  return;
 }
 $14 = $2 + 8 | 0; //@line 22520
 HEAP32[$14 >> 2] = HEAP32[$4 >> 2]; //@line 22521
 $15 = $6 + 12 | 0; //@line 22522
 HEAP32[$6 >> 2] = 12; //@line 22523
 HEAP32[$6 + 4 >> 2] = 1; //@line 22525
 HEAP32[$6 + 8 >> 2] = $2; //@line 22527
 HEAP32[$15 >> 2] = 420; //@line 22528
 $16 = $2 + 16 | 0; //@line 22529
 if (($16 | 0) == ($6 | 0)) {
  $40 = HEAP32[107] | 0; //@line 22533
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 22534
  FUNCTION_TABLE_vi[$40 & 255]($6); //@line 22535
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 22538
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 22539
   HEAP32[$41 >> 2] = $6; //@line 22540
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 22541
   HEAP32[$42 >> 2] = $10; //@line 22542
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 22543
   HEAP32[$43 >> 2] = $14; //@line 22544
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 22545
   HEAP32[$44 >> 2] = $16; //@line 22546
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 22547
   HEAP32[$45 >> 2] = $8; //@line 22548
   sp = STACKTOP; //@line 22549
   return;
  }
  ___async_unwind = 0; //@line 22552
  HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 22553
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 22554
  HEAP32[$41 >> 2] = $6; //@line 22555
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 22556
  HEAP32[$42 >> 2] = $10; //@line 22557
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 22558
  HEAP32[$43 >> 2] = $14; //@line 22559
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 22560
  HEAP32[$44 >> 2] = $16; //@line 22561
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 22562
  HEAP32[$45 >> 2] = $8; //@line 22563
  sp = STACKTOP; //@line 22564
  return;
 }
 $18 = $2 + 28 | 0; //@line 22567
 $19 = HEAP32[$18 >> 2] | 0; //@line 22568
 if (!$19) {
  $31 = HEAP32[106] | 0; //@line 22572
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 22573
  FUNCTION_TABLE_vii[$31 & 3]($16, $6); //@line 22574
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 22577
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 22578
   HEAP32[$32 >> 2] = $15; //@line 22579
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 22580
   HEAP32[$33 >> 2] = $18; //@line 22581
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 22582
   HEAP32[$34 >> 2] = $6; //@line 22583
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 22584
   HEAP32[$35 >> 2] = $10; //@line 22585
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 22586
   HEAP32[$36 >> 2] = $14; //@line 22587
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 22588
   HEAP32[$37 >> 2] = $16; //@line 22589
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 22590
   HEAP32[$38 >> 2] = $8; //@line 22591
   sp = STACKTOP; //@line 22592
   return;
  }
  ___async_unwind = 0; //@line 22595
  HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 22596
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 22597
  HEAP32[$32 >> 2] = $15; //@line 22598
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 22599
  HEAP32[$33 >> 2] = $18; //@line 22600
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 22601
  HEAP32[$34 >> 2] = $6; //@line 22602
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 22603
  HEAP32[$35 >> 2] = $10; //@line 22604
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 22605
  HEAP32[$36 >> 2] = $14; //@line 22606
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 22607
  HEAP32[$37 >> 2] = $16; //@line 22608
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 22609
  HEAP32[$38 >> 2] = $8; //@line 22610
  sp = STACKTOP; //@line 22611
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 22615
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 22616
  FUNCTION_TABLE_vi[$22 & 255]($16); //@line 22617
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 22620
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 22621
   HEAP32[$23 >> 2] = $15; //@line 22622
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 22623
   HEAP32[$24 >> 2] = $18; //@line 22624
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 22625
   HEAP32[$25 >> 2] = $16; //@line 22626
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 22627
   HEAP32[$26 >> 2] = $6; //@line 22628
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 22629
   HEAP32[$27 >> 2] = $10; //@line 22630
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 22631
   HEAP32[$28 >> 2] = $14; //@line 22632
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 22633
   HEAP32[$29 >> 2] = $8; //@line 22634
   sp = STACKTOP; //@line 22635
   return;
  }
  ___async_unwind = 0; //@line 22638
  HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 22639
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 22640
  HEAP32[$23 >> 2] = $15; //@line 22641
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 22642
  HEAP32[$24 >> 2] = $18; //@line 22643
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 22644
  HEAP32[$25 >> 2] = $16; //@line 22645
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 22646
  HEAP32[$26 >> 2] = $6; //@line 22647
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 22648
  HEAP32[$27 >> 2] = $10; //@line 22649
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 22650
  HEAP32[$28 >> 2] = $14; //@line 22651
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 22652
  HEAP32[$29 >> 2] = $8; //@line 22653
  sp = STACKTOP; //@line 22654
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_44($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21166
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21172
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 21175
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21177
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21179
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21181
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 21184
 $20 = HEAP8[$0 + 37 >> 0] & 1; //@line 21187
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 21189
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 21191
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 21193
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 21195
 L2 : do {
  if (!(HEAP8[$14 >> 0] | 0)) {
   do {
    if (!(HEAP8[$4 >> 0] | 0)) {
     $$182$off0 = $20; //@line 21204
     $$186$off0 = $18; //@line 21204
    } else {
     if (!(HEAP8[$2 >> 0] | 0)) {
      if (!(HEAP32[$24 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $18; //@line 21213
       $$283$off0 = 1; //@line 21213
       label = 13; //@line 21214
       break L2;
      } else {
       $$182$off0 = 1; //@line 21217
       $$186$off0 = $18; //@line 21217
       break;
      }
     }
     if ((HEAP32[$26 >> 2] | 0) == 1) {
      label = 18; //@line 21224
      break L2;
     }
     if (!(HEAP32[$24 >> 2] & 2)) {
      label = 18; //@line 21231
      break L2;
     } else {
      $$182$off0 = 1; //@line 21234
      $$186$off0 = 1; //@line 21234
     }
    }
   } while (0);
   $30 = $22 + 8 | 0; //@line 21238
   if ($30 >>> 0 < $12 >>> 0) {
    HEAP8[$2 >> 0] = 0; //@line 21241
    HEAP8[$4 >> 0] = 0; //@line 21242
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 21243
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $6, $8, $8, 1, $10); //@line 21244
    if (!___async) {
     ___async_unwind = 0; //@line 21247
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 178; //@line 21249
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 21251
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 21253
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 21255
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 21257
    HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $10 & 1; //@line 21260
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 21262
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 21264
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 21266
    HEAP8[$ReallocAsyncCtx5 + 36 >> 0] = $$186$off0 & 1; //@line 21269
    HEAP8[$ReallocAsyncCtx5 + 37 >> 0] = $$182$off0 & 1; //@line 21272
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $30; //@line 21274
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 21276
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 21278
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 21280
    sp = STACKTOP; //@line 21281
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 21284
    $$283$off0 = $$182$off0; //@line 21284
    label = 13; //@line 21285
   }
  } else {
   $$085$off0$reg2mem$0 = $18; //@line 21288
   $$283$off0 = $20; //@line 21288
   label = 13; //@line 21289
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$28 >> 2] = $8; //@line 21295
    $59 = $6 + 40 | 0; //@line 21296
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 21299
    if ((HEAP32[$6 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$26 >> 2] | 0) == 2) {
      HEAP8[$14 >> 0] = 1; //@line 21307
      if ($$283$off0) {
       label = 18; //@line 21309
       break;
      } else {
       $67 = 4; //@line 21312
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 21319
   } else {
    $67 = 4; //@line 21321
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 21326
 }
 HEAP32[$16 >> 2] = $67; //@line 21328
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $31 = 0, $39 = 0, $47 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 7905
 STACKTOP = STACKTOP + 80 | 0; //@line 7906
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7906
 $vararg_buffer32 = sp + 72 | 0; //@line 7907
 $vararg_buffer28 = sp + 64 | 0; //@line 7908
 $vararg_buffer24 = sp + 56 | 0; //@line 7909
 $vararg_buffer20 = sp + 48 | 0; //@line 7910
 $vararg_buffer16 = sp + 40 | 0; //@line 7911
 $vararg_buffer12 = sp + 32 | 0; //@line 7912
 $vararg_buffer8 = sp + 24 | 0; //@line 7913
 $vararg_buffer4 = sp + 16 | 0; //@line 7914
 $vararg_buffer = sp; //@line 7915
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 7917
 if (!$2) {
  $$0 = 0; //@line 7920
  STACKTOP = sp; //@line 7921
  return $$0 | 0; //@line 7921
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 7926
  STACKTOP = sp; //@line 7927
  return $$0 | 0; //@line 7927
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 7936
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 7939
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 7942
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 7943
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 7945
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 7947
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 7949
   _sprintf($0, 2266, $vararg_buffer) | 0; //@line 7950
   $$0 = $0; //@line 7951
   STACKTOP = sp; //@line 7952
   return $$0 | 0; //@line 7952
  }
 case 2:
  {
   $23 = HEAPU8[$0 + 45 >> 0] | 0; //@line 7961
   HEAP32[$vararg_buffer4 >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 7962
   HEAP32[$vararg_buffer4 + 4 >> 2] = $23; //@line 7964
   _sprintf($0, 2278, $vararg_buffer4) | 0; //@line 7965
   HEAP8[$0 + 4 >> 0] = 58; //@line 7967
   $31 = HEAPU8[$0 + 47 >> 0] | 0; //@line 7974
   HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$0 + 46 >> 0]; //@line 7975
   HEAP32[$vararg_buffer8 + 4 >> 2] = $31; //@line 7977
   _sprintf($0 + 5 | 0, 2278, $vararg_buffer8) | 0; //@line 7978
   HEAP8[$0 + 9 >> 0] = 58; //@line 7980
   $39 = HEAPU8[$0 + 49 >> 0] | 0; //@line 7987
   HEAP32[$vararg_buffer12 >> 2] = HEAPU8[$0 + 48 >> 0]; //@line 7988
   HEAP32[$vararg_buffer12 + 4 >> 2] = $39; //@line 7990
   _sprintf($0 + 10 | 0, 2278, $vararg_buffer12) | 0; //@line 7991
   HEAP8[$0 + 14 >> 0] = 58; //@line 7993
   $47 = HEAPU8[$0 + 51 >> 0] | 0; //@line 8000
   HEAP32[$vararg_buffer16 >> 2] = HEAPU8[$0 + 50 >> 0]; //@line 8001
   HEAP32[$vararg_buffer16 + 4 >> 2] = $47; //@line 8003
   _sprintf($0 + 15 | 0, 2278, $vararg_buffer16) | 0; //@line 8004
   HEAP8[$0 + 19 >> 0] = 58; //@line 8006
   $55 = HEAPU8[$0 + 53 >> 0] | 0; //@line 8013
   HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$0 + 52 >> 0]; //@line 8014
   HEAP32[$vararg_buffer20 + 4 >> 2] = $55; //@line 8016
   _sprintf($0 + 20 | 0, 2278, $vararg_buffer20) | 0; //@line 8017
   HEAP8[$0 + 24 >> 0] = 58; //@line 8019
   $63 = HEAPU8[$0 + 55 >> 0] | 0; //@line 8026
   HEAP32[$vararg_buffer24 >> 2] = HEAPU8[$0 + 54 >> 0]; //@line 8027
   HEAP32[$vararg_buffer24 + 4 >> 2] = $63; //@line 8029
   _sprintf($0 + 25 | 0, 2278, $vararg_buffer24) | 0; //@line 8030
   HEAP8[$0 + 29 >> 0] = 58; //@line 8032
   $71 = HEAPU8[$0 + 57 >> 0] | 0; //@line 8039
   HEAP32[$vararg_buffer28 >> 2] = HEAPU8[$0 + 56 >> 0]; //@line 8040
   HEAP32[$vararg_buffer28 + 4 >> 2] = $71; //@line 8042
   _sprintf($0 + 30 | 0, 2278, $vararg_buffer28) | 0; //@line 8043
   HEAP8[$0 + 34 >> 0] = 58; //@line 8045
   $79 = HEAPU8[$0 + 59 >> 0] | 0; //@line 8052
   HEAP32[$vararg_buffer32 >> 2] = HEAPU8[$0 + 58 >> 0]; //@line 8053
   HEAP32[$vararg_buffer32 + 4 >> 2] = $79; //@line 8055
   _sprintf($0 + 35 | 0, 2278, $vararg_buffer32) | 0; //@line 8056
   HEAP8[$0 + 39 >> 0] = 0; //@line 8058
   $$0 = $0; //@line 8059
   STACKTOP = sp; //@line 8060
   return $$0 | 0; //@line 8060
  }
 default:
  {
   $$0 = $0; //@line 8064
   STACKTOP = sp; //@line 8065
   return $$0 | 0; //@line 8065
  }
 }
 return 0; //@line 8068
}
function _sn_coap_builder_options_build_add_multiple_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$i = 0, $$012$lcssa$i10 = 0, $$01213$i = 0, $$014$i = 0, $$02441$i = 0, $$02540$i = 0, $$02542$i = 0, $$02641$i = 0, $$028$lcssa$i$ph = 0, $$02839$i = 0, $$03138$i = 0, $$03139$i = 0, $$07$us = 0, $$126$i = 0, $$127$i = 0, $$129$i = 0, $13 = 0, $15 = 0, $27 = 0, $29 = 0, $34 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $61 = 0, $66 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $or$cond$i3 = 0, $phitmp$i = 0, $wide$trip$count = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 4311
 if (!$5) {
  return;
 }
 $7 = HEAP16[$2 >> 1] | 0; //@line 4316
 $9 = ($7 & 65535) + -1 | 0; //@line 4318
 if (($7 & 65535) > 2) {
  $13 = ($3 | 0) == 11 | ($3 | 0) == 8 ? 47 : 38; //@line 4324
  $$01213$i = 0; //@line 4325
  $$014$i = 1; //@line 4325
  $15 = 1; //@line 4325
  do {
   $$01213$i = $$01213$i + (($13 | 0) == (HEAPU8[$5 + $15 >> 0] | 0) & 1) << 24 >> 24; //@line 4332
   $$014$i = $$014$i + 1 << 16 >> 16; //@line 4333
   $15 = $$014$i & 65535; //@line 4334
  } while (($9 | 0) > ($15 | 0));
  $phitmp$i = $$01213$i + 1 << 24 >> 24; //@line 4342
  if (!($phitmp$i << 24 >> 24)) {
   return;
  } else {
   $$012$lcssa$i10 = $phitmp$i; //@line 4347
  }
 } else {
  $$012$lcssa$i10 = 1; //@line 4350
 }
 $or$cond$i3 = ($3 | 0) == 11 | ($3 | 0) == 8; //@line 4355
 $$$i = $or$cond$i3 ? 47 : 38; //@line 4356
 $27 = $or$cond$i3 ? 47 : 38; //@line 4357
 if (!($7 << 16 >> 16)) {
  $$07$us = 0; //@line 4359
  do {
   if (!($$07$us << 24 >> 24)) {
    $29 = HEAP8[$5 >> 0] | 0; //@line 4363
    $34 = ($29 << 24 >> 24 == 0 ? 1 : $29 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 4368
   } else {
    $34 = 65535; //@line 4370
   }
   _sn_coap_builder_options_build_add_one_option($0, 0, (HEAP32[$1 >> 2] | 0) + $34 | 0, $3, $4) | 0; //@line 4374
   $$07$us = $$07$us + 1 << 24 >> 24; //@line 4375
  } while (($$07$us & 255) < ($$012$lcssa$i10 & 255));
  return;
 }
 $wide$trip$count = $$012$lcssa$i10 & 255; //@line 4385
 $indvars$iv = 0; //@line 4386
 do {
  $$02441$i = 0; //@line 4388
  $$02540$i = 0; //@line 4388
  $$02839$i = 0; //@line 4388
  $$03138$i = $5; //@line 4388
  while (1) {
   $39 = ($27 | 0) != (HEAPU8[$$03138$i >> 0] | 0); //@line 4392
   if ($$02839$i << 16 >> 16 == 0 | $39) {
    $$126$i = $$02540$i; //@line 4398
    $$129$i = $$02839$i + ($39 & 1) << 16 >> 16; //@line 4398
   } else {
    if (($indvars$iv | 0) == ($$02540$i & 255 | 0)) {
     $$028$lcssa$i$ph = $$02839$i; //@line 4403
     break;
    }
    $$126$i = $$02540$i + 1 << 24 >> 24; //@line 4407
    $$129$i = 0; //@line 4407
   }
   $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 4410
   if (($$02441$i & 65535) >= ($7 & 65535)) {
    $$028$lcssa$i$ph = $$129$i; //@line 4415
    break;
   } else {
    $$02540$i = $$126$i; //@line 4413
    $$02839$i = $$129$i; //@line 4413
    $$03138$i = $$03138$i + 1 | 0; //@line 4413
   }
  }
  L29 : do {
   if (!$indvars$iv) {
    $50 = HEAP8[$5 >> 0] | 0; //@line 4422
    $66 = ($50 << 24 >> 24 == 0 ? 1 : $50 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 4427
   } else {
    $49 = $indvars$iv + -1 | 0; //@line 4429
    $$02542$i = 0; //@line 4430
    $$02641$i = 0; //@line 4430
    $$03139$i = $5; //@line 4430
    while (1) {
     if ($$02542$i << 16 >> 16 == 0 ? 1 : (HEAP8[$$03139$i >> 0] | 0) != $$$i << 24 >> 24) {
      $$127$i = $$02641$i; //@line 4437
     } else {
      if (($49 | 0) == ($$02641$i & 255 | 0)) {
       break;
      }
      $$127$i = $$02641$i + 1 << 24 >> 24; //@line 4445
     }
     $61 = $$02542$i + 1 << 16 >> 16; //@line 4447
     if (($61 & 65535) < ($7 & 65535)) {
      $$02542$i = $61; //@line 4451
      $$02641$i = $$127$i; //@line 4451
      $$03139$i = $$03139$i + 1 | 0; //@line 4451
     } else {
      $66 = 65535; //@line 4453
      break L29;
     }
    }
    $66 = ($$02542$i & 65535) + 1 | 0; //@line 4459
   }
  } while (0);
  _sn_coap_builder_options_build_add_one_option($0, $$028$lcssa$i$ph, (HEAP32[$1 >> 2] | 0) + ($66 & 65535) | 0, $3, $4) | 0; //@line 4465
  $indvars$iv = $indvars$iv + 1 | 0; //@line 4466
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9207
 $3 = HEAP32[$2 >> 2] | 0; //@line 9208
 $4 = $0 + 100 | 0; //@line 9209
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9214
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9217
 } else {
  $11 = ___shgetc($0) | 0; //@line 9220
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9225
   $14 = HEAP32[$2 >> 2] | 0; //@line 9226
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9231
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9234
   } else {
    $22 = ___shgetc($0) | 0; //@line 9237
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9247
     $$049 = $22; //@line 9247
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9251
     $$0 = $13; //@line 9252
     $$049 = $22; //@line 9252
    }
   } else {
    $$0 = $13; //@line 9255
    $$049 = $22; //@line 9255
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9260
   $$049 = $11; //@line 9260
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9269
   $101 = 0; //@line 9269
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9273
   $100 = -2147483648; //@line 9274
   $101 = 0; //@line 9274
  }
 } else {
  $$04860 = 0; //@line 9277
  $$159 = $$049; //@line 9277
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9281
   $38 = HEAP32[$2 >> 2] | 0; //@line 9282
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9287
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9290
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9293
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9300
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9306
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9310
   $55 = $$04860; //@line 9310
   $56 = $50; //@line 9310
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9312
    $58 = tempRet0; //@line 9313
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9316
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9318
    $64 = tempRet0; //@line 9319
    $65 = HEAP32[$2 >> 2] | 0; //@line 9320
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9325
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9328
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9331
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9342
     $55 = $63; //@line 9342
     $56 = $64; //@line 9342
    } else {
     $$2$lcssa = $$2$be; //@line 9344
     $94 = $63; //@line 9344
     $95 = $64; //@line 9344
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9349
   $94 = $$04860; //@line 9349
   $95 = $50; //@line 9349
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9355
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9360
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9363
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9366
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9380
  }
  $93 = ($$0 | 0) != 0; //@line 9382
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9383
  $100 = $93 ? tempRet0 : $95; //@line 9387
  $101 = $93 ? $96 : $94; //@line 9387
 }
 tempRet0 = $100; //@line 9389
 return $101 | 0; //@line 9390
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_43($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21008
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21010
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21014
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21016
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21018
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21020
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 21023
 $15 = $2 + 24 | 0; //@line 21024
 do {
  if ((HEAP32[$0 + 8 >> 2] | 0) > 1) {
   $18 = HEAP32[$2 + 8 >> 2] | 0; //@line 21029
   if (!($18 & 2)) {
    $21 = $8 + 36 | 0; //@line 21033
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $8 + 54 | 0; //@line 21040
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 21051
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $8, $10, $12, $14); //@line 21052
      if (!___async) {
       ___async_unwind = 0; //@line 21055
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 182; //@line 21057
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 21059
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 21061
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 21063
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 21065
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 21067
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 21069
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $12; //@line 21071
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $14 & 1; //@line 21074
      sp = STACKTOP; //@line 21075
      return;
     }
     $36 = $8 + 24 | 0; //@line 21078
     $37 = $8 + 54 | 0; //@line 21079
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 21094
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $8, $10, $12, $14); //@line 21095
     if (!___async) {
      ___async_unwind = 0; //@line 21098
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 181; //@line 21100
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 21102
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 21104
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 21106
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 21108
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 21110
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 21112
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $10; //@line 21114
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 21116
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $14 & 1; //@line 21119
     sp = STACKTOP; //@line 21120
     return;
    }
   }
   $24 = $8 + 54 | 0; //@line 21124
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 21128
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $8, $10, $12, $14); //@line 21129
    if (!___async) {
     ___async_unwind = 0; //@line 21132
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 180; //@line 21134
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 21136
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 21138
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 21140
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 21142
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 21144
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 21146
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 21149
    sp = STACKTOP; //@line 21150
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14199
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14204
 } else {
  $9 = $1 + 52 | 0; //@line 14206
  $10 = HEAP8[$9 >> 0] | 0; //@line 14207
  $11 = $1 + 53 | 0; //@line 14208
  $12 = HEAP8[$11 >> 0] | 0; //@line 14209
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14212
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14213
  HEAP8[$9 >> 0] = 0; //@line 14214
  HEAP8[$11 >> 0] = 0; //@line 14215
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14216
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 14217
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 176; //@line 14220
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 14222
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14224
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 14226
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 14228
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 14230
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 14232
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 14234
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 14236
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 14238
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 14240
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 14243
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 14245
   sp = STACKTOP; //@line 14246
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14249
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 14254
    $32 = $0 + 8 | 0; //@line 14255
    $33 = $1 + 54 | 0; //@line 14256
    $$0 = $0 + 24 | 0; //@line 14257
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 14290
     HEAP8[$11 >> 0] = 0; //@line 14291
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 14292
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 14293
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14298
     $62 = $$0 + 8 | 0; //@line 14299
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 14302
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 177; //@line 14307
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 14309
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 14311
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 14313
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 14315
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 14317
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 14319
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 14321
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 14323
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 14325
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 14327
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 14329
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 14331
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 14333
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 14336
    sp = STACKTOP; //@line 14337
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 14341
  HEAP8[$11 >> 0] = $12; //@line 14342
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11081
      $10 = HEAP32[$9 >> 2] | 0; //@line 11082
      HEAP32[$2 >> 2] = $9 + 4; //@line 11084
      HEAP32[$0 >> 2] = $10; //@line 11085
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11101
      $17 = HEAP32[$16 >> 2] | 0; //@line 11102
      HEAP32[$2 >> 2] = $16 + 4; //@line 11104
      $20 = $0; //@line 11107
      HEAP32[$20 >> 2] = $17; //@line 11109
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11112
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11128
      $30 = HEAP32[$29 >> 2] | 0; //@line 11129
      HEAP32[$2 >> 2] = $29 + 4; //@line 11131
      $31 = $0; //@line 11132
      HEAP32[$31 >> 2] = $30; //@line 11134
      HEAP32[$31 + 4 >> 2] = 0; //@line 11137
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11153
      $41 = $40; //@line 11154
      $43 = HEAP32[$41 >> 2] | 0; //@line 11156
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11159
      HEAP32[$2 >> 2] = $40 + 8; //@line 11161
      $47 = $0; //@line 11162
      HEAP32[$47 >> 2] = $43; //@line 11164
      HEAP32[$47 + 4 >> 2] = $46; //@line 11167
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11183
      $57 = HEAP32[$56 >> 2] | 0; //@line 11184
      HEAP32[$2 >> 2] = $56 + 4; //@line 11186
      $59 = ($57 & 65535) << 16 >> 16; //@line 11188
      $62 = $0; //@line 11191
      HEAP32[$62 >> 2] = $59; //@line 11193
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11196
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11212
      $72 = HEAP32[$71 >> 2] | 0; //@line 11213
      HEAP32[$2 >> 2] = $71 + 4; //@line 11215
      $73 = $0; //@line 11217
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11219
      HEAP32[$73 + 4 >> 2] = 0; //@line 11222
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11238
      $83 = HEAP32[$82 >> 2] | 0; //@line 11239
      HEAP32[$2 >> 2] = $82 + 4; //@line 11241
      $85 = ($83 & 255) << 24 >> 24; //@line 11243
      $88 = $0; //@line 11246
      HEAP32[$88 >> 2] = $85; //@line 11248
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11251
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11267
      $98 = HEAP32[$97 >> 2] | 0; //@line 11268
      HEAP32[$2 >> 2] = $97 + 4; //@line 11270
      $99 = $0; //@line 11272
      HEAP32[$99 >> 2] = $98 & 255; //@line 11274
      HEAP32[$99 + 4 >> 2] = 0; //@line 11277
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11293
      $109 = +HEAPF64[$108 >> 3]; //@line 11294
      HEAP32[$2 >> 2] = $108 + 8; //@line 11296
      HEAPF64[$0 >> 3] = $109; //@line 11297
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11313
      $116 = +HEAPF64[$115 >> 3]; //@line 11314
      HEAP32[$2 >> 2] = $115 + 8; //@line 11316
      HEAPF64[$0 >> 3] = $116; //@line 11317
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9981
 STACKTOP = STACKTOP + 224 | 0; //@line 9982
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9982
 $3 = sp + 120 | 0; //@line 9983
 $4 = sp + 80 | 0; //@line 9984
 $5 = sp; //@line 9985
 $6 = sp + 136 | 0; //@line 9986
 dest = $4; //@line 9987
 stop = dest + 40 | 0; //@line 9987
 do {
  HEAP32[dest >> 2] = 0; //@line 9987
  dest = dest + 4 | 0; //@line 9987
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9989
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9993
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 10000
  } else {
   $43 = 0; //@line 10002
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 10004
  $14 = $13 & 32; //@line 10005
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 10011
  }
  $19 = $0 + 48 | 0; //@line 10013
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 10018
    $24 = HEAP32[$23 >> 2] | 0; //@line 10019
    HEAP32[$23 >> 2] = $6; //@line 10020
    $25 = $0 + 28 | 0; //@line 10021
    HEAP32[$25 >> 2] = $6; //@line 10022
    $26 = $0 + 20 | 0; //@line 10023
    HEAP32[$26 >> 2] = $6; //@line 10024
    HEAP32[$19 >> 2] = 80; //@line 10025
    $28 = $0 + 16 | 0; //@line 10027
    HEAP32[$28 >> 2] = $6 + 80; //@line 10028
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10029
    if (!$24) {
     $$1 = $29; //@line 10032
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 10035
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 10036
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 10037
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 153; //@line 10040
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10042
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 10044
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10046
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 10048
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 10050
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 10052
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 10054
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10056
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 10058
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 10060
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 10062
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 10064
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 10066
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 10068
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 10070
      sp = STACKTOP; //@line 10071
      STACKTOP = sp; //@line 10072
      return 0; //@line 10072
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10074
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 10077
      HEAP32[$23 >> 2] = $24; //@line 10078
      HEAP32[$19 >> 2] = 0; //@line 10079
      HEAP32[$28 >> 2] = 0; //@line 10080
      HEAP32[$25 >> 2] = 0; //@line 10081
      HEAP32[$26 >> 2] = 0; //@line 10082
      $$1 = $$; //@line 10083
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10089
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 10092
  HEAP32[$0 >> 2] = $51 | $14; //@line 10097
  if ($43 | 0) {
   ___unlockfile($0); //@line 10100
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10102
 }
 STACKTOP = sp; //@line 10104
 return $$0 | 0; //@line 10104
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $11 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8422
 STACKTOP = STACKTOP + 112 | 0; //@line 8423
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 8423
 $$byval_copy = sp + 88 | 0; //@line 8424
 $5 = sp + 24 | 0; //@line 8425
 $6 = sp; //@line 8426
 HEAP32[$6 >> 2] = 0; //@line 8427
 HEAP32[$6 + 4 >> 2] = 0; //@line 8427
 HEAP32[$6 + 8 >> 2] = 0; //@line 8427
 HEAP32[$6 + 12 >> 2] = 0; //@line 8427
 HEAP32[$6 + 16 >> 2] = 0; //@line 8427
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 8428
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 8428
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 8429
 $7 = $0 + 4 | 0; //@line 8430
 $8 = HEAP32[$7 >> 2] | 0; //@line 8431
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0; //@line 8434
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8435
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($8, $1, $5, 0) | 0; //@line 8436
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 86; //@line 8439
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8441
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 8443
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8445
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 8447
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 8449
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 8451
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 8453
  sp = STACKTOP; //@line 8454
  STACKTOP = sp; //@line 8455
  return 0; //@line 8455
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8457
 if ($12 | 0) {
  $$0 = -3009; //@line 8460
  STACKTOP = sp; //@line 8461
  return $$0 | 0; //@line 8461
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 8463
 $21 = $0 + 8 | 0; //@line 8464
 $22 = $0 + 52 | 0; //@line 8465
 $23 = $0 + 12 | 0; //@line 8466
 while (1) {
  $24 = HEAP32[$21 >> 2] | 0; //@line 8468
  if (!$24) {
   $$0 = -3005; //@line 8471
   label = 9; //@line 8472
   break;
  }
  HEAP32[$22 >> 2] = 0; //@line 8475
  $26 = HEAP32[$7 >> 2] | 0; //@line 8476
  $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 8479
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8480
  $30 = FUNCTION_TABLE_iiiiii[$29 & 7]($26, $24, $5, $3, $4) | 0; //@line 8481
  if (___async) {
   label = 7; //@line 8484
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8487
  if (($30 | 0) != -3001 | (HEAP32[$23 >> 2] | 0) == 0) {
   $$0 = $30; //@line 8493
   label = 9; //@line 8494
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 87; //@line 8499
  HEAP32[$AsyncCtx3 + 4 >> 2] = $23; //@line 8501
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 8503
  HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 8505
  HEAP32[$AsyncCtx3 + 16 >> 2] = $22; //@line 8507
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 8509
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 8511
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 8513
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 8515
  sp = STACKTOP; //@line 8516
  STACKTOP = sp; //@line 8517
  return 0; //@line 8517
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 8520
  return $$0 | 0; //@line 8520
 }
 return 0; //@line 8522
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 13734
 STACKTOP = STACKTOP + 64 | 0; //@line 13735
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13735
 $4 = sp; //@line 13736
 $5 = HEAP32[$0 >> 2] | 0; //@line 13737
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 13740
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 13742
 HEAP32[$4 >> 2] = $2; //@line 13743
 HEAP32[$4 + 4 >> 2] = $0; //@line 13745
 HEAP32[$4 + 8 >> 2] = $1; //@line 13747
 HEAP32[$4 + 12 >> 2] = $3; //@line 13749
 $14 = $4 + 16 | 0; //@line 13750
 $15 = $4 + 20 | 0; //@line 13751
 $16 = $4 + 24 | 0; //@line 13752
 $17 = $4 + 28 | 0; //@line 13753
 $18 = $4 + 32 | 0; //@line 13754
 $19 = $4 + 40 | 0; //@line 13755
 dest = $14; //@line 13756
 stop = dest + 36 | 0; //@line 13756
 do {
  HEAP32[dest >> 2] = 0; //@line 13756
  dest = dest + 4 | 0; //@line 13756
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 13756
 HEAP8[$14 + 38 >> 0] = 0; //@line 13756
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 13761
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 13764
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13765
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 13766
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 168; //@line 13769
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 13771
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 13773
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13775
    sp = STACKTOP; //@line 13776
    STACKTOP = sp; //@line 13777
    return 0; //@line 13777
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13779
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 13783
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 13787
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 13790
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 13791
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 13792
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 169; //@line 13795
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 13797
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 13799
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 13801
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 13803
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 13805
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 13807
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 13809
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 13811
    sp = STACKTOP; //@line 13812
    STACKTOP = sp; //@line 13813
    return 0; //@line 13813
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13815
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 13829
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 13837
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 13853
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 13858
  }
 } while (0);
 STACKTOP = sp; //@line 13861
 return $$0 | 0; //@line 13861
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9853
 $7 = ($2 | 0) != 0; //@line 9857
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9861
   $$03555 = $0; //@line 9862
   $$03654 = $2; //@line 9862
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9867
     $$036$lcssa64 = $$03654; //@line 9867
     label = 6; //@line 9868
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9871
    $12 = $$03654 + -1 | 0; //@line 9872
    $16 = ($12 | 0) != 0; //@line 9876
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9879
     $$03654 = $12; //@line 9879
    } else {
     $$035$lcssa = $11; //@line 9881
     $$036$lcssa = $12; //@line 9881
     $$lcssa = $16; //@line 9881
     label = 5; //@line 9882
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9887
   $$036$lcssa = $2; //@line 9887
   $$lcssa = $7; //@line 9887
   label = 5; //@line 9888
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9893
   $$036$lcssa64 = $$036$lcssa; //@line 9893
   label = 6; //@line 9894
  } else {
   $$2 = $$035$lcssa; //@line 9896
   $$3 = 0; //@line 9896
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9902
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9905
    $$3 = $$036$lcssa64; //@line 9905
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9907
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9911
      $$13745 = $$036$lcssa64; //@line 9911
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9914
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9923
       $30 = $$13745 + -4 | 0; //@line 9924
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9927
        $$13745 = $30; //@line 9927
       } else {
        $$0$lcssa = $29; //@line 9929
        $$137$lcssa = $30; //@line 9929
        label = 11; //@line 9930
        break L11;
       }
      }
      $$140 = $$046; //@line 9934
      $$23839 = $$13745; //@line 9934
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9936
      $$137$lcssa = $$036$lcssa64; //@line 9936
      label = 11; //@line 9937
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9943
      $$3 = 0; //@line 9943
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9946
      $$23839 = $$137$lcssa; //@line 9946
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9953
      $$3 = $$23839; //@line 9953
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9956
     $$23839 = $$23839 + -1 | 0; //@line 9957
     if (!$$23839) {
      $$2 = $35; //@line 9960
      $$3 = 0; //@line 9960
      break;
     } else {
      $$140 = $35; //@line 9963
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9971
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5382
 do {
  if (!$0) {
   do {
    if (!(HEAP32[204] | 0)) {
     $34 = 0; //@line 5390
    } else {
     $12 = HEAP32[204] | 0; //@line 5392
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5393
     $13 = _fflush($12) | 0; //@line 5394
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 149; //@line 5397
      sp = STACKTOP; //@line 5398
      return 0; //@line 5399
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5401
      $34 = $13; //@line 5402
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5408
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5412
    } else {
     $$02327 = $$02325; //@line 5414
     $$02426 = $34; //@line 5414
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5421
      } else {
       $28 = 0; //@line 5423
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5431
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5432
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5437
       $$1 = $25 | $$02426; //@line 5439
      } else {
       $$1 = $$02426; //@line 5441
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5445
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5448
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5451
       break L9;
      } else {
       $$02327 = $$023; //@line 5454
       $$02426 = $$1; //@line 5454
      }
     }
     HEAP32[$AsyncCtx >> 2] = 150; //@line 5457
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5459
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5461
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5463
     sp = STACKTOP; //@line 5464
     return 0; //@line 5465
    }
   } while (0);
   ___ofl_unlock(); //@line 5468
   $$0 = $$024$lcssa; //@line 5469
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5475
    $5 = ___fflush_unlocked($0) | 0; //@line 5476
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 147; //@line 5479
     sp = STACKTOP; //@line 5480
     return 0; //@line 5481
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5483
     $$0 = $5; //@line 5484
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5489
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5490
   $7 = ___fflush_unlocked($0) | 0; //@line 5491
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 148; //@line 5494
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5497
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5499
    sp = STACKTOP; //@line 5500
    return 0; //@line 5501
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5503
   if ($phitmp) {
    $$0 = $7; //@line 5505
   } else {
    ___unlockfile($0); //@line 5507
    $$0 = $7; //@line 5508
   }
  }
 } while (0);
 return $$0 | 0; //@line 5512
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13916
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 13922
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 13928
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 13931
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13932
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 13933
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 172; //@line 13936
     sp = STACKTOP; //@line 13937
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13940
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 13948
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 13953
     $19 = $1 + 44 | 0; //@line 13954
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 13960
     HEAP8[$22 >> 0] = 0; //@line 13961
     $23 = $1 + 53 | 0; //@line 13962
     HEAP8[$23 >> 0] = 0; //@line 13963
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 13965
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 13968
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 13969
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 13970
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 171; //@line 13973
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 13975
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13977
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 13979
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 13981
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 13983
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 13985
      sp = STACKTOP; //@line 13986
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 13989
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 13993
      label = 13; //@line 13994
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 13999
       label = 13; //@line 14000
      } else {
       $$037$off039 = 3; //@line 14002
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 14006
      $39 = $1 + 40 | 0; //@line 14007
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14010
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14020
        $$037$off039 = $$037$off038; //@line 14021
       } else {
        $$037$off039 = $$037$off038; //@line 14023
       }
      } else {
       $$037$off039 = $$037$off038; //@line 14026
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 14029
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 14036
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 13228
 STACKTOP = STACKTOP + 48 | 0; //@line 13229
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13229
 $vararg_buffer10 = sp + 32 | 0; //@line 13230
 $vararg_buffer7 = sp + 24 | 0; //@line 13231
 $vararg_buffer3 = sp + 16 | 0; //@line 13232
 $vararg_buffer = sp; //@line 13233
 $0 = sp + 36 | 0; //@line 13234
 $1 = ___cxa_get_globals_fast() | 0; //@line 13235
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 13238
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 13243
   $9 = HEAP32[$7 >> 2] | 0; //@line 13245
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 13248
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 5775; //@line 13254
    _abort_message(5725, $vararg_buffer7); //@line 13255
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 13264
   } else {
    $22 = $3 + 80 | 0; //@line 13266
   }
   HEAP32[$0 >> 2] = $22; //@line 13268
   $23 = HEAP32[$3 >> 2] | 0; //@line 13269
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 13271
   $28 = HEAP32[(HEAP32[20] | 0) + 16 >> 2] | 0; //@line 13274
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 13275
   $29 = FUNCTION_TABLE_iiii[$28 & 15](80, $23, $0) | 0; //@line 13276
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 162; //@line 13279
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13281
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 13283
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 13285
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 13287
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 13289
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 13291
    sp = STACKTOP; //@line 13292
    STACKTOP = sp; //@line 13293
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13295
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 5775; //@line 13297
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 13299
    _abort_message(5684, $vararg_buffer3); //@line 13300
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 13303
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 13306
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13307
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 13308
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 163; //@line 13311
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 13313
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 13315
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 13317
    sp = STACKTOP; //@line 13318
    STACKTOP = sp; //@line 13319
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 13321
    HEAP32[$vararg_buffer >> 2] = 5775; //@line 13322
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 13324
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 13326
    _abort_message(5639, $vararg_buffer); //@line 13327
   }
  }
 }
 _abort_message(5763, $vararg_buffer10); //@line 13332
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 784
 $5 = $0 + -4 | 0; //@line 785
 $6 = $1 + 8 | 0; //@line 786
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 791
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 799
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 805
   _puts(1556) | 0; //@line 806
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 42; //@line 809
    sp = STACKTOP; //@line 810
    return 0; //@line 811
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 813
   $$1$i = -3012; //@line 814
   return $$1$i | 0; //@line 815
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] | 0; //@line 822
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 823
   $15 = FUNCTION_TABLE_iiii[$14 & 15]($5, $1, $2) | 0; //@line 824
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 43; //@line 827
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 829
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 831
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 833
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 835
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 837
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 839
    sp = STACKTOP; //@line 840
    return 0; //@line 841
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 843
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 846
    return $$1$i | 0; //@line 847
   } else {
    $23 = $1 + 12 | 0; //@line 849
    dest = $23; //@line 850
    src = $2; //@line 850
    stop = dest + 60 | 0; //@line 850
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 850
     dest = dest + 4 | 0; //@line 850
     src = src + 4 | 0; //@line 850
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 850
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 855
 _wait_ms(1); //@line 856
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 44; //@line 859
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 861
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 863
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 865
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 867
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 869
  sp = STACKTOP; //@line 870
  return 0; //@line 871
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 873
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2] | 0; //@line 876
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 877
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 878
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 45; //@line 881
  sp = STACKTOP; //@line 882
  return 0; //@line 883
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 885
 $$1$i = $32; //@line 886
 return $$1$i | 0; //@line 887
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_31($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 19261
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19263
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19265
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19267
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19269
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19271
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19273
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19275
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19277
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19279
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19281
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19283
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19285
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19287
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19289
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 19296
  $38 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($28, 0, $10, 512) | 0; //@line 19297
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 19301
   ___async_unwind = 0; //@line 19302
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 102; //@line 19304
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 19306
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 19308
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 19310
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 19312
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 19314
  HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 19316
  HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 19318
  HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 19320
  HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 19322
  HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 19324
  HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 19326
  HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 19328
  HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 19330
  HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 19332
  sp = STACKTOP; //@line 19333
  return;
 }
 _free($10); //@line 19336
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 19337
 $32 = __ZN6Socket5closeEv($26) | 0; //@line 19338
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 19341
  $33 = $ReallocAsyncCtx12 + 4 | 0; //@line 19342
  HEAP32[$33 >> 2] = -3009; //@line 19343
  $34 = $ReallocAsyncCtx12 + 8 | 0; //@line 19344
  HEAP32[$34 >> 2] = $28; //@line 19345
  $35 = $ReallocAsyncCtx12 + 12 | 0; //@line 19346
  HEAP32[$35 >> 2] = $8; //@line 19347
  sp = STACKTOP; //@line 19348
  return;
 }
 HEAP32[___async_retval >> 2] = $32; //@line 19352
 ___async_unwind = 0; //@line 19353
 HEAP32[$ReallocAsyncCtx12 >> 2] = 93; //@line 19354
 $33 = $ReallocAsyncCtx12 + 4 | 0; //@line 19355
 HEAP32[$33 >> 2] = -3009; //@line 19356
 $34 = $ReallocAsyncCtx12 + 8 | 0; //@line 19357
 HEAP32[$34 >> 2] = $28; //@line 19358
 $35 = $ReallocAsyncCtx12 + 12 | 0; //@line 19359
 HEAP32[$35 >> 2] = $8; //@line 19360
 sp = STACKTOP; //@line 19361
 return;
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6790
 STACKTOP = STACKTOP + 16 | 0; //@line 6791
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6791
 $4 = sp; //@line 6792
 $$ = ($3 | 0) == 0 ? 6880 : $3; //@line 6794
 $6 = HEAP32[$$ >> 2] | 0; //@line 6795
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6801
   } else {
    label = 17; //@line 6803
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6807
   if (!$2) {
    $$0 = -2; //@line 6810
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6814
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6818
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6821
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6828
     $22 = HEAP8[$1 >> 0] | 0; //@line 6829
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6833
      $$0 = 1; //@line 6834
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6838
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6841
      break;
     }
     $30 = HEAP32[820 + ($26 << 2) >> 2] | 0; //@line 6846
     $31 = $2 + -1 | 0; //@line 6847
     if (!$31) {
      $$2 = $30; //@line 6850
     } else {
      $$03952 = $1 + 1 | 0; //@line 6852
      $$04051 = $30; //@line 6852
      $$04350 = $31; //@line 6852
      label = 11; //@line 6853
     }
    } else {
     $$03952 = $1; //@line 6856
     $$04051 = $6; //@line 6856
     $$04350 = $2; //@line 6856
     label = 11; //@line 6857
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6861
      $35 = ($33 & 255) >>> 3; //@line 6863
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6870
       break L1;
      } else {
       $$1 = $$03952; //@line 6873
       $$141 = $$04051; //@line 6873
       $$144 = $$04350; //@line 6873
       $44 = $33; //@line 6873
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6877
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6880
       $$144 = $$144 + -1 | 0; //@line 6881
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6888
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6891
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6897
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6901
      HEAP32[$$47 >> 2] = $$141; //@line 6902
      $$0 = $2 - $$144 | 0; //@line 6904
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6908
    $$0 = -2; //@line 6909
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6914
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6916
  $$0 = -1; //@line 6917
 }
 STACKTOP = sp; //@line 6919
 return $$0 | 0; //@line 6919
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15596
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15598
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 15600
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15602
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15606
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15608
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15610
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 15615
  $36 = ___async_retval; //@line 15616
  HEAP32[$36 >> 2] = $$0; //@line 15617
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 15620
 $17 = $6 + 8 | 0; //@line 15621
 $18 = $6 + 52 | 0; //@line 15622
 $19 = $6 + 12 | 0; //@line 15623
 $20 = HEAP32[$17 >> 2] | 0; //@line 15624
 if (!$20) {
  $$0 = -3005; //@line 15627
  $36 = ___async_retval; //@line 15628
  HEAP32[$36 >> 2] = $$0; //@line 15629
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 15632
 $22 = HEAP32[$10 >> 2] | 0; //@line 15633
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 60 >> 2] | 0; //@line 15636
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 15637
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 15638
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 15641
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 15642
  HEAP32[$27 >> 2] = $19; //@line 15643
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 15644
  HEAP32[$28 >> 2] = $8; //@line 15645
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 15646
  HEAP32[$29 >> 2] = $17; //@line 15647
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 15648
  HEAP32[$30 >> 2] = $18; //@line 15649
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 15650
  HEAP32[$31 >> 2] = $10; //@line 15651
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 15652
  HEAP32[$32 >> 2] = $2; //@line 15653
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 15654
  HEAP32[$33 >> 2] = $12; //@line 15655
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 15656
  HEAP32[$34 >> 2] = $14; //@line 15657
  sp = STACKTOP; //@line 15658
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 15662
 ___async_unwind = 0; //@line 15663
 HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 15664
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 15665
 HEAP32[$27 >> 2] = $19; //@line 15666
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 15667
 HEAP32[$28 >> 2] = $8; //@line 15668
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 15669
 HEAP32[$29 >> 2] = $17; //@line 15670
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 15671
 HEAP32[$30 >> 2] = $18; //@line 15672
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 15673
 HEAP32[$31 >> 2] = $10; //@line 15674
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 15675
 HEAP32[$32 >> 2] = $2; //@line 15676
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 15677
 HEAP32[$33 >> 2] = $12; //@line 15678
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 15679
 HEAP32[$34 >> 2] = $14; //@line 15680
 sp = STACKTOP; //@line 15681
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_67($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22662
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22664
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22666
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22668
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22670
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22672
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22674
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22676
 $$pre = HEAP32[$2 >> 2] | 0; //@line 22677
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 22681
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 22682
  FUNCTION_TABLE_vii[$17 & 3]($6, $8); //@line 22683
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 22686
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 22687
   HEAP32[$18 >> 2] = $2; //@line 22688
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 22689
   HEAP32[$19 >> 2] = $4; //@line 22690
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 22691
   HEAP32[$20 >> 2] = $8; //@line 22692
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 22693
   HEAP32[$21 >> 2] = $10; //@line 22694
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 22695
   HEAP32[$22 >> 2] = $12; //@line 22696
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 22697
   HEAP32[$23 >> 2] = $6; //@line 22698
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 22699
   HEAP32[$24 >> 2] = $14; //@line 22700
   sp = STACKTOP; //@line 22701
   return;
  }
  ___async_unwind = 0; //@line 22704
  HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 22705
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 22706
  HEAP32[$18 >> 2] = $2; //@line 22707
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 22708
  HEAP32[$19 >> 2] = $4; //@line 22709
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 22710
  HEAP32[$20 >> 2] = $8; //@line 22711
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 22712
  HEAP32[$21 >> 2] = $10; //@line 22713
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 22714
  HEAP32[$22 >> 2] = $12; //@line 22715
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 22716
  HEAP32[$23 >> 2] = $6; //@line 22717
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 22718
  HEAP32[$24 >> 2] = $14; //@line 22719
  sp = STACKTOP; //@line 22720
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 22723
 $25 = HEAP32[$10 >> 2] | 0; //@line 22724
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 68 >> 2] | 0; //@line 22727
 $29 = HEAP32[$12 >> 2] | 0; //@line 22728
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 22729
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 73, $6); //@line 22730
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 22733
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 22734
  HEAP32[$30 >> 2] = $14; //@line 22735
  sp = STACKTOP; //@line 22736
  return;
 }
 ___async_unwind = 0; //@line 22739
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 22740
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 22741
 HEAP32[$30 >> 2] = $14; //@line 22742
 sp = STACKTOP; //@line 22743
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_6($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15689
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15691
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15693
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15695
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15699
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15701
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15703
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15705
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15707
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 15713
  $37 = ___async_retval; //@line 15714
  HEAP32[$37 >> 2] = $$0; //@line 15715
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 15718
 if (!$18) {
  $$0 = -3005; //@line 15721
  $37 = ___async_retval; //@line 15722
  HEAP32[$37 >> 2] = $$0; //@line 15723
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 15726
 $20 = HEAP32[$10 >> 2] | 0; //@line 15727
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 15730
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 15731
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 15732
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 15735
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 15736
  HEAP32[$25 >> 2] = $2; //@line 15737
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 15738
  HEAP32[$26 >> 2] = $4; //@line 15739
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 15740
  HEAP32[$27 >> 2] = $6; //@line 15741
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 15742
  HEAP32[$28 >> 2] = $8; //@line 15743
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 15744
  HEAP32[$29 >> 2] = $10; //@line 15745
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 15746
  HEAP32[$30 >> 2] = $12; //@line 15747
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 15748
  HEAP32[$31 >> 2] = $14; //@line 15749
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 15750
  HEAP32[$32 >> 2] = $16; //@line 15751
  sp = STACKTOP; //@line 15752
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 15756
 ___async_unwind = 0; //@line 15757
 HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 15758
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 15759
 HEAP32[$25 >> 2] = $2; //@line 15760
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 15761
 HEAP32[$26 >> 2] = $4; //@line 15762
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 15763
 HEAP32[$27 >> 2] = $6; //@line 15764
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 15765
 HEAP32[$28 >> 2] = $8; //@line 15766
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 15767
 HEAP32[$29 >> 2] = $10; //@line 15768
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 15769
 HEAP32[$30 >> 2] = $12; //@line 15770
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 15771
 HEAP32[$31 >> 2] = $14; //@line 15772
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 15773
 HEAP32[$32 >> 2] = $16; //@line 15774
 sp = STACKTOP; //@line 15775
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 386
 $5 = $1 + 8 | 0; //@line 387
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 392
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 400
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 406
   _puts(1556) | 0; //@line 407
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 29; //@line 410
    sp = STACKTOP; //@line 411
    return 0; //@line 412
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 414
   $$1 = -3012; //@line 415
   return $$1 | 0; //@line 416
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 80 >> 2] | 0; //@line 423
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 424
   $14 = FUNCTION_TABLE_iiii[$13 & 15]($0, $1, $2) | 0; //@line 425
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 30; //@line 428
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 430
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 432
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 434
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 436
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 438
    sp = STACKTOP; //@line 439
    return 0; //@line 440
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 442
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 445
    return $$1 | 0; //@line 446
   } else {
    $21 = $1 + 12 | 0; //@line 448
    dest = $21; //@line 449
    src = $2; //@line 449
    stop = dest + 60 | 0; //@line 449
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 449
     dest = dest + 4 | 0; //@line 449
     src = src + 4 | 0; //@line 449
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 449
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 454
 _wait_ms(1); //@line 455
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 31; //@line 458
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 460
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 462
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 464
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 466
  sp = STACKTOP; //@line 467
  return 0; //@line 468
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 470
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 473
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 474
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 475
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 32; //@line 478
  sp = STACKTOP; //@line 479
  return 0; //@line 480
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 482
 $$1 = $29; //@line 483
 return $$1 | 0; //@line 484
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4424
 STACKTOP = STACKTOP + 48 | 0; //@line 4425
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4425
 $vararg_buffer3 = sp + 16 | 0; //@line 4426
 $vararg_buffer = sp; //@line 4427
 $3 = sp + 32 | 0; //@line 4428
 $4 = $0 + 28 | 0; //@line 4429
 $5 = HEAP32[$4 >> 2] | 0; //@line 4430
 HEAP32[$3 >> 2] = $5; //@line 4431
 $7 = $0 + 20 | 0; //@line 4433
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4435
 HEAP32[$3 + 4 >> 2] = $9; //@line 4436
 HEAP32[$3 + 8 >> 2] = $1; //@line 4438
 HEAP32[$3 + 12 >> 2] = $2; //@line 4440
 $12 = $9 + $2 | 0; //@line 4441
 $13 = $0 + 60 | 0; //@line 4442
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4445
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4447
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4449
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4451
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4455
  } else {
   $$04756 = 2; //@line 4457
   $$04855 = $12; //@line 4457
   $$04954 = $3; //@line 4457
   $27 = $17; //@line 4457
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4463
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4465
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4466
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4468
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4470
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4472
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4475
    $44 = $$150 + 4 | 0; //@line 4476
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4479
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4482
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4484
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4486
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4488
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4491
     break L1;
    } else {
     $$04756 = $$1; //@line 4494
     $$04954 = $$150; //@line 4494
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4498
   HEAP32[$4 >> 2] = 0; //@line 4499
   HEAP32[$7 >> 2] = 0; //@line 4500
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4503
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4506
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4511
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4517
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4522
  $25 = $20; //@line 4523
  HEAP32[$4 >> 2] = $25; //@line 4524
  HEAP32[$7 >> 2] = $25; //@line 4525
  $$051 = $2; //@line 4526
 }
 STACKTOP = sp; //@line 4528
 return $$051 | 0; //@line 4528
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $$byval_copy = 0, $12 = 0, $13 = 0, $22 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6622
 STACKTOP = STACKTOP + 112 | 0; //@line 6623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 6623
 $$byval_copy = sp + 88 | 0; //@line 6624
 $4 = sp + 24 | 0; //@line 6625
 $5 = sp; //@line 6626
 $7 = ($3 | 0) == 0; //@line 6628
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$7) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$09 = -3009; //@line 6634
    STACKTOP = sp; //@line 6635
    return $$09 | 0; //@line 6635
   }
  }
  $$09 = 0; //@line 6638
  STACKTOP = sp; //@line 6639
  return $$09 | 0; //@line 6639
 }
 if ($7) {
  HEAP32[$5 >> 2] = 0; //@line 6642
  HEAP32[$5 + 4 >> 2] = 0; //@line 6642
  HEAP32[$5 + 8 >> 2] = 0; //@line 6642
  HEAP32[$5 + 12 >> 2] = 0; //@line 6642
  HEAP32[$5 + 16 >> 2] = 0; //@line 6642
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 6643
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 6643
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 6644
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 6647
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 6648
  $13 = FUNCTION_TABLE_ii[$12 & 15]($0) | 0; //@line 6649
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 64; //@line 6652
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 6654
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6656
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6658
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 6660
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6662
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6664
   sp = STACKTOP; //@line 6665
   STACKTOP = sp; //@line 6666
   return 0; //@line 6666
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6668
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $13) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 6672
  } else {
   $$0 = 0; //@line 6674
  }
  $$1 = $$0; //@line 6676
 } else {
  $$1 = $3; //@line 6678
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6680
 $22 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 6681
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 65; //@line 6684
  sp = STACKTOP; //@line 6685
  STACKTOP = sp; //@line 6686
  return 0; //@line 6686
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6688
 $$09 = $22; //@line 6689
 STACKTOP = sp; //@line 6690
 return $$09 | 0; //@line 6690
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16451
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16455
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16457
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16459
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16461
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 16467
  $34 = ___async_retval; //@line 16468
  HEAP32[$34 >> 2] = $$2; //@line 16469
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 16472
 if (!$16) {
  $$2 = -3005; //@line 16475
  $34 = ___async_retval; //@line 16476
  HEAP32[$34 >> 2] = $$2; //@line 16477
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 16480
 $18 = HEAP32[$8 >> 2] | 0; //@line 16481
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 64 >> 2] | 0; //@line 16484
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 16485
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 16486
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 16489
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 16490
  HEAP32[$23 >> 2] = $2; //@line 16491
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 16492
  HEAP32[$24 >> 2] = $4; //@line 16493
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 16494
  HEAP32[$25 >> 2] = $6; //@line 16495
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 16496
  HEAP32[$26 >> 2] = $8; //@line 16497
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 16498
  HEAP32[$27 >> 2] = $10; //@line 16499
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 16500
  HEAP32[$28 >> 2] = $12; //@line 16501
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 16502
  HEAP32[$29 >> 2] = $14; //@line 16503
  sp = STACKTOP; //@line 16504
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 16508
 ___async_unwind = 0; //@line 16509
 HEAP32[$ReallocAsyncCtx >> 2] = 89; //@line 16510
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 16511
 HEAP32[$23 >> 2] = $2; //@line 16512
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 16513
 HEAP32[$24 >> 2] = $4; //@line 16514
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 16515
 HEAP32[$25 >> 2] = $6; //@line 16516
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 16517
 HEAP32[$26 >> 2] = $8; //@line 16518
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 16519
 HEAP32[$27 >> 2] = $10; //@line 16520
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 16521
 HEAP32[$28 >> 2] = $12; //@line 16522
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 16523
 HEAP32[$29 >> 2] = $14; //@line 16524
 sp = STACKTOP; //@line 16525
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15941
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15945
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15947
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15949
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15951
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15953
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15955
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15957
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 15963
  $34 = ___async_retval; //@line 15964
  HEAP32[$34 >> 2] = $$2; //@line 15965
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 15968
 if (!$16) {
  $$2 = -3005; //@line 15971
  $34 = ___async_retval; //@line 15972
  HEAP32[$34 >> 2] = $$2; //@line 15973
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 15976
 $18 = HEAP32[$8 >> 2] | 0; //@line 15977
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 60 >> 2] | 0; //@line 15980
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 15981
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 15982
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 15985
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 15986
  HEAP32[$23 >> 2] = $2; //@line 15987
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 15988
  HEAP32[$24 >> 2] = $4; //@line 15989
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 15990
  HEAP32[$25 >> 2] = $6; //@line 15991
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 15992
  HEAP32[$26 >> 2] = $8; //@line 15993
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 15994
  HEAP32[$27 >> 2] = $10; //@line 15995
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 15996
  HEAP32[$28 >> 2] = $12; //@line 15997
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 15998
  HEAP32[$29 >> 2] = $14; //@line 15999
  sp = STACKTOP; //@line 16000
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 16004
 ___async_unwind = 0; //@line 16005
 HEAP32[$ReallocAsyncCtx >> 2] = 88; //@line 16006
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 16007
 HEAP32[$23 >> 2] = $2; //@line 16008
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 16009
 HEAP32[$24 >> 2] = $4; //@line 16010
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 16011
 HEAP32[$25 >> 2] = $6; //@line 16012
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 16013
 HEAP32[$26 >> 2] = $8; //@line 16014
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 16015
 HEAP32[$27 >> 2] = $10; //@line 16016
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 16017
 HEAP32[$28 >> 2] = $12; //@line 16018
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 16019
 HEAP32[$29 >> 2] = $14; //@line 16020
 sp = STACKTOP; //@line 16021
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_68($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22750
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22756
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22758
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22760
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22762
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22764
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22765
 $15 = $$pre$i$i; //@line 22766
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 22767
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 22770
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 68 >> 2] | 0; //@line 22773
  $28 = HEAP32[$10 >> 2] | 0; //@line 22774
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 22775
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 73, $12); //@line 22776
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 22779
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 22780
   HEAP32[$29 >> 2] = $14; //@line 22781
   sp = STACKTOP; //@line 22782
   return;
  }
  ___async_unwind = 0; //@line 22785
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 22786
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 22787
  HEAP32[$29 >> 2] = $14; //@line 22788
  sp = STACKTOP; //@line 22789
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 22793
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 22794
  FUNCTION_TABLE_vi[$18 & 255]($6); //@line 22795
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 22798
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 22799
   HEAP32[$19 >> 2] = $6; //@line 22800
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 22801
   HEAP32[$20 >> 2] = $8; //@line 22802
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 22803
   HEAP32[$21 >> 2] = $10; //@line 22804
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 22805
   HEAP32[$22 >> 2] = $12; //@line 22806
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 22807
   HEAP32[$23 >> 2] = $14; //@line 22808
   sp = STACKTOP; //@line 22809
   return;
  }
  ___async_unwind = 0; //@line 22812
  HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 22813
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 22814
  HEAP32[$19 >> 2] = $6; //@line 22815
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 22816
  HEAP32[$20 >> 2] = $8; //@line 22817
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 22818
  HEAP32[$21 >> 2] = $10; //@line 22819
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 22820
  HEAP32[$22 >> 2] = $12; //@line 22821
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 22822
  HEAP32[$23 >> 2] = $14; //@line 22823
  sp = STACKTOP; //@line 22824
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_4($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15445
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15451
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 15453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15455
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 15457
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15459
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15461
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15463
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15465
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 15468
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15470
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 15474
   $27 = $6 + 24 | 0; //@line 15475
   $28 = $4 + 8 | 0; //@line 15476
   $29 = $6 + 54 | 0; //@line 15477
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 15507
    HEAP8[$14 >> 0] = 0; //@line 15508
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 15509
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 15510
    if (!___async) {
     ___async_unwind = 0; //@line 15513
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 177; //@line 15515
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 15517
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 15519
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 15521
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 15523
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 15525
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 15527
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 15529
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 15531
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 15533
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 15535
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 15537
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 15539
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 15541
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 15544
    sp = STACKTOP; //@line 15545
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 15550
 HEAP8[$14 >> 0] = $12; //@line 15551
 return;
}
function _randLIB_seed_random() {
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0;
 $0 = _arm_random_seed_get() | 0; //@line 979
 $1 = _arm_random_seed_get() | 0; //@line 980
 $2 = 6216; //@line 981
 $9 = $0 ^ HEAP32[$2 + 4 >> 2]; //@line 988
 $10 = 6216; //@line 989
 HEAP32[$10 >> 2] = $1 ^ HEAP32[$2 >> 2]; //@line 991
 HEAP32[$10 + 4 >> 2] = $9; //@line 994
 $14 = _arm_random_seed_get() | 0; //@line 995
 $15 = _arm_random_seed_get() | 0; //@line 996
 $16 = 6224; //@line 997
 $22 = $15 ^ HEAP32[$16 >> 2]; //@line 1003
 $23 = $14 ^ HEAP32[$16 + 4 >> 2]; //@line 1004
 $24 = 6224; //@line 1005
 HEAP32[$24 >> 2] = $22; //@line 1007
 HEAP32[$24 + 4 >> 2] = $23; //@line 1010
 $28 = 6216; //@line 1011
 if (!((HEAP32[$28 >> 2] | 0) == ($22 | 0) ? (HEAP32[$28 + 4 >> 2] | 0) == ($23 | 0) : 0)) {
  return;
 }
 $37 = _i64Add($22 | 0, $23 | 0, 2135587861, -1640531527) | 0; //@line 1023
 $38 = tempRet0; //@line 1024
 $39 = _bitshift64Lshr($37 | 0, $38 | 0, 30) | 0; //@line 1025
 $43 = ___muldi3($39 ^ $37 | 0, tempRet0 ^ $38 | 0, 484763065, -1084733587) | 0; //@line 1029
 $44 = tempRet0; //@line 1030
 $45 = _bitshift64Lshr($43 | 0, $44 | 0, 27) | 0; //@line 1031
 $49 = ___muldi3($45 ^ $43 | 0, tempRet0 ^ $44 | 0, 321982955, -1798288965) | 0; //@line 1035
 $50 = tempRet0; //@line 1036
 $51 = _bitshift64Lshr($49 | 0, $50 | 0, 31) | 0; //@line 1037
 $55 = $49 ^ $22 ^ $51; //@line 1041
 $56 = $50 ^ $23 ^ tempRet0; //@line 1042
 $57 = 6216; //@line 1043
 HEAP32[$57 >> 2] = $55; //@line 1045
 HEAP32[$57 + 4 >> 2] = $56; //@line 1048
 $61 = _i64Add($22 | 0, $23 | 0, -23791574, 1013904242) | 0; //@line 1049
 $62 = tempRet0; //@line 1050
 $63 = _bitshift64Lshr($61 | 0, $62 | 0, 30) | 0; //@line 1051
 $67 = ___muldi3($63 ^ $61 | 0, tempRet0 ^ $62 | 0, 484763065, -1084733587) | 0; //@line 1055
 $68 = tempRet0; //@line 1056
 $69 = _bitshift64Lshr($67 | 0, $68 | 0, 27) | 0; //@line 1057
 $73 = ___muldi3($69 ^ $67 | 0, tempRet0 ^ $68 | 0, 321982955, -1798288965) | 0; //@line 1061
 $74 = tempRet0; //@line 1062
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 31) | 0; //@line 1063
 $79 = $75 ^ $73 ^ $22; //@line 1067
 $80 = tempRet0 ^ $74 ^ $23; //@line 1068
 $81 = 6224; //@line 1069
 HEAP32[$81 >> 2] = $79; //@line 1071
 HEAP32[$81 + 4 >> 2] = $80; //@line 1074
 if (!(($79 | $55 | 0) == 0 & ($80 | $56 | 0) == 0)) {
  return;
 }
 $90 = 6216; //@line 1083
 HEAP32[$90 >> 2] = 1; //@line 1085
 HEAP32[$90 + 4 >> 2] = 0; //@line 1088
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15329
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15333
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15335
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 15337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15339
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 15341
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15343
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15345
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15347
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15349
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15351
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15353
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15355
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 15358
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 15359
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 15392
    HEAP8[$14 >> 0] = 0; //@line 15393
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 15394
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 15395
    if (!___async) {
     ___async_unwind = 0; //@line 15398
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 177; //@line 15400
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 15402
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 15404
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 15406
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 15408
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 15410
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 15412
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 15414
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 15416
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 15418
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 15420
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 15422
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 15424
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 15426
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 15429
    sp = STACKTOP; //@line 15430
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 15435
 HEAP8[$14 >> 0] = $12; //@line 15436
 return;
}
function __Z17recv_coap_messagev__async_cb_72($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $41 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23069
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23071
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23075
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23077
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23081
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23083
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23085
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23087
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23089
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23091
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23093
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23095
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23097
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23099
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23101
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23103
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23105
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23107
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23109
 if (($AsyncRetVal | 0) <= 0) {
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23112
  _printf(2705, $8) | 0; //@line 23113
  _free($6); //@line 23114
  return;
 }
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 23117
 _printf(2532, $2) | 0; //@line 23118
 $41 = HEAP32[1575] | 0; //@line 23119
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 23121
 $43 = _sn_coap_parser($41, $AsyncRetVal & 65535, $6, 556) | 0; //@line 23122
 if (!___async) {
  HEAP32[___async_retval >> 2] = $43; //@line 23126
  ___async_unwind = 0; //@line 23127
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 132; //@line 23129
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 23131
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $16; //@line 23133
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $18; //@line 23135
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $20; //@line 23137
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $22; //@line 23139
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $24; //@line 23141
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $26; //@line 23143
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $28; //@line 23145
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 23147
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 23149
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 23151
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 23153
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 23155
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $6; //@line 23157
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $12; //@line 23159
 sp = STACKTOP; //@line 23160
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 1769
 }
 ret = dest | 0; //@line 1772
 dest_end = dest + num | 0; //@line 1773
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 1777
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1778
   dest = dest + 1 | 0; //@line 1779
   src = src + 1 | 0; //@line 1780
   num = num - 1 | 0; //@line 1781
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 1783
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 1784
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1786
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 1787
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 1788
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 1789
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 1790
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 1791
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 1792
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 1793
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 1794
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 1795
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 1796
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 1797
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 1798
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 1799
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 1800
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 1801
   dest = dest + 64 | 0; //@line 1802
   src = src + 64 | 0; //@line 1803
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1806
   dest = dest + 4 | 0; //@line 1807
   src = src + 4 | 0; //@line 1808
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 1812
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1814
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 1815
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 1816
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 1817
   dest = dest + 4 | 0; //@line 1818
   src = src + 4 | 0; //@line 1819
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1824
  dest = dest + 1 | 0; //@line 1825
  src = src + 1 | 0; //@line 1826
 }
 return ret | 0; //@line 1828
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 13417
 STACKTOP = STACKTOP + 64 | 0; //@line 13418
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 13418
 $3 = sp; //@line 13419
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 13422
 } else {
  if (!$1) {
   $$2 = 0; //@line 13426
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13428
   $6 = ___dynamic_cast($1, 104, 88, 0) | 0; //@line 13429
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 166; //@line 13432
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 13434
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 13436
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13438
    sp = STACKTOP; //@line 13439
    STACKTOP = sp; //@line 13440
    return 0; //@line 13440
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13442
   if (!$6) {
    $$2 = 0; //@line 13445
   } else {
    dest = $3 + 4 | 0; //@line 13448
    stop = dest + 52 | 0; //@line 13448
    do {
     HEAP32[dest >> 2] = 0; //@line 13448
     dest = dest + 4 | 0; //@line 13448
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 13449
    HEAP32[$3 + 8 >> 2] = $0; //@line 13451
    HEAP32[$3 + 12 >> 2] = -1; //@line 13453
    HEAP32[$3 + 48 >> 2] = 1; //@line 13455
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 13458
    $18 = HEAP32[$2 >> 2] | 0; //@line 13459
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13460
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 13461
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 167; //@line 13464
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13466
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13468
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13470
     sp = STACKTOP; //@line 13471
     STACKTOP = sp; //@line 13472
     return 0; //@line 13472
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13474
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 13481
     $$0 = 1; //@line 13482
    } else {
     $$0 = 0; //@line 13484
    }
    $$2 = $$0; //@line 13486
   }
  }
 }
 STACKTOP = sp; //@line 13490
 return $$2 | 0; //@line 13490
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 12764
 STACKTOP = STACKTOP + 128 | 0; //@line 12765
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 12765
 $4 = sp + 124 | 0; //@line 12766
 $5 = sp; //@line 12767
 dest = $5; //@line 12768
 src = 1308; //@line 12768
 stop = dest + 124 | 0; //@line 12768
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 12768
  dest = dest + 4 | 0; //@line 12768
  src = src + 4 | 0; //@line 12768
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 12774
   $$015 = 1; //@line 12774
   label = 4; //@line 12775
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12778
   $$0 = -1; //@line 12779
  }
 } else {
  $$014 = $0; //@line 12782
  $$015 = $1; //@line 12782
  label = 4; //@line 12783
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 12787
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 12789
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 12791
  $14 = $5 + 20 | 0; //@line 12792
  HEAP32[$14 >> 2] = $$014; //@line 12793
  HEAP32[$5 + 44 >> 2] = $$014; //@line 12795
  $16 = $$014 + $$$015 | 0; //@line 12796
  $17 = $5 + 16 | 0; //@line 12797
  HEAP32[$17 >> 2] = $16; //@line 12798
  HEAP32[$5 + 28 >> 2] = $16; //@line 12800
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12801
  $19 = _vfprintf($5, $2, $3) | 0; //@line 12802
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 154; //@line 12805
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 12807
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 12809
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 12811
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 12813
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 12815
   sp = STACKTOP; //@line 12816
   STACKTOP = sp; //@line 12817
   return 0; //@line 12817
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12819
  if (!$$$015) {
   $$0 = $19; //@line 12822
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 12824
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 12829
   $$0 = $19; //@line 12830
  }
 }
 STACKTOP = sp; //@line 12833
 return $$0 | 0; //@line 12833
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14749
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14755
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 14759
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 14760
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 14761
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 14762
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 183; //@line 14765
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 14767
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14769
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 14771
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 14773
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 14775
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 14777
    sp = STACKTOP; //@line 14778
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14781
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 14785
    $$0 = $0 + 24 | 0; //@line 14786
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14788
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 14789
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14794
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 14800
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 14803
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 184; //@line 14808
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 14810
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 14812
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 14814
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14816
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14818
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 14820
    sp = STACKTOP; //@line 14821
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 586
 STACKTOP = STACKTOP + 48 | 0; //@line 587
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 587
 $$byval_copy = sp + 20 | 0; //@line 588
 $3 = sp; //@line 589
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 590
 $4 = __Znwj(76) | 0; //@line 591
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 594
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 596
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 598
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 600
  sp = STACKTOP; //@line 601
  STACKTOP = sp; //@line 602
  return 0; //@line 602
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 604
 dest = $4; //@line 605
 stop = dest + 76 | 0; //@line 605
 do {
  HEAP32[dest >> 2] = 0; //@line 605
  dest = dest + 4 | 0; //@line 605
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 606
 HEAP32[$3 >> 2] = 0; //@line 607
 HEAP32[$3 + 4 >> 2] = 0; //@line 607
 HEAP32[$3 + 8 >> 2] = 0; //@line 607
 HEAP32[$3 + 12 >> 2] = 0; //@line 607
 HEAP32[$3 + 16 >> 2] = 0; //@line 607
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 608
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 608
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 608
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 608
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 608
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 609
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 610
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 613
  STACKTOP = sp; //@line 614
  return $$0$i | 0; //@line 614
 }
 HEAP32[$4 >> 2] = $9; //@line 616
 HEAP8[$4 + 8 >> 0] = 0; //@line 618
 HEAP32[$4 + 4 >> 2] = $2; //@line 620
 HEAP32[$1 >> 2] = $4; //@line 621
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 622
 _wait_ms(1); //@line 623
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 37; //@line 626
  sp = STACKTOP; //@line 627
  STACKTOP = sp; //@line 628
  return 0; //@line 628
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 630
 $$0$i = 0; //@line 631
 STACKTOP = sp; //@line 632
 return $$0$i | 0; //@line 632
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 189
 STACKTOP = STACKTOP + 48 | 0; //@line 190
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 190
 $$byval_copy = sp + 20 | 0; //@line 191
 $3 = sp; //@line 192
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 193
 $4 = __Znwj(76) | 0; //@line 194
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 23; //@line 197
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 199
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 201
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 203
  sp = STACKTOP; //@line 204
  STACKTOP = sp; //@line 205
  return 0; //@line 205
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 207
 dest = $4; //@line 208
 stop = dest + 76 | 0; //@line 208
 do {
  HEAP32[dest >> 2] = 0; //@line 208
  dest = dest + 4 | 0; //@line 208
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 209
 HEAP32[$3 >> 2] = 0; //@line 210
 HEAP32[$3 + 4 >> 2] = 0; //@line 210
 HEAP32[$3 + 8 >> 2] = 0; //@line 210
 HEAP32[$3 + 12 >> 2] = 0; //@line 210
 HEAP32[$3 + 16 >> 2] = 0; //@line 210
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 211
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 211
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 211
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 211
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 211
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 212
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 213
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 216
  STACKTOP = sp; //@line 217
  return $$0 | 0; //@line 217
 }
 HEAP32[$4 >> 2] = $9; //@line 219
 HEAP8[$4 + 8 >> 0] = 0; //@line 221
 HEAP32[$4 + 4 >> 2] = $2; //@line 223
 HEAP32[$1 >> 2] = $4; //@line 224
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 225
 _wait_ms(1); //@line 226
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 24; //@line 229
  sp = STACKTOP; //@line 230
  STACKTOP = sp; //@line 231
  return 0; //@line 231
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 233
 $$0 = 0; //@line 234
 STACKTOP = sp; //@line 235
 return $$0 | 0; //@line 235
}
function _sn_coap_builder_options_build_add_one_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$sink13 = 0, $$sink63 = 0, $$sink7 = 0, $14 = 0, $17 = 0, $23 = 0, $25 = 0, $34 = 0, $43 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $8 = 0, $9 = 0, label = 0;
 if (!$2) {
  $$0 = 0; //@line 4489
  return $$0 | 0; //@line 4490
 }
 $8 = $3 - (HEAPU16[$4 >> 1] | 0) | 0; //@line 4494
 $9 = $1 & 65535; //@line 4495
 HEAP8[HEAP32[$0 >> 2] >> 0] = ($1 & 65535) < 13 ? $1 & 255 : ($1 & 65535) < 269 ? 13 : 14; //@line 4502
 $14 = $8 & 65535; //@line 4503
 do {
  if ($14 >>> 0 < 13) {
   $17 = HEAP32[$0 >> 2] | 0; //@line 4508
   HEAP8[$17 >> 0] = ($14 << 4) + (HEAPU8[$17 >> 0] | 0); //@line 4513
   $$sink7 = 1; //@line 4514
  } else {
   $23 = HEAP32[$0 >> 2] | 0; //@line 4517
   $25 = HEAPU8[$23 >> 0] | 0; //@line 4519
   if ($14 >>> 0 < 269) {
    HEAP8[$23 >> 0] = $25 + 208; //@line 4523
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $8 + 243; //@line 4528
    $$sink7 = 2; //@line 4529
    break;
   } else {
    HEAP8[$23 >> 0] = $25 + 224; //@line 4534
    $34 = $8 + 65267 | 0; //@line 4535
    HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = $34; //@line 4539
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $34 >>> 8; //@line 4544
    $$sink7 = 3; //@line 4545
    break;
   }
  }
 } while (0);
 $43 = (HEAP32[$0 >> 2] | 0) + $$sink7 | 0; //@line 4551
 HEAP32[$0 >> 2] = $43; //@line 4552
 if (($1 + -13 & 65535) < 256) {
  $$sink13 = 1; //@line 4557
  $$sink63 = $9 + 243 | 0; //@line 4557
  $52 = $43; //@line 4557
  label = 11; //@line 4558
 } else {
  if (($1 & 65535) > 268) {
   $47 = $9 + -269 | 0; //@line 4562
   HEAP8[$43 + 1 >> 0] = $47; //@line 4565
   $$sink13 = 2; //@line 4568
   $$sink63 = $47 >>> 8; //@line 4568
   $52 = HEAP32[$0 >> 2] | 0; //@line 4568
   label = 11; //@line 4569
  } else {
   $56 = $43; //@line 4571
  }
 }
 if ((label | 0) == 11) {
  HEAP8[$52 >> 0] = $$sink63; //@line 4576
  $54 = (HEAP32[$0 >> 2] | 0) + $$sink13 | 0; //@line 4578
  HEAP32[$0 >> 2] = $54; //@line 4579
  $56 = $54; //@line 4580
 }
 HEAP16[$4 >> 1] = $3; //@line 4583
 _memcpy($56 | 0, $2 | 0, $9 | 0) | 0; //@line 4584
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $9; //@line 4587
 $$0 = 1; //@line 4588
 return $$0 | 0; //@line 4589
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12927
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 12932
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 12937
  } else {
   $20 = $0 & 255; //@line 12939
   $21 = $0 & 255; //@line 12940
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 12946
   } else {
    $26 = $1 + 20 | 0; //@line 12948
    $27 = HEAP32[$26 >> 2] | 0; //@line 12949
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 12955
     HEAP8[$27 >> 0] = $20; //@line 12956
     $34 = $21; //@line 12957
    } else {
     label = 12; //@line 12959
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12964
     $32 = ___overflow($1, $0) | 0; //@line 12965
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 159; //@line 12968
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12970
      sp = STACKTOP; //@line 12971
      return 0; //@line 12972
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12974
      $34 = $32; //@line 12975
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 12980
   $$0 = $34; //@line 12981
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 12986
   $8 = $0 & 255; //@line 12987
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 12993
    $14 = HEAP32[$13 >> 2] | 0; //@line 12994
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 13000
     HEAP8[$14 >> 0] = $7; //@line 13001
     $$0 = $8; //@line 13002
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13006
   $19 = ___overflow($1, $0) | 0; //@line 13007
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 158; //@line 13010
    sp = STACKTOP; //@line 13011
    return 0; //@line 13012
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13014
    $$0 = $19; //@line 13015
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13020
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5145
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5148
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5151
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5154
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5160
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5169
     $24 = $13 >>> 2; //@line 5170
     $$090 = 0; //@line 5171
     $$094 = $7; //@line 5171
     while (1) {
      $25 = $$094 >>> 1; //@line 5173
      $26 = $$090 + $25 | 0; //@line 5174
      $27 = $26 << 1; //@line 5175
      $28 = $27 + $23 | 0; //@line 5176
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5179
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5183
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5189
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5197
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5201
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5207
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5212
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5215
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5215
      }
     }
     $46 = $27 + $24 | 0; //@line 5218
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5221
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5225
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5237
     } else {
      $$4 = 0; //@line 5239
     }
    } else {
     $$4 = 0; //@line 5242
    }
   } else {
    $$4 = 0; //@line 5245
   }
  } else {
   $$4 = 0; //@line 5248
  }
 } while (0);
 return $$4 | 0; //@line 5251
}
function _main__async_cb_16($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16238
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16244
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16246
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16248
 HEAP32[1575] = HEAP32[___async_retval >> 2]; //@line 16251
 $12 = _calloc(44, 1) | 0; //@line 16252
 HEAP32[$12 + 32 >> 2] = 2832; //@line 16254
 HEAP16[$12 + 22 >> 1] = 6; //@line 16256
 HEAP32[$12 + 8 >> 2] = 1; //@line 16258
 HEAP16[$12 + 20 >> 1] = 7; //@line 16260
 $18 = (_sn_coap_builder_calc_needed_packet_data_size($12) | 0) & 65535; //@line 16262
 HEAP32[$2 >> 2] = $18; //@line 16263
 _printf(2839, $2) | 0; //@line 16264
 $19 = _malloc($18) | 0; //@line 16265
 _sn_coap_builder($19, $12) | 0; //@line 16266
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 16267
 $20 = __ZN9UDPSocket6sendtoEPKctPKvj(6244, 2876, 5683, $19, $18) | 0; //@line 16268
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 140; //@line 16271
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 16272
  HEAP32[$21 >> 2] = $6; //@line 16273
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 16274
  HEAP32[$22 >> 2] = $8; //@line 16275
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 16276
  HEAP32[$23 >> 2] = $12; //@line 16277
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 16278
  HEAP32[$24 >> 2] = $19; //@line 16279
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 16280
  HEAP32[$25 >> 2] = $10; //@line 16281
  sp = STACKTOP; //@line 16282
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 16286
 ___async_unwind = 0; //@line 16287
 HEAP32[$ReallocAsyncCtx6 >> 2] = 140; //@line 16288
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 16289
 HEAP32[$21 >> 2] = $6; //@line 16290
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 16291
 HEAP32[$22 >> 2] = $8; //@line 16292
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 16293
 HEAP32[$23 >> 2] = $12; //@line 16294
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 16295
 HEAP32[$24 >> 2] = $19; //@line 16296
 $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 16297
 HEAP32[$25 >> 2] = $10; //@line 16298
 sp = STACKTOP; //@line 16299
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4810
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 4815
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 4820
  } else {
   $20 = $0 & 255; //@line 4822
   $21 = $0 & 255; //@line 4823
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 4829
   } else {
    $26 = $1 + 20 | 0; //@line 4831
    $27 = HEAP32[$26 >> 2] | 0; //@line 4832
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 4838
     HEAP8[$27 >> 0] = $20; //@line 4839
     $34 = $21; //@line 4840
    } else {
     label = 12; //@line 4842
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4847
     $32 = ___overflow($1, $0) | 0; //@line 4848
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 145; //@line 4851
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4853
      sp = STACKTOP; //@line 4854
      return 0; //@line 4855
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4857
      $34 = $32; //@line 4858
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 4863
   $$0 = $34; //@line 4864
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 4869
   $8 = $0 & 255; //@line 4870
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 4876
    $14 = HEAP32[$13 >> 2] | 0; //@line 4877
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 4883
     HEAP8[$14 >> 0] = $7; //@line 4884
     $$0 = $8; //@line 4885
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4889
   $19 = ___overflow($1, $0) | 0; //@line 4890
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 144; //@line 4893
    sp = STACKTOP; //@line 4894
    return 0; //@line 4895
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4897
    $$0 = $19; //@line 4898
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4903
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5518
 $1 = $0 + 20 | 0; //@line 5519
 $3 = $0 + 28 | 0; //@line 5521
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5527
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5528
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 5529
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 151; //@line 5532
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5534
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5536
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5538
    sp = STACKTOP; //@line 5539
    return 0; //@line 5540
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5542
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5546
     break;
    } else {
     label = 5; //@line 5549
     break;
    }
   }
  } else {
   label = 5; //@line 5554
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5558
  $14 = HEAP32[$13 >> 2] | 0; //@line 5559
  $15 = $0 + 8 | 0; //@line 5560
  $16 = HEAP32[$15 >> 2] | 0; //@line 5561
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5569
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5570
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 5571
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 152; //@line 5574
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5576
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5578
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5580
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5582
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5584
     sp = STACKTOP; //@line 5585
     return 0; //@line 5586
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5588
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5594
  HEAP32[$3 >> 2] = 0; //@line 5595
  HEAP32[$1 >> 2] = 0; //@line 5596
  HEAP32[$15 >> 2] = 0; //@line 5597
  HEAP32[$13 >> 2] = 0; //@line 5598
  $$0 = 0; //@line 5599
 }
 return $$0 | 0; //@line 5601
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21660
 STACKTOP = STACKTOP + 32 | 0; //@line 21661
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21661
 $$byval_copy = sp; //@line 21662
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21664
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21666
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21668
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21670
 dest = $AsyncRetVal; //@line 21671
 stop = dest + 76 | 0; //@line 21671
 do {
  HEAP32[dest >> 2] = 0; //@line 21671
  dest = dest + 4 | 0; //@line 21671
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 21672
 HEAP32[$2 >> 2] = 0; //@line 21673
 HEAP32[$2 + 4 >> 2] = 0; //@line 21673
 HEAP32[$2 + 8 >> 2] = 0; //@line 21673
 HEAP32[$2 + 12 >> 2] = 0; //@line 21673
 HEAP32[$2 + 16 >> 2] = 0; //@line 21673
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 21674
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 21674
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 21674
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 21674
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 21674
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 21675
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 21676
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 21680
  STACKTOP = sp; //@line 21681
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 21683
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 21685
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 21687
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 21688
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21689
 _wait_ms(1); //@line 21690
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 37; //@line 21693
  sp = STACKTOP; //@line 21694
  STACKTOP = sp; //@line 21695
  return;
 }
 ___async_unwind = 0; //@line 21697
 HEAP32[$ReallocAsyncCtx2 >> 2] = 37; //@line 21698
 sp = STACKTOP; //@line 21699
 STACKTOP = sp; //@line 21700
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15886
 STACKTOP = STACKTOP + 32 | 0; //@line 15887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15887
 $$byval_copy = sp; //@line 15888
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15890
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15892
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15894
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15896
 dest = $AsyncRetVal; //@line 15897
 stop = dest + 76 | 0; //@line 15897
 do {
  HEAP32[dest >> 2] = 0; //@line 15897
  dest = dest + 4 | 0; //@line 15897
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 15898
 HEAP32[$2 >> 2] = 0; //@line 15899
 HEAP32[$2 + 4 >> 2] = 0; //@line 15899
 HEAP32[$2 + 8 >> 2] = 0; //@line 15899
 HEAP32[$2 + 12 >> 2] = 0; //@line 15899
 HEAP32[$2 + 16 >> 2] = 0; //@line 15899
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 15900
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 15900
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 15900
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 15900
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 15900
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 15901
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 15902
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 15906
  STACKTOP = sp; //@line 15907
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 15909
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 15911
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 15913
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 15914
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15915
 _wait_ms(1); //@line 15916
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 24; //@line 15919
  sp = STACKTOP; //@line 15920
  STACKTOP = sp; //@line 15921
  return;
 }
 ___async_unwind = 0; //@line 15923
 HEAP32[$ReallocAsyncCtx2 >> 2] = 24; //@line 15924
 sp = STACKTOP; //@line 15925
 STACKTOP = sp; //@line 15926
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 7140
 $1 = $0 + 8 | 0; //@line 7141
 $2 = HEAP32[$1 >> 2] | 0; //@line 7142
 $$pre = $0 + 4 | 0; //@line 7144
 do {
  if (!$2) {
   $$0 = 0; //@line 7147
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 7149
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 68 >> 2] | 0; //@line 7152
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7153
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 7154
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 78; //@line 7157
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7159
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 7161
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7163
    sp = STACKTOP; //@line 7164
    return 0; //@line 7165
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7167
   $11 = HEAP32[$1 >> 2] | 0; //@line 7168
   HEAP32[$1 >> 2] = 0; //@line 7169
   $12 = HEAP32[$$pre >> 2] | 0; //@line 7170
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] | 0; //@line 7173
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7174
   $16 = FUNCTION_TABLE_iii[$15 & 7]($12, $11) | 0; //@line 7175
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 79; //@line 7178
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 7180
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7182
    sp = STACKTOP; //@line 7183
    return 0; //@line 7184
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7186
    $$0 = $16; //@line 7187
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 7192
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 7195
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7196
 FUNCTION_TABLE_vi[$21 & 255]($0); //@line 7197
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 80; //@line 7200
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 7202
  sp = STACKTOP; //@line 7203
  return 0; //@line 7204
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7206
  return $$0 | 0; //@line 7207
 }
 return 0; //@line 7209
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 8093
    return $12 | 0; //@line 8094
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 8100
    return $12 | 0; //@line 8101
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 8110
   } else {
    $12 = 1; //@line 8112
    return $12 | 0; //@line 8113
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 8122
    return $12 | 0; //@line 8123
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 8129
    return $12 | 0; //@line 8130
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 8136
    return $12 | 0; //@line 8137
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 8143
    return $12 | 0; //@line 8144
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 8150
    return $12 | 0; //@line 8151
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 8157
    return $12 | 0; //@line 8158
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 8164
    return $12 | 0; //@line 8165
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 8171
    return $12 | 0; //@line 8172
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 8178
    return $12 | 0; //@line 8179
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 8185
    return $12 | 0; //@line 8186
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 8192
    return $12 | 0; //@line 8193
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 8199
    return $12 | 0; //@line 8200
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 8206
    return $12 | 0; //@line 8207
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 8213
    return $12 | 0; //@line 8214
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 8220
    return $12 | 0; //@line 8221
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 8226
   return $12 | 0; //@line 8227
  }
 default:
  {
   $12 = 0; //@line 8231
   return $12 | 0; //@line 8232
  }
 }
 return 0; //@line 8235
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16796
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16802
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16804
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16806
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16808
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16812
  return;
 }
 $13 = $2 + 12 | 0; //@line 16815
 dest = $13; //@line 16816
 src = $4; //@line 16816
 stop = dest + 60 | 0; //@line 16816
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16816
  dest = dest + 4 | 0; //@line 16816
  src = src + 4 | 0; //@line 16816
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 16816
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 16817
 _wait_ms(1); //@line 16818
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 31; //@line 16821
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 16822
  HEAP32[$14 >> 2] = $6; //@line 16823
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 16824
  HEAP32[$15 >> 2] = $2; //@line 16825
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 16826
  HEAP32[$16 >> 2] = $8; //@line 16827
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 16828
  HEAP32[$17 >> 2] = $10; //@line 16829
  sp = STACKTOP; //@line 16830
  return;
 }
 ___async_unwind = 0; //@line 16833
 HEAP32[$ReallocAsyncCtx4 >> 2] = 31; //@line 16834
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 16835
 HEAP32[$14 >> 2] = $6; //@line 16836
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 16837
 HEAP32[$15 >> 2] = $2; //@line 16838
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 16839
 HEAP32[$16 >> 2] = $8; //@line 16840
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 16841
 HEAP32[$17 >> 2] = $10; //@line 16842
 sp = STACKTOP; //@line 16843
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $$09$i = 0, $1 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10234
 STACKTOP = STACKTOP + 144 | 0; //@line 10235
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 10235
 $1 = sp + 16 | 0; //@line 10236
 $2 = sp; //@line 10237
 HEAP32[$2 >> 2] = $varargs; //@line 10238
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 10239
 $3 = _vsnprintf($1, 128, $0, $2) | 0; //@line 10240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 10243
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10245
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10247
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 10249
  sp = STACKTOP; //@line 10250
  STACKTOP = sp; //@line 10251
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10253
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 10256
  return;
 }
 if (!(HEAP32[1558] | 0)) {
  _serial_init(6236, 2, 3); //@line 10261
  $$09$i = 0; //@line 10262
 } else {
  $$09$i = 0; //@line 10264
 }
 while (1) {
  $12 = HEAP8[$1 + $$09$i >> 0] | 0; //@line 10269
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10270
  _serial_putc(6236, $12); //@line 10271
  if (___async) {
   label = 7; //@line 10274
   break;
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10277
  $18 = $$09$i + 1 | 0; //@line 10278
  if (($18 | 0) == ($3 | 0)) {
   label = 9; //@line 10281
   break;
  } else {
   $$09$i = $18; //@line 10284
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx2 >> 2] = 122; //@line 10288
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$09$i; //@line 10290
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 10292
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 10294
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 10296
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 10298
  sp = STACKTOP; //@line 10299
  STACKTOP = sp; //@line 10300
  return;
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 10303
  return;
 }
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5282
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5288
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5294
   } else {
    $7 = $1 & 255; //@line 5296
    $$03039 = $0; //@line 5297
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5299
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5304
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5307
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5312
      break;
     } else {
      $$03039 = $13; //@line 5315
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5319
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5320
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5328
     $25 = $18; //@line 5328
     while (1) {
      $24 = $25 ^ $17; //@line 5330
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5337
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5340
      $25 = HEAP32[$31 >> 2] | 0; //@line 5341
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5350
       break;
      } else {
       $$02936 = $31; //@line 5348
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5355
    }
   } while (0);
   $38 = $1 & 255; //@line 5358
   $$1 = $$029$lcssa; //@line 5359
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5361
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5367
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5370
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5375
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6608
 $2 = HEAP32[$1 >> 2] | 0; //@line 6609
 if (!$2) {
  label = 3; //@line 6612
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6618
  } else {
   label = 4; //@line 6620
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6624
  if (($7 | 0) < 0) {
   label = 4; //@line 6627
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6629
   $$phi$trans$insert = $0 + 8 | 0; //@line 6631
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6633
    $$sink = $$pre; //@line 6634
    $26 = $$pre; //@line 6634
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6636
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6638
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6643
    $21 = $12; //@line 6645
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6647
     $26 = $21; //@line 6647
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6651
     $26 = $21; //@line 6651
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6655
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6657
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6660
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6662
    $29 = $0 + 108 | 0; //@line 6664
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6669
    $36 = $27; //@line 6671
   }
   $35 = $36 + -1 | 0; //@line 6673
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6678
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6681
    $$0 = $7; //@line 6682
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6688
  $$0 = -1; //@line 6689
 }
 return $$0 | 0; //@line 6691
}
function __Z17recv_coap_messagev__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22982
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22984
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22988
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22992
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22996
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22998
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23002
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23004
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23008
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23012
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23016
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 23017
 HEAP32[$2 + 8 >> 2] = $4 | -2147483648; //@line 23020
 HEAP32[$2 + 4 >> 2] = $6; //@line 23022
 $$pre = $2 + 11 | 0; //@line 23023
 _memcpy($AsyncRetVal | 0, $8 | 0, $6 | 0) | 0; //@line 23024
 HEAP8[$AsyncRetVal + $6 >> 0] = 0; //@line 23026
 HEAP32[$12 >> 2] = HEAPU16[$10 + 20 >> 1]; //@line 23030
 _printf(2567, $12) | 0; //@line 23031
 HEAP32[$16 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 23034
 _printf(2590, $16) | 0; //@line 23035
 HEAP32[$20 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 23038
 _printf(2613, $20) | 0; //@line 23039
 HEAP32[$26 >> 2] = HEAPU16[$24 >> 1]; //@line 23042
 _printf(2636, $26) | 0; //@line 23043
 HEAP32[$32 >> 2] = (HEAP8[$$pre >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $30; //@line 23048
 _printf(2659, $32) | 0; //@line 23049
 HEAP32[$36 >> 2] = HEAP32[$10 + 40 >> 2]; //@line 23052
 _printf(2682, $36) | 0; //@line 23053
 if ((HEAP8[$$pre >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 23058
 }
 _free($40); //@line 23060
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5036
 $4 = HEAP32[$3 >> 2] | 0; //@line 5037
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 5044
   label = 5; //@line 5045
  } else {
   $$1 = 0; //@line 5047
  }
 } else {
  $12 = $4; //@line 5051
  label = 5; //@line 5052
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5056
   $10 = HEAP32[$9 >> 2] | 0; //@line 5057
   $14 = $10; //@line 5060
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 5065
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 5073
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5077
       $$141 = $0; //@line 5077
       $$143 = $1; //@line 5077
       $31 = $14; //@line 5077
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5080
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5087
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 5092
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5095
      break L5;
     }
     $$139 = $$038; //@line 5101
     $$141 = $0 + $$038 | 0; //@line 5101
     $$143 = $1 - $$038 | 0; //@line 5101
     $31 = HEAP32[$9 >> 2] | 0; //@line 5101
    } else {
     $$139 = 0; //@line 5103
     $$141 = $0; //@line 5103
     $$143 = $1; //@line 5103
     $31 = $14; //@line 5103
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5106
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5109
   $$1 = $$139 + $$143 | 0; //@line 5111
  }
 } while (0);
 return $$1 | 0; //@line 5114
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20879
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20887
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20889
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20891
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20893
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20895
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 20898
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 20899
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 20915
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 20916
    if (!___async) {
     ___async_unwind = 0; //@line 20919
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 181; //@line 20921
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 20923
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 20925
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 20927
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 20929
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 20931
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 20933
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 20935
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 20937
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 20940
    sp = STACKTOP; //@line 20941
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13091
 STACKTOP = STACKTOP + 32 | 0; //@line 13092
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13092
 $2 = sp; //@line 13093
 $3 = HEAP8[$1 >> 0] | 0; //@line 13094
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 13098
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13104
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13106
    $10 = HEAP8[$1 >> 0] | 0; //@line 13107
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13110
     $15 = $10; //@line 13110
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13117
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13120
      $$01824 = $$01824 + 1 | 0; //@line 13121
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13122
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13131
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13134
    } else {
     $$01922 = $0; //@line 13136
     $25 = $12; //@line 13136
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13148
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13151
      $25 = HEAP8[$34 >> 0] | 0; //@line 13152
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13155
       break;
      } else {
       $$01922 = $34; //@line 13158
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13168
 }
 STACKTOP = sp; //@line 13173
 return $$019$sink - $0 | 0; //@line 13173
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4922
 STACKTOP = STACKTOP + 16 | 0; //@line 4923
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4923
 $2 = sp; //@line 4924
 $3 = $1 & 255; //@line 4925
 HEAP8[$2 >> 0] = $3; //@line 4926
 $4 = $0 + 16 | 0; //@line 4927
 $5 = HEAP32[$4 >> 2] | 0; //@line 4928
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4935
   label = 4; //@line 4936
  } else {
   $$0 = -1; //@line 4938
  }
 } else {
  $12 = $5; //@line 4941
  label = 4; //@line 4942
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4946
   $10 = HEAP32[$9 >> 2] | 0; //@line 4947
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4950
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4957
     HEAP8[$10 >> 0] = $3; //@line 4958
     $$0 = $13; //@line 4959
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4964
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4965
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 4966
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 146; //@line 4969
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4971
    sp = STACKTOP; //@line 4972
    STACKTOP = sp; //@line 4973
    return 0; //@line 4973
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4975
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4980
   } else {
    $$0 = -1; //@line 4982
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4986
 return $$0 | 0; //@line 4986
}
function _sn_coap_protocol_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6452
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0) {
  $$1 = 0; //@line 6459
  return $$1 | 0; //@line 6460
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6462
 $7 = FUNCTION_TABLE_ii[$0 & 15](44) | 0; //@line 6463
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 6466
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6468
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6470
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6472
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 6474
  sp = STACKTOP; //@line 6475
  return 0; //@line 6476
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6478
 if (!$7) {
  $$1 = 0; //@line 6481
  return $$1 | 0; //@line 6482
 }
 $13 = $7 + 16 | 0; //@line 6484
 HEAP32[$13 >> 2] = 0; //@line 6485
 HEAP32[$13 + 4 >> 2] = 0; //@line 6485
 HEAP32[$13 + 8 >> 2] = 0; //@line 6485
 HEAP32[$13 + 12 >> 2] = 0; //@line 6485
 HEAP32[$13 + 16 >> 2] = 0; //@line 6485
 HEAP32[$13 + 20 >> 2] = 0; //@line 6485
 HEAP32[$13 + 24 >> 2] = 0; //@line 6485
 HEAP32[$7 + 8 >> 2] = $2; //@line 6487
 HEAP32[$7 + 4 >> 2] = $1; //@line 6489
 HEAP32[$7 >> 2] = $0; //@line 6490
 HEAP32[$7 + 12 >> 2] = $3; //@line 6492
 HEAP8[$7 + 43 >> 0] = 1; //@line 6494
 _ns_list_init_($7 + 16 | 0); //@line 6496
 HEAP8[$7 + 34 >> 0] = 2; //@line 6498
 HEAP32[$7 + 36 >> 2] = 0; //@line 6500
 HEAP8[$7 + 41 >> 0] = 10; //@line 6502
 HEAP8[$7 + 40 >> 0] = 3; //@line 6504
 _randLIB_seed_random(); //@line 6505
 _randLIB_get_16bit() | 0; //@line 6506
 $$1 = $7; //@line 6507
 return $$1 | 0; //@line 6508
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 1853
 value = value & 255; //@line 1855
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 1858
   ptr = ptr + 1 | 0; //@line 1859
  }
  aligned_end = end & -4 | 0; //@line 1862
  block_aligned_end = aligned_end - 64 | 0; //@line 1863
  value4 = value | value << 8 | value << 16 | value << 24; //@line 1864
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 1867
   HEAP32[ptr + 4 >> 2] = value4; //@line 1868
   HEAP32[ptr + 8 >> 2] = value4; //@line 1869
   HEAP32[ptr + 12 >> 2] = value4; //@line 1870
   HEAP32[ptr + 16 >> 2] = value4; //@line 1871
   HEAP32[ptr + 20 >> 2] = value4; //@line 1872
   HEAP32[ptr + 24 >> 2] = value4; //@line 1873
   HEAP32[ptr + 28 >> 2] = value4; //@line 1874
   HEAP32[ptr + 32 >> 2] = value4; //@line 1875
   HEAP32[ptr + 36 >> 2] = value4; //@line 1876
   HEAP32[ptr + 40 >> 2] = value4; //@line 1877
   HEAP32[ptr + 44 >> 2] = value4; //@line 1878
   HEAP32[ptr + 48 >> 2] = value4; //@line 1879
   HEAP32[ptr + 52 >> 2] = value4; //@line 1880
   HEAP32[ptr + 56 >> 2] = value4; //@line 1881
   HEAP32[ptr + 60 >> 2] = value4; //@line 1882
   ptr = ptr + 64 | 0; //@line 1883
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 1887
   ptr = ptr + 4 | 0; //@line 1888
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 1893
  ptr = ptr + 1 | 0; //@line 1894
 }
 return end - num | 0; //@line 1896
}
function _fflush__async_cb_82($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 590
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 592
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 594
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 598
  } else {
   $$02327 = $$02325; //@line 600
   $$02426 = $AsyncRetVal; //@line 600
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 607
    } else {
     $16 = 0; //@line 609
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 621
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 624
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 627
     break L3;
    } else {
     $$02327 = $$023; //@line 630
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 633
   $13 = ___fflush_unlocked($$02327) | 0; //@line 634
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 638
    ___async_unwind = 0; //@line 639
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 641
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 643
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 645
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 647
   sp = STACKTOP; //@line 648
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 652
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 654
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8598
 $4 = $0 + 8 | 0; //@line 8599
 $5 = $0 + 52 | 0; //@line 8600
 $6 = $0 + 4 | 0; //@line 8601
 $7 = $0 + 12 | 0; //@line 8602
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 8604
  if (!$8) {
   $$2 = -3005; //@line 8607
   label = 6; //@line 8608
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 8611
  $10 = HEAP32[$6 >> 2] | 0; //@line 8612
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 64 >> 2] | 0; //@line 8615
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8616
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 8617
  if (___async) {
   label = 4; //@line 8620
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8623
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 8629
   label = 6; //@line 8630
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 89; //@line 8635
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8637
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8639
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 8641
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 8643
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8645
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 8647
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8649
  sp = STACKTOP; //@line 8650
  return 0; //@line 8651
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 8654
 }
 return 0; //@line 8656
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8531
 $4 = $0 + 8 | 0; //@line 8532
 $5 = $0 + 52 | 0; //@line 8533
 $6 = $0 + 4 | 0; //@line 8534
 $7 = $0 + 12 | 0; //@line 8535
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 8537
  if (!$8) {
   $$2 = -3005; //@line 8540
   label = 6; //@line 8541
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 8544
  $10 = HEAP32[$6 >> 2] | 0; //@line 8545
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0; //@line 8548
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8549
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 8550
  if (___async) {
   label = 4; //@line 8553
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8556
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 8562
   label = 6; //@line 8563
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 8568
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8570
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8572
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 8574
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 8576
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8578
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 8580
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8582
  sp = STACKTOP; //@line 8583
  return 0; //@line 8584
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 8587
 }
 return 0; //@line 8589
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20816
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20820
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20822
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20824
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20826
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20828
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20830
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 20833
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 20834
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 20843
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 20844
    if (!___async) {
     ___async_unwind = 0; //@line 20847
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 182; //@line 20849
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 20851
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 20853
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 20855
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 20857
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 20859
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 20861
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 20863
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 20866
    sp = STACKTOP; //@line 20867
    return;
   }
  }
 }
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22884
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22886
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22888
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22890
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 22895
  } else {
   $9 = $4 + 4 | 0; //@line 22897
   $10 = HEAP32[$9 >> 2] | 0; //@line 22898
   $11 = $4 + 8 | 0; //@line 22899
   $12 = HEAP32[$11 >> 2] | 0; //@line 22900
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 22904
    HEAP32[$6 >> 2] = 0; //@line 22905
    HEAP32[$2 >> 2] = 0; //@line 22906
    HEAP32[$11 >> 2] = 0; //@line 22907
    HEAP32[$9 >> 2] = 0; //@line 22908
    $$0 = 0; //@line 22909
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 22916
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22917
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 22918
   if (!___async) {
    ___async_unwind = 0; //@line 22921
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 152; //@line 22923
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 22925
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22927
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 22929
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 22931
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 22933
   sp = STACKTOP; //@line 22934
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 22939
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 897
 $5 = $0 + -4 | 0; //@line 898
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 92 >> 2] | 0; //@line 901
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 902
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 903
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 906
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 908
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 910
  sp = STACKTOP; //@line 911
  return 0; //@line 912
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 914
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 919
  dest = $2; //@line 920
  src = $14; //@line 920
  stop = dest + 60 | 0; //@line 920
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 920
   dest = dest + 4 | 0; //@line 920
   src = src + 4 | 0; //@line 920
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 920
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 922
 _wait_ms(1); //@line 923
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 47; //@line 926
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 928
  sp = STACKTOP; //@line 929
  return 0; //@line 930
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 932
  return $9 | 0; //@line 933
 }
 return 0; //@line 935
}
function _sn_coap_protocol_init__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $11 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21569
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21571
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21573
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 21576
  $21 = ___async_retval; //@line 21577
  HEAP32[$21 >> 2] = $$1; //@line 21578
  return;
 }
 $11 = $AsyncRetVal + 16 | 0; //@line 21581
 HEAP32[$11 >> 2] = 0; //@line 21582
 HEAP32[$11 + 4 >> 2] = 0; //@line 21582
 HEAP32[$11 + 8 >> 2] = 0; //@line 21582
 HEAP32[$11 + 12 >> 2] = 0; //@line 21582
 HEAP32[$11 + 16 >> 2] = 0; //@line 21582
 HEAP32[$11 + 20 >> 2] = 0; //@line 21582
 HEAP32[$11 + 24 >> 2] = 0; //@line 21582
 HEAP32[$AsyncRetVal + 8 >> 2] = $2; //@line 21584
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 21586
 HEAP32[$AsyncRetVal >> 2] = $6; //@line 21587
 HEAP32[$AsyncRetVal + 12 >> 2] = $8; //@line 21589
 HEAP8[$AsyncRetVal + 43 >> 0] = 1; //@line 21591
 _ns_list_init_($AsyncRetVal + 16 | 0); //@line 21593
 HEAP8[$AsyncRetVal + 34 >> 0] = 2; //@line 21595
 HEAP32[$AsyncRetVal + 36 >> 2] = 0; //@line 21597
 HEAP8[$AsyncRetVal + 41 >> 0] = 10; //@line 21599
 HEAP8[$AsyncRetVal + 40 >> 0] = 3; //@line 21601
 _randLIB_seed_random(); //@line 21602
 _randLIB_get_16bit() | 0; //@line 21603
 $$1 = $AsyncRetVal; //@line 21604
 $21 = ___async_retval; //@line 21605
 HEAP32[$21 >> 2] = $$1; //@line 21606
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 388
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 390
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 392
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 394
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 396
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 398
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 400
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 402
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 406
  return;
 }
 $15 = $2 + 12 | 0; //@line 409
 dest = $15; //@line 410
 src = $4; //@line 410
 stop = dest + 60 | 0; //@line 410
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 410
  dest = dest + 4 | 0; //@line 410
  src = src + 4 | 0; //@line 410
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 410
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 411
 _wait_ms(1); //@line 412
 if (!___async) {
  ___async_unwind = 0; //@line 415
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 44; //@line 417
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 419
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 421
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 423
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 425
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 427
 sp = STACKTOP; //@line 428
 return;
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8287
 HEAP32[$0 >> 2] = 440; //@line 8288
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8289
 __ZN6Socket5closeEv($0) | 0; //@line 8290
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 81; //@line 8293
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8295
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 8297
  sp = STACKTOP; //@line 8298
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8301
 HEAP32[$0 >> 2] = 404; //@line 8302
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 8304
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 8310
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8311
   FUNCTION_TABLE_vi[$8 & 255]($0 + 32 | 0); //@line 8312
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 82; //@line 8315
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8317
    sp = STACKTOP; //@line 8318
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8321
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 8327
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 8334
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8335
 FUNCTION_TABLE_vi[$15 & 255]($0 + 16 | 0); //@line 8336
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 83; //@line 8339
  sp = STACKTOP; //@line 8340
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8343
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 491
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 501
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 501
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 501
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 505
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 508
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 511
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 519
  } else {
   $20 = 0; //@line 521
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 531
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 535
  HEAP32[___async_retval >> 2] = $$1; //@line 537
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 540
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 541
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 545
  ___async_unwind = 0; //@line 546
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 548
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 550
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 552
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 554
 sp = STACKTOP; //@line 555
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 493
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 92 >> 2] | 0; //@line 496
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 497
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 498
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 501
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 503
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 505
  sp = STACKTOP; //@line 506
  return 0; //@line 507
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 509
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 514
  dest = $2; //@line 515
  src = $13; //@line 515
  stop = dest + 60 | 0; //@line 515
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 515
   dest = dest + 4 | 0; //@line 515
   src = src + 4 | 0; //@line 515
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 515
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 517
 _wait_ms(1); //@line 518
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 34; //@line 521
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 523
  sp = STACKTOP; //@line 524
  return 0; //@line 525
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 527
  return $8 | 0; //@line 528
 }
 return 0; //@line 530
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9873
 STACKTOP = STACKTOP + 48 | 0; //@line 9874
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9874
 $$byval_copy = sp + 20 | 0; //@line 9875
 $4 = sp; //@line 9876
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9877
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 9878
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 103; //@line 9881
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9883
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9885
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 9887
  sp = STACKTOP; //@line 9888
  STACKTOP = sp; //@line 9889
  return 0; //@line 9889
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9891
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 9892
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 9892
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 9893
  STACKTOP = sp; //@line 9896
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 9896
 }
 return 0; //@line 9898
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12532
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12537
    $$0 = 1; //@line 12538
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12551
     $$0 = 1; //@line 12552
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12556
     $$0 = -1; //@line 12557
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12567
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12571
    $$0 = 2; //@line 12572
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12584
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12590
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12594
    $$0 = 3; //@line 12595
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12605
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12611
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12617
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12621
    $$0 = 4; //@line 12622
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12626
    $$0 = -1; //@line 12627
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12632
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_2($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15170
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15172
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15176
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15178
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 15183
  return;
 }
 dest = $2 + 4 | 0; //@line 15187
 stop = dest + 52 | 0; //@line 15187
 do {
  HEAP32[dest >> 2] = 0; //@line 15187
  dest = dest + 4 | 0; //@line 15187
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 15188
 HEAP32[$2 + 8 >> 2] = $4; //@line 15190
 HEAP32[$2 + 12 >> 2] = -1; //@line 15192
 HEAP32[$2 + 48 >> 2] = 1; //@line 15194
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 15197
 $16 = HEAP32[$6 >> 2] | 0; //@line 15198
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 15199
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 15200
 if (!___async) {
  ___async_unwind = 0; //@line 15203
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 167; //@line 15205
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 15207
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 15209
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 15211
 sp = STACKTOP; //@line 15212
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16566
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16570
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 404; //@line 16571
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 16573
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 16578
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16579
  FUNCTION_TABLE_vi[$10 & 255]($4 + 32 | 0); //@line 16580
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 82; //@line 16583
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 16584
   HEAP32[$11 >> 2] = $4; //@line 16585
   sp = STACKTOP; //@line 16586
   return;
  }
  ___async_unwind = 0; //@line 16589
  HEAP32[$ReallocAsyncCtx >> 2] = 82; //@line 16590
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 16591
  HEAP32[$11 >> 2] = $4; //@line 16592
  sp = STACKTOP; //@line 16593
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 16597
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 16604
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16605
 FUNCTION_TABLE_vi[$17 & 255]($4 + 16 | 0); //@line 16606
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 16609
  sp = STACKTOP; //@line 16610
  return;
 }
 ___async_unwind = 0; //@line 16613
 HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 16614
 sp = STACKTOP; //@line 16615
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_42($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20956
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20960
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20962
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20964
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 20967
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 20968
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 20974
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 20975
   if (!___async) {
    ___async_unwind = 0; //@line 20978
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 180; //@line 20980
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 20982
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 20984
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 20986
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 20988
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 20990
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 20992
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 20995
   sp = STACKTOP; //@line 20996
   return;
  }
 }
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11416
  $8 = $0; //@line 11416
  $9 = $1; //@line 11416
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11418
   $$0914 = $$0914 + -1 | 0; //@line 11422
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11423
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11424
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11432
   }
  }
  $$010$lcssa$off0 = $8; //@line 11437
  $$09$lcssa = $$0914; //@line 11437
 } else {
  $$010$lcssa$off0 = $0; //@line 11439
  $$09$lcssa = $2; //@line 11439
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11443
 } else {
  $$012 = $$010$lcssa$off0; //@line 11445
  $$111 = $$09$lcssa; //@line 11445
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11450
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11451
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11455
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11458
    $$111 = $26; //@line 11458
   }
  }
 }
 return $$1$lcssa | 0; //@line 11462
}
function _randLIB_get_16bit() {
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $5 = 0, $6 = 0, $8 = 0;
 $0 = 6216; //@line 1096
 $2 = HEAP32[$0 >> 2] | 0; //@line 1098
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 1101
 $6 = 6224; //@line 1102
 $8 = HEAP32[$6 >> 2] | 0; //@line 1104
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1107
 $12 = _i64Add($8 | 0, $11 | 0, $2 | 0, $5 | 0) | 0; //@line 1108
 $13 = tempRet0; //@line 1109
 $14 = $8 ^ $2; //@line 1110
 $15 = $11 ^ $5; //@line 1111
 $16 = _bitshift64Shl($2 | 0, $5 | 0, 55) | 0; //@line 1112
 $17 = tempRet0; //@line 1113
 $18 = _bitshift64Lshr($2 | 0, $5 | 0, 9) | 0; //@line 1114
 $23 = (tempRet0 | $17) ^ $15; //@line 1119
 $24 = _bitshift64Shl($14 | 0, $15 | 0, 14) | 0; //@line 1120
 $28 = 6216; //@line 1124
 HEAP32[$28 >> 2] = ($18 | $16) ^ $14 ^ $24; //@line 1126
 HEAP32[$28 + 4 >> 2] = $23 ^ tempRet0; //@line 1129
 $32 = _bitshift64Shl($14 | 0, $15 | 0, 36) | 0; //@line 1130
 $33 = tempRet0; //@line 1131
 $34 = _bitshift64Lshr($14 | 0, $15 | 0, 28) | 0; //@line 1132
 $38 = 6224; //@line 1136
 HEAP32[$38 >> 2] = $34 | $32; //@line 1138
 HEAP32[$38 + 4 >> 2] = tempRet0 | $33; //@line 1141
 $42 = _bitshift64Lshr($12 | 0, $13 | 0, 48) | 0; //@line 1142
 return $42 & 65535 | 0; //@line 1145
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16697
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16703
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16705
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16707
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16709
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 16713
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 16716
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 16717
   if (!___async) {
    ___async_unwind = 0; //@line 16720
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 184; //@line 16722
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 16724
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 16726
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 16728
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 16730
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 16732
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 16734
   sp = STACKTOP; //@line 16735
   return;
  }
 }
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 20771
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20773
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20777
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 20782
  dest = $2; //@line 20783
  src = $8; //@line 20783
  stop = dest + 60 | 0; //@line 20783
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 20783
   dest = dest + 4 | 0; //@line 20783
   src = src + 4 | 0; //@line 20783
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 20783
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20785
 _wait_ms(1); //@line 20786
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 47; //@line 20789
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 20790
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 20791
  sp = STACKTOP; //@line 20792
  return;
 }
 ___async_unwind = 0; //@line 20795
 HEAP32[$ReallocAsyncCtx2 >> 2] = 47; //@line 20796
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 20797
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 20798
 sp = STACKTOP; //@line 20799
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4688
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4693
   label = 4; //@line 4694
  } else {
   $$01519 = $0; //@line 4696
   $23 = $1; //@line 4696
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4701
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4704
    $23 = $6; //@line 4705
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4709
     label = 4; //@line 4710
     break;
    } else {
     $$01519 = $6; //@line 4713
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4719
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4721
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4729
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4737
  } else {
   $$pn = $$0; //@line 4739
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4741
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4745
     break;
    } else {
     $$pn = $19; //@line 4748
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4753
 }
 return $$sink - $1 | 0; //@line 4756
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15028
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15030
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15034
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15039
  dest = $2; //@line 15040
  src = $8; //@line 15040
  stop = dest + 60 | 0; //@line 15040
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15040
   dest = dest + 4 | 0; //@line 15040
   src = src + 4 | 0; //@line 15040
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 15040
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15042
 _wait_ms(1); //@line 15043
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 34; //@line 15046
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15047
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 15048
  sp = STACKTOP; //@line 15049
  return;
 }
 ___async_unwind = 0; //@line 15052
 HEAP32[$ReallocAsyncCtx2 >> 2] = 34; //@line 15053
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 15054
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 15055
 sp = STACKTOP; //@line 15056
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 13664
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 13671
   $10 = $1 + 16 | 0; //@line 13672
   $11 = HEAP32[$10 >> 2] | 0; //@line 13673
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 13676
    HEAP32[$1 + 24 >> 2] = $4; //@line 13678
    HEAP32[$1 + 36 >> 2] = 1; //@line 13680
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 13690
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 13695
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 13698
    HEAP8[$1 + 54 >> 0] = 1; //@line 13700
    break;
   }
   $21 = $1 + 24 | 0; //@line 13703
   $22 = HEAP32[$21 >> 2] | 0; //@line 13704
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 13707
    $28 = $4; //@line 13708
   } else {
    $28 = $22; //@line 13710
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 13719
   }
  }
 } while (0);
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13026
 $1 = HEAP32[172] | 0; //@line 13027
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 13033
 } else {
  $19 = 0; //@line 13035
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 13041
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 13047
    $12 = HEAP32[$11 >> 2] | 0; //@line 13048
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 13054
     HEAP8[$12 >> 0] = 10; //@line 13055
     $22 = 0; //@line 13056
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13060
   $17 = ___overflow($1, 10) | 0; //@line 13061
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 160; //@line 13064
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 13066
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13068
    sp = STACKTOP; //@line 13069
    return 0; //@line 13070
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13072
    $22 = $17 >> 31; //@line 13074
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 13081
 }
 return $22 | 0; //@line 13083
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 243
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 245
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 247
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 249
 $7 = HEAP32[$2 >> 2] | 0; //@line 250
 HEAP32[$2 >> 2] = 0; //@line 251
 $8 = HEAP32[$4 >> 2] | 0; //@line 252
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0; //@line 255
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 256
 $12 = FUNCTION_TABLE_iii[$11 & 7]($8, $7) | 0; //@line 257
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 260
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 261
  HEAP32[$13 >> 2] = $4; //@line 262
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 263
  HEAP32[$14 >> 2] = $6; //@line 264
  sp = STACKTOP; //@line 265
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 269
 ___async_unwind = 0; //@line 270
 HEAP32[$ReallocAsyncCtx2 >> 2] = 79; //@line 271
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 272
 HEAP32[$13 >> 2] = $4; //@line 273
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 274
 HEAP32[$14 >> 2] = $6; //@line 275
 sp = STACKTOP; //@line 276
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22458
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22464
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22466
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22468
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22470
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22472
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22473
 $16 = FUNCTION_TABLE_iiii[$8 & 15]($4, $6, $AsyncRetVal) | 0; //@line 22474
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 22478
  ___async_unwind = 0; //@line 22479
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 69; //@line 22481
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22483
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22485
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 22487
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 22489
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 22491
 sp = STACKTOP; //@line 22492
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_23($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16745
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16753
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16757
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 16762
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 16764
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 16765
 if (!___async) {
  ___async_unwind = 0; //@line 16768
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 184; //@line 16770
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 16772
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 16774
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 16776
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 16778
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 16780
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 16782
 sp = STACKTOP; //@line 16783
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6525
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 6528
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6529
 $7 = FUNCTION_TABLE_ii[$6 & 15]($0) | 0; //@line 6530
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 6533
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6535
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6537
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 6539
  sp = STACKTOP; //@line 6540
  return 0; //@line 6541
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6543
 $13 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 6546
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6547
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($7, $1, $2, $3) | 0; //@line 6548
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 61; //@line 6551
  sp = STACKTOP; //@line 6552
  return 0; //@line 6553
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6555
  return $14 | 0; //@line 6556
 }
 return 0; //@line 6558
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16638
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 16640
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 16642
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 5775; //@line 16647
  HEAP32[$4 + 4 >> 2] = $6; //@line 16649
  _abort_message(5684, $4); //@line 16650
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 16653
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 16656
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 16657
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 16658
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 16662
  ___async_unwind = 0; //@line 16663
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 16665
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 16667
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 16669
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 16671
 sp = STACKTOP; //@line 16672
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21722
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21726
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 21730
  label = 4; //@line 21731
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 21736
   label = 4; //@line 21737
  } else {
   $$037$off039 = 3; //@line 21739
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 21743
  $17 = $8 + 40 | 0; //@line 21744
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 21747
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 21757
    $$037$off039 = $$037$off038; //@line 21758
   } else {
    $$037$off039 = $$037$off038; //@line 21760
   }
  } else {
   $$037$off039 = $$037$off038; //@line 21763
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 21766
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 13523
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 13532
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 13537
      HEAP32[$13 >> 2] = $2; //@line 13538
      $19 = $1 + 40 | 0; //@line 13539
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 13542
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 13552
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 13556
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 13563
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12652
 while (1) {
  if ((HEAPU8[3747 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12659
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12662
  if (($7 | 0) == 87) {
   $$01214 = 3835; //@line 12665
   $$115 = 87; //@line 12665
   label = 5; //@line 12666
   break;
  } else {
   $$016 = $7; //@line 12669
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 3835; //@line 12675
  } else {
   $$01214 = 3835; //@line 12677
   $$115 = $$016; //@line 12677
   label = 5; //@line 12678
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12683
   $$113 = $$01214; //@line 12684
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12688
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12695
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12698
    break;
   } else {
    $$01214 = $$113; //@line 12701
    label = 5; //@line 12702
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12709
}
function _main__async_cb_12($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16113
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16115
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16117
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16119
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16121
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16123
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16125
 $15 = HEAP32[(HEAP32[$2 >> 2] | 0) + 60 >> 2] | 0; //@line 16128
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 16129
 $16 = FUNCTION_TABLE_ii[$15 & 15]($2) | 0; //@line 16130
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 16134
  ___async_unwind = 0; //@line 16135
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 136; //@line 16137
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 16139
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 16141
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 16143
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 16145
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 16147
 sp = STACKTOP; //@line 16148
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10384
 $2 = $0 + 12 | 0; //@line 10386
 $3 = HEAP32[$2 >> 2] | 0; //@line 10387
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10391
   _mbed_assert_internal(2421, 2426, 528); //@line 10392
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 125; //@line 10395
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 10397
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10399
    sp = STACKTOP; //@line 10400
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10403
    $8 = HEAP32[$2 >> 2] | 0; //@line 10405
    break;
   }
  } else {
   $8 = $3; //@line 10409
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 10412
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10414
 FUNCTION_TABLE_vi[$7 & 255]($0); //@line 10415
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 10418
  sp = STACKTOP; //@line 10419
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10422
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7048
 $1 = $0 + 12 | 0; //@line 7049
 $2 = HEAP32[$1 >> 2] | 0; //@line 7050
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7054
   _mbed_assert_internal(2421, 2426, 528); //@line 7055
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 75; //@line 7058
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7060
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7062
    sp = STACKTOP; //@line 7063
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7066
    $7 = HEAP32[$1 >> 2] | 0; //@line 7068
    break;
   }
  } else {
   $7 = $2; //@line 7072
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 7075
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7076
 FUNCTION_TABLE_vi[$6 & 255]($0); //@line 7077
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 7080
  sp = STACKTOP; //@line 7081
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7084
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6771
 HEAP32[$0 >> 2] = 404; //@line 6772
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 6774
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 6780
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6781
   FUNCTION_TABLE_vi[$6 & 255]($0 + 32 | 0); //@line 6782
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 6785
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6787
    sp = STACKTOP; //@line 6788
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6791
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 6797
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 6804
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6805
 FUNCTION_TABLE_vi[$13 & 255]($0 + 16 | 0); //@line 6806
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 67; //@line 6809
  sp = STACKTOP; //@line 6810
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6813
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13356
 STACKTOP = STACKTOP + 16 | 0; //@line 13357
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13357
 $1 = sp; //@line 13358
 HEAP32[$1 >> 2] = $varargs; //@line 13359
 $2 = HEAP32[140] | 0; //@line 13360
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13361
 _vfprintf($2, $0, $1) | 0; //@line 13362
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 13365
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13367
  sp = STACKTOP; //@line 13368
  STACKTOP = sp; //@line 13369
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13371
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13372
 _fputc(10, $2) | 0; //@line 13373
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 165; //@line 13376
  sp = STACKTOP; //@line 13377
  STACKTOP = sp; //@line 13378
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13380
  _abort(); //@line 13381
 }
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21356
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21358
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[1558] | 0)) {
  _serial_init(6236, 2, 3); //@line 21366
 }
 $12 = HEAP8[$6 >> 0] | 0; //@line 21369
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 21370
 _serial_putc(6236, $12); //@line 21371
 if (!___async) {
  ___async_unwind = 0; //@line 21374
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 122; //@line 21376
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = 0; //@line 21378
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $AsyncRetVal; //@line 21380
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 21382
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 21384
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 21386
 sp = STACKTOP; //@line 21387
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21497
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 21501
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 21503
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 21505
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 21511
 } else {
  $$0 = 0; //@line 21513
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21515
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 21516
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 21519
  sp = STACKTOP; //@line 21520
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 21524
 ___async_unwind = 0; //@line 21525
 HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 21526
 sp = STACKTOP; //@line 21527
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12483
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12483
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12484
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12485
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12494
    $$016 = $9; //@line 12497
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12497
   } else {
    $$016 = $0; //@line 12499
    $storemerge = 0; //@line 12499
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12501
   $$0 = $$016; //@line 12502
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12506
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12512
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12515
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12515
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12516
  }
 }
 return +$$0;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6564
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 6567
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6568
 $5 = FUNCTION_TABLE_ii[$4 & 15]($0) | 0; //@line 6569
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 6572
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6574
  sp = STACKTOP; //@line 6575
  return 0; //@line 6576
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6578
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0; //@line 6581
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6582
 $10 = FUNCTION_TABLE_iii[$9 & 7]($5, $1) | 0; //@line 6583
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 63; //@line 6586
  sp = STACKTOP; //@line 6587
  return 0; //@line 6588
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6590
  return $10 | 0; //@line 6591
 }
 return 0; //@line 6593
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16028
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16030
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16032
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16034
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16036
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16038
 $12 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 16041
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 16042
 __ZN6Socket4openEP12NetworkStack(6244, $12) | 0; //@line 16043
 if (!___async) {
  ___async_unwind = 0; //@line 16046
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 137; //@line 16048
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 16050
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 16052
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 16054
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 16056
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 16058
 sp = STACKTOP; //@line 16059
 return;
}
function _mbed_error_printf__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21394
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21398
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21400
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21402
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21404
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 21405
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $14 = HEAP8[$10 + $12 >> 0] | 0; //@line 21412
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 21413
 _serial_putc(6236, $14); //@line 21414
 if (!___async) {
  ___async_unwind = 0; //@line 21417
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 122; //@line 21419
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $12; //@line 21421
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 21423
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 21425
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 21427
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 21429
 sp = STACKTOP; //@line 21430
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14968
 STACKTOP = STACKTOP + 16 | 0; //@line 14969
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14969
 $3 = sp; //@line 14970
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 14972
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 14975
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14976
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 14977
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 188; //@line 14980
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14982
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14984
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14986
  sp = STACKTOP; //@line 14987
  STACKTOP = sp; //@line 14988
  return 0; //@line 14988
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14990
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 14994
 }
 STACKTOP = sp; //@line 14996
 return $8 & 1 | 0; //@line 14996
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 21436
 STACKTOP = STACKTOP + 32 | 0; //@line 21437
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 21437
 $$byval_copy = sp; //@line 21438
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21442
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21446
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 21447
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 21447
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 21447
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 21447
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 21447
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 21448
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 21452
 STACKTOP = sp; //@line 21453
 return;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9400
  $5 = ($1 | 0) > 2046; //@line 9402
  $7 = $1 + -2046 | 0; //@line 9404
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9409
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9409
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9413
   $12 = ($1 | 0) < -2044; //@line 9415
   $14 = $1 + 2044 | 0; //@line 9417
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9422
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9422
  } else {
   $$0 = $0; //@line 9424
   $$020 = $1; //@line 9424
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9428
 $18 = tempRet0; //@line 9429
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9430
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9430
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13879
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 13885
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 13888
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 13891
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13892
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 13893
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 170; //@line 13896
    sp = STACKTOP; //@line 13897
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13900
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22839
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22841
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 22842
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 68 >> 2] | 0; //@line 22845
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 22846
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 22847
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 73, $8); //@line 22848
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 22851
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 22852
  HEAP32[$16 >> 2] = $10; //@line 22853
  sp = STACKTOP; //@line 22854
  return;
 }
 ___async_unwind = 0; //@line 22857
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 22858
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 22859
 HEAP32[$16 >> 2] = $10; //@line 22860
 sp = STACKTOP; //@line 22861
 return;
}
function _main__async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16201
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16203
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16205
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16207
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16209
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16211
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 16212
 $11 = _sn_coap_protocol_init(12, 138, 10, 14) | 0; //@line 16213
 if (!___async) {
  HEAP32[___async_retval >> 2] = $11; //@line 16217
  ___async_unwind = 0; //@line 16218
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 139; //@line 16220
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 16222
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 16224
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 16226
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 16228
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 16230
 sp = STACKTOP; //@line 16231
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 333
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 341
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 343
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 345
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 347
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 349
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 351
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 353
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 364
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 365
 HEAP32[$10 >> 2] = 0; //@line 366
 HEAP32[$12 >> 2] = 0; //@line 367
 HEAP32[$14 >> 2] = 0; //@line 368
 HEAP32[$2 >> 2] = 0; //@line 369
 $33 = HEAP32[$16 >> 2] | 0; //@line 370
 HEAP32[$16 >> 2] = $33 | $18; //@line 375
 if ($20 | 0) {
  ___unlockfile($22); //@line 378
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 381
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14878
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 14880
 $8 = $7 >> 8; //@line 14881
 if (!($7 & 1)) {
  $$0 = $8; //@line 14885
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 14890
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 14892
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 14895
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14900
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 14901
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 186; //@line 14904
  sp = STACKTOP; //@line 14905
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14908
  return;
 }
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13178
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13180
 while (1) {
  $2 = _malloc($$) | 0; //@line 13182
  if ($2 | 0) {
   $$lcssa = $2; //@line 13185
   label = 7; //@line 13186
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13189
  if (!$4) {
   $$lcssa = 0; //@line 13192
   label = 7; //@line 13193
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13196
  FUNCTION_TABLE_v[$4 & 3](); //@line 13197
  if (___async) {
   label = 5; //@line 13200
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13203
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 161; //@line 13206
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13208
  sp = STACKTOP; //@line 13209
  return 0; //@line 13210
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13213
 }
 return 0; //@line 13215
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14048
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14054
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 14057
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 14060
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14061
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 14062
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 173; //@line 14065
    sp = STACKTOP; //@line 14066
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14069
    break;
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16321
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16323
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16325
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16327
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16329
 $10 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 16332
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16333
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 16334
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 16337
  sp = STACKTOP; //@line 16338
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 16342
 ___async_unwind = 0; //@line 16343
 HEAP32[$ReallocAsyncCtx2 >> 2] = 61; //@line 16344
 sp = STACKTOP; //@line 16345
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14920
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 14922
 $7 = $6 >> 8; //@line 14923
 if (!($6 & 1)) {
  $$0 = $7; //@line 14927
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 14932
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 14934
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 14937
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14942
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 14943
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 187; //@line 14946
  sp = STACKTOP; //@line 14947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14950
  return;
 }
}
function ___dynamic_cast__async_cb_3($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15255
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15257
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15263
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 15278
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 15294
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 15299
    break;
   }
  default:
   {
    $$0 = 0; //@line 15303
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 15308
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14835
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 14837
 $6 = $5 >> 8; //@line 14838
 if (!($5 & 1)) {
  $$0 = $6; //@line 14842
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 14847
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 14849
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 14852
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14857
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 14858
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 185; //@line 14861
  sp = STACKTOP; //@line 14862
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14865
  return;
 }
}
function __ZN6Socket5closeEv__async_cb_75($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 282
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 286
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 288
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 289
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 292
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 293
 FUNCTION_TABLE_vi[$8 & 255]($4); //@line 294
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 297
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 298
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 299
  sp = STACKTOP; //@line 300
  return;
 }
 ___async_unwind = 0; //@line 303
 HEAP32[$ReallocAsyncCtx3 >> 2] = 80; //@line 304
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 305
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 306
 sp = STACKTOP; //@line 307
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11481
 STACKTOP = STACKTOP + 256 | 0; //@line 11482
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11482
 $5 = sp; //@line 11483
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11489
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11493
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11496
   $$011 = $9; //@line 11497
   do {
    _out_670($0, $5, 256); //@line 11499
    $$011 = $$011 + -256 | 0; //@line 11500
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11509
  } else {
   $$0$lcssa = $9; //@line 11511
  }
  _out_670($0, $5, $$0$lcssa); //@line 11513
 }
 STACKTOP = sp; //@line 11515
 return;
}
function _main__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16166
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16172
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16174
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 16177
 HEAP32[$2 + 4 >> 2] = 2832; //@line 16179
 _printf(2884, $2) | 0; //@line 16180
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 16181
 __Z17recv_coap_messagev(); //@line 16182
 if (!___async) {
  ___async_unwind = 0; //@line 16185
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 16187
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 16189
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 16191
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 16193
 sp = STACKTOP; //@line 16194
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9774
 $3 = HEAP8[$1 >> 0] | 0; //@line 9776
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9780
 $7 = $0 + 20 | 0; //@line 9781
 $9 = $0 + 28 | 0; //@line 9783
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0; //@line 9789
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9792
 HEAP32[$9 >> 2] = 0; //@line 9793
 HEAP32[$7 >> 2] = 0; //@line 9794
 $15 = HEAP32[$0 >> 2] | 0; //@line 9795
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9803
  HEAP32[$0 + 8 >> 2] = $23; //@line 9805
  HEAP32[$0 + 4 >> 2] = $23; //@line 9807
  $$0 = $15 << 27 >> 31; //@line 9810
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9813
  $$0 = -1; //@line 9814
 }
 return $$0 | 0; //@line 9816
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_26($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16875
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2] | 0; //@line 16878
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16879
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 16880
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 16883
  sp = STACKTOP; //@line 16884
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 16888
 ___async_unwind = 0; //@line 16889
 HEAP32[$ReallocAsyncCtx2 >> 2] = 32; //@line 16890
 sp = STACKTOP; //@line 16891
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 456
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 458
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 460
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 462
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 88 >> 2] | 0; //@line 465
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 466
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 467
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 470
  sp = STACKTOP; //@line 471
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 475
 ___async_unwind = 0; //@line 476
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 477
 sp = STACKTOP; //@line 478
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 684
 $3 = HEAP32[$1 >> 2] | 0; //@line 685
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 687
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 693
  return $$0$i | 0; //@line 694
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 696
 _wait_ms(1); //@line 697
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 39; //@line 700
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 702
  sp = STACKTOP; //@line 703
  return 0; //@line 704
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 706
 HEAP8[$1 + 8 >> 0] = 1; //@line 708
 $$0$i = 0; //@line 709
 return $$0$i | 0; //@line 710
}
function _sn_coap_header_validity_check($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0;
 L1 : do {
  if (($1 | 0) == 64) {
   $4 = HEAP32[$0 + 12 >> 2] | 0; //@line 4607
   if (($4 >>> 4 | $4 << 28) >>> 0 < 4) {
    switch (HEAP32[$0 + 8 >> 2] | 0) {
    case 95:
    case 165:
    case 164:
    case 163:
    case 162:
    case 161:
    case 160:
    case 143:
    case 141:
    case 140:
    case 136:
    case 134:
    case 133:
    case 132:
    case 131:
    case 130:
    case 129:
    case 128:
    case 69:
    case 68:
    case 67:
    case 66:
    case 65:
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
     {
      break;
     }
    default:
     {
      $$0 = -1; //@line 4620
      break L1;
     }
    }
    $$0 = 0; //@line 4624
   } else {
    $$0 = -1; //@line 4626
   }
  } else {
   $$0 = -1; //@line 4629
  }
 } while (0);
 return $$0 | 0; //@line 4632
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3191
  return $$1 | 0; //@line 3192
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3197
  $$1 = 0; //@line 3198
  return $$1 | 0; //@line 3199
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3206
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3210
  return $$1 | 0; //@line 3211
 }
 $14 = _malloc($1) | 0; //@line 3213
 if (!$14) {
  $$1 = 0; //@line 3216
  return $$1 | 0; //@line 3217
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3220
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3225
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3228
 _free($0); //@line 3229
 $$1 = $14; //@line 3230
 return $$1 | 0; //@line 3231
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 287
 $3 = HEAP32[$1 >> 2] | 0; //@line 288
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 290
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 296
  return $$0 | 0; //@line 297
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 299
 _wait_ms(1); //@line 300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 303
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 305
  sp = STACKTOP; //@line 306
  return 0; //@line 307
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 309
 HEAP8[$1 + 8 >> 0] = 1; //@line 311
 $$0 = 0; //@line 312
 return $$0 | 0; //@line 313
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4535
 STACKTOP = STACKTOP + 32 | 0; //@line 4536
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4536
 $vararg_buffer = sp; //@line 4537
 $3 = sp + 20 | 0; //@line 4538
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4542
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4544
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4546
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4548
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4550
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4555
  $10 = -1; //@line 4556
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4559
 }
 STACKTOP = sp; //@line 4561
 return $10 | 0; //@line 4561
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9905
 STACKTOP = STACKTOP + 16 | 0; //@line 9906
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9906
 $vararg_buffer = sp; //@line 9907
 HEAP32[$vararg_buffer >> 2] = $0; //@line 9908
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 9910
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 9912
 _mbed_error_printf(2298, $vararg_buffer); //@line 9913
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9914
 _mbed_die(); //@line 9915
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 104; //@line 9918
  sp = STACKTOP; //@line 9919
  STACKTOP = sp; //@line 9920
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9922
  STACKTOP = sp; //@line 9923
  return;
 }
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 6696
 STACKTOP = STACKTOP + 48 | 0; //@line 6697
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6697
 $$byval_copy = sp + 20 | 0; //@line 6698
 $2 = sp; //@line 6699
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 6700
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 6701
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 6701
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 6702
 STACKTOP = sp; //@line 6703
 return $3 | 0; //@line 6703
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_37($0) {
 $0 = $0 | 0;
 var $$355$ = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20513
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20515
 $$355$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 20517
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 20518
 __ZN9UDPSocketD2Ev($4); //@line 20519
 if (!___async) {
  ___async_unwind = 0; //@line 20522
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 94; //@line 20524
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $6; //@line 20526
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $$355$; //@line 20528
 sp = STACKTOP; //@line 20529
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12902
 STACKTOP = STACKTOP + 16 | 0; //@line 12903
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12903
 $1 = sp; //@line 12904
 HEAP32[$1 >> 2] = $varargs; //@line 12905
 $2 = HEAP32[172] | 0; //@line 12906
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12907
 $3 = _vfprintf($2, $0, $1) | 0; //@line 12908
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 157; //@line 12911
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12913
  sp = STACKTOP; //@line 12914
  STACKTOP = sp; //@line 12915
  return 0; //@line 12915
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12917
  STACKTOP = sp; //@line 12918
  return $3 | 0; //@line 12918
 }
 return 0; //@line 12920
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7091
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7094
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7096
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 7098
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 7103
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7108
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7110
 FUNCTION_TABLE_vi[$11 & 255]($4); //@line 7111
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 77; //@line 7114
  sp = STACKTOP; //@line 7115
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7118
  return;
 }
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12860
 STACKTOP = STACKTOP + 16 | 0; //@line 12861
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12861
 $2 = sp; //@line 12862
 HEAP32[$2 >> 2] = $varargs; //@line 12863
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12864
 $3 = _vsprintf($0, $1, $2) | 0; //@line 12865
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 155; //@line 12868
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 12870
  sp = STACKTOP; //@line 12871
  STACKTOP = sp; //@line 12872
  return 0; //@line 12872
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12874
  STACKTOP = sp; //@line 12875
  return $3 | 0; //@line 12875
 }
 return 0; //@line 12877
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 13601
 $5 = HEAP32[$4 >> 2] | 0; //@line 13602
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 13606
   HEAP32[$1 + 24 >> 2] = $3; //@line 13608
   HEAP32[$1 + 36 >> 2] = 1; //@line 13610
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 13614
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 13617
    HEAP32[$1 + 24 >> 2] = 2; //@line 13619
    HEAP8[$1 + 54 >> 0] = 1; //@line 13621
    break;
   }
   $10 = $1 + 24 | 0; //@line 13624
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 13628
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15849
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15851
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15853
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 16 >> 2] | 0; //@line 15856
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15857
 $7 = FUNCTION_TABLE_iii[$6 & 7]($AsyncRetVal, $2) | 0; //@line 15858
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 15861
  sp = STACKTOP; //@line 15862
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 15866
 ___async_unwind = 0; //@line 15867
 HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 15868
 sp = STACKTOP; //@line 15869
 return;
}
function _main__async_cb_10($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16065
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16069
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16071
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 16072
 _free($4); //@line 16073
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16074
 _puts(2932) | 0; //@line 16075
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 16078
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 16079
  HEAP32[$7 >> 2] = $6; //@line 16080
  sp = STACKTOP; //@line 16081
  return;
 }
 ___async_unwind = 0; //@line 16084
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 16085
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 16086
 HEAP32[$7 >> 2] = $6; //@line 16087
 sp = STACKTOP; //@line 16088
 return;
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 8244
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 8248
  } else {
   $$0$i = 1; //@line 8250
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 8256
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 8262
    $11 = $1 + 44 | 0; //@line 8263
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 8267
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 8272
     break;
    }
   } else {
    $$0$i = 0; //@line 8276
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 8281
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15112
 $3 = _malloc($2) | 0; //@line 15113
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 15116
  if (!$5) {
   $$lcssa = 0; //@line 15119
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 15121
   FUNCTION_TABLE_v[$5 & 3](); //@line 15122
   if (!___async) {
    ___async_unwind = 0; //@line 15125
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 161; //@line 15127
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 15129
   sp = STACKTOP; //@line 15130
   return;
  }
 } else {
  $$lcssa = $3; //@line 15134
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 15137
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10356
 $2 = HEAP32[172] | 0; //@line 10357
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10358
 _putc($1, $2) | 0; //@line 10359
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 123; //@line 10362
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 10364
  sp = STACKTOP; //@line 10365
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10368
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10369
 _fflush($2) | 0; //@line 10370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 10373
  sp = STACKTOP; //@line 10374
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10377
  return;
 }
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14151
 STACKTOP = STACKTOP + 16 | 0; //@line 14152
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14152
 $vararg_buffer = sp; //@line 14153
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14154
 FUNCTION_TABLE_v[$0 & 3](); //@line 14155
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 175; //@line 14158
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14160
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14162
  sp = STACKTOP; //@line 14163
  STACKTOP = sp; //@line 14164
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14166
  _abort_message(6066, $vararg_buffer); //@line 14167
 }
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4642
 $3 = HEAP8[$1 >> 0] | 0; //@line 4643
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4648
  $$lcssa8 = $2; //@line 4648
 } else {
  $$011 = $1; //@line 4650
  $$0710 = $0; //@line 4650
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4652
   $$011 = $$011 + 1 | 0; //@line 4653
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4654
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4655
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4660
  $$lcssa8 = $8; //@line 4660
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4670
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 12728
  } else {
   $$01318 = $0; //@line 12730
   $$01417 = $2; //@line 12730
   $$019 = $1; //@line 12730
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 12732
    $5 = HEAP8[$$019 >> 0] | 0; //@line 12733
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 12738
    if (!$$01417) {
     $14 = 0; //@line 12743
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 12746
     $$019 = $$019 + 1 | 0; //@line 12746
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 12752
  }
 } while (0);
 return $14 | 0; //@line 12755
}
function _mbed_die__async_cb_64($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 22143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22145
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 22147
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 22148
 _wait_ms(150); //@line 22149
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 107; //@line 22152
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 22153
  HEAP32[$4 >> 2] = $2; //@line 22154
  sp = STACKTOP; //@line 22155
  return;
 }
 ___async_unwind = 0; //@line 22158
 HEAP32[$ReallocAsyncCtx14 >> 2] = 107; //@line 22159
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 22160
 HEAP32[$4 >> 2] = $2; //@line 22161
 sp = STACKTOP; //@line 22162
 return;
}
function _mbed_die__async_cb_63($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 22118
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22120
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 22122
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 22123
 _wait_ms(150); //@line 22124
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 108; //@line 22127
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 22128
  HEAP32[$4 >> 2] = $2; //@line 22129
  sp = STACKTOP; //@line 22130
  return;
 }
 ___async_unwind = 0; //@line 22133
 HEAP32[$ReallocAsyncCtx13 >> 2] = 108; //@line 22134
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 22135
 HEAP32[$4 >> 2] = $2; //@line 22136
 sp = STACKTOP; //@line 22137
 return;
}
function _mbed_die__async_cb_62($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 22093
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22095
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 22097
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 22098
 _wait_ms(150); //@line 22099
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 109; //@line 22102
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 22103
  HEAP32[$4 >> 2] = $2; //@line 22104
  sp = STACKTOP; //@line 22105
  return;
 }
 ___async_unwind = 0; //@line 22108
 HEAP32[$ReallocAsyncCtx12 >> 2] = 109; //@line 22109
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 22110
 HEAP32[$4 >> 2] = $2; //@line 22111
 sp = STACKTOP; //@line 22112
 return;
}
function _mbed_die__async_cb_61($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 22068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22070
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 22072
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 22073
 _wait_ms(150); //@line 22074
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 110; //@line 22077
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 22078
  HEAP32[$4 >> 2] = $2; //@line 22079
  sp = STACKTOP; //@line 22080
  return;
 }
 ___async_unwind = 0; //@line 22083
 HEAP32[$ReallocAsyncCtx11 >> 2] = 110; //@line 22084
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 22085
 HEAP32[$4 >> 2] = $2; //@line 22086
 sp = STACKTOP; //@line 22087
 return;
}
function _mbed_die__async_cb_60($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 22043
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22045
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 22047
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 22048
 _wait_ms(150); //@line 22049
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 111; //@line 22052
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 22053
  HEAP32[$4 >> 2] = $2; //@line 22054
  sp = STACKTOP; //@line 22055
  return;
 }
 ___async_unwind = 0; //@line 22058
 HEAP32[$ReallocAsyncCtx10 >> 2] = 111; //@line 22059
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 22060
 HEAP32[$4 >> 2] = $2; //@line 22061
 sp = STACKTOP; //@line 22062
 return;
}
function _mbed_die__async_cb_59($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22020
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 22022
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 22023
 _wait_ms(150); //@line 22024
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 112; //@line 22027
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 22028
  HEAP32[$4 >> 2] = $2; //@line 22029
  sp = STACKTOP; //@line 22030
  return;
 }
 ___async_unwind = 0; //@line 22033
 HEAP32[$ReallocAsyncCtx9 >> 2] = 112; //@line 22034
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 22035
 HEAP32[$4 >> 2] = $2; //@line 22036
 sp = STACKTOP; //@line 22037
 return;
}
function _mbed_die__async_cb_58($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21995
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 21997
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 21998
 _wait_ms(400); //@line 21999
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 113; //@line 22002
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 22003
  HEAP32[$4 >> 2] = $2; //@line 22004
  sp = STACKTOP; //@line 22005
  return;
 }
 ___async_unwind = 0; //@line 22008
 HEAP32[$ReallocAsyncCtx8 >> 2] = 113; //@line 22009
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 22010
 HEAP32[$4 >> 2] = $2; //@line 22011
 sp = STACKTOP; //@line 22012
 return;
}
function _mbed_die__async_cb_57($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21968
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21970
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 21972
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 21973
 _wait_ms(400); //@line 21974
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 21977
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 21978
  HEAP32[$4 >> 2] = $2; //@line 21979
  sp = STACKTOP; //@line 21980
  return;
 }
 ___async_unwind = 0; //@line 21983
 HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 21984
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 21985
 HEAP32[$4 >> 2] = $2; //@line 21986
 sp = STACKTOP; //@line 21987
 return;
}
function _mbed_die__async_cb_56($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21943
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21945
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 21947
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21948
 _wait_ms(400); //@line 21949
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 115; //@line 21952
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 21953
  HEAP32[$4 >> 2] = $2; //@line 21954
  sp = STACKTOP; //@line 21955
  return;
 }
 ___async_unwind = 0; //@line 21958
 HEAP32[$ReallocAsyncCtx6 >> 2] = 115; //@line 21959
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 21960
 HEAP32[$4 >> 2] = $2; //@line 21961
 sp = STACKTOP; //@line 21962
 return;
}
function _mbed_die__async_cb_55($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21918
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21920
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 21922
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21923
 _wait_ms(400); //@line 21924
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 21927
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 21928
  HEAP32[$4 >> 2] = $2; //@line 21929
  sp = STACKTOP; //@line 21930
  return;
 }
 ___async_unwind = 0; //@line 21933
 HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 21934
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 21935
 HEAP32[$4 >> 2] = $2; //@line 21936
 sp = STACKTOP; //@line 21937
 return;
}
function _mbed_die__async_cb_54($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21893
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21895
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 21897
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21898
 _wait_ms(400); //@line 21899
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 21902
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 21903
  HEAP32[$4 >> 2] = $2; //@line 21904
  sp = STACKTOP; //@line 21905
  return;
 }
 ___async_unwind = 0; //@line 21908
 HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 21909
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 21910
 HEAP32[$4 >> 2] = $2; //@line 21911
 sp = STACKTOP; //@line 21912
 return;
}
function _mbed_die__async_cb_53($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21868
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21870
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 21872
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21873
 _wait_ms(400); //@line 21874
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 118; //@line 21877
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 21878
  HEAP32[$4 >> 2] = $2; //@line 21879
  sp = STACKTOP; //@line 21880
  return;
 }
 ___async_unwind = 0; //@line 21883
 HEAP32[$ReallocAsyncCtx3 >> 2] = 118; //@line 21884
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 21885
 HEAP32[$4 >> 2] = $2; //@line 21886
 sp = STACKTOP; //@line 21887
 return;
}
function _mbed_die__async_cb_52($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21843
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21845
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 21847
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21848
 _wait_ms(400); //@line 21849
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 119; //@line 21852
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 21853
  HEAP32[$4 >> 2] = $2; //@line 21854
  sp = STACKTOP; //@line 21855
  return;
 }
 ___async_unwind = 0; //@line 21858
 HEAP32[$ReallocAsyncCtx2 >> 2] = 119; //@line 21859
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 21860
 HEAP32[$4 >> 2] = $2; //@line 21861
 sp = STACKTOP; //@line 21862
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4594
 STACKTOP = STACKTOP + 32 | 0; //@line 4595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4595
 $vararg_buffer = sp; //@line 4596
 HEAP32[$0 + 36 >> 2] = 9; //@line 4599
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4607
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4609
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4611
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4616
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4619
 STACKTOP = sp; //@line 4620
 return $14 | 0; //@line 4620
}
function _mbed_die__async_cb_51($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21818
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21820
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 21822
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 21823
 _wait_ms(400); //@line 21824
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 120; //@line 21827
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 21828
  HEAP32[$4 >> 2] = $2; //@line 21829
  sp = STACKTOP; //@line 21830
  return;
 }
 ___async_unwind = 0; //@line 21833
 HEAP32[$ReallocAsyncCtx >> 2] = 120; //@line 21834
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 21835
 HEAP32[$4 >> 2] = $2; //@line 21836
 sp = STACKTOP; //@line 21837
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 752
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 755
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 758
  return $$0$i | 0; //@line 759
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 761
 _wait_ms(1); //@line 762
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 765
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 767
  sp = STACKTOP; //@line 768
  return 0; //@line 769
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 771
 $$0$i = $6; //@line 772
 return $$0$i | 0; //@line 773
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6743
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6749
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6754
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6759
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6764
     HEAP32[$7 >> 2] = $2; //@line 6766
     HEAP32[$7 + 4 >> 2] = $3; //@line 6769
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5620
 STACKTOP = STACKTOP + 128 | 0; //@line 5621
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5621
 $3 = sp; //@line 5622
 dest = $3; //@line 5623
 stop = dest + 124 | 0; //@line 5623
 do {
  HEAP32[dest >> 2] = 0; //@line 5623
  dest = dest + 4 | 0; //@line 5623
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 15; //@line 5625
 HEAP32[$3 + 44 >> 2] = $0; //@line 5627
 HEAP32[$3 + 76 >> 2] = -1; //@line 5629
 HEAP32[$3 + 84 >> 2] = $0; //@line 5631
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5632
 STACKTOP = sp; //@line 5633
 return $8 | 0; //@line 5633
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 355
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 358
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 361
  return $$0 | 0; //@line 362
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 374
 $$0 = $6; //@line 375
 return $$0 | 0; //@line 376
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 638
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 640
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 641
 _wait_ms(1); //@line 642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 38; //@line 645
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 647
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 649
  sp = STACKTOP; //@line 650
  return 0; //@line 651
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 653
 HEAP8[$1 + 8 >> 0] = 0; //@line 655
 if (!$1) {
  return $3 | 0; //@line 658
 }
 __ZdlPv($1); //@line 660
 return $3 | 0; //@line 661
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 241
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 243
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 244
 _wait_ms(1); //@line 245
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 25; //@line 248
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 250
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 252
  sp = STACKTOP; //@line 253
  return 0; //@line 254
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 256
 HEAP8[$1 + 8 >> 0] = 0; //@line 258
 if (!$1) {
  return $3 | 0; //@line 261
 }
 __ZdlPv($1); //@line 263
 return $3 | 0; //@line 264
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 1904
 newDynamicTop = oldDynamicTop + increment | 0; //@line 1905
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 1909
  ___setErrNo(12); //@line 1910
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 1914
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 1918
   ___setErrNo(12); //@line 1919
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 1923
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11342
 } else {
  $$056 = $2; //@line 11344
  $15 = $1; //@line 11344
  $8 = $0; //@line 11344
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11352
   HEAP8[$14 >> 0] = HEAPU8[3729 + ($8 & 15) >> 0] | 0 | $3; //@line 11353
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11354
   $15 = tempRet0; //@line 11355
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11360
    break;
   } else {
    $$056 = $14; //@line 11363
   }
  }
 }
 return $$05$lcssa | 0; //@line 11367
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4776
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4778
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4784
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4785
  if ($phitmp) {
   $13 = $11; //@line 4787
  } else {
   ___unlockfile($3); //@line 4789
   $13 = $11; //@line 4790
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4794
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4798
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4801
 }
 return $15 | 0; //@line 4803
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14116
 $0 = ___cxa_get_globals_fast() | 0; //@line 14117
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14120
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14124
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14136
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14137
    __ZSt11__terminatePFvvE($16); //@line 14138
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14143
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14144
 __ZSt11__terminatePFvvE($17); //@line 14145
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8374
 $1 = $0 + 52 | 0; //@line 8375
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 8378
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 8381
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 8391
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8392
 FUNCTION_TABLE_vi[$$pre & 255]($0 + 32 | 0); //@line 8393
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 8396
  sp = STACKTOP; //@line 8397
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8400
 return;
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16533
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 16535
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 16542
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16543
 FUNCTION_TABLE_vi[$8 & 255]($2 + 16 | 0); //@line 16544
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 16547
  sp = STACKTOP; //@line 16548
  return;
 }
 ___async_unwind = 0; //@line 16551
 HEAP32[$ReallocAsyncCtx2 >> 2] = 83; //@line 16552
 sp = STACKTOP; //@line 16553
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4993
 $3 = HEAP8[$1 >> 0] | 0; //@line 4995
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4999
 $7 = HEAP32[$0 >> 2] | 0; //@line 5000
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 5005
  HEAP32[$0 + 4 >> 2] = 0; //@line 5007
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 5009
  HEAP32[$0 + 28 >> 2] = $14; //@line 5011
  HEAP32[$0 + 20 >> 2] = $14; //@line 5013
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 5019
  $$0 = 0; //@line 5020
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 5023
  $$0 = -1; //@line 5024
 }
 return $$0 | 0; //@line 5026
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 727
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 730
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 731
 _wait_ms(1); //@line 732
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 40; //@line 735
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 737
  sp = STACKTOP; //@line 738
  return 0; //@line 739
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 741
  return $6 | 0; //@line 742
 }
 return 0; //@line 744
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9824
 $4 = HEAP32[$3 >> 2] | 0; //@line 9825
 $5 = $2 + 256 | 0; //@line 9826
 $6 = _memchr($4, 0, $5) | 0; //@line 9827
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9832
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9834
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9835
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9838
 $14 = $4 + $$027 | 0; //@line 9839
 HEAP32[$0 + 8 >> 2] = $14; //@line 9841
 HEAP32[$3 >> 2] = $14; //@line 9842
 return $$027$ | 0; //@line 9843
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 330
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 333
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 334
 _wait_ms(1); //@line 335
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 338
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 340
  sp = STACKTOP; //@line 341
  return 0; //@line 342
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 344
  return $6 | 0; //@line 345
 }
 return 0; //@line 347
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11379
 } else {
  $$06 = $2; //@line 11381
  $11 = $1; //@line 11381
  $7 = $0; //@line 11381
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11386
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11387
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11388
   $11 = tempRet0; //@line 11389
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11394
    break;
   } else {
    $$06 = $10; //@line 11397
   }
  }
 }
 return $$0$lcssa | 0; //@line 11401
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 701
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 703
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 705
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 712
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 713
 FUNCTION_TABLE_vi[$8 & 255]($2 + 16 | 0); //@line 714
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 67; //@line 717
  sp = STACKTOP; //@line 718
  return;
 }
 ___async_unwind = 0; //@line 721
 HEAP32[$ReallocAsyncCtx2 >> 2] = 67; //@line 722
 sp = STACKTOP; //@line 723
 return;
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6698
 STACKTOP = STACKTOP + 16 | 0; //@line 6699
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6699
 $2 = sp; //@line 6700
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6702
 $$0 = $1; //@line 6703
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6717
  $10 = HEAP32[$9 >> 2] | 0; //@line 6718
  HEAP32[$2 >> 2] = $9 + 4; //@line 6720
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6723
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6728
 return $10 | 0; //@line 6728
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_47($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21618
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21622
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 21624
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21625
 FUNCTION_TABLE_vi[$5 & 255]($4); //@line 21626
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 76; //@line 21629
  sp = STACKTOP; //@line 21630
  return;
 }
 ___async_unwind = 0; //@line 21633
 HEAP32[$ReallocAsyncCtx >> 2] = 76; //@line 21634
 sp = STACKTOP; //@line 21635
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15001
 do {
  if (!$0) {
   $3 = 0; //@line 15005
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15007
   $2 = ___dynamic_cast($0, 104, 160, 0) | 0; //@line 15008
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 189; //@line 15011
    sp = STACKTOP; //@line 15012
    return 0; //@line 15013
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15015
    $3 = ($2 | 0) != 0 & 1; //@line 15018
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 15023
}
function _invoke_ticker__async_cb_7($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15787
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 15793
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 15794
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 15795
 FUNCTION_TABLE_vi[$5 & 255]($6); //@line 15796
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 15799
  sp = STACKTOP; //@line 15800
  return;
 }
 ___async_unwind = 0; //@line 15803
 HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 15804
 sp = STACKTOP; //@line 15805
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 11023
 } else {
  $$04 = 0; //@line 11025
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 11028
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 11032
   $12 = $7 + 1 | 0; //@line 11033
   HEAP32[$0 >> 2] = $12; //@line 11034
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 11040
    break;
   } else {
    $$04 = $11; //@line 11043
   }
  }
 }
 return $$0$lcssa | 0; //@line 11047
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 1417
 $y_sroa_0_0_extract_trunc = $b$0; //@line 1418
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 1419
 $1$1 = tempRet0; //@line 1420
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 1422
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 563
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 565
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 566
 _wait_ms(1); //@line 567
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 35; //@line 570
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 572
  sp = STACKTOP; //@line 573
  return 0; //@line 574
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 576
  return $2 | 0; //@line 577
 }
 return 0; //@line 579
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 1835
  src = src + num | 0; //@line 1836
  dest = dest + num | 0; //@line 1837
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 1839
   src = src - 1 | 0; //@line 1840
   num = num - 1 | 0; //@line 1841
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1842
  }
  dest = ret; //@line 1844
 } else {
  _memcpy(dest, src, num) | 0; //@line 1846
 }
 return dest | 0; //@line 1848
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 1402
 $2 = $b & 65535; //@line 1403
 $3 = Math_imul($2, $1) | 0; //@line 1404
 $6 = $a >>> 16; //@line 1405
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 1406
 $11 = $b >>> 16; //@line 1407
 $12 = Math_imul($11, $1) | 0; //@line 1408
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 1409
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 404; //@line 6757
 HEAP32[$0 + 4 >> 2] = 0; //@line 6759
 HEAP32[$0 + 8 >> 2] = 0; //@line 6761
 HEAP32[$0 + 12 >> 2] = -1; //@line 6763
 $4 = $0 + 16 | 0; //@line 6764
 HEAP32[$4 >> 2] = 0; //@line 6765
 HEAP32[$4 + 4 >> 2] = 0; //@line 6765
 HEAP32[$4 + 8 >> 2] = 0; //@line 6765
 HEAP32[$4 + 12 >> 2] = 0; //@line 6765
 HEAP32[$4 + 16 >> 2] = 0; //@line 6765
 HEAP32[$4 + 20 >> 2] = 0; //@line 6765
 HEAP32[$4 + 24 >> 2] = 0; //@line 6765
 HEAP32[$4 + 28 >> 2] = 0; //@line 6765
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 20; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _mbed_die__async_cb_65($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 22168
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22170
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 22172
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 22173
 _wait_ms(150); //@line 22174
 if (!___async) {
  ___async_unwind = 0; //@line 22177
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 106; //@line 22179
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 22181
 sp = STACKTOP; //@line 22182
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 18; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 19; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 21798
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21800
 _emscripten_asm_const_iii(8, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 21802
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 21803
 _wait_ms(150); //@line 21804
 if (!___async) {
  ___async_unwind = 0; //@line 21807
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 105; //@line 21809
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 21811
 sp = STACKTOP; //@line 21812
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 3153
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 3155
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 3162
  } else {
   $$0 = $3; //@line 3164
  }
 }
 $8 = _malloc($$0) | 0; //@line 3167
 if (!$8) {
  return $8 | 0; //@line 3170
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 3177
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 3179
 return $8 | 0; //@line 3180
}
function ___fflush_unlocked__async_cb_71($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22949
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22951
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22953
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22955
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 22957
 HEAP32[$4 >> 2] = 0; //@line 22958
 HEAP32[$6 >> 2] = 0; //@line 22959
 HEAP32[$8 >> 2] = 0; //@line 22960
 HEAP32[$10 >> 2] = 0; //@line 22961
 HEAP32[___async_retval >> 2] = 0; //@line 22963
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9747
 STACKTOP = STACKTOP + 16 | 0; //@line 9748
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9748
 $1 = sp; //@line 9749
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 15]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9760
  } else {
   $$0 = -1; //@line 9762
  }
 } else {
  $$0 = -1; //@line 9765
 }
 STACKTOP = sp; //@line 9767
 return $$0 | 0; //@line 9767
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10508
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10509
 _puts(2510) | 0; //@line 10510
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 10513
  sp = STACKTOP; //@line 10514
  return 0; //@line 10515
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10517
  return 0; //@line 10518
 }
 return 0; //@line 10520
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12884
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12885
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 12886
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 156; //@line 12889
  sp = STACKTOP; //@line 12890
  return 0; //@line 12891
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12893
  return $3 | 0; //@line 12894
 }
 return 0; //@line 12896
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10527
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10528
 _puts(2521) | 0; //@line 10529
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 10532
  sp = STACKTOP; //@line 10533
  return 0; //@line 10534
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10536
  return 0; //@line 10537
 }
 return 0; //@line 10539
}
function _serial_putc__async_cb_5($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15577
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 15578
 _fflush($2) | 0; //@line 15579
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 124; //@line 15582
  sp = STACKTOP; //@line 15583
  return;
 }
 ___async_unwind = 0; //@line 15586
 HEAP32[$ReallocAsyncCtx >> 2] = 124; //@line 15587
 sp = STACKTOP; //@line 15588
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(2041) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 21; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 7228
 $3 = $0 + 40 | 0; //@line 7229
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 7230
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7230
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7230
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7230
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7230
 HEAP16[$0 + 60 >> 1] = $2; //@line 7232
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9728
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9728
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9729
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9730
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9734
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9735
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9735
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function _emscripten_async_resume() {
 ___async = 0; //@line 1735
 ___async_unwind = 1; //@line 1736
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 1742
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 1746
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 1750
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 1752
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4405
 STACKTOP = STACKTOP + 16 | 0; //@line 4406
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4406
 $vararg_buffer = sp; //@line 4407
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4411
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4413
 STACKTOP = sp; //@line 4414
 return $5 | 0; //@line 4414
}
function _main__async_cb_11($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16094
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16096
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 16097
 _wait(4294967296.0); //@line 16098
 if (!___async) {
  ___async_unwind = 0; //@line 16101
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 143; //@line 16103
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 16105
 sp = STACKTOP; //@line 16106
 return;
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8349
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8350
 __ZN9UDPSocketD2Ev($0); //@line 8351
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 8354
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8356
  sp = STACKTOP; //@line 8357
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8360
  __ZdlPv($0); //@line 8361
  return;
 }
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(1996) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 22; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 1677
 STACKTOP = STACKTOP + 16 | 0; //@line 1678
 $rem = __stackBase__ | 0; //@line 1679
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 1680
 STACKTOP = __stackBase__; //@line 1681
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 1682
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 1447
 if ((ret | 0) < 8) return ret | 0; //@line 1448
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 1449
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 1450
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 1451
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 1452
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 1453
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 7240
 $2 = $0 + 40 | 0; //@line 7241
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 7242
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7242
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7242
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7242
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7242
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 13337
 STACKTOP = STACKTOP + 16 | 0; //@line 13338
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13338
 if (!(_pthread_once(6884, 3) | 0)) {
  $3 = _pthread_getspecific(HEAP32[1722] | 0) | 0; //@line 13344
  STACKTOP = sp; //@line 13345
  return $3 | 0; //@line 13345
 } else {
  _abort_message(5914, sp); //@line 13347
 }
 return 0; //@line 13350
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16371
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16373
 HEAP8[$2 + 8 >> 0] = 0; //@line 16375
 if (!$2) {
  $7 = ___async_retval; //@line 16378
  HEAP32[$7 >> 2] = $4; //@line 16379
  return;
 }
 __ZdlPv($2); //@line 16382
 $7 = ___async_retval; //@line 16383
 HEAP32[$7 >> 2] = $4; //@line 16384
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 13505
 }
 return;
}
function __ZL25default_terminate_handlerv__async_cb_22($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16680
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16682
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16684
 HEAP32[$2 >> 2] = 5775; //@line 16685
 HEAP32[$2 + 4 >> 2] = $4; //@line 16687
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 16689
 _abort_message(5639, $2); //@line 16690
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5608
 STACKTOP = STACKTOP + 16 | 0; //@line 5609
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5609
 $2 = sp; //@line 5610
 HEAP32[$2 >> 2] = $varargs; //@line 5611
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5612
 STACKTOP = sp; //@line 5613
 return $3 | 0; //@line 5613
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 12843
 $6 = HEAP32[$5 >> 2] | 0; //@line 12844
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 12845
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 12847
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 12849
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 12852
 return $2 | 0; //@line 12853
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20748
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20750
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20751
 _fputc(10, $2) | 0; //@line 20752
 if (!___async) {
  ___async_unwind = 0; //@line 20755
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 165; //@line 20757
 sp = STACKTOP; //@line 20758
 return;
}
function _wait($0) {
 $0 = +$0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10449
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10453
 _emscripten_sleep((~~($0 * 1.0e6) | 0) / 1e3 | 0 | 0); //@line 10454
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 10457
  sp = STACKTOP; //@line 10458
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10461
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15145
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 15156
  $$0 = 1; //@line 15157
 } else {
  $$0 = 0; //@line 15159
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 15163
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16403
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 16406
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 16411
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16414
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14099
 STACKTOP = STACKTOP + 16 | 0; //@line 14100
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14100
 _free($0); //@line 14102
 if (!(_pthread_setspecific(HEAP32[1722] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14107
  return;
 } else {
  _abort_message(6013, sp); //@line 14109
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 10335
 HEAP32[$0 >> 2] = $1; //@line 10336
 HEAP32[1558] = 1; //@line 10337
 $4 = $0; //@line 10338
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 10343
 $10 = 6236; //@line 10344
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 10346
 HEAP32[$10 + 4 >> 2] = $9; //@line 10349
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 7885
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 7886
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 7886
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 7886
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 7886
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 7886
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 13581
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10468
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10469
 _emscripten_sleep($0 | 0); //@line 10470
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 128; //@line 10473
  sp = STACKTOP; //@line 10474
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10477
  return;
 }
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6585
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6587
 $7 = $4 - $6 | 0; //@line 6588
 HEAP32[$0 + 108 >> 2] = $7; //@line 6590
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6599
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 13645
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 13649
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 14084
 STACKTOP = STACKTOP + 16 | 0; //@line 14085
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14085
 if (!(_pthread_key_create(6888, 174) | 0)) {
  STACKTOP = sp; //@line 14090
  return;
 } else {
  _abort_message(5963, sp); //@line 14092
 }
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(476, 456, 80) | 0; //@line 8662
 HEAP32[114] = HEAP32[$0 >> 2]; //@line 8663
 HEAP32[115] = HEAP32[$0 + 4 >> 2]; //@line 8663
 HEAP32[116] = HEAP32[$0 + 8 >> 2]; //@line 8663
 HEAP32[117] = HEAP32[$0 + 12 >> 2]; //@line 8663
 HEAP32[118] = HEAP32[$0 + 16 >> 2]; //@line 8663
 return 0; //@line 8664
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 1711
 HEAP32[new_frame + 4 >> 2] = sp; //@line 1713
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 1715
 ___async_cur_frame = new_frame; //@line 1716
 return ___async_cur_frame + 8 | 0; //@line 1717
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 944
 $5 = HEAP32[$1 >> 2] | 0; //@line 945
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 947
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 949
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15074
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15076
 HEAP8[$2 + 8 >> 0] = 0; //@line 15078
 if ($2 | 0) {
  __ZdlPv($2); //@line 15081
 }
 HEAP32[___async_retval >> 2] = $4; //@line 15084
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 15836
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15840
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 15843
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 1700
  return low << bits; //@line 1701
 }
 tempRet0 = low << bits - 32; //@line 1703
 return 0; //@line 1704
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 1689
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 1690
 }
 tempRet0 = 0; //@line 1692
 return high >>> bits - 32 | 0; //@line 1693
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7127
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7127
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7127
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 539
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 541
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 543
 return;
}
function _fflush__async_cb_80($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 568
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 570
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 573
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 667
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 670
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 673
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 15099
 } else {
  $$0 = -1; //@line 15101
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 15104
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 1965
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5123
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5129
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5133
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 2007
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16424
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 16425
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16427
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 1723
 stackRestore(___async_cur_frame | 0); //@line 1724
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 1725
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 204
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 205
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 207
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12464
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12464
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12466
 return $1 | 0; //@line 12467
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 10311
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 10317
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 10318
 return;
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9718
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9718
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9720
 return $1 | 0; //@line 9721
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4571
  $$0 = -1; //@line 4572
 } else {
  $$0 = $0; //@line 4574
 }
 return $$0 | 0; //@line 4576
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 1958
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 1440
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 1441
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 1442
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 2000
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 966
 ___cxa_begin_catch($0 | 0) | 0; //@line 967
 _emscripten_alloc_async_context(4, sp) | 0; //@line 968
 __ZSt9terminatev(); //@line 969
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 15561
 HEAP32[___async_retval >> 2] = 0; //@line 15563
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 21651
 HEAP32[___async_retval >> 2] = 0; //@line 21653
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 1951
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 1432
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 1434
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 1993
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_18($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16355
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11524
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11527
 }
 return $$0 | 0; //@line 11529
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_46($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21537
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_36($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 20501
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_77($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 438
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_24($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16853
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 200; //@line 957
 HEAP32[$0 + 4 >> 2] = 316; //@line 958
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 960
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 1944
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_40($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 20809
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 1669
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 15239
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4763
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4767
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15879
 return;
}
function b22(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 2059
 return 0; //@line 2059
}
function b21(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 2056
 return 0; //@line 2056
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_1($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15066
 return;
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6927
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6932
 }
 return $4 | 0; //@line 6934
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 1730
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 1731
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_78($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 446
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 8407
 HEAP32[$0 >> 2] = 440; //@line 8408
 HEAP32[$0 + 52 >> 2] = 0; //@line 8410
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14184
 __ZdlPv($0); //@line 14185
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 13867
 __ZdlPv($0); //@line 13868
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5259
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5261
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_25($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 16861
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 13395
 __ZdlPv($0); //@line 13396
 return;
}
function b19(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 2053
 return 0; //@line 2053
}
function b18(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 2050
 return 0; //@line 2050
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 11009
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 15320
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21488
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 227
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 695
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_48($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21707
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function b103(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 2287
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16625
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 7](a1 | 0, a2 | 0) | 0; //@line 1937
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 13592
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15821
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 739
 return;
}
function _sn_coap_builder_calc_needed_packet_data_size($0) {
 $0 = $0 | 0;
 return _sn_coap_builder_calc_needed_packet_data_size_2($0, 0) | 0; //@line 4596
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[1723] | 0; //@line 14957
 HEAP32[1723] = $0 + 0; //@line 14959
 return $0 | 0; //@line 14961
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 237
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_9($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15933
 return;
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15222
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[358] | 0; //@line 14174
 HEAP32[358] = $0 + 0; //@line 14176
 return $0 | 0; //@line 14178
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 3](a1 | 0, a2 | 0); //@line 1986
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b16(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 2047
 return 0; //@line 2047
}
function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 2044
 return 0; //@line 2044
}
function b14(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 2041
 return 0; //@line 2041
}
function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 2038
 return 0; //@line 2038
}
function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(11); //@line 2035
 return 0; //@line 2035
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 7219
 return;
}
function b11(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 2032
 return 0; //@line 2032
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16363
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 747
 return;
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 1757
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_49($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b101(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 2284
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN6Socket5closeEv__async_cb_76($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 317
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11472
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21556
 return;
}
function _putc__async_cb_19($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16437
 return;
}
function _fflush__async_cb_81($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 583
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_70($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 22871
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 21478
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16903
 return;
}
function _fputc__async_cb_74($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 217
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21780
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 1930
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 685
 return;
}
function _ns_list_init_($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 6514
 HEAP32[$0 + 4 >> 2] = $0; //@line 6516
 return;
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 7251
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5642
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(6066, HEAP32[$0 + 4 >> 2] | 0); //@line 21546
}
function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 2029
 return 0; //@line 2029
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0); //@line 1979
}
function b99(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 2281
}
function b98(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 2278
}
function b97(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 2275
}
function _sn_coap_builder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _sn_coap_builder_2($0, $1, 0) | 0; //@line 1153
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 21337
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 8076
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4681
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12717
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 7895
}
function _main__async_cb_17($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16309
 return;
}
function _main__async_cb_13($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 1; //@line 16158
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 557
 return;
}
function b7(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(7); //@line 2026
 return 0; //@line 2026
}
function b6(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 2023
 return 0; //@line 2023
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 182
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 6751
}
function __Z11coap_malloct($0) {
 $0 = $0 | 0;
 return _malloc($0 & 65535) | 0; //@line 10493
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3](); //@line 1972
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4629
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __GLOBAL__sub_I_main_cpp() {
 __ZN9UDPSocketC2Ev(6244); //@line 10484
 return;
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 2020
 return 0; //@line 2020
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 2017
 return 0; //@line 2017
}
function b2(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 2014
 return 0; //@line 2014
}
function b1(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 2011
 return 0; //@line 2011
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function b95(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(3); //@line 2272
}
function b94(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 2269
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function _abort_message__async_cb_39($0) {
 $0 = $0 | 0;
 _abort(); //@line 20765
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(6868); //@line 5266
 return 6876; //@line 5267
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 8369
}
function __Z9coap_freePv($0) {
 $0 = $0 | 0;
 _free($0); //@line 10499
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 2065
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12638
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9742
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12644
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 6820
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13221
 return;
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_20($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function ___ofl_unlock() {
 ___unlock(6868); //@line 5272
 return;
}
function __ZN6SocketD2Ev__async_cb_83($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(255); //@line 2266
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(254); //@line 2263
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(253); //@line 2260
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(252); //@line 2257
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(251); //@line 2254
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(250); //@line 2251
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(249); //@line 2248
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(248); //@line 2245
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(247); //@line 2242
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(246); //@line 2239
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(245); //@line 2236
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(244); //@line 2233
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(243); //@line 2230
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(242); //@line 2227
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(241); //@line 2224
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(240); //@line 2221
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(239); //@line 2218
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(238); //@line 2215
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(237); //@line 2212
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(236); //@line 2209
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(235); //@line 2206
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(234); //@line 2203
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(233); //@line 2200
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(232); //@line 2197
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(231); //@line 2194
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(230); //@line 2191
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(229); //@line 2188
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(228); //@line 2185
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(227); //@line 2182
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(226); //@line 2179
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(225); //@line 2176
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(224); //@line 2173
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(223); //@line 2170
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(222); //@line 2167
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(221); //@line 2164
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(220); //@line 2161
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(219); //@line 2158
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(218); //@line 2155
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(217); //@line 2152
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(216); //@line 2149
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(215); //@line 2146
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_vi(214); //@line 2143
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_vi(213); //@line 2140
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_vi(212); //@line 2137
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_vi(211); //@line 2134
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_vi(210); //@line 2131
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_vi(209); //@line 2128
}
function b45(p0) {
 p0 = p0 | 0;
 nullFunc_vi(208); //@line 2125
}
function b44(p0) {
 p0 = p0 | 0;
 nullFunc_vi(207); //@line 2122
}
function b43(p0) {
 p0 = p0 | 0;
 nullFunc_vi(206); //@line 2119
}
function b42(p0) {
 p0 = p0 | 0;
 nullFunc_vi(205); //@line 2116
}
function b41(p0) {
 p0 = p0 | 0;
 nullFunc_vi(204); //@line 2113
}
function b40(p0) {
 p0 = p0 | 0;
 nullFunc_vi(203); //@line 2110
}
function b39(p0) {
 p0 = p0 | 0;
 nullFunc_vi(202); //@line 2107
}
function b38(p0) {
 p0 = p0 | 0;
 nullFunc_vi(201); //@line 2104
}
function b37(p0) {
 p0 = p0 | 0;
 nullFunc_vi(200); //@line 2101
}
function b36(p0) {
 p0 = p0 | 0;
 nullFunc_vi(199); //@line 2098
}
function b35(p0) {
 p0 = p0 | 0;
 nullFunc_vi(198); //@line 2095
}
function b34(p0) {
 p0 = p0 | 0;
 nullFunc_vi(197); //@line 2092
}
function b33(p0) {
 p0 = p0 | 0;
 nullFunc_vi(196); //@line 2089
}
function b32(p0) {
 p0 = p0 | 0;
 nullFunc_vi(195); //@line 2086
}
function b31(p0) {
 p0 = p0 | 0;
 nullFunc_vi(194); //@line 2083
}
function b30(p0) {
 p0 = p0 | 0;
 nullFunc_vi(193); //@line 2080
}
function b29(p0) {
 p0 = p0 | 0;
 nullFunc_vi(192); //@line 2077
}
function b28(p0) {
 p0 = p0 | 0;
 nullFunc_vi(191); //@line 2074
}
function b27(p0) {
 p0 = p0 | 0;
 nullFunc_vi(190); //@line 2071
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4587
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4915
}
function b26(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 2068
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _arm_random_seed_get() {
 return 0; //@line 10434
}
function __ZSt9terminatev__async_cb_50($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 6864; //@line 4581
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _wait__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_self() {
 return 1024; //@line 4634
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b24() {
 nullFunc_v(0); //@line 2062
}
function _arm_random_module_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b1,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN9UDPSocket9get_protoEv,___stdio_close,__Z11coap_malloct,b2,b3,b4];
var FUNCTION_TABLE_iii = [b6,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b7];
var FUNCTION_TABLE_iiii = [b9,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv,_do_read];
var FUNCTION_TABLE_iiiii = [b11,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv,b12,b13,b14,b15,b16];
var FUNCTION_TABLE_iiiiii = [b18,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b19];
var FUNCTION_TABLE_iiiiiii = [b21,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b22];
var FUNCTION_TABLE_v = [b24,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b26,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_9,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb
,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_25,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_26,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_24,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_1,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_48,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_78,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_79,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_77,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_40,_sn_coap_parser__async_cb,_sn_coap_parser__async_cb_84,_sn_coap_parser__async_cb_85,_sn_coap_parser__async_cb_86,_sn_coap_parser__async_cb_92,_sn_coap_parser__async_cb_87,_sn_coap_parser__async_cb_91,_sn_coap_parser__async_cb_90,_sn_coap_parser__async_cb_89,_sn_coap_parser__async_cb_88,_sn_coap_parser_options_parse_multiple_options__async_cb
,_sn_coap_protocol_init__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_18,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_8,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_46,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_83,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_66,__ZN6Socket4openEP12NetworkStack__async_cb_67,__ZN6Socket4openEP12NetworkStack__async_cb_68,__ZN6Socket4openEP12NetworkStack__async_cb_69,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_70,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_47,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_75,__ZN6Socket5closeEv__async_cb_76,__ZN9UDPSocketD2Ev__async_cb_21,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_20,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_6,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb
,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_38,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_35,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_30,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_37,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_36,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_34,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_29,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_33,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_28,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_32,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_27,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_31,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_65,_mbed_die__async_cb_64,_mbed_die__async_cb_63,_mbed_die__async_cb_62,_mbed_die__async_cb_61,_mbed_die__async_cb_60,_mbed_die__async_cb_59,_mbed_die__async_cb_58,_mbed_die__async_cb_57,_mbed_die__async_cb_56,_mbed_die__async_cb_55,_mbed_die__async_cb_54,_mbed_die__async_cb_53,_mbed_die__async_cb_52
,_mbed_die__async_cb_51,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_printf__async_cb_45,_serial_putc__async_cb_5,_serial_putc__async_cb,_invoke_ticker__async_cb_7,_invoke_ticker__async_cb,_wait__async_cb,_wait_ms__async_cb,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb,__Z17recv_coap_messagev__async_cb_72,__Z17recv_coap_messagev__async_cb_73,__Z17recv_coap_messagev__async_cb,_main__async_cb_13,_main__async_cb_12,_main__async_cb,_main__async_cb_15,__Z9coap_freePv,_main__async_cb_16,_main__async_cb_14,_main__async_cb_10,_main__async_cb_11,_main__async_cb_17,_putc__async_cb_19,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_81,_fflush__async_cb_80
,_fflush__async_cb_82,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_71,_vfprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_74,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_22,_abort_message__async_cb,_abort_message__async_cb_39,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_2,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_3,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_49,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_4,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_44
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_43,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_42,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_41,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_23,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45
,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75
,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92];
var FUNCTION_TABLE_vii = [b94,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,b95];
var FUNCTION_TABLE_viiii = [b97,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b98,b99];
var FUNCTION_TABLE_viiiii = [b101,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b103,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=coap.js.map