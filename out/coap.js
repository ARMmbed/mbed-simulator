// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { console.log('rx_frame', Date.now()); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 11408;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "coap.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "__Z11coap_malloct", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv", "_do_read"];
var debug_table_iiiii = ["0", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv", "0", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_57", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_59", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_60", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_58", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_35", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_98", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_102", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_103", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_101", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_50", "_sn_coap_parser__async_cb", "_sn_coap_parser__async_cb_78", "_sn_coap_parser__async_cb_79", "_sn_coap_parser__async_cb_80", "_sn_coap_parser__async_cb_86", "_sn_coap_parser__async_cb_81", "_sn_coap_parser__async_cb_85", "_sn_coap_parser__async_cb_84", "_sn_coap_parser__async_cb_83", "_sn_coap_parser__async_cb_82", "_sn_coap_parser_options_parse_multiple_options__async_cb", "_sn_coap_protocol_init__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_34", "_mbed_vtracef__async_cb_24", "_mbed_vtracef__async_cb_25", "_mbed_vtracef__async_cb_26", "_mbed_vtracef__async_cb_33", "_mbed_vtracef__async_cb_27", "_mbed_vtracef__async_cb_32", "_mbed_vtracef__async_cb_28", "_mbed_vtracef__async_cb_29", "_mbed_vtracef__async_cb_30", "_mbed_vtracef__async_cb_31", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_46", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_1", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_45", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_44", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_51", "__ZN6Socket4openEP12NetworkStack__async_cb_52", "__ZN6Socket4openEP12NetworkStack__async_cb_53", "__ZN6Socket4openEP12NetworkStack__async_cb_54", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_55", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_77", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_36", "__ZN6Socket5closeEv__async_cb_37", "__ZN9UDPSocketD2Ev__async_cb_88", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_87", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb", "__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_42", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_72", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_69", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_64", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_71", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_70", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_68", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_63", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_67", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_62", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_66", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_61", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_65", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_21", "_mbed_die__async_cb_20", "_mbed_die__async_cb_19", "_mbed_die__async_cb_18", "_mbed_die__async_cb_17", "_mbed_die__async_cb_16", "_mbed_die__async_cb_15", "_mbed_die__async_cb_14", "_mbed_die__async_cb_13", "_mbed_die__async_cb_12", "_mbed_die__async_cb_11", "_mbed_die__async_cb_10", "_mbed_die__async_cb_9", "_mbed_die__async_cb_8", "_mbed_die__async_cb_7", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_3", "_mbed_error_vfprintf__async_cb_2", "_serial_putc__async_cb_48", "_serial_putc__async_cb", "_invoke_ticker__async_cb_47", "_invoke_ticker__async_cb", "_wait__async_cb", "_wait_ms__async_cb", "__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb", "__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb", "__Z17recv_coap_messagev__async_cb_22", "__Z17recv_coap_messagev__async_cb_23", "__Z17recv_coap_messagev__async_cb", "_main__async_cb_92", "_main__async_cb_91", "_main__async_cb", "_main__async_cb_94", "__Z9coap_freePv", "_main__async_cb_95", "_main__async_cb_93", "_main__async_cb_89", "_main__async_cb_90", "_main__async_cb_96", "_putc__async_cb_100", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_39", "_fflush__async_cb_38", "_fflush__async_cb_40", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_6", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_5", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_56", "_abort_message__async_cb", "_abort_message__async_cb_99", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_43", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_41", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_104", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_4", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_76", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_75", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_74", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_73", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_97", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_llvm_trap": _llvm_trap, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _llvm_trap=env._llvm_trap;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _sn_coap_parser__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $1001 = 0, $1002 = 0, $1007 = 0, $1008 = 0, $1013 = 0, $1016 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1031 = 0, $1032 = 0, $1034 = 0, $104 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $106 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $133 = 0, $14 = 0, $147 = 0, $149 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $241 = 0, $244 = 0, $258 = 0, $26 = 0, $263 = 0, $275 = 0, $278 = 0, $279 = 0, $28 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $36 = 0, $360 = 0, $361 = 0, $366 = 0, $369 = 0, $372 = 0, $373 = 0, $378 = 0, $38 = 0, $381 = 0, $385 = 0, $388 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $465 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $535 = 0, $538 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $615 = 0, $616 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $690 = 0, $693 = 0, $694 = 0, $699 = 0, $70 = 0, $702 = 0, $704 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $859 = 0, $86 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $932 = 0, $935 = 0, $936 = 0, $94 = 0, $941 = 0, $944 = 0, $948 = 0, $951 = 0, $952 = 0, $957 = 0, $96 = 0, $960 = 0, $964 = 0, $967 = 0, $968 = 0, $973 = 0, $976 = 0, $98 = 0, $980 = 0, $981 = 0, $986 = 0, $987 = 0, $992 = 0, $995 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $378$looptemp = 0, $699$looptemp = 0, $854$looptemp = 0, $941$looptemp = 0, $957$looptemp = 0, $973$looptemp = 0, $992$looptemp = 0, $1013$looptemp = 0, $366$looptemp = 0;
 sp = STACKTOP; //@line 16777
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16785
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16787
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16789
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16791
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16793
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16797
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16799
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16801
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16803
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16805
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16807
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16809
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16811
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16813
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16815
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16817
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16819
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16821
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16823
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16825
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16827
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16829
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 16831
 $56 = HEAP16[$0 + 112 >> 1] | 0; //@line 16833
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 16835
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 16837
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 16839
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 16841
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 16843
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 16847
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 16849
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 16851
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 16853
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 16855
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 16857
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 16859
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 16861
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 16863
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 16865
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 16867
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 16869
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 16871
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 16873
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 16875
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 16877
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 16879
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 16881
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 16883
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 16887
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 16889
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 16891
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 16893
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 16895
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 16899
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 16901
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 16903
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 16905
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 16907
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16909
 if (!$AsyncRetVal) {
  _mbed_tracef(2, 3737, 3742, HEAP32[$0 + 240 >> 2] | 0); //@line 16912
  _mbed_tracef(2, 3737, 3850, $88); //@line 16913
  $$0 = 0; //@line 16914
  $1041 = ___async_retval; //@line 16915
  HEAP32[$1041 >> 2] = $$0; //@line 16916
  return;
 }
 dest = $AsyncRetVal; //@line 16919
 stop = dest + 44 | 0; //@line 16919
 do {
  HEAP32[dest >> 2] = 0; //@line 16919
  dest = dest + 4 | 0; //@line 16919
 } while ((dest | 0) < (stop | 0));
 $133 = $AsyncRetVal + 16 | 0; //@line 16920
 HEAP32[$133 >> 2] = -1; //@line 16921
 HEAP32[$60 >> 2] = HEAP8[$48 >> 0] & -64 & 255; //@line 16925
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP8[$48 >> 0] & 48; //@line 16930
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAPU8[$48 + 1 >> 0]; //@line 16935
 $147 = HEAP8[$48 + 3 >> 0] | 0; //@line 16938
 $149 = $AsyncRetVal + 20 | 0; //@line 16940
 HEAP16[$149 >> 1] = $147 & 255; //@line 16941
 HEAP16[$149 >> 1] = HEAPU8[$48 + 2 >> 0] << 8 | $147 & 255; //@line 16948
 $156 = $48 + 4 | 0; //@line 16949
 HEAP32[$82 >> 2] = $156; //@line 16950
 $158 = HEAP8[$48 >> 0] & 15; //@line 16952
 HEAP8[$AsyncRetVal >> 0] = $158; //@line 16953
 L6 : do {
  if (!($158 << 24 >> 24)) {
   $231 = $156; //@line 16957
   $232 = $56 & 65535; //@line 16958
   $233 = $48; //@line 16959
   $234 = $233 + $232 | 0; //@line 16960
   $236 = $AsyncRetVal + 40 | 0; //@line 16962
   $237 = $AsyncRetVal + 32 | 0; //@line 16963
   $238 = $AsyncRetVal + 22 | 0; //@line 16964
   $$0208$i = 0; //@line 16965
   $$sink275$i = $234 - $231 | 0; //@line 16965
   $1042 = $231; //@line 16965
   $241 = $156; //@line 16965
   L8 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 115; //@line 16970
     break;
    }
    $trunc277$i = HEAP8[$241 >> 0] | 0; //@line 16973
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 115; //@line 16976
     break;
    }
    $244 = $trunc277$i & 15; //@line 16980
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 16981
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 17; //@line 16986
      break L8;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$241 + 1 >> 0] | 0; //@line 16994
      $$sink214$i = 13; //@line 16994
      $$sink3$i = 1; //@line 16994
      label = 18; //@line 16995
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$241 + 1 >> 0] << 8) + 269 | 0; //@line 17007
      $$sink214$i = HEAPU8[$241 + 2 >> 0] | 0; //@line 17007
      $$sink3$i = 2; //@line 17007
      label = 18; //@line 17008
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 17012
      $1043 = $1042; //@line 17012
      $263 = $241; //@line 17012
     }
    }
    if ((label | 0) == 18) {
     label = 0; //@line 17016
     $258 = $241 + $$sink3$i | 0; //@line 17018
     HEAP32[$82 >> 2] = $258; //@line 17019
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 17021
     $1043 = $258; //@line 17021
     $263 = $258; //@line 17021
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 17024
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 22; //@line 17028
      break L8;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$263 + 1 >> 0] | 0; //@line 17036
      $$sink216$i = 13; //@line 17036
      $$sink8$i = 1; //@line 17036
      label = 23; //@line 17037
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$263 + 1 >> 0] << 8) + 269 | 0; //@line 17049
      $$sink216$i = HEAPU8[$263 + 2 >> 0] | 0; //@line 17049
      $$sink8$i = 2; //@line 17049
      label = 23; //@line 17050
      break;
     }
    default:
     {
      $$1202$in$i = $244; //@line 17054
      $278 = $1043; //@line 17054
      $319 = $263; //@line 17054
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 17058
     $275 = $263 + $$sink8$i | 0; //@line 17060
     HEAP32[$82 >> 2] = $275; //@line 17061
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 17063
     $278 = $275; //@line 17063
     $319 = $275; //@line 17063
    }
    $$1202$i = $$1202$in$i & 65535; //@line 17065
    $279 = $234 - $278 & 65535; //@line 17067
    $trunc$i = $$0208$i & 65535; //@line 17068
    L24 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 70; //@line 17072
       break L8;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$236 >> 2] | 0)) {
        label = 26; //@line 17080
        break L8;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 41; //@line 17085
         break L8;
         break;
        }
       case 4:
        {
         label = 47; //@line 17090
         break L8;
         break;
        }
       case 3:
        {
         label = 50; //@line 17095
         break L8;
         break;
        }
       case 8:
        {
         label = 56; //@line 17100
         break L8;
         break;
        }
       case 20:
        {
         label = 67; //@line 17105
         break L8;
         break;
        }
       case 11:
        {
         label = 70; //@line 17110
         break L8;
         break;
        }
       case 15:
        {
         label = 79; //@line 17115
         break L8;
         break;
        }
       case 12:
        {
         label = 30; //@line 17120
         break L24;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 37; //@line 17127
          break L8;
         }
         $372 = $319 + 1 | 0; //@line 17130
         HEAP32[$82 >> 2] = $372; //@line 17131
         $373 = $$1202$in$i & 255; //@line 17132
         if (!($373 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 17135
         } else {
          $$045$i221$i = $373; //@line 17137
          $$06$i220$i = 0; //@line 17137
          $378 = $372; //@line 17137
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 17139
           $378$looptemp = $378;
           $378 = $378 + 1 | 0; //@line 17141
           HEAP32[$82 >> 2] = $378; //@line 17142
           $381 = $$06$i220$i << 8 | HEAPU8[$378$looptemp >> 0]; //@line 17145
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $381; //@line 17148
            break;
           } else {
            $$06$i220$i = $381; //@line 17151
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 17157
         break L24;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 63; //@line 17164
          break L8;
         }
         $690 = (HEAP32[$236 >> 2] | 0) + 28 | 0; //@line 17168
         if ((HEAP32[$690 >> 2] | 0) != -1) {
          label = 63; //@line 17172
          break L8;
         }
         $693 = $319 + 1 | 0; //@line 17175
         HEAP32[$82 >> 2] = $693; //@line 17176
         $694 = $$1202$in$i & 255; //@line 17177
         if (!($694 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 17180
         } else {
          $$045$i263$i = $694; //@line 17182
          $$06$i262$i = 0; //@line 17182
          $699 = $693; //@line 17182
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 17184
           $699$looptemp = $699;
           $699 = $699 + 1 | 0; //@line 17186
           HEAP32[$82 >> 2] = $699; //@line 17187
           $702 = $$06$i262$i << 8 | HEAPU8[$699$looptemp >> 0]; //@line 17190
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $702; //@line 17193
            break;
           } else {
            $$06$i262$i = $702; //@line 17196
           }
          }
         }
         HEAP32[$690 >> 2] = $$0$lcssa$i265$i; //@line 17200
         break L24;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 75; //@line 17207
          break L8;
         }
         $845 = (HEAP32[$236 >> 2] | 0) + 32 | 0; //@line 17211
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 75; //@line 17215
          break L8;
         }
         $848 = $319 + 1 | 0; //@line 17218
         HEAP32[$82 >> 2] = $848; //@line 17219
         $849 = $$1202$in$i & 255; //@line 17220
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 17223
         } else {
          $$045$i270$i = $849; //@line 17225
          $$06$i269$i = 0; //@line 17225
          $854 = $848; //@line 17225
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 17227
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 17229
           HEAP32[$82 >> 2] = $854; //@line 17230
           $857 = $$06$i269$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 17233
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $857; //@line 17236
            break;
           } else {
            $$06$i269$i = $857; //@line 17239
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i272$i; //@line 17243
         break L24;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 84; //@line 17250
          break L8;
         }
         $932 = (HEAP32[$236 >> 2] | 0) + 40 | 0; //@line 17254
         if ((HEAP32[$932 >> 2] | 0) != -1) {
          label = 84; //@line 17258
          break L8;
         }
         $935 = $319 + 1 | 0; //@line 17261
         HEAP32[$82 >> 2] = $935; //@line 17262
         $936 = $$1202$in$i & 255; //@line 17263
         if (!($936 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 17266
         } else {
          $$045$i256$i = $936; //@line 17268
          $$06$i255$i = 0; //@line 17268
          $941 = $935; //@line 17268
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 17270
           $941$looptemp = $941;
           $941 = $941 + 1 | 0; //@line 17272
           HEAP32[$82 >> 2] = $941; //@line 17273
           $944 = $$06$i255$i << 8 | HEAPU8[$941$looptemp >> 0]; //@line 17276
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $944; //@line 17279
            break;
           } else {
            $$06$i255$i = $944; //@line 17282
           }
          }
         }
         HEAP32[$932 >> 2] = $$0$lcssa$i258$i; //@line 17286
         break L24;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 90; //@line 17293
          break L8;
         }
         $948 = (HEAP32[$236 >> 2] | 0) + 36 | 0; //@line 17297
         if ((HEAP32[$948 >> 2] | 0) != -1) {
          label = 90; //@line 17301
          break L8;
         }
         $951 = $319 + 1 | 0; //@line 17304
         HEAP32[$82 >> 2] = $951; //@line 17305
         $952 = $$1202$in$i & 255; //@line 17306
         if (!($952 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 17309
         } else {
          $$045$i249$i = $952; //@line 17311
          $$06$i248$i = 0; //@line 17311
          $957 = $951; //@line 17311
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 17313
           $957$looptemp = $957;
           $957 = $957 + 1 | 0; //@line 17315
           HEAP32[$82 >> 2] = $957; //@line 17316
           $960 = $$06$i248$i << 8 | HEAPU8[$957$looptemp >> 0]; //@line 17319
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $960; //@line 17322
            break;
           } else {
            $$06$i248$i = $960; //@line 17325
           }
          }
         }
         HEAP32[$948 >> 2] = $$0$lcssa$i251$i; //@line 17329
         break L24;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 96; //@line 17336
          break L8;
         }
         $964 = (HEAP32[$236 >> 2] | 0) + 12 | 0; //@line 17340
         if ((HEAP32[$964 >> 2] | 0) != -1) {
          label = 96; //@line 17344
          break L8;
         }
         $967 = $319 + 1 | 0; //@line 17347
         HEAP32[$82 >> 2] = $967; //@line 17348
         $968 = $$1202$in$i & 255; //@line 17349
         if (!($968 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 17352
         } else {
          $$045$i242$i = $968; //@line 17354
          $$06$i241$i = 0; //@line 17354
          $973 = $967; //@line 17354
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 17356
           $973$looptemp = $973;
           $973 = $973 + 1 | 0; //@line 17358
           HEAP32[$82 >> 2] = $973; //@line 17359
           $976 = $$06$i241$i << 8 | HEAPU8[$973$looptemp >> 0]; //@line 17362
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $976; //@line 17365
            break;
           } else {
            $$06$i241$i = $976; //@line 17368
           }
          }
         }
         HEAP32[$964 >> 2] = $$0$lcssa$i244$i; //@line 17372
         break L24;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 102; //@line 17379
          break L8;
         }
         $980 = (HEAP32[$236 >> 2] | 0) + 1 | 0; //@line 17383
         $981 = HEAP8[$980 >> 0] | 0; //@line 17384
         if ($981 & 1) {
          label = 102; //@line 17388
          break L8;
         }
         HEAP8[$980 >> 0] = $981 | 1; //@line 17392
         $986 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 17394
         HEAP32[$82 >> 2] = $986; //@line 17395
         $987 = $$1202$in$i & 255; //@line 17396
         if (!($987 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 17399
         } else {
          $$045$i235$i = $987; //@line 17401
          $$06$i234$i = 0; //@line 17401
          $992 = $986; //@line 17401
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 17403
           $992$looptemp = $992;
           $992 = $992 + 1 | 0; //@line 17405
           HEAP32[$82 >> 2] = $992; //@line 17406
           $995 = $$06$i234$i << 8 | HEAPU8[$992$looptemp >> 0]; //@line 17409
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $995; //@line 17412
            break;
           } else {
            $$06$i234$i = $995; //@line 17415
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 17421
         break L24;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 108; //@line 17428
          break L8;
         }
         $1001 = (HEAP32[$236 >> 2] | 0) + 1 | 0; //@line 17432
         $1002 = HEAP8[$1001 >> 0] | 0; //@line 17433
         if ($1002 & 2) {
          label = 108; //@line 17437
          break L8;
         }
         HEAP8[$1001 >> 0] = $1002 | 2; //@line 17441
         $1007 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 17443
         HEAP32[$82 >> 2] = $1007; //@line 17444
         $1008 = $$1202$in$i & 255; //@line 17445
         if (!($1008 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 17448
         } else {
          $$045$i228$i = $1008; //@line 17450
          $$06$i227$i = 0; //@line 17450
          $1013 = $1007; //@line 17450
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 17452
           $1013$looptemp = $1013;
           $1013 = $1013 + 1 | 0; //@line 17454
           HEAP32[$82 >> 2] = $1013; //@line 17455
           $1016 = $$06$i227$i << 8 | HEAPU8[$1013$looptemp >> 0]; //@line 17458
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $1016; //@line 17461
            break;
           } else {
            $$06$i227$i = $1016; //@line 17464
           }
          }
         }
         HEAP32[(HEAP32[$236 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 17470
         break L24;
         break;
        }
       default:
        {
         label = 112; //@line 17475
         break L8;
        }
       }
       break;
      }
     case 12:
      {
       label = 30; //@line 17482
       break;
      }
     default:
      {
       label = 112; //@line 17486
       break L8;
      }
     }
    } while (0);
    if ((label | 0) == 30) {
     label = 0; //@line 17492
     if (($$1202$i & 65535) > 2) {
      label = 32; //@line 17495
      break;
     }
     if ((HEAP32[$133 >> 2] | 0) != -1) {
      label = 32; //@line 17501
      break;
     }
     $360 = $319 + 1 | 0; //@line 17504
     HEAP32[$82 >> 2] = $360; //@line 17505
     $361 = $$1202$in$i & 255; //@line 17506
     if (!($361 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 17509
     } else {
      $$045$i$i = $361; //@line 17511
      $$06$i$i = 0; //@line 17511
      $366 = $360; //@line 17511
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 17513
       $366$looptemp = $366;
       $366 = $366 + 1 | 0; //@line 17515
       HEAP32[$82 >> 2] = $366; //@line 17516
       $369 = $$06$i$i << 8 | HEAPU8[$366$looptemp >> 0]; //@line 17519
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $369; //@line 17522
        break;
       } else {
        $$06$i$i = $369; //@line 17525
       }
      }
     }
     HEAP32[$133 >> 2] = $$0$lcssa$i$i; //@line 17529
    }
    $1020 = HEAP32[$82 >> 2] | 0; //@line 17531
    $1021 = $1020 - $233 | 0; //@line 17532
    if (($1021 | 0) > ($232 | 0)) {
     break L6;
    } else {
     $$sink275$i = $232 - $1021 | 0; //@line 17539
     $1042 = $1020; //@line 17539
     $241 = $1020; //@line 17539
    }
   }
   switch (label | 0) {
   case 17:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 17544
     break L6;
     break;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4058, $100); //@line 17549
     break L6;
     break;
    }
   case 26:
    {
     $282 = HEAP32[$122 >> 2] | 0; //@line 17554
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 17555
     $283 = FUNCTION_TABLE_ii[$282 & 15](68) | 0; //@line 17556
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 17559
      $284 = $ReallocAsyncCtx3 + 4 | 0; //@line 17560
      HEAP16[$284 >> 1] = $279; //@line 17561
      $285 = $ReallocAsyncCtx3 + 8 | 0; //@line 17562
      HEAP32[$285 >> 2] = $2; //@line 17563
      $286 = $ReallocAsyncCtx3 + 12 | 0; //@line 17564
      HEAP32[$286 >> 2] = $82; //@line 17565
      $287 = $ReallocAsyncCtx3 + 16 | 0; //@line 17566
      HEAP32[$287 >> 2] = $4; //@line 17567
      $288 = $ReallocAsyncCtx3 + 20 | 0; //@line 17568
      HEAP32[$288 >> 2] = $126; //@line 17569
      $289 = $ReallocAsyncCtx3 + 24 | 0; //@line 17570
      HEAP32[$289 >> 2] = $6; //@line 17571
      $290 = $ReallocAsyncCtx3 + 28 | 0; //@line 17572
      HEAP32[$290 >> 2] = $232; //@line 17573
      $291 = $ReallocAsyncCtx3 + 32 | 0; //@line 17574
      HEAP32[$291 >> 2] = $8; //@line 17575
      $292 = $ReallocAsyncCtx3 + 36 | 0; //@line 17576
      HEAP32[$292 >> 2] = $10; //@line 17577
      $293 = $ReallocAsyncCtx3 + 40 | 0; //@line 17578
      HEAP32[$293 >> 2] = $12; //@line 17579
      $294 = $ReallocAsyncCtx3 + 44 | 0; //@line 17580
      HEAP32[$294 >> 2] = $233; //@line 17581
      $295 = $ReallocAsyncCtx3 + 48 | 0; //@line 17582
      HEAP32[$295 >> 2] = $14; //@line 17583
      $296 = $ReallocAsyncCtx3 + 52 | 0; //@line 17584
      HEAP32[$296 >> 2] = $16; //@line 17585
      $297 = $ReallocAsyncCtx3 + 56 | 0; //@line 17586
      HEAP32[$297 >> 2] = $20; //@line 17587
      $298 = $ReallocAsyncCtx3 + 60 | 0; //@line 17588
      HEAP32[$298 >> 2] = $22; //@line 17589
      $299 = $ReallocAsyncCtx3 + 64 | 0; //@line 17590
      HEAP16[$299 >> 1] = $$1202$i; //@line 17591
      $300 = $ReallocAsyncCtx3 + 68 | 0; //@line 17592
      HEAP32[$300 >> 2] = $24; //@line 17593
      $301 = $ReallocAsyncCtx3 + 72 | 0; //@line 17594
      HEAP32[$301 >> 2] = $28; //@line 17595
      $302 = $ReallocAsyncCtx3 + 76 | 0; //@line 17596
      HEAP32[$302 >> 2] = $AsyncRetVal; //@line 17597
      $303 = $ReallocAsyncCtx3 + 80 | 0; //@line 17598
      HEAP32[$303 >> 2] = $30; //@line 17599
      $304 = $ReallocAsyncCtx3 + 84 | 0; //@line 17600
      HEAP32[$304 >> 2] = $$0208$i; //@line 17601
      $305 = $ReallocAsyncCtx3 + 88 | 0; //@line 17602
      HEAP32[$305 >> 2] = $34; //@line 17603
      $306 = $ReallocAsyncCtx3 + 92 | 0; //@line 17604
      HEAP32[$306 >> 2] = $$1202$in$i; //@line 17605
      $307 = $ReallocAsyncCtx3 + 96 | 0; //@line 17606
      HEAP32[$307 >> 2] = $36; //@line 17607
      $308 = $ReallocAsyncCtx3 + 100 | 0; //@line 17608
      HEAP32[$308 >> 2] = $32; //@line 17609
      $309 = $ReallocAsyncCtx3 + 104 | 0; //@line 17610
      HEAP32[$309 >> 2] = $38; //@line 17611
      $310 = $ReallocAsyncCtx3 + 108 | 0; //@line 17612
      HEAP32[$310 >> 2] = $40; //@line 17613
      $311 = $ReallocAsyncCtx3 + 112 | 0; //@line 17614
      HEAP32[$311 >> 2] = $42; //@line 17615
      $312 = $ReallocAsyncCtx3 + 116 | 0; //@line 17616
      HEAP32[$312 >> 2] = $44; //@line 17617
      $313 = $ReallocAsyncCtx3 + 120 | 0; //@line 17618
      HEAP32[$313 >> 2] = $46; //@line 17619
      $314 = $ReallocAsyncCtx3 + 124 | 0; //@line 17620
      HEAP32[$314 >> 2] = $50; //@line 17621
      $315 = $ReallocAsyncCtx3 + 128 | 0; //@line 17622
      HEAP32[$315 >> 2] = $52; //@line 17623
      $316 = $ReallocAsyncCtx3 + 132 | 0; //@line 17624
      HEAP32[$316 >> 2] = $54; //@line 17625
      $317 = $ReallocAsyncCtx3 + 136 | 0; //@line 17626
      HEAP32[$317 >> 2] = $58; //@line 17627
      $318 = $ReallocAsyncCtx3 + 140 | 0; //@line 17628
      HEAP32[$318 >> 2] = $319; //@line 17629
      $320 = $ReallocAsyncCtx3 + 144 | 0; //@line 17630
      HEAP32[$320 >> 2] = $62; //@line 17631
      $321 = $ReallocAsyncCtx3 + 148 | 0; //@line 17632
      HEAP32[$321 >> 2] = $133; //@line 17633
      $322 = $ReallocAsyncCtx3 + 152 | 0; //@line 17634
      HEAP32[$322 >> 2] = $64; //@line 17635
      $323 = $ReallocAsyncCtx3 + 156 | 0; //@line 17636
      HEAP32[$323 >> 2] = $66; //@line 17637
      $324 = $ReallocAsyncCtx3 + 160 | 0; //@line 17638
      HEAP32[$324 >> 2] = $70; //@line 17639
      $325 = $ReallocAsyncCtx3 + 164 | 0; //@line 17640
      HEAP32[$325 >> 2] = $72; //@line 17641
      $326 = $ReallocAsyncCtx3 + 168 | 0; //@line 17642
      HEAP32[$326 >> 2] = $74; //@line 17643
      $327 = $ReallocAsyncCtx3 + 172 | 0; //@line 17644
      HEAP32[$327 >> 2] = $76; //@line 17645
      $328 = $ReallocAsyncCtx3 + 176 | 0; //@line 17646
      HEAP32[$328 >> 2] = $78; //@line 17647
      $329 = $ReallocAsyncCtx3 + 180 | 0; //@line 17648
      HEAP32[$329 >> 2] = $80; //@line 17649
      $330 = $ReallocAsyncCtx3 + 184 | 0; //@line 17650
      HEAP32[$330 >> 2] = $82; //@line 17651
      $331 = $ReallocAsyncCtx3 + 188 | 0; //@line 17652
      HEAP32[$331 >> 2] = $237; //@line 17653
      $332 = $ReallocAsyncCtx3 + 192 | 0; //@line 17654
      HEAP32[$332 >> 2] = $84; //@line 17655
      $333 = $ReallocAsyncCtx3 + 196 | 0; //@line 17656
      HEAP32[$333 >> 2] = $238; //@line 17657
      $334 = $ReallocAsyncCtx3 + 200 | 0; //@line 17658
      HEAP32[$334 >> 2] = $86; //@line 17659
      $335 = $ReallocAsyncCtx3 + 204 | 0; //@line 17660
      HEAP32[$335 >> 2] = $90; //@line 17661
      $336 = $ReallocAsyncCtx3 + 208 | 0; //@line 17662
      HEAP32[$336 >> 2] = $92; //@line 17663
      $337 = $ReallocAsyncCtx3 + 212 | 0; //@line 17664
      HEAP32[$337 >> 2] = $94; //@line 17665
      $338 = $ReallocAsyncCtx3 + 216 | 0; //@line 17666
      HEAP32[$338 >> 2] = $96; //@line 17667
      $339 = $ReallocAsyncCtx3 + 220 | 0; //@line 17668
      HEAP32[$339 >> 2] = $AsyncRetVal; //@line 17669
      $340 = $ReallocAsyncCtx3 + 224 | 0; //@line 17670
      HEAP32[$340 >> 2] = $98; //@line 17671
      $341 = $ReallocAsyncCtx3 + 228 | 0; //@line 17672
      HEAP32[$341 >> 2] = $234; //@line 17673
      $342 = $ReallocAsyncCtx3 + 232 | 0; //@line 17674
      HEAP32[$342 >> 2] = $100; //@line 17675
      $343 = $ReallocAsyncCtx3 + 236 | 0; //@line 17676
      HEAP16[$343 >> 1] = $trunc$i; //@line 17677
      $344 = $ReallocAsyncCtx3 + 240 | 0; //@line 17678
      HEAP32[$344 >> 2] = $104; //@line 17679
      $345 = $ReallocAsyncCtx3 + 244 | 0; //@line 17680
      HEAP32[$345 >> 2] = $106; //@line 17681
      $346 = $ReallocAsyncCtx3 + 248 | 0; //@line 17682
      HEAP32[$346 >> 2] = $110; //@line 17683
      $347 = $ReallocAsyncCtx3 + 252 | 0; //@line 17684
      HEAP32[$347 >> 2] = $114; //@line 17685
      $348 = $ReallocAsyncCtx3 + 256 | 0; //@line 17686
      HEAP32[$348 >> 2] = $116; //@line 17687
      $349 = $ReallocAsyncCtx3 + 260 | 0; //@line 17688
      HEAP32[$349 >> 2] = $118; //@line 17689
      $350 = $ReallocAsyncCtx3 + 264 | 0; //@line 17690
      HEAP32[$350 >> 2] = $122; //@line 17691
      $351 = $ReallocAsyncCtx3 + 268 | 0; //@line 17692
      HEAP32[$351 >> 2] = $124; //@line 17693
      $352 = $ReallocAsyncCtx3 + 272 | 0; //@line 17694
      HEAP32[$352 >> 2] = $236; //@line 17695
      $353 = $ReallocAsyncCtx3 + 276 | 0; //@line 17696
      HEAP32[$353 >> 2] = $128; //@line 17697
      $354 = $ReallocAsyncCtx3 + 280 | 0; //@line 17698
      HEAP32[$354 >> 2] = $236; //@line 17699
      $355 = $ReallocAsyncCtx3 + 284 | 0; //@line 17700
      HEAP32[$355 >> 2] = $130; //@line 17701
      sp = STACKTOP; //@line 17702
      return;
     }
     HEAP32[___async_retval >> 2] = $283; //@line 17706
     ___async_unwind = 0; //@line 17707
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 17708
     $284 = $ReallocAsyncCtx3 + 4 | 0; //@line 17709
     HEAP16[$284 >> 1] = $279; //@line 17710
     $285 = $ReallocAsyncCtx3 + 8 | 0; //@line 17711
     HEAP32[$285 >> 2] = $2; //@line 17712
     $286 = $ReallocAsyncCtx3 + 12 | 0; //@line 17713
     HEAP32[$286 >> 2] = $82; //@line 17714
     $287 = $ReallocAsyncCtx3 + 16 | 0; //@line 17715
     HEAP32[$287 >> 2] = $4; //@line 17716
     $288 = $ReallocAsyncCtx3 + 20 | 0; //@line 17717
     HEAP32[$288 >> 2] = $126; //@line 17718
     $289 = $ReallocAsyncCtx3 + 24 | 0; //@line 17719
     HEAP32[$289 >> 2] = $6; //@line 17720
     $290 = $ReallocAsyncCtx3 + 28 | 0; //@line 17721
     HEAP32[$290 >> 2] = $232; //@line 17722
     $291 = $ReallocAsyncCtx3 + 32 | 0; //@line 17723
     HEAP32[$291 >> 2] = $8; //@line 17724
     $292 = $ReallocAsyncCtx3 + 36 | 0; //@line 17725
     HEAP32[$292 >> 2] = $10; //@line 17726
     $293 = $ReallocAsyncCtx3 + 40 | 0; //@line 17727
     HEAP32[$293 >> 2] = $12; //@line 17728
     $294 = $ReallocAsyncCtx3 + 44 | 0; //@line 17729
     HEAP32[$294 >> 2] = $233; //@line 17730
     $295 = $ReallocAsyncCtx3 + 48 | 0; //@line 17731
     HEAP32[$295 >> 2] = $14; //@line 17732
     $296 = $ReallocAsyncCtx3 + 52 | 0; //@line 17733
     HEAP32[$296 >> 2] = $16; //@line 17734
     $297 = $ReallocAsyncCtx3 + 56 | 0; //@line 17735
     HEAP32[$297 >> 2] = $20; //@line 17736
     $298 = $ReallocAsyncCtx3 + 60 | 0; //@line 17737
     HEAP32[$298 >> 2] = $22; //@line 17738
     $299 = $ReallocAsyncCtx3 + 64 | 0; //@line 17739
     HEAP16[$299 >> 1] = $$1202$i; //@line 17740
     $300 = $ReallocAsyncCtx3 + 68 | 0; //@line 17741
     HEAP32[$300 >> 2] = $24; //@line 17742
     $301 = $ReallocAsyncCtx3 + 72 | 0; //@line 17743
     HEAP32[$301 >> 2] = $28; //@line 17744
     $302 = $ReallocAsyncCtx3 + 76 | 0; //@line 17745
     HEAP32[$302 >> 2] = $AsyncRetVal; //@line 17746
     $303 = $ReallocAsyncCtx3 + 80 | 0; //@line 17747
     HEAP32[$303 >> 2] = $30; //@line 17748
     $304 = $ReallocAsyncCtx3 + 84 | 0; //@line 17749
     HEAP32[$304 >> 2] = $$0208$i; //@line 17750
     $305 = $ReallocAsyncCtx3 + 88 | 0; //@line 17751
     HEAP32[$305 >> 2] = $34; //@line 17752
     $306 = $ReallocAsyncCtx3 + 92 | 0; //@line 17753
     HEAP32[$306 >> 2] = $$1202$in$i; //@line 17754
     $307 = $ReallocAsyncCtx3 + 96 | 0; //@line 17755
     HEAP32[$307 >> 2] = $36; //@line 17756
     $308 = $ReallocAsyncCtx3 + 100 | 0; //@line 17757
     HEAP32[$308 >> 2] = $32; //@line 17758
     $309 = $ReallocAsyncCtx3 + 104 | 0; //@line 17759
     HEAP32[$309 >> 2] = $38; //@line 17760
     $310 = $ReallocAsyncCtx3 + 108 | 0; //@line 17761
     HEAP32[$310 >> 2] = $40; //@line 17762
     $311 = $ReallocAsyncCtx3 + 112 | 0; //@line 17763
     HEAP32[$311 >> 2] = $42; //@line 17764
     $312 = $ReallocAsyncCtx3 + 116 | 0; //@line 17765
     HEAP32[$312 >> 2] = $44; //@line 17766
     $313 = $ReallocAsyncCtx3 + 120 | 0; //@line 17767
     HEAP32[$313 >> 2] = $46; //@line 17768
     $314 = $ReallocAsyncCtx3 + 124 | 0; //@line 17769
     HEAP32[$314 >> 2] = $50; //@line 17770
     $315 = $ReallocAsyncCtx3 + 128 | 0; //@line 17771
     HEAP32[$315 >> 2] = $52; //@line 17772
     $316 = $ReallocAsyncCtx3 + 132 | 0; //@line 17773
     HEAP32[$316 >> 2] = $54; //@line 17774
     $317 = $ReallocAsyncCtx3 + 136 | 0; //@line 17775
     HEAP32[$317 >> 2] = $58; //@line 17776
     $318 = $ReallocAsyncCtx3 + 140 | 0; //@line 17777
     HEAP32[$318 >> 2] = $319; //@line 17778
     $320 = $ReallocAsyncCtx3 + 144 | 0; //@line 17779
     HEAP32[$320 >> 2] = $62; //@line 17780
     $321 = $ReallocAsyncCtx3 + 148 | 0; //@line 17781
     HEAP32[$321 >> 2] = $133; //@line 17782
     $322 = $ReallocAsyncCtx3 + 152 | 0; //@line 17783
     HEAP32[$322 >> 2] = $64; //@line 17784
     $323 = $ReallocAsyncCtx3 + 156 | 0; //@line 17785
     HEAP32[$323 >> 2] = $66; //@line 17786
     $324 = $ReallocAsyncCtx3 + 160 | 0; //@line 17787
     HEAP32[$324 >> 2] = $70; //@line 17788
     $325 = $ReallocAsyncCtx3 + 164 | 0; //@line 17789
     HEAP32[$325 >> 2] = $72; //@line 17790
     $326 = $ReallocAsyncCtx3 + 168 | 0; //@line 17791
     HEAP32[$326 >> 2] = $74; //@line 17792
     $327 = $ReallocAsyncCtx3 + 172 | 0; //@line 17793
     HEAP32[$327 >> 2] = $76; //@line 17794
     $328 = $ReallocAsyncCtx3 + 176 | 0; //@line 17795
     HEAP32[$328 >> 2] = $78; //@line 17796
     $329 = $ReallocAsyncCtx3 + 180 | 0; //@line 17797
     HEAP32[$329 >> 2] = $80; //@line 17798
     $330 = $ReallocAsyncCtx3 + 184 | 0; //@line 17799
     HEAP32[$330 >> 2] = $82; //@line 17800
     $331 = $ReallocAsyncCtx3 + 188 | 0; //@line 17801
     HEAP32[$331 >> 2] = $237; //@line 17802
     $332 = $ReallocAsyncCtx3 + 192 | 0; //@line 17803
     HEAP32[$332 >> 2] = $84; //@line 17804
     $333 = $ReallocAsyncCtx3 + 196 | 0; //@line 17805
     HEAP32[$333 >> 2] = $238; //@line 17806
     $334 = $ReallocAsyncCtx3 + 200 | 0; //@line 17807
     HEAP32[$334 >> 2] = $86; //@line 17808
     $335 = $ReallocAsyncCtx3 + 204 | 0; //@line 17809
     HEAP32[$335 >> 2] = $90; //@line 17810
     $336 = $ReallocAsyncCtx3 + 208 | 0; //@line 17811
     HEAP32[$336 >> 2] = $92; //@line 17812
     $337 = $ReallocAsyncCtx3 + 212 | 0; //@line 17813
     HEAP32[$337 >> 2] = $94; //@line 17814
     $338 = $ReallocAsyncCtx3 + 216 | 0; //@line 17815
     HEAP32[$338 >> 2] = $96; //@line 17816
     $339 = $ReallocAsyncCtx3 + 220 | 0; //@line 17817
     HEAP32[$339 >> 2] = $AsyncRetVal; //@line 17818
     $340 = $ReallocAsyncCtx3 + 224 | 0; //@line 17819
     HEAP32[$340 >> 2] = $98; //@line 17820
     $341 = $ReallocAsyncCtx3 + 228 | 0; //@line 17821
     HEAP32[$341 >> 2] = $234; //@line 17822
     $342 = $ReallocAsyncCtx3 + 232 | 0; //@line 17823
     HEAP32[$342 >> 2] = $100; //@line 17824
     $343 = $ReallocAsyncCtx3 + 236 | 0; //@line 17825
     HEAP16[$343 >> 1] = $trunc$i; //@line 17826
     $344 = $ReallocAsyncCtx3 + 240 | 0; //@line 17827
     HEAP32[$344 >> 2] = $104; //@line 17828
     $345 = $ReallocAsyncCtx3 + 244 | 0; //@line 17829
     HEAP32[$345 >> 2] = $106; //@line 17830
     $346 = $ReallocAsyncCtx3 + 248 | 0; //@line 17831
     HEAP32[$346 >> 2] = $110; //@line 17832
     $347 = $ReallocAsyncCtx3 + 252 | 0; //@line 17833
     HEAP32[$347 >> 2] = $114; //@line 17834
     $348 = $ReallocAsyncCtx3 + 256 | 0; //@line 17835
     HEAP32[$348 >> 2] = $116; //@line 17836
     $349 = $ReallocAsyncCtx3 + 260 | 0; //@line 17837
     HEAP32[$349 >> 2] = $118; //@line 17838
     $350 = $ReallocAsyncCtx3 + 264 | 0; //@line 17839
     HEAP32[$350 >> 2] = $122; //@line 17840
     $351 = $ReallocAsyncCtx3 + 268 | 0; //@line 17841
     HEAP32[$351 >> 2] = $124; //@line 17842
     $352 = $ReallocAsyncCtx3 + 272 | 0; //@line 17843
     HEAP32[$352 >> 2] = $236; //@line 17844
     $353 = $ReallocAsyncCtx3 + 276 | 0; //@line 17845
     HEAP32[$353 >> 2] = $128; //@line 17846
     $354 = $ReallocAsyncCtx3 + 280 | 0; //@line 17847
     HEAP32[$354 >> 2] = $236; //@line 17848
     $355 = $ReallocAsyncCtx3 + 284 | 0; //@line 17849
     HEAP32[$355 >> 2] = $130; //@line 17850
     sp = STACKTOP; //@line 17851
     return;
    }
   case 32:
    {
     _mbed_tracef(2, 3737, 4172, $118); //@line 17856
     break L6;
     break;
    }
   case 37:
    {
     _mbed_tracef(2, 3737, 4241, $30); //@line 17861
     break L6;
     break;
    }
   case 41:
    {
     $385 = $$1202$in$i & 65535; //@line 17866
     if (($$1202$i + -1 & 65535) <= 1033) {
      $388 = HEAP32[$236 >> 2] | 0; //@line 17870
      if (!(HEAP32[$388 + 44 >> 2] | 0)) {
       HEAP16[$388 + 2 >> 1] = $$1202$i; //@line 17876
       $393 = $319 + 1 | 0; //@line 17877
       HEAP32[$82 >> 2] = $393; //@line 17878
       $394 = HEAP32[$122 >> 2] | 0; //@line 17879
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 17880
       $395 = FUNCTION_TABLE_ii[$394 & 15]($$1202$i) | 0; //@line 17881
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 17884
        $396 = $ReallocAsyncCtx4 + 4 | 0; //@line 17885
        HEAP32[$396 >> 2] = $2; //@line 17886
        $397 = $ReallocAsyncCtx4 + 8 | 0; //@line 17887
        HEAP32[$397 >> 2] = $82; //@line 17888
        $398 = $ReallocAsyncCtx4 + 12 | 0; //@line 17889
        HEAP32[$398 >> 2] = $4; //@line 17890
        $399 = $ReallocAsyncCtx4 + 16 | 0; //@line 17891
        HEAP32[$399 >> 2] = $6; //@line 17892
        $400 = $ReallocAsyncCtx4 + 20 | 0; //@line 17893
        HEAP32[$400 >> 2] = $232; //@line 17894
        $401 = $ReallocAsyncCtx4 + 24 | 0; //@line 17895
        HEAP32[$401 >> 2] = $8; //@line 17896
        $402 = $ReallocAsyncCtx4 + 28 | 0; //@line 17897
        HEAP32[$402 >> 2] = $10; //@line 17898
        $403 = $ReallocAsyncCtx4 + 32 | 0; //@line 17899
        HEAP32[$403 >> 2] = $12; //@line 17900
        $404 = $ReallocAsyncCtx4 + 36 | 0; //@line 17901
        HEAP32[$404 >> 2] = $233; //@line 17902
        $405 = $ReallocAsyncCtx4 + 40 | 0; //@line 17903
        HEAP32[$405 >> 2] = $14; //@line 17904
        $406 = $ReallocAsyncCtx4 + 44 | 0; //@line 17905
        HEAP32[$406 >> 2] = $16; //@line 17906
        $407 = $ReallocAsyncCtx4 + 48 | 0; //@line 17907
        HEAP32[$407 >> 2] = $20; //@line 17908
        $408 = $ReallocAsyncCtx4 + 52 | 0; //@line 17909
        HEAP32[$408 >> 2] = $22; //@line 17910
        $409 = $ReallocAsyncCtx4 + 56 | 0; //@line 17911
        HEAP32[$409 >> 2] = $24; //@line 17912
        $410 = $ReallocAsyncCtx4 + 60 | 0; //@line 17913
        HEAP32[$410 >> 2] = $28; //@line 17914
        $411 = $ReallocAsyncCtx4 + 64 | 0; //@line 17915
        HEAP32[$411 >> 2] = $AsyncRetVal; //@line 17916
        $412 = $ReallocAsyncCtx4 + 68 | 0; //@line 17917
        HEAP32[$412 >> 2] = $30; //@line 17918
        $413 = $ReallocAsyncCtx4 + 72 | 0; //@line 17919
        HEAP32[$413 >> 2] = $32; //@line 17920
        $414 = $ReallocAsyncCtx4 + 76 | 0; //@line 17921
        HEAP32[$414 >> 2] = $34; //@line 17922
        $415 = $ReallocAsyncCtx4 + 80 | 0; //@line 17923
        HEAP32[$415 >> 2] = $$0208$i; //@line 17924
        $416 = $ReallocAsyncCtx4 + 84 | 0; //@line 17925
        HEAP32[$416 >> 2] = $36; //@line 17926
        $417 = $ReallocAsyncCtx4 + 88 | 0; //@line 17927
        HEAP32[$417 >> 2] = $38; //@line 17928
        $418 = $ReallocAsyncCtx4 + 92 | 0; //@line 17929
        HEAP32[$418 >> 2] = $40; //@line 17930
        $419 = $ReallocAsyncCtx4 + 96 | 0; //@line 17931
        HEAP32[$419 >> 2] = $42; //@line 17932
        $420 = $ReallocAsyncCtx4 + 100 | 0; //@line 17933
        HEAP32[$420 >> 2] = $44; //@line 17934
        $421 = $ReallocAsyncCtx4 + 104 | 0; //@line 17935
        HEAP32[$421 >> 2] = $46; //@line 17936
        $422 = $ReallocAsyncCtx4 + 108 | 0; //@line 17937
        HEAP32[$422 >> 2] = $50; //@line 17938
        $423 = $ReallocAsyncCtx4 + 112 | 0; //@line 17939
        HEAP32[$423 >> 2] = $52; //@line 17940
        $424 = $ReallocAsyncCtx4 + 116 | 0; //@line 17941
        HEAP32[$424 >> 2] = $54; //@line 17942
        $425 = $ReallocAsyncCtx4 + 120 | 0; //@line 17943
        HEAP32[$425 >> 2] = $58; //@line 17944
        $426 = $ReallocAsyncCtx4 + 124 | 0; //@line 17945
        HEAP32[$426 >> 2] = $62; //@line 17946
        $427 = $ReallocAsyncCtx4 + 128 | 0; //@line 17947
        HEAP32[$427 >> 2] = $133; //@line 17948
        $428 = $ReallocAsyncCtx4 + 132 | 0; //@line 17949
        HEAP32[$428 >> 2] = $64; //@line 17950
        $429 = $ReallocAsyncCtx4 + 136 | 0; //@line 17951
        HEAP32[$429 >> 2] = $66; //@line 17952
        $430 = $ReallocAsyncCtx4 + 140 | 0; //@line 17953
        HEAP32[$430 >> 2] = $70; //@line 17954
        $431 = $ReallocAsyncCtx4 + 144 | 0; //@line 17955
        HEAP32[$431 >> 2] = $72; //@line 17956
        $432 = $ReallocAsyncCtx4 + 148 | 0; //@line 17957
        HEAP32[$432 >> 2] = $74; //@line 17958
        $433 = $ReallocAsyncCtx4 + 152 | 0; //@line 17959
        HEAP32[$433 >> 2] = $76; //@line 17960
        $434 = $ReallocAsyncCtx4 + 156 | 0; //@line 17961
        HEAP32[$434 >> 2] = $78; //@line 17962
        $435 = $ReallocAsyncCtx4 + 160 | 0; //@line 17963
        HEAP32[$435 >> 2] = $80; //@line 17964
        $436 = $ReallocAsyncCtx4 + 164 | 0; //@line 17965
        HEAP32[$436 >> 2] = $82; //@line 17966
        $437 = $ReallocAsyncCtx4 + 168 | 0; //@line 17967
        HEAP32[$437 >> 2] = $237; //@line 17968
        $438 = $ReallocAsyncCtx4 + 172 | 0; //@line 17969
        HEAP32[$438 >> 2] = $84; //@line 17970
        $439 = $ReallocAsyncCtx4 + 176 | 0; //@line 17971
        HEAP32[$439 >> 2] = $238; //@line 17972
        $440 = $ReallocAsyncCtx4 + 180 | 0; //@line 17973
        HEAP32[$440 >> 2] = $86; //@line 17974
        $441 = $ReallocAsyncCtx4 + 184 | 0; //@line 17975
        HEAP32[$441 >> 2] = $90; //@line 17976
        $442 = $ReallocAsyncCtx4 + 188 | 0; //@line 17977
        HEAP32[$442 >> 2] = $92; //@line 17978
        $443 = $ReallocAsyncCtx4 + 192 | 0; //@line 17979
        HEAP32[$443 >> 2] = $94; //@line 17980
        $444 = $ReallocAsyncCtx4 + 196 | 0; //@line 17981
        HEAP32[$444 >> 2] = $96; //@line 17982
        $445 = $ReallocAsyncCtx4 + 200 | 0; //@line 17983
        HEAP32[$445 >> 2] = $AsyncRetVal; //@line 17984
        $446 = $ReallocAsyncCtx4 + 204 | 0; //@line 17985
        HEAP32[$446 >> 2] = $98; //@line 17986
        $447 = $ReallocAsyncCtx4 + 208 | 0; //@line 17987
        HEAP32[$447 >> 2] = $234; //@line 17988
        $448 = $ReallocAsyncCtx4 + 212 | 0; //@line 17989
        HEAP32[$448 >> 2] = $100; //@line 17990
        $449 = $ReallocAsyncCtx4 + 216 | 0; //@line 17991
        HEAP32[$449 >> 2] = $104; //@line 17992
        $450 = $ReallocAsyncCtx4 + 220 | 0; //@line 17993
        HEAP32[$450 >> 2] = $393; //@line 17994
        $451 = $ReallocAsyncCtx4 + 224 | 0; //@line 17995
        HEAP32[$451 >> 2] = $106; //@line 17996
        $452 = $ReallocAsyncCtx4 + 228 | 0; //@line 17997
        HEAP32[$452 >> 2] = $385; //@line 17998
        $453 = $ReallocAsyncCtx4 + 232 | 0; //@line 17999
        HEAP32[$453 >> 2] = $110; //@line 18000
        $454 = $ReallocAsyncCtx4 + 236 | 0; //@line 18001
        HEAP32[$454 >> 2] = $114; //@line 18002
        $455 = $ReallocAsyncCtx4 + 240 | 0; //@line 18003
        HEAP32[$455 >> 2] = $116; //@line 18004
        $456 = $ReallocAsyncCtx4 + 244 | 0; //@line 18005
        HEAP32[$456 >> 2] = $118; //@line 18006
        $457 = $ReallocAsyncCtx4 + 248 | 0; //@line 18007
        HEAP32[$457 >> 2] = $122; //@line 18008
        $458 = $ReallocAsyncCtx4 + 252 | 0; //@line 18009
        HEAP32[$458 >> 2] = $124; //@line 18010
        $459 = $ReallocAsyncCtx4 + 256 | 0; //@line 18011
        HEAP32[$459 >> 2] = $126; //@line 18012
        $460 = $ReallocAsyncCtx4 + 260 | 0; //@line 18013
        HEAP32[$460 >> 2] = $236; //@line 18014
        $461 = $ReallocAsyncCtx4 + 264 | 0; //@line 18015
        HEAP32[$461 >> 2] = $128; //@line 18016
        $462 = $ReallocAsyncCtx4 + 268 | 0; //@line 18017
        HEAP32[$462 >> 2] = $236; //@line 18018
        $463 = $ReallocAsyncCtx4 + 272 | 0; //@line 18019
        HEAP32[$463 >> 2] = $130; //@line 18020
        sp = STACKTOP; //@line 18021
        return;
       }
       HEAP32[___async_retval >> 2] = $395; //@line 18025
       ___async_unwind = 0; //@line 18026
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 18027
       $396 = $ReallocAsyncCtx4 + 4 | 0; //@line 18028
       HEAP32[$396 >> 2] = $2; //@line 18029
       $397 = $ReallocAsyncCtx4 + 8 | 0; //@line 18030
       HEAP32[$397 >> 2] = $82; //@line 18031
       $398 = $ReallocAsyncCtx4 + 12 | 0; //@line 18032
       HEAP32[$398 >> 2] = $4; //@line 18033
       $399 = $ReallocAsyncCtx4 + 16 | 0; //@line 18034
       HEAP32[$399 >> 2] = $6; //@line 18035
       $400 = $ReallocAsyncCtx4 + 20 | 0; //@line 18036
       HEAP32[$400 >> 2] = $232; //@line 18037
       $401 = $ReallocAsyncCtx4 + 24 | 0; //@line 18038
       HEAP32[$401 >> 2] = $8; //@line 18039
       $402 = $ReallocAsyncCtx4 + 28 | 0; //@line 18040
       HEAP32[$402 >> 2] = $10; //@line 18041
       $403 = $ReallocAsyncCtx4 + 32 | 0; //@line 18042
       HEAP32[$403 >> 2] = $12; //@line 18043
       $404 = $ReallocAsyncCtx4 + 36 | 0; //@line 18044
       HEAP32[$404 >> 2] = $233; //@line 18045
       $405 = $ReallocAsyncCtx4 + 40 | 0; //@line 18046
       HEAP32[$405 >> 2] = $14; //@line 18047
       $406 = $ReallocAsyncCtx4 + 44 | 0; //@line 18048
       HEAP32[$406 >> 2] = $16; //@line 18049
       $407 = $ReallocAsyncCtx4 + 48 | 0; //@line 18050
       HEAP32[$407 >> 2] = $20; //@line 18051
       $408 = $ReallocAsyncCtx4 + 52 | 0; //@line 18052
       HEAP32[$408 >> 2] = $22; //@line 18053
       $409 = $ReallocAsyncCtx4 + 56 | 0; //@line 18054
       HEAP32[$409 >> 2] = $24; //@line 18055
       $410 = $ReallocAsyncCtx4 + 60 | 0; //@line 18056
       HEAP32[$410 >> 2] = $28; //@line 18057
       $411 = $ReallocAsyncCtx4 + 64 | 0; //@line 18058
       HEAP32[$411 >> 2] = $AsyncRetVal; //@line 18059
       $412 = $ReallocAsyncCtx4 + 68 | 0; //@line 18060
       HEAP32[$412 >> 2] = $30; //@line 18061
       $413 = $ReallocAsyncCtx4 + 72 | 0; //@line 18062
       HEAP32[$413 >> 2] = $32; //@line 18063
       $414 = $ReallocAsyncCtx4 + 76 | 0; //@line 18064
       HEAP32[$414 >> 2] = $34; //@line 18065
       $415 = $ReallocAsyncCtx4 + 80 | 0; //@line 18066
       HEAP32[$415 >> 2] = $$0208$i; //@line 18067
       $416 = $ReallocAsyncCtx4 + 84 | 0; //@line 18068
       HEAP32[$416 >> 2] = $36; //@line 18069
       $417 = $ReallocAsyncCtx4 + 88 | 0; //@line 18070
       HEAP32[$417 >> 2] = $38; //@line 18071
       $418 = $ReallocAsyncCtx4 + 92 | 0; //@line 18072
       HEAP32[$418 >> 2] = $40; //@line 18073
       $419 = $ReallocAsyncCtx4 + 96 | 0; //@line 18074
       HEAP32[$419 >> 2] = $42; //@line 18075
       $420 = $ReallocAsyncCtx4 + 100 | 0; //@line 18076
       HEAP32[$420 >> 2] = $44; //@line 18077
       $421 = $ReallocAsyncCtx4 + 104 | 0; //@line 18078
       HEAP32[$421 >> 2] = $46; //@line 18079
       $422 = $ReallocAsyncCtx4 + 108 | 0; //@line 18080
       HEAP32[$422 >> 2] = $50; //@line 18081
       $423 = $ReallocAsyncCtx4 + 112 | 0; //@line 18082
       HEAP32[$423 >> 2] = $52; //@line 18083
       $424 = $ReallocAsyncCtx4 + 116 | 0; //@line 18084
       HEAP32[$424 >> 2] = $54; //@line 18085
       $425 = $ReallocAsyncCtx4 + 120 | 0; //@line 18086
       HEAP32[$425 >> 2] = $58; //@line 18087
       $426 = $ReallocAsyncCtx4 + 124 | 0; //@line 18088
       HEAP32[$426 >> 2] = $62; //@line 18089
       $427 = $ReallocAsyncCtx4 + 128 | 0; //@line 18090
       HEAP32[$427 >> 2] = $133; //@line 18091
       $428 = $ReallocAsyncCtx4 + 132 | 0; //@line 18092
       HEAP32[$428 >> 2] = $64; //@line 18093
       $429 = $ReallocAsyncCtx4 + 136 | 0; //@line 18094
       HEAP32[$429 >> 2] = $66; //@line 18095
       $430 = $ReallocAsyncCtx4 + 140 | 0; //@line 18096
       HEAP32[$430 >> 2] = $70; //@line 18097
       $431 = $ReallocAsyncCtx4 + 144 | 0; //@line 18098
       HEAP32[$431 >> 2] = $72; //@line 18099
       $432 = $ReallocAsyncCtx4 + 148 | 0; //@line 18100
       HEAP32[$432 >> 2] = $74; //@line 18101
       $433 = $ReallocAsyncCtx4 + 152 | 0; //@line 18102
       HEAP32[$433 >> 2] = $76; //@line 18103
       $434 = $ReallocAsyncCtx4 + 156 | 0; //@line 18104
       HEAP32[$434 >> 2] = $78; //@line 18105
       $435 = $ReallocAsyncCtx4 + 160 | 0; //@line 18106
       HEAP32[$435 >> 2] = $80; //@line 18107
       $436 = $ReallocAsyncCtx4 + 164 | 0; //@line 18108
       HEAP32[$436 >> 2] = $82; //@line 18109
       $437 = $ReallocAsyncCtx4 + 168 | 0; //@line 18110
       HEAP32[$437 >> 2] = $237; //@line 18111
       $438 = $ReallocAsyncCtx4 + 172 | 0; //@line 18112
       HEAP32[$438 >> 2] = $84; //@line 18113
       $439 = $ReallocAsyncCtx4 + 176 | 0; //@line 18114
       HEAP32[$439 >> 2] = $238; //@line 18115
       $440 = $ReallocAsyncCtx4 + 180 | 0; //@line 18116
       HEAP32[$440 >> 2] = $86; //@line 18117
       $441 = $ReallocAsyncCtx4 + 184 | 0; //@line 18118
       HEAP32[$441 >> 2] = $90; //@line 18119
       $442 = $ReallocAsyncCtx4 + 188 | 0; //@line 18120
       HEAP32[$442 >> 2] = $92; //@line 18121
       $443 = $ReallocAsyncCtx4 + 192 | 0; //@line 18122
       HEAP32[$443 >> 2] = $94; //@line 18123
       $444 = $ReallocAsyncCtx4 + 196 | 0; //@line 18124
       HEAP32[$444 >> 2] = $96; //@line 18125
       $445 = $ReallocAsyncCtx4 + 200 | 0; //@line 18126
       HEAP32[$445 >> 2] = $AsyncRetVal; //@line 18127
       $446 = $ReallocAsyncCtx4 + 204 | 0; //@line 18128
       HEAP32[$446 >> 2] = $98; //@line 18129
       $447 = $ReallocAsyncCtx4 + 208 | 0; //@line 18130
       HEAP32[$447 >> 2] = $234; //@line 18131
       $448 = $ReallocAsyncCtx4 + 212 | 0; //@line 18132
       HEAP32[$448 >> 2] = $100; //@line 18133
       $449 = $ReallocAsyncCtx4 + 216 | 0; //@line 18134
       HEAP32[$449 >> 2] = $104; //@line 18135
       $450 = $ReallocAsyncCtx4 + 220 | 0; //@line 18136
       HEAP32[$450 >> 2] = $393; //@line 18137
       $451 = $ReallocAsyncCtx4 + 224 | 0; //@line 18138
       HEAP32[$451 >> 2] = $106; //@line 18139
       $452 = $ReallocAsyncCtx4 + 228 | 0; //@line 18140
       HEAP32[$452 >> 2] = $385; //@line 18141
       $453 = $ReallocAsyncCtx4 + 232 | 0; //@line 18142
       HEAP32[$453 >> 2] = $110; //@line 18143
       $454 = $ReallocAsyncCtx4 + 236 | 0; //@line 18144
       HEAP32[$454 >> 2] = $114; //@line 18145
       $455 = $ReallocAsyncCtx4 + 240 | 0; //@line 18146
       HEAP32[$455 >> 2] = $116; //@line 18147
       $456 = $ReallocAsyncCtx4 + 244 | 0; //@line 18148
       HEAP32[$456 >> 2] = $118; //@line 18149
       $457 = $ReallocAsyncCtx4 + 248 | 0; //@line 18150
       HEAP32[$457 >> 2] = $122; //@line 18151
       $458 = $ReallocAsyncCtx4 + 252 | 0; //@line 18152
       HEAP32[$458 >> 2] = $124; //@line 18153
       $459 = $ReallocAsyncCtx4 + 256 | 0; //@line 18154
       HEAP32[$459 >> 2] = $126; //@line 18155
       $460 = $ReallocAsyncCtx4 + 260 | 0; //@line 18156
       HEAP32[$460 >> 2] = $236; //@line 18157
       $461 = $ReallocAsyncCtx4 + 264 | 0; //@line 18158
       HEAP32[$461 >> 2] = $128; //@line 18159
       $462 = $ReallocAsyncCtx4 + 268 | 0; //@line 18160
       HEAP32[$462 >> 2] = $236; //@line 18161
       $463 = $ReallocAsyncCtx4 + 272 | 0; //@line 18162
       HEAP32[$463 >> 2] = $130; //@line 18163
       sp = STACKTOP; //@line 18164
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 18168
     break L6;
     break;
    }
   case 47:
    {
     $465 = HEAP32[$236 >> 2] | 0; //@line 18173
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 18175
     $467 = _sn_coap_parser_options_parse_multiple_options($52, $82, $279, $465 + 48 | 0, $465, 4, $$1202$i) | 0; //@line 18176
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 18179
      $468 = $ReallocAsyncCtx10 + 4 | 0; //@line 18180
      HEAP32[$468 >> 2] = $2; //@line 18181
      $469 = $ReallocAsyncCtx10 + 8 | 0; //@line 18182
      HEAP32[$469 >> 2] = $82; //@line 18183
      $470 = $ReallocAsyncCtx10 + 12 | 0; //@line 18184
      HEAP32[$470 >> 2] = $4; //@line 18185
      $471 = $ReallocAsyncCtx10 + 16 | 0; //@line 18186
      HEAP32[$471 >> 2] = $6; //@line 18187
      $472 = $ReallocAsyncCtx10 + 20 | 0; //@line 18188
      HEAP32[$472 >> 2] = $232; //@line 18189
      $473 = $ReallocAsyncCtx10 + 24 | 0; //@line 18190
      HEAP32[$473 >> 2] = $8; //@line 18191
      $474 = $ReallocAsyncCtx10 + 28 | 0; //@line 18192
      HEAP32[$474 >> 2] = $10; //@line 18193
      $475 = $ReallocAsyncCtx10 + 32 | 0; //@line 18194
      HEAP32[$475 >> 2] = $12; //@line 18195
      $476 = $ReallocAsyncCtx10 + 36 | 0; //@line 18196
      HEAP32[$476 >> 2] = $233; //@line 18197
      $477 = $ReallocAsyncCtx10 + 40 | 0; //@line 18198
      HEAP32[$477 >> 2] = $14; //@line 18199
      $478 = $ReallocAsyncCtx10 + 44 | 0; //@line 18200
      HEAP32[$478 >> 2] = $16; //@line 18201
      $479 = $ReallocAsyncCtx10 + 48 | 0; //@line 18202
      HEAP32[$479 >> 2] = $20; //@line 18203
      $480 = $ReallocAsyncCtx10 + 52 | 0; //@line 18204
      HEAP32[$480 >> 2] = $22; //@line 18205
      $481 = $ReallocAsyncCtx10 + 56 | 0; //@line 18206
      HEAP32[$481 >> 2] = $24; //@line 18207
      $482 = $ReallocAsyncCtx10 + 60 | 0; //@line 18208
      HEAP32[$482 >> 2] = $28; //@line 18209
      $483 = $ReallocAsyncCtx10 + 64 | 0; //@line 18210
      HEAP32[$483 >> 2] = $AsyncRetVal; //@line 18211
      $484 = $ReallocAsyncCtx10 + 68 | 0; //@line 18212
      HEAP32[$484 >> 2] = $30; //@line 18213
      $485 = $ReallocAsyncCtx10 + 72 | 0; //@line 18214
      HEAP32[$485 >> 2] = $32; //@line 18215
      $486 = $ReallocAsyncCtx10 + 76 | 0; //@line 18216
      HEAP32[$486 >> 2] = $34; //@line 18217
      $487 = $ReallocAsyncCtx10 + 80 | 0; //@line 18218
      HEAP32[$487 >> 2] = $$0208$i; //@line 18219
      $488 = $ReallocAsyncCtx10 + 84 | 0; //@line 18220
      HEAP32[$488 >> 2] = $36; //@line 18221
      $489 = $ReallocAsyncCtx10 + 88 | 0; //@line 18222
      HEAP32[$489 >> 2] = $38; //@line 18223
      $490 = $ReallocAsyncCtx10 + 92 | 0; //@line 18224
      HEAP32[$490 >> 2] = $40; //@line 18225
      $491 = $ReallocAsyncCtx10 + 96 | 0; //@line 18226
      HEAP32[$491 >> 2] = $42; //@line 18227
      $492 = $ReallocAsyncCtx10 + 100 | 0; //@line 18228
      HEAP32[$492 >> 2] = $44; //@line 18229
      $493 = $ReallocAsyncCtx10 + 104 | 0; //@line 18230
      HEAP32[$493 >> 2] = $46; //@line 18231
      $494 = $ReallocAsyncCtx10 + 108 | 0; //@line 18232
      HEAP32[$494 >> 2] = $50; //@line 18233
      $495 = $ReallocAsyncCtx10 + 112 | 0; //@line 18234
      HEAP32[$495 >> 2] = $52; //@line 18235
      $496 = $ReallocAsyncCtx10 + 116 | 0; //@line 18236
      HEAP32[$496 >> 2] = $54; //@line 18237
      $497 = $ReallocAsyncCtx10 + 120 | 0; //@line 18238
      HEAP32[$497 >> 2] = $58; //@line 18239
      $498 = $ReallocAsyncCtx10 + 124 | 0; //@line 18240
      HEAP32[$498 >> 2] = $62; //@line 18241
      $499 = $ReallocAsyncCtx10 + 128 | 0; //@line 18242
      HEAP32[$499 >> 2] = $133; //@line 18243
      $500 = $ReallocAsyncCtx10 + 132 | 0; //@line 18244
      HEAP32[$500 >> 2] = $64; //@line 18245
      $501 = $ReallocAsyncCtx10 + 136 | 0; //@line 18246
      HEAP32[$501 >> 2] = $66; //@line 18247
      $502 = $ReallocAsyncCtx10 + 140 | 0; //@line 18248
      HEAP32[$502 >> 2] = $70; //@line 18249
      $503 = $ReallocAsyncCtx10 + 144 | 0; //@line 18250
      HEAP32[$503 >> 2] = $72; //@line 18251
      $504 = $ReallocAsyncCtx10 + 148 | 0; //@line 18252
      HEAP32[$504 >> 2] = $74; //@line 18253
      $505 = $ReallocAsyncCtx10 + 152 | 0; //@line 18254
      HEAP32[$505 >> 2] = $76; //@line 18255
      $506 = $ReallocAsyncCtx10 + 156 | 0; //@line 18256
      HEAP32[$506 >> 2] = $78; //@line 18257
      $507 = $ReallocAsyncCtx10 + 160 | 0; //@line 18258
      HEAP32[$507 >> 2] = $80; //@line 18259
      $508 = $ReallocAsyncCtx10 + 164 | 0; //@line 18260
      HEAP32[$508 >> 2] = $82; //@line 18261
      $509 = $ReallocAsyncCtx10 + 168 | 0; //@line 18262
      HEAP32[$509 >> 2] = $237; //@line 18263
      $510 = $ReallocAsyncCtx10 + 172 | 0; //@line 18264
      HEAP32[$510 >> 2] = $84; //@line 18265
      $511 = $ReallocAsyncCtx10 + 176 | 0; //@line 18266
      HEAP32[$511 >> 2] = $238; //@line 18267
      $512 = $ReallocAsyncCtx10 + 180 | 0; //@line 18268
      HEAP32[$512 >> 2] = $86; //@line 18269
      $513 = $ReallocAsyncCtx10 + 184 | 0; //@line 18270
      HEAP32[$513 >> 2] = $90; //@line 18271
      $514 = $ReallocAsyncCtx10 + 188 | 0; //@line 18272
      HEAP32[$514 >> 2] = $92; //@line 18273
      $515 = $ReallocAsyncCtx10 + 192 | 0; //@line 18274
      HEAP32[$515 >> 2] = $94; //@line 18275
      $516 = $ReallocAsyncCtx10 + 196 | 0; //@line 18276
      HEAP32[$516 >> 2] = $96; //@line 18277
      $517 = $ReallocAsyncCtx10 + 200 | 0; //@line 18278
      HEAP32[$517 >> 2] = $AsyncRetVal; //@line 18279
      $518 = $ReallocAsyncCtx10 + 204 | 0; //@line 18280
      HEAP32[$518 >> 2] = $98; //@line 18281
      $519 = $ReallocAsyncCtx10 + 208 | 0; //@line 18282
      HEAP32[$519 >> 2] = $234; //@line 18283
      $520 = $ReallocAsyncCtx10 + 212 | 0; //@line 18284
      HEAP32[$520 >> 2] = $100; //@line 18285
      $521 = $ReallocAsyncCtx10 + 216 | 0; //@line 18286
      HEAP32[$521 >> 2] = $104; //@line 18287
      $522 = $ReallocAsyncCtx10 + 220 | 0; //@line 18288
      HEAP32[$522 >> 2] = $106; //@line 18289
      $523 = $ReallocAsyncCtx10 + 224 | 0; //@line 18290
      HEAP32[$523 >> 2] = $110; //@line 18291
      $524 = $ReallocAsyncCtx10 + 228 | 0; //@line 18292
      HEAP32[$524 >> 2] = $114; //@line 18293
      $525 = $ReallocAsyncCtx10 + 232 | 0; //@line 18294
      HEAP32[$525 >> 2] = $116; //@line 18295
      $526 = $ReallocAsyncCtx10 + 236 | 0; //@line 18296
      HEAP32[$526 >> 2] = $118; //@line 18297
      $527 = $ReallocAsyncCtx10 + 240 | 0; //@line 18298
      HEAP32[$527 >> 2] = $122; //@line 18299
      $528 = $ReallocAsyncCtx10 + 244 | 0; //@line 18300
      HEAP32[$528 >> 2] = $124; //@line 18301
      $529 = $ReallocAsyncCtx10 + 248 | 0; //@line 18302
      HEAP32[$529 >> 2] = $126; //@line 18303
      $530 = $ReallocAsyncCtx10 + 252 | 0; //@line 18304
      HEAP32[$530 >> 2] = $236; //@line 18305
      $531 = $ReallocAsyncCtx10 + 256 | 0; //@line 18306
      HEAP32[$531 >> 2] = $128; //@line 18307
      $532 = $ReallocAsyncCtx10 + 260 | 0; //@line 18308
      HEAP32[$532 >> 2] = $236; //@line 18309
      $533 = $ReallocAsyncCtx10 + 264 | 0; //@line 18310
      HEAP32[$533 >> 2] = $130; //@line 18311
      sp = STACKTOP; //@line 18312
      return;
     }
     HEAP8[___async_retval >> 0] = $467; //@line 18316
     ___async_unwind = 0; //@line 18317
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 18318
     $468 = $ReallocAsyncCtx10 + 4 | 0; //@line 18319
     HEAP32[$468 >> 2] = $2; //@line 18320
     $469 = $ReallocAsyncCtx10 + 8 | 0; //@line 18321
     HEAP32[$469 >> 2] = $82; //@line 18322
     $470 = $ReallocAsyncCtx10 + 12 | 0; //@line 18323
     HEAP32[$470 >> 2] = $4; //@line 18324
     $471 = $ReallocAsyncCtx10 + 16 | 0; //@line 18325
     HEAP32[$471 >> 2] = $6; //@line 18326
     $472 = $ReallocAsyncCtx10 + 20 | 0; //@line 18327
     HEAP32[$472 >> 2] = $232; //@line 18328
     $473 = $ReallocAsyncCtx10 + 24 | 0; //@line 18329
     HEAP32[$473 >> 2] = $8; //@line 18330
     $474 = $ReallocAsyncCtx10 + 28 | 0; //@line 18331
     HEAP32[$474 >> 2] = $10; //@line 18332
     $475 = $ReallocAsyncCtx10 + 32 | 0; //@line 18333
     HEAP32[$475 >> 2] = $12; //@line 18334
     $476 = $ReallocAsyncCtx10 + 36 | 0; //@line 18335
     HEAP32[$476 >> 2] = $233; //@line 18336
     $477 = $ReallocAsyncCtx10 + 40 | 0; //@line 18337
     HEAP32[$477 >> 2] = $14; //@line 18338
     $478 = $ReallocAsyncCtx10 + 44 | 0; //@line 18339
     HEAP32[$478 >> 2] = $16; //@line 18340
     $479 = $ReallocAsyncCtx10 + 48 | 0; //@line 18341
     HEAP32[$479 >> 2] = $20; //@line 18342
     $480 = $ReallocAsyncCtx10 + 52 | 0; //@line 18343
     HEAP32[$480 >> 2] = $22; //@line 18344
     $481 = $ReallocAsyncCtx10 + 56 | 0; //@line 18345
     HEAP32[$481 >> 2] = $24; //@line 18346
     $482 = $ReallocAsyncCtx10 + 60 | 0; //@line 18347
     HEAP32[$482 >> 2] = $28; //@line 18348
     $483 = $ReallocAsyncCtx10 + 64 | 0; //@line 18349
     HEAP32[$483 >> 2] = $AsyncRetVal; //@line 18350
     $484 = $ReallocAsyncCtx10 + 68 | 0; //@line 18351
     HEAP32[$484 >> 2] = $30; //@line 18352
     $485 = $ReallocAsyncCtx10 + 72 | 0; //@line 18353
     HEAP32[$485 >> 2] = $32; //@line 18354
     $486 = $ReallocAsyncCtx10 + 76 | 0; //@line 18355
     HEAP32[$486 >> 2] = $34; //@line 18356
     $487 = $ReallocAsyncCtx10 + 80 | 0; //@line 18357
     HEAP32[$487 >> 2] = $$0208$i; //@line 18358
     $488 = $ReallocAsyncCtx10 + 84 | 0; //@line 18359
     HEAP32[$488 >> 2] = $36; //@line 18360
     $489 = $ReallocAsyncCtx10 + 88 | 0; //@line 18361
     HEAP32[$489 >> 2] = $38; //@line 18362
     $490 = $ReallocAsyncCtx10 + 92 | 0; //@line 18363
     HEAP32[$490 >> 2] = $40; //@line 18364
     $491 = $ReallocAsyncCtx10 + 96 | 0; //@line 18365
     HEAP32[$491 >> 2] = $42; //@line 18366
     $492 = $ReallocAsyncCtx10 + 100 | 0; //@line 18367
     HEAP32[$492 >> 2] = $44; //@line 18368
     $493 = $ReallocAsyncCtx10 + 104 | 0; //@line 18369
     HEAP32[$493 >> 2] = $46; //@line 18370
     $494 = $ReallocAsyncCtx10 + 108 | 0; //@line 18371
     HEAP32[$494 >> 2] = $50; //@line 18372
     $495 = $ReallocAsyncCtx10 + 112 | 0; //@line 18373
     HEAP32[$495 >> 2] = $52; //@line 18374
     $496 = $ReallocAsyncCtx10 + 116 | 0; //@line 18375
     HEAP32[$496 >> 2] = $54; //@line 18376
     $497 = $ReallocAsyncCtx10 + 120 | 0; //@line 18377
     HEAP32[$497 >> 2] = $58; //@line 18378
     $498 = $ReallocAsyncCtx10 + 124 | 0; //@line 18379
     HEAP32[$498 >> 2] = $62; //@line 18380
     $499 = $ReallocAsyncCtx10 + 128 | 0; //@line 18381
     HEAP32[$499 >> 2] = $133; //@line 18382
     $500 = $ReallocAsyncCtx10 + 132 | 0; //@line 18383
     HEAP32[$500 >> 2] = $64; //@line 18384
     $501 = $ReallocAsyncCtx10 + 136 | 0; //@line 18385
     HEAP32[$501 >> 2] = $66; //@line 18386
     $502 = $ReallocAsyncCtx10 + 140 | 0; //@line 18387
     HEAP32[$502 >> 2] = $70; //@line 18388
     $503 = $ReallocAsyncCtx10 + 144 | 0; //@line 18389
     HEAP32[$503 >> 2] = $72; //@line 18390
     $504 = $ReallocAsyncCtx10 + 148 | 0; //@line 18391
     HEAP32[$504 >> 2] = $74; //@line 18392
     $505 = $ReallocAsyncCtx10 + 152 | 0; //@line 18393
     HEAP32[$505 >> 2] = $76; //@line 18394
     $506 = $ReallocAsyncCtx10 + 156 | 0; //@line 18395
     HEAP32[$506 >> 2] = $78; //@line 18396
     $507 = $ReallocAsyncCtx10 + 160 | 0; //@line 18397
     HEAP32[$507 >> 2] = $80; //@line 18398
     $508 = $ReallocAsyncCtx10 + 164 | 0; //@line 18399
     HEAP32[$508 >> 2] = $82; //@line 18400
     $509 = $ReallocAsyncCtx10 + 168 | 0; //@line 18401
     HEAP32[$509 >> 2] = $237; //@line 18402
     $510 = $ReallocAsyncCtx10 + 172 | 0; //@line 18403
     HEAP32[$510 >> 2] = $84; //@line 18404
     $511 = $ReallocAsyncCtx10 + 176 | 0; //@line 18405
     HEAP32[$511 >> 2] = $238; //@line 18406
     $512 = $ReallocAsyncCtx10 + 180 | 0; //@line 18407
     HEAP32[$512 >> 2] = $86; //@line 18408
     $513 = $ReallocAsyncCtx10 + 184 | 0; //@line 18409
     HEAP32[$513 >> 2] = $90; //@line 18410
     $514 = $ReallocAsyncCtx10 + 188 | 0; //@line 18411
     HEAP32[$514 >> 2] = $92; //@line 18412
     $515 = $ReallocAsyncCtx10 + 192 | 0; //@line 18413
     HEAP32[$515 >> 2] = $94; //@line 18414
     $516 = $ReallocAsyncCtx10 + 196 | 0; //@line 18415
     HEAP32[$516 >> 2] = $96; //@line 18416
     $517 = $ReallocAsyncCtx10 + 200 | 0; //@line 18417
     HEAP32[$517 >> 2] = $AsyncRetVal; //@line 18418
     $518 = $ReallocAsyncCtx10 + 204 | 0; //@line 18419
     HEAP32[$518 >> 2] = $98; //@line 18420
     $519 = $ReallocAsyncCtx10 + 208 | 0; //@line 18421
     HEAP32[$519 >> 2] = $234; //@line 18422
     $520 = $ReallocAsyncCtx10 + 212 | 0; //@line 18423
     HEAP32[$520 >> 2] = $100; //@line 18424
     $521 = $ReallocAsyncCtx10 + 216 | 0; //@line 18425
     HEAP32[$521 >> 2] = $104; //@line 18426
     $522 = $ReallocAsyncCtx10 + 220 | 0; //@line 18427
     HEAP32[$522 >> 2] = $106; //@line 18428
     $523 = $ReallocAsyncCtx10 + 224 | 0; //@line 18429
     HEAP32[$523 >> 2] = $110; //@line 18430
     $524 = $ReallocAsyncCtx10 + 228 | 0; //@line 18431
     HEAP32[$524 >> 2] = $114; //@line 18432
     $525 = $ReallocAsyncCtx10 + 232 | 0; //@line 18433
     HEAP32[$525 >> 2] = $116; //@line 18434
     $526 = $ReallocAsyncCtx10 + 236 | 0; //@line 18435
     HEAP32[$526 >> 2] = $118; //@line 18436
     $527 = $ReallocAsyncCtx10 + 240 | 0; //@line 18437
     HEAP32[$527 >> 2] = $122; //@line 18438
     $528 = $ReallocAsyncCtx10 + 244 | 0; //@line 18439
     HEAP32[$528 >> 2] = $124; //@line 18440
     $529 = $ReallocAsyncCtx10 + 248 | 0; //@line 18441
     HEAP32[$529 >> 2] = $126; //@line 18442
     $530 = $ReallocAsyncCtx10 + 252 | 0; //@line 18443
     HEAP32[$530 >> 2] = $236; //@line 18444
     $531 = $ReallocAsyncCtx10 + 256 | 0; //@line 18445
     HEAP32[$531 >> 2] = $128; //@line 18446
     $532 = $ReallocAsyncCtx10 + 260 | 0; //@line 18447
     HEAP32[$532 >> 2] = $236; //@line 18448
     $533 = $ReallocAsyncCtx10 + 264 | 0; //@line 18449
     HEAP32[$533 >> 2] = $130; //@line 18450
     sp = STACKTOP; //@line 18451
     return;
    }
   case 50:
    {
     $535 = $$1202$in$i & 65535; //@line 18456
     if (($$1202$i + -1 & 65535) <= 254) {
      $538 = HEAP32[$236 >> 2] | 0; //@line 18460
      if (!(HEAP32[$538 + 52 >> 2] | 0)) {
       HEAP16[$538 + 4 >> 1] = $$1202$i; //@line 18466
       $543 = $319 + 1 | 0; //@line 18467
       HEAP32[$82 >> 2] = $543; //@line 18468
       $544 = HEAP32[$122 >> 2] | 0; //@line 18469
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 18470
       $545 = FUNCTION_TABLE_ii[$544 & 15]($$1202$i) | 0; //@line 18471
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 18474
        $546 = $ReallocAsyncCtx5 + 4 | 0; //@line 18475
        HEAP32[$546 >> 2] = $2; //@line 18476
        $547 = $ReallocAsyncCtx5 + 8 | 0; //@line 18477
        HEAP32[$547 >> 2] = $82; //@line 18478
        $548 = $ReallocAsyncCtx5 + 12 | 0; //@line 18479
        HEAP32[$548 >> 2] = $4; //@line 18480
        $549 = $ReallocAsyncCtx5 + 16 | 0; //@line 18481
        HEAP32[$549 >> 2] = $6; //@line 18482
        $550 = $ReallocAsyncCtx5 + 20 | 0; //@line 18483
        HEAP32[$550 >> 2] = $232; //@line 18484
        $551 = $ReallocAsyncCtx5 + 24 | 0; //@line 18485
        HEAP32[$551 >> 2] = $8; //@line 18486
        $552 = $ReallocAsyncCtx5 + 28 | 0; //@line 18487
        HEAP32[$552 >> 2] = $10; //@line 18488
        $553 = $ReallocAsyncCtx5 + 32 | 0; //@line 18489
        HEAP32[$553 >> 2] = $12; //@line 18490
        $554 = $ReallocAsyncCtx5 + 36 | 0; //@line 18491
        HEAP32[$554 >> 2] = $233; //@line 18492
        $555 = $ReallocAsyncCtx5 + 40 | 0; //@line 18493
        HEAP32[$555 >> 2] = $14; //@line 18494
        $556 = $ReallocAsyncCtx5 + 44 | 0; //@line 18495
        HEAP32[$556 >> 2] = $16; //@line 18496
        $557 = $ReallocAsyncCtx5 + 48 | 0; //@line 18497
        HEAP32[$557 >> 2] = $20; //@line 18498
        $558 = $ReallocAsyncCtx5 + 52 | 0; //@line 18499
        HEAP32[$558 >> 2] = $22; //@line 18500
        $559 = $ReallocAsyncCtx5 + 56 | 0; //@line 18501
        HEAP32[$559 >> 2] = $24; //@line 18502
        $560 = $ReallocAsyncCtx5 + 60 | 0; //@line 18503
        HEAP32[$560 >> 2] = $28; //@line 18504
        $561 = $ReallocAsyncCtx5 + 64 | 0; //@line 18505
        HEAP32[$561 >> 2] = $AsyncRetVal; //@line 18506
        $562 = $ReallocAsyncCtx5 + 68 | 0; //@line 18507
        HEAP32[$562 >> 2] = $30; //@line 18508
        $563 = $ReallocAsyncCtx5 + 72 | 0; //@line 18509
        HEAP32[$563 >> 2] = $32; //@line 18510
        $564 = $ReallocAsyncCtx5 + 76 | 0; //@line 18511
        HEAP32[$564 >> 2] = $34; //@line 18512
        $565 = $ReallocAsyncCtx5 + 80 | 0; //@line 18513
        HEAP32[$565 >> 2] = $$0208$i; //@line 18514
        $566 = $ReallocAsyncCtx5 + 84 | 0; //@line 18515
        HEAP32[$566 >> 2] = $36; //@line 18516
        $567 = $ReallocAsyncCtx5 + 88 | 0; //@line 18517
        HEAP32[$567 >> 2] = $38; //@line 18518
        $568 = $ReallocAsyncCtx5 + 92 | 0; //@line 18519
        HEAP32[$568 >> 2] = $40; //@line 18520
        $569 = $ReallocAsyncCtx5 + 96 | 0; //@line 18521
        HEAP32[$569 >> 2] = $42; //@line 18522
        $570 = $ReallocAsyncCtx5 + 100 | 0; //@line 18523
        HEAP32[$570 >> 2] = $44; //@line 18524
        $571 = $ReallocAsyncCtx5 + 104 | 0; //@line 18525
        HEAP32[$571 >> 2] = $46; //@line 18526
        $572 = $ReallocAsyncCtx5 + 108 | 0; //@line 18527
        HEAP32[$572 >> 2] = $50; //@line 18528
        $573 = $ReallocAsyncCtx5 + 112 | 0; //@line 18529
        HEAP32[$573 >> 2] = $52; //@line 18530
        $574 = $ReallocAsyncCtx5 + 116 | 0; //@line 18531
        HEAP32[$574 >> 2] = $54; //@line 18532
        $575 = $ReallocAsyncCtx5 + 120 | 0; //@line 18533
        HEAP32[$575 >> 2] = $58; //@line 18534
        $576 = $ReallocAsyncCtx5 + 124 | 0; //@line 18535
        HEAP32[$576 >> 2] = $62; //@line 18536
        $577 = $ReallocAsyncCtx5 + 128 | 0; //@line 18537
        HEAP32[$577 >> 2] = $133; //@line 18538
        $578 = $ReallocAsyncCtx5 + 132 | 0; //@line 18539
        HEAP32[$578 >> 2] = $64; //@line 18540
        $579 = $ReallocAsyncCtx5 + 136 | 0; //@line 18541
        HEAP32[$579 >> 2] = $66; //@line 18542
        $580 = $ReallocAsyncCtx5 + 140 | 0; //@line 18543
        HEAP32[$580 >> 2] = $70; //@line 18544
        $581 = $ReallocAsyncCtx5 + 144 | 0; //@line 18545
        HEAP32[$581 >> 2] = $72; //@line 18546
        $582 = $ReallocAsyncCtx5 + 148 | 0; //@line 18547
        HEAP32[$582 >> 2] = $74; //@line 18548
        $583 = $ReallocAsyncCtx5 + 152 | 0; //@line 18549
        HEAP32[$583 >> 2] = $76; //@line 18550
        $584 = $ReallocAsyncCtx5 + 156 | 0; //@line 18551
        HEAP32[$584 >> 2] = $78; //@line 18552
        $585 = $ReallocAsyncCtx5 + 160 | 0; //@line 18553
        HEAP32[$585 >> 2] = $80; //@line 18554
        $586 = $ReallocAsyncCtx5 + 164 | 0; //@line 18555
        HEAP32[$586 >> 2] = $82; //@line 18556
        $587 = $ReallocAsyncCtx5 + 168 | 0; //@line 18557
        HEAP32[$587 >> 2] = $237; //@line 18558
        $588 = $ReallocAsyncCtx5 + 172 | 0; //@line 18559
        HEAP32[$588 >> 2] = $84; //@line 18560
        $589 = $ReallocAsyncCtx5 + 176 | 0; //@line 18561
        HEAP32[$589 >> 2] = $238; //@line 18562
        $590 = $ReallocAsyncCtx5 + 180 | 0; //@line 18563
        HEAP32[$590 >> 2] = $86; //@line 18564
        $591 = $ReallocAsyncCtx5 + 184 | 0; //@line 18565
        HEAP32[$591 >> 2] = $90; //@line 18566
        $592 = $ReallocAsyncCtx5 + 188 | 0; //@line 18567
        HEAP32[$592 >> 2] = $92; //@line 18568
        $593 = $ReallocAsyncCtx5 + 192 | 0; //@line 18569
        HEAP32[$593 >> 2] = $94; //@line 18570
        $594 = $ReallocAsyncCtx5 + 196 | 0; //@line 18571
        HEAP32[$594 >> 2] = $96; //@line 18572
        $595 = $ReallocAsyncCtx5 + 200 | 0; //@line 18573
        HEAP32[$595 >> 2] = $AsyncRetVal; //@line 18574
        $596 = $ReallocAsyncCtx5 + 204 | 0; //@line 18575
        HEAP32[$596 >> 2] = $98; //@line 18576
        $597 = $ReallocAsyncCtx5 + 208 | 0; //@line 18577
        HEAP32[$597 >> 2] = $234; //@line 18578
        $598 = $ReallocAsyncCtx5 + 212 | 0; //@line 18579
        HEAP32[$598 >> 2] = $100; //@line 18580
        $599 = $ReallocAsyncCtx5 + 216 | 0; //@line 18581
        HEAP32[$599 >> 2] = $104; //@line 18582
        $600 = $ReallocAsyncCtx5 + 220 | 0; //@line 18583
        HEAP32[$600 >> 2] = $106; //@line 18584
        $601 = $ReallocAsyncCtx5 + 224 | 0; //@line 18585
        HEAP32[$601 >> 2] = $110; //@line 18586
        $602 = $ReallocAsyncCtx5 + 228 | 0; //@line 18587
        HEAP32[$602 >> 2] = $114; //@line 18588
        $603 = $ReallocAsyncCtx5 + 232 | 0; //@line 18589
        HEAP32[$603 >> 2] = $116; //@line 18590
        $604 = $ReallocAsyncCtx5 + 236 | 0; //@line 18591
        HEAP32[$604 >> 2] = $543; //@line 18592
        $605 = $ReallocAsyncCtx5 + 240 | 0; //@line 18593
        HEAP32[$605 >> 2] = $118; //@line 18594
        $606 = $ReallocAsyncCtx5 + 244 | 0; //@line 18595
        HEAP32[$606 >> 2] = $535; //@line 18596
        $607 = $ReallocAsyncCtx5 + 248 | 0; //@line 18597
        HEAP32[$607 >> 2] = $122; //@line 18598
        $608 = $ReallocAsyncCtx5 + 252 | 0; //@line 18599
        HEAP32[$608 >> 2] = $124; //@line 18600
        $609 = $ReallocAsyncCtx5 + 256 | 0; //@line 18601
        HEAP32[$609 >> 2] = $126; //@line 18602
        $610 = $ReallocAsyncCtx5 + 260 | 0; //@line 18603
        HEAP32[$610 >> 2] = $236; //@line 18604
        $611 = $ReallocAsyncCtx5 + 264 | 0; //@line 18605
        HEAP32[$611 >> 2] = $128; //@line 18606
        $612 = $ReallocAsyncCtx5 + 268 | 0; //@line 18607
        HEAP32[$612 >> 2] = $236; //@line 18608
        $613 = $ReallocAsyncCtx5 + 272 | 0; //@line 18609
        HEAP32[$613 >> 2] = $130; //@line 18610
        sp = STACKTOP; //@line 18611
        return;
       }
       HEAP32[___async_retval >> 2] = $545; //@line 18615
       ___async_unwind = 0; //@line 18616
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 18617
       $546 = $ReallocAsyncCtx5 + 4 | 0; //@line 18618
       HEAP32[$546 >> 2] = $2; //@line 18619
       $547 = $ReallocAsyncCtx5 + 8 | 0; //@line 18620
       HEAP32[$547 >> 2] = $82; //@line 18621
       $548 = $ReallocAsyncCtx5 + 12 | 0; //@line 18622
       HEAP32[$548 >> 2] = $4; //@line 18623
       $549 = $ReallocAsyncCtx5 + 16 | 0; //@line 18624
       HEAP32[$549 >> 2] = $6; //@line 18625
       $550 = $ReallocAsyncCtx5 + 20 | 0; //@line 18626
       HEAP32[$550 >> 2] = $232; //@line 18627
       $551 = $ReallocAsyncCtx5 + 24 | 0; //@line 18628
       HEAP32[$551 >> 2] = $8; //@line 18629
       $552 = $ReallocAsyncCtx5 + 28 | 0; //@line 18630
       HEAP32[$552 >> 2] = $10; //@line 18631
       $553 = $ReallocAsyncCtx5 + 32 | 0; //@line 18632
       HEAP32[$553 >> 2] = $12; //@line 18633
       $554 = $ReallocAsyncCtx5 + 36 | 0; //@line 18634
       HEAP32[$554 >> 2] = $233; //@line 18635
       $555 = $ReallocAsyncCtx5 + 40 | 0; //@line 18636
       HEAP32[$555 >> 2] = $14; //@line 18637
       $556 = $ReallocAsyncCtx5 + 44 | 0; //@line 18638
       HEAP32[$556 >> 2] = $16; //@line 18639
       $557 = $ReallocAsyncCtx5 + 48 | 0; //@line 18640
       HEAP32[$557 >> 2] = $20; //@line 18641
       $558 = $ReallocAsyncCtx5 + 52 | 0; //@line 18642
       HEAP32[$558 >> 2] = $22; //@line 18643
       $559 = $ReallocAsyncCtx5 + 56 | 0; //@line 18644
       HEAP32[$559 >> 2] = $24; //@line 18645
       $560 = $ReallocAsyncCtx5 + 60 | 0; //@line 18646
       HEAP32[$560 >> 2] = $28; //@line 18647
       $561 = $ReallocAsyncCtx5 + 64 | 0; //@line 18648
       HEAP32[$561 >> 2] = $AsyncRetVal; //@line 18649
       $562 = $ReallocAsyncCtx5 + 68 | 0; //@line 18650
       HEAP32[$562 >> 2] = $30; //@line 18651
       $563 = $ReallocAsyncCtx5 + 72 | 0; //@line 18652
       HEAP32[$563 >> 2] = $32; //@line 18653
       $564 = $ReallocAsyncCtx5 + 76 | 0; //@line 18654
       HEAP32[$564 >> 2] = $34; //@line 18655
       $565 = $ReallocAsyncCtx5 + 80 | 0; //@line 18656
       HEAP32[$565 >> 2] = $$0208$i; //@line 18657
       $566 = $ReallocAsyncCtx5 + 84 | 0; //@line 18658
       HEAP32[$566 >> 2] = $36; //@line 18659
       $567 = $ReallocAsyncCtx5 + 88 | 0; //@line 18660
       HEAP32[$567 >> 2] = $38; //@line 18661
       $568 = $ReallocAsyncCtx5 + 92 | 0; //@line 18662
       HEAP32[$568 >> 2] = $40; //@line 18663
       $569 = $ReallocAsyncCtx5 + 96 | 0; //@line 18664
       HEAP32[$569 >> 2] = $42; //@line 18665
       $570 = $ReallocAsyncCtx5 + 100 | 0; //@line 18666
       HEAP32[$570 >> 2] = $44; //@line 18667
       $571 = $ReallocAsyncCtx5 + 104 | 0; //@line 18668
       HEAP32[$571 >> 2] = $46; //@line 18669
       $572 = $ReallocAsyncCtx5 + 108 | 0; //@line 18670
       HEAP32[$572 >> 2] = $50; //@line 18671
       $573 = $ReallocAsyncCtx5 + 112 | 0; //@line 18672
       HEAP32[$573 >> 2] = $52; //@line 18673
       $574 = $ReallocAsyncCtx5 + 116 | 0; //@line 18674
       HEAP32[$574 >> 2] = $54; //@line 18675
       $575 = $ReallocAsyncCtx5 + 120 | 0; //@line 18676
       HEAP32[$575 >> 2] = $58; //@line 18677
       $576 = $ReallocAsyncCtx5 + 124 | 0; //@line 18678
       HEAP32[$576 >> 2] = $62; //@line 18679
       $577 = $ReallocAsyncCtx5 + 128 | 0; //@line 18680
       HEAP32[$577 >> 2] = $133; //@line 18681
       $578 = $ReallocAsyncCtx5 + 132 | 0; //@line 18682
       HEAP32[$578 >> 2] = $64; //@line 18683
       $579 = $ReallocAsyncCtx5 + 136 | 0; //@line 18684
       HEAP32[$579 >> 2] = $66; //@line 18685
       $580 = $ReallocAsyncCtx5 + 140 | 0; //@line 18686
       HEAP32[$580 >> 2] = $70; //@line 18687
       $581 = $ReallocAsyncCtx5 + 144 | 0; //@line 18688
       HEAP32[$581 >> 2] = $72; //@line 18689
       $582 = $ReallocAsyncCtx5 + 148 | 0; //@line 18690
       HEAP32[$582 >> 2] = $74; //@line 18691
       $583 = $ReallocAsyncCtx5 + 152 | 0; //@line 18692
       HEAP32[$583 >> 2] = $76; //@line 18693
       $584 = $ReallocAsyncCtx5 + 156 | 0; //@line 18694
       HEAP32[$584 >> 2] = $78; //@line 18695
       $585 = $ReallocAsyncCtx5 + 160 | 0; //@line 18696
       HEAP32[$585 >> 2] = $80; //@line 18697
       $586 = $ReallocAsyncCtx5 + 164 | 0; //@line 18698
       HEAP32[$586 >> 2] = $82; //@line 18699
       $587 = $ReallocAsyncCtx5 + 168 | 0; //@line 18700
       HEAP32[$587 >> 2] = $237; //@line 18701
       $588 = $ReallocAsyncCtx5 + 172 | 0; //@line 18702
       HEAP32[$588 >> 2] = $84; //@line 18703
       $589 = $ReallocAsyncCtx5 + 176 | 0; //@line 18704
       HEAP32[$589 >> 2] = $238; //@line 18705
       $590 = $ReallocAsyncCtx5 + 180 | 0; //@line 18706
       HEAP32[$590 >> 2] = $86; //@line 18707
       $591 = $ReallocAsyncCtx5 + 184 | 0; //@line 18708
       HEAP32[$591 >> 2] = $90; //@line 18709
       $592 = $ReallocAsyncCtx5 + 188 | 0; //@line 18710
       HEAP32[$592 >> 2] = $92; //@line 18711
       $593 = $ReallocAsyncCtx5 + 192 | 0; //@line 18712
       HEAP32[$593 >> 2] = $94; //@line 18713
       $594 = $ReallocAsyncCtx5 + 196 | 0; //@line 18714
       HEAP32[$594 >> 2] = $96; //@line 18715
       $595 = $ReallocAsyncCtx5 + 200 | 0; //@line 18716
       HEAP32[$595 >> 2] = $AsyncRetVal; //@line 18717
       $596 = $ReallocAsyncCtx5 + 204 | 0; //@line 18718
       HEAP32[$596 >> 2] = $98; //@line 18719
       $597 = $ReallocAsyncCtx5 + 208 | 0; //@line 18720
       HEAP32[$597 >> 2] = $234; //@line 18721
       $598 = $ReallocAsyncCtx5 + 212 | 0; //@line 18722
       HEAP32[$598 >> 2] = $100; //@line 18723
       $599 = $ReallocAsyncCtx5 + 216 | 0; //@line 18724
       HEAP32[$599 >> 2] = $104; //@line 18725
       $600 = $ReallocAsyncCtx5 + 220 | 0; //@line 18726
       HEAP32[$600 >> 2] = $106; //@line 18727
       $601 = $ReallocAsyncCtx5 + 224 | 0; //@line 18728
       HEAP32[$601 >> 2] = $110; //@line 18729
       $602 = $ReallocAsyncCtx5 + 228 | 0; //@line 18730
       HEAP32[$602 >> 2] = $114; //@line 18731
       $603 = $ReallocAsyncCtx5 + 232 | 0; //@line 18732
       HEAP32[$603 >> 2] = $116; //@line 18733
       $604 = $ReallocAsyncCtx5 + 236 | 0; //@line 18734
       HEAP32[$604 >> 2] = $543; //@line 18735
       $605 = $ReallocAsyncCtx5 + 240 | 0; //@line 18736
       HEAP32[$605 >> 2] = $118; //@line 18737
       $606 = $ReallocAsyncCtx5 + 244 | 0; //@line 18738
       HEAP32[$606 >> 2] = $535; //@line 18739
       $607 = $ReallocAsyncCtx5 + 248 | 0; //@line 18740
       HEAP32[$607 >> 2] = $122; //@line 18741
       $608 = $ReallocAsyncCtx5 + 252 | 0; //@line 18742
       HEAP32[$608 >> 2] = $124; //@line 18743
       $609 = $ReallocAsyncCtx5 + 256 | 0; //@line 18744
       HEAP32[$609 >> 2] = $126; //@line 18745
       $610 = $ReallocAsyncCtx5 + 260 | 0; //@line 18746
       HEAP32[$610 >> 2] = $236; //@line 18747
       $611 = $ReallocAsyncCtx5 + 264 | 0; //@line 18748
       HEAP32[$611 >> 2] = $128; //@line 18749
       $612 = $ReallocAsyncCtx5 + 268 | 0; //@line 18750
       HEAP32[$612 >> 2] = $236; //@line 18751
       $613 = $ReallocAsyncCtx5 + 272 | 0; //@line 18752
       HEAP32[$613 >> 2] = $130; //@line 18753
       sp = STACKTOP; //@line 18754
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $92); //@line 18758
     break L6;
     break;
    }
   case 56:
    {
     $615 = HEAP32[$236 >> 2] | 0; //@line 18763
     $616 = $615 + 56 | 0; //@line 18764
     if (HEAP32[$616 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $58); //@line 18768
      break L6;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 18772
     $620 = _sn_coap_parser_options_parse_multiple_options($52, $82, $279, $616, $615 + 6 | 0, 8, $$1202$i) | 0; //@line 18773
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 18776
      $621 = $ReallocAsyncCtx9 + 4 | 0; //@line 18777
      HEAP32[$621 >> 2] = $2; //@line 18778
      $622 = $ReallocAsyncCtx9 + 8 | 0; //@line 18779
      HEAP32[$622 >> 2] = $82; //@line 18780
      $623 = $ReallocAsyncCtx9 + 12 | 0; //@line 18781
      HEAP32[$623 >> 2] = $4; //@line 18782
      $624 = $ReallocAsyncCtx9 + 16 | 0; //@line 18783
      HEAP32[$624 >> 2] = $6; //@line 18784
      $625 = $ReallocAsyncCtx9 + 20 | 0; //@line 18785
      HEAP32[$625 >> 2] = $232; //@line 18786
      $626 = $ReallocAsyncCtx9 + 24 | 0; //@line 18787
      HEAP32[$626 >> 2] = $8; //@line 18788
      $627 = $ReallocAsyncCtx9 + 28 | 0; //@line 18789
      HEAP32[$627 >> 2] = $10; //@line 18790
      $628 = $ReallocAsyncCtx9 + 32 | 0; //@line 18791
      HEAP32[$628 >> 2] = $12; //@line 18792
      $629 = $ReallocAsyncCtx9 + 36 | 0; //@line 18793
      HEAP32[$629 >> 2] = $233; //@line 18794
      $630 = $ReallocAsyncCtx9 + 40 | 0; //@line 18795
      HEAP32[$630 >> 2] = $14; //@line 18796
      $631 = $ReallocAsyncCtx9 + 44 | 0; //@line 18797
      HEAP32[$631 >> 2] = $16; //@line 18798
      $632 = $ReallocAsyncCtx9 + 48 | 0; //@line 18799
      HEAP32[$632 >> 2] = $20; //@line 18800
      $633 = $ReallocAsyncCtx9 + 52 | 0; //@line 18801
      HEAP32[$633 >> 2] = $22; //@line 18802
      $634 = $ReallocAsyncCtx9 + 56 | 0; //@line 18803
      HEAP32[$634 >> 2] = $24; //@line 18804
      $635 = $ReallocAsyncCtx9 + 60 | 0; //@line 18805
      HEAP32[$635 >> 2] = $28; //@line 18806
      $636 = $ReallocAsyncCtx9 + 64 | 0; //@line 18807
      HEAP32[$636 >> 2] = $AsyncRetVal; //@line 18808
      $637 = $ReallocAsyncCtx9 + 68 | 0; //@line 18809
      HEAP32[$637 >> 2] = $30; //@line 18810
      $638 = $ReallocAsyncCtx9 + 72 | 0; //@line 18811
      HEAP32[$638 >> 2] = $32; //@line 18812
      $639 = $ReallocAsyncCtx9 + 76 | 0; //@line 18813
      HEAP32[$639 >> 2] = $34; //@line 18814
      $640 = $ReallocAsyncCtx9 + 80 | 0; //@line 18815
      HEAP32[$640 >> 2] = $$0208$i; //@line 18816
      $641 = $ReallocAsyncCtx9 + 84 | 0; //@line 18817
      HEAP32[$641 >> 2] = $36; //@line 18818
      $642 = $ReallocAsyncCtx9 + 88 | 0; //@line 18819
      HEAP32[$642 >> 2] = $38; //@line 18820
      $643 = $ReallocAsyncCtx9 + 92 | 0; //@line 18821
      HEAP32[$643 >> 2] = $40; //@line 18822
      $644 = $ReallocAsyncCtx9 + 96 | 0; //@line 18823
      HEAP32[$644 >> 2] = $42; //@line 18824
      $645 = $ReallocAsyncCtx9 + 100 | 0; //@line 18825
      HEAP32[$645 >> 2] = $44; //@line 18826
      $646 = $ReallocAsyncCtx9 + 104 | 0; //@line 18827
      HEAP32[$646 >> 2] = $46; //@line 18828
      $647 = $ReallocAsyncCtx9 + 108 | 0; //@line 18829
      HEAP32[$647 >> 2] = $50; //@line 18830
      $648 = $ReallocAsyncCtx9 + 112 | 0; //@line 18831
      HEAP32[$648 >> 2] = $52; //@line 18832
      $649 = $ReallocAsyncCtx9 + 116 | 0; //@line 18833
      HEAP32[$649 >> 2] = $54; //@line 18834
      $650 = $ReallocAsyncCtx9 + 120 | 0; //@line 18835
      HEAP32[$650 >> 2] = $58; //@line 18836
      $651 = $ReallocAsyncCtx9 + 124 | 0; //@line 18837
      HEAP32[$651 >> 2] = $62; //@line 18838
      $652 = $ReallocAsyncCtx9 + 128 | 0; //@line 18839
      HEAP32[$652 >> 2] = $133; //@line 18840
      $653 = $ReallocAsyncCtx9 + 132 | 0; //@line 18841
      HEAP32[$653 >> 2] = $64; //@line 18842
      $654 = $ReallocAsyncCtx9 + 136 | 0; //@line 18843
      HEAP32[$654 >> 2] = $66; //@line 18844
      $655 = $ReallocAsyncCtx9 + 140 | 0; //@line 18845
      HEAP32[$655 >> 2] = $70; //@line 18846
      $656 = $ReallocAsyncCtx9 + 144 | 0; //@line 18847
      HEAP32[$656 >> 2] = $72; //@line 18848
      $657 = $ReallocAsyncCtx9 + 148 | 0; //@line 18849
      HEAP32[$657 >> 2] = $74; //@line 18850
      $658 = $ReallocAsyncCtx9 + 152 | 0; //@line 18851
      HEAP32[$658 >> 2] = $76; //@line 18852
      $659 = $ReallocAsyncCtx9 + 156 | 0; //@line 18853
      HEAP32[$659 >> 2] = $78; //@line 18854
      $660 = $ReallocAsyncCtx9 + 160 | 0; //@line 18855
      HEAP32[$660 >> 2] = $80; //@line 18856
      $661 = $ReallocAsyncCtx9 + 164 | 0; //@line 18857
      HEAP32[$661 >> 2] = $82; //@line 18858
      $662 = $ReallocAsyncCtx9 + 168 | 0; //@line 18859
      HEAP32[$662 >> 2] = $237; //@line 18860
      $663 = $ReallocAsyncCtx9 + 172 | 0; //@line 18861
      HEAP32[$663 >> 2] = $84; //@line 18862
      $664 = $ReallocAsyncCtx9 + 176 | 0; //@line 18863
      HEAP32[$664 >> 2] = $238; //@line 18864
      $665 = $ReallocAsyncCtx9 + 180 | 0; //@line 18865
      HEAP32[$665 >> 2] = $86; //@line 18866
      $666 = $ReallocAsyncCtx9 + 184 | 0; //@line 18867
      HEAP32[$666 >> 2] = $90; //@line 18868
      $667 = $ReallocAsyncCtx9 + 188 | 0; //@line 18869
      HEAP32[$667 >> 2] = $92; //@line 18870
      $668 = $ReallocAsyncCtx9 + 192 | 0; //@line 18871
      HEAP32[$668 >> 2] = $94; //@line 18872
      $669 = $ReallocAsyncCtx9 + 196 | 0; //@line 18873
      HEAP32[$669 >> 2] = $96; //@line 18874
      $670 = $ReallocAsyncCtx9 + 200 | 0; //@line 18875
      HEAP32[$670 >> 2] = $AsyncRetVal; //@line 18876
      $671 = $ReallocAsyncCtx9 + 204 | 0; //@line 18877
      HEAP32[$671 >> 2] = $98; //@line 18878
      $672 = $ReallocAsyncCtx9 + 208 | 0; //@line 18879
      HEAP32[$672 >> 2] = $234; //@line 18880
      $673 = $ReallocAsyncCtx9 + 212 | 0; //@line 18881
      HEAP32[$673 >> 2] = $100; //@line 18882
      $674 = $ReallocAsyncCtx9 + 216 | 0; //@line 18883
      HEAP32[$674 >> 2] = $104; //@line 18884
      $675 = $ReallocAsyncCtx9 + 220 | 0; //@line 18885
      HEAP32[$675 >> 2] = $106; //@line 18886
      $676 = $ReallocAsyncCtx9 + 224 | 0; //@line 18887
      HEAP32[$676 >> 2] = $110; //@line 18888
      $677 = $ReallocAsyncCtx9 + 228 | 0; //@line 18889
      HEAP32[$677 >> 2] = $114; //@line 18890
      $678 = $ReallocAsyncCtx9 + 232 | 0; //@line 18891
      HEAP32[$678 >> 2] = $116; //@line 18892
      $679 = $ReallocAsyncCtx9 + 236 | 0; //@line 18893
      HEAP32[$679 >> 2] = $118; //@line 18894
      $680 = $ReallocAsyncCtx9 + 240 | 0; //@line 18895
      HEAP32[$680 >> 2] = $122; //@line 18896
      $681 = $ReallocAsyncCtx9 + 244 | 0; //@line 18897
      HEAP32[$681 >> 2] = $124; //@line 18898
      $682 = $ReallocAsyncCtx9 + 248 | 0; //@line 18899
      HEAP32[$682 >> 2] = $126; //@line 18900
      $683 = $ReallocAsyncCtx9 + 252 | 0; //@line 18901
      HEAP32[$683 >> 2] = $236; //@line 18902
      $684 = $ReallocAsyncCtx9 + 256 | 0; //@line 18903
      HEAP32[$684 >> 2] = $128; //@line 18904
      $685 = $ReallocAsyncCtx9 + 260 | 0; //@line 18905
      HEAP32[$685 >> 2] = $236; //@line 18906
      $686 = $ReallocAsyncCtx9 + 264 | 0; //@line 18907
      HEAP32[$686 >> 2] = $130; //@line 18908
      sp = STACKTOP; //@line 18909
      return;
     }
     HEAP8[___async_retval >> 0] = $620; //@line 18913
     ___async_unwind = 0; //@line 18914
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 18915
     $621 = $ReallocAsyncCtx9 + 4 | 0; //@line 18916
     HEAP32[$621 >> 2] = $2; //@line 18917
     $622 = $ReallocAsyncCtx9 + 8 | 0; //@line 18918
     HEAP32[$622 >> 2] = $82; //@line 18919
     $623 = $ReallocAsyncCtx9 + 12 | 0; //@line 18920
     HEAP32[$623 >> 2] = $4; //@line 18921
     $624 = $ReallocAsyncCtx9 + 16 | 0; //@line 18922
     HEAP32[$624 >> 2] = $6; //@line 18923
     $625 = $ReallocAsyncCtx9 + 20 | 0; //@line 18924
     HEAP32[$625 >> 2] = $232; //@line 18925
     $626 = $ReallocAsyncCtx9 + 24 | 0; //@line 18926
     HEAP32[$626 >> 2] = $8; //@line 18927
     $627 = $ReallocAsyncCtx9 + 28 | 0; //@line 18928
     HEAP32[$627 >> 2] = $10; //@line 18929
     $628 = $ReallocAsyncCtx9 + 32 | 0; //@line 18930
     HEAP32[$628 >> 2] = $12; //@line 18931
     $629 = $ReallocAsyncCtx9 + 36 | 0; //@line 18932
     HEAP32[$629 >> 2] = $233; //@line 18933
     $630 = $ReallocAsyncCtx9 + 40 | 0; //@line 18934
     HEAP32[$630 >> 2] = $14; //@line 18935
     $631 = $ReallocAsyncCtx9 + 44 | 0; //@line 18936
     HEAP32[$631 >> 2] = $16; //@line 18937
     $632 = $ReallocAsyncCtx9 + 48 | 0; //@line 18938
     HEAP32[$632 >> 2] = $20; //@line 18939
     $633 = $ReallocAsyncCtx9 + 52 | 0; //@line 18940
     HEAP32[$633 >> 2] = $22; //@line 18941
     $634 = $ReallocAsyncCtx9 + 56 | 0; //@line 18942
     HEAP32[$634 >> 2] = $24; //@line 18943
     $635 = $ReallocAsyncCtx9 + 60 | 0; //@line 18944
     HEAP32[$635 >> 2] = $28; //@line 18945
     $636 = $ReallocAsyncCtx9 + 64 | 0; //@line 18946
     HEAP32[$636 >> 2] = $AsyncRetVal; //@line 18947
     $637 = $ReallocAsyncCtx9 + 68 | 0; //@line 18948
     HEAP32[$637 >> 2] = $30; //@line 18949
     $638 = $ReallocAsyncCtx9 + 72 | 0; //@line 18950
     HEAP32[$638 >> 2] = $32; //@line 18951
     $639 = $ReallocAsyncCtx9 + 76 | 0; //@line 18952
     HEAP32[$639 >> 2] = $34; //@line 18953
     $640 = $ReallocAsyncCtx9 + 80 | 0; //@line 18954
     HEAP32[$640 >> 2] = $$0208$i; //@line 18955
     $641 = $ReallocAsyncCtx9 + 84 | 0; //@line 18956
     HEAP32[$641 >> 2] = $36; //@line 18957
     $642 = $ReallocAsyncCtx9 + 88 | 0; //@line 18958
     HEAP32[$642 >> 2] = $38; //@line 18959
     $643 = $ReallocAsyncCtx9 + 92 | 0; //@line 18960
     HEAP32[$643 >> 2] = $40; //@line 18961
     $644 = $ReallocAsyncCtx9 + 96 | 0; //@line 18962
     HEAP32[$644 >> 2] = $42; //@line 18963
     $645 = $ReallocAsyncCtx9 + 100 | 0; //@line 18964
     HEAP32[$645 >> 2] = $44; //@line 18965
     $646 = $ReallocAsyncCtx9 + 104 | 0; //@line 18966
     HEAP32[$646 >> 2] = $46; //@line 18967
     $647 = $ReallocAsyncCtx9 + 108 | 0; //@line 18968
     HEAP32[$647 >> 2] = $50; //@line 18969
     $648 = $ReallocAsyncCtx9 + 112 | 0; //@line 18970
     HEAP32[$648 >> 2] = $52; //@line 18971
     $649 = $ReallocAsyncCtx9 + 116 | 0; //@line 18972
     HEAP32[$649 >> 2] = $54; //@line 18973
     $650 = $ReallocAsyncCtx9 + 120 | 0; //@line 18974
     HEAP32[$650 >> 2] = $58; //@line 18975
     $651 = $ReallocAsyncCtx9 + 124 | 0; //@line 18976
     HEAP32[$651 >> 2] = $62; //@line 18977
     $652 = $ReallocAsyncCtx9 + 128 | 0; //@line 18978
     HEAP32[$652 >> 2] = $133; //@line 18979
     $653 = $ReallocAsyncCtx9 + 132 | 0; //@line 18980
     HEAP32[$653 >> 2] = $64; //@line 18981
     $654 = $ReallocAsyncCtx9 + 136 | 0; //@line 18982
     HEAP32[$654 >> 2] = $66; //@line 18983
     $655 = $ReallocAsyncCtx9 + 140 | 0; //@line 18984
     HEAP32[$655 >> 2] = $70; //@line 18985
     $656 = $ReallocAsyncCtx9 + 144 | 0; //@line 18986
     HEAP32[$656 >> 2] = $72; //@line 18987
     $657 = $ReallocAsyncCtx9 + 148 | 0; //@line 18988
     HEAP32[$657 >> 2] = $74; //@line 18989
     $658 = $ReallocAsyncCtx9 + 152 | 0; //@line 18990
     HEAP32[$658 >> 2] = $76; //@line 18991
     $659 = $ReallocAsyncCtx9 + 156 | 0; //@line 18992
     HEAP32[$659 >> 2] = $78; //@line 18993
     $660 = $ReallocAsyncCtx9 + 160 | 0; //@line 18994
     HEAP32[$660 >> 2] = $80; //@line 18995
     $661 = $ReallocAsyncCtx9 + 164 | 0; //@line 18996
     HEAP32[$661 >> 2] = $82; //@line 18997
     $662 = $ReallocAsyncCtx9 + 168 | 0; //@line 18998
     HEAP32[$662 >> 2] = $237; //@line 18999
     $663 = $ReallocAsyncCtx9 + 172 | 0; //@line 19000
     HEAP32[$663 >> 2] = $84; //@line 19001
     $664 = $ReallocAsyncCtx9 + 176 | 0; //@line 19002
     HEAP32[$664 >> 2] = $238; //@line 19003
     $665 = $ReallocAsyncCtx9 + 180 | 0; //@line 19004
     HEAP32[$665 >> 2] = $86; //@line 19005
     $666 = $ReallocAsyncCtx9 + 184 | 0; //@line 19006
     HEAP32[$666 >> 2] = $90; //@line 19007
     $667 = $ReallocAsyncCtx9 + 188 | 0; //@line 19008
     HEAP32[$667 >> 2] = $92; //@line 19009
     $668 = $ReallocAsyncCtx9 + 192 | 0; //@line 19010
     HEAP32[$668 >> 2] = $94; //@line 19011
     $669 = $ReallocAsyncCtx9 + 196 | 0; //@line 19012
     HEAP32[$669 >> 2] = $96; //@line 19013
     $670 = $ReallocAsyncCtx9 + 200 | 0; //@line 19014
     HEAP32[$670 >> 2] = $AsyncRetVal; //@line 19015
     $671 = $ReallocAsyncCtx9 + 204 | 0; //@line 19016
     HEAP32[$671 >> 2] = $98; //@line 19017
     $672 = $ReallocAsyncCtx9 + 208 | 0; //@line 19018
     HEAP32[$672 >> 2] = $234; //@line 19019
     $673 = $ReallocAsyncCtx9 + 212 | 0; //@line 19020
     HEAP32[$673 >> 2] = $100; //@line 19021
     $674 = $ReallocAsyncCtx9 + 216 | 0; //@line 19022
     HEAP32[$674 >> 2] = $104; //@line 19023
     $675 = $ReallocAsyncCtx9 + 220 | 0; //@line 19024
     HEAP32[$675 >> 2] = $106; //@line 19025
     $676 = $ReallocAsyncCtx9 + 224 | 0; //@line 19026
     HEAP32[$676 >> 2] = $110; //@line 19027
     $677 = $ReallocAsyncCtx9 + 228 | 0; //@line 19028
     HEAP32[$677 >> 2] = $114; //@line 19029
     $678 = $ReallocAsyncCtx9 + 232 | 0; //@line 19030
     HEAP32[$678 >> 2] = $116; //@line 19031
     $679 = $ReallocAsyncCtx9 + 236 | 0; //@line 19032
     HEAP32[$679 >> 2] = $118; //@line 19033
     $680 = $ReallocAsyncCtx9 + 240 | 0; //@line 19034
     HEAP32[$680 >> 2] = $122; //@line 19035
     $681 = $ReallocAsyncCtx9 + 244 | 0; //@line 19036
     HEAP32[$681 >> 2] = $124; //@line 19037
     $682 = $ReallocAsyncCtx9 + 248 | 0; //@line 19038
     HEAP32[$682 >> 2] = $126; //@line 19039
     $683 = $ReallocAsyncCtx9 + 252 | 0; //@line 19040
     HEAP32[$683 >> 2] = $236; //@line 19041
     $684 = $ReallocAsyncCtx9 + 256 | 0; //@line 19042
     HEAP32[$684 >> 2] = $128; //@line 19043
     $685 = $ReallocAsyncCtx9 + 260 | 0; //@line 19044
     HEAP32[$685 >> 2] = $236; //@line 19045
     $686 = $ReallocAsyncCtx9 + 264 | 0; //@line 19046
     HEAP32[$686 >> 2] = $130; //@line 19047
     sp = STACKTOP; //@line 19048
     return;
    }
   case 63:
    {
     _mbed_tracef(2, 3737, 4765, $4); //@line 19053
     break L6;
     break;
    }
   case 67:
    {
     $704 = HEAP32[$236 >> 2] | 0; //@line 19058
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 19061
     $707 = _sn_coap_parser_options_parse_multiple_options($52, $82, $279, $704 + 60 | 0, $704 + 8 | 0, 20, $$1202$i) | 0; //@line 19062
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 19065
      $708 = $ReallocAsyncCtx8 + 4 | 0; //@line 19066
      HEAP32[$708 >> 2] = $2; //@line 19067
      $709 = $ReallocAsyncCtx8 + 8 | 0; //@line 19068
      HEAP32[$709 >> 2] = $82; //@line 19069
      $710 = $ReallocAsyncCtx8 + 12 | 0; //@line 19070
      HEAP32[$710 >> 2] = $4; //@line 19071
      $711 = $ReallocAsyncCtx8 + 16 | 0; //@line 19072
      HEAP32[$711 >> 2] = $6; //@line 19073
      $712 = $ReallocAsyncCtx8 + 20 | 0; //@line 19074
      HEAP32[$712 >> 2] = $232; //@line 19075
      $713 = $ReallocAsyncCtx8 + 24 | 0; //@line 19076
      HEAP32[$713 >> 2] = $8; //@line 19077
      $714 = $ReallocAsyncCtx8 + 28 | 0; //@line 19078
      HEAP32[$714 >> 2] = $10; //@line 19079
      $715 = $ReallocAsyncCtx8 + 32 | 0; //@line 19080
      HEAP32[$715 >> 2] = $12; //@line 19081
      $716 = $ReallocAsyncCtx8 + 36 | 0; //@line 19082
      HEAP32[$716 >> 2] = $233; //@line 19083
      $717 = $ReallocAsyncCtx8 + 40 | 0; //@line 19084
      HEAP32[$717 >> 2] = $14; //@line 19085
      $718 = $ReallocAsyncCtx8 + 44 | 0; //@line 19086
      HEAP32[$718 >> 2] = $16; //@line 19087
      $719 = $ReallocAsyncCtx8 + 48 | 0; //@line 19088
      HEAP32[$719 >> 2] = $20; //@line 19089
      $720 = $ReallocAsyncCtx8 + 52 | 0; //@line 19090
      HEAP32[$720 >> 2] = $22; //@line 19091
      $721 = $ReallocAsyncCtx8 + 56 | 0; //@line 19092
      HEAP32[$721 >> 2] = $24; //@line 19093
      $722 = $ReallocAsyncCtx8 + 60 | 0; //@line 19094
      HEAP32[$722 >> 2] = $28; //@line 19095
      $723 = $ReallocAsyncCtx8 + 64 | 0; //@line 19096
      HEAP32[$723 >> 2] = $AsyncRetVal; //@line 19097
      $724 = $ReallocAsyncCtx8 + 68 | 0; //@line 19098
      HEAP32[$724 >> 2] = $30; //@line 19099
      $725 = $ReallocAsyncCtx8 + 72 | 0; //@line 19100
      HEAP32[$725 >> 2] = $32; //@line 19101
      $726 = $ReallocAsyncCtx8 + 76 | 0; //@line 19102
      HEAP32[$726 >> 2] = $34; //@line 19103
      $727 = $ReallocAsyncCtx8 + 80 | 0; //@line 19104
      HEAP32[$727 >> 2] = $$0208$i; //@line 19105
      $728 = $ReallocAsyncCtx8 + 84 | 0; //@line 19106
      HEAP32[$728 >> 2] = $36; //@line 19107
      $729 = $ReallocAsyncCtx8 + 88 | 0; //@line 19108
      HEAP32[$729 >> 2] = $38; //@line 19109
      $730 = $ReallocAsyncCtx8 + 92 | 0; //@line 19110
      HEAP32[$730 >> 2] = $40; //@line 19111
      $731 = $ReallocAsyncCtx8 + 96 | 0; //@line 19112
      HEAP32[$731 >> 2] = $42; //@line 19113
      $732 = $ReallocAsyncCtx8 + 100 | 0; //@line 19114
      HEAP32[$732 >> 2] = $44; //@line 19115
      $733 = $ReallocAsyncCtx8 + 104 | 0; //@line 19116
      HEAP32[$733 >> 2] = $46; //@line 19117
      $734 = $ReallocAsyncCtx8 + 108 | 0; //@line 19118
      HEAP32[$734 >> 2] = $50; //@line 19119
      $735 = $ReallocAsyncCtx8 + 112 | 0; //@line 19120
      HEAP32[$735 >> 2] = $52; //@line 19121
      $736 = $ReallocAsyncCtx8 + 116 | 0; //@line 19122
      HEAP32[$736 >> 2] = $54; //@line 19123
      $737 = $ReallocAsyncCtx8 + 120 | 0; //@line 19124
      HEAP32[$737 >> 2] = $58; //@line 19125
      $738 = $ReallocAsyncCtx8 + 124 | 0; //@line 19126
      HEAP32[$738 >> 2] = $62; //@line 19127
      $739 = $ReallocAsyncCtx8 + 128 | 0; //@line 19128
      HEAP32[$739 >> 2] = $133; //@line 19129
      $740 = $ReallocAsyncCtx8 + 132 | 0; //@line 19130
      HEAP32[$740 >> 2] = $64; //@line 19131
      $741 = $ReallocAsyncCtx8 + 136 | 0; //@line 19132
      HEAP32[$741 >> 2] = $66; //@line 19133
      $742 = $ReallocAsyncCtx8 + 140 | 0; //@line 19134
      HEAP32[$742 >> 2] = $70; //@line 19135
      $743 = $ReallocAsyncCtx8 + 144 | 0; //@line 19136
      HEAP32[$743 >> 2] = $72; //@line 19137
      $744 = $ReallocAsyncCtx8 + 148 | 0; //@line 19138
      HEAP32[$744 >> 2] = $74; //@line 19139
      $745 = $ReallocAsyncCtx8 + 152 | 0; //@line 19140
      HEAP32[$745 >> 2] = $76; //@line 19141
      $746 = $ReallocAsyncCtx8 + 156 | 0; //@line 19142
      HEAP32[$746 >> 2] = $78; //@line 19143
      $747 = $ReallocAsyncCtx8 + 160 | 0; //@line 19144
      HEAP32[$747 >> 2] = $80; //@line 19145
      $748 = $ReallocAsyncCtx8 + 164 | 0; //@line 19146
      HEAP32[$748 >> 2] = $82; //@line 19147
      $749 = $ReallocAsyncCtx8 + 168 | 0; //@line 19148
      HEAP32[$749 >> 2] = $237; //@line 19149
      $750 = $ReallocAsyncCtx8 + 172 | 0; //@line 19150
      HEAP32[$750 >> 2] = $84; //@line 19151
      $751 = $ReallocAsyncCtx8 + 176 | 0; //@line 19152
      HEAP32[$751 >> 2] = $238; //@line 19153
      $752 = $ReallocAsyncCtx8 + 180 | 0; //@line 19154
      HEAP32[$752 >> 2] = $86; //@line 19155
      $753 = $ReallocAsyncCtx8 + 184 | 0; //@line 19156
      HEAP32[$753 >> 2] = $90; //@line 19157
      $754 = $ReallocAsyncCtx8 + 188 | 0; //@line 19158
      HEAP32[$754 >> 2] = $92; //@line 19159
      $755 = $ReallocAsyncCtx8 + 192 | 0; //@line 19160
      HEAP32[$755 >> 2] = $94; //@line 19161
      $756 = $ReallocAsyncCtx8 + 196 | 0; //@line 19162
      HEAP32[$756 >> 2] = $96; //@line 19163
      $757 = $ReallocAsyncCtx8 + 200 | 0; //@line 19164
      HEAP32[$757 >> 2] = $AsyncRetVal; //@line 19165
      $758 = $ReallocAsyncCtx8 + 204 | 0; //@line 19166
      HEAP32[$758 >> 2] = $98; //@line 19167
      $759 = $ReallocAsyncCtx8 + 208 | 0; //@line 19168
      HEAP32[$759 >> 2] = $234; //@line 19169
      $760 = $ReallocAsyncCtx8 + 212 | 0; //@line 19170
      HEAP32[$760 >> 2] = $100; //@line 19171
      $761 = $ReallocAsyncCtx8 + 216 | 0; //@line 19172
      HEAP32[$761 >> 2] = $104; //@line 19173
      $762 = $ReallocAsyncCtx8 + 220 | 0; //@line 19174
      HEAP32[$762 >> 2] = $106; //@line 19175
      $763 = $ReallocAsyncCtx8 + 224 | 0; //@line 19176
      HEAP32[$763 >> 2] = $110; //@line 19177
      $764 = $ReallocAsyncCtx8 + 228 | 0; //@line 19178
      HEAP32[$764 >> 2] = $114; //@line 19179
      $765 = $ReallocAsyncCtx8 + 232 | 0; //@line 19180
      HEAP32[$765 >> 2] = $116; //@line 19181
      $766 = $ReallocAsyncCtx8 + 236 | 0; //@line 19182
      HEAP32[$766 >> 2] = $118; //@line 19183
      $767 = $ReallocAsyncCtx8 + 240 | 0; //@line 19184
      HEAP32[$767 >> 2] = $122; //@line 19185
      $768 = $ReallocAsyncCtx8 + 244 | 0; //@line 19186
      HEAP32[$768 >> 2] = $124; //@line 19187
      $769 = $ReallocAsyncCtx8 + 248 | 0; //@line 19188
      HEAP32[$769 >> 2] = $126; //@line 19189
      $770 = $ReallocAsyncCtx8 + 252 | 0; //@line 19190
      HEAP32[$770 >> 2] = $236; //@line 19191
      $771 = $ReallocAsyncCtx8 + 256 | 0; //@line 19192
      HEAP32[$771 >> 2] = $128; //@line 19193
      $772 = $ReallocAsyncCtx8 + 260 | 0; //@line 19194
      HEAP32[$772 >> 2] = $236; //@line 19195
      $773 = $ReallocAsyncCtx8 + 264 | 0; //@line 19196
      HEAP32[$773 >> 2] = $130; //@line 19197
      sp = STACKTOP; //@line 19198
      return;
     }
     HEAP8[___async_retval >> 0] = $707; //@line 19202
     ___async_unwind = 0; //@line 19203
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 19204
     $708 = $ReallocAsyncCtx8 + 4 | 0; //@line 19205
     HEAP32[$708 >> 2] = $2; //@line 19206
     $709 = $ReallocAsyncCtx8 + 8 | 0; //@line 19207
     HEAP32[$709 >> 2] = $82; //@line 19208
     $710 = $ReallocAsyncCtx8 + 12 | 0; //@line 19209
     HEAP32[$710 >> 2] = $4; //@line 19210
     $711 = $ReallocAsyncCtx8 + 16 | 0; //@line 19211
     HEAP32[$711 >> 2] = $6; //@line 19212
     $712 = $ReallocAsyncCtx8 + 20 | 0; //@line 19213
     HEAP32[$712 >> 2] = $232; //@line 19214
     $713 = $ReallocAsyncCtx8 + 24 | 0; //@line 19215
     HEAP32[$713 >> 2] = $8; //@line 19216
     $714 = $ReallocAsyncCtx8 + 28 | 0; //@line 19217
     HEAP32[$714 >> 2] = $10; //@line 19218
     $715 = $ReallocAsyncCtx8 + 32 | 0; //@line 19219
     HEAP32[$715 >> 2] = $12; //@line 19220
     $716 = $ReallocAsyncCtx8 + 36 | 0; //@line 19221
     HEAP32[$716 >> 2] = $233; //@line 19222
     $717 = $ReallocAsyncCtx8 + 40 | 0; //@line 19223
     HEAP32[$717 >> 2] = $14; //@line 19224
     $718 = $ReallocAsyncCtx8 + 44 | 0; //@line 19225
     HEAP32[$718 >> 2] = $16; //@line 19226
     $719 = $ReallocAsyncCtx8 + 48 | 0; //@line 19227
     HEAP32[$719 >> 2] = $20; //@line 19228
     $720 = $ReallocAsyncCtx8 + 52 | 0; //@line 19229
     HEAP32[$720 >> 2] = $22; //@line 19230
     $721 = $ReallocAsyncCtx8 + 56 | 0; //@line 19231
     HEAP32[$721 >> 2] = $24; //@line 19232
     $722 = $ReallocAsyncCtx8 + 60 | 0; //@line 19233
     HEAP32[$722 >> 2] = $28; //@line 19234
     $723 = $ReallocAsyncCtx8 + 64 | 0; //@line 19235
     HEAP32[$723 >> 2] = $AsyncRetVal; //@line 19236
     $724 = $ReallocAsyncCtx8 + 68 | 0; //@line 19237
     HEAP32[$724 >> 2] = $30; //@line 19238
     $725 = $ReallocAsyncCtx8 + 72 | 0; //@line 19239
     HEAP32[$725 >> 2] = $32; //@line 19240
     $726 = $ReallocAsyncCtx8 + 76 | 0; //@line 19241
     HEAP32[$726 >> 2] = $34; //@line 19242
     $727 = $ReallocAsyncCtx8 + 80 | 0; //@line 19243
     HEAP32[$727 >> 2] = $$0208$i; //@line 19244
     $728 = $ReallocAsyncCtx8 + 84 | 0; //@line 19245
     HEAP32[$728 >> 2] = $36; //@line 19246
     $729 = $ReallocAsyncCtx8 + 88 | 0; //@line 19247
     HEAP32[$729 >> 2] = $38; //@line 19248
     $730 = $ReallocAsyncCtx8 + 92 | 0; //@line 19249
     HEAP32[$730 >> 2] = $40; //@line 19250
     $731 = $ReallocAsyncCtx8 + 96 | 0; //@line 19251
     HEAP32[$731 >> 2] = $42; //@line 19252
     $732 = $ReallocAsyncCtx8 + 100 | 0; //@line 19253
     HEAP32[$732 >> 2] = $44; //@line 19254
     $733 = $ReallocAsyncCtx8 + 104 | 0; //@line 19255
     HEAP32[$733 >> 2] = $46; //@line 19256
     $734 = $ReallocAsyncCtx8 + 108 | 0; //@line 19257
     HEAP32[$734 >> 2] = $50; //@line 19258
     $735 = $ReallocAsyncCtx8 + 112 | 0; //@line 19259
     HEAP32[$735 >> 2] = $52; //@line 19260
     $736 = $ReallocAsyncCtx8 + 116 | 0; //@line 19261
     HEAP32[$736 >> 2] = $54; //@line 19262
     $737 = $ReallocAsyncCtx8 + 120 | 0; //@line 19263
     HEAP32[$737 >> 2] = $58; //@line 19264
     $738 = $ReallocAsyncCtx8 + 124 | 0; //@line 19265
     HEAP32[$738 >> 2] = $62; //@line 19266
     $739 = $ReallocAsyncCtx8 + 128 | 0; //@line 19267
     HEAP32[$739 >> 2] = $133; //@line 19268
     $740 = $ReallocAsyncCtx8 + 132 | 0; //@line 19269
     HEAP32[$740 >> 2] = $64; //@line 19270
     $741 = $ReallocAsyncCtx8 + 136 | 0; //@line 19271
     HEAP32[$741 >> 2] = $66; //@line 19272
     $742 = $ReallocAsyncCtx8 + 140 | 0; //@line 19273
     HEAP32[$742 >> 2] = $70; //@line 19274
     $743 = $ReallocAsyncCtx8 + 144 | 0; //@line 19275
     HEAP32[$743 >> 2] = $72; //@line 19276
     $744 = $ReallocAsyncCtx8 + 148 | 0; //@line 19277
     HEAP32[$744 >> 2] = $74; //@line 19278
     $745 = $ReallocAsyncCtx8 + 152 | 0; //@line 19279
     HEAP32[$745 >> 2] = $76; //@line 19280
     $746 = $ReallocAsyncCtx8 + 156 | 0; //@line 19281
     HEAP32[$746 >> 2] = $78; //@line 19282
     $747 = $ReallocAsyncCtx8 + 160 | 0; //@line 19283
     HEAP32[$747 >> 2] = $80; //@line 19284
     $748 = $ReallocAsyncCtx8 + 164 | 0; //@line 19285
     HEAP32[$748 >> 2] = $82; //@line 19286
     $749 = $ReallocAsyncCtx8 + 168 | 0; //@line 19287
     HEAP32[$749 >> 2] = $237; //@line 19288
     $750 = $ReallocAsyncCtx8 + 172 | 0; //@line 19289
     HEAP32[$750 >> 2] = $84; //@line 19290
     $751 = $ReallocAsyncCtx8 + 176 | 0; //@line 19291
     HEAP32[$751 >> 2] = $238; //@line 19292
     $752 = $ReallocAsyncCtx8 + 180 | 0; //@line 19293
     HEAP32[$752 >> 2] = $86; //@line 19294
     $753 = $ReallocAsyncCtx8 + 184 | 0; //@line 19295
     HEAP32[$753 >> 2] = $90; //@line 19296
     $754 = $ReallocAsyncCtx8 + 188 | 0; //@line 19297
     HEAP32[$754 >> 2] = $92; //@line 19298
     $755 = $ReallocAsyncCtx8 + 192 | 0; //@line 19299
     HEAP32[$755 >> 2] = $94; //@line 19300
     $756 = $ReallocAsyncCtx8 + 196 | 0; //@line 19301
     HEAP32[$756 >> 2] = $96; //@line 19302
     $757 = $ReallocAsyncCtx8 + 200 | 0; //@line 19303
     HEAP32[$757 >> 2] = $AsyncRetVal; //@line 19304
     $758 = $ReallocAsyncCtx8 + 204 | 0; //@line 19305
     HEAP32[$758 >> 2] = $98; //@line 19306
     $759 = $ReallocAsyncCtx8 + 208 | 0; //@line 19307
     HEAP32[$759 >> 2] = $234; //@line 19308
     $760 = $ReallocAsyncCtx8 + 212 | 0; //@line 19309
     HEAP32[$760 >> 2] = $100; //@line 19310
     $761 = $ReallocAsyncCtx8 + 216 | 0; //@line 19311
     HEAP32[$761 >> 2] = $104; //@line 19312
     $762 = $ReallocAsyncCtx8 + 220 | 0; //@line 19313
     HEAP32[$762 >> 2] = $106; //@line 19314
     $763 = $ReallocAsyncCtx8 + 224 | 0; //@line 19315
     HEAP32[$763 >> 2] = $110; //@line 19316
     $764 = $ReallocAsyncCtx8 + 228 | 0; //@line 19317
     HEAP32[$764 >> 2] = $114; //@line 19318
     $765 = $ReallocAsyncCtx8 + 232 | 0; //@line 19319
     HEAP32[$765 >> 2] = $116; //@line 19320
     $766 = $ReallocAsyncCtx8 + 236 | 0; //@line 19321
     HEAP32[$766 >> 2] = $118; //@line 19322
     $767 = $ReallocAsyncCtx8 + 240 | 0; //@line 19323
     HEAP32[$767 >> 2] = $122; //@line 19324
     $768 = $ReallocAsyncCtx8 + 244 | 0; //@line 19325
     HEAP32[$768 >> 2] = $124; //@line 19326
     $769 = $ReallocAsyncCtx8 + 248 | 0; //@line 19327
     HEAP32[$769 >> 2] = $126; //@line 19328
     $770 = $ReallocAsyncCtx8 + 252 | 0; //@line 19329
     HEAP32[$770 >> 2] = $236; //@line 19330
     $771 = $ReallocAsyncCtx8 + 256 | 0; //@line 19331
     HEAP32[$771 >> 2] = $128; //@line 19332
     $772 = $ReallocAsyncCtx8 + 260 | 0; //@line 19333
     HEAP32[$772 >> 2] = $236; //@line 19334
     $773 = $ReallocAsyncCtx8 + 264 | 0; //@line 19335
     HEAP32[$773 >> 2] = $130; //@line 19336
     sp = STACKTOP; //@line 19337
     return;
    }
   case 70:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 19342
     $775 = _sn_coap_parser_options_parse_multiple_options($52, $82, $279, $237, $238, 11, $$1202$i) | 0; //@line 19343
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 19346
      $776 = $ReallocAsyncCtx7 + 4 | 0; //@line 19347
      HEAP32[$776 >> 2] = $2; //@line 19348
      $777 = $ReallocAsyncCtx7 + 8 | 0; //@line 19349
      HEAP32[$777 >> 2] = $82; //@line 19350
      $778 = $ReallocAsyncCtx7 + 12 | 0; //@line 19351
      HEAP32[$778 >> 2] = $4; //@line 19352
      $779 = $ReallocAsyncCtx7 + 16 | 0; //@line 19353
      HEAP32[$779 >> 2] = $6; //@line 19354
      $780 = $ReallocAsyncCtx7 + 20 | 0; //@line 19355
      HEAP32[$780 >> 2] = $232; //@line 19356
      $781 = $ReallocAsyncCtx7 + 24 | 0; //@line 19357
      HEAP32[$781 >> 2] = $8; //@line 19358
      $782 = $ReallocAsyncCtx7 + 28 | 0; //@line 19359
      HEAP32[$782 >> 2] = $10; //@line 19360
      $783 = $ReallocAsyncCtx7 + 32 | 0; //@line 19361
      HEAP32[$783 >> 2] = $12; //@line 19362
      $784 = $ReallocAsyncCtx7 + 36 | 0; //@line 19363
      HEAP32[$784 >> 2] = $233; //@line 19364
      $785 = $ReallocAsyncCtx7 + 40 | 0; //@line 19365
      HEAP32[$785 >> 2] = $14; //@line 19366
      $786 = $ReallocAsyncCtx7 + 44 | 0; //@line 19367
      HEAP32[$786 >> 2] = $16; //@line 19368
      $787 = $ReallocAsyncCtx7 + 48 | 0; //@line 19369
      HEAP32[$787 >> 2] = $20; //@line 19370
      $788 = $ReallocAsyncCtx7 + 52 | 0; //@line 19371
      HEAP32[$788 >> 2] = $22; //@line 19372
      $789 = $ReallocAsyncCtx7 + 56 | 0; //@line 19373
      HEAP32[$789 >> 2] = $24; //@line 19374
      $790 = $ReallocAsyncCtx7 + 60 | 0; //@line 19375
      HEAP32[$790 >> 2] = $28; //@line 19376
      $791 = $ReallocAsyncCtx7 + 64 | 0; //@line 19377
      HEAP32[$791 >> 2] = $AsyncRetVal; //@line 19378
      $792 = $ReallocAsyncCtx7 + 68 | 0; //@line 19379
      HEAP32[$792 >> 2] = $30; //@line 19380
      $793 = $ReallocAsyncCtx7 + 72 | 0; //@line 19381
      HEAP32[$793 >> 2] = $32; //@line 19382
      $794 = $ReallocAsyncCtx7 + 76 | 0; //@line 19383
      HEAP32[$794 >> 2] = $34; //@line 19384
      $795 = $ReallocAsyncCtx7 + 80 | 0; //@line 19385
      HEAP32[$795 >> 2] = $$0208$i; //@line 19386
      $796 = $ReallocAsyncCtx7 + 84 | 0; //@line 19387
      HEAP32[$796 >> 2] = $36; //@line 19388
      $797 = $ReallocAsyncCtx7 + 88 | 0; //@line 19389
      HEAP32[$797 >> 2] = $38; //@line 19390
      $798 = $ReallocAsyncCtx7 + 92 | 0; //@line 19391
      HEAP32[$798 >> 2] = $40; //@line 19392
      $799 = $ReallocAsyncCtx7 + 96 | 0; //@line 19393
      HEAP32[$799 >> 2] = $42; //@line 19394
      $800 = $ReallocAsyncCtx7 + 100 | 0; //@line 19395
      HEAP32[$800 >> 2] = $44; //@line 19396
      $801 = $ReallocAsyncCtx7 + 104 | 0; //@line 19397
      HEAP32[$801 >> 2] = $46; //@line 19398
      $802 = $ReallocAsyncCtx7 + 108 | 0; //@line 19399
      HEAP32[$802 >> 2] = $50; //@line 19400
      $803 = $ReallocAsyncCtx7 + 112 | 0; //@line 19401
      HEAP32[$803 >> 2] = $52; //@line 19402
      $804 = $ReallocAsyncCtx7 + 116 | 0; //@line 19403
      HEAP32[$804 >> 2] = $54; //@line 19404
      $805 = $ReallocAsyncCtx7 + 120 | 0; //@line 19405
      HEAP32[$805 >> 2] = $58; //@line 19406
      $806 = $ReallocAsyncCtx7 + 124 | 0; //@line 19407
      HEAP32[$806 >> 2] = $62; //@line 19408
      $807 = $ReallocAsyncCtx7 + 128 | 0; //@line 19409
      HEAP32[$807 >> 2] = $133; //@line 19410
      $808 = $ReallocAsyncCtx7 + 132 | 0; //@line 19411
      HEAP32[$808 >> 2] = $64; //@line 19412
      $809 = $ReallocAsyncCtx7 + 136 | 0; //@line 19413
      HEAP32[$809 >> 2] = $66; //@line 19414
      $810 = $ReallocAsyncCtx7 + 140 | 0; //@line 19415
      HEAP32[$810 >> 2] = $70; //@line 19416
      $811 = $ReallocAsyncCtx7 + 144 | 0; //@line 19417
      HEAP32[$811 >> 2] = $72; //@line 19418
      $812 = $ReallocAsyncCtx7 + 148 | 0; //@line 19419
      HEAP32[$812 >> 2] = $74; //@line 19420
      $813 = $ReallocAsyncCtx7 + 152 | 0; //@line 19421
      HEAP32[$813 >> 2] = $76; //@line 19422
      $814 = $ReallocAsyncCtx7 + 156 | 0; //@line 19423
      HEAP32[$814 >> 2] = $78; //@line 19424
      $815 = $ReallocAsyncCtx7 + 160 | 0; //@line 19425
      HEAP32[$815 >> 2] = $80; //@line 19426
      $816 = $ReallocAsyncCtx7 + 164 | 0; //@line 19427
      HEAP32[$816 >> 2] = $82; //@line 19428
      $817 = $ReallocAsyncCtx7 + 168 | 0; //@line 19429
      HEAP32[$817 >> 2] = $237; //@line 19430
      $818 = $ReallocAsyncCtx7 + 172 | 0; //@line 19431
      HEAP32[$818 >> 2] = $84; //@line 19432
      $819 = $ReallocAsyncCtx7 + 176 | 0; //@line 19433
      HEAP32[$819 >> 2] = $238; //@line 19434
      $820 = $ReallocAsyncCtx7 + 180 | 0; //@line 19435
      HEAP32[$820 >> 2] = $86; //@line 19436
      $821 = $ReallocAsyncCtx7 + 184 | 0; //@line 19437
      HEAP32[$821 >> 2] = $90; //@line 19438
      $822 = $ReallocAsyncCtx7 + 188 | 0; //@line 19439
      HEAP32[$822 >> 2] = $92; //@line 19440
      $823 = $ReallocAsyncCtx7 + 192 | 0; //@line 19441
      HEAP32[$823 >> 2] = $94; //@line 19442
      $824 = $ReallocAsyncCtx7 + 196 | 0; //@line 19443
      HEAP32[$824 >> 2] = $96; //@line 19444
      $825 = $ReallocAsyncCtx7 + 200 | 0; //@line 19445
      HEAP32[$825 >> 2] = $AsyncRetVal; //@line 19446
      $826 = $ReallocAsyncCtx7 + 204 | 0; //@line 19447
      HEAP32[$826 >> 2] = $98; //@line 19448
      $827 = $ReallocAsyncCtx7 + 208 | 0; //@line 19449
      HEAP32[$827 >> 2] = $234; //@line 19450
      $828 = $ReallocAsyncCtx7 + 212 | 0; //@line 19451
      HEAP32[$828 >> 2] = $100; //@line 19452
      $829 = $ReallocAsyncCtx7 + 216 | 0; //@line 19453
      HEAP32[$829 >> 2] = $104; //@line 19454
      $830 = $ReallocAsyncCtx7 + 220 | 0; //@line 19455
      HEAP32[$830 >> 2] = $106; //@line 19456
      $831 = $ReallocAsyncCtx7 + 224 | 0; //@line 19457
      HEAP32[$831 >> 2] = $110; //@line 19458
      $832 = $ReallocAsyncCtx7 + 228 | 0; //@line 19459
      HEAP32[$832 >> 2] = $114; //@line 19460
      $833 = $ReallocAsyncCtx7 + 232 | 0; //@line 19461
      HEAP32[$833 >> 2] = $116; //@line 19462
      $834 = $ReallocAsyncCtx7 + 236 | 0; //@line 19463
      HEAP32[$834 >> 2] = $118; //@line 19464
      $835 = $ReallocAsyncCtx7 + 240 | 0; //@line 19465
      HEAP32[$835 >> 2] = $122; //@line 19466
      $836 = $ReallocAsyncCtx7 + 244 | 0; //@line 19467
      HEAP32[$836 >> 2] = $124; //@line 19468
      $837 = $ReallocAsyncCtx7 + 248 | 0; //@line 19469
      HEAP32[$837 >> 2] = $126; //@line 19470
      $838 = $ReallocAsyncCtx7 + 252 | 0; //@line 19471
      HEAP32[$838 >> 2] = $236; //@line 19472
      $839 = $ReallocAsyncCtx7 + 256 | 0; //@line 19473
      HEAP32[$839 >> 2] = $128; //@line 19474
      $840 = $ReallocAsyncCtx7 + 260 | 0; //@line 19475
      HEAP32[$840 >> 2] = $236; //@line 19476
      $841 = $ReallocAsyncCtx7 + 264 | 0; //@line 19477
      HEAP32[$841 >> 2] = $130; //@line 19478
      sp = STACKTOP; //@line 19479
      return;
     }
     HEAP8[___async_retval >> 0] = $775; //@line 19483
     ___async_unwind = 0; //@line 19484
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 19485
     $776 = $ReallocAsyncCtx7 + 4 | 0; //@line 19486
     HEAP32[$776 >> 2] = $2; //@line 19487
     $777 = $ReallocAsyncCtx7 + 8 | 0; //@line 19488
     HEAP32[$777 >> 2] = $82; //@line 19489
     $778 = $ReallocAsyncCtx7 + 12 | 0; //@line 19490
     HEAP32[$778 >> 2] = $4; //@line 19491
     $779 = $ReallocAsyncCtx7 + 16 | 0; //@line 19492
     HEAP32[$779 >> 2] = $6; //@line 19493
     $780 = $ReallocAsyncCtx7 + 20 | 0; //@line 19494
     HEAP32[$780 >> 2] = $232; //@line 19495
     $781 = $ReallocAsyncCtx7 + 24 | 0; //@line 19496
     HEAP32[$781 >> 2] = $8; //@line 19497
     $782 = $ReallocAsyncCtx7 + 28 | 0; //@line 19498
     HEAP32[$782 >> 2] = $10; //@line 19499
     $783 = $ReallocAsyncCtx7 + 32 | 0; //@line 19500
     HEAP32[$783 >> 2] = $12; //@line 19501
     $784 = $ReallocAsyncCtx7 + 36 | 0; //@line 19502
     HEAP32[$784 >> 2] = $233; //@line 19503
     $785 = $ReallocAsyncCtx7 + 40 | 0; //@line 19504
     HEAP32[$785 >> 2] = $14; //@line 19505
     $786 = $ReallocAsyncCtx7 + 44 | 0; //@line 19506
     HEAP32[$786 >> 2] = $16; //@line 19507
     $787 = $ReallocAsyncCtx7 + 48 | 0; //@line 19508
     HEAP32[$787 >> 2] = $20; //@line 19509
     $788 = $ReallocAsyncCtx7 + 52 | 0; //@line 19510
     HEAP32[$788 >> 2] = $22; //@line 19511
     $789 = $ReallocAsyncCtx7 + 56 | 0; //@line 19512
     HEAP32[$789 >> 2] = $24; //@line 19513
     $790 = $ReallocAsyncCtx7 + 60 | 0; //@line 19514
     HEAP32[$790 >> 2] = $28; //@line 19515
     $791 = $ReallocAsyncCtx7 + 64 | 0; //@line 19516
     HEAP32[$791 >> 2] = $AsyncRetVal; //@line 19517
     $792 = $ReallocAsyncCtx7 + 68 | 0; //@line 19518
     HEAP32[$792 >> 2] = $30; //@line 19519
     $793 = $ReallocAsyncCtx7 + 72 | 0; //@line 19520
     HEAP32[$793 >> 2] = $32; //@line 19521
     $794 = $ReallocAsyncCtx7 + 76 | 0; //@line 19522
     HEAP32[$794 >> 2] = $34; //@line 19523
     $795 = $ReallocAsyncCtx7 + 80 | 0; //@line 19524
     HEAP32[$795 >> 2] = $$0208$i; //@line 19525
     $796 = $ReallocAsyncCtx7 + 84 | 0; //@line 19526
     HEAP32[$796 >> 2] = $36; //@line 19527
     $797 = $ReallocAsyncCtx7 + 88 | 0; //@line 19528
     HEAP32[$797 >> 2] = $38; //@line 19529
     $798 = $ReallocAsyncCtx7 + 92 | 0; //@line 19530
     HEAP32[$798 >> 2] = $40; //@line 19531
     $799 = $ReallocAsyncCtx7 + 96 | 0; //@line 19532
     HEAP32[$799 >> 2] = $42; //@line 19533
     $800 = $ReallocAsyncCtx7 + 100 | 0; //@line 19534
     HEAP32[$800 >> 2] = $44; //@line 19535
     $801 = $ReallocAsyncCtx7 + 104 | 0; //@line 19536
     HEAP32[$801 >> 2] = $46; //@line 19537
     $802 = $ReallocAsyncCtx7 + 108 | 0; //@line 19538
     HEAP32[$802 >> 2] = $50; //@line 19539
     $803 = $ReallocAsyncCtx7 + 112 | 0; //@line 19540
     HEAP32[$803 >> 2] = $52; //@line 19541
     $804 = $ReallocAsyncCtx7 + 116 | 0; //@line 19542
     HEAP32[$804 >> 2] = $54; //@line 19543
     $805 = $ReallocAsyncCtx7 + 120 | 0; //@line 19544
     HEAP32[$805 >> 2] = $58; //@line 19545
     $806 = $ReallocAsyncCtx7 + 124 | 0; //@line 19546
     HEAP32[$806 >> 2] = $62; //@line 19547
     $807 = $ReallocAsyncCtx7 + 128 | 0; //@line 19548
     HEAP32[$807 >> 2] = $133; //@line 19549
     $808 = $ReallocAsyncCtx7 + 132 | 0; //@line 19550
     HEAP32[$808 >> 2] = $64; //@line 19551
     $809 = $ReallocAsyncCtx7 + 136 | 0; //@line 19552
     HEAP32[$809 >> 2] = $66; //@line 19553
     $810 = $ReallocAsyncCtx7 + 140 | 0; //@line 19554
     HEAP32[$810 >> 2] = $70; //@line 19555
     $811 = $ReallocAsyncCtx7 + 144 | 0; //@line 19556
     HEAP32[$811 >> 2] = $72; //@line 19557
     $812 = $ReallocAsyncCtx7 + 148 | 0; //@line 19558
     HEAP32[$812 >> 2] = $74; //@line 19559
     $813 = $ReallocAsyncCtx7 + 152 | 0; //@line 19560
     HEAP32[$813 >> 2] = $76; //@line 19561
     $814 = $ReallocAsyncCtx7 + 156 | 0; //@line 19562
     HEAP32[$814 >> 2] = $78; //@line 19563
     $815 = $ReallocAsyncCtx7 + 160 | 0; //@line 19564
     HEAP32[$815 >> 2] = $80; //@line 19565
     $816 = $ReallocAsyncCtx7 + 164 | 0; //@line 19566
     HEAP32[$816 >> 2] = $82; //@line 19567
     $817 = $ReallocAsyncCtx7 + 168 | 0; //@line 19568
     HEAP32[$817 >> 2] = $237; //@line 19569
     $818 = $ReallocAsyncCtx7 + 172 | 0; //@line 19570
     HEAP32[$818 >> 2] = $84; //@line 19571
     $819 = $ReallocAsyncCtx7 + 176 | 0; //@line 19572
     HEAP32[$819 >> 2] = $238; //@line 19573
     $820 = $ReallocAsyncCtx7 + 180 | 0; //@line 19574
     HEAP32[$820 >> 2] = $86; //@line 19575
     $821 = $ReallocAsyncCtx7 + 184 | 0; //@line 19576
     HEAP32[$821 >> 2] = $90; //@line 19577
     $822 = $ReallocAsyncCtx7 + 188 | 0; //@line 19578
     HEAP32[$822 >> 2] = $92; //@line 19579
     $823 = $ReallocAsyncCtx7 + 192 | 0; //@line 19580
     HEAP32[$823 >> 2] = $94; //@line 19581
     $824 = $ReallocAsyncCtx7 + 196 | 0; //@line 19582
     HEAP32[$824 >> 2] = $96; //@line 19583
     $825 = $ReallocAsyncCtx7 + 200 | 0; //@line 19584
     HEAP32[$825 >> 2] = $AsyncRetVal; //@line 19585
     $826 = $ReallocAsyncCtx7 + 204 | 0; //@line 19586
     HEAP32[$826 >> 2] = $98; //@line 19587
     $827 = $ReallocAsyncCtx7 + 208 | 0; //@line 19588
     HEAP32[$827 >> 2] = $234; //@line 19589
     $828 = $ReallocAsyncCtx7 + 212 | 0; //@line 19590
     HEAP32[$828 >> 2] = $100; //@line 19591
     $829 = $ReallocAsyncCtx7 + 216 | 0; //@line 19592
     HEAP32[$829 >> 2] = $104; //@line 19593
     $830 = $ReallocAsyncCtx7 + 220 | 0; //@line 19594
     HEAP32[$830 >> 2] = $106; //@line 19595
     $831 = $ReallocAsyncCtx7 + 224 | 0; //@line 19596
     HEAP32[$831 >> 2] = $110; //@line 19597
     $832 = $ReallocAsyncCtx7 + 228 | 0; //@line 19598
     HEAP32[$832 >> 2] = $114; //@line 19599
     $833 = $ReallocAsyncCtx7 + 232 | 0; //@line 19600
     HEAP32[$833 >> 2] = $116; //@line 19601
     $834 = $ReallocAsyncCtx7 + 236 | 0; //@line 19602
     HEAP32[$834 >> 2] = $118; //@line 19603
     $835 = $ReallocAsyncCtx7 + 240 | 0; //@line 19604
     HEAP32[$835 >> 2] = $122; //@line 19605
     $836 = $ReallocAsyncCtx7 + 244 | 0; //@line 19606
     HEAP32[$836 >> 2] = $124; //@line 19607
     $837 = $ReallocAsyncCtx7 + 248 | 0; //@line 19608
     HEAP32[$837 >> 2] = $126; //@line 19609
     $838 = $ReallocAsyncCtx7 + 252 | 0; //@line 19610
     HEAP32[$838 >> 2] = $236; //@line 19611
     $839 = $ReallocAsyncCtx7 + 256 | 0; //@line 19612
     HEAP32[$839 >> 2] = $128; //@line 19613
     $840 = $ReallocAsyncCtx7 + 260 | 0; //@line 19614
     HEAP32[$840 >> 2] = $236; //@line 19615
     $841 = $ReallocAsyncCtx7 + 264 | 0; //@line 19616
     HEAP32[$841 >> 2] = $130; //@line 19617
     sp = STACKTOP; //@line 19618
     return;
    }
   case 75:
    {
     _mbed_tracef(2, 3737, 4960, $10); //@line 19623
     break L6;
     break;
    }
   case 79:
    {
     $859 = HEAP32[$236 >> 2] | 0; //@line 19628
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 19631
     $862 = _sn_coap_parser_options_parse_multiple_options($52, $82, $279, $859 + 64 | 0, $859 + 10 | 0, 15, $$1202$i) | 0; //@line 19632
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 19635
      $863 = $ReallocAsyncCtx6 + 4 | 0; //@line 19636
      HEAP32[$863 >> 2] = $2; //@line 19637
      $864 = $ReallocAsyncCtx6 + 8 | 0; //@line 19638
      HEAP32[$864 >> 2] = $82; //@line 19639
      $865 = $ReallocAsyncCtx6 + 12 | 0; //@line 19640
      HEAP32[$865 >> 2] = $4; //@line 19641
      $866 = $ReallocAsyncCtx6 + 16 | 0; //@line 19642
      HEAP32[$866 >> 2] = $6; //@line 19643
      $867 = $ReallocAsyncCtx6 + 20 | 0; //@line 19644
      HEAP32[$867 >> 2] = $232; //@line 19645
      $868 = $ReallocAsyncCtx6 + 24 | 0; //@line 19646
      HEAP32[$868 >> 2] = $8; //@line 19647
      $869 = $ReallocAsyncCtx6 + 28 | 0; //@line 19648
      HEAP32[$869 >> 2] = $10; //@line 19649
      $870 = $ReallocAsyncCtx6 + 32 | 0; //@line 19650
      HEAP32[$870 >> 2] = $12; //@line 19651
      $871 = $ReallocAsyncCtx6 + 36 | 0; //@line 19652
      HEAP32[$871 >> 2] = $233; //@line 19653
      $872 = $ReallocAsyncCtx6 + 40 | 0; //@line 19654
      HEAP32[$872 >> 2] = $14; //@line 19655
      $873 = $ReallocAsyncCtx6 + 44 | 0; //@line 19656
      HEAP32[$873 >> 2] = $16; //@line 19657
      $874 = $ReallocAsyncCtx6 + 48 | 0; //@line 19658
      HEAP32[$874 >> 2] = $20; //@line 19659
      $875 = $ReallocAsyncCtx6 + 52 | 0; //@line 19660
      HEAP32[$875 >> 2] = $22; //@line 19661
      $876 = $ReallocAsyncCtx6 + 56 | 0; //@line 19662
      HEAP32[$876 >> 2] = $24; //@line 19663
      $877 = $ReallocAsyncCtx6 + 60 | 0; //@line 19664
      HEAP32[$877 >> 2] = $28; //@line 19665
      $878 = $ReallocAsyncCtx6 + 64 | 0; //@line 19666
      HEAP32[$878 >> 2] = $AsyncRetVal; //@line 19667
      $879 = $ReallocAsyncCtx6 + 68 | 0; //@line 19668
      HEAP32[$879 >> 2] = $30; //@line 19669
      $880 = $ReallocAsyncCtx6 + 72 | 0; //@line 19670
      HEAP32[$880 >> 2] = $32; //@line 19671
      $881 = $ReallocAsyncCtx6 + 76 | 0; //@line 19672
      HEAP32[$881 >> 2] = $34; //@line 19673
      $882 = $ReallocAsyncCtx6 + 80 | 0; //@line 19674
      HEAP32[$882 >> 2] = $$0208$i; //@line 19675
      $883 = $ReallocAsyncCtx6 + 84 | 0; //@line 19676
      HEAP32[$883 >> 2] = $36; //@line 19677
      $884 = $ReallocAsyncCtx6 + 88 | 0; //@line 19678
      HEAP32[$884 >> 2] = $38; //@line 19679
      $885 = $ReallocAsyncCtx6 + 92 | 0; //@line 19680
      HEAP32[$885 >> 2] = $40; //@line 19681
      $886 = $ReallocAsyncCtx6 + 96 | 0; //@line 19682
      HEAP32[$886 >> 2] = $42; //@line 19683
      $887 = $ReallocAsyncCtx6 + 100 | 0; //@line 19684
      HEAP32[$887 >> 2] = $44; //@line 19685
      $888 = $ReallocAsyncCtx6 + 104 | 0; //@line 19686
      HEAP32[$888 >> 2] = $46; //@line 19687
      $889 = $ReallocAsyncCtx6 + 108 | 0; //@line 19688
      HEAP32[$889 >> 2] = $50; //@line 19689
      $890 = $ReallocAsyncCtx6 + 112 | 0; //@line 19690
      HEAP32[$890 >> 2] = $52; //@line 19691
      $891 = $ReallocAsyncCtx6 + 116 | 0; //@line 19692
      HEAP32[$891 >> 2] = $54; //@line 19693
      $892 = $ReallocAsyncCtx6 + 120 | 0; //@line 19694
      HEAP32[$892 >> 2] = $58; //@line 19695
      $893 = $ReallocAsyncCtx6 + 124 | 0; //@line 19696
      HEAP32[$893 >> 2] = $62; //@line 19697
      $894 = $ReallocAsyncCtx6 + 128 | 0; //@line 19698
      HEAP32[$894 >> 2] = $133; //@line 19699
      $895 = $ReallocAsyncCtx6 + 132 | 0; //@line 19700
      HEAP32[$895 >> 2] = $64; //@line 19701
      $896 = $ReallocAsyncCtx6 + 136 | 0; //@line 19702
      HEAP32[$896 >> 2] = $66; //@line 19703
      $897 = $ReallocAsyncCtx6 + 140 | 0; //@line 19704
      HEAP32[$897 >> 2] = $70; //@line 19705
      $898 = $ReallocAsyncCtx6 + 144 | 0; //@line 19706
      HEAP32[$898 >> 2] = $72; //@line 19707
      $899 = $ReallocAsyncCtx6 + 148 | 0; //@line 19708
      HEAP32[$899 >> 2] = $74; //@line 19709
      $900 = $ReallocAsyncCtx6 + 152 | 0; //@line 19710
      HEAP32[$900 >> 2] = $76; //@line 19711
      $901 = $ReallocAsyncCtx6 + 156 | 0; //@line 19712
      HEAP32[$901 >> 2] = $78; //@line 19713
      $902 = $ReallocAsyncCtx6 + 160 | 0; //@line 19714
      HEAP32[$902 >> 2] = $80; //@line 19715
      $903 = $ReallocAsyncCtx6 + 164 | 0; //@line 19716
      HEAP32[$903 >> 2] = $82; //@line 19717
      $904 = $ReallocAsyncCtx6 + 168 | 0; //@line 19718
      HEAP32[$904 >> 2] = $237; //@line 19719
      $905 = $ReallocAsyncCtx6 + 172 | 0; //@line 19720
      HEAP32[$905 >> 2] = $84; //@line 19721
      $906 = $ReallocAsyncCtx6 + 176 | 0; //@line 19722
      HEAP32[$906 >> 2] = $238; //@line 19723
      $907 = $ReallocAsyncCtx6 + 180 | 0; //@line 19724
      HEAP32[$907 >> 2] = $86; //@line 19725
      $908 = $ReallocAsyncCtx6 + 184 | 0; //@line 19726
      HEAP32[$908 >> 2] = $90; //@line 19727
      $909 = $ReallocAsyncCtx6 + 188 | 0; //@line 19728
      HEAP32[$909 >> 2] = $92; //@line 19729
      $910 = $ReallocAsyncCtx6 + 192 | 0; //@line 19730
      HEAP32[$910 >> 2] = $94; //@line 19731
      $911 = $ReallocAsyncCtx6 + 196 | 0; //@line 19732
      HEAP32[$911 >> 2] = $96; //@line 19733
      $912 = $ReallocAsyncCtx6 + 200 | 0; //@line 19734
      HEAP32[$912 >> 2] = $AsyncRetVal; //@line 19735
      $913 = $ReallocAsyncCtx6 + 204 | 0; //@line 19736
      HEAP32[$913 >> 2] = $98; //@line 19737
      $914 = $ReallocAsyncCtx6 + 208 | 0; //@line 19738
      HEAP32[$914 >> 2] = $234; //@line 19739
      $915 = $ReallocAsyncCtx6 + 212 | 0; //@line 19740
      HEAP32[$915 >> 2] = $100; //@line 19741
      $916 = $ReallocAsyncCtx6 + 216 | 0; //@line 19742
      HEAP32[$916 >> 2] = $104; //@line 19743
      $917 = $ReallocAsyncCtx6 + 220 | 0; //@line 19744
      HEAP32[$917 >> 2] = $106; //@line 19745
      $918 = $ReallocAsyncCtx6 + 224 | 0; //@line 19746
      HEAP32[$918 >> 2] = $110; //@line 19747
      $919 = $ReallocAsyncCtx6 + 228 | 0; //@line 19748
      HEAP32[$919 >> 2] = $114; //@line 19749
      $920 = $ReallocAsyncCtx6 + 232 | 0; //@line 19750
      HEAP32[$920 >> 2] = $116; //@line 19751
      $921 = $ReallocAsyncCtx6 + 236 | 0; //@line 19752
      HEAP32[$921 >> 2] = $118; //@line 19753
      $922 = $ReallocAsyncCtx6 + 240 | 0; //@line 19754
      HEAP32[$922 >> 2] = $122; //@line 19755
      $923 = $ReallocAsyncCtx6 + 244 | 0; //@line 19756
      HEAP32[$923 >> 2] = $124; //@line 19757
      $924 = $ReallocAsyncCtx6 + 248 | 0; //@line 19758
      HEAP32[$924 >> 2] = $126; //@line 19759
      $925 = $ReallocAsyncCtx6 + 252 | 0; //@line 19760
      HEAP32[$925 >> 2] = $236; //@line 19761
      $926 = $ReallocAsyncCtx6 + 256 | 0; //@line 19762
      HEAP32[$926 >> 2] = $128; //@line 19763
      $927 = $ReallocAsyncCtx6 + 260 | 0; //@line 19764
      HEAP32[$927 >> 2] = $236; //@line 19765
      $928 = $ReallocAsyncCtx6 + 264 | 0; //@line 19766
      HEAP32[$928 >> 2] = $130; //@line 19767
      sp = STACKTOP; //@line 19768
      return;
     }
     HEAP8[___async_retval >> 0] = $862; //@line 19772
     ___async_unwind = 0; //@line 19773
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 19774
     $863 = $ReallocAsyncCtx6 + 4 | 0; //@line 19775
     HEAP32[$863 >> 2] = $2; //@line 19776
     $864 = $ReallocAsyncCtx6 + 8 | 0; //@line 19777
     HEAP32[$864 >> 2] = $82; //@line 19778
     $865 = $ReallocAsyncCtx6 + 12 | 0; //@line 19779
     HEAP32[$865 >> 2] = $4; //@line 19780
     $866 = $ReallocAsyncCtx6 + 16 | 0; //@line 19781
     HEAP32[$866 >> 2] = $6; //@line 19782
     $867 = $ReallocAsyncCtx6 + 20 | 0; //@line 19783
     HEAP32[$867 >> 2] = $232; //@line 19784
     $868 = $ReallocAsyncCtx6 + 24 | 0; //@line 19785
     HEAP32[$868 >> 2] = $8; //@line 19786
     $869 = $ReallocAsyncCtx6 + 28 | 0; //@line 19787
     HEAP32[$869 >> 2] = $10; //@line 19788
     $870 = $ReallocAsyncCtx6 + 32 | 0; //@line 19789
     HEAP32[$870 >> 2] = $12; //@line 19790
     $871 = $ReallocAsyncCtx6 + 36 | 0; //@line 19791
     HEAP32[$871 >> 2] = $233; //@line 19792
     $872 = $ReallocAsyncCtx6 + 40 | 0; //@line 19793
     HEAP32[$872 >> 2] = $14; //@line 19794
     $873 = $ReallocAsyncCtx6 + 44 | 0; //@line 19795
     HEAP32[$873 >> 2] = $16; //@line 19796
     $874 = $ReallocAsyncCtx6 + 48 | 0; //@line 19797
     HEAP32[$874 >> 2] = $20; //@line 19798
     $875 = $ReallocAsyncCtx6 + 52 | 0; //@line 19799
     HEAP32[$875 >> 2] = $22; //@line 19800
     $876 = $ReallocAsyncCtx6 + 56 | 0; //@line 19801
     HEAP32[$876 >> 2] = $24; //@line 19802
     $877 = $ReallocAsyncCtx6 + 60 | 0; //@line 19803
     HEAP32[$877 >> 2] = $28; //@line 19804
     $878 = $ReallocAsyncCtx6 + 64 | 0; //@line 19805
     HEAP32[$878 >> 2] = $AsyncRetVal; //@line 19806
     $879 = $ReallocAsyncCtx6 + 68 | 0; //@line 19807
     HEAP32[$879 >> 2] = $30; //@line 19808
     $880 = $ReallocAsyncCtx6 + 72 | 0; //@line 19809
     HEAP32[$880 >> 2] = $32; //@line 19810
     $881 = $ReallocAsyncCtx6 + 76 | 0; //@line 19811
     HEAP32[$881 >> 2] = $34; //@line 19812
     $882 = $ReallocAsyncCtx6 + 80 | 0; //@line 19813
     HEAP32[$882 >> 2] = $$0208$i; //@line 19814
     $883 = $ReallocAsyncCtx6 + 84 | 0; //@line 19815
     HEAP32[$883 >> 2] = $36; //@line 19816
     $884 = $ReallocAsyncCtx6 + 88 | 0; //@line 19817
     HEAP32[$884 >> 2] = $38; //@line 19818
     $885 = $ReallocAsyncCtx6 + 92 | 0; //@line 19819
     HEAP32[$885 >> 2] = $40; //@line 19820
     $886 = $ReallocAsyncCtx6 + 96 | 0; //@line 19821
     HEAP32[$886 >> 2] = $42; //@line 19822
     $887 = $ReallocAsyncCtx6 + 100 | 0; //@line 19823
     HEAP32[$887 >> 2] = $44; //@line 19824
     $888 = $ReallocAsyncCtx6 + 104 | 0; //@line 19825
     HEAP32[$888 >> 2] = $46; //@line 19826
     $889 = $ReallocAsyncCtx6 + 108 | 0; //@line 19827
     HEAP32[$889 >> 2] = $50; //@line 19828
     $890 = $ReallocAsyncCtx6 + 112 | 0; //@line 19829
     HEAP32[$890 >> 2] = $52; //@line 19830
     $891 = $ReallocAsyncCtx6 + 116 | 0; //@line 19831
     HEAP32[$891 >> 2] = $54; //@line 19832
     $892 = $ReallocAsyncCtx6 + 120 | 0; //@line 19833
     HEAP32[$892 >> 2] = $58; //@line 19834
     $893 = $ReallocAsyncCtx6 + 124 | 0; //@line 19835
     HEAP32[$893 >> 2] = $62; //@line 19836
     $894 = $ReallocAsyncCtx6 + 128 | 0; //@line 19837
     HEAP32[$894 >> 2] = $133; //@line 19838
     $895 = $ReallocAsyncCtx6 + 132 | 0; //@line 19839
     HEAP32[$895 >> 2] = $64; //@line 19840
     $896 = $ReallocAsyncCtx6 + 136 | 0; //@line 19841
     HEAP32[$896 >> 2] = $66; //@line 19842
     $897 = $ReallocAsyncCtx6 + 140 | 0; //@line 19843
     HEAP32[$897 >> 2] = $70; //@line 19844
     $898 = $ReallocAsyncCtx6 + 144 | 0; //@line 19845
     HEAP32[$898 >> 2] = $72; //@line 19846
     $899 = $ReallocAsyncCtx6 + 148 | 0; //@line 19847
     HEAP32[$899 >> 2] = $74; //@line 19848
     $900 = $ReallocAsyncCtx6 + 152 | 0; //@line 19849
     HEAP32[$900 >> 2] = $76; //@line 19850
     $901 = $ReallocAsyncCtx6 + 156 | 0; //@line 19851
     HEAP32[$901 >> 2] = $78; //@line 19852
     $902 = $ReallocAsyncCtx6 + 160 | 0; //@line 19853
     HEAP32[$902 >> 2] = $80; //@line 19854
     $903 = $ReallocAsyncCtx6 + 164 | 0; //@line 19855
     HEAP32[$903 >> 2] = $82; //@line 19856
     $904 = $ReallocAsyncCtx6 + 168 | 0; //@line 19857
     HEAP32[$904 >> 2] = $237; //@line 19858
     $905 = $ReallocAsyncCtx6 + 172 | 0; //@line 19859
     HEAP32[$905 >> 2] = $84; //@line 19860
     $906 = $ReallocAsyncCtx6 + 176 | 0; //@line 19861
     HEAP32[$906 >> 2] = $238; //@line 19862
     $907 = $ReallocAsyncCtx6 + 180 | 0; //@line 19863
     HEAP32[$907 >> 2] = $86; //@line 19864
     $908 = $ReallocAsyncCtx6 + 184 | 0; //@line 19865
     HEAP32[$908 >> 2] = $90; //@line 19866
     $909 = $ReallocAsyncCtx6 + 188 | 0; //@line 19867
     HEAP32[$909 >> 2] = $92; //@line 19868
     $910 = $ReallocAsyncCtx6 + 192 | 0; //@line 19869
     HEAP32[$910 >> 2] = $94; //@line 19870
     $911 = $ReallocAsyncCtx6 + 196 | 0; //@line 19871
     HEAP32[$911 >> 2] = $96; //@line 19872
     $912 = $ReallocAsyncCtx6 + 200 | 0; //@line 19873
     HEAP32[$912 >> 2] = $AsyncRetVal; //@line 19874
     $913 = $ReallocAsyncCtx6 + 204 | 0; //@line 19875
     HEAP32[$913 >> 2] = $98; //@line 19876
     $914 = $ReallocAsyncCtx6 + 208 | 0; //@line 19877
     HEAP32[$914 >> 2] = $234; //@line 19878
     $915 = $ReallocAsyncCtx6 + 212 | 0; //@line 19879
     HEAP32[$915 >> 2] = $100; //@line 19880
     $916 = $ReallocAsyncCtx6 + 216 | 0; //@line 19881
     HEAP32[$916 >> 2] = $104; //@line 19882
     $917 = $ReallocAsyncCtx6 + 220 | 0; //@line 19883
     HEAP32[$917 >> 2] = $106; //@line 19884
     $918 = $ReallocAsyncCtx6 + 224 | 0; //@line 19885
     HEAP32[$918 >> 2] = $110; //@line 19886
     $919 = $ReallocAsyncCtx6 + 228 | 0; //@line 19887
     HEAP32[$919 >> 2] = $114; //@line 19888
     $920 = $ReallocAsyncCtx6 + 232 | 0; //@line 19889
     HEAP32[$920 >> 2] = $116; //@line 19890
     $921 = $ReallocAsyncCtx6 + 236 | 0; //@line 19891
     HEAP32[$921 >> 2] = $118; //@line 19892
     $922 = $ReallocAsyncCtx6 + 240 | 0; //@line 19893
     HEAP32[$922 >> 2] = $122; //@line 19894
     $923 = $ReallocAsyncCtx6 + 244 | 0; //@line 19895
     HEAP32[$923 >> 2] = $124; //@line 19896
     $924 = $ReallocAsyncCtx6 + 248 | 0; //@line 19897
     HEAP32[$924 >> 2] = $126; //@line 19898
     $925 = $ReallocAsyncCtx6 + 252 | 0; //@line 19899
     HEAP32[$925 >> 2] = $236; //@line 19900
     $926 = $ReallocAsyncCtx6 + 256 | 0; //@line 19901
     HEAP32[$926 >> 2] = $128; //@line 19902
     $927 = $ReallocAsyncCtx6 + 260 | 0; //@line 19903
     HEAP32[$927 >> 2] = $236; //@line 19904
     $928 = $ReallocAsyncCtx6 + 264 | 0; //@line 19905
     HEAP32[$928 >> 2] = $130; //@line 19906
     sp = STACKTOP; //@line 19907
     return;
    }
   case 84:
    {
     _mbed_tracef(2, 3737, 5086, $106); //@line 19912
     break L6;
     break;
    }
   case 90:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 19917
     break L6;
     break;
    }
   case 96:
    {
     _mbed_tracef(2, 3737, 5208, $84); //@line 19922
     break L6;
     break;
    }
   case 102:
    {
     _mbed_tracef(2, 3737, 5269, $22); //@line 19927
     break L6;
     break;
    }
   case 108:
    {
     _mbed_tracef(2, 3737, 5329, $42); //@line 19932
     break L6;
     break;
    }
   case 112:
    {
     _mbed_tracef(2, 3737, 5389, $128); //@line 19937
     break L6;
     break;
    }
   case 115:
    {
     if (($241 - $233 | 0) >= ($232 | 0)) {
      $$0 = $AsyncRetVal; //@line 19946
      $1041 = ___async_retval; //@line 19947
      HEAP32[$1041 >> 2] = $$0; //@line 19948
      return;
     }
     if ((HEAP8[$241 >> 0] | 0) == -1) {
      $1031 = $241 + 1 | 0; //@line 19954
      HEAP32[$82 >> 2] = $1031; //@line 19955
      $1032 = $1031; //@line 19956
      $1034 = $233 - $1032 + $232 | 0; //@line 19958
      HEAP16[$AsyncRetVal + 24 >> 1] = $1034; //@line 19961
      if ($1034 & 65535 | 0) {
       HEAP32[$AsyncRetVal + 36 >> 2] = $1032; //@line 19966
       $$0 = $AsyncRetVal; //@line 19967
       $1041 = ___async_retval; //@line 19968
       HEAP32[$1041 >> 2] = $$0; //@line 19969
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $32); //@line 19973
     }
     HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 19976
     $$0 = $AsyncRetVal; //@line 19977
     $1041 = ___async_retval; //@line 19978
     HEAP32[$1041 >> 2] = $$0; //@line 19979
     return;
    }
   }
  } else {
   if (($158 & 255) <= 8) {
    $161 = $AsyncRetVal + 28 | 0; //@line 19987
    if (!(HEAP32[$161 >> 2] | 0)) {
     $164 = HEAP32[$122 >> 2] | 0; //@line 19991
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(256) | 0; //@line 19993
     $166 = FUNCTION_TABLE_ii[$164 & 15]($158 & 255) | 0; //@line 19994
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 19997
      $167 = $ReallocAsyncCtx2 + 4 | 0; //@line 19998
      HEAP32[$167 >> 2] = $2; //@line 19999
      $168 = $ReallocAsyncCtx2 + 8 | 0; //@line 20000
      HEAP32[$168 >> 2] = $4; //@line 20001
      $169 = $ReallocAsyncCtx2 + 12 | 0; //@line 20002
      HEAP32[$169 >> 2] = $6; //@line 20003
      $170 = $ReallocAsyncCtx2 + 16 | 0; //@line 20004
      HEAP32[$170 >> 2] = $8; //@line 20005
      $171 = $ReallocAsyncCtx2 + 20 | 0; //@line 20006
      HEAP32[$171 >> 2] = $10; //@line 20007
      $172 = $ReallocAsyncCtx2 + 24 | 0; //@line 20008
      HEAP32[$172 >> 2] = $12; //@line 20009
      $173 = $ReallocAsyncCtx2 + 28 | 0; //@line 20010
      HEAP32[$173 >> 2] = $14; //@line 20011
      $174 = $ReallocAsyncCtx2 + 32 | 0; //@line 20012
      HEAP32[$174 >> 2] = $16; //@line 20013
      $175 = $ReallocAsyncCtx2 + 36 | 0; //@line 20014
      HEAP32[$175 >> 2] = $20; //@line 20015
      $176 = $ReallocAsyncCtx2 + 40 | 0; //@line 20016
      HEAP32[$176 >> 2] = $22; //@line 20017
      $177 = $ReallocAsyncCtx2 + 44 | 0; //@line 20018
      HEAP32[$177 >> 2] = $24; //@line 20019
      $178 = $ReallocAsyncCtx2 + 48 | 0; //@line 20020
      HEAP32[$178 >> 2] = $28; //@line 20021
      $179 = $ReallocAsyncCtx2 + 52 | 0; //@line 20022
      HEAP32[$179 >> 2] = $AsyncRetVal; //@line 20023
      $180 = $ReallocAsyncCtx2 + 56 | 0; //@line 20024
      HEAP32[$180 >> 2] = $30; //@line 20025
      $181 = $ReallocAsyncCtx2 + 60 | 0; //@line 20026
      HEAP32[$181 >> 2] = $32; //@line 20027
      $182 = $ReallocAsyncCtx2 + 64 | 0; //@line 20028
      HEAP32[$182 >> 2] = $34; //@line 20029
      $183 = $ReallocAsyncCtx2 + 68 | 0; //@line 20030
      HEAP32[$183 >> 2] = $36; //@line 20031
      $184 = $ReallocAsyncCtx2 + 72 | 0; //@line 20032
      HEAP32[$184 >> 2] = $38; //@line 20033
      $185 = $ReallocAsyncCtx2 + 76 | 0; //@line 20034
      HEAP32[$185 >> 2] = $40; //@line 20035
      $186 = $ReallocAsyncCtx2 + 80 | 0; //@line 20036
      HEAP32[$186 >> 2] = $42; //@line 20037
      $187 = $ReallocAsyncCtx2 + 84 | 0; //@line 20038
      HEAP32[$187 >> 2] = $44; //@line 20039
      $188 = $ReallocAsyncCtx2 + 88 | 0; //@line 20040
      HEAP32[$188 >> 2] = $46; //@line 20041
      $189 = $ReallocAsyncCtx2 + 92 | 0; //@line 20042
      HEAP32[$189 >> 2] = $48; //@line 20043
      $190 = $ReallocAsyncCtx2 + 96 | 0; //@line 20044
      HEAP32[$190 >> 2] = $50; //@line 20045
      $191 = $ReallocAsyncCtx2 + 100 | 0; //@line 20046
      HEAP32[$191 >> 2] = $52; //@line 20047
      $192 = $ReallocAsyncCtx2 + 104 | 0; //@line 20048
      HEAP32[$192 >> 2] = $54; //@line 20049
      $193 = $ReallocAsyncCtx2 + 108 | 0; //@line 20050
      HEAP16[$193 >> 1] = $56; //@line 20051
      $194 = $ReallocAsyncCtx2 + 112 | 0; //@line 20052
      HEAP32[$194 >> 2] = $156; //@line 20053
      $195 = $ReallocAsyncCtx2 + 116 | 0; //@line 20054
      HEAP32[$195 >> 2] = $58; //@line 20055
      $196 = $ReallocAsyncCtx2 + 120 | 0; //@line 20056
      HEAP32[$196 >> 2] = $62; //@line 20057
      $197 = $ReallocAsyncCtx2 + 124 | 0; //@line 20058
      HEAP32[$197 >> 2] = $133; //@line 20059
      $198 = $ReallocAsyncCtx2 + 128 | 0; //@line 20060
      HEAP32[$198 >> 2] = $64; //@line 20061
      $199 = $ReallocAsyncCtx2 + 132 | 0; //@line 20062
      HEAP32[$199 >> 2] = $66; //@line 20063
      $200 = $ReallocAsyncCtx2 + 136 | 0; //@line 20064
      HEAP32[$200 >> 2] = $70; //@line 20065
      $201 = $ReallocAsyncCtx2 + 140 | 0; //@line 20066
      HEAP32[$201 >> 2] = $72; //@line 20067
      $202 = $ReallocAsyncCtx2 + 144 | 0; //@line 20068
      HEAP32[$202 >> 2] = $74; //@line 20069
      $203 = $ReallocAsyncCtx2 + 148 | 0; //@line 20070
      HEAP32[$203 >> 2] = $76; //@line 20071
      $204 = $ReallocAsyncCtx2 + 152 | 0; //@line 20072
      HEAP32[$204 >> 2] = $78; //@line 20073
      $205 = $ReallocAsyncCtx2 + 156 | 0; //@line 20074
      HEAP32[$205 >> 2] = $80; //@line 20075
      $206 = $ReallocAsyncCtx2 + 160 | 0; //@line 20076
      HEAP32[$206 >> 2] = $82; //@line 20077
      $207 = $ReallocAsyncCtx2 + 164 | 0; //@line 20078
      HEAP32[$207 >> 2] = $84; //@line 20079
      $208 = $ReallocAsyncCtx2 + 168 | 0; //@line 20080
      HEAP32[$208 >> 2] = $86; //@line 20081
      $209 = $ReallocAsyncCtx2 + 172 | 0; //@line 20082
      HEAP32[$209 >> 2] = $90; //@line 20083
      $210 = $ReallocAsyncCtx2 + 176 | 0; //@line 20084
      HEAP32[$210 >> 2] = $92; //@line 20085
      $211 = $ReallocAsyncCtx2 + 180 | 0; //@line 20086
      HEAP32[$211 >> 2] = $161; //@line 20087
      $212 = $ReallocAsyncCtx2 + 184 | 0; //@line 20088
      HEAP32[$212 >> 2] = $94; //@line 20089
      $213 = $ReallocAsyncCtx2 + 188 | 0; //@line 20090
      HEAP32[$213 >> 2] = $96; //@line 20091
      $214 = $ReallocAsyncCtx2 + 192 | 0; //@line 20092
      HEAP32[$214 >> 2] = $AsyncRetVal; //@line 20093
      $215 = $ReallocAsyncCtx2 + 196 | 0; //@line 20094
      HEAP32[$215 >> 2] = $98; //@line 20095
      $216 = $ReallocAsyncCtx2 + 200 | 0; //@line 20096
      HEAP32[$216 >> 2] = $100; //@line 20097
      $217 = $ReallocAsyncCtx2 + 204 | 0; //@line 20098
      HEAP32[$217 >> 2] = $102; //@line 20099
      $218 = $ReallocAsyncCtx2 + 208 | 0; //@line 20100
      HEAP32[$218 >> 2] = $104; //@line 20101
      $219 = $ReallocAsyncCtx2 + 212 | 0; //@line 20102
      HEAP32[$219 >> 2] = $106; //@line 20103
      $220 = $ReallocAsyncCtx2 + 216 | 0; //@line 20104
      HEAP32[$220 >> 2] = $110; //@line 20105
      $221 = $ReallocAsyncCtx2 + 220 | 0; //@line 20106
      HEAP32[$221 >> 2] = $112; //@line 20107
      $222 = $ReallocAsyncCtx2 + 224 | 0; //@line 20108
      HEAP32[$222 >> 2] = $114; //@line 20109
      $223 = $ReallocAsyncCtx2 + 228 | 0; //@line 20110
      HEAP32[$223 >> 2] = $116; //@line 20111
      $224 = $ReallocAsyncCtx2 + 232 | 0; //@line 20112
      HEAP32[$224 >> 2] = $118; //@line 20113
      $225 = $ReallocAsyncCtx2 + 236 | 0; //@line 20114
      HEAP32[$225 >> 2] = $122; //@line 20115
      $226 = $ReallocAsyncCtx2 + 240 | 0; //@line 20116
      HEAP32[$226 >> 2] = $124; //@line 20117
      $227 = $ReallocAsyncCtx2 + 244 | 0; //@line 20118
      HEAP32[$227 >> 2] = $126; //@line 20119
      $228 = $ReallocAsyncCtx2 + 248 | 0; //@line 20120
      HEAP32[$228 >> 2] = $128; //@line 20121
      $229 = $ReallocAsyncCtx2 + 252 | 0; //@line 20122
      HEAP32[$229 >> 2] = $130; //@line 20123
      sp = STACKTOP; //@line 20124
      return;
     }
     HEAP32[___async_retval >> 2] = $166; //@line 20128
     ___async_unwind = 0; //@line 20129
     HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 20130
     $167 = $ReallocAsyncCtx2 + 4 | 0; //@line 20131
     HEAP32[$167 >> 2] = $2; //@line 20132
     $168 = $ReallocAsyncCtx2 + 8 | 0; //@line 20133
     HEAP32[$168 >> 2] = $4; //@line 20134
     $169 = $ReallocAsyncCtx2 + 12 | 0; //@line 20135
     HEAP32[$169 >> 2] = $6; //@line 20136
     $170 = $ReallocAsyncCtx2 + 16 | 0; //@line 20137
     HEAP32[$170 >> 2] = $8; //@line 20138
     $171 = $ReallocAsyncCtx2 + 20 | 0; //@line 20139
     HEAP32[$171 >> 2] = $10; //@line 20140
     $172 = $ReallocAsyncCtx2 + 24 | 0; //@line 20141
     HEAP32[$172 >> 2] = $12; //@line 20142
     $173 = $ReallocAsyncCtx2 + 28 | 0; //@line 20143
     HEAP32[$173 >> 2] = $14; //@line 20144
     $174 = $ReallocAsyncCtx2 + 32 | 0; //@line 20145
     HEAP32[$174 >> 2] = $16; //@line 20146
     $175 = $ReallocAsyncCtx2 + 36 | 0; //@line 20147
     HEAP32[$175 >> 2] = $20; //@line 20148
     $176 = $ReallocAsyncCtx2 + 40 | 0; //@line 20149
     HEAP32[$176 >> 2] = $22; //@line 20150
     $177 = $ReallocAsyncCtx2 + 44 | 0; //@line 20151
     HEAP32[$177 >> 2] = $24; //@line 20152
     $178 = $ReallocAsyncCtx2 + 48 | 0; //@line 20153
     HEAP32[$178 >> 2] = $28; //@line 20154
     $179 = $ReallocAsyncCtx2 + 52 | 0; //@line 20155
     HEAP32[$179 >> 2] = $AsyncRetVal; //@line 20156
     $180 = $ReallocAsyncCtx2 + 56 | 0; //@line 20157
     HEAP32[$180 >> 2] = $30; //@line 20158
     $181 = $ReallocAsyncCtx2 + 60 | 0; //@line 20159
     HEAP32[$181 >> 2] = $32; //@line 20160
     $182 = $ReallocAsyncCtx2 + 64 | 0; //@line 20161
     HEAP32[$182 >> 2] = $34; //@line 20162
     $183 = $ReallocAsyncCtx2 + 68 | 0; //@line 20163
     HEAP32[$183 >> 2] = $36; //@line 20164
     $184 = $ReallocAsyncCtx2 + 72 | 0; //@line 20165
     HEAP32[$184 >> 2] = $38; //@line 20166
     $185 = $ReallocAsyncCtx2 + 76 | 0; //@line 20167
     HEAP32[$185 >> 2] = $40; //@line 20168
     $186 = $ReallocAsyncCtx2 + 80 | 0; //@line 20169
     HEAP32[$186 >> 2] = $42; //@line 20170
     $187 = $ReallocAsyncCtx2 + 84 | 0; //@line 20171
     HEAP32[$187 >> 2] = $44; //@line 20172
     $188 = $ReallocAsyncCtx2 + 88 | 0; //@line 20173
     HEAP32[$188 >> 2] = $46; //@line 20174
     $189 = $ReallocAsyncCtx2 + 92 | 0; //@line 20175
     HEAP32[$189 >> 2] = $48; //@line 20176
     $190 = $ReallocAsyncCtx2 + 96 | 0; //@line 20177
     HEAP32[$190 >> 2] = $50; //@line 20178
     $191 = $ReallocAsyncCtx2 + 100 | 0; //@line 20179
     HEAP32[$191 >> 2] = $52; //@line 20180
     $192 = $ReallocAsyncCtx2 + 104 | 0; //@line 20181
     HEAP32[$192 >> 2] = $54; //@line 20182
     $193 = $ReallocAsyncCtx2 + 108 | 0; //@line 20183
     HEAP16[$193 >> 1] = $56; //@line 20184
     $194 = $ReallocAsyncCtx2 + 112 | 0; //@line 20185
     HEAP32[$194 >> 2] = $156; //@line 20186
     $195 = $ReallocAsyncCtx2 + 116 | 0; //@line 20187
     HEAP32[$195 >> 2] = $58; //@line 20188
     $196 = $ReallocAsyncCtx2 + 120 | 0; //@line 20189
     HEAP32[$196 >> 2] = $62; //@line 20190
     $197 = $ReallocAsyncCtx2 + 124 | 0; //@line 20191
     HEAP32[$197 >> 2] = $133; //@line 20192
     $198 = $ReallocAsyncCtx2 + 128 | 0; //@line 20193
     HEAP32[$198 >> 2] = $64; //@line 20194
     $199 = $ReallocAsyncCtx2 + 132 | 0; //@line 20195
     HEAP32[$199 >> 2] = $66; //@line 20196
     $200 = $ReallocAsyncCtx2 + 136 | 0; //@line 20197
     HEAP32[$200 >> 2] = $70; //@line 20198
     $201 = $ReallocAsyncCtx2 + 140 | 0; //@line 20199
     HEAP32[$201 >> 2] = $72; //@line 20200
     $202 = $ReallocAsyncCtx2 + 144 | 0; //@line 20201
     HEAP32[$202 >> 2] = $74; //@line 20202
     $203 = $ReallocAsyncCtx2 + 148 | 0; //@line 20203
     HEAP32[$203 >> 2] = $76; //@line 20204
     $204 = $ReallocAsyncCtx2 + 152 | 0; //@line 20205
     HEAP32[$204 >> 2] = $78; //@line 20206
     $205 = $ReallocAsyncCtx2 + 156 | 0; //@line 20207
     HEAP32[$205 >> 2] = $80; //@line 20208
     $206 = $ReallocAsyncCtx2 + 160 | 0; //@line 20209
     HEAP32[$206 >> 2] = $82; //@line 20210
     $207 = $ReallocAsyncCtx2 + 164 | 0; //@line 20211
     HEAP32[$207 >> 2] = $84; //@line 20212
     $208 = $ReallocAsyncCtx2 + 168 | 0; //@line 20213
     HEAP32[$208 >> 2] = $86; //@line 20214
     $209 = $ReallocAsyncCtx2 + 172 | 0; //@line 20215
     HEAP32[$209 >> 2] = $90; //@line 20216
     $210 = $ReallocAsyncCtx2 + 176 | 0; //@line 20217
     HEAP32[$210 >> 2] = $92; //@line 20218
     $211 = $ReallocAsyncCtx2 + 180 | 0; //@line 20219
     HEAP32[$211 >> 2] = $161; //@line 20220
     $212 = $ReallocAsyncCtx2 + 184 | 0; //@line 20221
     HEAP32[$212 >> 2] = $94; //@line 20222
     $213 = $ReallocAsyncCtx2 + 188 | 0; //@line 20223
     HEAP32[$213 >> 2] = $96; //@line 20224
     $214 = $ReallocAsyncCtx2 + 192 | 0; //@line 20225
     HEAP32[$214 >> 2] = $AsyncRetVal; //@line 20226
     $215 = $ReallocAsyncCtx2 + 196 | 0; //@line 20227
     HEAP32[$215 >> 2] = $98; //@line 20228
     $216 = $ReallocAsyncCtx2 + 200 | 0; //@line 20229
     HEAP32[$216 >> 2] = $100; //@line 20230
     $217 = $ReallocAsyncCtx2 + 204 | 0; //@line 20231
     HEAP32[$217 >> 2] = $102; //@line 20232
     $218 = $ReallocAsyncCtx2 + 208 | 0; //@line 20233
     HEAP32[$218 >> 2] = $104; //@line 20234
     $219 = $ReallocAsyncCtx2 + 212 | 0; //@line 20235
     HEAP32[$219 >> 2] = $106; //@line 20236
     $220 = $ReallocAsyncCtx2 + 216 | 0; //@line 20237
     HEAP32[$220 >> 2] = $110; //@line 20238
     $221 = $ReallocAsyncCtx2 + 220 | 0; //@line 20239
     HEAP32[$221 >> 2] = $112; //@line 20240
     $222 = $ReallocAsyncCtx2 + 224 | 0; //@line 20241
     HEAP32[$222 >> 2] = $114; //@line 20242
     $223 = $ReallocAsyncCtx2 + 228 | 0; //@line 20243
     HEAP32[$223 >> 2] = $116; //@line 20244
     $224 = $ReallocAsyncCtx2 + 232 | 0; //@line 20245
     HEAP32[$224 >> 2] = $118; //@line 20246
     $225 = $ReallocAsyncCtx2 + 236 | 0; //@line 20247
     HEAP32[$225 >> 2] = $122; //@line 20248
     $226 = $ReallocAsyncCtx2 + 240 | 0; //@line 20249
     HEAP32[$226 >> 2] = $124; //@line 20250
     $227 = $ReallocAsyncCtx2 + 244 | 0; //@line 20251
     HEAP32[$227 >> 2] = $126; //@line 20252
     $228 = $ReallocAsyncCtx2 + 248 | 0; //@line 20253
     HEAP32[$228 >> 2] = $128; //@line 20254
     $229 = $ReallocAsyncCtx2 + 252 | 0; //@line 20255
     HEAP32[$229 >> 2] = $130; //@line 20256
     sp = STACKTOP; //@line 20257
     return;
    }
   }
   _mbed_tracef(2, 3737, 3895, $26); //@line 20261
  }
 } while (0);
 HEAP32[$AsyncRetVal + 4 >> 2] = 1; //@line 20265
 $$0 = $AsyncRetVal; //@line 20266
 $1041 = ___async_retval; //@line 20267
 HEAP32[$1041 >> 2] = $$0; //@line 20268
 return;
}
function _sn_coap_parser__async_cb_79($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$i$reg2mem$0 = 0, $$1202$i$reg2mem$1 = 0, $$1202$i$reg2mem$2 = 0, $$1202$in$i = 0, $$1202$in$i$reg2mem$0 = 0, $$1202$in$i$reg2mem$1 = 0, $$reg2mem$0 = 0, $$reg2mem$1 = 0, $$reg2mem46$0 = 0, $$reg2mem46$1 = 0, $$reg2mem46$2 = 0, $$reg2mem46$3 = 0, $$reg2mem69$0 = 0, $$reg2mem69$1 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $147 = 0, $150 = 0, $16 = 0, $164 = 0, $167 = 0, $169 = 0, $18 = 0, $181 = 0, $184 = 0, $185 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $284 = 0, $285 = 0, $290 = 0, $293 = 0, $297 = 0, $30 = 0, $300 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $377 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $447 = 0, $450 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $527 = 0, $528 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $602 = 0, $605 = 0, $606 = 0, $611 = 0, $614 = 0, $616 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $757 = 0, $76 = 0, $760 = 0, $761 = 0, $766 = 0, $769 = 0, $771 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $844 = 0, $847 = 0, $848 = 0, $853 = 0, $856 = 0, $86 = 0, $860 = 0, $863 = 0, $864 = 0, $869 = 0, $872 = 0, $876 = 0, $879 = 0, $88 = 0, $880 = 0, $885 = 0, $888 = 0, $892 = 0, $893 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $907 = 0, $913 = 0, $914 = 0, $919 = 0, $92 = 0, $920 = 0, $925 = 0, $928 = 0, $932 = 0, $933 = 0, $94 = 0, $941 = 0, $942 = 0, $944 = 0, $951 = 0, $952 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc$i$reg2mem$0 = 0, $trunc276$i = 0, $trunc277$i = 0, dest = 0, label = 0, sp = 0, stop = 0, $290$looptemp = 0, $611$looptemp = 0, $766$looptemp = 0, $853$looptemp = 0, $869$looptemp = 0, $885$looptemp = 0, $904$looptemp = 0, $925$looptemp = 0, $278$looptemp = 0;
 sp = STACKTOP; //@line 54
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 56
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 58
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 60
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 62
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 64
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 66
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 68
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 70
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 72
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 74
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 76
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 78
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 80
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 82
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 84
 $32 = HEAP16[$0 + 64 >> 1] | 0; //@line 86
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 88
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 90
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 92
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 94
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 96
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 98
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 100
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 102
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 104
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 106
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 108
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 110
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 112
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 114
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 116
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 118
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 120
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 122
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 124
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 126
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 128
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 130
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 132
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 134
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 136
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 138
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 140
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 142
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 144
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 146
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 148
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 150
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 152
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 154
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 156
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 158
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 160
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 162
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 164
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 166
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 168
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 170
 $118 = HEAP16[$0 + 236 >> 1] | 0; //@line 172
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 174
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 176
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 178
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 180
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 182
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 184
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 186
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 188
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 190
 $138 = HEAP32[$0 + 276 >> 2] | 0; //@line 192
 $140 = HEAP32[$0 + 280 >> 2] | 0; //@line 194
 $142 = HEAP32[$0 + 284 >> 2] | 0; //@line 196
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 198
 HEAP32[$136 >> 2] = $AsyncRetVal; //@line 199
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3737, 3786, $24); //@line 203
   label = 22; //@line 204
  } else {
   dest = $AsyncRetVal; //@line 206
   stop = dest + 68 | 0; //@line 206
   do {
    HEAP32[dest >> 2] = 0; //@line 206
    dest = dest + 4 | 0; //@line 206
   } while ((dest | 0) < (stop | 0));
   $264 = HEAP32[$140 >> 2] | 0; //@line 207
   HEAP32[$264 + 16 >> 2] = 60; //@line 209
   $266 = $264 + 28 | 0; //@line 210
   HEAP32[$264 + 12 >> 2] = -1; //@line 212
   HEAP32[$266 >> 2] = -1; //@line 213
   HEAP32[$266 + 4 >> 2] = -1; //@line 213
   HEAP32[$266 + 8 >> 2] = -1; //@line 213
   HEAP32[$266 + 12 >> 2] = -1; //@line 213
   if (!$264) {
    label = 22; //@line 216
   } else {
    $$1202$i$reg2mem$0 = $32; //@line 218
    $$1202$in$i$reg2mem$0 = $46; //@line 218
    $$reg2mem$0 = $2; //@line 218
    $$reg2mem46$0 = $42; //@line 218
    $$reg2mem69$0 = $70; //@line 218
    $trunc$i$reg2mem$0 = $118; //@line 218
    L5 : while (1) {
     switch ($trunc$i$reg2mem$0 << 16 >> 16) {
     case 35:
      {
       label = 35; //@line 222
       break L5;
       break;
      }
     case 4:
      {
       label = 41; //@line 227
       break L5;
       break;
      }
     case 3:
      {
       label = 44; //@line 232
       break L5;
       break;
      }
     case 8:
      {
       label = 50; //@line 237
       break L5;
       break;
      }
     case 20:
      {
       label = 61; //@line 242
       break L5;
       break;
      }
     case 11:
      {
       $$1202$i$reg2mem$2 = $$1202$i$reg2mem$0; //@line 247
       $$reg2mem$1 = $$reg2mem$0; //@line 247
       $$reg2mem46$2 = $$reg2mem46$0; //@line 247
       label = 64; //@line 248
       break L5;
       break;
      }
     case 15:
      {
       label = 73; //@line 253
       break L5;
       break;
      }
     case 12:
      {
       $$1202$i$reg2mem$1 = $$1202$i$reg2mem$0; //@line 258
       $$1202$in$i$reg2mem$1 = $$1202$in$i$reg2mem$0; //@line 258
       $$reg2mem46$1 = $$reg2mem46$0; //@line 258
       $$reg2mem69$1 = $$reg2mem69$0; //@line 258
       label = 24; //@line 259
       break;
      }
     case 14:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 31; //@line 265
        break L5;
       }
       $284 = $$reg2mem69$0 + 1 | 0; //@line 268
       HEAP32[$92 >> 2] = $284; //@line 269
       $285 = $$1202$in$i$reg2mem$0 & 255; //@line 270
       if (!($285 << 24 >> 24)) {
        $$0$lcssa$i223$i = 0; //@line 273
       } else {
        $$045$i221$i = $285; //@line 275
        $$06$i220$i = 0; //@line 275
        $290 = $284; //@line 275
        while (1) {
         $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 277
         $290$looptemp = $290;
         $290 = $290 + 1 | 0; //@line 279
         HEAP32[$92 >> 2] = $290; //@line 280
         $293 = $$06$i220$i << 8 | HEAPU8[$290$looptemp >> 0]; //@line 283
         if (!($$045$i221$i << 24 >> 24)) {
          $$0$lcssa$i223$i = $293; //@line 286
          break;
         } else {
          $$06$i220$i = $293; //@line 289
         }
        }
       }
       HEAP32[(HEAP32[$140 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 295
       $$reg2mem46$3 = $$reg2mem46$0; //@line 296
       break;
      }
     case 7:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 57; //@line 302
        break L5;
       }
       $602 = (HEAP32[$140 >> 2] | 0) + 28 | 0; //@line 306
       if ((HEAP32[$602 >> 2] | 0) != -1) {
        label = 57; //@line 310
        break L5;
       }
       $605 = $$reg2mem69$0 + 1 | 0; //@line 313
       HEAP32[$92 >> 2] = $605; //@line 314
       $606 = $$1202$in$i$reg2mem$0 & 255; //@line 315
       if (!($606 << 24 >> 24)) {
        $$0$lcssa$i265$i = 0; //@line 318
       } else {
        $$045$i263$i = $606; //@line 320
        $$06$i262$i = 0; //@line 320
        $611 = $605; //@line 320
        while (1) {
         $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 322
         $611$looptemp = $611;
         $611 = $611 + 1 | 0; //@line 324
         HEAP32[$92 >> 2] = $611; //@line 325
         $614 = $$06$i262$i << 8 | HEAPU8[$611$looptemp >> 0]; //@line 328
         if (!($$045$i263$i << 24 >> 24)) {
          $$0$lcssa$i265$i = $614; //@line 331
          break;
         } else {
          $$06$i262$i = $614; //@line 334
         }
        }
       }
       HEAP32[$602 >> 2] = $$0$lcssa$i265$i; //@line 338
       $$reg2mem46$3 = $$reg2mem46$0; //@line 339
       break;
      }
     case 6:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 69; //@line 345
        break L5;
       }
       $757 = (HEAP32[$140 >> 2] | 0) + 32 | 0; //@line 349
       if ((HEAP32[$757 >> 2] | 0) != -1) {
        label = 69; //@line 353
        break L5;
       }
       $760 = $$reg2mem69$0 + 1 | 0; //@line 356
       HEAP32[$92 >> 2] = $760; //@line 357
       $761 = $$1202$in$i$reg2mem$0 & 255; //@line 358
       if (!($761 << 24 >> 24)) {
        $$0$lcssa$i272$i = 0; //@line 361
       } else {
        $$045$i270$i = $761; //@line 363
        $$06$i269$i = 0; //@line 363
        $766 = $760; //@line 363
        while (1) {
         $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 365
         $766$looptemp = $766;
         $766 = $766 + 1 | 0; //@line 367
         HEAP32[$92 >> 2] = $766; //@line 368
         $769 = $$06$i269$i << 8 | HEAPU8[$766$looptemp >> 0]; //@line 371
         if (!($$045$i270$i << 24 >> 24)) {
          $$0$lcssa$i272$i = $769; //@line 374
          break;
         } else {
          $$06$i269$i = $769; //@line 377
         }
        }
       }
       HEAP32[$757 >> 2] = $$0$lcssa$i272$i; //@line 381
       $$reg2mem46$3 = $$reg2mem46$0; //@line 382
       break;
      }
     case 23:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        label = 78; //@line 388
        break L5;
       }
       $844 = (HEAP32[$140 >> 2] | 0) + 40 | 0; //@line 392
       if ((HEAP32[$844 >> 2] | 0) != -1) {
        label = 78; //@line 396
        break L5;
       }
       $847 = $$reg2mem69$0 + 1 | 0; //@line 399
       HEAP32[$92 >> 2] = $847; //@line 400
       $848 = $$1202$in$i$reg2mem$0 & 255; //@line 401
       if (!($848 << 24 >> 24)) {
        $$0$lcssa$i258$i = 0; //@line 404
       } else {
        $$045$i256$i = $848; //@line 406
        $$06$i255$i = 0; //@line 406
        $853 = $847; //@line 406
        while (1) {
         $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 408
         $853$looptemp = $853;
         $853 = $853 + 1 | 0; //@line 410
         HEAP32[$92 >> 2] = $853; //@line 411
         $856 = $$06$i255$i << 8 | HEAPU8[$853$looptemp >> 0]; //@line 414
         if (!($$045$i256$i << 24 >> 24)) {
          $$0$lcssa$i258$i = $856; //@line 417
          break;
         } else {
          $$06$i255$i = $856; //@line 420
         }
        }
       }
       HEAP32[$844 >> 2] = $$0$lcssa$i258$i; //@line 424
       $$reg2mem46$3 = $$reg2mem46$0; //@line 425
       break;
      }
     case 27:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 3) {
        label = 84; //@line 431
        break L5;
       }
       $860 = (HEAP32[$140 >> 2] | 0) + 36 | 0; //@line 435
       if ((HEAP32[$860 >> 2] | 0) != -1) {
        label = 84; //@line 439
        break L5;
       }
       $863 = $$reg2mem69$0 + 1 | 0; //@line 442
       HEAP32[$92 >> 2] = $863; //@line 443
       $864 = $$1202$in$i$reg2mem$0 & 255; //@line 444
       if (!($864 << 24 >> 24)) {
        $$0$lcssa$i251$i = 0; //@line 447
       } else {
        $$045$i249$i = $864; //@line 449
        $$06$i248$i = 0; //@line 449
        $869 = $863; //@line 449
        while (1) {
         $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 451
         $869$looptemp = $869;
         $869 = $869 + 1 | 0; //@line 453
         HEAP32[$92 >> 2] = $869; //@line 454
         $872 = $$06$i248$i << 8 | HEAPU8[$869$looptemp >> 0]; //@line 457
         if (!($$045$i249$i << 24 >> 24)) {
          $$0$lcssa$i251$i = $872; //@line 460
          break;
         } else {
          $$06$i248$i = $872; //@line 463
         }
        }
       }
       HEAP32[$860 >> 2] = $$0$lcssa$i251$i; //@line 467
       $$reg2mem46$3 = $$reg2mem46$0; //@line 468
       break;
      }
     case 17:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 2) {
        label = 90; //@line 474
        break L5;
       }
       $876 = (HEAP32[$140 >> 2] | 0) + 12 | 0; //@line 478
       if ((HEAP32[$876 >> 2] | 0) != -1) {
        label = 90; //@line 482
        break L5;
       }
       $879 = $$reg2mem69$0 + 1 | 0; //@line 485
       HEAP32[$92 >> 2] = $879; //@line 486
       $880 = $$1202$in$i$reg2mem$0 & 255; //@line 487
       if (!($880 << 24 >> 24)) {
        $$0$lcssa$i244$i = 0; //@line 490
       } else {
        $$045$i242$i = $880; //@line 492
        $$06$i241$i = 0; //@line 492
        $885 = $879; //@line 492
        while (1) {
         $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 494
         $885$looptemp = $885;
         $885 = $885 + 1 | 0; //@line 496
         HEAP32[$92 >> 2] = $885; //@line 497
         $888 = $$06$i241$i << 8 | HEAPU8[$885$looptemp >> 0]; //@line 500
         if (!($$045$i242$i << 24 >> 24)) {
          $$0$lcssa$i244$i = $888; //@line 503
          break;
         } else {
          $$06$i241$i = $888; //@line 506
         }
        }
       }
       HEAP32[$876 >> 2] = $$0$lcssa$i244$i; //@line 510
       $$reg2mem46$3 = $$reg2mem46$0; //@line 511
       break;
      }
     case 60:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 96; //@line 517
        break L5;
       }
       $892 = (HEAP32[$140 >> 2] | 0) + 1 | 0; //@line 521
       $893 = HEAP8[$892 >> 0] | 0; //@line 522
       if ($893 & 1) {
        label = 96; //@line 526
        break L5;
       }
       HEAP8[$892 >> 0] = $893 | 1; //@line 530
       $898 = (HEAP32[$92 >> 2] | 0) + 1 | 0; //@line 532
       HEAP32[$92 >> 2] = $898; //@line 533
       $899 = $$1202$in$i$reg2mem$0 & 255; //@line 534
       if (!($899 << 24 >> 24)) {
        $$0$lcssa$i237$i = 0; //@line 537
       } else {
        $$045$i235$i = $899; //@line 539
        $$06$i234$i = 0; //@line 539
        $904 = $898; //@line 539
        while (1) {
         $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 541
         $904$looptemp = $904;
         $904 = $904 + 1 | 0; //@line 543
         HEAP32[$92 >> 2] = $904; //@line 544
         $907 = $$06$i234$i << 8 | HEAPU8[$904$looptemp >> 0]; //@line 547
         if (!($$045$i235$i << 24 >> 24)) {
          $$0$lcssa$i237$i = $907; //@line 550
          break;
         } else {
          $$06$i234$i = $907; //@line 553
         }
        }
       }
       HEAP32[(HEAP32[$140 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 559
       $$reg2mem46$3 = $$reg2mem46$0; //@line 560
       break;
      }
     case 28:
      {
       if (($$1202$i$reg2mem$0 & 65535) > 4) {
        label = 102; //@line 566
        break L5;
       }
       $913 = (HEAP32[$140 >> 2] | 0) + 1 | 0; //@line 570
       $914 = HEAP8[$913 >> 0] | 0; //@line 571
       if ($914 & 2) {
        label = 102; //@line 575
        break L5;
       }
       HEAP8[$913 >> 0] = $914 | 2; //@line 579
       $919 = (HEAP32[$92 >> 2] | 0) + 1 | 0; //@line 581
       HEAP32[$92 >> 2] = $919; //@line 582
       $920 = $$1202$in$i$reg2mem$0 & 255; //@line 583
       if (!($920 << 24 >> 24)) {
        $$0$lcssa$i230$i = 0; //@line 586
       } else {
        $$045$i228$i = $920; //@line 588
        $$06$i227$i = 0; //@line 588
        $925 = $919; //@line 588
        while (1) {
         $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 590
         $925$looptemp = $925;
         $925 = $925 + 1 | 0; //@line 592
         HEAP32[$92 >> 2] = $925; //@line 593
         $928 = $$06$i227$i << 8 | HEAPU8[$925$looptemp >> 0]; //@line 596
         if (!($$045$i228$i << 24 >> 24)) {
          $$0$lcssa$i230$i = $928; //@line 599
          break;
         } else {
          $$06$i227$i = $928; //@line 602
         }
        }
       }
       HEAP32[(HEAP32[$140 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 608
       $$reg2mem46$3 = $$reg2mem46$0; //@line 609
       break;
      }
     default:
      {
       label = 106; //@line 613
       break L5;
      }
     }
     L63 : while (1) {
      if ((label | 0) == 24) {
       label = 0; //@line 619
       if (($$1202$i$reg2mem$1 & 65535) > 2) {
        label = 26; //@line 622
        break L5;
       }
       if ((HEAP32[$74 >> 2] | 0) != -1) {
        label = 26; //@line 628
        break L5;
       }
       $272 = $$reg2mem69$1 + 1 | 0; //@line 631
       HEAP32[$92 >> 2] = $272; //@line 632
       $273 = $$1202$in$i$reg2mem$1 & 255; //@line 633
       if (!($273 << 24 >> 24)) {
        $$0$lcssa$i$i = 0; //@line 636
       } else {
        $$045$i$i = $273; //@line 638
        $$06$i$i = 0; //@line 638
        $278 = $272; //@line 638
        while (1) {
         $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 640
         $278$looptemp = $278;
         $278 = $278 + 1 | 0; //@line 642
         HEAP32[$92 >> 2] = $278; //@line 643
         $281 = $$06$i$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 646
         if (!($$045$i$i << 24 >> 24)) {
          $$0$lcssa$i$i = $281; //@line 649
          break;
         } else {
          $$06$i$i = $281; //@line 652
         }
        }
       }
       HEAP32[$74 >> 2] = $$0$lcssa$i$i; //@line 656
       $$reg2mem46$3 = $$reg2mem46$1; //@line 657
      }
      $932 = HEAP32[$6 >> 2] | 0; //@line 659
      $933 = $932 - $22 | 0; //@line 660
      $147 = $932; //@line 663
      if (($933 | 0) > ($14 | 0)) {
       break L2;
      }
      if (!(($14 - $933 & 65535) << 16 >> 16)) {
       label = 109; //@line 670
       break L5;
      }
      $trunc277$i = HEAP8[$147 >> 0] | 0; //@line 673
      if ($trunc277$i << 24 >> 24 == -1) {
       label = 109; //@line 676
       break L5;
      }
      $150 = $trunc277$i & 15; //@line 680
      $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 681
      switch ($trunc276$i & 15) {
      case 15:
       {
        label = 7; //@line 686
        break L5;
        break;
       }
      case 13:
       {
        $$sink$i = HEAPU8[$147 + 1 >> 0] | 0; //@line 694
        $$sink214$i = 13; //@line 694
        $$sink3$i = 1; //@line 694
        label = 8; //@line 695
        break;
       }
      case 14:
       {
        $$sink$i = (HEAPU8[$147 + 1 >> 0] << 8) + 269 | 0; //@line 707
        $$sink214$i = HEAPU8[$147 + 2 >> 0] | 0; //@line 707
        $$sink3$i = 2; //@line 707
        label = 8; //@line 708
        break;
       }
      default:
       {
        $$1$i = $trunc276$i & 255; //@line 712
        $169 = $147; //@line 712
        $952 = $932; //@line 712
       }
      }
      if ((label | 0) == 8) {
       label = 0; //@line 716
       $164 = $147 + $$sink3$i | 0; //@line 718
       HEAP32[$92 >> 2] = $164; //@line 719
       $$1$i = $$sink$i + $$sink214$i | 0; //@line 721
       $169 = $164; //@line 721
       $952 = $164; //@line 721
      }
      $167 = $$1$i + ($$reg2mem46$3 & 255) | 0; //@line 724
      switch ($trunc277$i & 15) {
      case 15:
       {
        label = 12; //@line 728
        break L5;
        break;
       }
      case 13:
       {
        $$sink215$i = HEAPU8[$169 + 1 >> 0] | 0; //@line 736
        $$sink216$i = 13; //@line 736
        $$sink8$i = 1; //@line 736
        label = 13; //@line 737
        break;
       }
      case 14:
       {
        $$sink215$i = (HEAPU8[$169 + 1 >> 0] << 8) + 269 | 0; //@line 749
        $$sink216$i = HEAPU8[$169 + 2 >> 0] | 0; //@line 749
        $$sink8$i = 2; //@line 749
        label = 13; //@line 750
        break;
       }
      default:
       {
        $$1202$in$i = $150; //@line 754
        $184 = $952; //@line 754
        $225 = $169; //@line 754
       }
      }
      if ((label | 0) == 13) {
       label = 0; //@line 758
       $181 = $169 + $$sink8$i | 0; //@line 760
       HEAP32[$92 >> 2] = $181; //@line 761
       $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 763
       $184 = $181; //@line 763
       $225 = $181; //@line 763
      }
      $$1202$i = $$1202$in$i & 65535; //@line 765
      $185 = $114 - $184 & 65535; //@line 767
      $trunc$i = $167 & 65535; //@line 768
      switch ($trunc$i << 16 >> 16) {
      case 11:
       {
        $$1202$i$reg2mem$2 = $$1202$i; //@line 771
        $$reg2mem$1 = $185; //@line 771
        $$reg2mem46$2 = $167; //@line 771
        label = 64; //@line 772
        break L5;
        break;
       }
      case 12:
       {
        $$1202$i$reg2mem$1 = $$1202$i; //@line 777
        $$1202$in$i$reg2mem$1 = $$1202$in$i; //@line 777
        $$reg2mem46$1 = $167; //@line 777
        $$reg2mem69$1 = $225; //@line 777
        label = 24; //@line 778
        break;
       }
      case 28:
      case 60:
      case 17:
      case 27:
      case 23:
      case 15:
      case 6:
      case 20:
      case 7:
      case 8:
      case 3:
      case 4:
      case 35:
      case 14:
       {
        break L63;
        break;
       }
      default:
       {
        label = 106; //@line 786
        break L5;
       }
      }
     }
     if (!(HEAP32[$140 >> 2] | 0)) {
      label = 16; //@line 794
      break;
     } else {
      $$1202$i$reg2mem$0 = $$1202$i; //@line 797
      $$1202$in$i$reg2mem$0 = $$1202$in$i; //@line 797
      $$reg2mem$0 = $185; //@line 797
      $$reg2mem46$0 = $167; //@line 797
      $$reg2mem69$0 = $225; //@line 797
      $trunc$i$reg2mem$0 = $trunc$i; //@line 797
     }
    }
    switch (label | 0) {
    case 7:
     {
      _mbed_tracef(2, 3737, 4e3, $86); //@line 802
      break L2;
      break;
     }
    case 12:
     {
      _mbed_tracef(2, 3737, 4058, $116); //@line 807
      break L2;
      break;
     }
    case 16:
     {
      $188 = HEAP32[$132 >> 2] | 0; //@line 812
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 813
      $189 = FUNCTION_TABLE_ii[$188 & 15](68) | 0; //@line 814
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 817
       $190 = $ReallocAsyncCtx3 + 4 | 0; //@line 818
       HEAP16[$190 >> 1] = $185; //@line 819
       $191 = $ReallocAsyncCtx3 + 8 | 0; //@line 820
       HEAP32[$191 >> 2] = $4; //@line 821
       $192 = $ReallocAsyncCtx3 + 12 | 0; //@line 822
       HEAP32[$192 >> 2] = $6; //@line 823
       $193 = $ReallocAsyncCtx3 + 16 | 0; //@line 824
       HEAP32[$193 >> 2] = $8; //@line 825
       $194 = $ReallocAsyncCtx3 + 20 | 0; //@line 826
       HEAP32[$194 >> 2] = $10; //@line 827
       $195 = $ReallocAsyncCtx3 + 24 | 0; //@line 828
       HEAP32[$195 >> 2] = $12; //@line 829
       $196 = $ReallocAsyncCtx3 + 28 | 0; //@line 830
       HEAP32[$196 >> 2] = $14; //@line 831
       $197 = $ReallocAsyncCtx3 + 32 | 0; //@line 832
       HEAP32[$197 >> 2] = $16; //@line 833
       $198 = $ReallocAsyncCtx3 + 36 | 0; //@line 834
       HEAP32[$198 >> 2] = $18; //@line 835
       $199 = $ReallocAsyncCtx3 + 40 | 0; //@line 836
       HEAP32[$199 >> 2] = $20; //@line 837
       $200 = $ReallocAsyncCtx3 + 44 | 0; //@line 838
       HEAP32[$200 >> 2] = $22; //@line 839
       $201 = $ReallocAsyncCtx3 + 48 | 0; //@line 840
       HEAP32[$201 >> 2] = $24; //@line 841
       $202 = $ReallocAsyncCtx3 + 52 | 0; //@line 842
       HEAP32[$202 >> 2] = $26; //@line 843
       $203 = $ReallocAsyncCtx3 + 56 | 0; //@line 844
       HEAP32[$203 >> 2] = $28; //@line 845
       $204 = $ReallocAsyncCtx3 + 60 | 0; //@line 846
       HEAP32[$204 >> 2] = $30; //@line 847
       $205 = $ReallocAsyncCtx3 + 64 | 0; //@line 848
       HEAP16[$205 >> 1] = $$1202$i; //@line 849
       $206 = $ReallocAsyncCtx3 + 68 | 0; //@line 850
       HEAP32[$206 >> 2] = $34; //@line 851
       $207 = $ReallocAsyncCtx3 + 72 | 0; //@line 852
       HEAP32[$207 >> 2] = $36; //@line 853
       $208 = $ReallocAsyncCtx3 + 76 | 0; //@line 854
       HEAP32[$208 >> 2] = $38; //@line 855
       $209 = $ReallocAsyncCtx3 + 80 | 0; //@line 856
       HEAP32[$209 >> 2] = $40; //@line 857
       $210 = $ReallocAsyncCtx3 + 84 | 0; //@line 858
       HEAP32[$210 >> 2] = $167; //@line 859
       $211 = $ReallocAsyncCtx3 + 88 | 0; //@line 860
       HEAP32[$211 >> 2] = $44; //@line 861
       $212 = $ReallocAsyncCtx3 + 92 | 0; //@line 862
       HEAP32[$212 >> 2] = $$1202$in$i; //@line 863
       $213 = $ReallocAsyncCtx3 + 96 | 0; //@line 864
       HEAP32[$213 >> 2] = $48; //@line 865
       $214 = $ReallocAsyncCtx3 + 100 | 0; //@line 866
       HEAP32[$214 >> 2] = $50; //@line 867
       $215 = $ReallocAsyncCtx3 + 104 | 0; //@line 868
       HEAP32[$215 >> 2] = $52; //@line 869
       $216 = $ReallocAsyncCtx3 + 108 | 0; //@line 870
       HEAP32[$216 >> 2] = $54; //@line 871
       $217 = $ReallocAsyncCtx3 + 112 | 0; //@line 872
       HEAP32[$217 >> 2] = $56; //@line 873
       $218 = $ReallocAsyncCtx3 + 116 | 0; //@line 874
       HEAP32[$218 >> 2] = $58; //@line 875
       $219 = $ReallocAsyncCtx3 + 120 | 0; //@line 876
       HEAP32[$219 >> 2] = $60; //@line 877
       $220 = $ReallocAsyncCtx3 + 124 | 0; //@line 878
       HEAP32[$220 >> 2] = $62; //@line 879
       $221 = $ReallocAsyncCtx3 + 128 | 0; //@line 880
       HEAP32[$221 >> 2] = $64; //@line 881
       $222 = $ReallocAsyncCtx3 + 132 | 0; //@line 882
       HEAP32[$222 >> 2] = $66; //@line 883
       $223 = $ReallocAsyncCtx3 + 136 | 0; //@line 884
       HEAP32[$223 >> 2] = $68; //@line 885
       $224 = $ReallocAsyncCtx3 + 140 | 0; //@line 886
       HEAP32[$224 >> 2] = $225; //@line 887
       $226 = $ReallocAsyncCtx3 + 144 | 0; //@line 888
       HEAP32[$226 >> 2] = $72; //@line 889
       $227 = $ReallocAsyncCtx3 + 148 | 0; //@line 890
       HEAP32[$227 >> 2] = $74; //@line 891
       $228 = $ReallocAsyncCtx3 + 152 | 0; //@line 892
       HEAP32[$228 >> 2] = $76; //@line 893
       $229 = $ReallocAsyncCtx3 + 156 | 0; //@line 894
       HEAP32[$229 >> 2] = $78; //@line 895
       $230 = $ReallocAsyncCtx3 + 160 | 0; //@line 896
       HEAP32[$230 >> 2] = $80; //@line 897
       $231 = $ReallocAsyncCtx3 + 164 | 0; //@line 898
       HEAP32[$231 >> 2] = $82; //@line 899
       $232 = $ReallocAsyncCtx3 + 168 | 0; //@line 900
       HEAP32[$232 >> 2] = $84; //@line 901
       $233 = $ReallocAsyncCtx3 + 172 | 0; //@line 902
       HEAP32[$233 >> 2] = $86; //@line 903
       $234 = $ReallocAsyncCtx3 + 176 | 0; //@line 904
       HEAP32[$234 >> 2] = $88; //@line 905
       $235 = $ReallocAsyncCtx3 + 180 | 0; //@line 906
       HEAP32[$235 >> 2] = $90; //@line 907
       $236 = $ReallocAsyncCtx3 + 184 | 0; //@line 908
       HEAP32[$236 >> 2] = $92; //@line 909
       $237 = $ReallocAsyncCtx3 + 188 | 0; //@line 910
       HEAP32[$237 >> 2] = $94; //@line 911
       $238 = $ReallocAsyncCtx3 + 192 | 0; //@line 912
       HEAP32[$238 >> 2] = $96; //@line 913
       $239 = $ReallocAsyncCtx3 + 196 | 0; //@line 914
       HEAP32[$239 >> 2] = $98; //@line 915
       $240 = $ReallocAsyncCtx3 + 200 | 0; //@line 916
       HEAP32[$240 >> 2] = $100; //@line 917
       $241 = $ReallocAsyncCtx3 + 204 | 0; //@line 918
       HEAP32[$241 >> 2] = $102; //@line 919
       $242 = $ReallocAsyncCtx3 + 208 | 0; //@line 920
       HEAP32[$242 >> 2] = $104; //@line 921
       $243 = $ReallocAsyncCtx3 + 212 | 0; //@line 922
       HEAP32[$243 >> 2] = $106; //@line 923
       $244 = $ReallocAsyncCtx3 + 216 | 0; //@line 924
       HEAP32[$244 >> 2] = $108; //@line 925
       $245 = $ReallocAsyncCtx3 + 220 | 0; //@line 926
       HEAP32[$245 >> 2] = $110; //@line 927
       $246 = $ReallocAsyncCtx3 + 224 | 0; //@line 928
       HEAP32[$246 >> 2] = $112; //@line 929
       $247 = $ReallocAsyncCtx3 + 228 | 0; //@line 930
       HEAP32[$247 >> 2] = $114; //@line 931
       $248 = $ReallocAsyncCtx3 + 232 | 0; //@line 932
       HEAP32[$248 >> 2] = $116; //@line 933
       $249 = $ReallocAsyncCtx3 + 236 | 0; //@line 934
       HEAP16[$249 >> 1] = $trunc$i; //@line 935
       $250 = $ReallocAsyncCtx3 + 240 | 0; //@line 936
       HEAP32[$250 >> 2] = $120; //@line 937
       $251 = $ReallocAsyncCtx3 + 244 | 0; //@line 938
       HEAP32[$251 >> 2] = $122; //@line 939
       $252 = $ReallocAsyncCtx3 + 248 | 0; //@line 940
       HEAP32[$252 >> 2] = $124; //@line 941
       $253 = $ReallocAsyncCtx3 + 252 | 0; //@line 942
       HEAP32[$253 >> 2] = $126; //@line 943
       $254 = $ReallocAsyncCtx3 + 256 | 0; //@line 944
       HEAP32[$254 >> 2] = $128; //@line 945
       $255 = $ReallocAsyncCtx3 + 260 | 0; //@line 946
       HEAP32[$255 >> 2] = $130; //@line 947
       $256 = $ReallocAsyncCtx3 + 264 | 0; //@line 948
       HEAP32[$256 >> 2] = $132; //@line 949
       $257 = $ReallocAsyncCtx3 + 268 | 0; //@line 950
       HEAP32[$257 >> 2] = $134; //@line 951
       $258 = $ReallocAsyncCtx3 + 272 | 0; //@line 952
       HEAP32[$258 >> 2] = $136; //@line 953
       $259 = $ReallocAsyncCtx3 + 276 | 0; //@line 954
       HEAP32[$259 >> 2] = $138; //@line 955
       $260 = $ReallocAsyncCtx3 + 280 | 0; //@line 956
       HEAP32[$260 >> 2] = $140; //@line 957
       $261 = $ReallocAsyncCtx3 + 284 | 0; //@line 958
       HEAP32[$261 >> 2] = $142; //@line 959
       sp = STACKTOP; //@line 960
       return;
      }
      HEAP32[___async_retval >> 2] = $189; //@line 964
      ___async_unwind = 0; //@line 965
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 966
      $190 = $ReallocAsyncCtx3 + 4 | 0; //@line 967
      HEAP16[$190 >> 1] = $185; //@line 968
      $191 = $ReallocAsyncCtx3 + 8 | 0; //@line 969
      HEAP32[$191 >> 2] = $4; //@line 970
      $192 = $ReallocAsyncCtx3 + 12 | 0; //@line 971
      HEAP32[$192 >> 2] = $6; //@line 972
      $193 = $ReallocAsyncCtx3 + 16 | 0; //@line 973
      HEAP32[$193 >> 2] = $8; //@line 974
      $194 = $ReallocAsyncCtx3 + 20 | 0; //@line 975
      HEAP32[$194 >> 2] = $10; //@line 976
      $195 = $ReallocAsyncCtx3 + 24 | 0; //@line 977
      HEAP32[$195 >> 2] = $12; //@line 978
      $196 = $ReallocAsyncCtx3 + 28 | 0; //@line 979
      HEAP32[$196 >> 2] = $14; //@line 980
      $197 = $ReallocAsyncCtx3 + 32 | 0; //@line 981
      HEAP32[$197 >> 2] = $16; //@line 982
      $198 = $ReallocAsyncCtx3 + 36 | 0; //@line 983
      HEAP32[$198 >> 2] = $18; //@line 984
      $199 = $ReallocAsyncCtx3 + 40 | 0; //@line 985
      HEAP32[$199 >> 2] = $20; //@line 986
      $200 = $ReallocAsyncCtx3 + 44 | 0; //@line 987
      HEAP32[$200 >> 2] = $22; //@line 988
      $201 = $ReallocAsyncCtx3 + 48 | 0; //@line 989
      HEAP32[$201 >> 2] = $24; //@line 990
      $202 = $ReallocAsyncCtx3 + 52 | 0; //@line 991
      HEAP32[$202 >> 2] = $26; //@line 992
      $203 = $ReallocAsyncCtx3 + 56 | 0; //@line 993
      HEAP32[$203 >> 2] = $28; //@line 994
      $204 = $ReallocAsyncCtx3 + 60 | 0; //@line 995
      HEAP32[$204 >> 2] = $30; //@line 996
      $205 = $ReallocAsyncCtx3 + 64 | 0; //@line 997
      HEAP16[$205 >> 1] = $$1202$i; //@line 998
      $206 = $ReallocAsyncCtx3 + 68 | 0; //@line 999
      HEAP32[$206 >> 2] = $34; //@line 1000
      $207 = $ReallocAsyncCtx3 + 72 | 0; //@line 1001
      HEAP32[$207 >> 2] = $36; //@line 1002
      $208 = $ReallocAsyncCtx3 + 76 | 0; //@line 1003
      HEAP32[$208 >> 2] = $38; //@line 1004
      $209 = $ReallocAsyncCtx3 + 80 | 0; //@line 1005
      HEAP32[$209 >> 2] = $40; //@line 1006
      $210 = $ReallocAsyncCtx3 + 84 | 0; //@line 1007
      HEAP32[$210 >> 2] = $167; //@line 1008
      $211 = $ReallocAsyncCtx3 + 88 | 0; //@line 1009
      HEAP32[$211 >> 2] = $44; //@line 1010
      $212 = $ReallocAsyncCtx3 + 92 | 0; //@line 1011
      HEAP32[$212 >> 2] = $$1202$in$i; //@line 1012
      $213 = $ReallocAsyncCtx3 + 96 | 0; //@line 1013
      HEAP32[$213 >> 2] = $48; //@line 1014
      $214 = $ReallocAsyncCtx3 + 100 | 0; //@line 1015
      HEAP32[$214 >> 2] = $50; //@line 1016
      $215 = $ReallocAsyncCtx3 + 104 | 0; //@line 1017
      HEAP32[$215 >> 2] = $52; //@line 1018
      $216 = $ReallocAsyncCtx3 + 108 | 0; //@line 1019
      HEAP32[$216 >> 2] = $54; //@line 1020
      $217 = $ReallocAsyncCtx3 + 112 | 0; //@line 1021
      HEAP32[$217 >> 2] = $56; //@line 1022
      $218 = $ReallocAsyncCtx3 + 116 | 0; //@line 1023
      HEAP32[$218 >> 2] = $58; //@line 1024
      $219 = $ReallocAsyncCtx3 + 120 | 0; //@line 1025
      HEAP32[$219 >> 2] = $60; //@line 1026
      $220 = $ReallocAsyncCtx3 + 124 | 0; //@line 1027
      HEAP32[$220 >> 2] = $62; //@line 1028
      $221 = $ReallocAsyncCtx3 + 128 | 0; //@line 1029
      HEAP32[$221 >> 2] = $64; //@line 1030
      $222 = $ReallocAsyncCtx3 + 132 | 0; //@line 1031
      HEAP32[$222 >> 2] = $66; //@line 1032
      $223 = $ReallocAsyncCtx3 + 136 | 0; //@line 1033
      HEAP32[$223 >> 2] = $68; //@line 1034
      $224 = $ReallocAsyncCtx3 + 140 | 0; //@line 1035
      HEAP32[$224 >> 2] = $225; //@line 1036
      $226 = $ReallocAsyncCtx3 + 144 | 0; //@line 1037
      HEAP32[$226 >> 2] = $72; //@line 1038
      $227 = $ReallocAsyncCtx3 + 148 | 0; //@line 1039
      HEAP32[$227 >> 2] = $74; //@line 1040
      $228 = $ReallocAsyncCtx3 + 152 | 0; //@line 1041
      HEAP32[$228 >> 2] = $76; //@line 1042
      $229 = $ReallocAsyncCtx3 + 156 | 0; //@line 1043
      HEAP32[$229 >> 2] = $78; //@line 1044
      $230 = $ReallocAsyncCtx3 + 160 | 0; //@line 1045
      HEAP32[$230 >> 2] = $80; //@line 1046
      $231 = $ReallocAsyncCtx3 + 164 | 0; //@line 1047
      HEAP32[$231 >> 2] = $82; //@line 1048
      $232 = $ReallocAsyncCtx3 + 168 | 0; //@line 1049
      HEAP32[$232 >> 2] = $84; //@line 1050
      $233 = $ReallocAsyncCtx3 + 172 | 0; //@line 1051
      HEAP32[$233 >> 2] = $86; //@line 1052
      $234 = $ReallocAsyncCtx3 + 176 | 0; //@line 1053
      HEAP32[$234 >> 2] = $88; //@line 1054
      $235 = $ReallocAsyncCtx3 + 180 | 0; //@line 1055
      HEAP32[$235 >> 2] = $90; //@line 1056
      $236 = $ReallocAsyncCtx3 + 184 | 0; //@line 1057
      HEAP32[$236 >> 2] = $92; //@line 1058
      $237 = $ReallocAsyncCtx3 + 188 | 0; //@line 1059
      HEAP32[$237 >> 2] = $94; //@line 1060
      $238 = $ReallocAsyncCtx3 + 192 | 0; //@line 1061
      HEAP32[$238 >> 2] = $96; //@line 1062
      $239 = $ReallocAsyncCtx3 + 196 | 0; //@line 1063
      HEAP32[$239 >> 2] = $98; //@line 1064
      $240 = $ReallocAsyncCtx3 + 200 | 0; //@line 1065
      HEAP32[$240 >> 2] = $100; //@line 1066
      $241 = $ReallocAsyncCtx3 + 204 | 0; //@line 1067
      HEAP32[$241 >> 2] = $102; //@line 1068
      $242 = $ReallocAsyncCtx3 + 208 | 0; //@line 1069
      HEAP32[$242 >> 2] = $104; //@line 1070
      $243 = $ReallocAsyncCtx3 + 212 | 0; //@line 1071
      HEAP32[$243 >> 2] = $106; //@line 1072
      $244 = $ReallocAsyncCtx3 + 216 | 0; //@line 1073
      HEAP32[$244 >> 2] = $108; //@line 1074
      $245 = $ReallocAsyncCtx3 + 220 | 0; //@line 1075
      HEAP32[$245 >> 2] = $110; //@line 1076
      $246 = $ReallocAsyncCtx3 + 224 | 0; //@line 1077
      HEAP32[$246 >> 2] = $112; //@line 1078
      $247 = $ReallocAsyncCtx3 + 228 | 0; //@line 1079
      HEAP32[$247 >> 2] = $114; //@line 1080
      $248 = $ReallocAsyncCtx3 + 232 | 0; //@line 1081
      HEAP32[$248 >> 2] = $116; //@line 1082
      $249 = $ReallocAsyncCtx3 + 236 | 0; //@line 1083
      HEAP16[$249 >> 1] = $trunc$i; //@line 1084
      $250 = $ReallocAsyncCtx3 + 240 | 0; //@line 1085
      HEAP32[$250 >> 2] = $120; //@line 1086
      $251 = $ReallocAsyncCtx3 + 244 | 0; //@line 1087
      HEAP32[$251 >> 2] = $122; //@line 1088
      $252 = $ReallocAsyncCtx3 + 248 | 0; //@line 1089
      HEAP32[$252 >> 2] = $124; //@line 1090
      $253 = $ReallocAsyncCtx3 + 252 | 0; //@line 1091
      HEAP32[$253 >> 2] = $126; //@line 1092
      $254 = $ReallocAsyncCtx3 + 256 | 0; //@line 1093
      HEAP32[$254 >> 2] = $128; //@line 1094
      $255 = $ReallocAsyncCtx3 + 260 | 0; //@line 1095
      HEAP32[$255 >> 2] = $130; //@line 1096
      $256 = $ReallocAsyncCtx3 + 264 | 0; //@line 1097
      HEAP32[$256 >> 2] = $132; //@line 1098
      $257 = $ReallocAsyncCtx3 + 268 | 0; //@line 1099
      HEAP32[$257 >> 2] = $134; //@line 1100
      $258 = $ReallocAsyncCtx3 + 272 | 0; //@line 1101
      HEAP32[$258 >> 2] = $136; //@line 1102
      $259 = $ReallocAsyncCtx3 + 276 | 0; //@line 1103
      HEAP32[$259 >> 2] = $138; //@line 1104
      $260 = $ReallocAsyncCtx3 + 280 | 0; //@line 1105
      HEAP32[$260 >> 2] = $140; //@line 1106
      $261 = $ReallocAsyncCtx3 + 284 | 0; //@line 1107
      HEAP32[$261 >> 2] = $142; //@line 1108
      sp = STACKTOP; //@line 1109
      return;
     }
    case 26:
     {
      _mbed_tracef(2, 3737, 4172, $130); //@line 1114
      break L2;
      break;
     }
    case 31:
     {
      _mbed_tracef(2, 3737, 4241, $40); //@line 1119
      break L2;
      break;
     }
    case 35:
     {
      $297 = $$1202$in$i$reg2mem$0 & 65535; //@line 1124
      if (($$1202$i$reg2mem$0 + -1 & 65535) <= 1033) {
       $300 = HEAP32[$140 >> 2] | 0; //@line 1128
       if (!(HEAP32[$300 + 44 >> 2] | 0)) {
        HEAP16[$300 + 2 >> 1] = $$1202$i$reg2mem$0; //@line 1134
        $305 = $$reg2mem69$0 + 1 | 0; //@line 1135
        HEAP32[$92 >> 2] = $305; //@line 1136
        $306 = HEAP32[$132 >> 2] | 0; //@line 1137
        $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 1138
        $307 = FUNCTION_TABLE_ii[$306 & 15]($$1202$i$reg2mem$0) | 0; //@line 1139
        if (___async) {
         HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 1142
         $308 = $ReallocAsyncCtx4 + 4 | 0; //@line 1143
         HEAP32[$308 >> 2] = $4; //@line 1144
         $309 = $ReallocAsyncCtx4 + 8 | 0; //@line 1145
         HEAP32[$309 >> 2] = $6; //@line 1146
         $310 = $ReallocAsyncCtx4 + 12 | 0; //@line 1147
         HEAP32[$310 >> 2] = $8; //@line 1148
         $311 = $ReallocAsyncCtx4 + 16 | 0; //@line 1149
         HEAP32[$311 >> 2] = $12; //@line 1150
         $312 = $ReallocAsyncCtx4 + 20 | 0; //@line 1151
         HEAP32[$312 >> 2] = $14; //@line 1152
         $313 = $ReallocAsyncCtx4 + 24 | 0; //@line 1153
         HEAP32[$313 >> 2] = $16; //@line 1154
         $314 = $ReallocAsyncCtx4 + 28 | 0; //@line 1155
         HEAP32[$314 >> 2] = $18; //@line 1156
         $315 = $ReallocAsyncCtx4 + 32 | 0; //@line 1157
         HEAP32[$315 >> 2] = $20; //@line 1158
         $316 = $ReallocAsyncCtx4 + 36 | 0; //@line 1159
         HEAP32[$316 >> 2] = $22; //@line 1160
         $317 = $ReallocAsyncCtx4 + 40 | 0; //@line 1161
         HEAP32[$317 >> 2] = $24; //@line 1162
         $318 = $ReallocAsyncCtx4 + 44 | 0; //@line 1163
         HEAP32[$318 >> 2] = $26; //@line 1164
         $319 = $ReallocAsyncCtx4 + 48 | 0; //@line 1165
         HEAP32[$319 >> 2] = $28; //@line 1166
         $320 = $ReallocAsyncCtx4 + 52 | 0; //@line 1167
         HEAP32[$320 >> 2] = $30; //@line 1168
         $321 = $ReallocAsyncCtx4 + 56 | 0; //@line 1169
         HEAP32[$321 >> 2] = $34; //@line 1170
         $322 = $ReallocAsyncCtx4 + 60 | 0; //@line 1171
         HEAP32[$322 >> 2] = $36; //@line 1172
         $323 = $ReallocAsyncCtx4 + 64 | 0; //@line 1173
         HEAP32[$323 >> 2] = $38; //@line 1174
         $324 = $ReallocAsyncCtx4 + 68 | 0; //@line 1175
         HEAP32[$324 >> 2] = $40; //@line 1176
         $325 = $ReallocAsyncCtx4 + 72 | 0; //@line 1177
         HEAP32[$325 >> 2] = $50; //@line 1178
         $326 = $ReallocAsyncCtx4 + 76 | 0; //@line 1179
         HEAP32[$326 >> 2] = $44; //@line 1180
         $327 = $ReallocAsyncCtx4 + 80 | 0; //@line 1181
         HEAP32[$327 >> 2] = $$reg2mem46$0; //@line 1182
         $328 = $ReallocAsyncCtx4 + 84 | 0; //@line 1183
         HEAP32[$328 >> 2] = $48; //@line 1184
         $329 = $ReallocAsyncCtx4 + 88 | 0; //@line 1185
         HEAP32[$329 >> 2] = $52; //@line 1186
         $330 = $ReallocAsyncCtx4 + 92 | 0; //@line 1187
         HEAP32[$330 >> 2] = $54; //@line 1188
         $331 = $ReallocAsyncCtx4 + 96 | 0; //@line 1189
         HEAP32[$331 >> 2] = $56; //@line 1190
         $332 = $ReallocAsyncCtx4 + 100 | 0; //@line 1191
         HEAP32[$332 >> 2] = $58; //@line 1192
         $333 = $ReallocAsyncCtx4 + 104 | 0; //@line 1193
         HEAP32[$333 >> 2] = $60; //@line 1194
         $334 = $ReallocAsyncCtx4 + 108 | 0; //@line 1195
         HEAP32[$334 >> 2] = $62; //@line 1196
         $335 = $ReallocAsyncCtx4 + 112 | 0; //@line 1197
         HEAP32[$335 >> 2] = $64; //@line 1198
         $336 = $ReallocAsyncCtx4 + 116 | 0; //@line 1199
         HEAP32[$336 >> 2] = $66; //@line 1200
         $337 = $ReallocAsyncCtx4 + 120 | 0; //@line 1201
         HEAP32[$337 >> 2] = $68; //@line 1202
         $338 = $ReallocAsyncCtx4 + 124 | 0; //@line 1203
         HEAP32[$338 >> 2] = $72; //@line 1204
         $339 = $ReallocAsyncCtx4 + 128 | 0; //@line 1205
         HEAP32[$339 >> 2] = $74; //@line 1206
         $340 = $ReallocAsyncCtx4 + 132 | 0; //@line 1207
         HEAP32[$340 >> 2] = $76; //@line 1208
         $341 = $ReallocAsyncCtx4 + 136 | 0; //@line 1209
         HEAP32[$341 >> 2] = $78; //@line 1210
         $342 = $ReallocAsyncCtx4 + 140 | 0; //@line 1211
         HEAP32[$342 >> 2] = $80; //@line 1212
         $343 = $ReallocAsyncCtx4 + 144 | 0; //@line 1213
         HEAP32[$343 >> 2] = $82; //@line 1214
         $344 = $ReallocAsyncCtx4 + 148 | 0; //@line 1215
         HEAP32[$344 >> 2] = $84; //@line 1216
         $345 = $ReallocAsyncCtx4 + 152 | 0; //@line 1217
         HEAP32[$345 >> 2] = $86; //@line 1218
         $346 = $ReallocAsyncCtx4 + 156 | 0; //@line 1219
         HEAP32[$346 >> 2] = $88; //@line 1220
         $347 = $ReallocAsyncCtx4 + 160 | 0; //@line 1221
         HEAP32[$347 >> 2] = $90; //@line 1222
         $348 = $ReallocAsyncCtx4 + 164 | 0; //@line 1223
         HEAP32[$348 >> 2] = $92; //@line 1224
         $349 = $ReallocAsyncCtx4 + 168 | 0; //@line 1225
         HEAP32[$349 >> 2] = $94; //@line 1226
         $350 = $ReallocAsyncCtx4 + 172 | 0; //@line 1227
         HEAP32[$350 >> 2] = $96; //@line 1228
         $351 = $ReallocAsyncCtx4 + 176 | 0; //@line 1229
         HEAP32[$351 >> 2] = $98; //@line 1230
         $352 = $ReallocAsyncCtx4 + 180 | 0; //@line 1231
         HEAP32[$352 >> 2] = $100; //@line 1232
         $353 = $ReallocAsyncCtx4 + 184 | 0; //@line 1233
         HEAP32[$353 >> 2] = $102; //@line 1234
         $354 = $ReallocAsyncCtx4 + 188 | 0; //@line 1235
         HEAP32[$354 >> 2] = $104; //@line 1236
         $355 = $ReallocAsyncCtx4 + 192 | 0; //@line 1237
         HEAP32[$355 >> 2] = $106; //@line 1238
         $356 = $ReallocAsyncCtx4 + 196 | 0; //@line 1239
         HEAP32[$356 >> 2] = $108; //@line 1240
         $357 = $ReallocAsyncCtx4 + 200 | 0; //@line 1241
         HEAP32[$357 >> 2] = $110; //@line 1242
         $358 = $ReallocAsyncCtx4 + 204 | 0; //@line 1243
         HEAP32[$358 >> 2] = $112; //@line 1244
         $359 = $ReallocAsyncCtx4 + 208 | 0; //@line 1245
         HEAP32[$359 >> 2] = $114; //@line 1246
         $360 = $ReallocAsyncCtx4 + 212 | 0; //@line 1247
         HEAP32[$360 >> 2] = $116; //@line 1248
         $361 = $ReallocAsyncCtx4 + 216 | 0; //@line 1249
         HEAP32[$361 >> 2] = $120; //@line 1250
         $362 = $ReallocAsyncCtx4 + 220 | 0; //@line 1251
         HEAP32[$362 >> 2] = $305; //@line 1252
         $363 = $ReallocAsyncCtx4 + 224 | 0; //@line 1253
         HEAP32[$363 >> 2] = $122; //@line 1254
         $364 = $ReallocAsyncCtx4 + 228 | 0; //@line 1255
         HEAP32[$364 >> 2] = $297; //@line 1256
         $365 = $ReallocAsyncCtx4 + 232 | 0; //@line 1257
         HEAP32[$365 >> 2] = $124; //@line 1258
         $366 = $ReallocAsyncCtx4 + 236 | 0; //@line 1259
         HEAP32[$366 >> 2] = $126; //@line 1260
         $367 = $ReallocAsyncCtx4 + 240 | 0; //@line 1261
         HEAP32[$367 >> 2] = $128; //@line 1262
         $368 = $ReallocAsyncCtx4 + 244 | 0; //@line 1263
         HEAP32[$368 >> 2] = $130; //@line 1264
         $369 = $ReallocAsyncCtx4 + 248 | 0; //@line 1265
         HEAP32[$369 >> 2] = $132; //@line 1266
         $370 = $ReallocAsyncCtx4 + 252 | 0; //@line 1267
         HEAP32[$370 >> 2] = $134; //@line 1268
         $371 = $ReallocAsyncCtx4 + 256 | 0; //@line 1269
         HEAP32[$371 >> 2] = $10; //@line 1270
         $372 = $ReallocAsyncCtx4 + 260 | 0; //@line 1271
         HEAP32[$372 >> 2] = $136; //@line 1272
         $373 = $ReallocAsyncCtx4 + 264 | 0; //@line 1273
         HEAP32[$373 >> 2] = $138; //@line 1274
         $374 = $ReallocAsyncCtx4 + 268 | 0; //@line 1275
         HEAP32[$374 >> 2] = $140; //@line 1276
         $375 = $ReallocAsyncCtx4 + 272 | 0; //@line 1277
         HEAP32[$375 >> 2] = $142; //@line 1278
         sp = STACKTOP; //@line 1279
         return;
        }
        HEAP32[___async_retval >> 2] = $307; //@line 1283
        ___async_unwind = 0; //@line 1284
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 1285
        $308 = $ReallocAsyncCtx4 + 4 | 0; //@line 1286
        HEAP32[$308 >> 2] = $4; //@line 1287
        $309 = $ReallocAsyncCtx4 + 8 | 0; //@line 1288
        HEAP32[$309 >> 2] = $6; //@line 1289
        $310 = $ReallocAsyncCtx4 + 12 | 0; //@line 1290
        HEAP32[$310 >> 2] = $8; //@line 1291
        $311 = $ReallocAsyncCtx4 + 16 | 0; //@line 1292
        HEAP32[$311 >> 2] = $12; //@line 1293
        $312 = $ReallocAsyncCtx4 + 20 | 0; //@line 1294
        HEAP32[$312 >> 2] = $14; //@line 1295
        $313 = $ReallocAsyncCtx4 + 24 | 0; //@line 1296
        HEAP32[$313 >> 2] = $16; //@line 1297
        $314 = $ReallocAsyncCtx4 + 28 | 0; //@line 1298
        HEAP32[$314 >> 2] = $18; //@line 1299
        $315 = $ReallocAsyncCtx4 + 32 | 0; //@line 1300
        HEAP32[$315 >> 2] = $20; //@line 1301
        $316 = $ReallocAsyncCtx4 + 36 | 0; //@line 1302
        HEAP32[$316 >> 2] = $22; //@line 1303
        $317 = $ReallocAsyncCtx4 + 40 | 0; //@line 1304
        HEAP32[$317 >> 2] = $24; //@line 1305
        $318 = $ReallocAsyncCtx4 + 44 | 0; //@line 1306
        HEAP32[$318 >> 2] = $26; //@line 1307
        $319 = $ReallocAsyncCtx4 + 48 | 0; //@line 1308
        HEAP32[$319 >> 2] = $28; //@line 1309
        $320 = $ReallocAsyncCtx4 + 52 | 0; //@line 1310
        HEAP32[$320 >> 2] = $30; //@line 1311
        $321 = $ReallocAsyncCtx4 + 56 | 0; //@line 1312
        HEAP32[$321 >> 2] = $34; //@line 1313
        $322 = $ReallocAsyncCtx4 + 60 | 0; //@line 1314
        HEAP32[$322 >> 2] = $36; //@line 1315
        $323 = $ReallocAsyncCtx4 + 64 | 0; //@line 1316
        HEAP32[$323 >> 2] = $38; //@line 1317
        $324 = $ReallocAsyncCtx4 + 68 | 0; //@line 1318
        HEAP32[$324 >> 2] = $40; //@line 1319
        $325 = $ReallocAsyncCtx4 + 72 | 0; //@line 1320
        HEAP32[$325 >> 2] = $50; //@line 1321
        $326 = $ReallocAsyncCtx4 + 76 | 0; //@line 1322
        HEAP32[$326 >> 2] = $44; //@line 1323
        $327 = $ReallocAsyncCtx4 + 80 | 0; //@line 1324
        HEAP32[$327 >> 2] = $$reg2mem46$0; //@line 1325
        $328 = $ReallocAsyncCtx4 + 84 | 0; //@line 1326
        HEAP32[$328 >> 2] = $48; //@line 1327
        $329 = $ReallocAsyncCtx4 + 88 | 0; //@line 1328
        HEAP32[$329 >> 2] = $52; //@line 1329
        $330 = $ReallocAsyncCtx4 + 92 | 0; //@line 1330
        HEAP32[$330 >> 2] = $54; //@line 1331
        $331 = $ReallocAsyncCtx4 + 96 | 0; //@line 1332
        HEAP32[$331 >> 2] = $56; //@line 1333
        $332 = $ReallocAsyncCtx4 + 100 | 0; //@line 1334
        HEAP32[$332 >> 2] = $58; //@line 1335
        $333 = $ReallocAsyncCtx4 + 104 | 0; //@line 1336
        HEAP32[$333 >> 2] = $60; //@line 1337
        $334 = $ReallocAsyncCtx4 + 108 | 0; //@line 1338
        HEAP32[$334 >> 2] = $62; //@line 1339
        $335 = $ReallocAsyncCtx4 + 112 | 0; //@line 1340
        HEAP32[$335 >> 2] = $64; //@line 1341
        $336 = $ReallocAsyncCtx4 + 116 | 0; //@line 1342
        HEAP32[$336 >> 2] = $66; //@line 1343
        $337 = $ReallocAsyncCtx4 + 120 | 0; //@line 1344
        HEAP32[$337 >> 2] = $68; //@line 1345
        $338 = $ReallocAsyncCtx4 + 124 | 0; //@line 1346
        HEAP32[$338 >> 2] = $72; //@line 1347
        $339 = $ReallocAsyncCtx4 + 128 | 0; //@line 1348
        HEAP32[$339 >> 2] = $74; //@line 1349
        $340 = $ReallocAsyncCtx4 + 132 | 0; //@line 1350
        HEAP32[$340 >> 2] = $76; //@line 1351
        $341 = $ReallocAsyncCtx4 + 136 | 0; //@line 1352
        HEAP32[$341 >> 2] = $78; //@line 1353
        $342 = $ReallocAsyncCtx4 + 140 | 0; //@line 1354
        HEAP32[$342 >> 2] = $80; //@line 1355
        $343 = $ReallocAsyncCtx4 + 144 | 0; //@line 1356
        HEAP32[$343 >> 2] = $82; //@line 1357
        $344 = $ReallocAsyncCtx4 + 148 | 0; //@line 1358
        HEAP32[$344 >> 2] = $84; //@line 1359
        $345 = $ReallocAsyncCtx4 + 152 | 0; //@line 1360
        HEAP32[$345 >> 2] = $86; //@line 1361
        $346 = $ReallocAsyncCtx4 + 156 | 0; //@line 1362
        HEAP32[$346 >> 2] = $88; //@line 1363
        $347 = $ReallocAsyncCtx4 + 160 | 0; //@line 1364
        HEAP32[$347 >> 2] = $90; //@line 1365
        $348 = $ReallocAsyncCtx4 + 164 | 0; //@line 1366
        HEAP32[$348 >> 2] = $92; //@line 1367
        $349 = $ReallocAsyncCtx4 + 168 | 0; //@line 1368
        HEAP32[$349 >> 2] = $94; //@line 1369
        $350 = $ReallocAsyncCtx4 + 172 | 0; //@line 1370
        HEAP32[$350 >> 2] = $96; //@line 1371
        $351 = $ReallocAsyncCtx4 + 176 | 0; //@line 1372
        HEAP32[$351 >> 2] = $98; //@line 1373
        $352 = $ReallocAsyncCtx4 + 180 | 0; //@line 1374
        HEAP32[$352 >> 2] = $100; //@line 1375
        $353 = $ReallocAsyncCtx4 + 184 | 0; //@line 1376
        HEAP32[$353 >> 2] = $102; //@line 1377
        $354 = $ReallocAsyncCtx4 + 188 | 0; //@line 1378
        HEAP32[$354 >> 2] = $104; //@line 1379
        $355 = $ReallocAsyncCtx4 + 192 | 0; //@line 1380
        HEAP32[$355 >> 2] = $106; //@line 1381
        $356 = $ReallocAsyncCtx4 + 196 | 0; //@line 1382
        HEAP32[$356 >> 2] = $108; //@line 1383
        $357 = $ReallocAsyncCtx4 + 200 | 0; //@line 1384
        HEAP32[$357 >> 2] = $110; //@line 1385
        $358 = $ReallocAsyncCtx4 + 204 | 0; //@line 1386
        HEAP32[$358 >> 2] = $112; //@line 1387
        $359 = $ReallocAsyncCtx4 + 208 | 0; //@line 1388
        HEAP32[$359 >> 2] = $114; //@line 1389
        $360 = $ReallocAsyncCtx4 + 212 | 0; //@line 1390
        HEAP32[$360 >> 2] = $116; //@line 1391
        $361 = $ReallocAsyncCtx4 + 216 | 0; //@line 1392
        HEAP32[$361 >> 2] = $120; //@line 1393
        $362 = $ReallocAsyncCtx4 + 220 | 0; //@line 1394
        HEAP32[$362 >> 2] = $305; //@line 1395
        $363 = $ReallocAsyncCtx4 + 224 | 0; //@line 1396
        HEAP32[$363 >> 2] = $122; //@line 1397
        $364 = $ReallocAsyncCtx4 + 228 | 0; //@line 1398
        HEAP32[$364 >> 2] = $297; //@line 1399
        $365 = $ReallocAsyncCtx4 + 232 | 0; //@line 1400
        HEAP32[$365 >> 2] = $124; //@line 1401
        $366 = $ReallocAsyncCtx4 + 236 | 0; //@line 1402
        HEAP32[$366 >> 2] = $126; //@line 1403
        $367 = $ReallocAsyncCtx4 + 240 | 0; //@line 1404
        HEAP32[$367 >> 2] = $128; //@line 1405
        $368 = $ReallocAsyncCtx4 + 244 | 0; //@line 1406
        HEAP32[$368 >> 2] = $130; //@line 1407
        $369 = $ReallocAsyncCtx4 + 248 | 0; //@line 1408
        HEAP32[$369 >> 2] = $132; //@line 1409
        $370 = $ReallocAsyncCtx4 + 252 | 0; //@line 1410
        HEAP32[$370 >> 2] = $134; //@line 1411
        $371 = $ReallocAsyncCtx4 + 256 | 0; //@line 1412
        HEAP32[$371 >> 2] = $10; //@line 1413
        $372 = $ReallocAsyncCtx4 + 260 | 0; //@line 1414
        HEAP32[$372 >> 2] = $136; //@line 1415
        $373 = $ReallocAsyncCtx4 + 264 | 0; //@line 1416
        HEAP32[$373 >> 2] = $138; //@line 1417
        $374 = $ReallocAsyncCtx4 + 268 | 0; //@line 1418
        HEAP32[$374 >> 2] = $140; //@line 1419
        $375 = $ReallocAsyncCtx4 + 272 | 0; //@line 1420
        HEAP32[$375 >> 2] = $142; //@line 1421
        sp = STACKTOP; //@line 1422
        return;
       }
      }
      _mbed_tracef(2, 3737, 4303, $82); //@line 1426
      break L2;
      break;
     }
    case 41:
     {
      $377 = HEAP32[$140 >> 2] | 0; //@line 1431
      $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 1433
      $379 = _sn_coap_parser_options_parse_multiple_options($64, $92, $$reg2mem$0, $377 + 48 | 0, $377, 4, $$1202$i$reg2mem$0) | 0; //@line 1434
      if (___async) {
       HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 1437
       $380 = $ReallocAsyncCtx10 + 4 | 0; //@line 1438
       HEAP32[$380 >> 2] = $4; //@line 1439
       $381 = $ReallocAsyncCtx10 + 8 | 0; //@line 1440
       HEAP32[$381 >> 2] = $6; //@line 1441
       $382 = $ReallocAsyncCtx10 + 12 | 0; //@line 1442
       HEAP32[$382 >> 2] = $8; //@line 1443
       $383 = $ReallocAsyncCtx10 + 16 | 0; //@line 1444
       HEAP32[$383 >> 2] = $12; //@line 1445
       $384 = $ReallocAsyncCtx10 + 20 | 0; //@line 1446
       HEAP32[$384 >> 2] = $14; //@line 1447
       $385 = $ReallocAsyncCtx10 + 24 | 0; //@line 1448
       HEAP32[$385 >> 2] = $16; //@line 1449
       $386 = $ReallocAsyncCtx10 + 28 | 0; //@line 1450
       HEAP32[$386 >> 2] = $18; //@line 1451
       $387 = $ReallocAsyncCtx10 + 32 | 0; //@line 1452
       HEAP32[$387 >> 2] = $20; //@line 1453
       $388 = $ReallocAsyncCtx10 + 36 | 0; //@line 1454
       HEAP32[$388 >> 2] = $22; //@line 1455
       $389 = $ReallocAsyncCtx10 + 40 | 0; //@line 1456
       HEAP32[$389 >> 2] = $24; //@line 1457
       $390 = $ReallocAsyncCtx10 + 44 | 0; //@line 1458
       HEAP32[$390 >> 2] = $26; //@line 1459
       $391 = $ReallocAsyncCtx10 + 48 | 0; //@line 1460
       HEAP32[$391 >> 2] = $28; //@line 1461
       $392 = $ReallocAsyncCtx10 + 52 | 0; //@line 1462
       HEAP32[$392 >> 2] = $30; //@line 1463
       $393 = $ReallocAsyncCtx10 + 56 | 0; //@line 1464
       HEAP32[$393 >> 2] = $34; //@line 1465
       $394 = $ReallocAsyncCtx10 + 60 | 0; //@line 1466
       HEAP32[$394 >> 2] = $36; //@line 1467
       $395 = $ReallocAsyncCtx10 + 64 | 0; //@line 1468
       HEAP32[$395 >> 2] = $38; //@line 1469
       $396 = $ReallocAsyncCtx10 + 68 | 0; //@line 1470
       HEAP32[$396 >> 2] = $40; //@line 1471
       $397 = $ReallocAsyncCtx10 + 72 | 0; //@line 1472
       HEAP32[$397 >> 2] = $50; //@line 1473
       $398 = $ReallocAsyncCtx10 + 76 | 0; //@line 1474
       HEAP32[$398 >> 2] = $44; //@line 1475
       $399 = $ReallocAsyncCtx10 + 80 | 0; //@line 1476
       HEAP32[$399 >> 2] = $$reg2mem46$0; //@line 1477
       $400 = $ReallocAsyncCtx10 + 84 | 0; //@line 1478
       HEAP32[$400 >> 2] = $48; //@line 1479
       $401 = $ReallocAsyncCtx10 + 88 | 0; //@line 1480
       HEAP32[$401 >> 2] = $52; //@line 1481
       $402 = $ReallocAsyncCtx10 + 92 | 0; //@line 1482
       HEAP32[$402 >> 2] = $54; //@line 1483
       $403 = $ReallocAsyncCtx10 + 96 | 0; //@line 1484
       HEAP32[$403 >> 2] = $56; //@line 1485
       $404 = $ReallocAsyncCtx10 + 100 | 0; //@line 1486
       HEAP32[$404 >> 2] = $58; //@line 1487
       $405 = $ReallocAsyncCtx10 + 104 | 0; //@line 1488
       HEAP32[$405 >> 2] = $60; //@line 1489
       $406 = $ReallocAsyncCtx10 + 108 | 0; //@line 1490
       HEAP32[$406 >> 2] = $62; //@line 1491
       $407 = $ReallocAsyncCtx10 + 112 | 0; //@line 1492
       HEAP32[$407 >> 2] = $64; //@line 1493
       $408 = $ReallocAsyncCtx10 + 116 | 0; //@line 1494
       HEAP32[$408 >> 2] = $66; //@line 1495
       $409 = $ReallocAsyncCtx10 + 120 | 0; //@line 1496
       HEAP32[$409 >> 2] = $68; //@line 1497
       $410 = $ReallocAsyncCtx10 + 124 | 0; //@line 1498
       HEAP32[$410 >> 2] = $72; //@line 1499
       $411 = $ReallocAsyncCtx10 + 128 | 0; //@line 1500
       HEAP32[$411 >> 2] = $74; //@line 1501
       $412 = $ReallocAsyncCtx10 + 132 | 0; //@line 1502
       HEAP32[$412 >> 2] = $76; //@line 1503
       $413 = $ReallocAsyncCtx10 + 136 | 0; //@line 1504
       HEAP32[$413 >> 2] = $78; //@line 1505
       $414 = $ReallocAsyncCtx10 + 140 | 0; //@line 1506
       HEAP32[$414 >> 2] = $80; //@line 1507
       $415 = $ReallocAsyncCtx10 + 144 | 0; //@line 1508
       HEAP32[$415 >> 2] = $82; //@line 1509
       $416 = $ReallocAsyncCtx10 + 148 | 0; //@line 1510
       HEAP32[$416 >> 2] = $84; //@line 1511
       $417 = $ReallocAsyncCtx10 + 152 | 0; //@line 1512
       HEAP32[$417 >> 2] = $86; //@line 1513
       $418 = $ReallocAsyncCtx10 + 156 | 0; //@line 1514
       HEAP32[$418 >> 2] = $88; //@line 1515
       $419 = $ReallocAsyncCtx10 + 160 | 0; //@line 1516
       HEAP32[$419 >> 2] = $90; //@line 1517
       $420 = $ReallocAsyncCtx10 + 164 | 0; //@line 1518
       HEAP32[$420 >> 2] = $92; //@line 1519
       $421 = $ReallocAsyncCtx10 + 168 | 0; //@line 1520
       HEAP32[$421 >> 2] = $94; //@line 1521
       $422 = $ReallocAsyncCtx10 + 172 | 0; //@line 1522
       HEAP32[$422 >> 2] = $96; //@line 1523
       $423 = $ReallocAsyncCtx10 + 176 | 0; //@line 1524
       HEAP32[$423 >> 2] = $98; //@line 1525
       $424 = $ReallocAsyncCtx10 + 180 | 0; //@line 1526
       HEAP32[$424 >> 2] = $100; //@line 1527
       $425 = $ReallocAsyncCtx10 + 184 | 0; //@line 1528
       HEAP32[$425 >> 2] = $102; //@line 1529
       $426 = $ReallocAsyncCtx10 + 188 | 0; //@line 1530
       HEAP32[$426 >> 2] = $104; //@line 1531
       $427 = $ReallocAsyncCtx10 + 192 | 0; //@line 1532
       HEAP32[$427 >> 2] = $106; //@line 1533
       $428 = $ReallocAsyncCtx10 + 196 | 0; //@line 1534
       HEAP32[$428 >> 2] = $108; //@line 1535
       $429 = $ReallocAsyncCtx10 + 200 | 0; //@line 1536
       HEAP32[$429 >> 2] = $110; //@line 1537
       $430 = $ReallocAsyncCtx10 + 204 | 0; //@line 1538
       HEAP32[$430 >> 2] = $112; //@line 1539
       $431 = $ReallocAsyncCtx10 + 208 | 0; //@line 1540
       HEAP32[$431 >> 2] = $114; //@line 1541
       $432 = $ReallocAsyncCtx10 + 212 | 0; //@line 1542
       HEAP32[$432 >> 2] = $116; //@line 1543
       $433 = $ReallocAsyncCtx10 + 216 | 0; //@line 1544
       HEAP32[$433 >> 2] = $120; //@line 1545
       $434 = $ReallocAsyncCtx10 + 220 | 0; //@line 1546
       HEAP32[$434 >> 2] = $122; //@line 1547
       $435 = $ReallocAsyncCtx10 + 224 | 0; //@line 1548
       HEAP32[$435 >> 2] = $124; //@line 1549
       $436 = $ReallocAsyncCtx10 + 228 | 0; //@line 1550
       HEAP32[$436 >> 2] = $126; //@line 1551
       $437 = $ReallocAsyncCtx10 + 232 | 0; //@line 1552
       HEAP32[$437 >> 2] = $128; //@line 1553
       $438 = $ReallocAsyncCtx10 + 236 | 0; //@line 1554
       HEAP32[$438 >> 2] = $130; //@line 1555
       $439 = $ReallocAsyncCtx10 + 240 | 0; //@line 1556
       HEAP32[$439 >> 2] = $132; //@line 1557
       $440 = $ReallocAsyncCtx10 + 244 | 0; //@line 1558
       HEAP32[$440 >> 2] = $134; //@line 1559
       $441 = $ReallocAsyncCtx10 + 248 | 0; //@line 1560
       HEAP32[$441 >> 2] = $10; //@line 1561
       $442 = $ReallocAsyncCtx10 + 252 | 0; //@line 1562
       HEAP32[$442 >> 2] = $136; //@line 1563
       $443 = $ReallocAsyncCtx10 + 256 | 0; //@line 1564
       HEAP32[$443 >> 2] = $138; //@line 1565
       $444 = $ReallocAsyncCtx10 + 260 | 0; //@line 1566
       HEAP32[$444 >> 2] = $140; //@line 1567
       $445 = $ReallocAsyncCtx10 + 264 | 0; //@line 1568
       HEAP32[$445 >> 2] = $142; //@line 1569
       sp = STACKTOP; //@line 1570
       return;
      }
      HEAP8[___async_retval >> 0] = $379; //@line 1574
      ___async_unwind = 0; //@line 1575
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 1576
      $380 = $ReallocAsyncCtx10 + 4 | 0; //@line 1577
      HEAP32[$380 >> 2] = $4; //@line 1578
      $381 = $ReallocAsyncCtx10 + 8 | 0; //@line 1579
      HEAP32[$381 >> 2] = $6; //@line 1580
      $382 = $ReallocAsyncCtx10 + 12 | 0; //@line 1581
      HEAP32[$382 >> 2] = $8; //@line 1582
      $383 = $ReallocAsyncCtx10 + 16 | 0; //@line 1583
      HEAP32[$383 >> 2] = $12; //@line 1584
      $384 = $ReallocAsyncCtx10 + 20 | 0; //@line 1585
      HEAP32[$384 >> 2] = $14; //@line 1586
      $385 = $ReallocAsyncCtx10 + 24 | 0; //@line 1587
      HEAP32[$385 >> 2] = $16; //@line 1588
      $386 = $ReallocAsyncCtx10 + 28 | 0; //@line 1589
      HEAP32[$386 >> 2] = $18; //@line 1590
      $387 = $ReallocAsyncCtx10 + 32 | 0; //@line 1591
      HEAP32[$387 >> 2] = $20; //@line 1592
      $388 = $ReallocAsyncCtx10 + 36 | 0; //@line 1593
      HEAP32[$388 >> 2] = $22; //@line 1594
      $389 = $ReallocAsyncCtx10 + 40 | 0; //@line 1595
      HEAP32[$389 >> 2] = $24; //@line 1596
      $390 = $ReallocAsyncCtx10 + 44 | 0; //@line 1597
      HEAP32[$390 >> 2] = $26; //@line 1598
      $391 = $ReallocAsyncCtx10 + 48 | 0; //@line 1599
      HEAP32[$391 >> 2] = $28; //@line 1600
      $392 = $ReallocAsyncCtx10 + 52 | 0; //@line 1601
      HEAP32[$392 >> 2] = $30; //@line 1602
      $393 = $ReallocAsyncCtx10 + 56 | 0; //@line 1603
      HEAP32[$393 >> 2] = $34; //@line 1604
      $394 = $ReallocAsyncCtx10 + 60 | 0; //@line 1605
      HEAP32[$394 >> 2] = $36; //@line 1606
      $395 = $ReallocAsyncCtx10 + 64 | 0; //@line 1607
      HEAP32[$395 >> 2] = $38; //@line 1608
      $396 = $ReallocAsyncCtx10 + 68 | 0; //@line 1609
      HEAP32[$396 >> 2] = $40; //@line 1610
      $397 = $ReallocAsyncCtx10 + 72 | 0; //@line 1611
      HEAP32[$397 >> 2] = $50; //@line 1612
      $398 = $ReallocAsyncCtx10 + 76 | 0; //@line 1613
      HEAP32[$398 >> 2] = $44; //@line 1614
      $399 = $ReallocAsyncCtx10 + 80 | 0; //@line 1615
      HEAP32[$399 >> 2] = $$reg2mem46$0; //@line 1616
      $400 = $ReallocAsyncCtx10 + 84 | 0; //@line 1617
      HEAP32[$400 >> 2] = $48; //@line 1618
      $401 = $ReallocAsyncCtx10 + 88 | 0; //@line 1619
      HEAP32[$401 >> 2] = $52; //@line 1620
      $402 = $ReallocAsyncCtx10 + 92 | 0; //@line 1621
      HEAP32[$402 >> 2] = $54; //@line 1622
      $403 = $ReallocAsyncCtx10 + 96 | 0; //@line 1623
      HEAP32[$403 >> 2] = $56; //@line 1624
      $404 = $ReallocAsyncCtx10 + 100 | 0; //@line 1625
      HEAP32[$404 >> 2] = $58; //@line 1626
      $405 = $ReallocAsyncCtx10 + 104 | 0; //@line 1627
      HEAP32[$405 >> 2] = $60; //@line 1628
      $406 = $ReallocAsyncCtx10 + 108 | 0; //@line 1629
      HEAP32[$406 >> 2] = $62; //@line 1630
      $407 = $ReallocAsyncCtx10 + 112 | 0; //@line 1631
      HEAP32[$407 >> 2] = $64; //@line 1632
      $408 = $ReallocAsyncCtx10 + 116 | 0; //@line 1633
      HEAP32[$408 >> 2] = $66; //@line 1634
      $409 = $ReallocAsyncCtx10 + 120 | 0; //@line 1635
      HEAP32[$409 >> 2] = $68; //@line 1636
      $410 = $ReallocAsyncCtx10 + 124 | 0; //@line 1637
      HEAP32[$410 >> 2] = $72; //@line 1638
      $411 = $ReallocAsyncCtx10 + 128 | 0; //@line 1639
      HEAP32[$411 >> 2] = $74; //@line 1640
      $412 = $ReallocAsyncCtx10 + 132 | 0; //@line 1641
      HEAP32[$412 >> 2] = $76; //@line 1642
      $413 = $ReallocAsyncCtx10 + 136 | 0; //@line 1643
      HEAP32[$413 >> 2] = $78; //@line 1644
      $414 = $ReallocAsyncCtx10 + 140 | 0; //@line 1645
      HEAP32[$414 >> 2] = $80; //@line 1646
      $415 = $ReallocAsyncCtx10 + 144 | 0; //@line 1647
      HEAP32[$415 >> 2] = $82; //@line 1648
      $416 = $ReallocAsyncCtx10 + 148 | 0; //@line 1649
      HEAP32[$416 >> 2] = $84; //@line 1650
      $417 = $ReallocAsyncCtx10 + 152 | 0; //@line 1651
      HEAP32[$417 >> 2] = $86; //@line 1652
      $418 = $ReallocAsyncCtx10 + 156 | 0; //@line 1653
      HEAP32[$418 >> 2] = $88; //@line 1654
      $419 = $ReallocAsyncCtx10 + 160 | 0; //@line 1655
      HEAP32[$419 >> 2] = $90; //@line 1656
      $420 = $ReallocAsyncCtx10 + 164 | 0; //@line 1657
      HEAP32[$420 >> 2] = $92; //@line 1658
      $421 = $ReallocAsyncCtx10 + 168 | 0; //@line 1659
      HEAP32[$421 >> 2] = $94; //@line 1660
      $422 = $ReallocAsyncCtx10 + 172 | 0; //@line 1661
      HEAP32[$422 >> 2] = $96; //@line 1662
      $423 = $ReallocAsyncCtx10 + 176 | 0; //@line 1663
      HEAP32[$423 >> 2] = $98; //@line 1664
      $424 = $ReallocAsyncCtx10 + 180 | 0; //@line 1665
      HEAP32[$424 >> 2] = $100; //@line 1666
      $425 = $ReallocAsyncCtx10 + 184 | 0; //@line 1667
      HEAP32[$425 >> 2] = $102; //@line 1668
      $426 = $ReallocAsyncCtx10 + 188 | 0; //@line 1669
      HEAP32[$426 >> 2] = $104; //@line 1670
      $427 = $ReallocAsyncCtx10 + 192 | 0; //@line 1671
      HEAP32[$427 >> 2] = $106; //@line 1672
      $428 = $ReallocAsyncCtx10 + 196 | 0; //@line 1673
      HEAP32[$428 >> 2] = $108; //@line 1674
      $429 = $ReallocAsyncCtx10 + 200 | 0; //@line 1675
      HEAP32[$429 >> 2] = $110; //@line 1676
      $430 = $ReallocAsyncCtx10 + 204 | 0; //@line 1677
      HEAP32[$430 >> 2] = $112; //@line 1678
      $431 = $ReallocAsyncCtx10 + 208 | 0; //@line 1679
      HEAP32[$431 >> 2] = $114; //@line 1680
      $432 = $ReallocAsyncCtx10 + 212 | 0; //@line 1681
      HEAP32[$432 >> 2] = $116; //@line 1682
      $433 = $ReallocAsyncCtx10 + 216 | 0; //@line 1683
      HEAP32[$433 >> 2] = $120; //@line 1684
      $434 = $ReallocAsyncCtx10 + 220 | 0; //@line 1685
      HEAP32[$434 >> 2] = $122; //@line 1686
      $435 = $ReallocAsyncCtx10 + 224 | 0; //@line 1687
      HEAP32[$435 >> 2] = $124; //@line 1688
      $436 = $ReallocAsyncCtx10 + 228 | 0; //@line 1689
      HEAP32[$436 >> 2] = $126; //@line 1690
      $437 = $ReallocAsyncCtx10 + 232 | 0; //@line 1691
      HEAP32[$437 >> 2] = $128; //@line 1692
      $438 = $ReallocAsyncCtx10 + 236 | 0; //@line 1693
      HEAP32[$438 >> 2] = $130; //@line 1694
      $439 = $ReallocAsyncCtx10 + 240 | 0; //@line 1695
      HEAP32[$439 >> 2] = $132; //@line 1696
      $440 = $ReallocAsyncCtx10 + 244 | 0; //@line 1697
      HEAP32[$440 >> 2] = $134; //@line 1698
      $441 = $ReallocAsyncCtx10 + 248 | 0; //@line 1699
      HEAP32[$441 >> 2] = $10; //@line 1700
      $442 = $ReallocAsyncCtx10 + 252 | 0; //@line 1701
      HEAP32[$442 >> 2] = $136; //@line 1702
      $443 = $ReallocAsyncCtx10 + 256 | 0; //@line 1703
      HEAP32[$443 >> 2] = $138; //@line 1704
      $444 = $ReallocAsyncCtx10 + 260 | 0; //@line 1705
      HEAP32[$444 >> 2] = $140; //@line 1706
      $445 = $ReallocAsyncCtx10 + 264 | 0; //@line 1707
      HEAP32[$445 >> 2] = $142; //@line 1708
      sp = STACKTOP; //@line 1709
      return;
     }
    case 44:
     {
      $447 = $$1202$in$i$reg2mem$0 & 65535; //@line 1714
      if (($$1202$i$reg2mem$0 + -1 & 65535) <= 254) {
       $450 = HEAP32[$140 >> 2] | 0; //@line 1718
       if (!(HEAP32[$450 + 52 >> 2] | 0)) {
        HEAP16[$450 + 4 >> 1] = $$1202$i$reg2mem$0; //@line 1724
        $455 = $$reg2mem69$0 + 1 | 0; //@line 1725
        HEAP32[$92 >> 2] = $455; //@line 1726
        $456 = HEAP32[$132 >> 2] | 0; //@line 1727
        $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 1728
        $457 = FUNCTION_TABLE_ii[$456 & 15]($$1202$i$reg2mem$0) | 0; //@line 1729
        if (___async) {
         HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 1732
         $458 = $ReallocAsyncCtx5 + 4 | 0; //@line 1733
         HEAP32[$458 >> 2] = $4; //@line 1734
         $459 = $ReallocAsyncCtx5 + 8 | 0; //@line 1735
         HEAP32[$459 >> 2] = $6; //@line 1736
         $460 = $ReallocAsyncCtx5 + 12 | 0; //@line 1737
         HEAP32[$460 >> 2] = $8; //@line 1738
         $461 = $ReallocAsyncCtx5 + 16 | 0; //@line 1739
         HEAP32[$461 >> 2] = $12; //@line 1740
         $462 = $ReallocAsyncCtx5 + 20 | 0; //@line 1741
         HEAP32[$462 >> 2] = $14; //@line 1742
         $463 = $ReallocAsyncCtx5 + 24 | 0; //@line 1743
         HEAP32[$463 >> 2] = $16; //@line 1744
         $464 = $ReallocAsyncCtx5 + 28 | 0; //@line 1745
         HEAP32[$464 >> 2] = $18; //@line 1746
         $465 = $ReallocAsyncCtx5 + 32 | 0; //@line 1747
         HEAP32[$465 >> 2] = $20; //@line 1748
         $466 = $ReallocAsyncCtx5 + 36 | 0; //@line 1749
         HEAP32[$466 >> 2] = $22; //@line 1750
         $467 = $ReallocAsyncCtx5 + 40 | 0; //@line 1751
         HEAP32[$467 >> 2] = $24; //@line 1752
         $468 = $ReallocAsyncCtx5 + 44 | 0; //@line 1753
         HEAP32[$468 >> 2] = $26; //@line 1754
         $469 = $ReallocAsyncCtx5 + 48 | 0; //@line 1755
         HEAP32[$469 >> 2] = $28; //@line 1756
         $470 = $ReallocAsyncCtx5 + 52 | 0; //@line 1757
         HEAP32[$470 >> 2] = $30; //@line 1758
         $471 = $ReallocAsyncCtx5 + 56 | 0; //@line 1759
         HEAP32[$471 >> 2] = $34; //@line 1760
         $472 = $ReallocAsyncCtx5 + 60 | 0; //@line 1761
         HEAP32[$472 >> 2] = $36; //@line 1762
         $473 = $ReallocAsyncCtx5 + 64 | 0; //@line 1763
         HEAP32[$473 >> 2] = $38; //@line 1764
         $474 = $ReallocAsyncCtx5 + 68 | 0; //@line 1765
         HEAP32[$474 >> 2] = $40; //@line 1766
         $475 = $ReallocAsyncCtx5 + 72 | 0; //@line 1767
         HEAP32[$475 >> 2] = $50; //@line 1768
         $476 = $ReallocAsyncCtx5 + 76 | 0; //@line 1769
         HEAP32[$476 >> 2] = $44; //@line 1770
         $477 = $ReallocAsyncCtx5 + 80 | 0; //@line 1771
         HEAP32[$477 >> 2] = $$reg2mem46$0; //@line 1772
         $478 = $ReallocAsyncCtx5 + 84 | 0; //@line 1773
         HEAP32[$478 >> 2] = $48; //@line 1774
         $479 = $ReallocAsyncCtx5 + 88 | 0; //@line 1775
         HEAP32[$479 >> 2] = $52; //@line 1776
         $480 = $ReallocAsyncCtx5 + 92 | 0; //@line 1777
         HEAP32[$480 >> 2] = $54; //@line 1778
         $481 = $ReallocAsyncCtx5 + 96 | 0; //@line 1779
         HEAP32[$481 >> 2] = $56; //@line 1780
         $482 = $ReallocAsyncCtx5 + 100 | 0; //@line 1781
         HEAP32[$482 >> 2] = $58; //@line 1782
         $483 = $ReallocAsyncCtx5 + 104 | 0; //@line 1783
         HEAP32[$483 >> 2] = $60; //@line 1784
         $484 = $ReallocAsyncCtx5 + 108 | 0; //@line 1785
         HEAP32[$484 >> 2] = $62; //@line 1786
         $485 = $ReallocAsyncCtx5 + 112 | 0; //@line 1787
         HEAP32[$485 >> 2] = $64; //@line 1788
         $486 = $ReallocAsyncCtx5 + 116 | 0; //@line 1789
         HEAP32[$486 >> 2] = $66; //@line 1790
         $487 = $ReallocAsyncCtx5 + 120 | 0; //@line 1791
         HEAP32[$487 >> 2] = $68; //@line 1792
         $488 = $ReallocAsyncCtx5 + 124 | 0; //@line 1793
         HEAP32[$488 >> 2] = $72; //@line 1794
         $489 = $ReallocAsyncCtx5 + 128 | 0; //@line 1795
         HEAP32[$489 >> 2] = $74; //@line 1796
         $490 = $ReallocAsyncCtx5 + 132 | 0; //@line 1797
         HEAP32[$490 >> 2] = $76; //@line 1798
         $491 = $ReallocAsyncCtx5 + 136 | 0; //@line 1799
         HEAP32[$491 >> 2] = $78; //@line 1800
         $492 = $ReallocAsyncCtx5 + 140 | 0; //@line 1801
         HEAP32[$492 >> 2] = $80; //@line 1802
         $493 = $ReallocAsyncCtx5 + 144 | 0; //@line 1803
         HEAP32[$493 >> 2] = $82; //@line 1804
         $494 = $ReallocAsyncCtx5 + 148 | 0; //@line 1805
         HEAP32[$494 >> 2] = $84; //@line 1806
         $495 = $ReallocAsyncCtx5 + 152 | 0; //@line 1807
         HEAP32[$495 >> 2] = $86; //@line 1808
         $496 = $ReallocAsyncCtx5 + 156 | 0; //@line 1809
         HEAP32[$496 >> 2] = $88; //@line 1810
         $497 = $ReallocAsyncCtx5 + 160 | 0; //@line 1811
         HEAP32[$497 >> 2] = $90; //@line 1812
         $498 = $ReallocAsyncCtx5 + 164 | 0; //@line 1813
         HEAP32[$498 >> 2] = $92; //@line 1814
         $499 = $ReallocAsyncCtx5 + 168 | 0; //@line 1815
         HEAP32[$499 >> 2] = $94; //@line 1816
         $500 = $ReallocAsyncCtx5 + 172 | 0; //@line 1817
         HEAP32[$500 >> 2] = $96; //@line 1818
         $501 = $ReallocAsyncCtx5 + 176 | 0; //@line 1819
         HEAP32[$501 >> 2] = $98; //@line 1820
         $502 = $ReallocAsyncCtx5 + 180 | 0; //@line 1821
         HEAP32[$502 >> 2] = $100; //@line 1822
         $503 = $ReallocAsyncCtx5 + 184 | 0; //@line 1823
         HEAP32[$503 >> 2] = $102; //@line 1824
         $504 = $ReallocAsyncCtx5 + 188 | 0; //@line 1825
         HEAP32[$504 >> 2] = $104; //@line 1826
         $505 = $ReallocAsyncCtx5 + 192 | 0; //@line 1827
         HEAP32[$505 >> 2] = $106; //@line 1828
         $506 = $ReallocAsyncCtx5 + 196 | 0; //@line 1829
         HEAP32[$506 >> 2] = $108; //@line 1830
         $507 = $ReallocAsyncCtx5 + 200 | 0; //@line 1831
         HEAP32[$507 >> 2] = $110; //@line 1832
         $508 = $ReallocAsyncCtx5 + 204 | 0; //@line 1833
         HEAP32[$508 >> 2] = $112; //@line 1834
         $509 = $ReallocAsyncCtx5 + 208 | 0; //@line 1835
         HEAP32[$509 >> 2] = $114; //@line 1836
         $510 = $ReallocAsyncCtx5 + 212 | 0; //@line 1837
         HEAP32[$510 >> 2] = $116; //@line 1838
         $511 = $ReallocAsyncCtx5 + 216 | 0; //@line 1839
         HEAP32[$511 >> 2] = $120; //@line 1840
         $512 = $ReallocAsyncCtx5 + 220 | 0; //@line 1841
         HEAP32[$512 >> 2] = $122; //@line 1842
         $513 = $ReallocAsyncCtx5 + 224 | 0; //@line 1843
         HEAP32[$513 >> 2] = $124; //@line 1844
         $514 = $ReallocAsyncCtx5 + 228 | 0; //@line 1845
         HEAP32[$514 >> 2] = $126; //@line 1846
         $515 = $ReallocAsyncCtx5 + 232 | 0; //@line 1847
         HEAP32[$515 >> 2] = $128; //@line 1848
         $516 = $ReallocAsyncCtx5 + 236 | 0; //@line 1849
         HEAP32[$516 >> 2] = $455; //@line 1850
         $517 = $ReallocAsyncCtx5 + 240 | 0; //@line 1851
         HEAP32[$517 >> 2] = $130; //@line 1852
         $518 = $ReallocAsyncCtx5 + 244 | 0; //@line 1853
         HEAP32[$518 >> 2] = $447; //@line 1854
         $519 = $ReallocAsyncCtx5 + 248 | 0; //@line 1855
         HEAP32[$519 >> 2] = $132; //@line 1856
         $520 = $ReallocAsyncCtx5 + 252 | 0; //@line 1857
         HEAP32[$520 >> 2] = $134; //@line 1858
         $521 = $ReallocAsyncCtx5 + 256 | 0; //@line 1859
         HEAP32[$521 >> 2] = $10; //@line 1860
         $522 = $ReallocAsyncCtx5 + 260 | 0; //@line 1861
         HEAP32[$522 >> 2] = $136; //@line 1862
         $523 = $ReallocAsyncCtx5 + 264 | 0; //@line 1863
         HEAP32[$523 >> 2] = $138; //@line 1864
         $524 = $ReallocAsyncCtx5 + 268 | 0; //@line 1865
         HEAP32[$524 >> 2] = $140; //@line 1866
         $525 = $ReallocAsyncCtx5 + 272 | 0; //@line 1867
         HEAP32[$525 >> 2] = $142; //@line 1868
         sp = STACKTOP; //@line 1869
         return;
        }
        HEAP32[___async_retval >> 2] = $457; //@line 1873
        ___async_unwind = 0; //@line 1874
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 1875
        $458 = $ReallocAsyncCtx5 + 4 | 0; //@line 1876
        HEAP32[$458 >> 2] = $4; //@line 1877
        $459 = $ReallocAsyncCtx5 + 8 | 0; //@line 1878
        HEAP32[$459 >> 2] = $6; //@line 1879
        $460 = $ReallocAsyncCtx5 + 12 | 0; //@line 1880
        HEAP32[$460 >> 2] = $8; //@line 1881
        $461 = $ReallocAsyncCtx5 + 16 | 0; //@line 1882
        HEAP32[$461 >> 2] = $12; //@line 1883
        $462 = $ReallocAsyncCtx5 + 20 | 0; //@line 1884
        HEAP32[$462 >> 2] = $14; //@line 1885
        $463 = $ReallocAsyncCtx5 + 24 | 0; //@line 1886
        HEAP32[$463 >> 2] = $16; //@line 1887
        $464 = $ReallocAsyncCtx5 + 28 | 0; //@line 1888
        HEAP32[$464 >> 2] = $18; //@line 1889
        $465 = $ReallocAsyncCtx5 + 32 | 0; //@line 1890
        HEAP32[$465 >> 2] = $20; //@line 1891
        $466 = $ReallocAsyncCtx5 + 36 | 0; //@line 1892
        HEAP32[$466 >> 2] = $22; //@line 1893
        $467 = $ReallocAsyncCtx5 + 40 | 0; //@line 1894
        HEAP32[$467 >> 2] = $24; //@line 1895
        $468 = $ReallocAsyncCtx5 + 44 | 0; //@line 1896
        HEAP32[$468 >> 2] = $26; //@line 1897
        $469 = $ReallocAsyncCtx5 + 48 | 0; //@line 1898
        HEAP32[$469 >> 2] = $28; //@line 1899
        $470 = $ReallocAsyncCtx5 + 52 | 0; //@line 1900
        HEAP32[$470 >> 2] = $30; //@line 1901
        $471 = $ReallocAsyncCtx5 + 56 | 0; //@line 1902
        HEAP32[$471 >> 2] = $34; //@line 1903
        $472 = $ReallocAsyncCtx5 + 60 | 0; //@line 1904
        HEAP32[$472 >> 2] = $36; //@line 1905
        $473 = $ReallocAsyncCtx5 + 64 | 0; //@line 1906
        HEAP32[$473 >> 2] = $38; //@line 1907
        $474 = $ReallocAsyncCtx5 + 68 | 0; //@line 1908
        HEAP32[$474 >> 2] = $40; //@line 1909
        $475 = $ReallocAsyncCtx5 + 72 | 0; //@line 1910
        HEAP32[$475 >> 2] = $50; //@line 1911
        $476 = $ReallocAsyncCtx5 + 76 | 0; //@line 1912
        HEAP32[$476 >> 2] = $44; //@line 1913
        $477 = $ReallocAsyncCtx5 + 80 | 0; //@line 1914
        HEAP32[$477 >> 2] = $$reg2mem46$0; //@line 1915
        $478 = $ReallocAsyncCtx5 + 84 | 0; //@line 1916
        HEAP32[$478 >> 2] = $48; //@line 1917
        $479 = $ReallocAsyncCtx5 + 88 | 0; //@line 1918
        HEAP32[$479 >> 2] = $52; //@line 1919
        $480 = $ReallocAsyncCtx5 + 92 | 0; //@line 1920
        HEAP32[$480 >> 2] = $54; //@line 1921
        $481 = $ReallocAsyncCtx5 + 96 | 0; //@line 1922
        HEAP32[$481 >> 2] = $56; //@line 1923
        $482 = $ReallocAsyncCtx5 + 100 | 0; //@line 1924
        HEAP32[$482 >> 2] = $58; //@line 1925
        $483 = $ReallocAsyncCtx5 + 104 | 0; //@line 1926
        HEAP32[$483 >> 2] = $60; //@line 1927
        $484 = $ReallocAsyncCtx5 + 108 | 0; //@line 1928
        HEAP32[$484 >> 2] = $62; //@line 1929
        $485 = $ReallocAsyncCtx5 + 112 | 0; //@line 1930
        HEAP32[$485 >> 2] = $64; //@line 1931
        $486 = $ReallocAsyncCtx5 + 116 | 0; //@line 1932
        HEAP32[$486 >> 2] = $66; //@line 1933
        $487 = $ReallocAsyncCtx5 + 120 | 0; //@line 1934
        HEAP32[$487 >> 2] = $68; //@line 1935
        $488 = $ReallocAsyncCtx5 + 124 | 0; //@line 1936
        HEAP32[$488 >> 2] = $72; //@line 1937
        $489 = $ReallocAsyncCtx5 + 128 | 0; //@line 1938
        HEAP32[$489 >> 2] = $74; //@line 1939
        $490 = $ReallocAsyncCtx5 + 132 | 0; //@line 1940
        HEAP32[$490 >> 2] = $76; //@line 1941
        $491 = $ReallocAsyncCtx5 + 136 | 0; //@line 1942
        HEAP32[$491 >> 2] = $78; //@line 1943
        $492 = $ReallocAsyncCtx5 + 140 | 0; //@line 1944
        HEAP32[$492 >> 2] = $80; //@line 1945
        $493 = $ReallocAsyncCtx5 + 144 | 0; //@line 1946
        HEAP32[$493 >> 2] = $82; //@line 1947
        $494 = $ReallocAsyncCtx5 + 148 | 0; //@line 1948
        HEAP32[$494 >> 2] = $84; //@line 1949
        $495 = $ReallocAsyncCtx5 + 152 | 0; //@line 1950
        HEAP32[$495 >> 2] = $86; //@line 1951
        $496 = $ReallocAsyncCtx5 + 156 | 0; //@line 1952
        HEAP32[$496 >> 2] = $88; //@line 1953
        $497 = $ReallocAsyncCtx5 + 160 | 0; //@line 1954
        HEAP32[$497 >> 2] = $90; //@line 1955
        $498 = $ReallocAsyncCtx5 + 164 | 0; //@line 1956
        HEAP32[$498 >> 2] = $92; //@line 1957
        $499 = $ReallocAsyncCtx5 + 168 | 0; //@line 1958
        HEAP32[$499 >> 2] = $94; //@line 1959
        $500 = $ReallocAsyncCtx5 + 172 | 0; //@line 1960
        HEAP32[$500 >> 2] = $96; //@line 1961
        $501 = $ReallocAsyncCtx5 + 176 | 0; //@line 1962
        HEAP32[$501 >> 2] = $98; //@line 1963
        $502 = $ReallocAsyncCtx5 + 180 | 0; //@line 1964
        HEAP32[$502 >> 2] = $100; //@line 1965
        $503 = $ReallocAsyncCtx5 + 184 | 0; //@line 1966
        HEAP32[$503 >> 2] = $102; //@line 1967
        $504 = $ReallocAsyncCtx5 + 188 | 0; //@line 1968
        HEAP32[$504 >> 2] = $104; //@line 1969
        $505 = $ReallocAsyncCtx5 + 192 | 0; //@line 1970
        HEAP32[$505 >> 2] = $106; //@line 1971
        $506 = $ReallocAsyncCtx5 + 196 | 0; //@line 1972
        HEAP32[$506 >> 2] = $108; //@line 1973
        $507 = $ReallocAsyncCtx5 + 200 | 0; //@line 1974
        HEAP32[$507 >> 2] = $110; //@line 1975
        $508 = $ReallocAsyncCtx5 + 204 | 0; //@line 1976
        HEAP32[$508 >> 2] = $112; //@line 1977
        $509 = $ReallocAsyncCtx5 + 208 | 0; //@line 1978
        HEAP32[$509 >> 2] = $114; //@line 1979
        $510 = $ReallocAsyncCtx5 + 212 | 0; //@line 1980
        HEAP32[$510 >> 2] = $116; //@line 1981
        $511 = $ReallocAsyncCtx5 + 216 | 0; //@line 1982
        HEAP32[$511 >> 2] = $120; //@line 1983
        $512 = $ReallocAsyncCtx5 + 220 | 0; //@line 1984
        HEAP32[$512 >> 2] = $122; //@line 1985
        $513 = $ReallocAsyncCtx5 + 224 | 0; //@line 1986
        HEAP32[$513 >> 2] = $124; //@line 1987
        $514 = $ReallocAsyncCtx5 + 228 | 0; //@line 1988
        HEAP32[$514 >> 2] = $126; //@line 1989
        $515 = $ReallocAsyncCtx5 + 232 | 0; //@line 1990
        HEAP32[$515 >> 2] = $128; //@line 1991
        $516 = $ReallocAsyncCtx5 + 236 | 0; //@line 1992
        HEAP32[$516 >> 2] = $455; //@line 1993
        $517 = $ReallocAsyncCtx5 + 240 | 0; //@line 1994
        HEAP32[$517 >> 2] = $130; //@line 1995
        $518 = $ReallocAsyncCtx5 + 244 | 0; //@line 1996
        HEAP32[$518 >> 2] = $447; //@line 1997
        $519 = $ReallocAsyncCtx5 + 248 | 0; //@line 1998
        HEAP32[$519 >> 2] = $132; //@line 1999
        $520 = $ReallocAsyncCtx5 + 252 | 0; //@line 2000
        HEAP32[$520 >> 2] = $134; //@line 2001
        $521 = $ReallocAsyncCtx5 + 256 | 0; //@line 2002
        HEAP32[$521 >> 2] = $10; //@line 2003
        $522 = $ReallocAsyncCtx5 + 260 | 0; //@line 2004
        HEAP32[$522 >> 2] = $136; //@line 2005
        $523 = $ReallocAsyncCtx5 + 264 | 0; //@line 2006
        HEAP32[$523 >> 2] = $138; //@line 2007
        $524 = $ReallocAsyncCtx5 + 268 | 0; //@line 2008
        HEAP32[$524 >> 2] = $140; //@line 2009
        $525 = $ReallocAsyncCtx5 + 272 | 0; //@line 2010
        HEAP32[$525 >> 2] = $142; //@line 2011
        sp = STACKTOP; //@line 2012
        return;
       }
      }
      _mbed_tracef(2, 3737, 4498, $104); //@line 2016
      break L2;
      break;
     }
    case 50:
     {
      $527 = HEAP32[$140 >> 2] | 0; //@line 2021
      $528 = $527 + 56 | 0; //@line 2022
      if (HEAP32[$528 >> 2] | 0) {
       _mbed_tracef(2, 3737, 4632, $68); //@line 2026
       break L2;
      }
      $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 2030
      $532 = _sn_coap_parser_options_parse_multiple_options($64, $92, $$reg2mem$0, $528, $527 + 6 | 0, 8, $$1202$i$reg2mem$0) | 0; //@line 2031
      if (___async) {
       HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 2034
       $533 = $ReallocAsyncCtx9 + 4 | 0; //@line 2035
       HEAP32[$533 >> 2] = $4; //@line 2036
       $534 = $ReallocAsyncCtx9 + 8 | 0; //@line 2037
       HEAP32[$534 >> 2] = $6; //@line 2038
       $535 = $ReallocAsyncCtx9 + 12 | 0; //@line 2039
       HEAP32[$535 >> 2] = $8; //@line 2040
       $536 = $ReallocAsyncCtx9 + 16 | 0; //@line 2041
       HEAP32[$536 >> 2] = $12; //@line 2042
       $537 = $ReallocAsyncCtx9 + 20 | 0; //@line 2043
       HEAP32[$537 >> 2] = $14; //@line 2044
       $538 = $ReallocAsyncCtx9 + 24 | 0; //@line 2045
       HEAP32[$538 >> 2] = $16; //@line 2046
       $539 = $ReallocAsyncCtx9 + 28 | 0; //@line 2047
       HEAP32[$539 >> 2] = $18; //@line 2048
       $540 = $ReallocAsyncCtx9 + 32 | 0; //@line 2049
       HEAP32[$540 >> 2] = $20; //@line 2050
       $541 = $ReallocAsyncCtx9 + 36 | 0; //@line 2051
       HEAP32[$541 >> 2] = $22; //@line 2052
       $542 = $ReallocAsyncCtx9 + 40 | 0; //@line 2053
       HEAP32[$542 >> 2] = $24; //@line 2054
       $543 = $ReallocAsyncCtx9 + 44 | 0; //@line 2055
       HEAP32[$543 >> 2] = $26; //@line 2056
       $544 = $ReallocAsyncCtx9 + 48 | 0; //@line 2057
       HEAP32[$544 >> 2] = $28; //@line 2058
       $545 = $ReallocAsyncCtx9 + 52 | 0; //@line 2059
       HEAP32[$545 >> 2] = $30; //@line 2060
       $546 = $ReallocAsyncCtx9 + 56 | 0; //@line 2061
       HEAP32[$546 >> 2] = $34; //@line 2062
       $547 = $ReallocAsyncCtx9 + 60 | 0; //@line 2063
       HEAP32[$547 >> 2] = $36; //@line 2064
       $548 = $ReallocAsyncCtx9 + 64 | 0; //@line 2065
       HEAP32[$548 >> 2] = $38; //@line 2066
       $549 = $ReallocAsyncCtx9 + 68 | 0; //@line 2067
       HEAP32[$549 >> 2] = $40; //@line 2068
       $550 = $ReallocAsyncCtx9 + 72 | 0; //@line 2069
       HEAP32[$550 >> 2] = $50; //@line 2070
       $551 = $ReallocAsyncCtx9 + 76 | 0; //@line 2071
       HEAP32[$551 >> 2] = $44; //@line 2072
       $552 = $ReallocAsyncCtx9 + 80 | 0; //@line 2073
       HEAP32[$552 >> 2] = $$reg2mem46$0; //@line 2074
       $553 = $ReallocAsyncCtx9 + 84 | 0; //@line 2075
       HEAP32[$553 >> 2] = $48; //@line 2076
       $554 = $ReallocAsyncCtx9 + 88 | 0; //@line 2077
       HEAP32[$554 >> 2] = $52; //@line 2078
       $555 = $ReallocAsyncCtx9 + 92 | 0; //@line 2079
       HEAP32[$555 >> 2] = $54; //@line 2080
       $556 = $ReallocAsyncCtx9 + 96 | 0; //@line 2081
       HEAP32[$556 >> 2] = $56; //@line 2082
       $557 = $ReallocAsyncCtx9 + 100 | 0; //@line 2083
       HEAP32[$557 >> 2] = $58; //@line 2084
       $558 = $ReallocAsyncCtx9 + 104 | 0; //@line 2085
       HEAP32[$558 >> 2] = $60; //@line 2086
       $559 = $ReallocAsyncCtx9 + 108 | 0; //@line 2087
       HEAP32[$559 >> 2] = $62; //@line 2088
       $560 = $ReallocAsyncCtx9 + 112 | 0; //@line 2089
       HEAP32[$560 >> 2] = $64; //@line 2090
       $561 = $ReallocAsyncCtx9 + 116 | 0; //@line 2091
       HEAP32[$561 >> 2] = $66; //@line 2092
       $562 = $ReallocAsyncCtx9 + 120 | 0; //@line 2093
       HEAP32[$562 >> 2] = $68; //@line 2094
       $563 = $ReallocAsyncCtx9 + 124 | 0; //@line 2095
       HEAP32[$563 >> 2] = $72; //@line 2096
       $564 = $ReallocAsyncCtx9 + 128 | 0; //@line 2097
       HEAP32[$564 >> 2] = $74; //@line 2098
       $565 = $ReallocAsyncCtx9 + 132 | 0; //@line 2099
       HEAP32[$565 >> 2] = $76; //@line 2100
       $566 = $ReallocAsyncCtx9 + 136 | 0; //@line 2101
       HEAP32[$566 >> 2] = $78; //@line 2102
       $567 = $ReallocAsyncCtx9 + 140 | 0; //@line 2103
       HEAP32[$567 >> 2] = $80; //@line 2104
       $568 = $ReallocAsyncCtx9 + 144 | 0; //@line 2105
       HEAP32[$568 >> 2] = $82; //@line 2106
       $569 = $ReallocAsyncCtx9 + 148 | 0; //@line 2107
       HEAP32[$569 >> 2] = $84; //@line 2108
       $570 = $ReallocAsyncCtx9 + 152 | 0; //@line 2109
       HEAP32[$570 >> 2] = $86; //@line 2110
       $571 = $ReallocAsyncCtx9 + 156 | 0; //@line 2111
       HEAP32[$571 >> 2] = $88; //@line 2112
       $572 = $ReallocAsyncCtx9 + 160 | 0; //@line 2113
       HEAP32[$572 >> 2] = $90; //@line 2114
       $573 = $ReallocAsyncCtx9 + 164 | 0; //@line 2115
       HEAP32[$573 >> 2] = $92; //@line 2116
       $574 = $ReallocAsyncCtx9 + 168 | 0; //@line 2117
       HEAP32[$574 >> 2] = $94; //@line 2118
       $575 = $ReallocAsyncCtx9 + 172 | 0; //@line 2119
       HEAP32[$575 >> 2] = $96; //@line 2120
       $576 = $ReallocAsyncCtx9 + 176 | 0; //@line 2121
       HEAP32[$576 >> 2] = $98; //@line 2122
       $577 = $ReallocAsyncCtx9 + 180 | 0; //@line 2123
       HEAP32[$577 >> 2] = $100; //@line 2124
       $578 = $ReallocAsyncCtx9 + 184 | 0; //@line 2125
       HEAP32[$578 >> 2] = $102; //@line 2126
       $579 = $ReallocAsyncCtx9 + 188 | 0; //@line 2127
       HEAP32[$579 >> 2] = $104; //@line 2128
       $580 = $ReallocAsyncCtx9 + 192 | 0; //@line 2129
       HEAP32[$580 >> 2] = $106; //@line 2130
       $581 = $ReallocAsyncCtx9 + 196 | 0; //@line 2131
       HEAP32[$581 >> 2] = $108; //@line 2132
       $582 = $ReallocAsyncCtx9 + 200 | 0; //@line 2133
       HEAP32[$582 >> 2] = $110; //@line 2134
       $583 = $ReallocAsyncCtx9 + 204 | 0; //@line 2135
       HEAP32[$583 >> 2] = $112; //@line 2136
       $584 = $ReallocAsyncCtx9 + 208 | 0; //@line 2137
       HEAP32[$584 >> 2] = $114; //@line 2138
       $585 = $ReallocAsyncCtx9 + 212 | 0; //@line 2139
       HEAP32[$585 >> 2] = $116; //@line 2140
       $586 = $ReallocAsyncCtx9 + 216 | 0; //@line 2141
       HEAP32[$586 >> 2] = $120; //@line 2142
       $587 = $ReallocAsyncCtx9 + 220 | 0; //@line 2143
       HEAP32[$587 >> 2] = $122; //@line 2144
       $588 = $ReallocAsyncCtx9 + 224 | 0; //@line 2145
       HEAP32[$588 >> 2] = $124; //@line 2146
       $589 = $ReallocAsyncCtx9 + 228 | 0; //@line 2147
       HEAP32[$589 >> 2] = $126; //@line 2148
       $590 = $ReallocAsyncCtx9 + 232 | 0; //@line 2149
       HEAP32[$590 >> 2] = $128; //@line 2150
       $591 = $ReallocAsyncCtx9 + 236 | 0; //@line 2151
       HEAP32[$591 >> 2] = $130; //@line 2152
       $592 = $ReallocAsyncCtx9 + 240 | 0; //@line 2153
       HEAP32[$592 >> 2] = $132; //@line 2154
       $593 = $ReallocAsyncCtx9 + 244 | 0; //@line 2155
       HEAP32[$593 >> 2] = $134; //@line 2156
       $594 = $ReallocAsyncCtx9 + 248 | 0; //@line 2157
       HEAP32[$594 >> 2] = $10; //@line 2158
       $595 = $ReallocAsyncCtx9 + 252 | 0; //@line 2159
       HEAP32[$595 >> 2] = $136; //@line 2160
       $596 = $ReallocAsyncCtx9 + 256 | 0; //@line 2161
       HEAP32[$596 >> 2] = $138; //@line 2162
       $597 = $ReallocAsyncCtx9 + 260 | 0; //@line 2163
       HEAP32[$597 >> 2] = $140; //@line 2164
       $598 = $ReallocAsyncCtx9 + 264 | 0; //@line 2165
       HEAP32[$598 >> 2] = $142; //@line 2166
       sp = STACKTOP; //@line 2167
       return;
      }
      HEAP8[___async_retval >> 0] = $532; //@line 2171
      ___async_unwind = 0; //@line 2172
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 2173
      $533 = $ReallocAsyncCtx9 + 4 | 0; //@line 2174
      HEAP32[$533 >> 2] = $4; //@line 2175
      $534 = $ReallocAsyncCtx9 + 8 | 0; //@line 2176
      HEAP32[$534 >> 2] = $6; //@line 2177
      $535 = $ReallocAsyncCtx9 + 12 | 0; //@line 2178
      HEAP32[$535 >> 2] = $8; //@line 2179
      $536 = $ReallocAsyncCtx9 + 16 | 0; //@line 2180
      HEAP32[$536 >> 2] = $12; //@line 2181
      $537 = $ReallocAsyncCtx9 + 20 | 0; //@line 2182
      HEAP32[$537 >> 2] = $14; //@line 2183
      $538 = $ReallocAsyncCtx9 + 24 | 0; //@line 2184
      HEAP32[$538 >> 2] = $16; //@line 2185
      $539 = $ReallocAsyncCtx9 + 28 | 0; //@line 2186
      HEAP32[$539 >> 2] = $18; //@line 2187
      $540 = $ReallocAsyncCtx9 + 32 | 0; //@line 2188
      HEAP32[$540 >> 2] = $20; //@line 2189
      $541 = $ReallocAsyncCtx9 + 36 | 0; //@line 2190
      HEAP32[$541 >> 2] = $22; //@line 2191
      $542 = $ReallocAsyncCtx9 + 40 | 0; //@line 2192
      HEAP32[$542 >> 2] = $24; //@line 2193
      $543 = $ReallocAsyncCtx9 + 44 | 0; //@line 2194
      HEAP32[$543 >> 2] = $26; //@line 2195
      $544 = $ReallocAsyncCtx9 + 48 | 0; //@line 2196
      HEAP32[$544 >> 2] = $28; //@line 2197
      $545 = $ReallocAsyncCtx9 + 52 | 0; //@line 2198
      HEAP32[$545 >> 2] = $30; //@line 2199
      $546 = $ReallocAsyncCtx9 + 56 | 0; //@line 2200
      HEAP32[$546 >> 2] = $34; //@line 2201
      $547 = $ReallocAsyncCtx9 + 60 | 0; //@line 2202
      HEAP32[$547 >> 2] = $36; //@line 2203
      $548 = $ReallocAsyncCtx9 + 64 | 0; //@line 2204
      HEAP32[$548 >> 2] = $38; //@line 2205
      $549 = $ReallocAsyncCtx9 + 68 | 0; //@line 2206
      HEAP32[$549 >> 2] = $40; //@line 2207
      $550 = $ReallocAsyncCtx9 + 72 | 0; //@line 2208
      HEAP32[$550 >> 2] = $50; //@line 2209
      $551 = $ReallocAsyncCtx9 + 76 | 0; //@line 2210
      HEAP32[$551 >> 2] = $44; //@line 2211
      $552 = $ReallocAsyncCtx9 + 80 | 0; //@line 2212
      HEAP32[$552 >> 2] = $$reg2mem46$0; //@line 2213
      $553 = $ReallocAsyncCtx9 + 84 | 0; //@line 2214
      HEAP32[$553 >> 2] = $48; //@line 2215
      $554 = $ReallocAsyncCtx9 + 88 | 0; //@line 2216
      HEAP32[$554 >> 2] = $52; //@line 2217
      $555 = $ReallocAsyncCtx9 + 92 | 0; //@line 2218
      HEAP32[$555 >> 2] = $54; //@line 2219
      $556 = $ReallocAsyncCtx9 + 96 | 0; //@line 2220
      HEAP32[$556 >> 2] = $56; //@line 2221
      $557 = $ReallocAsyncCtx9 + 100 | 0; //@line 2222
      HEAP32[$557 >> 2] = $58; //@line 2223
      $558 = $ReallocAsyncCtx9 + 104 | 0; //@line 2224
      HEAP32[$558 >> 2] = $60; //@line 2225
      $559 = $ReallocAsyncCtx9 + 108 | 0; //@line 2226
      HEAP32[$559 >> 2] = $62; //@line 2227
      $560 = $ReallocAsyncCtx9 + 112 | 0; //@line 2228
      HEAP32[$560 >> 2] = $64; //@line 2229
      $561 = $ReallocAsyncCtx9 + 116 | 0; //@line 2230
      HEAP32[$561 >> 2] = $66; //@line 2231
      $562 = $ReallocAsyncCtx9 + 120 | 0; //@line 2232
      HEAP32[$562 >> 2] = $68; //@line 2233
      $563 = $ReallocAsyncCtx9 + 124 | 0; //@line 2234
      HEAP32[$563 >> 2] = $72; //@line 2235
      $564 = $ReallocAsyncCtx9 + 128 | 0; //@line 2236
      HEAP32[$564 >> 2] = $74; //@line 2237
      $565 = $ReallocAsyncCtx9 + 132 | 0; //@line 2238
      HEAP32[$565 >> 2] = $76; //@line 2239
      $566 = $ReallocAsyncCtx9 + 136 | 0; //@line 2240
      HEAP32[$566 >> 2] = $78; //@line 2241
      $567 = $ReallocAsyncCtx9 + 140 | 0; //@line 2242
      HEAP32[$567 >> 2] = $80; //@line 2243
      $568 = $ReallocAsyncCtx9 + 144 | 0; //@line 2244
      HEAP32[$568 >> 2] = $82; //@line 2245
      $569 = $ReallocAsyncCtx9 + 148 | 0; //@line 2246
      HEAP32[$569 >> 2] = $84; //@line 2247
      $570 = $ReallocAsyncCtx9 + 152 | 0; //@line 2248
      HEAP32[$570 >> 2] = $86; //@line 2249
      $571 = $ReallocAsyncCtx9 + 156 | 0; //@line 2250
      HEAP32[$571 >> 2] = $88; //@line 2251
      $572 = $ReallocAsyncCtx9 + 160 | 0; //@line 2252
      HEAP32[$572 >> 2] = $90; //@line 2253
      $573 = $ReallocAsyncCtx9 + 164 | 0; //@line 2254
      HEAP32[$573 >> 2] = $92; //@line 2255
      $574 = $ReallocAsyncCtx9 + 168 | 0; //@line 2256
      HEAP32[$574 >> 2] = $94; //@line 2257
      $575 = $ReallocAsyncCtx9 + 172 | 0; //@line 2258
      HEAP32[$575 >> 2] = $96; //@line 2259
      $576 = $ReallocAsyncCtx9 + 176 | 0; //@line 2260
      HEAP32[$576 >> 2] = $98; //@line 2261
      $577 = $ReallocAsyncCtx9 + 180 | 0; //@line 2262
      HEAP32[$577 >> 2] = $100; //@line 2263
      $578 = $ReallocAsyncCtx9 + 184 | 0; //@line 2264
      HEAP32[$578 >> 2] = $102; //@line 2265
      $579 = $ReallocAsyncCtx9 + 188 | 0; //@line 2266
      HEAP32[$579 >> 2] = $104; //@line 2267
      $580 = $ReallocAsyncCtx9 + 192 | 0; //@line 2268
      HEAP32[$580 >> 2] = $106; //@line 2269
      $581 = $ReallocAsyncCtx9 + 196 | 0; //@line 2270
      HEAP32[$581 >> 2] = $108; //@line 2271
      $582 = $ReallocAsyncCtx9 + 200 | 0; //@line 2272
      HEAP32[$582 >> 2] = $110; //@line 2273
      $583 = $ReallocAsyncCtx9 + 204 | 0; //@line 2274
      HEAP32[$583 >> 2] = $112; //@line 2275
      $584 = $ReallocAsyncCtx9 + 208 | 0; //@line 2276
      HEAP32[$584 >> 2] = $114; //@line 2277
      $585 = $ReallocAsyncCtx9 + 212 | 0; //@line 2278
      HEAP32[$585 >> 2] = $116; //@line 2279
      $586 = $ReallocAsyncCtx9 + 216 | 0; //@line 2280
      HEAP32[$586 >> 2] = $120; //@line 2281
      $587 = $ReallocAsyncCtx9 + 220 | 0; //@line 2282
      HEAP32[$587 >> 2] = $122; //@line 2283
      $588 = $ReallocAsyncCtx9 + 224 | 0; //@line 2284
      HEAP32[$588 >> 2] = $124; //@line 2285
      $589 = $ReallocAsyncCtx9 + 228 | 0; //@line 2286
      HEAP32[$589 >> 2] = $126; //@line 2287
      $590 = $ReallocAsyncCtx9 + 232 | 0; //@line 2288
      HEAP32[$590 >> 2] = $128; //@line 2289
      $591 = $ReallocAsyncCtx9 + 236 | 0; //@line 2290
      HEAP32[$591 >> 2] = $130; //@line 2291
      $592 = $ReallocAsyncCtx9 + 240 | 0; //@line 2292
      HEAP32[$592 >> 2] = $132; //@line 2293
      $593 = $ReallocAsyncCtx9 + 244 | 0; //@line 2294
      HEAP32[$593 >> 2] = $134; //@line 2295
      $594 = $ReallocAsyncCtx9 + 248 | 0; //@line 2296
      HEAP32[$594 >> 2] = $10; //@line 2297
      $595 = $ReallocAsyncCtx9 + 252 | 0; //@line 2298
      HEAP32[$595 >> 2] = $136; //@line 2299
      $596 = $ReallocAsyncCtx9 + 256 | 0; //@line 2300
      HEAP32[$596 >> 2] = $138; //@line 2301
      $597 = $ReallocAsyncCtx9 + 260 | 0; //@line 2302
      HEAP32[$597 >> 2] = $140; //@line 2303
      $598 = $ReallocAsyncCtx9 + 264 | 0; //@line 2304
      HEAP32[$598 >> 2] = $142; //@line 2305
      sp = STACKTOP; //@line 2306
      return;
     }
    case 57:
     {
      _mbed_tracef(2, 3737, 4765, $8); //@line 2311
      break L2;
      break;
     }
    case 61:
     {
      $616 = HEAP32[$140 >> 2] | 0; //@line 2316
      $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 2319
      $619 = _sn_coap_parser_options_parse_multiple_options($64, $92, $$reg2mem$0, $616 + 60 | 0, $616 + 8 | 0, 20, $$1202$i$reg2mem$0) | 0; //@line 2320
      if (___async) {
       HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 2323
       $620 = $ReallocAsyncCtx8 + 4 | 0; //@line 2324
       HEAP32[$620 >> 2] = $4; //@line 2325
       $621 = $ReallocAsyncCtx8 + 8 | 0; //@line 2326
       HEAP32[$621 >> 2] = $6; //@line 2327
       $622 = $ReallocAsyncCtx8 + 12 | 0; //@line 2328
       HEAP32[$622 >> 2] = $8; //@line 2329
       $623 = $ReallocAsyncCtx8 + 16 | 0; //@line 2330
       HEAP32[$623 >> 2] = $12; //@line 2331
       $624 = $ReallocAsyncCtx8 + 20 | 0; //@line 2332
       HEAP32[$624 >> 2] = $14; //@line 2333
       $625 = $ReallocAsyncCtx8 + 24 | 0; //@line 2334
       HEAP32[$625 >> 2] = $16; //@line 2335
       $626 = $ReallocAsyncCtx8 + 28 | 0; //@line 2336
       HEAP32[$626 >> 2] = $18; //@line 2337
       $627 = $ReallocAsyncCtx8 + 32 | 0; //@line 2338
       HEAP32[$627 >> 2] = $20; //@line 2339
       $628 = $ReallocAsyncCtx8 + 36 | 0; //@line 2340
       HEAP32[$628 >> 2] = $22; //@line 2341
       $629 = $ReallocAsyncCtx8 + 40 | 0; //@line 2342
       HEAP32[$629 >> 2] = $24; //@line 2343
       $630 = $ReallocAsyncCtx8 + 44 | 0; //@line 2344
       HEAP32[$630 >> 2] = $26; //@line 2345
       $631 = $ReallocAsyncCtx8 + 48 | 0; //@line 2346
       HEAP32[$631 >> 2] = $28; //@line 2347
       $632 = $ReallocAsyncCtx8 + 52 | 0; //@line 2348
       HEAP32[$632 >> 2] = $30; //@line 2349
       $633 = $ReallocAsyncCtx8 + 56 | 0; //@line 2350
       HEAP32[$633 >> 2] = $34; //@line 2351
       $634 = $ReallocAsyncCtx8 + 60 | 0; //@line 2352
       HEAP32[$634 >> 2] = $36; //@line 2353
       $635 = $ReallocAsyncCtx8 + 64 | 0; //@line 2354
       HEAP32[$635 >> 2] = $38; //@line 2355
       $636 = $ReallocAsyncCtx8 + 68 | 0; //@line 2356
       HEAP32[$636 >> 2] = $40; //@line 2357
       $637 = $ReallocAsyncCtx8 + 72 | 0; //@line 2358
       HEAP32[$637 >> 2] = $50; //@line 2359
       $638 = $ReallocAsyncCtx8 + 76 | 0; //@line 2360
       HEAP32[$638 >> 2] = $44; //@line 2361
       $639 = $ReallocAsyncCtx8 + 80 | 0; //@line 2362
       HEAP32[$639 >> 2] = $$reg2mem46$0; //@line 2363
       $640 = $ReallocAsyncCtx8 + 84 | 0; //@line 2364
       HEAP32[$640 >> 2] = $48; //@line 2365
       $641 = $ReallocAsyncCtx8 + 88 | 0; //@line 2366
       HEAP32[$641 >> 2] = $52; //@line 2367
       $642 = $ReallocAsyncCtx8 + 92 | 0; //@line 2368
       HEAP32[$642 >> 2] = $54; //@line 2369
       $643 = $ReallocAsyncCtx8 + 96 | 0; //@line 2370
       HEAP32[$643 >> 2] = $56; //@line 2371
       $644 = $ReallocAsyncCtx8 + 100 | 0; //@line 2372
       HEAP32[$644 >> 2] = $58; //@line 2373
       $645 = $ReallocAsyncCtx8 + 104 | 0; //@line 2374
       HEAP32[$645 >> 2] = $60; //@line 2375
       $646 = $ReallocAsyncCtx8 + 108 | 0; //@line 2376
       HEAP32[$646 >> 2] = $62; //@line 2377
       $647 = $ReallocAsyncCtx8 + 112 | 0; //@line 2378
       HEAP32[$647 >> 2] = $64; //@line 2379
       $648 = $ReallocAsyncCtx8 + 116 | 0; //@line 2380
       HEAP32[$648 >> 2] = $66; //@line 2381
       $649 = $ReallocAsyncCtx8 + 120 | 0; //@line 2382
       HEAP32[$649 >> 2] = $68; //@line 2383
       $650 = $ReallocAsyncCtx8 + 124 | 0; //@line 2384
       HEAP32[$650 >> 2] = $72; //@line 2385
       $651 = $ReallocAsyncCtx8 + 128 | 0; //@line 2386
       HEAP32[$651 >> 2] = $74; //@line 2387
       $652 = $ReallocAsyncCtx8 + 132 | 0; //@line 2388
       HEAP32[$652 >> 2] = $76; //@line 2389
       $653 = $ReallocAsyncCtx8 + 136 | 0; //@line 2390
       HEAP32[$653 >> 2] = $78; //@line 2391
       $654 = $ReallocAsyncCtx8 + 140 | 0; //@line 2392
       HEAP32[$654 >> 2] = $80; //@line 2393
       $655 = $ReallocAsyncCtx8 + 144 | 0; //@line 2394
       HEAP32[$655 >> 2] = $82; //@line 2395
       $656 = $ReallocAsyncCtx8 + 148 | 0; //@line 2396
       HEAP32[$656 >> 2] = $84; //@line 2397
       $657 = $ReallocAsyncCtx8 + 152 | 0; //@line 2398
       HEAP32[$657 >> 2] = $86; //@line 2399
       $658 = $ReallocAsyncCtx8 + 156 | 0; //@line 2400
       HEAP32[$658 >> 2] = $88; //@line 2401
       $659 = $ReallocAsyncCtx8 + 160 | 0; //@line 2402
       HEAP32[$659 >> 2] = $90; //@line 2403
       $660 = $ReallocAsyncCtx8 + 164 | 0; //@line 2404
       HEAP32[$660 >> 2] = $92; //@line 2405
       $661 = $ReallocAsyncCtx8 + 168 | 0; //@line 2406
       HEAP32[$661 >> 2] = $94; //@line 2407
       $662 = $ReallocAsyncCtx8 + 172 | 0; //@line 2408
       HEAP32[$662 >> 2] = $96; //@line 2409
       $663 = $ReallocAsyncCtx8 + 176 | 0; //@line 2410
       HEAP32[$663 >> 2] = $98; //@line 2411
       $664 = $ReallocAsyncCtx8 + 180 | 0; //@line 2412
       HEAP32[$664 >> 2] = $100; //@line 2413
       $665 = $ReallocAsyncCtx8 + 184 | 0; //@line 2414
       HEAP32[$665 >> 2] = $102; //@line 2415
       $666 = $ReallocAsyncCtx8 + 188 | 0; //@line 2416
       HEAP32[$666 >> 2] = $104; //@line 2417
       $667 = $ReallocAsyncCtx8 + 192 | 0; //@line 2418
       HEAP32[$667 >> 2] = $106; //@line 2419
       $668 = $ReallocAsyncCtx8 + 196 | 0; //@line 2420
       HEAP32[$668 >> 2] = $108; //@line 2421
       $669 = $ReallocAsyncCtx8 + 200 | 0; //@line 2422
       HEAP32[$669 >> 2] = $110; //@line 2423
       $670 = $ReallocAsyncCtx8 + 204 | 0; //@line 2424
       HEAP32[$670 >> 2] = $112; //@line 2425
       $671 = $ReallocAsyncCtx8 + 208 | 0; //@line 2426
       HEAP32[$671 >> 2] = $114; //@line 2427
       $672 = $ReallocAsyncCtx8 + 212 | 0; //@line 2428
       HEAP32[$672 >> 2] = $116; //@line 2429
       $673 = $ReallocAsyncCtx8 + 216 | 0; //@line 2430
       HEAP32[$673 >> 2] = $120; //@line 2431
       $674 = $ReallocAsyncCtx8 + 220 | 0; //@line 2432
       HEAP32[$674 >> 2] = $122; //@line 2433
       $675 = $ReallocAsyncCtx8 + 224 | 0; //@line 2434
       HEAP32[$675 >> 2] = $124; //@line 2435
       $676 = $ReallocAsyncCtx8 + 228 | 0; //@line 2436
       HEAP32[$676 >> 2] = $126; //@line 2437
       $677 = $ReallocAsyncCtx8 + 232 | 0; //@line 2438
       HEAP32[$677 >> 2] = $128; //@line 2439
       $678 = $ReallocAsyncCtx8 + 236 | 0; //@line 2440
       HEAP32[$678 >> 2] = $130; //@line 2441
       $679 = $ReallocAsyncCtx8 + 240 | 0; //@line 2442
       HEAP32[$679 >> 2] = $132; //@line 2443
       $680 = $ReallocAsyncCtx8 + 244 | 0; //@line 2444
       HEAP32[$680 >> 2] = $134; //@line 2445
       $681 = $ReallocAsyncCtx8 + 248 | 0; //@line 2446
       HEAP32[$681 >> 2] = $10; //@line 2447
       $682 = $ReallocAsyncCtx8 + 252 | 0; //@line 2448
       HEAP32[$682 >> 2] = $136; //@line 2449
       $683 = $ReallocAsyncCtx8 + 256 | 0; //@line 2450
       HEAP32[$683 >> 2] = $138; //@line 2451
       $684 = $ReallocAsyncCtx8 + 260 | 0; //@line 2452
       HEAP32[$684 >> 2] = $140; //@line 2453
       $685 = $ReallocAsyncCtx8 + 264 | 0; //@line 2454
       HEAP32[$685 >> 2] = $142; //@line 2455
       sp = STACKTOP; //@line 2456
       return;
      }
      HEAP8[___async_retval >> 0] = $619; //@line 2460
      ___async_unwind = 0; //@line 2461
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 2462
      $620 = $ReallocAsyncCtx8 + 4 | 0; //@line 2463
      HEAP32[$620 >> 2] = $4; //@line 2464
      $621 = $ReallocAsyncCtx8 + 8 | 0; //@line 2465
      HEAP32[$621 >> 2] = $6; //@line 2466
      $622 = $ReallocAsyncCtx8 + 12 | 0; //@line 2467
      HEAP32[$622 >> 2] = $8; //@line 2468
      $623 = $ReallocAsyncCtx8 + 16 | 0; //@line 2469
      HEAP32[$623 >> 2] = $12; //@line 2470
      $624 = $ReallocAsyncCtx8 + 20 | 0; //@line 2471
      HEAP32[$624 >> 2] = $14; //@line 2472
      $625 = $ReallocAsyncCtx8 + 24 | 0; //@line 2473
      HEAP32[$625 >> 2] = $16; //@line 2474
      $626 = $ReallocAsyncCtx8 + 28 | 0; //@line 2475
      HEAP32[$626 >> 2] = $18; //@line 2476
      $627 = $ReallocAsyncCtx8 + 32 | 0; //@line 2477
      HEAP32[$627 >> 2] = $20; //@line 2478
      $628 = $ReallocAsyncCtx8 + 36 | 0; //@line 2479
      HEAP32[$628 >> 2] = $22; //@line 2480
      $629 = $ReallocAsyncCtx8 + 40 | 0; //@line 2481
      HEAP32[$629 >> 2] = $24; //@line 2482
      $630 = $ReallocAsyncCtx8 + 44 | 0; //@line 2483
      HEAP32[$630 >> 2] = $26; //@line 2484
      $631 = $ReallocAsyncCtx8 + 48 | 0; //@line 2485
      HEAP32[$631 >> 2] = $28; //@line 2486
      $632 = $ReallocAsyncCtx8 + 52 | 0; //@line 2487
      HEAP32[$632 >> 2] = $30; //@line 2488
      $633 = $ReallocAsyncCtx8 + 56 | 0; //@line 2489
      HEAP32[$633 >> 2] = $34; //@line 2490
      $634 = $ReallocAsyncCtx8 + 60 | 0; //@line 2491
      HEAP32[$634 >> 2] = $36; //@line 2492
      $635 = $ReallocAsyncCtx8 + 64 | 0; //@line 2493
      HEAP32[$635 >> 2] = $38; //@line 2494
      $636 = $ReallocAsyncCtx8 + 68 | 0; //@line 2495
      HEAP32[$636 >> 2] = $40; //@line 2496
      $637 = $ReallocAsyncCtx8 + 72 | 0; //@line 2497
      HEAP32[$637 >> 2] = $50; //@line 2498
      $638 = $ReallocAsyncCtx8 + 76 | 0; //@line 2499
      HEAP32[$638 >> 2] = $44; //@line 2500
      $639 = $ReallocAsyncCtx8 + 80 | 0; //@line 2501
      HEAP32[$639 >> 2] = $$reg2mem46$0; //@line 2502
      $640 = $ReallocAsyncCtx8 + 84 | 0; //@line 2503
      HEAP32[$640 >> 2] = $48; //@line 2504
      $641 = $ReallocAsyncCtx8 + 88 | 0; //@line 2505
      HEAP32[$641 >> 2] = $52; //@line 2506
      $642 = $ReallocAsyncCtx8 + 92 | 0; //@line 2507
      HEAP32[$642 >> 2] = $54; //@line 2508
      $643 = $ReallocAsyncCtx8 + 96 | 0; //@line 2509
      HEAP32[$643 >> 2] = $56; //@line 2510
      $644 = $ReallocAsyncCtx8 + 100 | 0; //@line 2511
      HEAP32[$644 >> 2] = $58; //@line 2512
      $645 = $ReallocAsyncCtx8 + 104 | 0; //@line 2513
      HEAP32[$645 >> 2] = $60; //@line 2514
      $646 = $ReallocAsyncCtx8 + 108 | 0; //@line 2515
      HEAP32[$646 >> 2] = $62; //@line 2516
      $647 = $ReallocAsyncCtx8 + 112 | 0; //@line 2517
      HEAP32[$647 >> 2] = $64; //@line 2518
      $648 = $ReallocAsyncCtx8 + 116 | 0; //@line 2519
      HEAP32[$648 >> 2] = $66; //@line 2520
      $649 = $ReallocAsyncCtx8 + 120 | 0; //@line 2521
      HEAP32[$649 >> 2] = $68; //@line 2522
      $650 = $ReallocAsyncCtx8 + 124 | 0; //@line 2523
      HEAP32[$650 >> 2] = $72; //@line 2524
      $651 = $ReallocAsyncCtx8 + 128 | 0; //@line 2525
      HEAP32[$651 >> 2] = $74; //@line 2526
      $652 = $ReallocAsyncCtx8 + 132 | 0; //@line 2527
      HEAP32[$652 >> 2] = $76; //@line 2528
      $653 = $ReallocAsyncCtx8 + 136 | 0; //@line 2529
      HEAP32[$653 >> 2] = $78; //@line 2530
      $654 = $ReallocAsyncCtx8 + 140 | 0; //@line 2531
      HEAP32[$654 >> 2] = $80; //@line 2532
      $655 = $ReallocAsyncCtx8 + 144 | 0; //@line 2533
      HEAP32[$655 >> 2] = $82; //@line 2534
      $656 = $ReallocAsyncCtx8 + 148 | 0; //@line 2535
      HEAP32[$656 >> 2] = $84; //@line 2536
      $657 = $ReallocAsyncCtx8 + 152 | 0; //@line 2537
      HEAP32[$657 >> 2] = $86; //@line 2538
      $658 = $ReallocAsyncCtx8 + 156 | 0; //@line 2539
      HEAP32[$658 >> 2] = $88; //@line 2540
      $659 = $ReallocAsyncCtx8 + 160 | 0; //@line 2541
      HEAP32[$659 >> 2] = $90; //@line 2542
      $660 = $ReallocAsyncCtx8 + 164 | 0; //@line 2543
      HEAP32[$660 >> 2] = $92; //@line 2544
      $661 = $ReallocAsyncCtx8 + 168 | 0; //@line 2545
      HEAP32[$661 >> 2] = $94; //@line 2546
      $662 = $ReallocAsyncCtx8 + 172 | 0; //@line 2547
      HEAP32[$662 >> 2] = $96; //@line 2548
      $663 = $ReallocAsyncCtx8 + 176 | 0; //@line 2549
      HEAP32[$663 >> 2] = $98; //@line 2550
      $664 = $ReallocAsyncCtx8 + 180 | 0; //@line 2551
      HEAP32[$664 >> 2] = $100; //@line 2552
      $665 = $ReallocAsyncCtx8 + 184 | 0; //@line 2553
      HEAP32[$665 >> 2] = $102; //@line 2554
      $666 = $ReallocAsyncCtx8 + 188 | 0; //@line 2555
      HEAP32[$666 >> 2] = $104; //@line 2556
      $667 = $ReallocAsyncCtx8 + 192 | 0; //@line 2557
      HEAP32[$667 >> 2] = $106; //@line 2558
      $668 = $ReallocAsyncCtx8 + 196 | 0; //@line 2559
      HEAP32[$668 >> 2] = $108; //@line 2560
      $669 = $ReallocAsyncCtx8 + 200 | 0; //@line 2561
      HEAP32[$669 >> 2] = $110; //@line 2562
      $670 = $ReallocAsyncCtx8 + 204 | 0; //@line 2563
      HEAP32[$670 >> 2] = $112; //@line 2564
      $671 = $ReallocAsyncCtx8 + 208 | 0; //@line 2565
      HEAP32[$671 >> 2] = $114; //@line 2566
      $672 = $ReallocAsyncCtx8 + 212 | 0; //@line 2567
      HEAP32[$672 >> 2] = $116; //@line 2568
      $673 = $ReallocAsyncCtx8 + 216 | 0; //@line 2569
      HEAP32[$673 >> 2] = $120; //@line 2570
      $674 = $ReallocAsyncCtx8 + 220 | 0; //@line 2571
      HEAP32[$674 >> 2] = $122; //@line 2572
      $675 = $ReallocAsyncCtx8 + 224 | 0; //@line 2573
      HEAP32[$675 >> 2] = $124; //@line 2574
      $676 = $ReallocAsyncCtx8 + 228 | 0; //@line 2575
      HEAP32[$676 >> 2] = $126; //@line 2576
      $677 = $ReallocAsyncCtx8 + 232 | 0; //@line 2577
      HEAP32[$677 >> 2] = $128; //@line 2578
      $678 = $ReallocAsyncCtx8 + 236 | 0; //@line 2579
      HEAP32[$678 >> 2] = $130; //@line 2580
      $679 = $ReallocAsyncCtx8 + 240 | 0; //@line 2581
      HEAP32[$679 >> 2] = $132; //@line 2582
      $680 = $ReallocAsyncCtx8 + 244 | 0; //@line 2583
      HEAP32[$680 >> 2] = $134; //@line 2584
      $681 = $ReallocAsyncCtx8 + 248 | 0; //@line 2585
      HEAP32[$681 >> 2] = $10; //@line 2586
      $682 = $ReallocAsyncCtx8 + 252 | 0; //@line 2587
      HEAP32[$682 >> 2] = $136; //@line 2588
      $683 = $ReallocAsyncCtx8 + 256 | 0; //@line 2589
      HEAP32[$683 >> 2] = $138; //@line 2590
      $684 = $ReallocAsyncCtx8 + 260 | 0; //@line 2591
      HEAP32[$684 >> 2] = $140; //@line 2592
      $685 = $ReallocAsyncCtx8 + 264 | 0; //@line 2593
      HEAP32[$685 >> 2] = $142; //@line 2594
      sp = STACKTOP; //@line 2595
      return;
     }
    case 64:
     {
      $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 2600
      $687 = _sn_coap_parser_options_parse_multiple_options($64, $92, $$reg2mem$1, $94, $98, 11, $$1202$i$reg2mem$2) | 0; //@line 2601
      if (___async) {
       HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 2604
       $688 = $ReallocAsyncCtx7 + 4 | 0; //@line 2605
       HEAP32[$688 >> 2] = $4; //@line 2606
       $689 = $ReallocAsyncCtx7 + 8 | 0; //@line 2607
       HEAP32[$689 >> 2] = $6; //@line 2608
       $690 = $ReallocAsyncCtx7 + 12 | 0; //@line 2609
       HEAP32[$690 >> 2] = $8; //@line 2610
       $691 = $ReallocAsyncCtx7 + 16 | 0; //@line 2611
       HEAP32[$691 >> 2] = $12; //@line 2612
       $692 = $ReallocAsyncCtx7 + 20 | 0; //@line 2613
       HEAP32[$692 >> 2] = $14; //@line 2614
       $693 = $ReallocAsyncCtx7 + 24 | 0; //@line 2615
       HEAP32[$693 >> 2] = $16; //@line 2616
       $694 = $ReallocAsyncCtx7 + 28 | 0; //@line 2617
       HEAP32[$694 >> 2] = $18; //@line 2618
       $695 = $ReallocAsyncCtx7 + 32 | 0; //@line 2619
       HEAP32[$695 >> 2] = $20; //@line 2620
       $696 = $ReallocAsyncCtx7 + 36 | 0; //@line 2621
       HEAP32[$696 >> 2] = $22; //@line 2622
       $697 = $ReallocAsyncCtx7 + 40 | 0; //@line 2623
       HEAP32[$697 >> 2] = $24; //@line 2624
       $698 = $ReallocAsyncCtx7 + 44 | 0; //@line 2625
       HEAP32[$698 >> 2] = $26; //@line 2626
       $699 = $ReallocAsyncCtx7 + 48 | 0; //@line 2627
       HEAP32[$699 >> 2] = $28; //@line 2628
       $700 = $ReallocAsyncCtx7 + 52 | 0; //@line 2629
       HEAP32[$700 >> 2] = $30; //@line 2630
       $701 = $ReallocAsyncCtx7 + 56 | 0; //@line 2631
       HEAP32[$701 >> 2] = $34; //@line 2632
       $702 = $ReallocAsyncCtx7 + 60 | 0; //@line 2633
       HEAP32[$702 >> 2] = $36; //@line 2634
       $703 = $ReallocAsyncCtx7 + 64 | 0; //@line 2635
       HEAP32[$703 >> 2] = $38; //@line 2636
       $704 = $ReallocAsyncCtx7 + 68 | 0; //@line 2637
       HEAP32[$704 >> 2] = $40; //@line 2638
       $705 = $ReallocAsyncCtx7 + 72 | 0; //@line 2639
       HEAP32[$705 >> 2] = $50; //@line 2640
       $706 = $ReallocAsyncCtx7 + 76 | 0; //@line 2641
       HEAP32[$706 >> 2] = $44; //@line 2642
       $707 = $ReallocAsyncCtx7 + 80 | 0; //@line 2643
       HEAP32[$707 >> 2] = $$reg2mem46$2; //@line 2644
       $708 = $ReallocAsyncCtx7 + 84 | 0; //@line 2645
       HEAP32[$708 >> 2] = $48; //@line 2646
       $709 = $ReallocAsyncCtx7 + 88 | 0; //@line 2647
       HEAP32[$709 >> 2] = $52; //@line 2648
       $710 = $ReallocAsyncCtx7 + 92 | 0; //@line 2649
       HEAP32[$710 >> 2] = $54; //@line 2650
       $711 = $ReallocAsyncCtx7 + 96 | 0; //@line 2651
       HEAP32[$711 >> 2] = $56; //@line 2652
       $712 = $ReallocAsyncCtx7 + 100 | 0; //@line 2653
       HEAP32[$712 >> 2] = $58; //@line 2654
       $713 = $ReallocAsyncCtx7 + 104 | 0; //@line 2655
       HEAP32[$713 >> 2] = $60; //@line 2656
       $714 = $ReallocAsyncCtx7 + 108 | 0; //@line 2657
       HEAP32[$714 >> 2] = $62; //@line 2658
       $715 = $ReallocAsyncCtx7 + 112 | 0; //@line 2659
       HEAP32[$715 >> 2] = $64; //@line 2660
       $716 = $ReallocAsyncCtx7 + 116 | 0; //@line 2661
       HEAP32[$716 >> 2] = $66; //@line 2662
       $717 = $ReallocAsyncCtx7 + 120 | 0; //@line 2663
       HEAP32[$717 >> 2] = $68; //@line 2664
       $718 = $ReallocAsyncCtx7 + 124 | 0; //@line 2665
       HEAP32[$718 >> 2] = $72; //@line 2666
       $719 = $ReallocAsyncCtx7 + 128 | 0; //@line 2667
       HEAP32[$719 >> 2] = $74; //@line 2668
       $720 = $ReallocAsyncCtx7 + 132 | 0; //@line 2669
       HEAP32[$720 >> 2] = $76; //@line 2670
       $721 = $ReallocAsyncCtx7 + 136 | 0; //@line 2671
       HEAP32[$721 >> 2] = $78; //@line 2672
       $722 = $ReallocAsyncCtx7 + 140 | 0; //@line 2673
       HEAP32[$722 >> 2] = $80; //@line 2674
       $723 = $ReallocAsyncCtx7 + 144 | 0; //@line 2675
       HEAP32[$723 >> 2] = $82; //@line 2676
       $724 = $ReallocAsyncCtx7 + 148 | 0; //@line 2677
       HEAP32[$724 >> 2] = $84; //@line 2678
       $725 = $ReallocAsyncCtx7 + 152 | 0; //@line 2679
       HEAP32[$725 >> 2] = $86; //@line 2680
       $726 = $ReallocAsyncCtx7 + 156 | 0; //@line 2681
       HEAP32[$726 >> 2] = $88; //@line 2682
       $727 = $ReallocAsyncCtx7 + 160 | 0; //@line 2683
       HEAP32[$727 >> 2] = $90; //@line 2684
       $728 = $ReallocAsyncCtx7 + 164 | 0; //@line 2685
       HEAP32[$728 >> 2] = $92; //@line 2686
       $729 = $ReallocAsyncCtx7 + 168 | 0; //@line 2687
       HEAP32[$729 >> 2] = $94; //@line 2688
       $730 = $ReallocAsyncCtx7 + 172 | 0; //@line 2689
       HEAP32[$730 >> 2] = $96; //@line 2690
       $731 = $ReallocAsyncCtx7 + 176 | 0; //@line 2691
       HEAP32[$731 >> 2] = $98; //@line 2692
       $732 = $ReallocAsyncCtx7 + 180 | 0; //@line 2693
       HEAP32[$732 >> 2] = $100; //@line 2694
       $733 = $ReallocAsyncCtx7 + 184 | 0; //@line 2695
       HEAP32[$733 >> 2] = $102; //@line 2696
       $734 = $ReallocAsyncCtx7 + 188 | 0; //@line 2697
       HEAP32[$734 >> 2] = $104; //@line 2698
       $735 = $ReallocAsyncCtx7 + 192 | 0; //@line 2699
       HEAP32[$735 >> 2] = $106; //@line 2700
       $736 = $ReallocAsyncCtx7 + 196 | 0; //@line 2701
       HEAP32[$736 >> 2] = $108; //@line 2702
       $737 = $ReallocAsyncCtx7 + 200 | 0; //@line 2703
       HEAP32[$737 >> 2] = $110; //@line 2704
       $738 = $ReallocAsyncCtx7 + 204 | 0; //@line 2705
       HEAP32[$738 >> 2] = $112; //@line 2706
       $739 = $ReallocAsyncCtx7 + 208 | 0; //@line 2707
       HEAP32[$739 >> 2] = $114; //@line 2708
       $740 = $ReallocAsyncCtx7 + 212 | 0; //@line 2709
       HEAP32[$740 >> 2] = $116; //@line 2710
       $741 = $ReallocAsyncCtx7 + 216 | 0; //@line 2711
       HEAP32[$741 >> 2] = $120; //@line 2712
       $742 = $ReallocAsyncCtx7 + 220 | 0; //@line 2713
       HEAP32[$742 >> 2] = $122; //@line 2714
       $743 = $ReallocAsyncCtx7 + 224 | 0; //@line 2715
       HEAP32[$743 >> 2] = $124; //@line 2716
       $744 = $ReallocAsyncCtx7 + 228 | 0; //@line 2717
       HEAP32[$744 >> 2] = $126; //@line 2718
       $745 = $ReallocAsyncCtx7 + 232 | 0; //@line 2719
       HEAP32[$745 >> 2] = $128; //@line 2720
       $746 = $ReallocAsyncCtx7 + 236 | 0; //@line 2721
       HEAP32[$746 >> 2] = $130; //@line 2722
       $747 = $ReallocAsyncCtx7 + 240 | 0; //@line 2723
       HEAP32[$747 >> 2] = $132; //@line 2724
       $748 = $ReallocAsyncCtx7 + 244 | 0; //@line 2725
       HEAP32[$748 >> 2] = $134; //@line 2726
       $749 = $ReallocAsyncCtx7 + 248 | 0; //@line 2727
       HEAP32[$749 >> 2] = $10; //@line 2728
       $750 = $ReallocAsyncCtx7 + 252 | 0; //@line 2729
       HEAP32[$750 >> 2] = $136; //@line 2730
       $751 = $ReallocAsyncCtx7 + 256 | 0; //@line 2731
       HEAP32[$751 >> 2] = $138; //@line 2732
       $752 = $ReallocAsyncCtx7 + 260 | 0; //@line 2733
       HEAP32[$752 >> 2] = $140; //@line 2734
       $753 = $ReallocAsyncCtx7 + 264 | 0; //@line 2735
       HEAP32[$753 >> 2] = $142; //@line 2736
       sp = STACKTOP; //@line 2737
       return;
      }
      HEAP8[___async_retval >> 0] = $687; //@line 2741
      ___async_unwind = 0; //@line 2742
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 2743
      $688 = $ReallocAsyncCtx7 + 4 | 0; //@line 2744
      HEAP32[$688 >> 2] = $4; //@line 2745
      $689 = $ReallocAsyncCtx7 + 8 | 0; //@line 2746
      HEAP32[$689 >> 2] = $6; //@line 2747
      $690 = $ReallocAsyncCtx7 + 12 | 0; //@line 2748
      HEAP32[$690 >> 2] = $8; //@line 2749
      $691 = $ReallocAsyncCtx7 + 16 | 0; //@line 2750
      HEAP32[$691 >> 2] = $12; //@line 2751
      $692 = $ReallocAsyncCtx7 + 20 | 0; //@line 2752
      HEAP32[$692 >> 2] = $14; //@line 2753
      $693 = $ReallocAsyncCtx7 + 24 | 0; //@line 2754
      HEAP32[$693 >> 2] = $16; //@line 2755
      $694 = $ReallocAsyncCtx7 + 28 | 0; //@line 2756
      HEAP32[$694 >> 2] = $18; //@line 2757
      $695 = $ReallocAsyncCtx7 + 32 | 0; //@line 2758
      HEAP32[$695 >> 2] = $20; //@line 2759
      $696 = $ReallocAsyncCtx7 + 36 | 0; //@line 2760
      HEAP32[$696 >> 2] = $22; //@line 2761
      $697 = $ReallocAsyncCtx7 + 40 | 0; //@line 2762
      HEAP32[$697 >> 2] = $24; //@line 2763
      $698 = $ReallocAsyncCtx7 + 44 | 0; //@line 2764
      HEAP32[$698 >> 2] = $26; //@line 2765
      $699 = $ReallocAsyncCtx7 + 48 | 0; //@line 2766
      HEAP32[$699 >> 2] = $28; //@line 2767
      $700 = $ReallocAsyncCtx7 + 52 | 0; //@line 2768
      HEAP32[$700 >> 2] = $30; //@line 2769
      $701 = $ReallocAsyncCtx7 + 56 | 0; //@line 2770
      HEAP32[$701 >> 2] = $34; //@line 2771
      $702 = $ReallocAsyncCtx7 + 60 | 0; //@line 2772
      HEAP32[$702 >> 2] = $36; //@line 2773
      $703 = $ReallocAsyncCtx7 + 64 | 0; //@line 2774
      HEAP32[$703 >> 2] = $38; //@line 2775
      $704 = $ReallocAsyncCtx7 + 68 | 0; //@line 2776
      HEAP32[$704 >> 2] = $40; //@line 2777
      $705 = $ReallocAsyncCtx7 + 72 | 0; //@line 2778
      HEAP32[$705 >> 2] = $50; //@line 2779
      $706 = $ReallocAsyncCtx7 + 76 | 0; //@line 2780
      HEAP32[$706 >> 2] = $44; //@line 2781
      $707 = $ReallocAsyncCtx7 + 80 | 0; //@line 2782
      HEAP32[$707 >> 2] = $$reg2mem46$2; //@line 2783
      $708 = $ReallocAsyncCtx7 + 84 | 0; //@line 2784
      HEAP32[$708 >> 2] = $48; //@line 2785
      $709 = $ReallocAsyncCtx7 + 88 | 0; //@line 2786
      HEAP32[$709 >> 2] = $52; //@line 2787
      $710 = $ReallocAsyncCtx7 + 92 | 0; //@line 2788
      HEAP32[$710 >> 2] = $54; //@line 2789
      $711 = $ReallocAsyncCtx7 + 96 | 0; //@line 2790
      HEAP32[$711 >> 2] = $56; //@line 2791
      $712 = $ReallocAsyncCtx7 + 100 | 0; //@line 2792
      HEAP32[$712 >> 2] = $58; //@line 2793
      $713 = $ReallocAsyncCtx7 + 104 | 0; //@line 2794
      HEAP32[$713 >> 2] = $60; //@line 2795
      $714 = $ReallocAsyncCtx7 + 108 | 0; //@line 2796
      HEAP32[$714 >> 2] = $62; //@line 2797
      $715 = $ReallocAsyncCtx7 + 112 | 0; //@line 2798
      HEAP32[$715 >> 2] = $64; //@line 2799
      $716 = $ReallocAsyncCtx7 + 116 | 0; //@line 2800
      HEAP32[$716 >> 2] = $66; //@line 2801
      $717 = $ReallocAsyncCtx7 + 120 | 0; //@line 2802
      HEAP32[$717 >> 2] = $68; //@line 2803
      $718 = $ReallocAsyncCtx7 + 124 | 0; //@line 2804
      HEAP32[$718 >> 2] = $72; //@line 2805
      $719 = $ReallocAsyncCtx7 + 128 | 0; //@line 2806
      HEAP32[$719 >> 2] = $74; //@line 2807
      $720 = $ReallocAsyncCtx7 + 132 | 0; //@line 2808
      HEAP32[$720 >> 2] = $76; //@line 2809
      $721 = $ReallocAsyncCtx7 + 136 | 0; //@line 2810
      HEAP32[$721 >> 2] = $78; //@line 2811
      $722 = $ReallocAsyncCtx7 + 140 | 0; //@line 2812
      HEAP32[$722 >> 2] = $80; //@line 2813
      $723 = $ReallocAsyncCtx7 + 144 | 0; //@line 2814
      HEAP32[$723 >> 2] = $82; //@line 2815
      $724 = $ReallocAsyncCtx7 + 148 | 0; //@line 2816
      HEAP32[$724 >> 2] = $84; //@line 2817
      $725 = $ReallocAsyncCtx7 + 152 | 0; //@line 2818
      HEAP32[$725 >> 2] = $86; //@line 2819
      $726 = $ReallocAsyncCtx7 + 156 | 0; //@line 2820
      HEAP32[$726 >> 2] = $88; //@line 2821
      $727 = $ReallocAsyncCtx7 + 160 | 0; //@line 2822
      HEAP32[$727 >> 2] = $90; //@line 2823
      $728 = $ReallocAsyncCtx7 + 164 | 0; //@line 2824
      HEAP32[$728 >> 2] = $92; //@line 2825
      $729 = $ReallocAsyncCtx7 + 168 | 0; //@line 2826
      HEAP32[$729 >> 2] = $94; //@line 2827
      $730 = $ReallocAsyncCtx7 + 172 | 0; //@line 2828
      HEAP32[$730 >> 2] = $96; //@line 2829
      $731 = $ReallocAsyncCtx7 + 176 | 0; //@line 2830
      HEAP32[$731 >> 2] = $98; //@line 2831
      $732 = $ReallocAsyncCtx7 + 180 | 0; //@line 2832
      HEAP32[$732 >> 2] = $100; //@line 2833
      $733 = $ReallocAsyncCtx7 + 184 | 0; //@line 2834
      HEAP32[$733 >> 2] = $102; //@line 2835
      $734 = $ReallocAsyncCtx7 + 188 | 0; //@line 2836
      HEAP32[$734 >> 2] = $104; //@line 2837
      $735 = $ReallocAsyncCtx7 + 192 | 0; //@line 2838
      HEAP32[$735 >> 2] = $106; //@line 2839
      $736 = $ReallocAsyncCtx7 + 196 | 0; //@line 2840
      HEAP32[$736 >> 2] = $108; //@line 2841
      $737 = $ReallocAsyncCtx7 + 200 | 0; //@line 2842
      HEAP32[$737 >> 2] = $110; //@line 2843
      $738 = $ReallocAsyncCtx7 + 204 | 0; //@line 2844
      HEAP32[$738 >> 2] = $112; //@line 2845
      $739 = $ReallocAsyncCtx7 + 208 | 0; //@line 2846
      HEAP32[$739 >> 2] = $114; //@line 2847
      $740 = $ReallocAsyncCtx7 + 212 | 0; //@line 2848
      HEAP32[$740 >> 2] = $116; //@line 2849
      $741 = $ReallocAsyncCtx7 + 216 | 0; //@line 2850
      HEAP32[$741 >> 2] = $120; //@line 2851
      $742 = $ReallocAsyncCtx7 + 220 | 0; //@line 2852
      HEAP32[$742 >> 2] = $122; //@line 2853
      $743 = $ReallocAsyncCtx7 + 224 | 0; //@line 2854
      HEAP32[$743 >> 2] = $124; //@line 2855
      $744 = $ReallocAsyncCtx7 + 228 | 0; //@line 2856
      HEAP32[$744 >> 2] = $126; //@line 2857
      $745 = $ReallocAsyncCtx7 + 232 | 0; //@line 2858
      HEAP32[$745 >> 2] = $128; //@line 2859
      $746 = $ReallocAsyncCtx7 + 236 | 0; //@line 2860
      HEAP32[$746 >> 2] = $130; //@line 2861
      $747 = $ReallocAsyncCtx7 + 240 | 0; //@line 2862
      HEAP32[$747 >> 2] = $132; //@line 2863
      $748 = $ReallocAsyncCtx7 + 244 | 0; //@line 2864
      HEAP32[$748 >> 2] = $134; //@line 2865
      $749 = $ReallocAsyncCtx7 + 248 | 0; //@line 2866
      HEAP32[$749 >> 2] = $10; //@line 2867
      $750 = $ReallocAsyncCtx7 + 252 | 0; //@line 2868
      HEAP32[$750 >> 2] = $136; //@line 2869
      $751 = $ReallocAsyncCtx7 + 256 | 0; //@line 2870
      HEAP32[$751 >> 2] = $138; //@line 2871
      $752 = $ReallocAsyncCtx7 + 260 | 0; //@line 2872
      HEAP32[$752 >> 2] = $140; //@line 2873
      $753 = $ReallocAsyncCtx7 + 264 | 0; //@line 2874
      HEAP32[$753 >> 2] = $142; //@line 2875
      sp = STACKTOP; //@line 2876
      return;
     }
    case 69:
     {
      _mbed_tracef(2, 3737, 4960, $18); //@line 2881
      break L2;
      break;
     }
    case 73:
     {
      $771 = HEAP32[$140 >> 2] | 0; //@line 2886
      $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 2889
      $774 = _sn_coap_parser_options_parse_multiple_options($64, $92, $$reg2mem$0, $771 + 64 | 0, $771 + 10 | 0, 15, $$1202$i$reg2mem$0) | 0; //@line 2890
      if (___async) {
       HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 2893
       $775 = $ReallocAsyncCtx6 + 4 | 0; //@line 2894
       HEAP32[$775 >> 2] = $4; //@line 2895
       $776 = $ReallocAsyncCtx6 + 8 | 0; //@line 2896
       HEAP32[$776 >> 2] = $6; //@line 2897
       $777 = $ReallocAsyncCtx6 + 12 | 0; //@line 2898
       HEAP32[$777 >> 2] = $8; //@line 2899
       $778 = $ReallocAsyncCtx6 + 16 | 0; //@line 2900
       HEAP32[$778 >> 2] = $12; //@line 2901
       $779 = $ReallocAsyncCtx6 + 20 | 0; //@line 2902
       HEAP32[$779 >> 2] = $14; //@line 2903
       $780 = $ReallocAsyncCtx6 + 24 | 0; //@line 2904
       HEAP32[$780 >> 2] = $16; //@line 2905
       $781 = $ReallocAsyncCtx6 + 28 | 0; //@line 2906
       HEAP32[$781 >> 2] = $18; //@line 2907
       $782 = $ReallocAsyncCtx6 + 32 | 0; //@line 2908
       HEAP32[$782 >> 2] = $20; //@line 2909
       $783 = $ReallocAsyncCtx6 + 36 | 0; //@line 2910
       HEAP32[$783 >> 2] = $22; //@line 2911
       $784 = $ReallocAsyncCtx6 + 40 | 0; //@line 2912
       HEAP32[$784 >> 2] = $24; //@line 2913
       $785 = $ReallocAsyncCtx6 + 44 | 0; //@line 2914
       HEAP32[$785 >> 2] = $26; //@line 2915
       $786 = $ReallocAsyncCtx6 + 48 | 0; //@line 2916
       HEAP32[$786 >> 2] = $28; //@line 2917
       $787 = $ReallocAsyncCtx6 + 52 | 0; //@line 2918
       HEAP32[$787 >> 2] = $30; //@line 2919
       $788 = $ReallocAsyncCtx6 + 56 | 0; //@line 2920
       HEAP32[$788 >> 2] = $34; //@line 2921
       $789 = $ReallocAsyncCtx6 + 60 | 0; //@line 2922
       HEAP32[$789 >> 2] = $36; //@line 2923
       $790 = $ReallocAsyncCtx6 + 64 | 0; //@line 2924
       HEAP32[$790 >> 2] = $38; //@line 2925
       $791 = $ReallocAsyncCtx6 + 68 | 0; //@line 2926
       HEAP32[$791 >> 2] = $40; //@line 2927
       $792 = $ReallocAsyncCtx6 + 72 | 0; //@line 2928
       HEAP32[$792 >> 2] = $50; //@line 2929
       $793 = $ReallocAsyncCtx6 + 76 | 0; //@line 2930
       HEAP32[$793 >> 2] = $44; //@line 2931
       $794 = $ReallocAsyncCtx6 + 80 | 0; //@line 2932
       HEAP32[$794 >> 2] = $$reg2mem46$0; //@line 2933
       $795 = $ReallocAsyncCtx6 + 84 | 0; //@line 2934
       HEAP32[$795 >> 2] = $48; //@line 2935
       $796 = $ReallocAsyncCtx6 + 88 | 0; //@line 2936
       HEAP32[$796 >> 2] = $52; //@line 2937
       $797 = $ReallocAsyncCtx6 + 92 | 0; //@line 2938
       HEAP32[$797 >> 2] = $54; //@line 2939
       $798 = $ReallocAsyncCtx6 + 96 | 0; //@line 2940
       HEAP32[$798 >> 2] = $56; //@line 2941
       $799 = $ReallocAsyncCtx6 + 100 | 0; //@line 2942
       HEAP32[$799 >> 2] = $58; //@line 2943
       $800 = $ReallocAsyncCtx6 + 104 | 0; //@line 2944
       HEAP32[$800 >> 2] = $60; //@line 2945
       $801 = $ReallocAsyncCtx6 + 108 | 0; //@line 2946
       HEAP32[$801 >> 2] = $62; //@line 2947
       $802 = $ReallocAsyncCtx6 + 112 | 0; //@line 2948
       HEAP32[$802 >> 2] = $64; //@line 2949
       $803 = $ReallocAsyncCtx6 + 116 | 0; //@line 2950
       HEAP32[$803 >> 2] = $66; //@line 2951
       $804 = $ReallocAsyncCtx6 + 120 | 0; //@line 2952
       HEAP32[$804 >> 2] = $68; //@line 2953
       $805 = $ReallocAsyncCtx6 + 124 | 0; //@line 2954
       HEAP32[$805 >> 2] = $72; //@line 2955
       $806 = $ReallocAsyncCtx6 + 128 | 0; //@line 2956
       HEAP32[$806 >> 2] = $74; //@line 2957
       $807 = $ReallocAsyncCtx6 + 132 | 0; //@line 2958
       HEAP32[$807 >> 2] = $76; //@line 2959
       $808 = $ReallocAsyncCtx6 + 136 | 0; //@line 2960
       HEAP32[$808 >> 2] = $78; //@line 2961
       $809 = $ReallocAsyncCtx6 + 140 | 0; //@line 2962
       HEAP32[$809 >> 2] = $80; //@line 2963
       $810 = $ReallocAsyncCtx6 + 144 | 0; //@line 2964
       HEAP32[$810 >> 2] = $82; //@line 2965
       $811 = $ReallocAsyncCtx6 + 148 | 0; //@line 2966
       HEAP32[$811 >> 2] = $84; //@line 2967
       $812 = $ReallocAsyncCtx6 + 152 | 0; //@line 2968
       HEAP32[$812 >> 2] = $86; //@line 2969
       $813 = $ReallocAsyncCtx6 + 156 | 0; //@line 2970
       HEAP32[$813 >> 2] = $88; //@line 2971
       $814 = $ReallocAsyncCtx6 + 160 | 0; //@line 2972
       HEAP32[$814 >> 2] = $90; //@line 2973
       $815 = $ReallocAsyncCtx6 + 164 | 0; //@line 2974
       HEAP32[$815 >> 2] = $92; //@line 2975
       $816 = $ReallocAsyncCtx6 + 168 | 0; //@line 2976
       HEAP32[$816 >> 2] = $94; //@line 2977
       $817 = $ReallocAsyncCtx6 + 172 | 0; //@line 2978
       HEAP32[$817 >> 2] = $96; //@line 2979
       $818 = $ReallocAsyncCtx6 + 176 | 0; //@line 2980
       HEAP32[$818 >> 2] = $98; //@line 2981
       $819 = $ReallocAsyncCtx6 + 180 | 0; //@line 2982
       HEAP32[$819 >> 2] = $100; //@line 2983
       $820 = $ReallocAsyncCtx6 + 184 | 0; //@line 2984
       HEAP32[$820 >> 2] = $102; //@line 2985
       $821 = $ReallocAsyncCtx6 + 188 | 0; //@line 2986
       HEAP32[$821 >> 2] = $104; //@line 2987
       $822 = $ReallocAsyncCtx6 + 192 | 0; //@line 2988
       HEAP32[$822 >> 2] = $106; //@line 2989
       $823 = $ReallocAsyncCtx6 + 196 | 0; //@line 2990
       HEAP32[$823 >> 2] = $108; //@line 2991
       $824 = $ReallocAsyncCtx6 + 200 | 0; //@line 2992
       HEAP32[$824 >> 2] = $110; //@line 2993
       $825 = $ReallocAsyncCtx6 + 204 | 0; //@line 2994
       HEAP32[$825 >> 2] = $112; //@line 2995
       $826 = $ReallocAsyncCtx6 + 208 | 0; //@line 2996
       HEAP32[$826 >> 2] = $114; //@line 2997
       $827 = $ReallocAsyncCtx6 + 212 | 0; //@line 2998
       HEAP32[$827 >> 2] = $116; //@line 2999
       $828 = $ReallocAsyncCtx6 + 216 | 0; //@line 3000
       HEAP32[$828 >> 2] = $120; //@line 3001
       $829 = $ReallocAsyncCtx6 + 220 | 0; //@line 3002
       HEAP32[$829 >> 2] = $122; //@line 3003
       $830 = $ReallocAsyncCtx6 + 224 | 0; //@line 3004
       HEAP32[$830 >> 2] = $124; //@line 3005
       $831 = $ReallocAsyncCtx6 + 228 | 0; //@line 3006
       HEAP32[$831 >> 2] = $126; //@line 3007
       $832 = $ReallocAsyncCtx6 + 232 | 0; //@line 3008
       HEAP32[$832 >> 2] = $128; //@line 3009
       $833 = $ReallocAsyncCtx6 + 236 | 0; //@line 3010
       HEAP32[$833 >> 2] = $130; //@line 3011
       $834 = $ReallocAsyncCtx6 + 240 | 0; //@line 3012
       HEAP32[$834 >> 2] = $132; //@line 3013
       $835 = $ReallocAsyncCtx6 + 244 | 0; //@line 3014
       HEAP32[$835 >> 2] = $134; //@line 3015
       $836 = $ReallocAsyncCtx6 + 248 | 0; //@line 3016
       HEAP32[$836 >> 2] = $10; //@line 3017
       $837 = $ReallocAsyncCtx6 + 252 | 0; //@line 3018
       HEAP32[$837 >> 2] = $136; //@line 3019
       $838 = $ReallocAsyncCtx6 + 256 | 0; //@line 3020
       HEAP32[$838 >> 2] = $138; //@line 3021
       $839 = $ReallocAsyncCtx6 + 260 | 0; //@line 3022
       HEAP32[$839 >> 2] = $140; //@line 3023
       $840 = $ReallocAsyncCtx6 + 264 | 0; //@line 3024
       HEAP32[$840 >> 2] = $142; //@line 3025
       sp = STACKTOP; //@line 3026
       return;
      }
      HEAP8[___async_retval >> 0] = $774; //@line 3030
      ___async_unwind = 0; //@line 3031
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 3032
      $775 = $ReallocAsyncCtx6 + 4 | 0; //@line 3033
      HEAP32[$775 >> 2] = $4; //@line 3034
      $776 = $ReallocAsyncCtx6 + 8 | 0; //@line 3035
      HEAP32[$776 >> 2] = $6; //@line 3036
      $777 = $ReallocAsyncCtx6 + 12 | 0; //@line 3037
      HEAP32[$777 >> 2] = $8; //@line 3038
      $778 = $ReallocAsyncCtx6 + 16 | 0; //@line 3039
      HEAP32[$778 >> 2] = $12; //@line 3040
      $779 = $ReallocAsyncCtx6 + 20 | 0; //@line 3041
      HEAP32[$779 >> 2] = $14; //@line 3042
      $780 = $ReallocAsyncCtx6 + 24 | 0; //@line 3043
      HEAP32[$780 >> 2] = $16; //@line 3044
      $781 = $ReallocAsyncCtx6 + 28 | 0; //@line 3045
      HEAP32[$781 >> 2] = $18; //@line 3046
      $782 = $ReallocAsyncCtx6 + 32 | 0; //@line 3047
      HEAP32[$782 >> 2] = $20; //@line 3048
      $783 = $ReallocAsyncCtx6 + 36 | 0; //@line 3049
      HEAP32[$783 >> 2] = $22; //@line 3050
      $784 = $ReallocAsyncCtx6 + 40 | 0; //@line 3051
      HEAP32[$784 >> 2] = $24; //@line 3052
      $785 = $ReallocAsyncCtx6 + 44 | 0; //@line 3053
      HEAP32[$785 >> 2] = $26; //@line 3054
      $786 = $ReallocAsyncCtx6 + 48 | 0; //@line 3055
      HEAP32[$786 >> 2] = $28; //@line 3056
      $787 = $ReallocAsyncCtx6 + 52 | 0; //@line 3057
      HEAP32[$787 >> 2] = $30; //@line 3058
      $788 = $ReallocAsyncCtx6 + 56 | 0; //@line 3059
      HEAP32[$788 >> 2] = $34; //@line 3060
      $789 = $ReallocAsyncCtx6 + 60 | 0; //@line 3061
      HEAP32[$789 >> 2] = $36; //@line 3062
      $790 = $ReallocAsyncCtx6 + 64 | 0; //@line 3063
      HEAP32[$790 >> 2] = $38; //@line 3064
      $791 = $ReallocAsyncCtx6 + 68 | 0; //@line 3065
      HEAP32[$791 >> 2] = $40; //@line 3066
      $792 = $ReallocAsyncCtx6 + 72 | 0; //@line 3067
      HEAP32[$792 >> 2] = $50; //@line 3068
      $793 = $ReallocAsyncCtx6 + 76 | 0; //@line 3069
      HEAP32[$793 >> 2] = $44; //@line 3070
      $794 = $ReallocAsyncCtx6 + 80 | 0; //@line 3071
      HEAP32[$794 >> 2] = $$reg2mem46$0; //@line 3072
      $795 = $ReallocAsyncCtx6 + 84 | 0; //@line 3073
      HEAP32[$795 >> 2] = $48; //@line 3074
      $796 = $ReallocAsyncCtx6 + 88 | 0; //@line 3075
      HEAP32[$796 >> 2] = $52; //@line 3076
      $797 = $ReallocAsyncCtx6 + 92 | 0; //@line 3077
      HEAP32[$797 >> 2] = $54; //@line 3078
      $798 = $ReallocAsyncCtx6 + 96 | 0; //@line 3079
      HEAP32[$798 >> 2] = $56; //@line 3080
      $799 = $ReallocAsyncCtx6 + 100 | 0; //@line 3081
      HEAP32[$799 >> 2] = $58; //@line 3082
      $800 = $ReallocAsyncCtx6 + 104 | 0; //@line 3083
      HEAP32[$800 >> 2] = $60; //@line 3084
      $801 = $ReallocAsyncCtx6 + 108 | 0; //@line 3085
      HEAP32[$801 >> 2] = $62; //@line 3086
      $802 = $ReallocAsyncCtx6 + 112 | 0; //@line 3087
      HEAP32[$802 >> 2] = $64; //@line 3088
      $803 = $ReallocAsyncCtx6 + 116 | 0; //@line 3089
      HEAP32[$803 >> 2] = $66; //@line 3090
      $804 = $ReallocAsyncCtx6 + 120 | 0; //@line 3091
      HEAP32[$804 >> 2] = $68; //@line 3092
      $805 = $ReallocAsyncCtx6 + 124 | 0; //@line 3093
      HEAP32[$805 >> 2] = $72; //@line 3094
      $806 = $ReallocAsyncCtx6 + 128 | 0; //@line 3095
      HEAP32[$806 >> 2] = $74; //@line 3096
      $807 = $ReallocAsyncCtx6 + 132 | 0; //@line 3097
      HEAP32[$807 >> 2] = $76; //@line 3098
      $808 = $ReallocAsyncCtx6 + 136 | 0; //@line 3099
      HEAP32[$808 >> 2] = $78; //@line 3100
      $809 = $ReallocAsyncCtx6 + 140 | 0; //@line 3101
      HEAP32[$809 >> 2] = $80; //@line 3102
      $810 = $ReallocAsyncCtx6 + 144 | 0; //@line 3103
      HEAP32[$810 >> 2] = $82; //@line 3104
      $811 = $ReallocAsyncCtx6 + 148 | 0; //@line 3105
      HEAP32[$811 >> 2] = $84; //@line 3106
      $812 = $ReallocAsyncCtx6 + 152 | 0; //@line 3107
      HEAP32[$812 >> 2] = $86; //@line 3108
      $813 = $ReallocAsyncCtx6 + 156 | 0; //@line 3109
      HEAP32[$813 >> 2] = $88; //@line 3110
      $814 = $ReallocAsyncCtx6 + 160 | 0; //@line 3111
      HEAP32[$814 >> 2] = $90; //@line 3112
      $815 = $ReallocAsyncCtx6 + 164 | 0; //@line 3113
      HEAP32[$815 >> 2] = $92; //@line 3114
      $816 = $ReallocAsyncCtx6 + 168 | 0; //@line 3115
      HEAP32[$816 >> 2] = $94; //@line 3116
      $817 = $ReallocAsyncCtx6 + 172 | 0; //@line 3117
      HEAP32[$817 >> 2] = $96; //@line 3118
      $818 = $ReallocAsyncCtx6 + 176 | 0; //@line 3119
      HEAP32[$818 >> 2] = $98; //@line 3120
      $819 = $ReallocAsyncCtx6 + 180 | 0; //@line 3121
      HEAP32[$819 >> 2] = $100; //@line 3122
      $820 = $ReallocAsyncCtx6 + 184 | 0; //@line 3123
      HEAP32[$820 >> 2] = $102; //@line 3124
      $821 = $ReallocAsyncCtx6 + 188 | 0; //@line 3125
      HEAP32[$821 >> 2] = $104; //@line 3126
      $822 = $ReallocAsyncCtx6 + 192 | 0; //@line 3127
      HEAP32[$822 >> 2] = $106; //@line 3128
      $823 = $ReallocAsyncCtx6 + 196 | 0; //@line 3129
      HEAP32[$823 >> 2] = $108; //@line 3130
      $824 = $ReallocAsyncCtx6 + 200 | 0; //@line 3131
      HEAP32[$824 >> 2] = $110; //@line 3132
      $825 = $ReallocAsyncCtx6 + 204 | 0; //@line 3133
      HEAP32[$825 >> 2] = $112; //@line 3134
      $826 = $ReallocAsyncCtx6 + 208 | 0; //@line 3135
      HEAP32[$826 >> 2] = $114; //@line 3136
      $827 = $ReallocAsyncCtx6 + 212 | 0; //@line 3137
      HEAP32[$827 >> 2] = $116; //@line 3138
      $828 = $ReallocAsyncCtx6 + 216 | 0; //@line 3139
      HEAP32[$828 >> 2] = $120; //@line 3140
      $829 = $ReallocAsyncCtx6 + 220 | 0; //@line 3141
      HEAP32[$829 >> 2] = $122; //@line 3142
      $830 = $ReallocAsyncCtx6 + 224 | 0; //@line 3143
      HEAP32[$830 >> 2] = $124; //@line 3144
      $831 = $ReallocAsyncCtx6 + 228 | 0; //@line 3145
      HEAP32[$831 >> 2] = $126; //@line 3146
      $832 = $ReallocAsyncCtx6 + 232 | 0; //@line 3147
      HEAP32[$832 >> 2] = $128; //@line 3148
      $833 = $ReallocAsyncCtx6 + 236 | 0; //@line 3149
      HEAP32[$833 >> 2] = $130; //@line 3150
      $834 = $ReallocAsyncCtx6 + 240 | 0; //@line 3151
      HEAP32[$834 >> 2] = $132; //@line 3152
      $835 = $ReallocAsyncCtx6 + 244 | 0; //@line 3153
      HEAP32[$835 >> 2] = $134; //@line 3154
      $836 = $ReallocAsyncCtx6 + 248 | 0; //@line 3155
      HEAP32[$836 >> 2] = $10; //@line 3156
      $837 = $ReallocAsyncCtx6 + 252 | 0; //@line 3157
      HEAP32[$837 >> 2] = $136; //@line 3158
      $838 = $ReallocAsyncCtx6 + 256 | 0; //@line 3159
      HEAP32[$838 >> 2] = $138; //@line 3160
      $839 = $ReallocAsyncCtx6 + 260 | 0; //@line 3161
      HEAP32[$839 >> 2] = $140; //@line 3162
      $840 = $ReallocAsyncCtx6 + 264 | 0; //@line 3163
      HEAP32[$840 >> 2] = $142; //@line 3164
      sp = STACKTOP; //@line 3165
      return;
     }
    case 78:
     {
      _mbed_tracef(2, 3737, 5086, $122); //@line 3170
      break L2;
      break;
     }
    case 84:
     {
      _mbed_tracef(2, 3737, 5147, $72); //@line 3175
      break L2;
      break;
     }
    case 90:
     {
      _mbed_tracef(2, 3737, 5208, $96); //@line 3180
      break L2;
      break;
     }
    case 96:
     {
      _mbed_tracef(2, 3737, 5269, $30); //@line 3185
      break L2;
      break;
     }
    case 102:
     {
      _mbed_tracef(2, 3737, 5329, $56); //@line 3190
      break L2;
      break;
     }
    case 106:
     {
      _mbed_tracef(2, 3737, 5389, $138); //@line 3195
      break L2;
      break;
     }
    case 109:
     {
      if (($147 - $22 | 0) >= ($14 | 0)) {
       $951 = ___async_retval; //@line 3204
       HEAP32[$951 >> 2] = $38; //@line 3205
       return;
      }
      if ((HEAP8[$147 >> 0] | 0) == -1) {
       $941 = $147 + 1 | 0; //@line 3211
       HEAP32[$92 >> 2] = $941; //@line 3212
       $942 = $941; //@line 3213
       $944 = $22 - $942 + $14 | 0; //@line 3215
       HEAP16[$110 + 24 >> 1] = $944; //@line 3218
       if ($944 & 65535 | 0) {
        HEAP32[$110 + 36 >> 2] = $942; //@line 3223
        $951 = ___async_retval; //@line 3224
        HEAP32[$951 >> 2] = $38; //@line 3225
        return;
       }
      } else {
       _mbed_tracef(2, 3737, 5436, $50); //@line 3229
      }
      HEAP32[$110 + 4 >> 2] = 1; //@line 3232
      $951 = ___async_retval; //@line 3233
      HEAP32[$951 >> 2] = $38; //@line 3234
      return;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 22) {
  _mbed_tracef(2, 3737, 4113, $76); //@line 3243
 }
 HEAP32[$110 + 4 >> 2] = 1; //@line 3246
 $951 = ___async_retval; //@line 3247
 HEAP32[$951 >> 2] = $38; //@line 3248
 return;
}
function _sn_coap_parser__async_cb_78($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $147 = 0, $16 = 0, $161 = 0, $166 = 0, $178 = 0, $18 = 0, $181 = 0, $182 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $263 = 0, $264 = 0, $269 = 0, $272 = 0, $275 = 0, $276 = 0, $28 = 0, $281 = 0, $284 = 0, $288 = 0, $291 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $438 = 0, $44 = 0, $441 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $518 = 0, $519 = 0, $52 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $593 = 0, $596 = 0, $597 = 0, $6 = 0, $60 = 0, $602 = 0, $605 = 0, $607 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $748 = 0, $751 = 0, $752 = 0, $757 = 0, $76 = 0, $760 = 0, $762 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $835 = 0, $838 = 0, $839 = 0, $84 = 0, $844 = 0, $847 = 0, $851 = 0, $854 = 0, $855 = 0, $86 = 0, $860 = 0, $863 = 0, $867 = 0, $870 = 0, $871 = 0, $876 = 0, $879 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $890 = 0, $895 = 0, $898 = 0, $904 = 0, $905 = 0, $910 = 0, $911 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $924 = 0, $934 = 0, $935 = 0, $937 = 0, $94 = 0, $944 = 0, $945 = 0, $946 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $281$looptemp = 0, $602$looptemp = 0, $757$looptemp = 0, $844$looptemp = 0, $860$looptemp = 0, $876$looptemp = 0, $895$looptemp = 0, $916$looptemp = 0, $269$looptemp = 0;
 sp = STACKTOP; //@line 20324
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20326
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20328
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20330
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20332
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20334
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20336
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20338
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20340
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20342
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20344
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20346
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20348
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20350
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20352
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20354
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20356
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20358
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20360
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20362
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20364
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20366
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20368
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20370
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20372
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 20374
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 20376
 $54 = HEAP16[$0 + 108 >> 1] | 0; //@line 20378
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 20380
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 20382
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 20384
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 20386
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 20388
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 20390
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 20392
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 20394
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 20396
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 20398
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 20400
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 20402
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 20404
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 20406
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 20408
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 20410
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 20412
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 20416
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 20418
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 20420
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 20422
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 20424
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 20428
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 20430
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 20432
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 20434
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 20436
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 20438
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 20440
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 20442
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 20444
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 20446
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 20448
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 20450
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20452
 HEAP32[HEAP32[$0 + 180 >> 2] >> 2] = $AsyncRetVal; //@line 20453
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3737, 3943, $110); //@line 20457
  } else {
   _memcpy($AsyncRetVal | 0, $56 | 0, HEAPU8[$96 >> 0] | 0) | 0; //@line 20461
   $133 = $56 + (HEAPU8[$96 >> 0] | 0) | 0; //@line 20464
   HEAP32[$80 >> 2] = $133; //@line 20465
   $134 = $133; //@line 20466
   $135 = $54 & 65535; //@line 20467
   $136 = $46; //@line 20468
   $137 = $136 + $135 | 0; //@line 20469
   $139 = $96 + 40 | 0; //@line 20471
   $140 = $96 + 32 | 0; //@line 20472
   $141 = $96 + 22 | 0; //@line 20473
   $$0208$i = 0; //@line 20474
   $$sink275$i = $137 - $134 | 0; //@line 20474
   $144 = $133; //@line 20474
   $945 = $134; //@line 20474
   L6 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 109; //@line 20479
     break;
    }
    $trunc277$i = HEAP8[$144 >> 0] | 0; //@line 20482
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 109; //@line 20485
     break;
    }
    $147 = $trunc277$i & 15; //@line 20489
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 20490
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 11; //@line 20495
      break L6;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$144 + 1 >> 0] | 0; //@line 20503
      $$sink214$i = 13; //@line 20503
      $$sink3$i = 1; //@line 20503
      label = 12; //@line 20504
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$144 + 1 >> 0] << 8) + 269 | 0; //@line 20516
      $$sink214$i = HEAPU8[$144 + 2 >> 0] | 0; //@line 20516
      $$sink3$i = 2; //@line 20516
      label = 12; //@line 20517
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 20521
      $166 = $144; //@line 20521
      $946 = $945; //@line 20521
     }
    }
    if ((label | 0) == 12) {
     label = 0; //@line 20525
     $161 = $144 + $$sink3$i | 0; //@line 20527
     HEAP32[$80 >> 2] = $161; //@line 20528
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 20530
     $166 = $161; //@line 20530
     $946 = $161; //@line 20530
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 20533
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 16; //@line 20537
      break L6;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$166 + 1 >> 0] | 0; //@line 20545
      $$sink216$i = 13; //@line 20545
      $$sink8$i = 1; //@line 20545
      label = 17; //@line 20546
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$166 + 1 >> 0] << 8) + 269 | 0; //@line 20558
      $$sink216$i = HEAPU8[$166 + 2 >> 0] | 0; //@line 20558
      $$sink8$i = 2; //@line 20558
      label = 17; //@line 20559
      break;
     }
    default:
     {
      $$1202$in$i = $147; //@line 20563
      $181 = $946; //@line 20563
      $222 = $166; //@line 20563
     }
    }
    if ((label | 0) == 17) {
     label = 0; //@line 20567
     $178 = $166 + $$sink8$i | 0; //@line 20569
     HEAP32[$80 >> 2] = $178; //@line 20570
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 20572
     $181 = $178; //@line 20572
     $222 = $178; //@line 20572
    }
    $$1202$i = $$1202$in$i & 65535; //@line 20574
    $182 = $137 - $181 & 65535; //@line 20576
    $trunc$i = $$0208$i & 65535; //@line 20577
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 64; //@line 20581
       break L6;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$139 >> 2] | 0)) {
        label = 20; //@line 20589
        break L6;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 35; //@line 20594
         break L6;
         break;
        }
       case 4:
        {
         label = 41; //@line 20599
         break L6;
         break;
        }
       case 3:
        {
         label = 44; //@line 20604
         break L6;
         break;
        }
       case 8:
        {
         label = 50; //@line 20609
         break L6;
         break;
        }
       case 20:
        {
         label = 61; //@line 20614
         break L6;
         break;
        }
       case 11:
        {
         label = 64; //@line 20619
         break L6;
         break;
        }
       case 15:
        {
         label = 73; //@line 20624
         break L6;
         break;
        }
       case 12:
        {
         label = 24; //@line 20629
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 31; //@line 20636
          break L6;
         }
         $275 = $222 + 1 | 0; //@line 20639
         HEAP32[$80 >> 2] = $275; //@line 20640
         $276 = $$1202$in$i & 255; //@line 20641
         if (!($276 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 20644
         } else {
          $$045$i221$i = $276; //@line 20646
          $$06$i220$i = 0; //@line 20646
          $281 = $275; //@line 20646
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 20648
           $281$looptemp = $281;
           $281 = $281 + 1 | 0; //@line 20650
           HEAP32[$80 >> 2] = $281; //@line 20651
           $284 = $$06$i220$i << 8 | HEAPU8[$281$looptemp >> 0]; //@line 20654
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $284; //@line 20657
            break;
           } else {
            $$06$i220$i = $284; //@line 20660
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 20666
         break L22;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 57; //@line 20673
          break L6;
         }
         $593 = (HEAP32[$139 >> 2] | 0) + 28 | 0; //@line 20677
         if ((HEAP32[$593 >> 2] | 0) != -1) {
          label = 57; //@line 20681
          break L6;
         }
         $596 = $222 + 1 | 0; //@line 20684
         HEAP32[$80 >> 2] = $596; //@line 20685
         $597 = $$1202$in$i & 255; //@line 20686
         if (!($597 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 20689
         } else {
          $$045$i263$i = $597; //@line 20691
          $$06$i262$i = 0; //@line 20691
          $602 = $596; //@line 20691
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 20693
           $602$looptemp = $602;
           $602 = $602 + 1 | 0; //@line 20695
           HEAP32[$80 >> 2] = $602; //@line 20696
           $605 = $$06$i262$i << 8 | HEAPU8[$602$looptemp >> 0]; //@line 20699
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $605; //@line 20702
            break;
           } else {
            $$06$i262$i = $605; //@line 20705
           }
          }
         }
         HEAP32[$593 >> 2] = $$0$lcssa$i265$i; //@line 20709
         break L22;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 69; //@line 20716
          break L6;
         }
         $748 = (HEAP32[$139 >> 2] | 0) + 32 | 0; //@line 20720
         if ((HEAP32[$748 >> 2] | 0) != -1) {
          label = 69; //@line 20724
          break L6;
         }
         $751 = $222 + 1 | 0; //@line 20727
         HEAP32[$80 >> 2] = $751; //@line 20728
         $752 = $$1202$in$i & 255; //@line 20729
         if (!($752 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 20732
         } else {
          $$045$i270$i = $752; //@line 20734
          $$06$i269$i = 0; //@line 20734
          $757 = $751; //@line 20734
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 20736
           $757$looptemp = $757;
           $757 = $757 + 1 | 0; //@line 20738
           HEAP32[$80 >> 2] = $757; //@line 20739
           $760 = $$06$i269$i << 8 | HEAPU8[$757$looptemp >> 0]; //@line 20742
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $760; //@line 20745
            break;
           } else {
            $$06$i269$i = $760; //@line 20748
           }
          }
         }
         HEAP32[$748 >> 2] = $$0$lcssa$i272$i; //@line 20752
         break L22;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 78; //@line 20759
          break L6;
         }
         $835 = (HEAP32[$139 >> 2] | 0) + 40 | 0; //@line 20763
         if ((HEAP32[$835 >> 2] | 0) != -1) {
          label = 78; //@line 20767
          break L6;
         }
         $838 = $222 + 1 | 0; //@line 20770
         HEAP32[$80 >> 2] = $838; //@line 20771
         $839 = $$1202$in$i & 255; //@line 20772
         if (!($839 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 20775
         } else {
          $$045$i256$i = $839; //@line 20777
          $$06$i255$i = 0; //@line 20777
          $844 = $838; //@line 20777
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 20779
           $844$looptemp = $844;
           $844 = $844 + 1 | 0; //@line 20781
           HEAP32[$80 >> 2] = $844; //@line 20782
           $847 = $$06$i255$i << 8 | HEAPU8[$844$looptemp >> 0]; //@line 20785
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $847; //@line 20788
            break;
           } else {
            $$06$i255$i = $847; //@line 20791
           }
          }
         }
         HEAP32[$835 >> 2] = $$0$lcssa$i258$i; //@line 20795
         break L22;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 84; //@line 20802
          break L6;
         }
         $851 = (HEAP32[$139 >> 2] | 0) + 36 | 0; //@line 20806
         if ((HEAP32[$851 >> 2] | 0) != -1) {
          label = 84; //@line 20810
          break L6;
         }
         $854 = $222 + 1 | 0; //@line 20813
         HEAP32[$80 >> 2] = $854; //@line 20814
         $855 = $$1202$in$i & 255; //@line 20815
         if (!($855 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 20818
         } else {
          $$045$i249$i = $855; //@line 20820
          $$06$i248$i = 0; //@line 20820
          $860 = $854; //@line 20820
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 20822
           $860$looptemp = $860;
           $860 = $860 + 1 | 0; //@line 20824
           HEAP32[$80 >> 2] = $860; //@line 20825
           $863 = $$06$i248$i << 8 | HEAPU8[$860$looptemp >> 0]; //@line 20828
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $863; //@line 20831
            break;
           } else {
            $$06$i248$i = $863; //@line 20834
           }
          }
         }
         HEAP32[$851 >> 2] = $$0$lcssa$i251$i; //@line 20838
         break L22;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 90; //@line 20845
          break L6;
         }
         $867 = (HEAP32[$139 >> 2] | 0) + 12 | 0; //@line 20849
         if ((HEAP32[$867 >> 2] | 0) != -1) {
          label = 90; //@line 20853
          break L6;
         }
         $870 = $222 + 1 | 0; //@line 20856
         HEAP32[$80 >> 2] = $870; //@line 20857
         $871 = $$1202$in$i & 255; //@line 20858
         if (!($871 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 20861
         } else {
          $$045$i242$i = $871; //@line 20863
          $$06$i241$i = 0; //@line 20863
          $876 = $870; //@line 20863
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 20865
           $876$looptemp = $876;
           $876 = $876 + 1 | 0; //@line 20867
           HEAP32[$80 >> 2] = $876; //@line 20868
           $879 = $$06$i241$i << 8 | HEAPU8[$876$looptemp >> 0]; //@line 20871
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $879; //@line 20874
            break;
           } else {
            $$06$i241$i = $879; //@line 20877
           }
          }
         }
         HEAP32[$867 >> 2] = $$0$lcssa$i244$i; //@line 20881
         break L22;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 96; //@line 20888
          break L6;
         }
         $883 = (HEAP32[$139 >> 2] | 0) + 1 | 0; //@line 20892
         $884 = HEAP8[$883 >> 0] | 0; //@line 20893
         if ($884 & 1) {
          label = 96; //@line 20897
          break L6;
         }
         HEAP8[$883 >> 0] = $884 | 1; //@line 20901
         $889 = (HEAP32[$80 >> 2] | 0) + 1 | 0; //@line 20903
         HEAP32[$80 >> 2] = $889; //@line 20904
         $890 = $$1202$in$i & 255; //@line 20905
         if (!($890 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 20908
         } else {
          $$045$i235$i = $890; //@line 20910
          $$06$i234$i = 0; //@line 20910
          $895 = $889; //@line 20910
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 20912
           $895$looptemp = $895;
           $895 = $895 + 1 | 0; //@line 20914
           HEAP32[$80 >> 2] = $895; //@line 20915
           $898 = $$06$i234$i << 8 | HEAPU8[$895$looptemp >> 0]; //@line 20918
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $898; //@line 20921
            break;
           } else {
            $$06$i234$i = $898; //@line 20924
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 20930
         break L22;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 102; //@line 20937
          break L6;
         }
         $904 = (HEAP32[$139 >> 2] | 0) + 1 | 0; //@line 20941
         $905 = HEAP8[$904 >> 0] | 0; //@line 20942
         if ($905 & 2) {
          label = 102; //@line 20946
          break L6;
         }
         HEAP8[$904 >> 0] = $905 | 2; //@line 20950
         $910 = (HEAP32[$80 >> 2] | 0) + 1 | 0; //@line 20952
         HEAP32[$80 >> 2] = $910; //@line 20953
         $911 = $$1202$in$i & 255; //@line 20954
         if (!($911 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 20957
         } else {
          $$045$i228$i = $911; //@line 20959
          $$06$i227$i = 0; //@line 20959
          $916 = $910; //@line 20959
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 20961
           $916$looptemp = $916;
           $916 = $916 + 1 | 0; //@line 20963
           HEAP32[$80 >> 2] = $916; //@line 20964
           $919 = $$06$i227$i << 8 | HEAPU8[$916$looptemp >> 0]; //@line 20967
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $919; //@line 20970
            break;
           } else {
            $$06$i227$i = $919; //@line 20973
           }
          }
         }
         HEAP32[(HEAP32[$139 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 20979
         break L22;
         break;
        }
       default:
        {
         label = 106; //@line 20984
         break L6;
        }
       }
       break;
      }
     case 12:
      {
       label = 24; //@line 20991
       break;
      }
     default:
      {
       label = 106; //@line 20995
       break L6;
      }
     }
    } while (0);
    if ((label | 0) == 24) {
     label = 0; //@line 21001
     if (($$1202$i & 65535) > 2) {
      label = 26; //@line 21004
      break;
     }
     if ((HEAP32[$62 >> 2] | 0) != -1) {
      label = 26; //@line 21010
      break;
     }
     $263 = $222 + 1 | 0; //@line 21013
     HEAP32[$80 >> 2] = $263; //@line 21014
     $264 = $$1202$in$i & 255; //@line 21015
     if (!($264 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 21018
     } else {
      $$045$i$i = $264; //@line 21020
      $$06$i$i = 0; //@line 21020
      $269 = $263; //@line 21020
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 21022
       $269$looptemp = $269;
       $269 = $269 + 1 | 0; //@line 21024
       HEAP32[$80 >> 2] = $269; //@line 21025
       $272 = $$06$i$i << 8 | HEAPU8[$269$looptemp >> 0]; //@line 21028
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $272; //@line 21031
        break;
       } else {
        $$06$i$i = $272; //@line 21034
       }
      }
     }
     HEAP32[$62 >> 2] = $$0$lcssa$i$i; //@line 21038
    }
    $923 = HEAP32[$80 >> 2] | 0; //@line 21040
    $924 = $923 - $136 | 0; //@line 21041
    if (($924 | 0) > ($135 | 0)) {
     break L2;
    } else {
     $$sink275$i = $135 - $924 | 0; //@line 21048
     $144 = $923; //@line 21048
     $945 = $923; //@line 21048
    }
   }
   switch (label | 0) {
   case 11:
    {
     _mbed_tracef(2, 3737, 4e3, $74); //@line 21053
     break L2;
     break;
    }
   case 16:
    {
     _mbed_tracef(2, 3737, 4058, $100); //@line 21058
     break L2;
     break;
    }
   case 20:
    {
     $185 = HEAP32[$118 >> 2] | 0; //@line 21063
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 21064
     $186 = FUNCTION_TABLE_ii[$185 & 15](68) | 0; //@line 21065
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 21068
      $187 = $ReallocAsyncCtx3 + 4 | 0; //@line 21069
      HEAP16[$187 >> 1] = $182; //@line 21070
      $188 = $ReallocAsyncCtx3 + 8 | 0; //@line 21071
      HEAP32[$188 >> 2] = $2; //@line 21072
      $189 = $ReallocAsyncCtx3 + 12 | 0; //@line 21073
      HEAP32[$189 >> 2] = $80; //@line 21074
      $190 = $ReallocAsyncCtx3 + 16 | 0; //@line 21075
      HEAP32[$190 >> 2] = $4; //@line 21076
      $191 = $ReallocAsyncCtx3 + 20 | 0; //@line 21077
      HEAP32[$191 >> 2] = $122; //@line 21078
      $192 = $ReallocAsyncCtx3 + 24 | 0; //@line 21079
      HEAP32[$192 >> 2] = $6; //@line 21080
      $193 = $ReallocAsyncCtx3 + 28 | 0; //@line 21081
      HEAP32[$193 >> 2] = $135; //@line 21082
      $194 = $ReallocAsyncCtx3 + 32 | 0; //@line 21083
      HEAP32[$194 >> 2] = $8; //@line 21084
      $195 = $ReallocAsyncCtx3 + 36 | 0; //@line 21085
      HEAP32[$195 >> 2] = $10; //@line 21086
      $196 = $ReallocAsyncCtx3 + 40 | 0; //@line 21087
      HEAP32[$196 >> 2] = $12; //@line 21088
      $197 = $ReallocAsyncCtx3 + 44 | 0; //@line 21089
      HEAP32[$197 >> 2] = $136; //@line 21090
      $198 = $ReallocAsyncCtx3 + 48 | 0; //@line 21091
      HEAP32[$198 >> 2] = $14; //@line 21092
      $199 = $ReallocAsyncCtx3 + 52 | 0; //@line 21093
      HEAP32[$199 >> 2] = $16; //@line 21094
      $200 = $ReallocAsyncCtx3 + 56 | 0; //@line 21095
      HEAP32[$200 >> 2] = $18; //@line 21096
      $201 = $ReallocAsyncCtx3 + 60 | 0; //@line 21097
      HEAP32[$201 >> 2] = $20; //@line 21098
      $202 = $ReallocAsyncCtx3 + 64 | 0; //@line 21099
      HEAP16[$202 >> 1] = $$1202$i; //@line 21100
      $203 = $ReallocAsyncCtx3 + 68 | 0; //@line 21101
      HEAP32[$203 >> 2] = $22; //@line 21102
      $204 = $ReallocAsyncCtx3 + 72 | 0; //@line 21103
      HEAP32[$204 >> 2] = $24; //@line 21104
      $205 = $ReallocAsyncCtx3 + 76 | 0; //@line 21105
      HEAP32[$205 >> 2] = $26; //@line 21106
      $206 = $ReallocAsyncCtx3 + 80 | 0; //@line 21107
      HEAP32[$206 >> 2] = $28; //@line 21108
      $207 = $ReallocAsyncCtx3 + 84 | 0; //@line 21109
      HEAP32[$207 >> 2] = $$0208$i; //@line 21110
      $208 = $ReallocAsyncCtx3 + 88 | 0; //@line 21111
      HEAP32[$208 >> 2] = $32; //@line 21112
      $209 = $ReallocAsyncCtx3 + 92 | 0; //@line 21113
      HEAP32[$209 >> 2] = $$1202$in$i; //@line 21114
      $210 = $ReallocAsyncCtx3 + 96 | 0; //@line 21115
      HEAP32[$210 >> 2] = $34; //@line 21116
      $211 = $ReallocAsyncCtx3 + 100 | 0; //@line 21117
      HEAP32[$211 >> 2] = $30; //@line 21118
      $212 = $ReallocAsyncCtx3 + 104 | 0; //@line 21119
      HEAP32[$212 >> 2] = $36; //@line 21120
      $213 = $ReallocAsyncCtx3 + 108 | 0; //@line 21121
      HEAP32[$213 >> 2] = $38; //@line 21122
      $214 = $ReallocAsyncCtx3 + 112 | 0; //@line 21123
      HEAP32[$214 >> 2] = $40; //@line 21124
      $215 = $ReallocAsyncCtx3 + 116 | 0; //@line 21125
      HEAP32[$215 >> 2] = $42; //@line 21126
      $216 = $ReallocAsyncCtx3 + 120 | 0; //@line 21127
      HEAP32[$216 >> 2] = $44; //@line 21128
      $217 = $ReallocAsyncCtx3 + 124 | 0; //@line 21129
      HEAP32[$217 >> 2] = $48; //@line 21130
      $218 = $ReallocAsyncCtx3 + 128 | 0; //@line 21131
      HEAP32[$218 >> 2] = $50; //@line 21132
      $219 = $ReallocAsyncCtx3 + 132 | 0; //@line 21133
      HEAP32[$219 >> 2] = $52; //@line 21134
      $220 = $ReallocAsyncCtx3 + 136 | 0; //@line 21135
      HEAP32[$220 >> 2] = $58; //@line 21136
      $221 = $ReallocAsyncCtx3 + 140 | 0; //@line 21137
      HEAP32[$221 >> 2] = $222; //@line 21138
      $223 = $ReallocAsyncCtx3 + 144 | 0; //@line 21139
      HEAP32[$223 >> 2] = $60; //@line 21140
      $224 = $ReallocAsyncCtx3 + 148 | 0; //@line 21141
      HEAP32[$224 >> 2] = $62; //@line 21142
      $225 = $ReallocAsyncCtx3 + 152 | 0; //@line 21143
      HEAP32[$225 >> 2] = $64; //@line 21144
      $226 = $ReallocAsyncCtx3 + 156 | 0; //@line 21145
      HEAP32[$226 >> 2] = $66; //@line 21146
      $227 = $ReallocAsyncCtx3 + 160 | 0; //@line 21147
      HEAP32[$227 >> 2] = $68; //@line 21148
      $228 = $ReallocAsyncCtx3 + 164 | 0; //@line 21149
      HEAP32[$228 >> 2] = $70; //@line 21150
      $229 = $ReallocAsyncCtx3 + 168 | 0; //@line 21151
      HEAP32[$229 >> 2] = $72; //@line 21152
      $230 = $ReallocAsyncCtx3 + 172 | 0; //@line 21153
      HEAP32[$230 >> 2] = $74; //@line 21154
      $231 = $ReallocAsyncCtx3 + 176 | 0; //@line 21155
      HEAP32[$231 >> 2] = $76; //@line 21156
      $232 = $ReallocAsyncCtx3 + 180 | 0; //@line 21157
      HEAP32[$232 >> 2] = $78; //@line 21158
      $233 = $ReallocAsyncCtx3 + 184 | 0; //@line 21159
      HEAP32[$233 >> 2] = $80; //@line 21160
      $234 = $ReallocAsyncCtx3 + 188 | 0; //@line 21161
      HEAP32[$234 >> 2] = $140; //@line 21162
      $235 = $ReallocAsyncCtx3 + 192 | 0; //@line 21163
      HEAP32[$235 >> 2] = $82; //@line 21164
      $236 = $ReallocAsyncCtx3 + 196 | 0; //@line 21165
      HEAP32[$236 >> 2] = $141; //@line 21166
      $237 = $ReallocAsyncCtx3 + 200 | 0; //@line 21167
      HEAP32[$237 >> 2] = $84; //@line 21168
      $238 = $ReallocAsyncCtx3 + 204 | 0; //@line 21169
      HEAP32[$238 >> 2] = $86; //@line 21170
      $239 = $ReallocAsyncCtx3 + 208 | 0; //@line 21171
      HEAP32[$239 >> 2] = $88; //@line 21172
      $240 = $ReallocAsyncCtx3 + 212 | 0; //@line 21173
      HEAP32[$240 >> 2] = $92; //@line 21174
      $241 = $ReallocAsyncCtx3 + 216 | 0; //@line 21175
      HEAP32[$241 >> 2] = $94; //@line 21176
      $242 = $ReallocAsyncCtx3 + 220 | 0; //@line 21177
      HEAP32[$242 >> 2] = $96; //@line 21178
      $243 = $ReallocAsyncCtx3 + 224 | 0; //@line 21179
      HEAP32[$243 >> 2] = $98; //@line 21180
      $244 = $ReallocAsyncCtx3 + 228 | 0; //@line 21181
      HEAP32[$244 >> 2] = $137; //@line 21182
      $245 = $ReallocAsyncCtx3 + 232 | 0; //@line 21183
      HEAP32[$245 >> 2] = $100; //@line 21184
      $246 = $ReallocAsyncCtx3 + 236 | 0; //@line 21185
      HEAP16[$246 >> 1] = $trunc$i; //@line 21186
      $247 = $ReallocAsyncCtx3 + 240 | 0; //@line 21187
      HEAP32[$247 >> 2] = $104; //@line 21188
      $248 = $ReallocAsyncCtx3 + 244 | 0; //@line 21189
      HEAP32[$248 >> 2] = $106; //@line 21190
      $249 = $ReallocAsyncCtx3 + 248 | 0; //@line 21191
      HEAP32[$249 >> 2] = $108; //@line 21192
      $250 = $ReallocAsyncCtx3 + 252 | 0; //@line 21193
      HEAP32[$250 >> 2] = $112; //@line 21194
      $251 = $ReallocAsyncCtx3 + 256 | 0; //@line 21195
      HEAP32[$251 >> 2] = $114; //@line 21196
      $252 = $ReallocAsyncCtx3 + 260 | 0; //@line 21197
      HEAP32[$252 >> 2] = $116; //@line 21198
      $253 = $ReallocAsyncCtx3 + 264 | 0; //@line 21199
      HEAP32[$253 >> 2] = $118; //@line 21200
      $254 = $ReallocAsyncCtx3 + 268 | 0; //@line 21201
      HEAP32[$254 >> 2] = $120; //@line 21202
      $255 = $ReallocAsyncCtx3 + 272 | 0; //@line 21203
      HEAP32[$255 >> 2] = $139; //@line 21204
      $256 = $ReallocAsyncCtx3 + 276 | 0; //@line 21205
      HEAP32[$256 >> 2] = $124; //@line 21206
      $257 = $ReallocAsyncCtx3 + 280 | 0; //@line 21207
      HEAP32[$257 >> 2] = $139; //@line 21208
      $258 = $ReallocAsyncCtx3 + 284 | 0; //@line 21209
      HEAP32[$258 >> 2] = $126; //@line 21210
      sp = STACKTOP; //@line 21211
      return;
     }
     HEAP32[___async_retval >> 2] = $186; //@line 21215
     ___async_unwind = 0; //@line 21216
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 21217
     $187 = $ReallocAsyncCtx3 + 4 | 0; //@line 21218
     HEAP16[$187 >> 1] = $182; //@line 21219
     $188 = $ReallocAsyncCtx3 + 8 | 0; //@line 21220
     HEAP32[$188 >> 2] = $2; //@line 21221
     $189 = $ReallocAsyncCtx3 + 12 | 0; //@line 21222
     HEAP32[$189 >> 2] = $80; //@line 21223
     $190 = $ReallocAsyncCtx3 + 16 | 0; //@line 21224
     HEAP32[$190 >> 2] = $4; //@line 21225
     $191 = $ReallocAsyncCtx3 + 20 | 0; //@line 21226
     HEAP32[$191 >> 2] = $122; //@line 21227
     $192 = $ReallocAsyncCtx3 + 24 | 0; //@line 21228
     HEAP32[$192 >> 2] = $6; //@line 21229
     $193 = $ReallocAsyncCtx3 + 28 | 0; //@line 21230
     HEAP32[$193 >> 2] = $135; //@line 21231
     $194 = $ReallocAsyncCtx3 + 32 | 0; //@line 21232
     HEAP32[$194 >> 2] = $8; //@line 21233
     $195 = $ReallocAsyncCtx3 + 36 | 0; //@line 21234
     HEAP32[$195 >> 2] = $10; //@line 21235
     $196 = $ReallocAsyncCtx3 + 40 | 0; //@line 21236
     HEAP32[$196 >> 2] = $12; //@line 21237
     $197 = $ReallocAsyncCtx3 + 44 | 0; //@line 21238
     HEAP32[$197 >> 2] = $136; //@line 21239
     $198 = $ReallocAsyncCtx3 + 48 | 0; //@line 21240
     HEAP32[$198 >> 2] = $14; //@line 21241
     $199 = $ReallocAsyncCtx3 + 52 | 0; //@line 21242
     HEAP32[$199 >> 2] = $16; //@line 21243
     $200 = $ReallocAsyncCtx3 + 56 | 0; //@line 21244
     HEAP32[$200 >> 2] = $18; //@line 21245
     $201 = $ReallocAsyncCtx3 + 60 | 0; //@line 21246
     HEAP32[$201 >> 2] = $20; //@line 21247
     $202 = $ReallocAsyncCtx3 + 64 | 0; //@line 21248
     HEAP16[$202 >> 1] = $$1202$i; //@line 21249
     $203 = $ReallocAsyncCtx3 + 68 | 0; //@line 21250
     HEAP32[$203 >> 2] = $22; //@line 21251
     $204 = $ReallocAsyncCtx3 + 72 | 0; //@line 21252
     HEAP32[$204 >> 2] = $24; //@line 21253
     $205 = $ReallocAsyncCtx3 + 76 | 0; //@line 21254
     HEAP32[$205 >> 2] = $26; //@line 21255
     $206 = $ReallocAsyncCtx3 + 80 | 0; //@line 21256
     HEAP32[$206 >> 2] = $28; //@line 21257
     $207 = $ReallocAsyncCtx3 + 84 | 0; //@line 21258
     HEAP32[$207 >> 2] = $$0208$i; //@line 21259
     $208 = $ReallocAsyncCtx3 + 88 | 0; //@line 21260
     HEAP32[$208 >> 2] = $32; //@line 21261
     $209 = $ReallocAsyncCtx3 + 92 | 0; //@line 21262
     HEAP32[$209 >> 2] = $$1202$in$i; //@line 21263
     $210 = $ReallocAsyncCtx3 + 96 | 0; //@line 21264
     HEAP32[$210 >> 2] = $34; //@line 21265
     $211 = $ReallocAsyncCtx3 + 100 | 0; //@line 21266
     HEAP32[$211 >> 2] = $30; //@line 21267
     $212 = $ReallocAsyncCtx3 + 104 | 0; //@line 21268
     HEAP32[$212 >> 2] = $36; //@line 21269
     $213 = $ReallocAsyncCtx3 + 108 | 0; //@line 21270
     HEAP32[$213 >> 2] = $38; //@line 21271
     $214 = $ReallocAsyncCtx3 + 112 | 0; //@line 21272
     HEAP32[$214 >> 2] = $40; //@line 21273
     $215 = $ReallocAsyncCtx3 + 116 | 0; //@line 21274
     HEAP32[$215 >> 2] = $42; //@line 21275
     $216 = $ReallocAsyncCtx3 + 120 | 0; //@line 21276
     HEAP32[$216 >> 2] = $44; //@line 21277
     $217 = $ReallocAsyncCtx3 + 124 | 0; //@line 21278
     HEAP32[$217 >> 2] = $48; //@line 21279
     $218 = $ReallocAsyncCtx3 + 128 | 0; //@line 21280
     HEAP32[$218 >> 2] = $50; //@line 21281
     $219 = $ReallocAsyncCtx3 + 132 | 0; //@line 21282
     HEAP32[$219 >> 2] = $52; //@line 21283
     $220 = $ReallocAsyncCtx3 + 136 | 0; //@line 21284
     HEAP32[$220 >> 2] = $58; //@line 21285
     $221 = $ReallocAsyncCtx3 + 140 | 0; //@line 21286
     HEAP32[$221 >> 2] = $222; //@line 21287
     $223 = $ReallocAsyncCtx3 + 144 | 0; //@line 21288
     HEAP32[$223 >> 2] = $60; //@line 21289
     $224 = $ReallocAsyncCtx3 + 148 | 0; //@line 21290
     HEAP32[$224 >> 2] = $62; //@line 21291
     $225 = $ReallocAsyncCtx3 + 152 | 0; //@line 21292
     HEAP32[$225 >> 2] = $64; //@line 21293
     $226 = $ReallocAsyncCtx3 + 156 | 0; //@line 21294
     HEAP32[$226 >> 2] = $66; //@line 21295
     $227 = $ReallocAsyncCtx3 + 160 | 0; //@line 21296
     HEAP32[$227 >> 2] = $68; //@line 21297
     $228 = $ReallocAsyncCtx3 + 164 | 0; //@line 21298
     HEAP32[$228 >> 2] = $70; //@line 21299
     $229 = $ReallocAsyncCtx3 + 168 | 0; //@line 21300
     HEAP32[$229 >> 2] = $72; //@line 21301
     $230 = $ReallocAsyncCtx3 + 172 | 0; //@line 21302
     HEAP32[$230 >> 2] = $74; //@line 21303
     $231 = $ReallocAsyncCtx3 + 176 | 0; //@line 21304
     HEAP32[$231 >> 2] = $76; //@line 21305
     $232 = $ReallocAsyncCtx3 + 180 | 0; //@line 21306
     HEAP32[$232 >> 2] = $78; //@line 21307
     $233 = $ReallocAsyncCtx3 + 184 | 0; //@line 21308
     HEAP32[$233 >> 2] = $80; //@line 21309
     $234 = $ReallocAsyncCtx3 + 188 | 0; //@line 21310
     HEAP32[$234 >> 2] = $140; //@line 21311
     $235 = $ReallocAsyncCtx3 + 192 | 0; //@line 21312
     HEAP32[$235 >> 2] = $82; //@line 21313
     $236 = $ReallocAsyncCtx3 + 196 | 0; //@line 21314
     HEAP32[$236 >> 2] = $141; //@line 21315
     $237 = $ReallocAsyncCtx3 + 200 | 0; //@line 21316
     HEAP32[$237 >> 2] = $84; //@line 21317
     $238 = $ReallocAsyncCtx3 + 204 | 0; //@line 21318
     HEAP32[$238 >> 2] = $86; //@line 21319
     $239 = $ReallocAsyncCtx3 + 208 | 0; //@line 21320
     HEAP32[$239 >> 2] = $88; //@line 21321
     $240 = $ReallocAsyncCtx3 + 212 | 0; //@line 21322
     HEAP32[$240 >> 2] = $92; //@line 21323
     $241 = $ReallocAsyncCtx3 + 216 | 0; //@line 21324
     HEAP32[$241 >> 2] = $94; //@line 21325
     $242 = $ReallocAsyncCtx3 + 220 | 0; //@line 21326
     HEAP32[$242 >> 2] = $96; //@line 21327
     $243 = $ReallocAsyncCtx3 + 224 | 0; //@line 21328
     HEAP32[$243 >> 2] = $98; //@line 21329
     $244 = $ReallocAsyncCtx3 + 228 | 0; //@line 21330
     HEAP32[$244 >> 2] = $137; //@line 21331
     $245 = $ReallocAsyncCtx3 + 232 | 0; //@line 21332
     HEAP32[$245 >> 2] = $100; //@line 21333
     $246 = $ReallocAsyncCtx3 + 236 | 0; //@line 21334
     HEAP16[$246 >> 1] = $trunc$i; //@line 21335
     $247 = $ReallocAsyncCtx3 + 240 | 0; //@line 21336
     HEAP32[$247 >> 2] = $104; //@line 21337
     $248 = $ReallocAsyncCtx3 + 244 | 0; //@line 21338
     HEAP32[$248 >> 2] = $106; //@line 21339
     $249 = $ReallocAsyncCtx3 + 248 | 0; //@line 21340
     HEAP32[$249 >> 2] = $108; //@line 21341
     $250 = $ReallocAsyncCtx3 + 252 | 0; //@line 21342
     HEAP32[$250 >> 2] = $112; //@line 21343
     $251 = $ReallocAsyncCtx3 + 256 | 0; //@line 21344
     HEAP32[$251 >> 2] = $114; //@line 21345
     $252 = $ReallocAsyncCtx3 + 260 | 0; //@line 21346
     HEAP32[$252 >> 2] = $116; //@line 21347
     $253 = $ReallocAsyncCtx3 + 264 | 0; //@line 21348
     HEAP32[$253 >> 2] = $118; //@line 21349
     $254 = $ReallocAsyncCtx3 + 268 | 0; //@line 21350
     HEAP32[$254 >> 2] = $120; //@line 21351
     $255 = $ReallocAsyncCtx3 + 272 | 0; //@line 21352
     HEAP32[$255 >> 2] = $139; //@line 21353
     $256 = $ReallocAsyncCtx3 + 276 | 0; //@line 21354
     HEAP32[$256 >> 2] = $124; //@line 21355
     $257 = $ReallocAsyncCtx3 + 280 | 0; //@line 21356
     HEAP32[$257 >> 2] = $139; //@line 21357
     $258 = $ReallocAsyncCtx3 + 284 | 0; //@line 21358
     HEAP32[$258 >> 2] = $126; //@line 21359
     sp = STACKTOP; //@line 21360
     return;
    }
   case 26:
    {
     _mbed_tracef(2, 3737, 4172, $116); //@line 21365
     break L2;
     break;
    }
   case 31:
    {
     _mbed_tracef(2, 3737, 4241, $28); //@line 21370
     break L2;
     break;
    }
   case 35:
    {
     $288 = $$1202$in$i & 65535; //@line 21375
     if (($$1202$i + -1 & 65535) <= 1033) {
      $291 = HEAP32[$139 >> 2] | 0; //@line 21379
      if (!(HEAP32[$291 + 44 >> 2] | 0)) {
       HEAP16[$291 + 2 >> 1] = $$1202$i; //@line 21385
       $296 = $222 + 1 | 0; //@line 21386
       HEAP32[$80 >> 2] = $296; //@line 21387
       $297 = HEAP32[$118 >> 2] | 0; //@line 21388
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 21389
       $298 = FUNCTION_TABLE_ii[$297 & 15]($$1202$i) | 0; //@line 21390
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 21393
        $299 = $ReallocAsyncCtx4 + 4 | 0; //@line 21394
        HEAP32[$299 >> 2] = $2; //@line 21395
        $300 = $ReallocAsyncCtx4 + 8 | 0; //@line 21396
        HEAP32[$300 >> 2] = $80; //@line 21397
        $301 = $ReallocAsyncCtx4 + 12 | 0; //@line 21398
        HEAP32[$301 >> 2] = $4; //@line 21399
        $302 = $ReallocAsyncCtx4 + 16 | 0; //@line 21400
        HEAP32[$302 >> 2] = $6; //@line 21401
        $303 = $ReallocAsyncCtx4 + 20 | 0; //@line 21402
        HEAP32[$303 >> 2] = $135; //@line 21403
        $304 = $ReallocAsyncCtx4 + 24 | 0; //@line 21404
        HEAP32[$304 >> 2] = $8; //@line 21405
        $305 = $ReallocAsyncCtx4 + 28 | 0; //@line 21406
        HEAP32[$305 >> 2] = $10; //@line 21407
        $306 = $ReallocAsyncCtx4 + 32 | 0; //@line 21408
        HEAP32[$306 >> 2] = $12; //@line 21409
        $307 = $ReallocAsyncCtx4 + 36 | 0; //@line 21410
        HEAP32[$307 >> 2] = $136; //@line 21411
        $308 = $ReallocAsyncCtx4 + 40 | 0; //@line 21412
        HEAP32[$308 >> 2] = $14; //@line 21413
        $309 = $ReallocAsyncCtx4 + 44 | 0; //@line 21414
        HEAP32[$309 >> 2] = $16; //@line 21415
        $310 = $ReallocAsyncCtx4 + 48 | 0; //@line 21416
        HEAP32[$310 >> 2] = $18; //@line 21417
        $311 = $ReallocAsyncCtx4 + 52 | 0; //@line 21418
        HEAP32[$311 >> 2] = $20; //@line 21419
        $312 = $ReallocAsyncCtx4 + 56 | 0; //@line 21420
        HEAP32[$312 >> 2] = $22; //@line 21421
        $313 = $ReallocAsyncCtx4 + 60 | 0; //@line 21422
        HEAP32[$313 >> 2] = $24; //@line 21423
        $314 = $ReallocAsyncCtx4 + 64 | 0; //@line 21424
        HEAP32[$314 >> 2] = $26; //@line 21425
        $315 = $ReallocAsyncCtx4 + 68 | 0; //@line 21426
        HEAP32[$315 >> 2] = $28; //@line 21427
        $316 = $ReallocAsyncCtx4 + 72 | 0; //@line 21428
        HEAP32[$316 >> 2] = $30; //@line 21429
        $317 = $ReallocAsyncCtx4 + 76 | 0; //@line 21430
        HEAP32[$317 >> 2] = $32; //@line 21431
        $318 = $ReallocAsyncCtx4 + 80 | 0; //@line 21432
        HEAP32[$318 >> 2] = $$0208$i; //@line 21433
        $319 = $ReallocAsyncCtx4 + 84 | 0; //@line 21434
        HEAP32[$319 >> 2] = $34; //@line 21435
        $320 = $ReallocAsyncCtx4 + 88 | 0; //@line 21436
        HEAP32[$320 >> 2] = $36; //@line 21437
        $321 = $ReallocAsyncCtx4 + 92 | 0; //@line 21438
        HEAP32[$321 >> 2] = $38; //@line 21439
        $322 = $ReallocAsyncCtx4 + 96 | 0; //@line 21440
        HEAP32[$322 >> 2] = $40; //@line 21441
        $323 = $ReallocAsyncCtx4 + 100 | 0; //@line 21442
        HEAP32[$323 >> 2] = $42; //@line 21443
        $324 = $ReallocAsyncCtx4 + 104 | 0; //@line 21444
        HEAP32[$324 >> 2] = $44; //@line 21445
        $325 = $ReallocAsyncCtx4 + 108 | 0; //@line 21446
        HEAP32[$325 >> 2] = $48; //@line 21447
        $326 = $ReallocAsyncCtx4 + 112 | 0; //@line 21448
        HEAP32[$326 >> 2] = $50; //@line 21449
        $327 = $ReallocAsyncCtx4 + 116 | 0; //@line 21450
        HEAP32[$327 >> 2] = $52; //@line 21451
        $328 = $ReallocAsyncCtx4 + 120 | 0; //@line 21452
        HEAP32[$328 >> 2] = $58; //@line 21453
        $329 = $ReallocAsyncCtx4 + 124 | 0; //@line 21454
        HEAP32[$329 >> 2] = $60; //@line 21455
        $330 = $ReallocAsyncCtx4 + 128 | 0; //@line 21456
        HEAP32[$330 >> 2] = $62; //@line 21457
        $331 = $ReallocAsyncCtx4 + 132 | 0; //@line 21458
        HEAP32[$331 >> 2] = $64; //@line 21459
        $332 = $ReallocAsyncCtx4 + 136 | 0; //@line 21460
        HEAP32[$332 >> 2] = $66; //@line 21461
        $333 = $ReallocAsyncCtx4 + 140 | 0; //@line 21462
        HEAP32[$333 >> 2] = $68; //@line 21463
        $334 = $ReallocAsyncCtx4 + 144 | 0; //@line 21464
        HEAP32[$334 >> 2] = $70; //@line 21465
        $335 = $ReallocAsyncCtx4 + 148 | 0; //@line 21466
        HEAP32[$335 >> 2] = $72; //@line 21467
        $336 = $ReallocAsyncCtx4 + 152 | 0; //@line 21468
        HEAP32[$336 >> 2] = $74; //@line 21469
        $337 = $ReallocAsyncCtx4 + 156 | 0; //@line 21470
        HEAP32[$337 >> 2] = $76; //@line 21471
        $338 = $ReallocAsyncCtx4 + 160 | 0; //@line 21472
        HEAP32[$338 >> 2] = $78; //@line 21473
        $339 = $ReallocAsyncCtx4 + 164 | 0; //@line 21474
        HEAP32[$339 >> 2] = $80; //@line 21475
        $340 = $ReallocAsyncCtx4 + 168 | 0; //@line 21476
        HEAP32[$340 >> 2] = $140; //@line 21477
        $341 = $ReallocAsyncCtx4 + 172 | 0; //@line 21478
        HEAP32[$341 >> 2] = $82; //@line 21479
        $342 = $ReallocAsyncCtx4 + 176 | 0; //@line 21480
        HEAP32[$342 >> 2] = $141; //@line 21481
        $343 = $ReallocAsyncCtx4 + 180 | 0; //@line 21482
        HEAP32[$343 >> 2] = $84; //@line 21483
        $344 = $ReallocAsyncCtx4 + 184 | 0; //@line 21484
        HEAP32[$344 >> 2] = $86; //@line 21485
        $345 = $ReallocAsyncCtx4 + 188 | 0; //@line 21486
        HEAP32[$345 >> 2] = $88; //@line 21487
        $346 = $ReallocAsyncCtx4 + 192 | 0; //@line 21488
        HEAP32[$346 >> 2] = $92; //@line 21489
        $347 = $ReallocAsyncCtx4 + 196 | 0; //@line 21490
        HEAP32[$347 >> 2] = $94; //@line 21491
        $348 = $ReallocAsyncCtx4 + 200 | 0; //@line 21492
        HEAP32[$348 >> 2] = $96; //@line 21493
        $349 = $ReallocAsyncCtx4 + 204 | 0; //@line 21494
        HEAP32[$349 >> 2] = $98; //@line 21495
        $350 = $ReallocAsyncCtx4 + 208 | 0; //@line 21496
        HEAP32[$350 >> 2] = $137; //@line 21497
        $351 = $ReallocAsyncCtx4 + 212 | 0; //@line 21498
        HEAP32[$351 >> 2] = $100; //@line 21499
        $352 = $ReallocAsyncCtx4 + 216 | 0; //@line 21500
        HEAP32[$352 >> 2] = $104; //@line 21501
        $353 = $ReallocAsyncCtx4 + 220 | 0; //@line 21502
        HEAP32[$353 >> 2] = $296; //@line 21503
        $354 = $ReallocAsyncCtx4 + 224 | 0; //@line 21504
        HEAP32[$354 >> 2] = $106; //@line 21505
        $355 = $ReallocAsyncCtx4 + 228 | 0; //@line 21506
        HEAP32[$355 >> 2] = $288; //@line 21507
        $356 = $ReallocAsyncCtx4 + 232 | 0; //@line 21508
        HEAP32[$356 >> 2] = $108; //@line 21509
        $357 = $ReallocAsyncCtx4 + 236 | 0; //@line 21510
        HEAP32[$357 >> 2] = $112; //@line 21511
        $358 = $ReallocAsyncCtx4 + 240 | 0; //@line 21512
        HEAP32[$358 >> 2] = $114; //@line 21513
        $359 = $ReallocAsyncCtx4 + 244 | 0; //@line 21514
        HEAP32[$359 >> 2] = $116; //@line 21515
        $360 = $ReallocAsyncCtx4 + 248 | 0; //@line 21516
        HEAP32[$360 >> 2] = $118; //@line 21517
        $361 = $ReallocAsyncCtx4 + 252 | 0; //@line 21518
        HEAP32[$361 >> 2] = $120; //@line 21519
        $362 = $ReallocAsyncCtx4 + 256 | 0; //@line 21520
        HEAP32[$362 >> 2] = $122; //@line 21521
        $363 = $ReallocAsyncCtx4 + 260 | 0; //@line 21522
        HEAP32[$363 >> 2] = $139; //@line 21523
        $364 = $ReallocAsyncCtx4 + 264 | 0; //@line 21524
        HEAP32[$364 >> 2] = $124; //@line 21525
        $365 = $ReallocAsyncCtx4 + 268 | 0; //@line 21526
        HEAP32[$365 >> 2] = $139; //@line 21527
        $366 = $ReallocAsyncCtx4 + 272 | 0; //@line 21528
        HEAP32[$366 >> 2] = $126; //@line 21529
        sp = STACKTOP; //@line 21530
        return;
       }
       HEAP32[___async_retval >> 2] = $298; //@line 21534
       ___async_unwind = 0; //@line 21535
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 21536
       $299 = $ReallocAsyncCtx4 + 4 | 0; //@line 21537
       HEAP32[$299 >> 2] = $2; //@line 21538
       $300 = $ReallocAsyncCtx4 + 8 | 0; //@line 21539
       HEAP32[$300 >> 2] = $80; //@line 21540
       $301 = $ReallocAsyncCtx4 + 12 | 0; //@line 21541
       HEAP32[$301 >> 2] = $4; //@line 21542
       $302 = $ReallocAsyncCtx4 + 16 | 0; //@line 21543
       HEAP32[$302 >> 2] = $6; //@line 21544
       $303 = $ReallocAsyncCtx4 + 20 | 0; //@line 21545
       HEAP32[$303 >> 2] = $135; //@line 21546
       $304 = $ReallocAsyncCtx4 + 24 | 0; //@line 21547
       HEAP32[$304 >> 2] = $8; //@line 21548
       $305 = $ReallocAsyncCtx4 + 28 | 0; //@line 21549
       HEAP32[$305 >> 2] = $10; //@line 21550
       $306 = $ReallocAsyncCtx4 + 32 | 0; //@line 21551
       HEAP32[$306 >> 2] = $12; //@line 21552
       $307 = $ReallocAsyncCtx4 + 36 | 0; //@line 21553
       HEAP32[$307 >> 2] = $136; //@line 21554
       $308 = $ReallocAsyncCtx4 + 40 | 0; //@line 21555
       HEAP32[$308 >> 2] = $14; //@line 21556
       $309 = $ReallocAsyncCtx4 + 44 | 0; //@line 21557
       HEAP32[$309 >> 2] = $16; //@line 21558
       $310 = $ReallocAsyncCtx4 + 48 | 0; //@line 21559
       HEAP32[$310 >> 2] = $18; //@line 21560
       $311 = $ReallocAsyncCtx4 + 52 | 0; //@line 21561
       HEAP32[$311 >> 2] = $20; //@line 21562
       $312 = $ReallocAsyncCtx4 + 56 | 0; //@line 21563
       HEAP32[$312 >> 2] = $22; //@line 21564
       $313 = $ReallocAsyncCtx4 + 60 | 0; //@line 21565
       HEAP32[$313 >> 2] = $24; //@line 21566
       $314 = $ReallocAsyncCtx4 + 64 | 0; //@line 21567
       HEAP32[$314 >> 2] = $26; //@line 21568
       $315 = $ReallocAsyncCtx4 + 68 | 0; //@line 21569
       HEAP32[$315 >> 2] = $28; //@line 21570
       $316 = $ReallocAsyncCtx4 + 72 | 0; //@line 21571
       HEAP32[$316 >> 2] = $30; //@line 21572
       $317 = $ReallocAsyncCtx4 + 76 | 0; //@line 21573
       HEAP32[$317 >> 2] = $32; //@line 21574
       $318 = $ReallocAsyncCtx4 + 80 | 0; //@line 21575
       HEAP32[$318 >> 2] = $$0208$i; //@line 21576
       $319 = $ReallocAsyncCtx4 + 84 | 0; //@line 21577
       HEAP32[$319 >> 2] = $34; //@line 21578
       $320 = $ReallocAsyncCtx4 + 88 | 0; //@line 21579
       HEAP32[$320 >> 2] = $36; //@line 21580
       $321 = $ReallocAsyncCtx4 + 92 | 0; //@line 21581
       HEAP32[$321 >> 2] = $38; //@line 21582
       $322 = $ReallocAsyncCtx4 + 96 | 0; //@line 21583
       HEAP32[$322 >> 2] = $40; //@line 21584
       $323 = $ReallocAsyncCtx4 + 100 | 0; //@line 21585
       HEAP32[$323 >> 2] = $42; //@line 21586
       $324 = $ReallocAsyncCtx4 + 104 | 0; //@line 21587
       HEAP32[$324 >> 2] = $44; //@line 21588
       $325 = $ReallocAsyncCtx4 + 108 | 0; //@line 21589
       HEAP32[$325 >> 2] = $48; //@line 21590
       $326 = $ReallocAsyncCtx4 + 112 | 0; //@line 21591
       HEAP32[$326 >> 2] = $50; //@line 21592
       $327 = $ReallocAsyncCtx4 + 116 | 0; //@line 21593
       HEAP32[$327 >> 2] = $52; //@line 21594
       $328 = $ReallocAsyncCtx4 + 120 | 0; //@line 21595
       HEAP32[$328 >> 2] = $58; //@line 21596
       $329 = $ReallocAsyncCtx4 + 124 | 0; //@line 21597
       HEAP32[$329 >> 2] = $60; //@line 21598
       $330 = $ReallocAsyncCtx4 + 128 | 0; //@line 21599
       HEAP32[$330 >> 2] = $62; //@line 21600
       $331 = $ReallocAsyncCtx4 + 132 | 0; //@line 21601
       HEAP32[$331 >> 2] = $64; //@line 21602
       $332 = $ReallocAsyncCtx4 + 136 | 0; //@line 21603
       HEAP32[$332 >> 2] = $66; //@line 21604
       $333 = $ReallocAsyncCtx4 + 140 | 0; //@line 21605
       HEAP32[$333 >> 2] = $68; //@line 21606
       $334 = $ReallocAsyncCtx4 + 144 | 0; //@line 21607
       HEAP32[$334 >> 2] = $70; //@line 21608
       $335 = $ReallocAsyncCtx4 + 148 | 0; //@line 21609
       HEAP32[$335 >> 2] = $72; //@line 21610
       $336 = $ReallocAsyncCtx4 + 152 | 0; //@line 21611
       HEAP32[$336 >> 2] = $74; //@line 21612
       $337 = $ReallocAsyncCtx4 + 156 | 0; //@line 21613
       HEAP32[$337 >> 2] = $76; //@line 21614
       $338 = $ReallocAsyncCtx4 + 160 | 0; //@line 21615
       HEAP32[$338 >> 2] = $78; //@line 21616
       $339 = $ReallocAsyncCtx4 + 164 | 0; //@line 21617
       HEAP32[$339 >> 2] = $80; //@line 21618
       $340 = $ReallocAsyncCtx4 + 168 | 0; //@line 21619
       HEAP32[$340 >> 2] = $140; //@line 21620
       $341 = $ReallocAsyncCtx4 + 172 | 0; //@line 21621
       HEAP32[$341 >> 2] = $82; //@line 21622
       $342 = $ReallocAsyncCtx4 + 176 | 0; //@line 21623
       HEAP32[$342 >> 2] = $141; //@line 21624
       $343 = $ReallocAsyncCtx4 + 180 | 0; //@line 21625
       HEAP32[$343 >> 2] = $84; //@line 21626
       $344 = $ReallocAsyncCtx4 + 184 | 0; //@line 21627
       HEAP32[$344 >> 2] = $86; //@line 21628
       $345 = $ReallocAsyncCtx4 + 188 | 0; //@line 21629
       HEAP32[$345 >> 2] = $88; //@line 21630
       $346 = $ReallocAsyncCtx4 + 192 | 0; //@line 21631
       HEAP32[$346 >> 2] = $92; //@line 21632
       $347 = $ReallocAsyncCtx4 + 196 | 0; //@line 21633
       HEAP32[$347 >> 2] = $94; //@line 21634
       $348 = $ReallocAsyncCtx4 + 200 | 0; //@line 21635
       HEAP32[$348 >> 2] = $96; //@line 21636
       $349 = $ReallocAsyncCtx4 + 204 | 0; //@line 21637
       HEAP32[$349 >> 2] = $98; //@line 21638
       $350 = $ReallocAsyncCtx4 + 208 | 0; //@line 21639
       HEAP32[$350 >> 2] = $137; //@line 21640
       $351 = $ReallocAsyncCtx4 + 212 | 0; //@line 21641
       HEAP32[$351 >> 2] = $100; //@line 21642
       $352 = $ReallocAsyncCtx4 + 216 | 0; //@line 21643
       HEAP32[$352 >> 2] = $104; //@line 21644
       $353 = $ReallocAsyncCtx4 + 220 | 0; //@line 21645
       HEAP32[$353 >> 2] = $296; //@line 21646
       $354 = $ReallocAsyncCtx4 + 224 | 0; //@line 21647
       HEAP32[$354 >> 2] = $106; //@line 21648
       $355 = $ReallocAsyncCtx4 + 228 | 0; //@line 21649
       HEAP32[$355 >> 2] = $288; //@line 21650
       $356 = $ReallocAsyncCtx4 + 232 | 0; //@line 21651
       HEAP32[$356 >> 2] = $108; //@line 21652
       $357 = $ReallocAsyncCtx4 + 236 | 0; //@line 21653
       HEAP32[$357 >> 2] = $112; //@line 21654
       $358 = $ReallocAsyncCtx4 + 240 | 0; //@line 21655
       HEAP32[$358 >> 2] = $114; //@line 21656
       $359 = $ReallocAsyncCtx4 + 244 | 0; //@line 21657
       HEAP32[$359 >> 2] = $116; //@line 21658
       $360 = $ReallocAsyncCtx4 + 248 | 0; //@line 21659
       HEAP32[$360 >> 2] = $118; //@line 21660
       $361 = $ReallocAsyncCtx4 + 252 | 0; //@line 21661
       HEAP32[$361 >> 2] = $120; //@line 21662
       $362 = $ReallocAsyncCtx4 + 256 | 0; //@line 21663
       HEAP32[$362 >> 2] = $122; //@line 21664
       $363 = $ReallocAsyncCtx4 + 260 | 0; //@line 21665
       HEAP32[$363 >> 2] = $139; //@line 21666
       $364 = $ReallocAsyncCtx4 + 264 | 0; //@line 21667
       HEAP32[$364 >> 2] = $124; //@line 21668
       $365 = $ReallocAsyncCtx4 + 268 | 0; //@line 21669
       HEAP32[$365 >> 2] = $139; //@line 21670
       $366 = $ReallocAsyncCtx4 + 272 | 0; //@line 21671
       HEAP32[$366 >> 2] = $126; //@line 21672
       sp = STACKTOP; //@line 21673
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $70); //@line 21677
     break L2;
     break;
    }
   case 41:
    {
     $368 = HEAP32[$139 >> 2] | 0; //@line 21682
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 21684
     $370 = _sn_coap_parser_options_parse_multiple_options($50, $80, $182, $368 + 48 | 0, $368, 4, $$1202$i) | 0; //@line 21685
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 21688
      $371 = $ReallocAsyncCtx10 + 4 | 0; //@line 21689
      HEAP32[$371 >> 2] = $2; //@line 21690
      $372 = $ReallocAsyncCtx10 + 8 | 0; //@line 21691
      HEAP32[$372 >> 2] = $80; //@line 21692
      $373 = $ReallocAsyncCtx10 + 12 | 0; //@line 21693
      HEAP32[$373 >> 2] = $4; //@line 21694
      $374 = $ReallocAsyncCtx10 + 16 | 0; //@line 21695
      HEAP32[$374 >> 2] = $6; //@line 21696
      $375 = $ReallocAsyncCtx10 + 20 | 0; //@line 21697
      HEAP32[$375 >> 2] = $135; //@line 21698
      $376 = $ReallocAsyncCtx10 + 24 | 0; //@line 21699
      HEAP32[$376 >> 2] = $8; //@line 21700
      $377 = $ReallocAsyncCtx10 + 28 | 0; //@line 21701
      HEAP32[$377 >> 2] = $10; //@line 21702
      $378 = $ReallocAsyncCtx10 + 32 | 0; //@line 21703
      HEAP32[$378 >> 2] = $12; //@line 21704
      $379 = $ReallocAsyncCtx10 + 36 | 0; //@line 21705
      HEAP32[$379 >> 2] = $136; //@line 21706
      $380 = $ReallocAsyncCtx10 + 40 | 0; //@line 21707
      HEAP32[$380 >> 2] = $14; //@line 21708
      $381 = $ReallocAsyncCtx10 + 44 | 0; //@line 21709
      HEAP32[$381 >> 2] = $16; //@line 21710
      $382 = $ReallocAsyncCtx10 + 48 | 0; //@line 21711
      HEAP32[$382 >> 2] = $18; //@line 21712
      $383 = $ReallocAsyncCtx10 + 52 | 0; //@line 21713
      HEAP32[$383 >> 2] = $20; //@line 21714
      $384 = $ReallocAsyncCtx10 + 56 | 0; //@line 21715
      HEAP32[$384 >> 2] = $22; //@line 21716
      $385 = $ReallocAsyncCtx10 + 60 | 0; //@line 21717
      HEAP32[$385 >> 2] = $24; //@line 21718
      $386 = $ReallocAsyncCtx10 + 64 | 0; //@line 21719
      HEAP32[$386 >> 2] = $26; //@line 21720
      $387 = $ReallocAsyncCtx10 + 68 | 0; //@line 21721
      HEAP32[$387 >> 2] = $28; //@line 21722
      $388 = $ReallocAsyncCtx10 + 72 | 0; //@line 21723
      HEAP32[$388 >> 2] = $30; //@line 21724
      $389 = $ReallocAsyncCtx10 + 76 | 0; //@line 21725
      HEAP32[$389 >> 2] = $32; //@line 21726
      $390 = $ReallocAsyncCtx10 + 80 | 0; //@line 21727
      HEAP32[$390 >> 2] = $$0208$i; //@line 21728
      $391 = $ReallocAsyncCtx10 + 84 | 0; //@line 21729
      HEAP32[$391 >> 2] = $34; //@line 21730
      $392 = $ReallocAsyncCtx10 + 88 | 0; //@line 21731
      HEAP32[$392 >> 2] = $36; //@line 21732
      $393 = $ReallocAsyncCtx10 + 92 | 0; //@line 21733
      HEAP32[$393 >> 2] = $38; //@line 21734
      $394 = $ReallocAsyncCtx10 + 96 | 0; //@line 21735
      HEAP32[$394 >> 2] = $40; //@line 21736
      $395 = $ReallocAsyncCtx10 + 100 | 0; //@line 21737
      HEAP32[$395 >> 2] = $42; //@line 21738
      $396 = $ReallocAsyncCtx10 + 104 | 0; //@line 21739
      HEAP32[$396 >> 2] = $44; //@line 21740
      $397 = $ReallocAsyncCtx10 + 108 | 0; //@line 21741
      HEAP32[$397 >> 2] = $48; //@line 21742
      $398 = $ReallocAsyncCtx10 + 112 | 0; //@line 21743
      HEAP32[$398 >> 2] = $50; //@line 21744
      $399 = $ReallocAsyncCtx10 + 116 | 0; //@line 21745
      HEAP32[$399 >> 2] = $52; //@line 21746
      $400 = $ReallocAsyncCtx10 + 120 | 0; //@line 21747
      HEAP32[$400 >> 2] = $58; //@line 21748
      $401 = $ReallocAsyncCtx10 + 124 | 0; //@line 21749
      HEAP32[$401 >> 2] = $60; //@line 21750
      $402 = $ReallocAsyncCtx10 + 128 | 0; //@line 21751
      HEAP32[$402 >> 2] = $62; //@line 21752
      $403 = $ReallocAsyncCtx10 + 132 | 0; //@line 21753
      HEAP32[$403 >> 2] = $64; //@line 21754
      $404 = $ReallocAsyncCtx10 + 136 | 0; //@line 21755
      HEAP32[$404 >> 2] = $66; //@line 21756
      $405 = $ReallocAsyncCtx10 + 140 | 0; //@line 21757
      HEAP32[$405 >> 2] = $68; //@line 21758
      $406 = $ReallocAsyncCtx10 + 144 | 0; //@line 21759
      HEAP32[$406 >> 2] = $70; //@line 21760
      $407 = $ReallocAsyncCtx10 + 148 | 0; //@line 21761
      HEAP32[$407 >> 2] = $72; //@line 21762
      $408 = $ReallocAsyncCtx10 + 152 | 0; //@line 21763
      HEAP32[$408 >> 2] = $74; //@line 21764
      $409 = $ReallocAsyncCtx10 + 156 | 0; //@line 21765
      HEAP32[$409 >> 2] = $76; //@line 21766
      $410 = $ReallocAsyncCtx10 + 160 | 0; //@line 21767
      HEAP32[$410 >> 2] = $78; //@line 21768
      $411 = $ReallocAsyncCtx10 + 164 | 0; //@line 21769
      HEAP32[$411 >> 2] = $80; //@line 21770
      $412 = $ReallocAsyncCtx10 + 168 | 0; //@line 21771
      HEAP32[$412 >> 2] = $140; //@line 21772
      $413 = $ReallocAsyncCtx10 + 172 | 0; //@line 21773
      HEAP32[$413 >> 2] = $82; //@line 21774
      $414 = $ReallocAsyncCtx10 + 176 | 0; //@line 21775
      HEAP32[$414 >> 2] = $141; //@line 21776
      $415 = $ReallocAsyncCtx10 + 180 | 0; //@line 21777
      HEAP32[$415 >> 2] = $84; //@line 21778
      $416 = $ReallocAsyncCtx10 + 184 | 0; //@line 21779
      HEAP32[$416 >> 2] = $86; //@line 21780
      $417 = $ReallocAsyncCtx10 + 188 | 0; //@line 21781
      HEAP32[$417 >> 2] = $88; //@line 21782
      $418 = $ReallocAsyncCtx10 + 192 | 0; //@line 21783
      HEAP32[$418 >> 2] = $92; //@line 21784
      $419 = $ReallocAsyncCtx10 + 196 | 0; //@line 21785
      HEAP32[$419 >> 2] = $94; //@line 21786
      $420 = $ReallocAsyncCtx10 + 200 | 0; //@line 21787
      HEAP32[$420 >> 2] = $96; //@line 21788
      $421 = $ReallocAsyncCtx10 + 204 | 0; //@line 21789
      HEAP32[$421 >> 2] = $98; //@line 21790
      $422 = $ReallocAsyncCtx10 + 208 | 0; //@line 21791
      HEAP32[$422 >> 2] = $137; //@line 21792
      $423 = $ReallocAsyncCtx10 + 212 | 0; //@line 21793
      HEAP32[$423 >> 2] = $100; //@line 21794
      $424 = $ReallocAsyncCtx10 + 216 | 0; //@line 21795
      HEAP32[$424 >> 2] = $104; //@line 21796
      $425 = $ReallocAsyncCtx10 + 220 | 0; //@line 21797
      HEAP32[$425 >> 2] = $106; //@line 21798
      $426 = $ReallocAsyncCtx10 + 224 | 0; //@line 21799
      HEAP32[$426 >> 2] = $108; //@line 21800
      $427 = $ReallocAsyncCtx10 + 228 | 0; //@line 21801
      HEAP32[$427 >> 2] = $112; //@line 21802
      $428 = $ReallocAsyncCtx10 + 232 | 0; //@line 21803
      HEAP32[$428 >> 2] = $114; //@line 21804
      $429 = $ReallocAsyncCtx10 + 236 | 0; //@line 21805
      HEAP32[$429 >> 2] = $116; //@line 21806
      $430 = $ReallocAsyncCtx10 + 240 | 0; //@line 21807
      HEAP32[$430 >> 2] = $118; //@line 21808
      $431 = $ReallocAsyncCtx10 + 244 | 0; //@line 21809
      HEAP32[$431 >> 2] = $120; //@line 21810
      $432 = $ReallocAsyncCtx10 + 248 | 0; //@line 21811
      HEAP32[$432 >> 2] = $122; //@line 21812
      $433 = $ReallocAsyncCtx10 + 252 | 0; //@line 21813
      HEAP32[$433 >> 2] = $139; //@line 21814
      $434 = $ReallocAsyncCtx10 + 256 | 0; //@line 21815
      HEAP32[$434 >> 2] = $124; //@line 21816
      $435 = $ReallocAsyncCtx10 + 260 | 0; //@line 21817
      HEAP32[$435 >> 2] = $139; //@line 21818
      $436 = $ReallocAsyncCtx10 + 264 | 0; //@line 21819
      HEAP32[$436 >> 2] = $126; //@line 21820
      sp = STACKTOP; //@line 21821
      return;
     }
     HEAP8[___async_retval >> 0] = $370; //@line 21825
     ___async_unwind = 0; //@line 21826
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 21827
     $371 = $ReallocAsyncCtx10 + 4 | 0; //@line 21828
     HEAP32[$371 >> 2] = $2; //@line 21829
     $372 = $ReallocAsyncCtx10 + 8 | 0; //@line 21830
     HEAP32[$372 >> 2] = $80; //@line 21831
     $373 = $ReallocAsyncCtx10 + 12 | 0; //@line 21832
     HEAP32[$373 >> 2] = $4; //@line 21833
     $374 = $ReallocAsyncCtx10 + 16 | 0; //@line 21834
     HEAP32[$374 >> 2] = $6; //@line 21835
     $375 = $ReallocAsyncCtx10 + 20 | 0; //@line 21836
     HEAP32[$375 >> 2] = $135; //@line 21837
     $376 = $ReallocAsyncCtx10 + 24 | 0; //@line 21838
     HEAP32[$376 >> 2] = $8; //@line 21839
     $377 = $ReallocAsyncCtx10 + 28 | 0; //@line 21840
     HEAP32[$377 >> 2] = $10; //@line 21841
     $378 = $ReallocAsyncCtx10 + 32 | 0; //@line 21842
     HEAP32[$378 >> 2] = $12; //@line 21843
     $379 = $ReallocAsyncCtx10 + 36 | 0; //@line 21844
     HEAP32[$379 >> 2] = $136; //@line 21845
     $380 = $ReallocAsyncCtx10 + 40 | 0; //@line 21846
     HEAP32[$380 >> 2] = $14; //@line 21847
     $381 = $ReallocAsyncCtx10 + 44 | 0; //@line 21848
     HEAP32[$381 >> 2] = $16; //@line 21849
     $382 = $ReallocAsyncCtx10 + 48 | 0; //@line 21850
     HEAP32[$382 >> 2] = $18; //@line 21851
     $383 = $ReallocAsyncCtx10 + 52 | 0; //@line 21852
     HEAP32[$383 >> 2] = $20; //@line 21853
     $384 = $ReallocAsyncCtx10 + 56 | 0; //@line 21854
     HEAP32[$384 >> 2] = $22; //@line 21855
     $385 = $ReallocAsyncCtx10 + 60 | 0; //@line 21856
     HEAP32[$385 >> 2] = $24; //@line 21857
     $386 = $ReallocAsyncCtx10 + 64 | 0; //@line 21858
     HEAP32[$386 >> 2] = $26; //@line 21859
     $387 = $ReallocAsyncCtx10 + 68 | 0; //@line 21860
     HEAP32[$387 >> 2] = $28; //@line 21861
     $388 = $ReallocAsyncCtx10 + 72 | 0; //@line 21862
     HEAP32[$388 >> 2] = $30; //@line 21863
     $389 = $ReallocAsyncCtx10 + 76 | 0; //@line 21864
     HEAP32[$389 >> 2] = $32; //@line 21865
     $390 = $ReallocAsyncCtx10 + 80 | 0; //@line 21866
     HEAP32[$390 >> 2] = $$0208$i; //@line 21867
     $391 = $ReallocAsyncCtx10 + 84 | 0; //@line 21868
     HEAP32[$391 >> 2] = $34; //@line 21869
     $392 = $ReallocAsyncCtx10 + 88 | 0; //@line 21870
     HEAP32[$392 >> 2] = $36; //@line 21871
     $393 = $ReallocAsyncCtx10 + 92 | 0; //@line 21872
     HEAP32[$393 >> 2] = $38; //@line 21873
     $394 = $ReallocAsyncCtx10 + 96 | 0; //@line 21874
     HEAP32[$394 >> 2] = $40; //@line 21875
     $395 = $ReallocAsyncCtx10 + 100 | 0; //@line 21876
     HEAP32[$395 >> 2] = $42; //@line 21877
     $396 = $ReallocAsyncCtx10 + 104 | 0; //@line 21878
     HEAP32[$396 >> 2] = $44; //@line 21879
     $397 = $ReallocAsyncCtx10 + 108 | 0; //@line 21880
     HEAP32[$397 >> 2] = $48; //@line 21881
     $398 = $ReallocAsyncCtx10 + 112 | 0; //@line 21882
     HEAP32[$398 >> 2] = $50; //@line 21883
     $399 = $ReallocAsyncCtx10 + 116 | 0; //@line 21884
     HEAP32[$399 >> 2] = $52; //@line 21885
     $400 = $ReallocAsyncCtx10 + 120 | 0; //@line 21886
     HEAP32[$400 >> 2] = $58; //@line 21887
     $401 = $ReallocAsyncCtx10 + 124 | 0; //@line 21888
     HEAP32[$401 >> 2] = $60; //@line 21889
     $402 = $ReallocAsyncCtx10 + 128 | 0; //@line 21890
     HEAP32[$402 >> 2] = $62; //@line 21891
     $403 = $ReallocAsyncCtx10 + 132 | 0; //@line 21892
     HEAP32[$403 >> 2] = $64; //@line 21893
     $404 = $ReallocAsyncCtx10 + 136 | 0; //@line 21894
     HEAP32[$404 >> 2] = $66; //@line 21895
     $405 = $ReallocAsyncCtx10 + 140 | 0; //@line 21896
     HEAP32[$405 >> 2] = $68; //@line 21897
     $406 = $ReallocAsyncCtx10 + 144 | 0; //@line 21898
     HEAP32[$406 >> 2] = $70; //@line 21899
     $407 = $ReallocAsyncCtx10 + 148 | 0; //@line 21900
     HEAP32[$407 >> 2] = $72; //@line 21901
     $408 = $ReallocAsyncCtx10 + 152 | 0; //@line 21902
     HEAP32[$408 >> 2] = $74; //@line 21903
     $409 = $ReallocAsyncCtx10 + 156 | 0; //@line 21904
     HEAP32[$409 >> 2] = $76; //@line 21905
     $410 = $ReallocAsyncCtx10 + 160 | 0; //@line 21906
     HEAP32[$410 >> 2] = $78; //@line 21907
     $411 = $ReallocAsyncCtx10 + 164 | 0; //@line 21908
     HEAP32[$411 >> 2] = $80; //@line 21909
     $412 = $ReallocAsyncCtx10 + 168 | 0; //@line 21910
     HEAP32[$412 >> 2] = $140; //@line 21911
     $413 = $ReallocAsyncCtx10 + 172 | 0; //@line 21912
     HEAP32[$413 >> 2] = $82; //@line 21913
     $414 = $ReallocAsyncCtx10 + 176 | 0; //@line 21914
     HEAP32[$414 >> 2] = $141; //@line 21915
     $415 = $ReallocAsyncCtx10 + 180 | 0; //@line 21916
     HEAP32[$415 >> 2] = $84; //@line 21917
     $416 = $ReallocAsyncCtx10 + 184 | 0; //@line 21918
     HEAP32[$416 >> 2] = $86; //@line 21919
     $417 = $ReallocAsyncCtx10 + 188 | 0; //@line 21920
     HEAP32[$417 >> 2] = $88; //@line 21921
     $418 = $ReallocAsyncCtx10 + 192 | 0; //@line 21922
     HEAP32[$418 >> 2] = $92; //@line 21923
     $419 = $ReallocAsyncCtx10 + 196 | 0; //@line 21924
     HEAP32[$419 >> 2] = $94; //@line 21925
     $420 = $ReallocAsyncCtx10 + 200 | 0; //@line 21926
     HEAP32[$420 >> 2] = $96; //@line 21927
     $421 = $ReallocAsyncCtx10 + 204 | 0; //@line 21928
     HEAP32[$421 >> 2] = $98; //@line 21929
     $422 = $ReallocAsyncCtx10 + 208 | 0; //@line 21930
     HEAP32[$422 >> 2] = $137; //@line 21931
     $423 = $ReallocAsyncCtx10 + 212 | 0; //@line 21932
     HEAP32[$423 >> 2] = $100; //@line 21933
     $424 = $ReallocAsyncCtx10 + 216 | 0; //@line 21934
     HEAP32[$424 >> 2] = $104; //@line 21935
     $425 = $ReallocAsyncCtx10 + 220 | 0; //@line 21936
     HEAP32[$425 >> 2] = $106; //@line 21937
     $426 = $ReallocAsyncCtx10 + 224 | 0; //@line 21938
     HEAP32[$426 >> 2] = $108; //@line 21939
     $427 = $ReallocAsyncCtx10 + 228 | 0; //@line 21940
     HEAP32[$427 >> 2] = $112; //@line 21941
     $428 = $ReallocAsyncCtx10 + 232 | 0; //@line 21942
     HEAP32[$428 >> 2] = $114; //@line 21943
     $429 = $ReallocAsyncCtx10 + 236 | 0; //@line 21944
     HEAP32[$429 >> 2] = $116; //@line 21945
     $430 = $ReallocAsyncCtx10 + 240 | 0; //@line 21946
     HEAP32[$430 >> 2] = $118; //@line 21947
     $431 = $ReallocAsyncCtx10 + 244 | 0; //@line 21948
     HEAP32[$431 >> 2] = $120; //@line 21949
     $432 = $ReallocAsyncCtx10 + 248 | 0; //@line 21950
     HEAP32[$432 >> 2] = $122; //@line 21951
     $433 = $ReallocAsyncCtx10 + 252 | 0; //@line 21952
     HEAP32[$433 >> 2] = $139; //@line 21953
     $434 = $ReallocAsyncCtx10 + 256 | 0; //@line 21954
     HEAP32[$434 >> 2] = $124; //@line 21955
     $435 = $ReallocAsyncCtx10 + 260 | 0; //@line 21956
     HEAP32[$435 >> 2] = $139; //@line 21957
     $436 = $ReallocAsyncCtx10 + 264 | 0; //@line 21958
     HEAP32[$436 >> 2] = $126; //@line 21959
     sp = STACKTOP; //@line 21960
     return;
    }
   case 44:
    {
     $438 = $$1202$in$i & 65535; //@line 21965
     if (($$1202$i + -1 & 65535) <= 254) {
      $441 = HEAP32[$139 >> 2] | 0; //@line 21969
      if (!(HEAP32[$441 + 52 >> 2] | 0)) {
       HEAP16[$441 + 4 >> 1] = $$1202$i; //@line 21975
       $446 = $222 + 1 | 0; //@line 21976
       HEAP32[$80 >> 2] = $446; //@line 21977
       $447 = HEAP32[$118 >> 2] | 0; //@line 21978
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 21979
       $448 = FUNCTION_TABLE_ii[$447 & 15]($$1202$i) | 0; //@line 21980
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 21983
        $449 = $ReallocAsyncCtx5 + 4 | 0; //@line 21984
        HEAP32[$449 >> 2] = $2; //@line 21985
        $450 = $ReallocAsyncCtx5 + 8 | 0; //@line 21986
        HEAP32[$450 >> 2] = $80; //@line 21987
        $451 = $ReallocAsyncCtx5 + 12 | 0; //@line 21988
        HEAP32[$451 >> 2] = $4; //@line 21989
        $452 = $ReallocAsyncCtx5 + 16 | 0; //@line 21990
        HEAP32[$452 >> 2] = $6; //@line 21991
        $453 = $ReallocAsyncCtx5 + 20 | 0; //@line 21992
        HEAP32[$453 >> 2] = $135; //@line 21993
        $454 = $ReallocAsyncCtx5 + 24 | 0; //@line 21994
        HEAP32[$454 >> 2] = $8; //@line 21995
        $455 = $ReallocAsyncCtx5 + 28 | 0; //@line 21996
        HEAP32[$455 >> 2] = $10; //@line 21997
        $456 = $ReallocAsyncCtx5 + 32 | 0; //@line 21998
        HEAP32[$456 >> 2] = $12; //@line 21999
        $457 = $ReallocAsyncCtx5 + 36 | 0; //@line 22000
        HEAP32[$457 >> 2] = $136; //@line 22001
        $458 = $ReallocAsyncCtx5 + 40 | 0; //@line 22002
        HEAP32[$458 >> 2] = $14; //@line 22003
        $459 = $ReallocAsyncCtx5 + 44 | 0; //@line 22004
        HEAP32[$459 >> 2] = $16; //@line 22005
        $460 = $ReallocAsyncCtx5 + 48 | 0; //@line 22006
        HEAP32[$460 >> 2] = $18; //@line 22007
        $461 = $ReallocAsyncCtx5 + 52 | 0; //@line 22008
        HEAP32[$461 >> 2] = $20; //@line 22009
        $462 = $ReallocAsyncCtx5 + 56 | 0; //@line 22010
        HEAP32[$462 >> 2] = $22; //@line 22011
        $463 = $ReallocAsyncCtx5 + 60 | 0; //@line 22012
        HEAP32[$463 >> 2] = $24; //@line 22013
        $464 = $ReallocAsyncCtx5 + 64 | 0; //@line 22014
        HEAP32[$464 >> 2] = $26; //@line 22015
        $465 = $ReallocAsyncCtx5 + 68 | 0; //@line 22016
        HEAP32[$465 >> 2] = $28; //@line 22017
        $466 = $ReallocAsyncCtx5 + 72 | 0; //@line 22018
        HEAP32[$466 >> 2] = $30; //@line 22019
        $467 = $ReallocAsyncCtx5 + 76 | 0; //@line 22020
        HEAP32[$467 >> 2] = $32; //@line 22021
        $468 = $ReallocAsyncCtx5 + 80 | 0; //@line 22022
        HEAP32[$468 >> 2] = $$0208$i; //@line 22023
        $469 = $ReallocAsyncCtx5 + 84 | 0; //@line 22024
        HEAP32[$469 >> 2] = $34; //@line 22025
        $470 = $ReallocAsyncCtx5 + 88 | 0; //@line 22026
        HEAP32[$470 >> 2] = $36; //@line 22027
        $471 = $ReallocAsyncCtx5 + 92 | 0; //@line 22028
        HEAP32[$471 >> 2] = $38; //@line 22029
        $472 = $ReallocAsyncCtx5 + 96 | 0; //@line 22030
        HEAP32[$472 >> 2] = $40; //@line 22031
        $473 = $ReallocAsyncCtx5 + 100 | 0; //@line 22032
        HEAP32[$473 >> 2] = $42; //@line 22033
        $474 = $ReallocAsyncCtx5 + 104 | 0; //@line 22034
        HEAP32[$474 >> 2] = $44; //@line 22035
        $475 = $ReallocAsyncCtx5 + 108 | 0; //@line 22036
        HEAP32[$475 >> 2] = $48; //@line 22037
        $476 = $ReallocAsyncCtx5 + 112 | 0; //@line 22038
        HEAP32[$476 >> 2] = $50; //@line 22039
        $477 = $ReallocAsyncCtx5 + 116 | 0; //@line 22040
        HEAP32[$477 >> 2] = $52; //@line 22041
        $478 = $ReallocAsyncCtx5 + 120 | 0; //@line 22042
        HEAP32[$478 >> 2] = $58; //@line 22043
        $479 = $ReallocAsyncCtx5 + 124 | 0; //@line 22044
        HEAP32[$479 >> 2] = $60; //@line 22045
        $480 = $ReallocAsyncCtx5 + 128 | 0; //@line 22046
        HEAP32[$480 >> 2] = $62; //@line 22047
        $481 = $ReallocAsyncCtx5 + 132 | 0; //@line 22048
        HEAP32[$481 >> 2] = $64; //@line 22049
        $482 = $ReallocAsyncCtx5 + 136 | 0; //@line 22050
        HEAP32[$482 >> 2] = $66; //@line 22051
        $483 = $ReallocAsyncCtx5 + 140 | 0; //@line 22052
        HEAP32[$483 >> 2] = $68; //@line 22053
        $484 = $ReallocAsyncCtx5 + 144 | 0; //@line 22054
        HEAP32[$484 >> 2] = $70; //@line 22055
        $485 = $ReallocAsyncCtx5 + 148 | 0; //@line 22056
        HEAP32[$485 >> 2] = $72; //@line 22057
        $486 = $ReallocAsyncCtx5 + 152 | 0; //@line 22058
        HEAP32[$486 >> 2] = $74; //@line 22059
        $487 = $ReallocAsyncCtx5 + 156 | 0; //@line 22060
        HEAP32[$487 >> 2] = $76; //@line 22061
        $488 = $ReallocAsyncCtx5 + 160 | 0; //@line 22062
        HEAP32[$488 >> 2] = $78; //@line 22063
        $489 = $ReallocAsyncCtx5 + 164 | 0; //@line 22064
        HEAP32[$489 >> 2] = $80; //@line 22065
        $490 = $ReallocAsyncCtx5 + 168 | 0; //@line 22066
        HEAP32[$490 >> 2] = $140; //@line 22067
        $491 = $ReallocAsyncCtx5 + 172 | 0; //@line 22068
        HEAP32[$491 >> 2] = $82; //@line 22069
        $492 = $ReallocAsyncCtx5 + 176 | 0; //@line 22070
        HEAP32[$492 >> 2] = $141; //@line 22071
        $493 = $ReallocAsyncCtx5 + 180 | 0; //@line 22072
        HEAP32[$493 >> 2] = $84; //@line 22073
        $494 = $ReallocAsyncCtx5 + 184 | 0; //@line 22074
        HEAP32[$494 >> 2] = $86; //@line 22075
        $495 = $ReallocAsyncCtx5 + 188 | 0; //@line 22076
        HEAP32[$495 >> 2] = $88; //@line 22077
        $496 = $ReallocAsyncCtx5 + 192 | 0; //@line 22078
        HEAP32[$496 >> 2] = $92; //@line 22079
        $497 = $ReallocAsyncCtx5 + 196 | 0; //@line 22080
        HEAP32[$497 >> 2] = $94; //@line 22081
        $498 = $ReallocAsyncCtx5 + 200 | 0; //@line 22082
        HEAP32[$498 >> 2] = $96; //@line 22083
        $499 = $ReallocAsyncCtx5 + 204 | 0; //@line 22084
        HEAP32[$499 >> 2] = $98; //@line 22085
        $500 = $ReallocAsyncCtx5 + 208 | 0; //@line 22086
        HEAP32[$500 >> 2] = $137; //@line 22087
        $501 = $ReallocAsyncCtx5 + 212 | 0; //@line 22088
        HEAP32[$501 >> 2] = $100; //@line 22089
        $502 = $ReallocAsyncCtx5 + 216 | 0; //@line 22090
        HEAP32[$502 >> 2] = $104; //@line 22091
        $503 = $ReallocAsyncCtx5 + 220 | 0; //@line 22092
        HEAP32[$503 >> 2] = $106; //@line 22093
        $504 = $ReallocAsyncCtx5 + 224 | 0; //@line 22094
        HEAP32[$504 >> 2] = $108; //@line 22095
        $505 = $ReallocAsyncCtx5 + 228 | 0; //@line 22096
        HEAP32[$505 >> 2] = $112; //@line 22097
        $506 = $ReallocAsyncCtx5 + 232 | 0; //@line 22098
        HEAP32[$506 >> 2] = $114; //@line 22099
        $507 = $ReallocAsyncCtx5 + 236 | 0; //@line 22100
        HEAP32[$507 >> 2] = $446; //@line 22101
        $508 = $ReallocAsyncCtx5 + 240 | 0; //@line 22102
        HEAP32[$508 >> 2] = $116; //@line 22103
        $509 = $ReallocAsyncCtx5 + 244 | 0; //@line 22104
        HEAP32[$509 >> 2] = $438; //@line 22105
        $510 = $ReallocAsyncCtx5 + 248 | 0; //@line 22106
        HEAP32[$510 >> 2] = $118; //@line 22107
        $511 = $ReallocAsyncCtx5 + 252 | 0; //@line 22108
        HEAP32[$511 >> 2] = $120; //@line 22109
        $512 = $ReallocAsyncCtx5 + 256 | 0; //@line 22110
        HEAP32[$512 >> 2] = $122; //@line 22111
        $513 = $ReallocAsyncCtx5 + 260 | 0; //@line 22112
        HEAP32[$513 >> 2] = $139; //@line 22113
        $514 = $ReallocAsyncCtx5 + 264 | 0; //@line 22114
        HEAP32[$514 >> 2] = $124; //@line 22115
        $515 = $ReallocAsyncCtx5 + 268 | 0; //@line 22116
        HEAP32[$515 >> 2] = $139; //@line 22117
        $516 = $ReallocAsyncCtx5 + 272 | 0; //@line 22118
        HEAP32[$516 >> 2] = $126; //@line 22119
        sp = STACKTOP; //@line 22120
        return;
       }
       HEAP32[___async_retval >> 2] = $448; //@line 22124
       ___async_unwind = 0; //@line 22125
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 22126
       $449 = $ReallocAsyncCtx5 + 4 | 0; //@line 22127
       HEAP32[$449 >> 2] = $2; //@line 22128
       $450 = $ReallocAsyncCtx5 + 8 | 0; //@line 22129
       HEAP32[$450 >> 2] = $80; //@line 22130
       $451 = $ReallocAsyncCtx5 + 12 | 0; //@line 22131
       HEAP32[$451 >> 2] = $4; //@line 22132
       $452 = $ReallocAsyncCtx5 + 16 | 0; //@line 22133
       HEAP32[$452 >> 2] = $6; //@line 22134
       $453 = $ReallocAsyncCtx5 + 20 | 0; //@line 22135
       HEAP32[$453 >> 2] = $135; //@line 22136
       $454 = $ReallocAsyncCtx5 + 24 | 0; //@line 22137
       HEAP32[$454 >> 2] = $8; //@line 22138
       $455 = $ReallocAsyncCtx5 + 28 | 0; //@line 22139
       HEAP32[$455 >> 2] = $10; //@line 22140
       $456 = $ReallocAsyncCtx5 + 32 | 0; //@line 22141
       HEAP32[$456 >> 2] = $12; //@line 22142
       $457 = $ReallocAsyncCtx5 + 36 | 0; //@line 22143
       HEAP32[$457 >> 2] = $136; //@line 22144
       $458 = $ReallocAsyncCtx5 + 40 | 0; //@line 22145
       HEAP32[$458 >> 2] = $14; //@line 22146
       $459 = $ReallocAsyncCtx5 + 44 | 0; //@line 22147
       HEAP32[$459 >> 2] = $16; //@line 22148
       $460 = $ReallocAsyncCtx5 + 48 | 0; //@line 22149
       HEAP32[$460 >> 2] = $18; //@line 22150
       $461 = $ReallocAsyncCtx5 + 52 | 0; //@line 22151
       HEAP32[$461 >> 2] = $20; //@line 22152
       $462 = $ReallocAsyncCtx5 + 56 | 0; //@line 22153
       HEAP32[$462 >> 2] = $22; //@line 22154
       $463 = $ReallocAsyncCtx5 + 60 | 0; //@line 22155
       HEAP32[$463 >> 2] = $24; //@line 22156
       $464 = $ReallocAsyncCtx5 + 64 | 0; //@line 22157
       HEAP32[$464 >> 2] = $26; //@line 22158
       $465 = $ReallocAsyncCtx5 + 68 | 0; //@line 22159
       HEAP32[$465 >> 2] = $28; //@line 22160
       $466 = $ReallocAsyncCtx5 + 72 | 0; //@line 22161
       HEAP32[$466 >> 2] = $30; //@line 22162
       $467 = $ReallocAsyncCtx5 + 76 | 0; //@line 22163
       HEAP32[$467 >> 2] = $32; //@line 22164
       $468 = $ReallocAsyncCtx5 + 80 | 0; //@line 22165
       HEAP32[$468 >> 2] = $$0208$i; //@line 22166
       $469 = $ReallocAsyncCtx5 + 84 | 0; //@line 22167
       HEAP32[$469 >> 2] = $34; //@line 22168
       $470 = $ReallocAsyncCtx5 + 88 | 0; //@line 22169
       HEAP32[$470 >> 2] = $36; //@line 22170
       $471 = $ReallocAsyncCtx5 + 92 | 0; //@line 22171
       HEAP32[$471 >> 2] = $38; //@line 22172
       $472 = $ReallocAsyncCtx5 + 96 | 0; //@line 22173
       HEAP32[$472 >> 2] = $40; //@line 22174
       $473 = $ReallocAsyncCtx5 + 100 | 0; //@line 22175
       HEAP32[$473 >> 2] = $42; //@line 22176
       $474 = $ReallocAsyncCtx5 + 104 | 0; //@line 22177
       HEAP32[$474 >> 2] = $44; //@line 22178
       $475 = $ReallocAsyncCtx5 + 108 | 0; //@line 22179
       HEAP32[$475 >> 2] = $48; //@line 22180
       $476 = $ReallocAsyncCtx5 + 112 | 0; //@line 22181
       HEAP32[$476 >> 2] = $50; //@line 22182
       $477 = $ReallocAsyncCtx5 + 116 | 0; //@line 22183
       HEAP32[$477 >> 2] = $52; //@line 22184
       $478 = $ReallocAsyncCtx5 + 120 | 0; //@line 22185
       HEAP32[$478 >> 2] = $58; //@line 22186
       $479 = $ReallocAsyncCtx5 + 124 | 0; //@line 22187
       HEAP32[$479 >> 2] = $60; //@line 22188
       $480 = $ReallocAsyncCtx5 + 128 | 0; //@line 22189
       HEAP32[$480 >> 2] = $62; //@line 22190
       $481 = $ReallocAsyncCtx5 + 132 | 0; //@line 22191
       HEAP32[$481 >> 2] = $64; //@line 22192
       $482 = $ReallocAsyncCtx5 + 136 | 0; //@line 22193
       HEAP32[$482 >> 2] = $66; //@line 22194
       $483 = $ReallocAsyncCtx5 + 140 | 0; //@line 22195
       HEAP32[$483 >> 2] = $68; //@line 22196
       $484 = $ReallocAsyncCtx5 + 144 | 0; //@line 22197
       HEAP32[$484 >> 2] = $70; //@line 22198
       $485 = $ReallocAsyncCtx5 + 148 | 0; //@line 22199
       HEAP32[$485 >> 2] = $72; //@line 22200
       $486 = $ReallocAsyncCtx5 + 152 | 0; //@line 22201
       HEAP32[$486 >> 2] = $74; //@line 22202
       $487 = $ReallocAsyncCtx5 + 156 | 0; //@line 22203
       HEAP32[$487 >> 2] = $76; //@line 22204
       $488 = $ReallocAsyncCtx5 + 160 | 0; //@line 22205
       HEAP32[$488 >> 2] = $78; //@line 22206
       $489 = $ReallocAsyncCtx5 + 164 | 0; //@line 22207
       HEAP32[$489 >> 2] = $80; //@line 22208
       $490 = $ReallocAsyncCtx5 + 168 | 0; //@line 22209
       HEAP32[$490 >> 2] = $140; //@line 22210
       $491 = $ReallocAsyncCtx5 + 172 | 0; //@line 22211
       HEAP32[$491 >> 2] = $82; //@line 22212
       $492 = $ReallocAsyncCtx5 + 176 | 0; //@line 22213
       HEAP32[$492 >> 2] = $141; //@line 22214
       $493 = $ReallocAsyncCtx5 + 180 | 0; //@line 22215
       HEAP32[$493 >> 2] = $84; //@line 22216
       $494 = $ReallocAsyncCtx5 + 184 | 0; //@line 22217
       HEAP32[$494 >> 2] = $86; //@line 22218
       $495 = $ReallocAsyncCtx5 + 188 | 0; //@line 22219
       HEAP32[$495 >> 2] = $88; //@line 22220
       $496 = $ReallocAsyncCtx5 + 192 | 0; //@line 22221
       HEAP32[$496 >> 2] = $92; //@line 22222
       $497 = $ReallocAsyncCtx5 + 196 | 0; //@line 22223
       HEAP32[$497 >> 2] = $94; //@line 22224
       $498 = $ReallocAsyncCtx5 + 200 | 0; //@line 22225
       HEAP32[$498 >> 2] = $96; //@line 22226
       $499 = $ReallocAsyncCtx5 + 204 | 0; //@line 22227
       HEAP32[$499 >> 2] = $98; //@line 22228
       $500 = $ReallocAsyncCtx5 + 208 | 0; //@line 22229
       HEAP32[$500 >> 2] = $137; //@line 22230
       $501 = $ReallocAsyncCtx5 + 212 | 0; //@line 22231
       HEAP32[$501 >> 2] = $100; //@line 22232
       $502 = $ReallocAsyncCtx5 + 216 | 0; //@line 22233
       HEAP32[$502 >> 2] = $104; //@line 22234
       $503 = $ReallocAsyncCtx5 + 220 | 0; //@line 22235
       HEAP32[$503 >> 2] = $106; //@line 22236
       $504 = $ReallocAsyncCtx5 + 224 | 0; //@line 22237
       HEAP32[$504 >> 2] = $108; //@line 22238
       $505 = $ReallocAsyncCtx5 + 228 | 0; //@line 22239
       HEAP32[$505 >> 2] = $112; //@line 22240
       $506 = $ReallocAsyncCtx5 + 232 | 0; //@line 22241
       HEAP32[$506 >> 2] = $114; //@line 22242
       $507 = $ReallocAsyncCtx5 + 236 | 0; //@line 22243
       HEAP32[$507 >> 2] = $446; //@line 22244
       $508 = $ReallocAsyncCtx5 + 240 | 0; //@line 22245
       HEAP32[$508 >> 2] = $116; //@line 22246
       $509 = $ReallocAsyncCtx5 + 244 | 0; //@line 22247
       HEAP32[$509 >> 2] = $438; //@line 22248
       $510 = $ReallocAsyncCtx5 + 248 | 0; //@line 22249
       HEAP32[$510 >> 2] = $118; //@line 22250
       $511 = $ReallocAsyncCtx5 + 252 | 0; //@line 22251
       HEAP32[$511 >> 2] = $120; //@line 22252
       $512 = $ReallocAsyncCtx5 + 256 | 0; //@line 22253
       HEAP32[$512 >> 2] = $122; //@line 22254
       $513 = $ReallocAsyncCtx5 + 260 | 0; //@line 22255
       HEAP32[$513 >> 2] = $139; //@line 22256
       $514 = $ReallocAsyncCtx5 + 264 | 0; //@line 22257
       HEAP32[$514 >> 2] = $124; //@line 22258
       $515 = $ReallocAsyncCtx5 + 268 | 0; //@line 22259
       HEAP32[$515 >> 2] = $139; //@line 22260
       $516 = $ReallocAsyncCtx5 + 272 | 0; //@line 22261
       HEAP32[$516 >> 2] = $126; //@line 22262
       sp = STACKTOP; //@line 22263
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $88); //@line 22267
     break L2;
     break;
    }
   case 50:
    {
     $518 = HEAP32[$139 >> 2] | 0; //@line 22272
     $519 = $518 + 56 | 0; //@line 22273
     if (HEAP32[$519 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $58); //@line 22277
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 22281
     $523 = _sn_coap_parser_options_parse_multiple_options($50, $80, $182, $519, $518 + 6 | 0, 8, $$1202$i) | 0; //@line 22282
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 22285
      $524 = $ReallocAsyncCtx9 + 4 | 0; //@line 22286
      HEAP32[$524 >> 2] = $2; //@line 22287
      $525 = $ReallocAsyncCtx9 + 8 | 0; //@line 22288
      HEAP32[$525 >> 2] = $80; //@line 22289
      $526 = $ReallocAsyncCtx9 + 12 | 0; //@line 22290
      HEAP32[$526 >> 2] = $4; //@line 22291
      $527 = $ReallocAsyncCtx9 + 16 | 0; //@line 22292
      HEAP32[$527 >> 2] = $6; //@line 22293
      $528 = $ReallocAsyncCtx9 + 20 | 0; //@line 22294
      HEAP32[$528 >> 2] = $135; //@line 22295
      $529 = $ReallocAsyncCtx9 + 24 | 0; //@line 22296
      HEAP32[$529 >> 2] = $8; //@line 22297
      $530 = $ReallocAsyncCtx9 + 28 | 0; //@line 22298
      HEAP32[$530 >> 2] = $10; //@line 22299
      $531 = $ReallocAsyncCtx9 + 32 | 0; //@line 22300
      HEAP32[$531 >> 2] = $12; //@line 22301
      $532 = $ReallocAsyncCtx9 + 36 | 0; //@line 22302
      HEAP32[$532 >> 2] = $136; //@line 22303
      $533 = $ReallocAsyncCtx9 + 40 | 0; //@line 22304
      HEAP32[$533 >> 2] = $14; //@line 22305
      $534 = $ReallocAsyncCtx9 + 44 | 0; //@line 22306
      HEAP32[$534 >> 2] = $16; //@line 22307
      $535 = $ReallocAsyncCtx9 + 48 | 0; //@line 22308
      HEAP32[$535 >> 2] = $18; //@line 22309
      $536 = $ReallocAsyncCtx9 + 52 | 0; //@line 22310
      HEAP32[$536 >> 2] = $20; //@line 22311
      $537 = $ReallocAsyncCtx9 + 56 | 0; //@line 22312
      HEAP32[$537 >> 2] = $22; //@line 22313
      $538 = $ReallocAsyncCtx9 + 60 | 0; //@line 22314
      HEAP32[$538 >> 2] = $24; //@line 22315
      $539 = $ReallocAsyncCtx9 + 64 | 0; //@line 22316
      HEAP32[$539 >> 2] = $26; //@line 22317
      $540 = $ReallocAsyncCtx9 + 68 | 0; //@line 22318
      HEAP32[$540 >> 2] = $28; //@line 22319
      $541 = $ReallocAsyncCtx9 + 72 | 0; //@line 22320
      HEAP32[$541 >> 2] = $30; //@line 22321
      $542 = $ReallocAsyncCtx9 + 76 | 0; //@line 22322
      HEAP32[$542 >> 2] = $32; //@line 22323
      $543 = $ReallocAsyncCtx9 + 80 | 0; //@line 22324
      HEAP32[$543 >> 2] = $$0208$i; //@line 22325
      $544 = $ReallocAsyncCtx9 + 84 | 0; //@line 22326
      HEAP32[$544 >> 2] = $34; //@line 22327
      $545 = $ReallocAsyncCtx9 + 88 | 0; //@line 22328
      HEAP32[$545 >> 2] = $36; //@line 22329
      $546 = $ReallocAsyncCtx9 + 92 | 0; //@line 22330
      HEAP32[$546 >> 2] = $38; //@line 22331
      $547 = $ReallocAsyncCtx9 + 96 | 0; //@line 22332
      HEAP32[$547 >> 2] = $40; //@line 22333
      $548 = $ReallocAsyncCtx9 + 100 | 0; //@line 22334
      HEAP32[$548 >> 2] = $42; //@line 22335
      $549 = $ReallocAsyncCtx9 + 104 | 0; //@line 22336
      HEAP32[$549 >> 2] = $44; //@line 22337
      $550 = $ReallocAsyncCtx9 + 108 | 0; //@line 22338
      HEAP32[$550 >> 2] = $48; //@line 22339
      $551 = $ReallocAsyncCtx9 + 112 | 0; //@line 22340
      HEAP32[$551 >> 2] = $50; //@line 22341
      $552 = $ReallocAsyncCtx9 + 116 | 0; //@line 22342
      HEAP32[$552 >> 2] = $52; //@line 22343
      $553 = $ReallocAsyncCtx9 + 120 | 0; //@line 22344
      HEAP32[$553 >> 2] = $58; //@line 22345
      $554 = $ReallocAsyncCtx9 + 124 | 0; //@line 22346
      HEAP32[$554 >> 2] = $60; //@line 22347
      $555 = $ReallocAsyncCtx9 + 128 | 0; //@line 22348
      HEAP32[$555 >> 2] = $62; //@line 22349
      $556 = $ReallocAsyncCtx9 + 132 | 0; //@line 22350
      HEAP32[$556 >> 2] = $64; //@line 22351
      $557 = $ReallocAsyncCtx9 + 136 | 0; //@line 22352
      HEAP32[$557 >> 2] = $66; //@line 22353
      $558 = $ReallocAsyncCtx9 + 140 | 0; //@line 22354
      HEAP32[$558 >> 2] = $68; //@line 22355
      $559 = $ReallocAsyncCtx9 + 144 | 0; //@line 22356
      HEAP32[$559 >> 2] = $70; //@line 22357
      $560 = $ReallocAsyncCtx9 + 148 | 0; //@line 22358
      HEAP32[$560 >> 2] = $72; //@line 22359
      $561 = $ReallocAsyncCtx9 + 152 | 0; //@line 22360
      HEAP32[$561 >> 2] = $74; //@line 22361
      $562 = $ReallocAsyncCtx9 + 156 | 0; //@line 22362
      HEAP32[$562 >> 2] = $76; //@line 22363
      $563 = $ReallocAsyncCtx9 + 160 | 0; //@line 22364
      HEAP32[$563 >> 2] = $78; //@line 22365
      $564 = $ReallocAsyncCtx9 + 164 | 0; //@line 22366
      HEAP32[$564 >> 2] = $80; //@line 22367
      $565 = $ReallocAsyncCtx9 + 168 | 0; //@line 22368
      HEAP32[$565 >> 2] = $140; //@line 22369
      $566 = $ReallocAsyncCtx9 + 172 | 0; //@line 22370
      HEAP32[$566 >> 2] = $82; //@line 22371
      $567 = $ReallocAsyncCtx9 + 176 | 0; //@line 22372
      HEAP32[$567 >> 2] = $141; //@line 22373
      $568 = $ReallocAsyncCtx9 + 180 | 0; //@line 22374
      HEAP32[$568 >> 2] = $84; //@line 22375
      $569 = $ReallocAsyncCtx9 + 184 | 0; //@line 22376
      HEAP32[$569 >> 2] = $86; //@line 22377
      $570 = $ReallocAsyncCtx9 + 188 | 0; //@line 22378
      HEAP32[$570 >> 2] = $88; //@line 22379
      $571 = $ReallocAsyncCtx9 + 192 | 0; //@line 22380
      HEAP32[$571 >> 2] = $92; //@line 22381
      $572 = $ReallocAsyncCtx9 + 196 | 0; //@line 22382
      HEAP32[$572 >> 2] = $94; //@line 22383
      $573 = $ReallocAsyncCtx9 + 200 | 0; //@line 22384
      HEAP32[$573 >> 2] = $96; //@line 22385
      $574 = $ReallocAsyncCtx9 + 204 | 0; //@line 22386
      HEAP32[$574 >> 2] = $98; //@line 22387
      $575 = $ReallocAsyncCtx9 + 208 | 0; //@line 22388
      HEAP32[$575 >> 2] = $137; //@line 22389
      $576 = $ReallocAsyncCtx9 + 212 | 0; //@line 22390
      HEAP32[$576 >> 2] = $100; //@line 22391
      $577 = $ReallocAsyncCtx9 + 216 | 0; //@line 22392
      HEAP32[$577 >> 2] = $104; //@line 22393
      $578 = $ReallocAsyncCtx9 + 220 | 0; //@line 22394
      HEAP32[$578 >> 2] = $106; //@line 22395
      $579 = $ReallocAsyncCtx9 + 224 | 0; //@line 22396
      HEAP32[$579 >> 2] = $108; //@line 22397
      $580 = $ReallocAsyncCtx9 + 228 | 0; //@line 22398
      HEAP32[$580 >> 2] = $112; //@line 22399
      $581 = $ReallocAsyncCtx9 + 232 | 0; //@line 22400
      HEAP32[$581 >> 2] = $114; //@line 22401
      $582 = $ReallocAsyncCtx9 + 236 | 0; //@line 22402
      HEAP32[$582 >> 2] = $116; //@line 22403
      $583 = $ReallocAsyncCtx9 + 240 | 0; //@line 22404
      HEAP32[$583 >> 2] = $118; //@line 22405
      $584 = $ReallocAsyncCtx9 + 244 | 0; //@line 22406
      HEAP32[$584 >> 2] = $120; //@line 22407
      $585 = $ReallocAsyncCtx9 + 248 | 0; //@line 22408
      HEAP32[$585 >> 2] = $122; //@line 22409
      $586 = $ReallocAsyncCtx9 + 252 | 0; //@line 22410
      HEAP32[$586 >> 2] = $139; //@line 22411
      $587 = $ReallocAsyncCtx9 + 256 | 0; //@line 22412
      HEAP32[$587 >> 2] = $124; //@line 22413
      $588 = $ReallocAsyncCtx9 + 260 | 0; //@line 22414
      HEAP32[$588 >> 2] = $139; //@line 22415
      $589 = $ReallocAsyncCtx9 + 264 | 0; //@line 22416
      HEAP32[$589 >> 2] = $126; //@line 22417
      sp = STACKTOP; //@line 22418
      return;
     }
     HEAP8[___async_retval >> 0] = $523; //@line 22422
     ___async_unwind = 0; //@line 22423
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 22424
     $524 = $ReallocAsyncCtx9 + 4 | 0; //@line 22425
     HEAP32[$524 >> 2] = $2; //@line 22426
     $525 = $ReallocAsyncCtx9 + 8 | 0; //@line 22427
     HEAP32[$525 >> 2] = $80; //@line 22428
     $526 = $ReallocAsyncCtx9 + 12 | 0; //@line 22429
     HEAP32[$526 >> 2] = $4; //@line 22430
     $527 = $ReallocAsyncCtx9 + 16 | 0; //@line 22431
     HEAP32[$527 >> 2] = $6; //@line 22432
     $528 = $ReallocAsyncCtx9 + 20 | 0; //@line 22433
     HEAP32[$528 >> 2] = $135; //@line 22434
     $529 = $ReallocAsyncCtx9 + 24 | 0; //@line 22435
     HEAP32[$529 >> 2] = $8; //@line 22436
     $530 = $ReallocAsyncCtx9 + 28 | 0; //@line 22437
     HEAP32[$530 >> 2] = $10; //@line 22438
     $531 = $ReallocAsyncCtx9 + 32 | 0; //@line 22439
     HEAP32[$531 >> 2] = $12; //@line 22440
     $532 = $ReallocAsyncCtx9 + 36 | 0; //@line 22441
     HEAP32[$532 >> 2] = $136; //@line 22442
     $533 = $ReallocAsyncCtx9 + 40 | 0; //@line 22443
     HEAP32[$533 >> 2] = $14; //@line 22444
     $534 = $ReallocAsyncCtx9 + 44 | 0; //@line 22445
     HEAP32[$534 >> 2] = $16; //@line 22446
     $535 = $ReallocAsyncCtx9 + 48 | 0; //@line 22447
     HEAP32[$535 >> 2] = $18; //@line 22448
     $536 = $ReallocAsyncCtx9 + 52 | 0; //@line 22449
     HEAP32[$536 >> 2] = $20; //@line 22450
     $537 = $ReallocAsyncCtx9 + 56 | 0; //@line 22451
     HEAP32[$537 >> 2] = $22; //@line 22452
     $538 = $ReallocAsyncCtx9 + 60 | 0; //@line 22453
     HEAP32[$538 >> 2] = $24; //@line 22454
     $539 = $ReallocAsyncCtx9 + 64 | 0; //@line 22455
     HEAP32[$539 >> 2] = $26; //@line 22456
     $540 = $ReallocAsyncCtx9 + 68 | 0; //@line 22457
     HEAP32[$540 >> 2] = $28; //@line 22458
     $541 = $ReallocAsyncCtx9 + 72 | 0; //@line 22459
     HEAP32[$541 >> 2] = $30; //@line 22460
     $542 = $ReallocAsyncCtx9 + 76 | 0; //@line 22461
     HEAP32[$542 >> 2] = $32; //@line 22462
     $543 = $ReallocAsyncCtx9 + 80 | 0; //@line 22463
     HEAP32[$543 >> 2] = $$0208$i; //@line 22464
     $544 = $ReallocAsyncCtx9 + 84 | 0; //@line 22465
     HEAP32[$544 >> 2] = $34; //@line 22466
     $545 = $ReallocAsyncCtx9 + 88 | 0; //@line 22467
     HEAP32[$545 >> 2] = $36; //@line 22468
     $546 = $ReallocAsyncCtx9 + 92 | 0; //@line 22469
     HEAP32[$546 >> 2] = $38; //@line 22470
     $547 = $ReallocAsyncCtx9 + 96 | 0; //@line 22471
     HEAP32[$547 >> 2] = $40; //@line 22472
     $548 = $ReallocAsyncCtx9 + 100 | 0; //@line 22473
     HEAP32[$548 >> 2] = $42; //@line 22474
     $549 = $ReallocAsyncCtx9 + 104 | 0; //@line 22475
     HEAP32[$549 >> 2] = $44; //@line 22476
     $550 = $ReallocAsyncCtx9 + 108 | 0; //@line 22477
     HEAP32[$550 >> 2] = $48; //@line 22478
     $551 = $ReallocAsyncCtx9 + 112 | 0; //@line 22479
     HEAP32[$551 >> 2] = $50; //@line 22480
     $552 = $ReallocAsyncCtx9 + 116 | 0; //@line 22481
     HEAP32[$552 >> 2] = $52; //@line 22482
     $553 = $ReallocAsyncCtx9 + 120 | 0; //@line 22483
     HEAP32[$553 >> 2] = $58; //@line 22484
     $554 = $ReallocAsyncCtx9 + 124 | 0; //@line 22485
     HEAP32[$554 >> 2] = $60; //@line 22486
     $555 = $ReallocAsyncCtx9 + 128 | 0; //@line 22487
     HEAP32[$555 >> 2] = $62; //@line 22488
     $556 = $ReallocAsyncCtx9 + 132 | 0; //@line 22489
     HEAP32[$556 >> 2] = $64; //@line 22490
     $557 = $ReallocAsyncCtx9 + 136 | 0; //@line 22491
     HEAP32[$557 >> 2] = $66; //@line 22492
     $558 = $ReallocAsyncCtx9 + 140 | 0; //@line 22493
     HEAP32[$558 >> 2] = $68; //@line 22494
     $559 = $ReallocAsyncCtx9 + 144 | 0; //@line 22495
     HEAP32[$559 >> 2] = $70; //@line 22496
     $560 = $ReallocAsyncCtx9 + 148 | 0; //@line 22497
     HEAP32[$560 >> 2] = $72; //@line 22498
     $561 = $ReallocAsyncCtx9 + 152 | 0; //@line 22499
     HEAP32[$561 >> 2] = $74; //@line 22500
     $562 = $ReallocAsyncCtx9 + 156 | 0; //@line 22501
     HEAP32[$562 >> 2] = $76; //@line 22502
     $563 = $ReallocAsyncCtx9 + 160 | 0; //@line 22503
     HEAP32[$563 >> 2] = $78; //@line 22504
     $564 = $ReallocAsyncCtx9 + 164 | 0; //@line 22505
     HEAP32[$564 >> 2] = $80; //@line 22506
     $565 = $ReallocAsyncCtx9 + 168 | 0; //@line 22507
     HEAP32[$565 >> 2] = $140; //@line 22508
     $566 = $ReallocAsyncCtx9 + 172 | 0; //@line 22509
     HEAP32[$566 >> 2] = $82; //@line 22510
     $567 = $ReallocAsyncCtx9 + 176 | 0; //@line 22511
     HEAP32[$567 >> 2] = $141; //@line 22512
     $568 = $ReallocAsyncCtx9 + 180 | 0; //@line 22513
     HEAP32[$568 >> 2] = $84; //@line 22514
     $569 = $ReallocAsyncCtx9 + 184 | 0; //@line 22515
     HEAP32[$569 >> 2] = $86; //@line 22516
     $570 = $ReallocAsyncCtx9 + 188 | 0; //@line 22517
     HEAP32[$570 >> 2] = $88; //@line 22518
     $571 = $ReallocAsyncCtx9 + 192 | 0; //@line 22519
     HEAP32[$571 >> 2] = $92; //@line 22520
     $572 = $ReallocAsyncCtx9 + 196 | 0; //@line 22521
     HEAP32[$572 >> 2] = $94; //@line 22522
     $573 = $ReallocAsyncCtx9 + 200 | 0; //@line 22523
     HEAP32[$573 >> 2] = $96; //@line 22524
     $574 = $ReallocAsyncCtx9 + 204 | 0; //@line 22525
     HEAP32[$574 >> 2] = $98; //@line 22526
     $575 = $ReallocAsyncCtx9 + 208 | 0; //@line 22527
     HEAP32[$575 >> 2] = $137; //@line 22528
     $576 = $ReallocAsyncCtx9 + 212 | 0; //@line 22529
     HEAP32[$576 >> 2] = $100; //@line 22530
     $577 = $ReallocAsyncCtx9 + 216 | 0; //@line 22531
     HEAP32[$577 >> 2] = $104; //@line 22532
     $578 = $ReallocAsyncCtx9 + 220 | 0; //@line 22533
     HEAP32[$578 >> 2] = $106; //@line 22534
     $579 = $ReallocAsyncCtx9 + 224 | 0; //@line 22535
     HEAP32[$579 >> 2] = $108; //@line 22536
     $580 = $ReallocAsyncCtx9 + 228 | 0; //@line 22537
     HEAP32[$580 >> 2] = $112; //@line 22538
     $581 = $ReallocAsyncCtx9 + 232 | 0; //@line 22539
     HEAP32[$581 >> 2] = $114; //@line 22540
     $582 = $ReallocAsyncCtx9 + 236 | 0; //@line 22541
     HEAP32[$582 >> 2] = $116; //@line 22542
     $583 = $ReallocAsyncCtx9 + 240 | 0; //@line 22543
     HEAP32[$583 >> 2] = $118; //@line 22544
     $584 = $ReallocAsyncCtx9 + 244 | 0; //@line 22545
     HEAP32[$584 >> 2] = $120; //@line 22546
     $585 = $ReallocAsyncCtx9 + 248 | 0; //@line 22547
     HEAP32[$585 >> 2] = $122; //@line 22548
     $586 = $ReallocAsyncCtx9 + 252 | 0; //@line 22549
     HEAP32[$586 >> 2] = $139; //@line 22550
     $587 = $ReallocAsyncCtx9 + 256 | 0; //@line 22551
     HEAP32[$587 >> 2] = $124; //@line 22552
     $588 = $ReallocAsyncCtx9 + 260 | 0; //@line 22553
     HEAP32[$588 >> 2] = $139; //@line 22554
     $589 = $ReallocAsyncCtx9 + 264 | 0; //@line 22555
     HEAP32[$589 >> 2] = $126; //@line 22556
     sp = STACKTOP; //@line 22557
     return;
    }
   case 57:
    {
     _mbed_tracef(2, 3737, 4765, $4); //@line 22562
     break L2;
     break;
    }
   case 61:
    {
     $607 = HEAP32[$139 >> 2] | 0; //@line 22567
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 22570
     $610 = _sn_coap_parser_options_parse_multiple_options($50, $80, $182, $607 + 60 | 0, $607 + 8 | 0, 20, $$1202$i) | 0; //@line 22571
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 22574
      $611 = $ReallocAsyncCtx8 + 4 | 0; //@line 22575
      HEAP32[$611 >> 2] = $2; //@line 22576
      $612 = $ReallocAsyncCtx8 + 8 | 0; //@line 22577
      HEAP32[$612 >> 2] = $80; //@line 22578
      $613 = $ReallocAsyncCtx8 + 12 | 0; //@line 22579
      HEAP32[$613 >> 2] = $4; //@line 22580
      $614 = $ReallocAsyncCtx8 + 16 | 0; //@line 22581
      HEAP32[$614 >> 2] = $6; //@line 22582
      $615 = $ReallocAsyncCtx8 + 20 | 0; //@line 22583
      HEAP32[$615 >> 2] = $135; //@line 22584
      $616 = $ReallocAsyncCtx8 + 24 | 0; //@line 22585
      HEAP32[$616 >> 2] = $8; //@line 22586
      $617 = $ReallocAsyncCtx8 + 28 | 0; //@line 22587
      HEAP32[$617 >> 2] = $10; //@line 22588
      $618 = $ReallocAsyncCtx8 + 32 | 0; //@line 22589
      HEAP32[$618 >> 2] = $12; //@line 22590
      $619 = $ReallocAsyncCtx8 + 36 | 0; //@line 22591
      HEAP32[$619 >> 2] = $136; //@line 22592
      $620 = $ReallocAsyncCtx8 + 40 | 0; //@line 22593
      HEAP32[$620 >> 2] = $14; //@line 22594
      $621 = $ReallocAsyncCtx8 + 44 | 0; //@line 22595
      HEAP32[$621 >> 2] = $16; //@line 22596
      $622 = $ReallocAsyncCtx8 + 48 | 0; //@line 22597
      HEAP32[$622 >> 2] = $18; //@line 22598
      $623 = $ReallocAsyncCtx8 + 52 | 0; //@line 22599
      HEAP32[$623 >> 2] = $20; //@line 22600
      $624 = $ReallocAsyncCtx8 + 56 | 0; //@line 22601
      HEAP32[$624 >> 2] = $22; //@line 22602
      $625 = $ReallocAsyncCtx8 + 60 | 0; //@line 22603
      HEAP32[$625 >> 2] = $24; //@line 22604
      $626 = $ReallocAsyncCtx8 + 64 | 0; //@line 22605
      HEAP32[$626 >> 2] = $26; //@line 22606
      $627 = $ReallocAsyncCtx8 + 68 | 0; //@line 22607
      HEAP32[$627 >> 2] = $28; //@line 22608
      $628 = $ReallocAsyncCtx8 + 72 | 0; //@line 22609
      HEAP32[$628 >> 2] = $30; //@line 22610
      $629 = $ReallocAsyncCtx8 + 76 | 0; //@line 22611
      HEAP32[$629 >> 2] = $32; //@line 22612
      $630 = $ReallocAsyncCtx8 + 80 | 0; //@line 22613
      HEAP32[$630 >> 2] = $$0208$i; //@line 22614
      $631 = $ReallocAsyncCtx8 + 84 | 0; //@line 22615
      HEAP32[$631 >> 2] = $34; //@line 22616
      $632 = $ReallocAsyncCtx8 + 88 | 0; //@line 22617
      HEAP32[$632 >> 2] = $36; //@line 22618
      $633 = $ReallocAsyncCtx8 + 92 | 0; //@line 22619
      HEAP32[$633 >> 2] = $38; //@line 22620
      $634 = $ReallocAsyncCtx8 + 96 | 0; //@line 22621
      HEAP32[$634 >> 2] = $40; //@line 22622
      $635 = $ReallocAsyncCtx8 + 100 | 0; //@line 22623
      HEAP32[$635 >> 2] = $42; //@line 22624
      $636 = $ReallocAsyncCtx8 + 104 | 0; //@line 22625
      HEAP32[$636 >> 2] = $44; //@line 22626
      $637 = $ReallocAsyncCtx8 + 108 | 0; //@line 22627
      HEAP32[$637 >> 2] = $48; //@line 22628
      $638 = $ReallocAsyncCtx8 + 112 | 0; //@line 22629
      HEAP32[$638 >> 2] = $50; //@line 22630
      $639 = $ReallocAsyncCtx8 + 116 | 0; //@line 22631
      HEAP32[$639 >> 2] = $52; //@line 22632
      $640 = $ReallocAsyncCtx8 + 120 | 0; //@line 22633
      HEAP32[$640 >> 2] = $58; //@line 22634
      $641 = $ReallocAsyncCtx8 + 124 | 0; //@line 22635
      HEAP32[$641 >> 2] = $60; //@line 22636
      $642 = $ReallocAsyncCtx8 + 128 | 0; //@line 22637
      HEAP32[$642 >> 2] = $62; //@line 22638
      $643 = $ReallocAsyncCtx8 + 132 | 0; //@line 22639
      HEAP32[$643 >> 2] = $64; //@line 22640
      $644 = $ReallocAsyncCtx8 + 136 | 0; //@line 22641
      HEAP32[$644 >> 2] = $66; //@line 22642
      $645 = $ReallocAsyncCtx8 + 140 | 0; //@line 22643
      HEAP32[$645 >> 2] = $68; //@line 22644
      $646 = $ReallocAsyncCtx8 + 144 | 0; //@line 22645
      HEAP32[$646 >> 2] = $70; //@line 22646
      $647 = $ReallocAsyncCtx8 + 148 | 0; //@line 22647
      HEAP32[$647 >> 2] = $72; //@line 22648
      $648 = $ReallocAsyncCtx8 + 152 | 0; //@line 22649
      HEAP32[$648 >> 2] = $74; //@line 22650
      $649 = $ReallocAsyncCtx8 + 156 | 0; //@line 22651
      HEAP32[$649 >> 2] = $76; //@line 22652
      $650 = $ReallocAsyncCtx8 + 160 | 0; //@line 22653
      HEAP32[$650 >> 2] = $78; //@line 22654
      $651 = $ReallocAsyncCtx8 + 164 | 0; //@line 22655
      HEAP32[$651 >> 2] = $80; //@line 22656
      $652 = $ReallocAsyncCtx8 + 168 | 0; //@line 22657
      HEAP32[$652 >> 2] = $140; //@line 22658
      $653 = $ReallocAsyncCtx8 + 172 | 0; //@line 22659
      HEAP32[$653 >> 2] = $82; //@line 22660
      $654 = $ReallocAsyncCtx8 + 176 | 0; //@line 22661
      HEAP32[$654 >> 2] = $141; //@line 22662
      $655 = $ReallocAsyncCtx8 + 180 | 0; //@line 22663
      HEAP32[$655 >> 2] = $84; //@line 22664
      $656 = $ReallocAsyncCtx8 + 184 | 0; //@line 22665
      HEAP32[$656 >> 2] = $86; //@line 22666
      $657 = $ReallocAsyncCtx8 + 188 | 0; //@line 22667
      HEAP32[$657 >> 2] = $88; //@line 22668
      $658 = $ReallocAsyncCtx8 + 192 | 0; //@line 22669
      HEAP32[$658 >> 2] = $92; //@line 22670
      $659 = $ReallocAsyncCtx8 + 196 | 0; //@line 22671
      HEAP32[$659 >> 2] = $94; //@line 22672
      $660 = $ReallocAsyncCtx8 + 200 | 0; //@line 22673
      HEAP32[$660 >> 2] = $96; //@line 22674
      $661 = $ReallocAsyncCtx8 + 204 | 0; //@line 22675
      HEAP32[$661 >> 2] = $98; //@line 22676
      $662 = $ReallocAsyncCtx8 + 208 | 0; //@line 22677
      HEAP32[$662 >> 2] = $137; //@line 22678
      $663 = $ReallocAsyncCtx8 + 212 | 0; //@line 22679
      HEAP32[$663 >> 2] = $100; //@line 22680
      $664 = $ReallocAsyncCtx8 + 216 | 0; //@line 22681
      HEAP32[$664 >> 2] = $104; //@line 22682
      $665 = $ReallocAsyncCtx8 + 220 | 0; //@line 22683
      HEAP32[$665 >> 2] = $106; //@line 22684
      $666 = $ReallocAsyncCtx8 + 224 | 0; //@line 22685
      HEAP32[$666 >> 2] = $108; //@line 22686
      $667 = $ReallocAsyncCtx8 + 228 | 0; //@line 22687
      HEAP32[$667 >> 2] = $112; //@line 22688
      $668 = $ReallocAsyncCtx8 + 232 | 0; //@line 22689
      HEAP32[$668 >> 2] = $114; //@line 22690
      $669 = $ReallocAsyncCtx8 + 236 | 0; //@line 22691
      HEAP32[$669 >> 2] = $116; //@line 22692
      $670 = $ReallocAsyncCtx8 + 240 | 0; //@line 22693
      HEAP32[$670 >> 2] = $118; //@line 22694
      $671 = $ReallocAsyncCtx8 + 244 | 0; //@line 22695
      HEAP32[$671 >> 2] = $120; //@line 22696
      $672 = $ReallocAsyncCtx8 + 248 | 0; //@line 22697
      HEAP32[$672 >> 2] = $122; //@line 22698
      $673 = $ReallocAsyncCtx8 + 252 | 0; //@line 22699
      HEAP32[$673 >> 2] = $139; //@line 22700
      $674 = $ReallocAsyncCtx8 + 256 | 0; //@line 22701
      HEAP32[$674 >> 2] = $124; //@line 22702
      $675 = $ReallocAsyncCtx8 + 260 | 0; //@line 22703
      HEAP32[$675 >> 2] = $139; //@line 22704
      $676 = $ReallocAsyncCtx8 + 264 | 0; //@line 22705
      HEAP32[$676 >> 2] = $126; //@line 22706
      sp = STACKTOP; //@line 22707
      return;
     }
     HEAP8[___async_retval >> 0] = $610; //@line 22711
     ___async_unwind = 0; //@line 22712
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 22713
     $611 = $ReallocAsyncCtx8 + 4 | 0; //@line 22714
     HEAP32[$611 >> 2] = $2; //@line 22715
     $612 = $ReallocAsyncCtx8 + 8 | 0; //@line 22716
     HEAP32[$612 >> 2] = $80; //@line 22717
     $613 = $ReallocAsyncCtx8 + 12 | 0; //@line 22718
     HEAP32[$613 >> 2] = $4; //@line 22719
     $614 = $ReallocAsyncCtx8 + 16 | 0; //@line 22720
     HEAP32[$614 >> 2] = $6; //@line 22721
     $615 = $ReallocAsyncCtx8 + 20 | 0; //@line 22722
     HEAP32[$615 >> 2] = $135; //@line 22723
     $616 = $ReallocAsyncCtx8 + 24 | 0; //@line 22724
     HEAP32[$616 >> 2] = $8; //@line 22725
     $617 = $ReallocAsyncCtx8 + 28 | 0; //@line 22726
     HEAP32[$617 >> 2] = $10; //@line 22727
     $618 = $ReallocAsyncCtx8 + 32 | 0; //@line 22728
     HEAP32[$618 >> 2] = $12; //@line 22729
     $619 = $ReallocAsyncCtx8 + 36 | 0; //@line 22730
     HEAP32[$619 >> 2] = $136; //@line 22731
     $620 = $ReallocAsyncCtx8 + 40 | 0; //@line 22732
     HEAP32[$620 >> 2] = $14; //@line 22733
     $621 = $ReallocAsyncCtx8 + 44 | 0; //@line 22734
     HEAP32[$621 >> 2] = $16; //@line 22735
     $622 = $ReallocAsyncCtx8 + 48 | 0; //@line 22736
     HEAP32[$622 >> 2] = $18; //@line 22737
     $623 = $ReallocAsyncCtx8 + 52 | 0; //@line 22738
     HEAP32[$623 >> 2] = $20; //@line 22739
     $624 = $ReallocAsyncCtx8 + 56 | 0; //@line 22740
     HEAP32[$624 >> 2] = $22; //@line 22741
     $625 = $ReallocAsyncCtx8 + 60 | 0; //@line 22742
     HEAP32[$625 >> 2] = $24; //@line 22743
     $626 = $ReallocAsyncCtx8 + 64 | 0; //@line 22744
     HEAP32[$626 >> 2] = $26; //@line 22745
     $627 = $ReallocAsyncCtx8 + 68 | 0; //@line 22746
     HEAP32[$627 >> 2] = $28; //@line 22747
     $628 = $ReallocAsyncCtx8 + 72 | 0; //@line 22748
     HEAP32[$628 >> 2] = $30; //@line 22749
     $629 = $ReallocAsyncCtx8 + 76 | 0; //@line 22750
     HEAP32[$629 >> 2] = $32; //@line 22751
     $630 = $ReallocAsyncCtx8 + 80 | 0; //@line 22752
     HEAP32[$630 >> 2] = $$0208$i; //@line 22753
     $631 = $ReallocAsyncCtx8 + 84 | 0; //@line 22754
     HEAP32[$631 >> 2] = $34; //@line 22755
     $632 = $ReallocAsyncCtx8 + 88 | 0; //@line 22756
     HEAP32[$632 >> 2] = $36; //@line 22757
     $633 = $ReallocAsyncCtx8 + 92 | 0; //@line 22758
     HEAP32[$633 >> 2] = $38; //@line 22759
     $634 = $ReallocAsyncCtx8 + 96 | 0; //@line 22760
     HEAP32[$634 >> 2] = $40; //@line 22761
     $635 = $ReallocAsyncCtx8 + 100 | 0; //@line 22762
     HEAP32[$635 >> 2] = $42; //@line 22763
     $636 = $ReallocAsyncCtx8 + 104 | 0; //@line 22764
     HEAP32[$636 >> 2] = $44; //@line 22765
     $637 = $ReallocAsyncCtx8 + 108 | 0; //@line 22766
     HEAP32[$637 >> 2] = $48; //@line 22767
     $638 = $ReallocAsyncCtx8 + 112 | 0; //@line 22768
     HEAP32[$638 >> 2] = $50; //@line 22769
     $639 = $ReallocAsyncCtx8 + 116 | 0; //@line 22770
     HEAP32[$639 >> 2] = $52; //@line 22771
     $640 = $ReallocAsyncCtx8 + 120 | 0; //@line 22772
     HEAP32[$640 >> 2] = $58; //@line 22773
     $641 = $ReallocAsyncCtx8 + 124 | 0; //@line 22774
     HEAP32[$641 >> 2] = $60; //@line 22775
     $642 = $ReallocAsyncCtx8 + 128 | 0; //@line 22776
     HEAP32[$642 >> 2] = $62; //@line 22777
     $643 = $ReallocAsyncCtx8 + 132 | 0; //@line 22778
     HEAP32[$643 >> 2] = $64; //@line 22779
     $644 = $ReallocAsyncCtx8 + 136 | 0; //@line 22780
     HEAP32[$644 >> 2] = $66; //@line 22781
     $645 = $ReallocAsyncCtx8 + 140 | 0; //@line 22782
     HEAP32[$645 >> 2] = $68; //@line 22783
     $646 = $ReallocAsyncCtx8 + 144 | 0; //@line 22784
     HEAP32[$646 >> 2] = $70; //@line 22785
     $647 = $ReallocAsyncCtx8 + 148 | 0; //@line 22786
     HEAP32[$647 >> 2] = $72; //@line 22787
     $648 = $ReallocAsyncCtx8 + 152 | 0; //@line 22788
     HEAP32[$648 >> 2] = $74; //@line 22789
     $649 = $ReallocAsyncCtx8 + 156 | 0; //@line 22790
     HEAP32[$649 >> 2] = $76; //@line 22791
     $650 = $ReallocAsyncCtx8 + 160 | 0; //@line 22792
     HEAP32[$650 >> 2] = $78; //@line 22793
     $651 = $ReallocAsyncCtx8 + 164 | 0; //@line 22794
     HEAP32[$651 >> 2] = $80; //@line 22795
     $652 = $ReallocAsyncCtx8 + 168 | 0; //@line 22796
     HEAP32[$652 >> 2] = $140; //@line 22797
     $653 = $ReallocAsyncCtx8 + 172 | 0; //@line 22798
     HEAP32[$653 >> 2] = $82; //@line 22799
     $654 = $ReallocAsyncCtx8 + 176 | 0; //@line 22800
     HEAP32[$654 >> 2] = $141; //@line 22801
     $655 = $ReallocAsyncCtx8 + 180 | 0; //@line 22802
     HEAP32[$655 >> 2] = $84; //@line 22803
     $656 = $ReallocAsyncCtx8 + 184 | 0; //@line 22804
     HEAP32[$656 >> 2] = $86; //@line 22805
     $657 = $ReallocAsyncCtx8 + 188 | 0; //@line 22806
     HEAP32[$657 >> 2] = $88; //@line 22807
     $658 = $ReallocAsyncCtx8 + 192 | 0; //@line 22808
     HEAP32[$658 >> 2] = $92; //@line 22809
     $659 = $ReallocAsyncCtx8 + 196 | 0; //@line 22810
     HEAP32[$659 >> 2] = $94; //@line 22811
     $660 = $ReallocAsyncCtx8 + 200 | 0; //@line 22812
     HEAP32[$660 >> 2] = $96; //@line 22813
     $661 = $ReallocAsyncCtx8 + 204 | 0; //@line 22814
     HEAP32[$661 >> 2] = $98; //@line 22815
     $662 = $ReallocAsyncCtx8 + 208 | 0; //@line 22816
     HEAP32[$662 >> 2] = $137; //@line 22817
     $663 = $ReallocAsyncCtx8 + 212 | 0; //@line 22818
     HEAP32[$663 >> 2] = $100; //@line 22819
     $664 = $ReallocAsyncCtx8 + 216 | 0; //@line 22820
     HEAP32[$664 >> 2] = $104; //@line 22821
     $665 = $ReallocAsyncCtx8 + 220 | 0; //@line 22822
     HEAP32[$665 >> 2] = $106; //@line 22823
     $666 = $ReallocAsyncCtx8 + 224 | 0; //@line 22824
     HEAP32[$666 >> 2] = $108; //@line 22825
     $667 = $ReallocAsyncCtx8 + 228 | 0; //@line 22826
     HEAP32[$667 >> 2] = $112; //@line 22827
     $668 = $ReallocAsyncCtx8 + 232 | 0; //@line 22828
     HEAP32[$668 >> 2] = $114; //@line 22829
     $669 = $ReallocAsyncCtx8 + 236 | 0; //@line 22830
     HEAP32[$669 >> 2] = $116; //@line 22831
     $670 = $ReallocAsyncCtx8 + 240 | 0; //@line 22832
     HEAP32[$670 >> 2] = $118; //@line 22833
     $671 = $ReallocAsyncCtx8 + 244 | 0; //@line 22834
     HEAP32[$671 >> 2] = $120; //@line 22835
     $672 = $ReallocAsyncCtx8 + 248 | 0; //@line 22836
     HEAP32[$672 >> 2] = $122; //@line 22837
     $673 = $ReallocAsyncCtx8 + 252 | 0; //@line 22838
     HEAP32[$673 >> 2] = $139; //@line 22839
     $674 = $ReallocAsyncCtx8 + 256 | 0; //@line 22840
     HEAP32[$674 >> 2] = $124; //@line 22841
     $675 = $ReallocAsyncCtx8 + 260 | 0; //@line 22842
     HEAP32[$675 >> 2] = $139; //@line 22843
     $676 = $ReallocAsyncCtx8 + 264 | 0; //@line 22844
     HEAP32[$676 >> 2] = $126; //@line 22845
     sp = STACKTOP; //@line 22846
     return;
    }
   case 64:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 22851
     $678 = _sn_coap_parser_options_parse_multiple_options($50, $80, $182, $140, $141, 11, $$1202$i) | 0; //@line 22852
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 22855
      $679 = $ReallocAsyncCtx7 + 4 | 0; //@line 22856
      HEAP32[$679 >> 2] = $2; //@line 22857
      $680 = $ReallocAsyncCtx7 + 8 | 0; //@line 22858
      HEAP32[$680 >> 2] = $80; //@line 22859
      $681 = $ReallocAsyncCtx7 + 12 | 0; //@line 22860
      HEAP32[$681 >> 2] = $4; //@line 22861
      $682 = $ReallocAsyncCtx7 + 16 | 0; //@line 22862
      HEAP32[$682 >> 2] = $6; //@line 22863
      $683 = $ReallocAsyncCtx7 + 20 | 0; //@line 22864
      HEAP32[$683 >> 2] = $135; //@line 22865
      $684 = $ReallocAsyncCtx7 + 24 | 0; //@line 22866
      HEAP32[$684 >> 2] = $8; //@line 22867
      $685 = $ReallocAsyncCtx7 + 28 | 0; //@line 22868
      HEAP32[$685 >> 2] = $10; //@line 22869
      $686 = $ReallocAsyncCtx7 + 32 | 0; //@line 22870
      HEAP32[$686 >> 2] = $12; //@line 22871
      $687 = $ReallocAsyncCtx7 + 36 | 0; //@line 22872
      HEAP32[$687 >> 2] = $136; //@line 22873
      $688 = $ReallocAsyncCtx7 + 40 | 0; //@line 22874
      HEAP32[$688 >> 2] = $14; //@line 22875
      $689 = $ReallocAsyncCtx7 + 44 | 0; //@line 22876
      HEAP32[$689 >> 2] = $16; //@line 22877
      $690 = $ReallocAsyncCtx7 + 48 | 0; //@line 22878
      HEAP32[$690 >> 2] = $18; //@line 22879
      $691 = $ReallocAsyncCtx7 + 52 | 0; //@line 22880
      HEAP32[$691 >> 2] = $20; //@line 22881
      $692 = $ReallocAsyncCtx7 + 56 | 0; //@line 22882
      HEAP32[$692 >> 2] = $22; //@line 22883
      $693 = $ReallocAsyncCtx7 + 60 | 0; //@line 22884
      HEAP32[$693 >> 2] = $24; //@line 22885
      $694 = $ReallocAsyncCtx7 + 64 | 0; //@line 22886
      HEAP32[$694 >> 2] = $26; //@line 22887
      $695 = $ReallocAsyncCtx7 + 68 | 0; //@line 22888
      HEAP32[$695 >> 2] = $28; //@line 22889
      $696 = $ReallocAsyncCtx7 + 72 | 0; //@line 22890
      HEAP32[$696 >> 2] = $30; //@line 22891
      $697 = $ReallocAsyncCtx7 + 76 | 0; //@line 22892
      HEAP32[$697 >> 2] = $32; //@line 22893
      $698 = $ReallocAsyncCtx7 + 80 | 0; //@line 22894
      HEAP32[$698 >> 2] = $$0208$i; //@line 22895
      $699 = $ReallocAsyncCtx7 + 84 | 0; //@line 22896
      HEAP32[$699 >> 2] = $34; //@line 22897
      $700 = $ReallocAsyncCtx7 + 88 | 0; //@line 22898
      HEAP32[$700 >> 2] = $36; //@line 22899
      $701 = $ReallocAsyncCtx7 + 92 | 0; //@line 22900
      HEAP32[$701 >> 2] = $38; //@line 22901
      $702 = $ReallocAsyncCtx7 + 96 | 0; //@line 22902
      HEAP32[$702 >> 2] = $40; //@line 22903
      $703 = $ReallocAsyncCtx7 + 100 | 0; //@line 22904
      HEAP32[$703 >> 2] = $42; //@line 22905
      $704 = $ReallocAsyncCtx7 + 104 | 0; //@line 22906
      HEAP32[$704 >> 2] = $44; //@line 22907
      $705 = $ReallocAsyncCtx7 + 108 | 0; //@line 22908
      HEAP32[$705 >> 2] = $48; //@line 22909
      $706 = $ReallocAsyncCtx7 + 112 | 0; //@line 22910
      HEAP32[$706 >> 2] = $50; //@line 22911
      $707 = $ReallocAsyncCtx7 + 116 | 0; //@line 22912
      HEAP32[$707 >> 2] = $52; //@line 22913
      $708 = $ReallocAsyncCtx7 + 120 | 0; //@line 22914
      HEAP32[$708 >> 2] = $58; //@line 22915
      $709 = $ReallocAsyncCtx7 + 124 | 0; //@line 22916
      HEAP32[$709 >> 2] = $60; //@line 22917
      $710 = $ReallocAsyncCtx7 + 128 | 0; //@line 22918
      HEAP32[$710 >> 2] = $62; //@line 22919
      $711 = $ReallocAsyncCtx7 + 132 | 0; //@line 22920
      HEAP32[$711 >> 2] = $64; //@line 22921
      $712 = $ReallocAsyncCtx7 + 136 | 0; //@line 22922
      HEAP32[$712 >> 2] = $66; //@line 22923
      $713 = $ReallocAsyncCtx7 + 140 | 0; //@line 22924
      HEAP32[$713 >> 2] = $68; //@line 22925
      $714 = $ReallocAsyncCtx7 + 144 | 0; //@line 22926
      HEAP32[$714 >> 2] = $70; //@line 22927
      $715 = $ReallocAsyncCtx7 + 148 | 0; //@line 22928
      HEAP32[$715 >> 2] = $72; //@line 22929
      $716 = $ReallocAsyncCtx7 + 152 | 0; //@line 22930
      HEAP32[$716 >> 2] = $74; //@line 22931
      $717 = $ReallocAsyncCtx7 + 156 | 0; //@line 22932
      HEAP32[$717 >> 2] = $76; //@line 22933
      $718 = $ReallocAsyncCtx7 + 160 | 0; //@line 22934
      HEAP32[$718 >> 2] = $78; //@line 22935
      $719 = $ReallocAsyncCtx7 + 164 | 0; //@line 22936
      HEAP32[$719 >> 2] = $80; //@line 22937
      $720 = $ReallocAsyncCtx7 + 168 | 0; //@line 22938
      HEAP32[$720 >> 2] = $140; //@line 22939
      $721 = $ReallocAsyncCtx7 + 172 | 0; //@line 22940
      HEAP32[$721 >> 2] = $82; //@line 22941
      $722 = $ReallocAsyncCtx7 + 176 | 0; //@line 22942
      HEAP32[$722 >> 2] = $141; //@line 22943
      $723 = $ReallocAsyncCtx7 + 180 | 0; //@line 22944
      HEAP32[$723 >> 2] = $84; //@line 22945
      $724 = $ReallocAsyncCtx7 + 184 | 0; //@line 22946
      HEAP32[$724 >> 2] = $86; //@line 22947
      $725 = $ReallocAsyncCtx7 + 188 | 0; //@line 22948
      HEAP32[$725 >> 2] = $88; //@line 22949
      $726 = $ReallocAsyncCtx7 + 192 | 0; //@line 22950
      HEAP32[$726 >> 2] = $92; //@line 22951
      $727 = $ReallocAsyncCtx7 + 196 | 0; //@line 22952
      HEAP32[$727 >> 2] = $94; //@line 22953
      $728 = $ReallocAsyncCtx7 + 200 | 0; //@line 22954
      HEAP32[$728 >> 2] = $96; //@line 22955
      $729 = $ReallocAsyncCtx7 + 204 | 0; //@line 22956
      HEAP32[$729 >> 2] = $98; //@line 22957
      $730 = $ReallocAsyncCtx7 + 208 | 0; //@line 22958
      HEAP32[$730 >> 2] = $137; //@line 22959
      $731 = $ReallocAsyncCtx7 + 212 | 0; //@line 22960
      HEAP32[$731 >> 2] = $100; //@line 22961
      $732 = $ReallocAsyncCtx7 + 216 | 0; //@line 22962
      HEAP32[$732 >> 2] = $104; //@line 22963
      $733 = $ReallocAsyncCtx7 + 220 | 0; //@line 22964
      HEAP32[$733 >> 2] = $106; //@line 22965
      $734 = $ReallocAsyncCtx7 + 224 | 0; //@line 22966
      HEAP32[$734 >> 2] = $108; //@line 22967
      $735 = $ReallocAsyncCtx7 + 228 | 0; //@line 22968
      HEAP32[$735 >> 2] = $112; //@line 22969
      $736 = $ReallocAsyncCtx7 + 232 | 0; //@line 22970
      HEAP32[$736 >> 2] = $114; //@line 22971
      $737 = $ReallocAsyncCtx7 + 236 | 0; //@line 22972
      HEAP32[$737 >> 2] = $116; //@line 22973
      $738 = $ReallocAsyncCtx7 + 240 | 0; //@line 22974
      HEAP32[$738 >> 2] = $118; //@line 22975
      $739 = $ReallocAsyncCtx7 + 244 | 0; //@line 22976
      HEAP32[$739 >> 2] = $120; //@line 22977
      $740 = $ReallocAsyncCtx7 + 248 | 0; //@line 22978
      HEAP32[$740 >> 2] = $122; //@line 22979
      $741 = $ReallocAsyncCtx7 + 252 | 0; //@line 22980
      HEAP32[$741 >> 2] = $139; //@line 22981
      $742 = $ReallocAsyncCtx7 + 256 | 0; //@line 22982
      HEAP32[$742 >> 2] = $124; //@line 22983
      $743 = $ReallocAsyncCtx7 + 260 | 0; //@line 22984
      HEAP32[$743 >> 2] = $139; //@line 22985
      $744 = $ReallocAsyncCtx7 + 264 | 0; //@line 22986
      HEAP32[$744 >> 2] = $126; //@line 22987
      sp = STACKTOP; //@line 22988
      return;
     }
     HEAP8[___async_retval >> 0] = $678; //@line 22992
     ___async_unwind = 0; //@line 22993
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 22994
     $679 = $ReallocAsyncCtx7 + 4 | 0; //@line 22995
     HEAP32[$679 >> 2] = $2; //@line 22996
     $680 = $ReallocAsyncCtx7 + 8 | 0; //@line 22997
     HEAP32[$680 >> 2] = $80; //@line 22998
     $681 = $ReallocAsyncCtx7 + 12 | 0; //@line 22999
     HEAP32[$681 >> 2] = $4; //@line 23000
     $682 = $ReallocAsyncCtx7 + 16 | 0; //@line 23001
     HEAP32[$682 >> 2] = $6; //@line 23002
     $683 = $ReallocAsyncCtx7 + 20 | 0; //@line 23003
     HEAP32[$683 >> 2] = $135; //@line 23004
     $684 = $ReallocAsyncCtx7 + 24 | 0; //@line 23005
     HEAP32[$684 >> 2] = $8; //@line 23006
     $685 = $ReallocAsyncCtx7 + 28 | 0; //@line 23007
     HEAP32[$685 >> 2] = $10; //@line 23008
     $686 = $ReallocAsyncCtx7 + 32 | 0; //@line 23009
     HEAP32[$686 >> 2] = $12; //@line 23010
     $687 = $ReallocAsyncCtx7 + 36 | 0; //@line 23011
     HEAP32[$687 >> 2] = $136; //@line 23012
     $688 = $ReallocAsyncCtx7 + 40 | 0; //@line 23013
     HEAP32[$688 >> 2] = $14; //@line 23014
     $689 = $ReallocAsyncCtx7 + 44 | 0; //@line 23015
     HEAP32[$689 >> 2] = $16; //@line 23016
     $690 = $ReallocAsyncCtx7 + 48 | 0; //@line 23017
     HEAP32[$690 >> 2] = $18; //@line 23018
     $691 = $ReallocAsyncCtx7 + 52 | 0; //@line 23019
     HEAP32[$691 >> 2] = $20; //@line 23020
     $692 = $ReallocAsyncCtx7 + 56 | 0; //@line 23021
     HEAP32[$692 >> 2] = $22; //@line 23022
     $693 = $ReallocAsyncCtx7 + 60 | 0; //@line 23023
     HEAP32[$693 >> 2] = $24; //@line 23024
     $694 = $ReallocAsyncCtx7 + 64 | 0; //@line 23025
     HEAP32[$694 >> 2] = $26; //@line 23026
     $695 = $ReallocAsyncCtx7 + 68 | 0; //@line 23027
     HEAP32[$695 >> 2] = $28; //@line 23028
     $696 = $ReallocAsyncCtx7 + 72 | 0; //@line 23029
     HEAP32[$696 >> 2] = $30; //@line 23030
     $697 = $ReallocAsyncCtx7 + 76 | 0; //@line 23031
     HEAP32[$697 >> 2] = $32; //@line 23032
     $698 = $ReallocAsyncCtx7 + 80 | 0; //@line 23033
     HEAP32[$698 >> 2] = $$0208$i; //@line 23034
     $699 = $ReallocAsyncCtx7 + 84 | 0; //@line 23035
     HEAP32[$699 >> 2] = $34; //@line 23036
     $700 = $ReallocAsyncCtx7 + 88 | 0; //@line 23037
     HEAP32[$700 >> 2] = $36; //@line 23038
     $701 = $ReallocAsyncCtx7 + 92 | 0; //@line 23039
     HEAP32[$701 >> 2] = $38; //@line 23040
     $702 = $ReallocAsyncCtx7 + 96 | 0; //@line 23041
     HEAP32[$702 >> 2] = $40; //@line 23042
     $703 = $ReallocAsyncCtx7 + 100 | 0; //@line 23043
     HEAP32[$703 >> 2] = $42; //@line 23044
     $704 = $ReallocAsyncCtx7 + 104 | 0; //@line 23045
     HEAP32[$704 >> 2] = $44; //@line 23046
     $705 = $ReallocAsyncCtx7 + 108 | 0; //@line 23047
     HEAP32[$705 >> 2] = $48; //@line 23048
     $706 = $ReallocAsyncCtx7 + 112 | 0; //@line 23049
     HEAP32[$706 >> 2] = $50; //@line 23050
     $707 = $ReallocAsyncCtx7 + 116 | 0; //@line 23051
     HEAP32[$707 >> 2] = $52; //@line 23052
     $708 = $ReallocAsyncCtx7 + 120 | 0; //@line 23053
     HEAP32[$708 >> 2] = $58; //@line 23054
     $709 = $ReallocAsyncCtx7 + 124 | 0; //@line 23055
     HEAP32[$709 >> 2] = $60; //@line 23056
     $710 = $ReallocAsyncCtx7 + 128 | 0; //@line 23057
     HEAP32[$710 >> 2] = $62; //@line 23058
     $711 = $ReallocAsyncCtx7 + 132 | 0; //@line 23059
     HEAP32[$711 >> 2] = $64; //@line 23060
     $712 = $ReallocAsyncCtx7 + 136 | 0; //@line 23061
     HEAP32[$712 >> 2] = $66; //@line 23062
     $713 = $ReallocAsyncCtx7 + 140 | 0; //@line 23063
     HEAP32[$713 >> 2] = $68; //@line 23064
     $714 = $ReallocAsyncCtx7 + 144 | 0; //@line 23065
     HEAP32[$714 >> 2] = $70; //@line 23066
     $715 = $ReallocAsyncCtx7 + 148 | 0; //@line 23067
     HEAP32[$715 >> 2] = $72; //@line 23068
     $716 = $ReallocAsyncCtx7 + 152 | 0; //@line 23069
     HEAP32[$716 >> 2] = $74; //@line 23070
     $717 = $ReallocAsyncCtx7 + 156 | 0; //@line 23071
     HEAP32[$717 >> 2] = $76; //@line 23072
     $718 = $ReallocAsyncCtx7 + 160 | 0; //@line 23073
     HEAP32[$718 >> 2] = $78; //@line 23074
     $719 = $ReallocAsyncCtx7 + 164 | 0; //@line 23075
     HEAP32[$719 >> 2] = $80; //@line 23076
     $720 = $ReallocAsyncCtx7 + 168 | 0; //@line 23077
     HEAP32[$720 >> 2] = $140; //@line 23078
     $721 = $ReallocAsyncCtx7 + 172 | 0; //@line 23079
     HEAP32[$721 >> 2] = $82; //@line 23080
     $722 = $ReallocAsyncCtx7 + 176 | 0; //@line 23081
     HEAP32[$722 >> 2] = $141; //@line 23082
     $723 = $ReallocAsyncCtx7 + 180 | 0; //@line 23083
     HEAP32[$723 >> 2] = $84; //@line 23084
     $724 = $ReallocAsyncCtx7 + 184 | 0; //@line 23085
     HEAP32[$724 >> 2] = $86; //@line 23086
     $725 = $ReallocAsyncCtx7 + 188 | 0; //@line 23087
     HEAP32[$725 >> 2] = $88; //@line 23088
     $726 = $ReallocAsyncCtx7 + 192 | 0; //@line 23089
     HEAP32[$726 >> 2] = $92; //@line 23090
     $727 = $ReallocAsyncCtx7 + 196 | 0; //@line 23091
     HEAP32[$727 >> 2] = $94; //@line 23092
     $728 = $ReallocAsyncCtx7 + 200 | 0; //@line 23093
     HEAP32[$728 >> 2] = $96; //@line 23094
     $729 = $ReallocAsyncCtx7 + 204 | 0; //@line 23095
     HEAP32[$729 >> 2] = $98; //@line 23096
     $730 = $ReallocAsyncCtx7 + 208 | 0; //@line 23097
     HEAP32[$730 >> 2] = $137; //@line 23098
     $731 = $ReallocAsyncCtx7 + 212 | 0; //@line 23099
     HEAP32[$731 >> 2] = $100; //@line 23100
     $732 = $ReallocAsyncCtx7 + 216 | 0; //@line 23101
     HEAP32[$732 >> 2] = $104; //@line 23102
     $733 = $ReallocAsyncCtx7 + 220 | 0; //@line 23103
     HEAP32[$733 >> 2] = $106; //@line 23104
     $734 = $ReallocAsyncCtx7 + 224 | 0; //@line 23105
     HEAP32[$734 >> 2] = $108; //@line 23106
     $735 = $ReallocAsyncCtx7 + 228 | 0; //@line 23107
     HEAP32[$735 >> 2] = $112; //@line 23108
     $736 = $ReallocAsyncCtx7 + 232 | 0; //@line 23109
     HEAP32[$736 >> 2] = $114; //@line 23110
     $737 = $ReallocAsyncCtx7 + 236 | 0; //@line 23111
     HEAP32[$737 >> 2] = $116; //@line 23112
     $738 = $ReallocAsyncCtx7 + 240 | 0; //@line 23113
     HEAP32[$738 >> 2] = $118; //@line 23114
     $739 = $ReallocAsyncCtx7 + 244 | 0; //@line 23115
     HEAP32[$739 >> 2] = $120; //@line 23116
     $740 = $ReallocAsyncCtx7 + 248 | 0; //@line 23117
     HEAP32[$740 >> 2] = $122; //@line 23118
     $741 = $ReallocAsyncCtx7 + 252 | 0; //@line 23119
     HEAP32[$741 >> 2] = $139; //@line 23120
     $742 = $ReallocAsyncCtx7 + 256 | 0; //@line 23121
     HEAP32[$742 >> 2] = $124; //@line 23122
     $743 = $ReallocAsyncCtx7 + 260 | 0; //@line 23123
     HEAP32[$743 >> 2] = $139; //@line 23124
     $744 = $ReallocAsyncCtx7 + 264 | 0; //@line 23125
     HEAP32[$744 >> 2] = $126; //@line 23126
     sp = STACKTOP; //@line 23127
     return;
    }
   case 69:
    {
     _mbed_tracef(2, 3737, 4960, $10); //@line 23132
     break L2;
     break;
    }
   case 73:
    {
     $762 = HEAP32[$139 >> 2] | 0; //@line 23137
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 23140
     $765 = _sn_coap_parser_options_parse_multiple_options($50, $80, $182, $762 + 64 | 0, $762 + 10 | 0, 15, $$1202$i) | 0; //@line 23141
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 23144
      $766 = $ReallocAsyncCtx6 + 4 | 0; //@line 23145
      HEAP32[$766 >> 2] = $2; //@line 23146
      $767 = $ReallocAsyncCtx6 + 8 | 0; //@line 23147
      HEAP32[$767 >> 2] = $80; //@line 23148
      $768 = $ReallocAsyncCtx6 + 12 | 0; //@line 23149
      HEAP32[$768 >> 2] = $4; //@line 23150
      $769 = $ReallocAsyncCtx6 + 16 | 0; //@line 23151
      HEAP32[$769 >> 2] = $6; //@line 23152
      $770 = $ReallocAsyncCtx6 + 20 | 0; //@line 23153
      HEAP32[$770 >> 2] = $135; //@line 23154
      $771 = $ReallocAsyncCtx6 + 24 | 0; //@line 23155
      HEAP32[$771 >> 2] = $8; //@line 23156
      $772 = $ReallocAsyncCtx6 + 28 | 0; //@line 23157
      HEAP32[$772 >> 2] = $10; //@line 23158
      $773 = $ReallocAsyncCtx6 + 32 | 0; //@line 23159
      HEAP32[$773 >> 2] = $12; //@line 23160
      $774 = $ReallocAsyncCtx6 + 36 | 0; //@line 23161
      HEAP32[$774 >> 2] = $136; //@line 23162
      $775 = $ReallocAsyncCtx6 + 40 | 0; //@line 23163
      HEAP32[$775 >> 2] = $14; //@line 23164
      $776 = $ReallocAsyncCtx6 + 44 | 0; //@line 23165
      HEAP32[$776 >> 2] = $16; //@line 23166
      $777 = $ReallocAsyncCtx6 + 48 | 0; //@line 23167
      HEAP32[$777 >> 2] = $18; //@line 23168
      $778 = $ReallocAsyncCtx6 + 52 | 0; //@line 23169
      HEAP32[$778 >> 2] = $20; //@line 23170
      $779 = $ReallocAsyncCtx6 + 56 | 0; //@line 23171
      HEAP32[$779 >> 2] = $22; //@line 23172
      $780 = $ReallocAsyncCtx6 + 60 | 0; //@line 23173
      HEAP32[$780 >> 2] = $24; //@line 23174
      $781 = $ReallocAsyncCtx6 + 64 | 0; //@line 23175
      HEAP32[$781 >> 2] = $26; //@line 23176
      $782 = $ReallocAsyncCtx6 + 68 | 0; //@line 23177
      HEAP32[$782 >> 2] = $28; //@line 23178
      $783 = $ReallocAsyncCtx6 + 72 | 0; //@line 23179
      HEAP32[$783 >> 2] = $30; //@line 23180
      $784 = $ReallocAsyncCtx6 + 76 | 0; //@line 23181
      HEAP32[$784 >> 2] = $32; //@line 23182
      $785 = $ReallocAsyncCtx6 + 80 | 0; //@line 23183
      HEAP32[$785 >> 2] = $$0208$i; //@line 23184
      $786 = $ReallocAsyncCtx6 + 84 | 0; //@line 23185
      HEAP32[$786 >> 2] = $34; //@line 23186
      $787 = $ReallocAsyncCtx6 + 88 | 0; //@line 23187
      HEAP32[$787 >> 2] = $36; //@line 23188
      $788 = $ReallocAsyncCtx6 + 92 | 0; //@line 23189
      HEAP32[$788 >> 2] = $38; //@line 23190
      $789 = $ReallocAsyncCtx6 + 96 | 0; //@line 23191
      HEAP32[$789 >> 2] = $40; //@line 23192
      $790 = $ReallocAsyncCtx6 + 100 | 0; //@line 23193
      HEAP32[$790 >> 2] = $42; //@line 23194
      $791 = $ReallocAsyncCtx6 + 104 | 0; //@line 23195
      HEAP32[$791 >> 2] = $44; //@line 23196
      $792 = $ReallocAsyncCtx6 + 108 | 0; //@line 23197
      HEAP32[$792 >> 2] = $48; //@line 23198
      $793 = $ReallocAsyncCtx6 + 112 | 0; //@line 23199
      HEAP32[$793 >> 2] = $50; //@line 23200
      $794 = $ReallocAsyncCtx6 + 116 | 0; //@line 23201
      HEAP32[$794 >> 2] = $52; //@line 23202
      $795 = $ReallocAsyncCtx6 + 120 | 0; //@line 23203
      HEAP32[$795 >> 2] = $58; //@line 23204
      $796 = $ReallocAsyncCtx6 + 124 | 0; //@line 23205
      HEAP32[$796 >> 2] = $60; //@line 23206
      $797 = $ReallocAsyncCtx6 + 128 | 0; //@line 23207
      HEAP32[$797 >> 2] = $62; //@line 23208
      $798 = $ReallocAsyncCtx6 + 132 | 0; //@line 23209
      HEAP32[$798 >> 2] = $64; //@line 23210
      $799 = $ReallocAsyncCtx6 + 136 | 0; //@line 23211
      HEAP32[$799 >> 2] = $66; //@line 23212
      $800 = $ReallocAsyncCtx6 + 140 | 0; //@line 23213
      HEAP32[$800 >> 2] = $68; //@line 23214
      $801 = $ReallocAsyncCtx6 + 144 | 0; //@line 23215
      HEAP32[$801 >> 2] = $70; //@line 23216
      $802 = $ReallocAsyncCtx6 + 148 | 0; //@line 23217
      HEAP32[$802 >> 2] = $72; //@line 23218
      $803 = $ReallocAsyncCtx6 + 152 | 0; //@line 23219
      HEAP32[$803 >> 2] = $74; //@line 23220
      $804 = $ReallocAsyncCtx6 + 156 | 0; //@line 23221
      HEAP32[$804 >> 2] = $76; //@line 23222
      $805 = $ReallocAsyncCtx6 + 160 | 0; //@line 23223
      HEAP32[$805 >> 2] = $78; //@line 23224
      $806 = $ReallocAsyncCtx6 + 164 | 0; //@line 23225
      HEAP32[$806 >> 2] = $80; //@line 23226
      $807 = $ReallocAsyncCtx6 + 168 | 0; //@line 23227
      HEAP32[$807 >> 2] = $140; //@line 23228
      $808 = $ReallocAsyncCtx6 + 172 | 0; //@line 23229
      HEAP32[$808 >> 2] = $82; //@line 23230
      $809 = $ReallocAsyncCtx6 + 176 | 0; //@line 23231
      HEAP32[$809 >> 2] = $141; //@line 23232
      $810 = $ReallocAsyncCtx6 + 180 | 0; //@line 23233
      HEAP32[$810 >> 2] = $84; //@line 23234
      $811 = $ReallocAsyncCtx6 + 184 | 0; //@line 23235
      HEAP32[$811 >> 2] = $86; //@line 23236
      $812 = $ReallocAsyncCtx6 + 188 | 0; //@line 23237
      HEAP32[$812 >> 2] = $88; //@line 23238
      $813 = $ReallocAsyncCtx6 + 192 | 0; //@line 23239
      HEAP32[$813 >> 2] = $92; //@line 23240
      $814 = $ReallocAsyncCtx6 + 196 | 0; //@line 23241
      HEAP32[$814 >> 2] = $94; //@line 23242
      $815 = $ReallocAsyncCtx6 + 200 | 0; //@line 23243
      HEAP32[$815 >> 2] = $96; //@line 23244
      $816 = $ReallocAsyncCtx6 + 204 | 0; //@line 23245
      HEAP32[$816 >> 2] = $98; //@line 23246
      $817 = $ReallocAsyncCtx6 + 208 | 0; //@line 23247
      HEAP32[$817 >> 2] = $137; //@line 23248
      $818 = $ReallocAsyncCtx6 + 212 | 0; //@line 23249
      HEAP32[$818 >> 2] = $100; //@line 23250
      $819 = $ReallocAsyncCtx6 + 216 | 0; //@line 23251
      HEAP32[$819 >> 2] = $104; //@line 23252
      $820 = $ReallocAsyncCtx6 + 220 | 0; //@line 23253
      HEAP32[$820 >> 2] = $106; //@line 23254
      $821 = $ReallocAsyncCtx6 + 224 | 0; //@line 23255
      HEAP32[$821 >> 2] = $108; //@line 23256
      $822 = $ReallocAsyncCtx6 + 228 | 0; //@line 23257
      HEAP32[$822 >> 2] = $112; //@line 23258
      $823 = $ReallocAsyncCtx6 + 232 | 0; //@line 23259
      HEAP32[$823 >> 2] = $114; //@line 23260
      $824 = $ReallocAsyncCtx6 + 236 | 0; //@line 23261
      HEAP32[$824 >> 2] = $116; //@line 23262
      $825 = $ReallocAsyncCtx6 + 240 | 0; //@line 23263
      HEAP32[$825 >> 2] = $118; //@line 23264
      $826 = $ReallocAsyncCtx6 + 244 | 0; //@line 23265
      HEAP32[$826 >> 2] = $120; //@line 23266
      $827 = $ReallocAsyncCtx6 + 248 | 0; //@line 23267
      HEAP32[$827 >> 2] = $122; //@line 23268
      $828 = $ReallocAsyncCtx6 + 252 | 0; //@line 23269
      HEAP32[$828 >> 2] = $139; //@line 23270
      $829 = $ReallocAsyncCtx6 + 256 | 0; //@line 23271
      HEAP32[$829 >> 2] = $124; //@line 23272
      $830 = $ReallocAsyncCtx6 + 260 | 0; //@line 23273
      HEAP32[$830 >> 2] = $139; //@line 23274
      $831 = $ReallocAsyncCtx6 + 264 | 0; //@line 23275
      HEAP32[$831 >> 2] = $126; //@line 23276
      sp = STACKTOP; //@line 23277
      return;
     }
     HEAP8[___async_retval >> 0] = $765; //@line 23281
     ___async_unwind = 0; //@line 23282
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 23283
     $766 = $ReallocAsyncCtx6 + 4 | 0; //@line 23284
     HEAP32[$766 >> 2] = $2; //@line 23285
     $767 = $ReallocAsyncCtx6 + 8 | 0; //@line 23286
     HEAP32[$767 >> 2] = $80; //@line 23287
     $768 = $ReallocAsyncCtx6 + 12 | 0; //@line 23288
     HEAP32[$768 >> 2] = $4; //@line 23289
     $769 = $ReallocAsyncCtx6 + 16 | 0; //@line 23290
     HEAP32[$769 >> 2] = $6; //@line 23291
     $770 = $ReallocAsyncCtx6 + 20 | 0; //@line 23292
     HEAP32[$770 >> 2] = $135; //@line 23293
     $771 = $ReallocAsyncCtx6 + 24 | 0; //@line 23294
     HEAP32[$771 >> 2] = $8; //@line 23295
     $772 = $ReallocAsyncCtx6 + 28 | 0; //@line 23296
     HEAP32[$772 >> 2] = $10; //@line 23297
     $773 = $ReallocAsyncCtx6 + 32 | 0; //@line 23298
     HEAP32[$773 >> 2] = $12; //@line 23299
     $774 = $ReallocAsyncCtx6 + 36 | 0; //@line 23300
     HEAP32[$774 >> 2] = $136; //@line 23301
     $775 = $ReallocAsyncCtx6 + 40 | 0; //@line 23302
     HEAP32[$775 >> 2] = $14; //@line 23303
     $776 = $ReallocAsyncCtx6 + 44 | 0; //@line 23304
     HEAP32[$776 >> 2] = $16; //@line 23305
     $777 = $ReallocAsyncCtx6 + 48 | 0; //@line 23306
     HEAP32[$777 >> 2] = $18; //@line 23307
     $778 = $ReallocAsyncCtx6 + 52 | 0; //@line 23308
     HEAP32[$778 >> 2] = $20; //@line 23309
     $779 = $ReallocAsyncCtx6 + 56 | 0; //@line 23310
     HEAP32[$779 >> 2] = $22; //@line 23311
     $780 = $ReallocAsyncCtx6 + 60 | 0; //@line 23312
     HEAP32[$780 >> 2] = $24; //@line 23313
     $781 = $ReallocAsyncCtx6 + 64 | 0; //@line 23314
     HEAP32[$781 >> 2] = $26; //@line 23315
     $782 = $ReallocAsyncCtx6 + 68 | 0; //@line 23316
     HEAP32[$782 >> 2] = $28; //@line 23317
     $783 = $ReallocAsyncCtx6 + 72 | 0; //@line 23318
     HEAP32[$783 >> 2] = $30; //@line 23319
     $784 = $ReallocAsyncCtx6 + 76 | 0; //@line 23320
     HEAP32[$784 >> 2] = $32; //@line 23321
     $785 = $ReallocAsyncCtx6 + 80 | 0; //@line 23322
     HEAP32[$785 >> 2] = $$0208$i; //@line 23323
     $786 = $ReallocAsyncCtx6 + 84 | 0; //@line 23324
     HEAP32[$786 >> 2] = $34; //@line 23325
     $787 = $ReallocAsyncCtx6 + 88 | 0; //@line 23326
     HEAP32[$787 >> 2] = $36; //@line 23327
     $788 = $ReallocAsyncCtx6 + 92 | 0; //@line 23328
     HEAP32[$788 >> 2] = $38; //@line 23329
     $789 = $ReallocAsyncCtx6 + 96 | 0; //@line 23330
     HEAP32[$789 >> 2] = $40; //@line 23331
     $790 = $ReallocAsyncCtx6 + 100 | 0; //@line 23332
     HEAP32[$790 >> 2] = $42; //@line 23333
     $791 = $ReallocAsyncCtx6 + 104 | 0; //@line 23334
     HEAP32[$791 >> 2] = $44; //@line 23335
     $792 = $ReallocAsyncCtx6 + 108 | 0; //@line 23336
     HEAP32[$792 >> 2] = $48; //@line 23337
     $793 = $ReallocAsyncCtx6 + 112 | 0; //@line 23338
     HEAP32[$793 >> 2] = $50; //@line 23339
     $794 = $ReallocAsyncCtx6 + 116 | 0; //@line 23340
     HEAP32[$794 >> 2] = $52; //@line 23341
     $795 = $ReallocAsyncCtx6 + 120 | 0; //@line 23342
     HEAP32[$795 >> 2] = $58; //@line 23343
     $796 = $ReallocAsyncCtx6 + 124 | 0; //@line 23344
     HEAP32[$796 >> 2] = $60; //@line 23345
     $797 = $ReallocAsyncCtx6 + 128 | 0; //@line 23346
     HEAP32[$797 >> 2] = $62; //@line 23347
     $798 = $ReallocAsyncCtx6 + 132 | 0; //@line 23348
     HEAP32[$798 >> 2] = $64; //@line 23349
     $799 = $ReallocAsyncCtx6 + 136 | 0; //@line 23350
     HEAP32[$799 >> 2] = $66; //@line 23351
     $800 = $ReallocAsyncCtx6 + 140 | 0; //@line 23352
     HEAP32[$800 >> 2] = $68; //@line 23353
     $801 = $ReallocAsyncCtx6 + 144 | 0; //@line 23354
     HEAP32[$801 >> 2] = $70; //@line 23355
     $802 = $ReallocAsyncCtx6 + 148 | 0; //@line 23356
     HEAP32[$802 >> 2] = $72; //@line 23357
     $803 = $ReallocAsyncCtx6 + 152 | 0; //@line 23358
     HEAP32[$803 >> 2] = $74; //@line 23359
     $804 = $ReallocAsyncCtx6 + 156 | 0; //@line 23360
     HEAP32[$804 >> 2] = $76; //@line 23361
     $805 = $ReallocAsyncCtx6 + 160 | 0; //@line 23362
     HEAP32[$805 >> 2] = $78; //@line 23363
     $806 = $ReallocAsyncCtx6 + 164 | 0; //@line 23364
     HEAP32[$806 >> 2] = $80; //@line 23365
     $807 = $ReallocAsyncCtx6 + 168 | 0; //@line 23366
     HEAP32[$807 >> 2] = $140; //@line 23367
     $808 = $ReallocAsyncCtx6 + 172 | 0; //@line 23368
     HEAP32[$808 >> 2] = $82; //@line 23369
     $809 = $ReallocAsyncCtx6 + 176 | 0; //@line 23370
     HEAP32[$809 >> 2] = $141; //@line 23371
     $810 = $ReallocAsyncCtx6 + 180 | 0; //@line 23372
     HEAP32[$810 >> 2] = $84; //@line 23373
     $811 = $ReallocAsyncCtx6 + 184 | 0; //@line 23374
     HEAP32[$811 >> 2] = $86; //@line 23375
     $812 = $ReallocAsyncCtx6 + 188 | 0; //@line 23376
     HEAP32[$812 >> 2] = $88; //@line 23377
     $813 = $ReallocAsyncCtx6 + 192 | 0; //@line 23378
     HEAP32[$813 >> 2] = $92; //@line 23379
     $814 = $ReallocAsyncCtx6 + 196 | 0; //@line 23380
     HEAP32[$814 >> 2] = $94; //@line 23381
     $815 = $ReallocAsyncCtx6 + 200 | 0; //@line 23382
     HEAP32[$815 >> 2] = $96; //@line 23383
     $816 = $ReallocAsyncCtx6 + 204 | 0; //@line 23384
     HEAP32[$816 >> 2] = $98; //@line 23385
     $817 = $ReallocAsyncCtx6 + 208 | 0; //@line 23386
     HEAP32[$817 >> 2] = $137; //@line 23387
     $818 = $ReallocAsyncCtx6 + 212 | 0; //@line 23388
     HEAP32[$818 >> 2] = $100; //@line 23389
     $819 = $ReallocAsyncCtx6 + 216 | 0; //@line 23390
     HEAP32[$819 >> 2] = $104; //@line 23391
     $820 = $ReallocAsyncCtx6 + 220 | 0; //@line 23392
     HEAP32[$820 >> 2] = $106; //@line 23393
     $821 = $ReallocAsyncCtx6 + 224 | 0; //@line 23394
     HEAP32[$821 >> 2] = $108; //@line 23395
     $822 = $ReallocAsyncCtx6 + 228 | 0; //@line 23396
     HEAP32[$822 >> 2] = $112; //@line 23397
     $823 = $ReallocAsyncCtx6 + 232 | 0; //@line 23398
     HEAP32[$823 >> 2] = $114; //@line 23399
     $824 = $ReallocAsyncCtx6 + 236 | 0; //@line 23400
     HEAP32[$824 >> 2] = $116; //@line 23401
     $825 = $ReallocAsyncCtx6 + 240 | 0; //@line 23402
     HEAP32[$825 >> 2] = $118; //@line 23403
     $826 = $ReallocAsyncCtx6 + 244 | 0; //@line 23404
     HEAP32[$826 >> 2] = $120; //@line 23405
     $827 = $ReallocAsyncCtx6 + 248 | 0; //@line 23406
     HEAP32[$827 >> 2] = $122; //@line 23407
     $828 = $ReallocAsyncCtx6 + 252 | 0; //@line 23408
     HEAP32[$828 >> 2] = $139; //@line 23409
     $829 = $ReallocAsyncCtx6 + 256 | 0; //@line 23410
     HEAP32[$829 >> 2] = $124; //@line 23411
     $830 = $ReallocAsyncCtx6 + 260 | 0; //@line 23412
     HEAP32[$830 >> 2] = $139; //@line 23413
     $831 = $ReallocAsyncCtx6 + 264 | 0; //@line 23414
     HEAP32[$831 >> 2] = $126; //@line 23415
     sp = STACKTOP; //@line 23416
     return;
    }
   case 78:
    {
     _mbed_tracef(2, 3737, 5086, $106); //@line 23421
     break L2;
     break;
    }
   case 84:
    {
     _mbed_tracef(2, 3737, 5147, $60); //@line 23426
     break L2;
     break;
    }
   case 90:
    {
     _mbed_tracef(2, 3737, 5208, $82); //@line 23431
     break L2;
     break;
    }
   case 96:
    {
     _mbed_tracef(2, 3737, 5269, $20); //@line 23436
     break L2;
     break;
    }
   case 102:
    {
     _mbed_tracef(2, 3737, 5329, $40); //@line 23441
     break L2;
     break;
    }
   case 106:
    {
     _mbed_tracef(2, 3737, 5389, $124); //@line 23446
     break L2;
     break;
    }
   case 109:
    {
     if (($144 - $136 | 0) >= ($135 | 0)) {
      $944 = ___async_retval; //@line 23455
      HEAP32[$944 >> 2] = $26; //@line 23456
      return;
     }
     if ((HEAP8[$144 >> 0] | 0) == -1) {
      $934 = $144 + 1 | 0; //@line 23462
      HEAP32[$80 >> 2] = $934; //@line 23463
      $935 = $934; //@line 23464
      $937 = $136 - $935 + $135 | 0; //@line 23466
      HEAP16[$96 + 24 >> 1] = $937; //@line 23469
      if ($937 & 65535 | 0) {
       HEAP32[$96 + 36 >> 2] = $935; //@line 23474
       $944 = ___async_retval; //@line 23475
       HEAP32[$944 >> 2] = $26; //@line 23476
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $30); //@line 23480
     }
     HEAP32[$96 + 4 >> 2] = 1; //@line 23483
     $944 = ___async_retval; //@line 23484
     HEAP32[$944 >> 2] = $26; //@line 23485
     return;
    }
   }
  }
 } while (0);
 HEAP32[$96 + 4 >> 2] = 1; //@line 23493
 $944 = ___async_retval; //@line 23494
 HEAP32[$944 >> 2] = $26; //@line 23495
 return;
}
function _sn_coap_parser__async_cb_85($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $587 = 0, $590 = 0, $591 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $596$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 19415
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19417
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19419
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19423
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19425
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19427
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19429
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19431
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19433
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19435
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19437
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19439
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19441
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19443
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19445
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19447
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19449
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19451
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19453
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19457
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19459
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19461
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19463
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19465
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19467
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19469
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19471
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19473
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19475
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19477
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19479
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19481
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19483
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19485
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 19487
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19489
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19491
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 19493
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 19495
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 19497
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 19499
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 19501
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 19503
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 19505
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 19507
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 19509
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 19511
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 19513
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 19515
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 19517
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 19519
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 19521
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 19523
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 19525
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 19527
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 19529
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 19531
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 19533
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 19535
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 19537
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 19539
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 19541
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 19543
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 19545
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 19547
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 19553
   L3 : while (1) {
    $917 = HEAP32[$4 >> 2] | 0; //@line 19555
    $918 = $917 - $18 | 0; //@line 19556
    $137 = $917; //@line 19559
    if (($918 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 19566
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 19569
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 19572
     break;
    }
    $140 = $trunc277$i & 15; //@line 19576
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 19577
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 19582
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 19590
      $$sink214$i = 13; //@line 19590
      $$sink3$i = 1; //@line 19590
      label = 8; //@line 19591
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 19603
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 19603
      $$sink3$i = 2; //@line 19603
      label = 8; //@line 19604
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 19608
      $159 = $137; //@line 19608
      $937 = $917; //@line 19608
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 19612
     $154 = $137 + $$sink3$i | 0; //@line 19614
     HEAP32[$82 >> 2] = $154; //@line 19615
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 19617
     $159 = $154; //@line 19617
     $937 = $154; //@line 19617
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 19620
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 19624
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 19632
      $$sink216$i = 13; //@line 19632
      $$sink8$i = 1; //@line 19632
      label = 13; //@line 19633
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 19645
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 19645
      $$sink8$i = 2; //@line 19645
      label = 13; //@line 19646
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 19650
      $174 = $937; //@line 19650
      $215 = $159; //@line 19650
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 19654
     $171 = $159 + $$sink8$i | 0; //@line 19656
     HEAP32[$82 >> 2] = $171; //@line 19657
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 19659
     $174 = $171; //@line 19659
     $215 = $171; //@line 19659
    }
    $$1202$i = $$1202$in$i & 65535; //@line 19661
    $175 = $104 - $174 & 65535; //@line 19663
    $trunc$i = $157 & 65535; //@line 19664
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 19668
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 19676
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 19681
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 19686
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 19691
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 19696
         break L3;
         break;
        }
       case 20:
        {
         label = 59; //@line 19701
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 19706
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 19711
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 19722
          break L3;
         }
         $268 = $215 + 1 | 0; //@line 19725
         HEAP32[$82 >> 2] = $268; //@line 19726
         $269 = $$1202$in$i & 255; //@line 19727
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 19730
         } else {
          $$045$i221$i = $269; //@line 19732
          $$06$i220$i = 0; //@line 19732
          $274 = $268; //@line 19732
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 19734
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 19736
           HEAP32[$82 >> 2] = $274; //@line 19737
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 19740
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 19743
            break;
           } else {
            $$06$i220$i = $277; //@line 19746
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 19752
         $$reg2mem$0 = $157; //@line 19753
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 55; //@line 19760
          break L3;
         }
         $587 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 19764
         if ((HEAP32[$587 >> 2] | 0) != -1) {
          label = 55; //@line 19768
          break L3;
         }
         $590 = $215 + 1 | 0; //@line 19771
         HEAP32[$82 >> 2] = $590; //@line 19772
         $591 = $$1202$in$i & 255; //@line 19773
         if (!($591 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 19776
         } else {
          $$045$i263$i = $591; //@line 19778
          $$06$i262$i = 0; //@line 19778
          $596 = $590; //@line 19778
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 19780
           $596$looptemp = $596;
           $596 = $596 + 1 | 0; //@line 19782
           HEAP32[$82 >> 2] = $596; //@line 19783
           $599 = $$06$i262$i << 8 | HEAPU8[$596$looptemp >> 0]; //@line 19786
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $599; //@line 19789
            break;
           } else {
            $$06$i262$i = $599; //@line 19792
           }
          }
         }
         HEAP32[$587 >> 2] = $$0$lcssa$i265$i; //@line 19796
         $$reg2mem$0 = $157; //@line 19797
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 19804
          break L3;
         }
         $742 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 19808
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 19812
          break L3;
         }
         $745 = $215 + 1 | 0; //@line 19815
         HEAP32[$82 >> 2] = $745; //@line 19816
         $746 = $$1202$in$i & 255; //@line 19817
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 19820
         } else {
          $$045$i270$i = $746; //@line 19822
          $$06$i269$i = 0; //@line 19822
          $751 = $745; //@line 19822
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 19824
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 19826
           HEAP32[$82 >> 2] = $751; //@line 19827
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 19830
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 19833
            break;
           } else {
            $$06$i269$i = $754; //@line 19836
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 19840
         $$reg2mem$0 = $157; //@line 19841
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 19848
          break L3;
         }
         $829 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 19852
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 19856
          break L3;
         }
         $832 = $215 + 1 | 0; //@line 19859
         HEAP32[$82 >> 2] = $832; //@line 19860
         $833 = $$1202$in$i & 255; //@line 19861
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 19864
         } else {
          $$045$i256$i = $833; //@line 19866
          $$06$i255$i = 0; //@line 19866
          $838 = $832; //@line 19866
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 19868
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 19870
           HEAP32[$82 >> 2] = $838; //@line 19871
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 19874
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 19877
            break;
           } else {
            $$06$i255$i = $841; //@line 19880
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 19884
         $$reg2mem$0 = $157; //@line 19885
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 19892
          break L3;
         }
         $845 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 19896
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 19900
          break L3;
         }
         $848 = $215 + 1 | 0; //@line 19903
         HEAP32[$82 >> 2] = $848; //@line 19904
         $849 = $$1202$in$i & 255; //@line 19905
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 19908
         } else {
          $$045$i249$i = $849; //@line 19910
          $$06$i248$i = 0; //@line 19910
          $854 = $848; //@line 19910
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 19912
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 19914
           HEAP32[$82 >> 2] = $854; //@line 19915
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 19918
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 19921
            break;
           } else {
            $$06$i248$i = $857; //@line 19924
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 19928
         $$reg2mem$0 = $157; //@line 19929
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 19936
          break L3;
         }
         $861 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 19940
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 19944
          break L3;
         }
         $864 = $215 + 1 | 0; //@line 19947
         HEAP32[$82 >> 2] = $864; //@line 19948
         $865 = $$1202$in$i & 255; //@line 19949
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 19952
         } else {
          $$045$i242$i = $865; //@line 19954
          $$06$i241$i = 0; //@line 19954
          $870 = $864; //@line 19954
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 19956
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 19958
           HEAP32[$82 >> 2] = $870; //@line 19959
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 19962
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 19965
            break;
           } else {
            $$06$i241$i = $873; //@line 19968
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 19972
         $$reg2mem$0 = $157; //@line 19973
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 19980
          break L3;
         }
         $877 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 19984
         $878 = HEAP8[$877 >> 0] | 0; //@line 19985
         if ($878 & 1) {
          label = 94; //@line 19989
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 19993
         $883 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 19995
         HEAP32[$82 >> 2] = $883; //@line 19996
         $884 = $$1202$in$i & 255; //@line 19997
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 20000
         } else {
          $$045$i235$i = $884; //@line 20002
          $$06$i234$i = 0; //@line 20002
          $889 = $883; //@line 20002
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 20004
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 20006
           HEAP32[$82 >> 2] = $889; //@line 20007
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 20010
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 20013
            break;
           } else {
            $$06$i234$i = $892; //@line 20016
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 20022
         $$reg2mem$0 = $157; //@line 20023
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 20030
          break L3;
         }
         $898 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 20034
         $899 = HEAP8[$898 >> 0] | 0; //@line 20035
         if ($899 & 2) {
          label = 100; //@line 20039
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 20043
         $904 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 20045
         HEAP32[$82 >> 2] = $904; //@line 20046
         $905 = $$1202$in$i & 255; //@line 20047
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 20050
         } else {
          $$045$i228$i = $905; //@line 20052
          $$06$i227$i = 0; //@line 20052
          $910 = $904; //@line 20052
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 20054
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 20056
           HEAP32[$82 >> 2] = $910; //@line 20057
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 20060
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 20063
            break;
           } else {
            $$06$i227$i = $913; //@line 20066
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 20072
         $$reg2mem$0 = $157; //@line 20073
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 20078
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 20088
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 20095
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 20101
     break;
    }
    $256 = $215 + 1 | 0; //@line 20104
    HEAP32[$82 >> 2] = $256; //@line 20105
    $257 = $$1202$in$i & 255; //@line 20106
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 20109
    } else {
     $$045$i$i = $257; //@line 20111
     $$06$i$i = 0; //@line 20111
     $262 = $256; //@line 20111
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 20113
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 20115
      HEAP32[$82 >> 2] = $262; //@line 20116
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 20119
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 20122
       break;
      } else {
       $$06$i$i = $265; //@line 20125
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 20129
    $$reg2mem$0 = $157; //@line 20130
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 20134
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 20139
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$120 >> 2] | 0; //@line 20144
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 20145
     $179 = FUNCTION_TABLE_ii[$178 & 15](68) | 0; //@line 20146
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 20149
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 20150
      HEAP16[$180 >> 1] = $175; //@line 20151
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 20152
      HEAP32[$181 >> 2] = $2; //@line 20153
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 20154
      HEAP32[$182 >> 2] = $4; //@line 20155
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 20156
      HEAP32[$183 >> 2] = $6; //@line 20157
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 20158
      HEAP32[$184 >> 2] = $124; //@line 20159
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 20160
      HEAP32[$185 >> 2] = $8; //@line 20161
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 20162
      HEAP32[$186 >> 2] = $10; //@line 20163
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 20164
      HEAP32[$187 >> 2] = $12; //@line 20165
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 20166
      HEAP32[$188 >> 2] = $14; //@line 20167
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 20168
      HEAP32[$189 >> 2] = $16; //@line 20169
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 20170
      HEAP32[$190 >> 2] = $18; //@line 20171
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 20172
      HEAP32[$191 >> 2] = $20; //@line 20173
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 20174
      HEAP32[$192 >> 2] = $22; //@line 20175
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 20176
      HEAP32[$193 >> 2] = $24; //@line 20177
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 20178
      HEAP32[$194 >> 2] = $26; //@line 20179
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 20180
      HEAP16[$195 >> 1] = $$1202$i; //@line 20181
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 20182
      HEAP32[$196 >> 2] = $28; //@line 20183
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 20184
      HEAP32[$197 >> 2] = $30; //@line 20185
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 20186
      HEAP32[$198 >> 2] = $32; //@line 20187
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 20188
      HEAP32[$199 >> 2] = $34; //@line 20189
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 20190
      HEAP32[$200 >> 2] = $157; //@line 20191
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 20192
      HEAP32[$201 >> 2] = $38; //@line 20193
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 20194
      HEAP32[$202 >> 2] = $$1202$in$i; //@line 20195
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 20196
      HEAP32[$203 >> 2] = $42; //@line 20197
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 20198
      HEAP32[$204 >> 2] = $36; //@line 20199
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 20200
      HEAP32[$205 >> 2] = $44; //@line 20201
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 20202
      HEAP32[$206 >> 2] = $46; //@line 20203
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 20204
      HEAP32[$207 >> 2] = $48; //@line 20205
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 20206
      HEAP32[$208 >> 2] = $50; //@line 20207
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 20208
      HEAP32[$209 >> 2] = $52; //@line 20209
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 20210
      HEAP32[$210 >> 2] = $54; //@line 20211
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 20212
      HEAP32[$211 >> 2] = $56; //@line 20213
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 20214
      HEAP32[$212 >> 2] = $58; //@line 20215
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 20216
      HEAP32[$213 >> 2] = $60; //@line 20217
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 20218
      HEAP32[$214 >> 2] = $215; //@line 20219
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 20220
      HEAP32[$216 >> 2] = $62; //@line 20221
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 20222
      HEAP32[$217 >> 2] = $64; //@line 20223
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 20224
      HEAP32[$218 >> 2] = $66; //@line 20225
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 20226
      HEAP32[$219 >> 2] = $68; //@line 20227
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 20228
      HEAP32[$220 >> 2] = $70; //@line 20229
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 20230
      HEAP32[$221 >> 2] = $72; //@line 20231
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 20232
      HEAP32[$222 >> 2] = $74; //@line 20233
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 20234
      HEAP32[$223 >> 2] = $76; //@line 20235
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 20236
      HEAP32[$224 >> 2] = $78; //@line 20237
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 20238
      HEAP32[$225 >> 2] = $80; //@line 20239
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 20240
      HEAP32[$226 >> 2] = $82; //@line 20241
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 20242
      HEAP32[$227 >> 2] = $84; //@line 20243
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 20244
      HEAP32[$228 >> 2] = $86; //@line 20245
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 20246
      HEAP32[$229 >> 2] = $88; //@line 20247
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 20248
      HEAP32[$230 >> 2] = $90; //@line 20249
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 20250
      HEAP32[$231 >> 2] = $92; //@line 20251
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 20252
      HEAP32[$232 >> 2] = $94; //@line 20253
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 20254
      HEAP32[$233 >> 2] = $96; //@line 20255
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 20256
      HEAP32[$234 >> 2] = $98; //@line 20257
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 20258
      HEAP32[$235 >> 2] = $100; //@line 20259
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 20260
      HEAP32[$236 >> 2] = $102; //@line 20261
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 20262
      HEAP32[$237 >> 2] = $104; //@line 20263
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 20264
      HEAP32[$238 >> 2] = $106; //@line 20265
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 20266
      HEAP16[$239 >> 1] = $trunc$i; //@line 20267
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 20268
      HEAP32[$240 >> 2] = $108; //@line 20269
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 20270
      HEAP32[$241 >> 2] = $110; //@line 20271
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 20272
      HEAP32[$242 >> 2] = $112; //@line 20273
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 20274
      HEAP32[$243 >> 2] = $114; //@line 20275
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 20276
      HEAP32[$244 >> 2] = $116; //@line 20277
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 20278
      HEAP32[$245 >> 2] = $118; //@line 20279
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 20280
      HEAP32[$246 >> 2] = $120; //@line 20281
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 20282
      HEAP32[$247 >> 2] = $122; //@line 20283
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 20284
      HEAP32[$248 >> 2] = $126; //@line 20285
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 20286
      HEAP32[$249 >> 2] = $128; //@line 20287
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 20288
      HEAP32[$250 >> 2] = $130; //@line 20289
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 20290
      HEAP32[$251 >> 2] = $132; //@line 20291
      sp = STACKTOP; //@line 20292
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 20296
     ___async_unwind = 0; //@line 20297
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 20298
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 20299
     HEAP16[$180 >> 1] = $175; //@line 20300
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 20301
     HEAP32[$181 >> 2] = $2; //@line 20302
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 20303
     HEAP32[$182 >> 2] = $4; //@line 20304
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 20305
     HEAP32[$183 >> 2] = $6; //@line 20306
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 20307
     HEAP32[$184 >> 2] = $124; //@line 20308
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 20309
     HEAP32[$185 >> 2] = $8; //@line 20310
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 20311
     HEAP32[$186 >> 2] = $10; //@line 20312
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 20313
     HEAP32[$187 >> 2] = $12; //@line 20314
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 20315
     HEAP32[$188 >> 2] = $14; //@line 20316
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 20317
     HEAP32[$189 >> 2] = $16; //@line 20318
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 20319
     HEAP32[$190 >> 2] = $18; //@line 20320
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 20321
     HEAP32[$191 >> 2] = $20; //@line 20322
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 20323
     HEAP32[$192 >> 2] = $22; //@line 20324
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 20325
     HEAP32[$193 >> 2] = $24; //@line 20326
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 20327
     HEAP32[$194 >> 2] = $26; //@line 20328
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 20329
     HEAP16[$195 >> 1] = $$1202$i; //@line 20330
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 20331
     HEAP32[$196 >> 2] = $28; //@line 20332
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 20333
     HEAP32[$197 >> 2] = $30; //@line 20334
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 20335
     HEAP32[$198 >> 2] = $32; //@line 20336
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 20337
     HEAP32[$199 >> 2] = $34; //@line 20338
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 20339
     HEAP32[$200 >> 2] = $157; //@line 20340
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 20341
     HEAP32[$201 >> 2] = $38; //@line 20342
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 20343
     HEAP32[$202 >> 2] = $$1202$in$i; //@line 20344
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 20345
     HEAP32[$203 >> 2] = $42; //@line 20346
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 20347
     HEAP32[$204 >> 2] = $36; //@line 20348
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 20349
     HEAP32[$205 >> 2] = $44; //@line 20350
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 20351
     HEAP32[$206 >> 2] = $46; //@line 20352
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 20353
     HEAP32[$207 >> 2] = $48; //@line 20354
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 20355
     HEAP32[$208 >> 2] = $50; //@line 20356
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 20357
     HEAP32[$209 >> 2] = $52; //@line 20358
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 20359
     HEAP32[$210 >> 2] = $54; //@line 20360
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 20361
     HEAP32[$211 >> 2] = $56; //@line 20362
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 20363
     HEAP32[$212 >> 2] = $58; //@line 20364
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 20365
     HEAP32[$213 >> 2] = $60; //@line 20366
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 20367
     HEAP32[$214 >> 2] = $215; //@line 20368
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 20369
     HEAP32[$216 >> 2] = $62; //@line 20370
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 20371
     HEAP32[$217 >> 2] = $64; //@line 20372
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 20373
     HEAP32[$218 >> 2] = $66; //@line 20374
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 20375
     HEAP32[$219 >> 2] = $68; //@line 20376
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 20377
     HEAP32[$220 >> 2] = $70; //@line 20378
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 20379
     HEAP32[$221 >> 2] = $72; //@line 20380
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 20381
     HEAP32[$222 >> 2] = $74; //@line 20382
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 20383
     HEAP32[$223 >> 2] = $76; //@line 20384
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 20385
     HEAP32[$224 >> 2] = $78; //@line 20386
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 20387
     HEAP32[$225 >> 2] = $80; //@line 20388
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 20389
     HEAP32[$226 >> 2] = $82; //@line 20390
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 20391
     HEAP32[$227 >> 2] = $84; //@line 20392
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 20393
     HEAP32[$228 >> 2] = $86; //@line 20394
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 20395
     HEAP32[$229 >> 2] = $88; //@line 20396
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 20397
     HEAP32[$230 >> 2] = $90; //@line 20398
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 20399
     HEAP32[$231 >> 2] = $92; //@line 20400
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 20401
     HEAP32[$232 >> 2] = $94; //@line 20402
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 20403
     HEAP32[$233 >> 2] = $96; //@line 20404
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 20405
     HEAP32[$234 >> 2] = $98; //@line 20406
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 20407
     HEAP32[$235 >> 2] = $100; //@line 20408
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 20409
     HEAP32[$236 >> 2] = $102; //@line 20410
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 20411
     HEAP32[$237 >> 2] = $104; //@line 20412
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 20413
     HEAP32[$238 >> 2] = $106; //@line 20414
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 20415
     HEAP16[$239 >> 1] = $trunc$i; //@line 20416
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 20417
     HEAP32[$240 >> 2] = $108; //@line 20418
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 20419
     HEAP32[$241 >> 2] = $110; //@line 20420
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 20421
     HEAP32[$242 >> 2] = $112; //@line 20422
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 20423
     HEAP32[$243 >> 2] = $114; //@line 20424
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 20425
     HEAP32[$244 >> 2] = $116; //@line 20426
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 20427
     HEAP32[$245 >> 2] = $118; //@line 20428
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 20429
     HEAP32[$246 >> 2] = $120; //@line 20430
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 20431
     HEAP32[$247 >> 2] = $122; //@line 20432
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 20433
     HEAP32[$248 >> 2] = $126; //@line 20434
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 20435
     HEAP32[$249 >> 2] = $128; //@line 20436
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 20437
     HEAP32[$250 >> 2] = $130; //@line 20438
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 20439
     HEAP32[$251 >> 2] = $132; //@line 20440
     sp = STACKTOP; //@line 20441
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $118); //@line 20446
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 20451
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 20456
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$130 >> 2] | 0; //@line 20460
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 20466
       $289 = $215 + 1 | 0; //@line 20467
       HEAP32[$82 >> 2] = $289; //@line 20468
       $290 = HEAP32[$120 >> 2] | 0; //@line 20469
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 20470
       $291 = FUNCTION_TABLE_ii[$290 & 15]($$1202$i) | 0; //@line 20471
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 20474
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 20475
        HEAP32[$292 >> 2] = $2; //@line 20476
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 20477
        HEAP32[$293 >> 2] = $4; //@line 20478
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 20479
        HEAP32[$294 >> 2] = $6; //@line 20480
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 20481
        HEAP32[$295 >> 2] = $8; //@line 20482
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 20483
        HEAP32[$296 >> 2] = $10; //@line 20484
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 20485
        HEAP32[$297 >> 2] = $12; //@line 20486
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 20487
        HEAP32[$298 >> 2] = $14; //@line 20488
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 20489
        HEAP32[$299 >> 2] = $16; //@line 20490
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 20491
        HEAP32[$300 >> 2] = $18; //@line 20492
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 20493
        HEAP32[$301 >> 2] = $20; //@line 20494
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 20495
        HEAP32[$302 >> 2] = $22; //@line 20496
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 20497
        HEAP32[$303 >> 2] = $24; //@line 20498
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 20499
        HEAP32[$304 >> 2] = $26; //@line 20500
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 20501
        HEAP32[$305 >> 2] = $28; //@line 20502
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 20503
        HEAP32[$306 >> 2] = $30; //@line 20504
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 20505
        HEAP32[$307 >> 2] = $32; //@line 20506
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 20507
        HEAP32[$308 >> 2] = $34; //@line 20508
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 20509
        HEAP32[$309 >> 2] = $36; //@line 20510
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 20511
        HEAP32[$310 >> 2] = $38; //@line 20512
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 20513
        HEAP32[$311 >> 2] = $157; //@line 20514
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 20515
        HEAP32[$312 >> 2] = $42; //@line 20516
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 20517
        HEAP32[$313 >> 2] = $44; //@line 20518
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 20519
        HEAP32[$314 >> 2] = $46; //@line 20520
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 20521
        HEAP32[$315 >> 2] = $48; //@line 20522
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 20523
        HEAP32[$316 >> 2] = $50; //@line 20524
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 20525
        HEAP32[$317 >> 2] = $52; //@line 20526
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 20527
        HEAP32[$318 >> 2] = $54; //@line 20528
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 20529
        HEAP32[$319 >> 2] = $56; //@line 20530
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 20531
        HEAP32[$320 >> 2] = $58; //@line 20532
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 20533
        HEAP32[$321 >> 2] = $60; //@line 20534
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 20535
        HEAP32[$322 >> 2] = $62; //@line 20536
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 20537
        HEAP32[$323 >> 2] = $64; //@line 20538
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 20539
        HEAP32[$324 >> 2] = $66; //@line 20540
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 20541
        HEAP32[$325 >> 2] = $68; //@line 20542
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 20543
        HEAP32[$326 >> 2] = $70; //@line 20544
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 20545
        HEAP32[$327 >> 2] = $72; //@line 20546
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 20547
        HEAP32[$328 >> 2] = $74; //@line 20548
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 20549
        HEAP32[$329 >> 2] = $76; //@line 20550
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 20551
        HEAP32[$330 >> 2] = $78; //@line 20552
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 20553
        HEAP32[$331 >> 2] = $80; //@line 20554
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 20555
        HEAP32[$332 >> 2] = $82; //@line 20556
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 20557
        HEAP32[$333 >> 2] = $84; //@line 20558
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 20559
        HEAP32[$334 >> 2] = $86; //@line 20560
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 20561
        HEAP32[$335 >> 2] = $88; //@line 20562
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 20563
        HEAP32[$336 >> 2] = $90; //@line 20564
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 20565
        HEAP32[$337 >> 2] = $92; //@line 20566
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 20567
        HEAP32[$338 >> 2] = $94; //@line 20568
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 20569
        HEAP32[$339 >> 2] = $96; //@line 20570
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 20571
        HEAP32[$340 >> 2] = $98; //@line 20572
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 20573
        HEAP32[$341 >> 2] = $100; //@line 20574
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 20575
        HEAP32[$342 >> 2] = $102; //@line 20576
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 20577
        HEAP32[$343 >> 2] = $104; //@line 20578
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 20579
        HEAP32[$344 >> 2] = $106; //@line 20580
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 20581
        HEAP32[$345 >> 2] = $108; //@line 20582
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 20583
        HEAP32[$346 >> 2] = $289; //@line 20584
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 20585
        HEAP32[$347 >> 2] = $110; //@line 20586
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 20587
        HEAP32[$348 >> 2] = $281; //@line 20588
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 20589
        HEAP32[$349 >> 2] = $112; //@line 20590
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 20591
        HEAP32[$350 >> 2] = $114; //@line 20592
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 20593
        HEAP32[$351 >> 2] = $116; //@line 20594
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 20595
        HEAP32[$352 >> 2] = $118; //@line 20596
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 20597
        HEAP32[$353 >> 2] = $120; //@line 20598
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 20599
        HEAP32[$354 >> 2] = $122; //@line 20600
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 20601
        HEAP32[$355 >> 2] = $124; //@line 20602
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 20603
        HEAP32[$356 >> 2] = $126; //@line 20604
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 20605
        HEAP32[$357 >> 2] = $128; //@line 20606
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 20607
        HEAP32[$358 >> 2] = $130; //@line 20608
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 20609
        HEAP32[$359 >> 2] = $132; //@line 20610
        sp = STACKTOP; //@line 20611
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 20615
       ___async_unwind = 0; //@line 20616
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 20617
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 20618
       HEAP32[$292 >> 2] = $2; //@line 20619
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 20620
       HEAP32[$293 >> 2] = $4; //@line 20621
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 20622
       HEAP32[$294 >> 2] = $6; //@line 20623
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 20624
       HEAP32[$295 >> 2] = $8; //@line 20625
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 20626
       HEAP32[$296 >> 2] = $10; //@line 20627
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 20628
       HEAP32[$297 >> 2] = $12; //@line 20629
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 20630
       HEAP32[$298 >> 2] = $14; //@line 20631
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 20632
       HEAP32[$299 >> 2] = $16; //@line 20633
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 20634
       HEAP32[$300 >> 2] = $18; //@line 20635
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 20636
       HEAP32[$301 >> 2] = $20; //@line 20637
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 20638
       HEAP32[$302 >> 2] = $22; //@line 20639
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 20640
       HEAP32[$303 >> 2] = $24; //@line 20641
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 20642
       HEAP32[$304 >> 2] = $26; //@line 20643
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 20644
       HEAP32[$305 >> 2] = $28; //@line 20645
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 20646
       HEAP32[$306 >> 2] = $30; //@line 20647
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 20648
       HEAP32[$307 >> 2] = $32; //@line 20649
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 20650
       HEAP32[$308 >> 2] = $34; //@line 20651
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 20652
       HEAP32[$309 >> 2] = $36; //@line 20653
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 20654
       HEAP32[$310 >> 2] = $38; //@line 20655
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 20656
       HEAP32[$311 >> 2] = $157; //@line 20657
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 20658
       HEAP32[$312 >> 2] = $42; //@line 20659
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 20660
       HEAP32[$313 >> 2] = $44; //@line 20661
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 20662
       HEAP32[$314 >> 2] = $46; //@line 20663
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 20664
       HEAP32[$315 >> 2] = $48; //@line 20665
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 20666
       HEAP32[$316 >> 2] = $50; //@line 20667
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 20668
       HEAP32[$317 >> 2] = $52; //@line 20669
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 20670
       HEAP32[$318 >> 2] = $54; //@line 20671
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 20672
       HEAP32[$319 >> 2] = $56; //@line 20673
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 20674
       HEAP32[$320 >> 2] = $58; //@line 20675
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 20676
       HEAP32[$321 >> 2] = $60; //@line 20677
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 20678
       HEAP32[$322 >> 2] = $62; //@line 20679
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 20680
       HEAP32[$323 >> 2] = $64; //@line 20681
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 20682
       HEAP32[$324 >> 2] = $66; //@line 20683
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 20684
       HEAP32[$325 >> 2] = $68; //@line 20685
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 20686
       HEAP32[$326 >> 2] = $70; //@line 20687
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 20688
       HEAP32[$327 >> 2] = $72; //@line 20689
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 20690
       HEAP32[$328 >> 2] = $74; //@line 20691
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 20692
       HEAP32[$329 >> 2] = $76; //@line 20693
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 20694
       HEAP32[$330 >> 2] = $78; //@line 20695
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 20696
       HEAP32[$331 >> 2] = $80; //@line 20697
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 20698
       HEAP32[$332 >> 2] = $82; //@line 20699
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 20700
       HEAP32[$333 >> 2] = $84; //@line 20701
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 20702
       HEAP32[$334 >> 2] = $86; //@line 20703
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 20704
       HEAP32[$335 >> 2] = $88; //@line 20705
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 20706
       HEAP32[$336 >> 2] = $90; //@line 20707
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 20708
       HEAP32[$337 >> 2] = $92; //@line 20709
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 20710
       HEAP32[$338 >> 2] = $94; //@line 20711
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 20712
       HEAP32[$339 >> 2] = $96; //@line 20713
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 20714
       HEAP32[$340 >> 2] = $98; //@line 20715
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 20716
       HEAP32[$341 >> 2] = $100; //@line 20717
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 20718
       HEAP32[$342 >> 2] = $102; //@line 20719
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 20720
       HEAP32[$343 >> 2] = $104; //@line 20721
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 20722
       HEAP32[$344 >> 2] = $106; //@line 20723
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 20724
       HEAP32[$345 >> 2] = $108; //@line 20725
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 20726
       HEAP32[$346 >> 2] = $289; //@line 20727
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 20728
       HEAP32[$347 >> 2] = $110; //@line 20729
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 20730
       HEAP32[$348 >> 2] = $281; //@line 20731
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 20732
       HEAP32[$349 >> 2] = $112; //@line 20733
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 20734
       HEAP32[$350 >> 2] = $114; //@line 20735
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 20736
       HEAP32[$351 >> 2] = $116; //@line 20737
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 20738
       HEAP32[$352 >> 2] = $118; //@line 20739
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 20740
       HEAP32[$353 >> 2] = $120; //@line 20741
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 20742
       HEAP32[$354 >> 2] = $122; //@line 20743
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 20744
       HEAP32[$355 >> 2] = $124; //@line 20745
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 20746
       HEAP32[$356 >> 2] = $126; //@line 20747
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 20748
       HEAP32[$357 >> 2] = $128; //@line 20749
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 20750
       HEAP32[$358 >> 2] = $130; //@line 20751
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 20752
       HEAP32[$359 >> 2] = $132; //@line 20753
       sp = STACKTOP; //@line 20754
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 20758
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$130 >> 2] | 0; //@line 20763
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 20765
     $363 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 20766
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 20769
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 20770
      HEAP32[$364 >> 2] = $2; //@line 20771
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 20772
      HEAP32[$365 >> 2] = $4; //@line 20773
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 20774
      HEAP32[$366 >> 2] = $6; //@line 20775
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 20776
      HEAP32[$367 >> 2] = $8; //@line 20777
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 20778
      HEAP32[$368 >> 2] = $10; //@line 20779
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 20780
      HEAP32[$369 >> 2] = $12; //@line 20781
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 20782
      HEAP32[$370 >> 2] = $14; //@line 20783
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 20784
      HEAP32[$371 >> 2] = $16; //@line 20785
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 20786
      HEAP32[$372 >> 2] = $18; //@line 20787
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 20788
      HEAP32[$373 >> 2] = $20; //@line 20789
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 20790
      HEAP32[$374 >> 2] = $22; //@line 20791
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 20792
      HEAP32[$375 >> 2] = $24; //@line 20793
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 20794
      HEAP32[$376 >> 2] = $26; //@line 20795
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 20796
      HEAP32[$377 >> 2] = $28; //@line 20797
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 20798
      HEAP32[$378 >> 2] = $30; //@line 20799
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 20800
      HEAP32[$379 >> 2] = $32; //@line 20801
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 20802
      HEAP32[$380 >> 2] = $34; //@line 20803
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 20804
      HEAP32[$381 >> 2] = $36; //@line 20805
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 20806
      HEAP32[$382 >> 2] = $38; //@line 20807
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 20808
      HEAP32[$383 >> 2] = $157; //@line 20809
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 20810
      HEAP32[$384 >> 2] = $42; //@line 20811
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 20812
      HEAP32[$385 >> 2] = $44; //@line 20813
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 20814
      HEAP32[$386 >> 2] = $46; //@line 20815
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 20816
      HEAP32[$387 >> 2] = $48; //@line 20817
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 20818
      HEAP32[$388 >> 2] = $50; //@line 20819
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 20820
      HEAP32[$389 >> 2] = $52; //@line 20821
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 20822
      HEAP32[$390 >> 2] = $54; //@line 20823
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 20824
      HEAP32[$391 >> 2] = $56; //@line 20825
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 20826
      HEAP32[$392 >> 2] = $58; //@line 20827
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 20828
      HEAP32[$393 >> 2] = $60; //@line 20829
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 20830
      HEAP32[$394 >> 2] = $62; //@line 20831
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 20832
      HEAP32[$395 >> 2] = $64; //@line 20833
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 20834
      HEAP32[$396 >> 2] = $66; //@line 20835
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 20836
      HEAP32[$397 >> 2] = $68; //@line 20837
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 20838
      HEAP32[$398 >> 2] = $70; //@line 20839
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 20840
      HEAP32[$399 >> 2] = $72; //@line 20841
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 20842
      HEAP32[$400 >> 2] = $74; //@line 20843
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 20844
      HEAP32[$401 >> 2] = $76; //@line 20845
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 20846
      HEAP32[$402 >> 2] = $78; //@line 20847
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 20848
      HEAP32[$403 >> 2] = $80; //@line 20849
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 20850
      HEAP32[$404 >> 2] = $82; //@line 20851
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 20852
      HEAP32[$405 >> 2] = $84; //@line 20853
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 20854
      HEAP32[$406 >> 2] = $86; //@line 20855
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 20856
      HEAP32[$407 >> 2] = $88; //@line 20857
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 20858
      HEAP32[$408 >> 2] = $90; //@line 20859
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 20860
      HEAP32[$409 >> 2] = $92; //@line 20861
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 20862
      HEAP32[$410 >> 2] = $94; //@line 20863
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 20864
      HEAP32[$411 >> 2] = $96; //@line 20865
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 20866
      HEAP32[$412 >> 2] = $98; //@line 20867
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 20868
      HEAP32[$413 >> 2] = $100; //@line 20869
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 20870
      HEAP32[$414 >> 2] = $102; //@line 20871
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 20872
      HEAP32[$415 >> 2] = $104; //@line 20873
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 20874
      HEAP32[$416 >> 2] = $106; //@line 20875
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 20876
      HEAP32[$417 >> 2] = $108; //@line 20877
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 20878
      HEAP32[$418 >> 2] = $110; //@line 20879
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 20880
      HEAP32[$419 >> 2] = $112; //@line 20881
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 20882
      HEAP32[$420 >> 2] = $114; //@line 20883
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 20884
      HEAP32[$421 >> 2] = $116; //@line 20885
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 20886
      HEAP32[$422 >> 2] = $118; //@line 20887
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 20888
      HEAP32[$423 >> 2] = $120; //@line 20889
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 20890
      HEAP32[$424 >> 2] = $122; //@line 20891
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 20892
      HEAP32[$425 >> 2] = $124; //@line 20893
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 20894
      HEAP32[$426 >> 2] = $126; //@line 20895
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 20896
      HEAP32[$427 >> 2] = $128; //@line 20897
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 20898
      HEAP32[$428 >> 2] = $130; //@line 20899
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 20900
      HEAP32[$429 >> 2] = $132; //@line 20901
      sp = STACKTOP; //@line 20902
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 20906
     ___async_unwind = 0; //@line 20907
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 20908
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 20909
     HEAP32[$364 >> 2] = $2; //@line 20910
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 20911
     HEAP32[$365 >> 2] = $4; //@line 20912
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 20913
     HEAP32[$366 >> 2] = $6; //@line 20914
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 20915
     HEAP32[$367 >> 2] = $8; //@line 20916
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 20917
     HEAP32[$368 >> 2] = $10; //@line 20918
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 20919
     HEAP32[$369 >> 2] = $12; //@line 20920
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 20921
     HEAP32[$370 >> 2] = $14; //@line 20922
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 20923
     HEAP32[$371 >> 2] = $16; //@line 20924
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 20925
     HEAP32[$372 >> 2] = $18; //@line 20926
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 20927
     HEAP32[$373 >> 2] = $20; //@line 20928
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 20929
     HEAP32[$374 >> 2] = $22; //@line 20930
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 20931
     HEAP32[$375 >> 2] = $24; //@line 20932
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 20933
     HEAP32[$376 >> 2] = $26; //@line 20934
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 20935
     HEAP32[$377 >> 2] = $28; //@line 20936
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 20937
     HEAP32[$378 >> 2] = $30; //@line 20938
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 20939
     HEAP32[$379 >> 2] = $32; //@line 20940
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 20941
     HEAP32[$380 >> 2] = $34; //@line 20942
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 20943
     HEAP32[$381 >> 2] = $36; //@line 20944
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 20945
     HEAP32[$382 >> 2] = $38; //@line 20946
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 20947
     HEAP32[$383 >> 2] = $157; //@line 20948
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 20949
     HEAP32[$384 >> 2] = $42; //@line 20950
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 20951
     HEAP32[$385 >> 2] = $44; //@line 20952
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 20953
     HEAP32[$386 >> 2] = $46; //@line 20954
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 20955
     HEAP32[$387 >> 2] = $48; //@line 20956
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 20957
     HEAP32[$388 >> 2] = $50; //@line 20958
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 20959
     HEAP32[$389 >> 2] = $52; //@line 20960
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 20961
     HEAP32[$390 >> 2] = $54; //@line 20962
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 20963
     HEAP32[$391 >> 2] = $56; //@line 20964
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 20965
     HEAP32[$392 >> 2] = $58; //@line 20966
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 20967
     HEAP32[$393 >> 2] = $60; //@line 20968
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 20969
     HEAP32[$394 >> 2] = $62; //@line 20970
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 20971
     HEAP32[$395 >> 2] = $64; //@line 20972
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 20973
     HEAP32[$396 >> 2] = $66; //@line 20974
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 20975
     HEAP32[$397 >> 2] = $68; //@line 20976
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 20977
     HEAP32[$398 >> 2] = $70; //@line 20978
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 20979
     HEAP32[$399 >> 2] = $72; //@line 20980
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 20981
     HEAP32[$400 >> 2] = $74; //@line 20982
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 20983
     HEAP32[$401 >> 2] = $76; //@line 20984
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 20985
     HEAP32[$402 >> 2] = $78; //@line 20986
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 20987
     HEAP32[$403 >> 2] = $80; //@line 20988
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 20989
     HEAP32[$404 >> 2] = $82; //@line 20990
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 20991
     HEAP32[$405 >> 2] = $84; //@line 20992
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 20993
     HEAP32[$406 >> 2] = $86; //@line 20994
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 20995
     HEAP32[$407 >> 2] = $88; //@line 20996
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 20997
     HEAP32[$408 >> 2] = $90; //@line 20998
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 20999
     HEAP32[$409 >> 2] = $92; //@line 21000
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 21001
     HEAP32[$410 >> 2] = $94; //@line 21002
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 21003
     HEAP32[$411 >> 2] = $96; //@line 21004
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 21005
     HEAP32[$412 >> 2] = $98; //@line 21006
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 21007
     HEAP32[$413 >> 2] = $100; //@line 21008
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 21009
     HEAP32[$414 >> 2] = $102; //@line 21010
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 21011
     HEAP32[$415 >> 2] = $104; //@line 21012
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 21013
     HEAP32[$416 >> 2] = $106; //@line 21014
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 21015
     HEAP32[$417 >> 2] = $108; //@line 21016
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 21017
     HEAP32[$418 >> 2] = $110; //@line 21018
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 21019
     HEAP32[$419 >> 2] = $112; //@line 21020
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 21021
     HEAP32[$420 >> 2] = $114; //@line 21022
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 21023
     HEAP32[$421 >> 2] = $116; //@line 21024
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 21025
     HEAP32[$422 >> 2] = $118; //@line 21026
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 21027
     HEAP32[$423 >> 2] = $120; //@line 21028
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 21029
     HEAP32[$424 >> 2] = $122; //@line 21030
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 21031
     HEAP32[$425 >> 2] = $124; //@line 21032
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 21033
     HEAP32[$426 >> 2] = $126; //@line 21034
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 21035
     HEAP32[$427 >> 2] = $128; //@line 21036
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 21037
     HEAP32[$428 >> 2] = $130; //@line 21038
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 21039
     HEAP32[$429 >> 2] = $132; //@line 21040
     sp = STACKTOP; //@line 21041
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 21046
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$130 >> 2] | 0; //@line 21050
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 21056
       $439 = $215 + 1 | 0; //@line 21057
       HEAP32[$82 >> 2] = $439; //@line 21058
       $440 = HEAP32[$120 >> 2] | 0; //@line 21059
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 21060
       $441 = FUNCTION_TABLE_ii[$440 & 15]($$1202$i) | 0; //@line 21061
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 21064
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 21065
        HEAP32[$442 >> 2] = $2; //@line 21066
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 21067
        HEAP32[$443 >> 2] = $4; //@line 21068
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 21069
        HEAP32[$444 >> 2] = $6; //@line 21070
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 21071
        HEAP32[$445 >> 2] = $8; //@line 21072
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 21073
        HEAP32[$446 >> 2] = $10; //@line 21074
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 21075
        HEAP32[$447 >> 2] = $12; //@line 21076
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 21077
        HEAP32[$448 >> 2] = $14; //@line 21078
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 21079
        HEAP32[$449 >> 2] = $16; //@line 21080
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 21081
        HEAP32[$450 >> 2] = $18; //@line 21082
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 21083
        HEAP32[$451 >> 2] = $20; //@line 21084
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 21085
        HEAP32[$452 >> 2] = $22; //@line 21086
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 21087
        HEAP32[$453 >> 2] = $24; //@line 21088
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 21089
        HEAP32[$454 >> 2] = $26; //@line 21090
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 21091
        HEAP32[$455 >> 2] = $28; //@line 21092
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 21093
        HEAP32[$456 >> 2] = $30; //@line 21094
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 21095
        HEAP32[$457 >> 2] = $32; //@line 21096
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 21097
        HEAP32[$458 >> 2] = $34; //@line 21098
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 21099
        HEAP32[$459 >> 2] = $36; //@line 21100
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 21101
        HEAP32[$460 >> 2] = $38; //@line 21102
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 21103
        HEAP32[$461 >> 2] = $157; //@line 21104
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 21105
        HEAP32[$462 >> 2] = $42; //@line 21106
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 21107
        HEAP32[$463 >> 2] = $44; //@line 21108
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 21109
        HEAP32[$464 >> 2] = $46; //@line 21110
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 21111
        HEAP32[$465 >> 2] = $48; //@line 21112
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 21113
        HEAP32[$466 >> 2] = $50; //@line 21114
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 21115
        HEAP32[$467 >> 2] = $52; //@line 21116
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 21117
        HEAP32[$468 >> 2] = $54; //@line 21118
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 21119
        HEAP32[$469 >> 2] = $56; //@line 21120
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 21121
        HEAP32[$470 >> 2] = $58; //@line 21122
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 21123
        HEAP32[$471 >> 2] = $60; //@line 21124
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 21125
        HEAP32[$472 >> 2] = $62; //@line 21126
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 21127
        HEAP32[$473 >> 2] = $64; //@line 21128
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 21129
        HEAP32[$474 >> 2] = $66; //@line 21130
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 21131
        HEAP32[$475 >> 2] = $68; //@line 21132
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 21133
        HEAP32[$476 >> 2] = $70; //@line 21134
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 21135
        HEAP32[$477 >> 2] = $72; //@line 21136
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 21137
        HEAP32[$478 >> 2] = $74; //@line 21138
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 21139
        HEAP32[$479 >> 2] = $76; //@line 21140
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 21141
        HEAP32[$480 >> 2] = $78; //@line 21142
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 21143
        HEAP32[$481 >> 2] = $80; //@line 21144
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 21145
        HEAP32[$482 >> 2] = $82; //@line 21146
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 21147
        HEAP32[$483 >> 2] = $84; //@line 21148
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 21149
        HEAP32[$484 >> 2] = $86; //@line 21150
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 21151
        HEAP32[$485 >> 2] = $88; //@line 21152
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 21153
        HEAP32[$486 >> 2] = $90; //@line 21154
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 21155
        HEAP32[$487 >> 2] = $92; //@line 21156
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 21157
        HEAP32[$488 >> 2] = $94; //@line 21158
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 21159
        HEAP32[$489 >> 2] = $96; //@line 21160
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 21161
        HEAP32[$490 >> 2] = $98; //@line 21162
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 21163
        HEAP32[$491 >> 2] = $100; //@line 21164
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 21165
        HEAP32[$492 >> 2] = $102; //@line 21166
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 21167
        HEAP32[$493 >> 2] = $104; //@line 21168
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 21169
        HEAP32[$494 >> 2] = $106; //@line 21170
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 21171
        HEAP32[$495 >> 2] = $108; //@line 21172
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 21173
        HEAP32[$496 >> 2] = $110; //@line 21174
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 21175
        HEAP32[$497 >> 2] = $112; //@line 21176
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 21177
        HEAP32[$498 >> 2] = $114; //@line 21178
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 21179
        HEAP32[$499 >> 2] = $116; //@line 21180
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 21181
        HEAP32[$500 >> 2] = $439; //@line 21182
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 21183
        HEAP32[$501 >> 2] = $118; //@line 21184
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 21185
        HEAP32[$502 >> 2] = $431; //@line 21186
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 21187
        HEAP32[$503 >> 2] = $120; //@line 21188
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 21189
        HEAP32[$504 >> 2] = $122; //@line 21190
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 21191
        HEAP32[$505 >> 2] = $124; //@line 21192
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 21193
        HEAP32[$506 >> 2] = $126; //@line 21194
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 21195
        HEAP32[$507 >> 2] = $128; //@line 21196
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 21197
        HEAP32[$508 >> 2] = $130; //@line 21198
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 21199
        HEAP32[$509 >> 2] = $132; //@line 21200
        sp = STACKTOP; //@line 21201
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 21205
       ___async_unwind = 0; //@line 21206
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 21207
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 21208
       HEAP32[$442 >> 2] = $2; //@line 21209
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 21210
       HEAP32[$443 >> 2] = $4; //@line 21211
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 21212
       HEAP32[$444 >> 2] = $6; //@line 21213
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 21214
       HEAP32[$445 >> 2] = $8; //@line 21215
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 21216
       HEAP32[$446 >> 2] = $10; //@line 21217
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 21218
       HEAP32[$447 >> 2] = $12; //@line 21219
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 21220
       HEAP32[$448 >> 2] = $14; //@line 21221
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 21222
       HEAP32[$449 >> 2] = $16; //@line 21223
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 21224
       HEAP32[$450 >> 2] = $18; //@line 21225
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 21226
       HEAP32[$451 >> 2] = $20; //@line 21227
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 21228
       HEAP32[$452 >> 2] = $22; //@line 21229
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 21230
       HEAP32[$453 >> 2] = $24; //@line 21231
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 21232
       HEAP32[$454 >> 2] = $26; //@line 21233
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 21234
       HEAP32[$455 >> 2] = $28; //@line 21235
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 21236
       HEAP32[$456 >> 2] = $30; //@line 21237
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 21238
       HEAP32[$457 >> 2] = $32; //@line 21239
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 21240
       HEAP32[$458 >> 2] = $34; //@line 21241
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 21242
       HEAP32[$459 >> 2] = $36; //@line 21243
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 21244
       HEAP32[$460 >> 2] = $38; //@line 21245
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 21246
       HEAP32[$461 >> 2] = $157; //@line 21247
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 21248
       HEAP32[$462 >> 2] = $42; //@line 21249
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 21250
       HEAP32[$463 >> 2] = $44; //@line 21251
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 21252
       HEAP32[$464 >> 2] = $46; //@line 21253
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 21254
       HEAP32[$465 >> 2] = $48; //@line 21255
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 21256
       HEAP32[$466 >> 2] = $50; //@line 21257
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 21258
       HEAP32[$467 >> 2] = $52; //@line 21259
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 21260
       HEAP32[$468 >> 2] = $54; //@line 21261
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 21262
       HEAP32[$469 >> 2] = $56; //@line 21263
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 21264
       HEAP32[$470 >> 2] = $58; //@line 21265
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 21266
       HEAP32[$471 >> 2] = $60; //@line 21267
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 21268
       HEAP32[$472 >> 2] = $62; //@line 21269
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 21270
       HEAP32[$473 >> 2] = $64; //@line 21271
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 21272
       HEAP32[$474 >> 2] = $66; //@line 21273
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 21274
       HEAP32[$475 >> 2] = $68; //@line 21275
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 21276
       HEAP32[$476 >> 2] = $70; //@line 21277
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 21278
       HEAP32[$477 >> 2] = $72; //@line 21279
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 21280
       HEAP32[$478 >> 2] = $74; //@line 21281
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 21282
       HEAP32[$479 >> 2] = $76; //@line 21283
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 21284
       HEAP32[$480 >> 2] = $78; //@line 21285
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 21286
       HEAP32[$481 >> 2] = $80; //@line 21287
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 21288
       HEAP32[$482 >> 2] = $82; //@line 21289
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 21290
       HEAP32[$483 >> 2] = $84; //@line 21291
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 21292
       HEAP32[$484 >> 2] = $86; //@line 21293
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 21294
       HEAP32[$485 >> 2] = $88; //@line 21295
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 21296
       HEAP32[$486 >> 2] = $90; //@line 21297
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 21298
       HEAP32[$487 >> 2] = $92; //@line 21299
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 21300
       HEAP32[$488 >> 2] = $94; //@line 21301
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 21302
       HEAP32[$489 >> 2] = $96; //@line 21303
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 21304
       HEAP32[$490 >> 2] = $98; //@line 21305
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 21306
       HEAP32[$491 >> 2] = $100; //@line 21307
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 21308
       HEAP32[$492 >> 2] = $102; //@line 21309
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 21310
       HEAP32[$493 >> 2] = $104; //@line 21311
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 21312
       HEAP32[$494 >> 2] = $106; //@line 21313
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 21314
       HEAP32[$495 >> 2] = $108; //@line 21315
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 21316
       HEAP32[$496 >> 2] = $110; //@line 21317
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 21318
       HEAP32[$497 >> 2] = $112; //@line 21319
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 21320
       HEAP32[$498 >> 2] = $114; //@line 21321
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 21322
       HEAP32[$499 >> 2] = $116; //@line 21323
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 21324
       HEAP32[$500 >> 2] = $439; //@line 21325
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 21326
       HEAP32[$501 >> 2] = $118; //@line 21327
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 21328
       HEAP32[$502 >> 2] = $431; //@line 21329
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 21330
       HEAP32[$503 >> 2] = $120; //@line 21331
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 21332
       HEAP32[$504 >> 2] = $122; //@line 21333
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 21334
       HEAP32[$505 >> 2] = $124; //@line 21335
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 21336
       HEAP32[$506 >> 2] = $126; //@line 21337
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 21338
       HEAP32[$507 >> 2] = $128; //@line 21339
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 21340
       HEAP32[$508 >> 2] = $130; //@line 21341
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 21342
       HEAP32[$509 >> 2] = $132; //@line 21343
       sp = STACKTOP; //@line 21344
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 21348
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$130 >> 2] | 0; //@line 21353
     $512 = $511 + 56 | 0; //@line 21354
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 21358
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 21362
     $516 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 21363
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 21366
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 21367
      HEAP32[$517 >> 2] = $2; //@line 21368
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 21369
      HEAP32[$518 >> 2] = $4; //@line 21370
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 21371
      HEAP32[$519 >> 2] = $6; //@line 21372
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 21373
      HEAP32[$520 >> 2] = $8; //@line 21374
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 21375
      HEAP32[$521 >> 2] = $10; //@line 21376
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 21377
      HEAP32[$522 >> 2] = $12; //@line 21378
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 21379
      HEAP32[$523 >> 2] = $14; //@line 21380
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 21381
      HEAP32[$524 >> 2] = $16; //@line 21382
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 21383
      HEAP32[$525 >> 2] = $18; //@line 21384
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 21385
      HEAP32[$526 >> 2] = $20; //@line 21386
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 21387
      HEAP32[$527 >> 2] = $22; //@line 21388
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 21389
      HEAP32[$528 >> 2] = $24; //@line 21390
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 21391
      HEAP32[$529 >> 2] = $26; //@line 21392
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 21393
      HEAP32[$530 >> 2] = $28; //@line 21394
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 21395
      HEAP32[$531 >> 2] = $30; //@line 21396
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 21397
      HEAP32[$532 >> 2] = $32; //@line 21398
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 21399
      HEAP32[$533 >> 2] = $34; //@line 21400
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 21401
      HEAP32[$534 >> 2] = $36; //@line 21402
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 21403
      HEAP32[$535 >> 2] = $38; //@line 21404
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 21405
      HEAP32[$536 >> 2] = $157; //@line 21406
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 21407
      HEAP32[$537 >> 2] = $42; //@line 21408
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 21409
      HEAP32[$538 >> 2] = $44; //@line 21410
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 21411
      HEAP32[$539 >> 2] = $46; //@line 21412
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 21413
      HEAP32[$540 >> 2] = $48; //@line 21414
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 21415
      HEAP32[$541 >> 2] = $50; //@line 21416
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 21417
      HEAP32[$542 >> 2] = $52; //@line 21418
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 21419
      HEAP32[$543 >> 2] = $54; //@line 21420
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 21421
      HEAP32[$544 >> 2] = $56; //@line 21422
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 21423
      HEAP32[$545 >> 2] = $58; //@line 21424
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 21425
      HEAP32[$546 >> 2] = $60; //@line 21426
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 21427
      HEAP32[$547 >> 2] = $62; //@line 21428
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 21429
      HEAP32[$548 >> 2] = $64; //@line 21430
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 21431
      HEAP32[$549 >> 2] = $66; //@line 21432
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 21433
      HEAP32[$550 >> 2] = $68; //@line 21434
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 21435
      HEAP32[$551 >> 2] = $70; //@line 21436
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 21437
      HEAP32[$552 >> 2] = $72; //@line 21438
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 21439
      HEAP32[$553 >> 2] = $74; //@line 21440
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 21441
      HEAP32[$554 >> 2] = $76; //@line 21442
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 21443
      HEAP32[$555 >> 2] = $78; //@line 21444
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 21445
      HEAP32[$556 >> 2] = $80; //@line 21446
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 21447
      HEAP32[$557 >> 2] = $82; //@line 21448
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 21449
      HEAP32[$558 >> 2] = $84; //@line 21450
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 21451
      HEAP32[$559 >> 2] = $86; //@line 21452
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 21453
      HEAP32[$560 >> 2] = $88; //@line 21454
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 21455
      HEAP32[$561 >> 2] = $90; //@line 21456
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 21457
      HEAP32[$562 >> 2] = $92; //@line 21458
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 21459
      HEAP32[$563 >> 2] = $94; //@line 21460
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 21461
      HEAP32[$564 >> 2] = $96; //@line 21462
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 21463
      HEAP32[$565 >> 2] = $98; //@line 21464
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 21465
      HEAP32[$566 >> 2] = $100; //@line 21466
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 21467
      HEAP32[$567 >> 2] = $102; //@line 21468
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 21469
      HEAP32[$568 >> 2] = $104; //@line 21470
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 21471
      HEAP32[$569 >> 2] = $106; //@line 21472
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 21473
      HEAP32[$570 >> 2] = $108; //@line 21474
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 21475
      HEAP32[$571 >> 2] = $110; //@line 21476
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 21477
      HEAP32[$572 >> 2] = $112; //@line 21478
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 21479
      HEAP32[$573 >> 2] = $114; //@line 21480
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 21481
      HEAP32[$574 >> 2] = $116; //@line 21482
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 21483
      HEAP32[$575 >> 2] = $118; //@line 21484
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 21485
      HEAP32[$576 >> 2] = $120; //@line 21486
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 21487
      HEAP32[$577 >> 2] = $122; //@line 21488
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 21489
      HEAP32[$578 >> 2] = $124; //@line 21490
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 21491
      HEAP32[$579 >> 2] = $126; //@line 21492
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 21493
      HEAP32[$580 >> 2] = $128; //@line 21494
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 21495
      HEAP32[$581 >> 2] = $130; //@line 21496
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 21497
      HEAP32[$582 >> 2] = $132; //@line 21498
      sp = STACKTOP; //@line 21499
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 21503
     ___async_unwind = 0; //@line 21504
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 21505
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 21506
     HEAP32[$517 >> 2] = $2; //@line 21507
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 21508
     HEAP32[$518 >> 2] = $4; //@line 21509
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 21510
     HEAP32[$519 >> 2] = $6; //@line 21511
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 21512
     HEAP32[$520 >> 2] = $8; //@line 21513
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 21514
     HEAP32[$521 >> 2] = $10; //@line 21515
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 21516
     HEAP32[$522 >> 2] = $12; //@line 21517
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 21518
     HEAP32[$523 >> 2] = $14; //@line 21519
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 21520
     HEAP32[$524 >> 2] = $16; //@line 21521
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 21522
     HEAP32[$525 >> 2] = $18; //@line 21523
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 21524
     HEAP32[$526 >> 2] = $20; //@line 21525
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 21526
     HEAP32[$527 >> 2] = $22; //@line 21527
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 21528
     HEAP32[$528 >> 2] = $24; //@line 21529
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 21530
     HEAP32[$529 >> 2] = $26; //@line 21531
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 21532
     HEAP32[$530 >> 2] = $28; //@line 21533
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 21534
     HEAP32[$531 >> 2] = $30; //@line 21535
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 21536
     HEAP32[$532 >> 2] = $32; //@line 21537
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 21538
     HEAP32[$533 >> 2] = $34; //@line 21539
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 21540
     HEAP32[$534 >> 2] = $36; //@line 21541
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 21542
     HEAP32[$535 >> 2] = $38; //@line 21543
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 21544
     HEAP32[$536 >> 2] = $157; //@line 21545
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 21546
     HEAP32[$537 >> 2] = $42; //@line 21547
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 21548
     HEAP32[$538 >> 2] = $44; //@line 21549
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 21550
     HEAP32[$539 >> 2] = $46; //@line 21551
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 21552
     HEAP32[$540 >> 2] = $48; //@line 21553
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 21554
     HEAP32[$541 >> 2] = $50; //@line 21555
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 21556
     HEAP32[$542 >> 2] = $52; //@line 21557
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 21558
     HEAP32[$543 >> 2] = $54; //@line 21559
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 21560
     HEAP32[$544 >> 2] = $56; //@line 21561
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 21562
     HEAP32[$545 >> 2] = $58; //@line 21563
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 21564
     HEAP32[$546 >> 2] = $60; //@line 21565
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 21566
     HEAP32[$547 >> 2] = $62; //@line 21567
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 21568
     HEAP32[$548 >> 2] = $64; //@line 21569
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 21570
     HEAP32[$549 >> 2] = $66; //@line 21571
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 21572
     HEAP32[$550 >> 2] = $68; //@line 21573
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 21574
     HEAP32[$551 >> 2] = $70; //@line 21575
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 21576
     HEAP32[$552 >> 2] = $72; //@line 21577
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 21578
     HEAP32[$553 >> 2] = $74; //@line 21579
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 21580
     HEAP32[$554 >> 2] = $76; //@line 21581
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 21582
     HEAP32[$555 >> 2] = $78; //@line 21583
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 21584
     HEAP32[$556 >> 2] = $80; //@line 21585
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 21586
     HEAP32[$557 >> 2] = $82; //@line 21587
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 21588
     HEAP32[$558 >> 2] = $84; //@line 21589
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 21590
     HEAP32[$559 >> 2] = $86; //@line 21591
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 21592
     HEAP32[$560 >> 2] = $88; //@line 21593
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 21594
     HEAP32[$561 >> 2] = $90; //@line 21595
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 21596
     HEAP32[$562 >> 2] = $92; //@line 21597
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 21598
     HEAP32[$563 >> 2] = $94; //@line 21599
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 21600
     HEAP32[$564 >> 2] = $96; //@line 21601
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 21602
     HEAP32[$565 >> 2] = $98; //@line 21603
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 21604
     HEAP32[$566 >> 2] = $100; //@line 21605
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 21606
     HEAP32[$567 >> 2] = $102; //@line 21607
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 21608
     HEAP32[$568 >> 2] = $104; //@line 21609
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 21610
     HEAP32[$569 >> 2] = $106; //@line 21611
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 21612
     HEAP32[$570 >> 2] = $108; //@line 21613
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 21614
     HEAP32[$571 >> 2] = $110; //@line 21615
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 21616
     HEAP32[$572 >> 2] = $112; //@line 21617
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 21618
     HEAP32[$573 >> 2] = $114; //@line 21619
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 21620
     HEAP32[$574 >> 2] = $116; //@line 21621
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 21622
     HEAP32[$575 >> 2] = $118; //@line 21623
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 21624
     HEAP32[$576 >> 2] = $120; //@line 21625
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 21626
     HEAP32[$577 >> 2] = $122; //@line 21627
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 21628
     HEAP32[$578 >> 2] = $124; //@line 21629
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 21630
     HEAP32[$579 >> 2] = $126; //@line 21631
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 21632
     HEAP32[$580 >> 2] = $128; //@line 21633
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 21634
     HEAP32[$581 >> 2] = $130; //@line 21635
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 21636
     HEAP32[$582 >> 2] = $132; //@line 21637
     sp = STACKTOP; //@line 21638
     return;
    }
   case 55:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 21643
     break L2;
     break;
    }
   case 59:
    {
     $601 = HEAP32[$130 >> 2] | 0; //@line 21648
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 21651
     $604 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $601 + 60 | 0, $601 + 8 | 0, 20, $$1202$i) | 0; //@line 21652
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 21655
      $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 21656
      HEAP32[$605 >> 2] = $2; //@line 21657
      $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 21658
      HEAP32[$606 >> 2] = $4; //@line 21659
      $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 21660
      HEAP32[$607 >> 2] = $6; //@line 21661
      $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 21662
      HEAP32[$608 >> 2] = $8; //@line 21663
      $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 21664
      HEAP32[$609 >> 2] = $10; //@line 21665
      $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 21666
      HEAP32[$610 >> 2] = $12; //@line 21667
      $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 21668
      HEAP32[$611 >> 2] = $14; //@line 21669
      $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 21670
      HEAP32[$612 >> 2] = $16; //@line 21671
      $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 21672
      HEAP32[$613 >> 2] = $18; //@line 21673
      $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 21674
      HEAP32[$614 >> 2] = $20; //@line 21675
      $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 21676
      HEAP32[$615 >> 2] = $22; //@line 21677
      $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 21678
      HEAP32[$616 >> 2] = $24; //@line 21679
      $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 21680
      HEAP32[$617 >> 2] = $26; //@line 21681
      $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 21682
      HEAP32[$618 >> 2] = $28; //@line 21683
      $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 21684
      HEAP32[$619 >> 2] = $30; //@line 21685
      $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 21686
      HEAP32[$620 >> 2] = $32; //@line 21687
      $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 21688
      HEAP32[$621 >> 2] = $34; //@line 21689
      $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 21690
      HEAP32[$622 >> 2] = $36; //@line 21691
      $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 21692
      HEAP32[$623 >> 2] = $38; //@line 21693
      $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 21694
      HEAP32[$624 >> 2] = $157; //@line 21695
      $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 21696
      HEAP32[$625 >> 2] = $42; //@line 21697
      $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 21698
      HEAP32[$626 >> 2] = $44; //@line 21699
      $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 21700
      HEAP32[$627 >> 2] = $46; //@line 21701
      $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 21702
      HEAP32[$628 >> 2] = $48; //@line 21703
      $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 21704
      HEAP32[$629 >> 2] = $50; //@line 21705
      $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 21706
      HEAP32[$630 >> 2] = $52; //@line 21707
      $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 21708
      HEAP32[$631 >> 2] = $54; //@line 21709
      $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 21710
      HEAP32[$632 >> 2] = $56; //@line 21711
      $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 21712
      HEAP32[$633 >> 2] = $58; //@line 21713
      $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 21714
      HEAP32[$634 >> 2] = $60; //@line 21715
      $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 21716
      HEAP32[$635 >> 2] = $62; //@line 21717
      $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 21718
      HEAP32[$636 >> 2] = $64; //@line 21719
      $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 21720
      HEAP32[$637 >> 2] = $66; //@line 21721
      $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 21722
      HEAP32[$638 >> 2] = $68; //@line 21723
      $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 21724
      HEAP32[$639 >> 2] = $70; //@line 21725
      $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 21726
      HEAP32[$640 >> 2] = $72; //@line 21727
      $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 21728
      HEAP32[$641 >> 2] = $74; //@line 21729
      $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 21730
      HEAP32[$642 >> 2] = $76; //@line 21731
      $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 21732
      HEAP32[$643 >> 2] = $78; //@line 21733
      $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 21734
      HEAP32[$644 >> 2] = $80; //@line 21735
      $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 21736
      HEAP32[$645 >> 2] = $82; //@line 21737
      $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 21738
      HEAP32[$646 >> 2] = $84; //@line 21739
      $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 21740
      HEAP32[$647 >> 2] = $86; //@line 21741
      $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 21742
      HEAP32[$648 >> 2] = $88; //@line 21743
      $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 21744
      HEAP32[$649 >> 2] = $90; //@line 21745
      $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 21746
      HEAP32[$650 >> 2] = $92; //@line 21747
      $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 21748
      HEAP32[$651 >> 2] = $94; //@line 21749
      $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 21750
      HEAP32[$652 >> 2] = $96; //@line 21751
      $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 21752
      HEAP32[$653 >> 2] = $98; //@line 21753
      $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 21754
      HEAP32[$654 >> 2] = $100; //@line 21755
      $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 21756
      HEAP32[$655 >> 2] = $102; //@line 21757
      $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 21758
      HEAP32[$656 >> 2] = $104; //@line 21759
      $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 21760
      HEAP32[$657 >> 2] = $106; //@line 21761
      $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 21762
      HEAP32[$658 >> 2] = $108; //@line 21763
      $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 21764
      HEAP32[$659 >> 2] = $110; //@line 21765
      $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 21766
      HEAP32[$660 >> 2] = $112; //@line 21767
      $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 21768
      HEAP32[$661 >> 2] = $114; //@line 21769
      $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 21770
      HEAP32[$662 >> 2] = $116; //@line 21771
      $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 21772
      HEAP32[$663 >> 2] = $118; //@line 21773
      $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 21774
      HEAP32[$664 >> 2] = $120; //@line 21775
      $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 21776
      HEAP32[$665 >> 2] = $122; //@line 21777
      $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 21778
      HEAP32[$666 >> 2] = $124; //@line 21779
      $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 21780
      HEAP32[$667 >> 2] = $126; //@line 21781
      $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 21782
      HEAP32[$668 >> 2] = $128; //@line 21783
      $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 21784
      HEAP32[$669 >> 2] = $130; //@line 21785
      $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 21786
      HEAP32[$670 >> 2] = $132; //@line 21787
      sp = STACKTOP; //@line 21788
      return;
     }
     HEAP8[___async_retval >> 0] = $604; //@line 21792
     ___async_unwind = 0; //@line 21793
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 21794
     $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 21795
     HEAP32[$605 >> 2] = $2; //@line 21796
     $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 21797
     HEAP32[$606 >> 2] = $4; //@line 21798
     $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 21799
     HEAP32[$607 >> 2] = $6; //@line 21800
     $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 21801
     HEAP32[$608 >> 2] = $8; //@line 21802
     $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 21803
     HEAP32[$609 >> 2] = $10; //@line 21804
     $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 21805
     HEAP32[$610 >> 2] = $12; //@line 21806
     $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 21807
     HEAP32[$611 >> 2] = $14; //@line 21808
     $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 21809
     HEAP32[$612 >> 2] = $16; //@line 21810
     $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 21811
     HEAP32[$613 >> 2] = $18; //@line 21812
     $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 21813
     HEAP32[$614 >> 2] = $20; //@line 21814
     $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 21815
     HEAP32[$615 >> 2] = $22; //@line 21816
     $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 21817
     HEAP32[$616 >> 2] = $24; //@line 21818
     $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 21819
     HEAP32[$617 >> 2] = $26; //@line 21820
     $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 21821
     HEAP32[$618 >> 2] = $28; //@line 21822
     $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 21823
     HEAP32[$619 >> 2] = $30; //@line 21824
     $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 21825
     HEAP32[$620 >> 2] = $32; //@line 21826
     $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 21827
     HEAP32[$621 >> 2] = $34; //@line 21828
     $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 21829
     HEAP32[$622 >> 2] = $36; //@line 21830
     $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 21831
     HEAP32[$623 >> 2] = $38; //@line 21832
     $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 21833
     HEAP32[$624 >> 2] = $157; //@line 21834
     $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 21835
     HEAP32[$625 >> 2] = $42; //@line 21836
     $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 21837
     HEAP32[$626 >> 2] = $44; //@line 21838
     $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 21839
     HEAP32[$627 >> 2] = $46; //@line 21840
     $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 21841
     HEAP32[$628 >> 2] = $48; //@line 21842
     $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 21843
     HEAP32[$629 >> 2] = $50; //@line 21844
     $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 21845
     HEAP32[$630 >> 2] = $52; //@line 21846
     $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 21847
     HEAP32[$631 >> 2] = $54; //@line 21848
     $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 21849
     HEAP32[$632 >> 2] = $56; //@line 21850
     $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 21851
     HEAP32[$633 >> 2] = $58; //@line 21852
     $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 21853
     HEAP32[$634 >> 2] = $60; //@line 21854
     $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 21855
     HEAP32[$635 >> 2] = $62; //@line 21856
     $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 21857
     HEAP32[$636 >> 2] = $64; //@line 21858
     $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 21859
     HEAP32[$637 >> 2] = $66; //@line 21860
     $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 21861
     HEAP32[$638 >> 2] = $68; //@line 21862
     $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 21863
     HEAP32[$639 >> 2] = $70; //@line 21864
     $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 21865
     HEAP32[$640 >> 2] = $72; //@line 21866
     $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 21867
     HEAP32[$641 >> 2] = $74; //@line 21868
     $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 21869
     HEAP32[$642 >> 2] = $76; //@line 21870
     $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 21871
     HEAP32[$643 >> 2] = $78; //@line 21872
     $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 21873
     HEAP32[$644 >> 2] = $80; //@line 21874
     $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 21875
     HEAP32[$645 >> 2] = $82; //@line 21876
     $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 21877
     HEAP32[$646 >> 2] = $84; //@line 21878
     $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 21879
     HEAP32[$647 >> 2] = $86; //@line 21880
     $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 21881
     HEAP32[$648 >> 2] = $88; //@line 21882
     $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 21883
     HEAP32[$649 >> 2] = $90; //@line 21884
     $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 21885
     HEAP32[$650 >> 2] = $92; //@line 21886
     $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 21887
     HEAP32[$651 >> 2] = $94; //@line 21888
     $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 21889
     HEAP32[$652 >> 2] = $96; //@line 21890
     $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 21891
     HEAP32[$653 >> 2] = $98; //@line 21892
     $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 21893
     HEAP32[$654 >> 2] = $100; //@line 21894
     $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 21895
     HEAP32[$655 >> 2] = $102; //@line 21896
     $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 21897
     HEAP32[$656 >> 2] = $104; //@line 21898
     $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 21899
     HEAP32[$657 >> 2] = $106; //@line 21900
     $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 21901
     HEAP32[$658 >> 2] = $108; //@line 21902
     $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 21903
     HEAP32[$659 >> 2] = $110; //@line 21904
     $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 21905
     HEAP32[$660 >> 2] = $112; //@line 21906
     $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 21907
     HEAP32[$661 >> 2] = $114; //@line 21908
     $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 21909
     HEAP32[$662 >> 2] = $116; //@line 21910
     $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 21911
     HEAP32[$663 >> 2] = $118; //@line 21912
     $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 21913
     HEAP32[$664 >> 2] = $120; //@line 21914
     $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 21915
     HEAP32[$665 >> 2] = $122; //@line 21916
     $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 21917
     HEAP32[$666 >> 2] = $124; //@line 21918
     $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 21919
     HEAP32[$667 >> 2] = $126; //@line 21920
     $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 21921
     HEAP32[$668 >> 2] = $128; //@line 21922
     $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 21923
     HEAP32[$669 >> 2] = $130; //@line 21924
     $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 21925
     HEAP32[$670 >> 2] = $132; //@line 21926
     sp = STACKTOP; //@line 21927
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 21932
     $672 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $84, $88, 11, $$1202$i) | 0; //@line 21933
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 21936
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 21937
      HEAP32[$673 >> 2] = $2; //@line 21938
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 21939
      HEAP32[$674 >> 2] = $4; //@line 21940
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 21941
      HEAP32[$675 >> 2] = $6; //@line 21942
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 21943
      HEAP32[$676 >> 2] = $8; //@line 21944
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 21945
      HEAP32[$677 >> 2] = $10; //@line 21946
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 21947
      HEAP32[$678 >> 2] = $12; //@line 21948
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 21949
      HEAP32[$679 >> 2] = $14; //@line 21950
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 21951
      HEAP32[$680 >> 2] = $16; //@line 21952
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 21953
      HEAP32[$681 >> 2] = $18; //@line 21954
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 21955
      HEAP32[$682 >> 2] = $20; //@line 21956
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 21957
      HEAP32[$683 >> 2] = $22; //@line 21958
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 21959
      HEAP32[$684 >> 2] = $24; //@line 21960
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 21961
      HEAP32[$685 >> 2] = $26; //@line 21962
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 21963
      HEAP32[$686 >> 2] = $28; //@line 21964
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 21965
      HEAP32[$687 >> 2] = $30; //@line 21966
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 21967
      HEAP32[$688 >> 2] = $32; //@line 21968
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 21969
      HEAP32[$689 >> 2] = $34; //@line 21970
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 21971
      HEAP32[$690 >> 2] = $36; //@line 21972
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 21973
      HEAP32[$691 >> 2] = $38; //@line 21974
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 21975
      HEAP32[$692 >> 2] = $157; //@line 21976
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 21977
      HEAP32[$693 >> 2] = $42; //@line 21978
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 21979
      HEAP32[$694 >> 2] = $44; //@line 21980
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 21981
      HEAP32[$695 >> 2] = $46; //@line 21982
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 21983
      HEAP32[$696 >> 2] = $48; //@line 21984
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 21985
      HEAP32[$697 >> 2] = $50; //@line 21986
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 21987
      HEAP32[$698 >> 2] = $52; //@line 21988
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 21989
      HEAP32[$699 >> 2] = $54; //@line 21990
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 21991
      HEAP32[$700 >> 2] = $56; //@line 21992
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 21993
      HEAP32[$701 >> 2] = $58; //@line 21994
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 21995
      HEAP32[$702 >> 2] = $60; //@line 21996
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 21997
      HEAP32[$703 >> 2] = $62; //@line 21998
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 21999
      HEAP32[$704 >> 2] = $64; //@line 22000
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 22001
      HEAP32[$705 >> 2] = $66; //@line 22002
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 22003
      HEAP32[$706 >> 2] = $68; //@line 22004
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 22005
      HEAP32[$707 >> 2] = $70; //@line 22006
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 22007
      HEAP32[$708 >> 2] = $72; //@line 22008
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 22009
      HEAP32[$709 >> 2] = $74; //@line 22010
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 22011
      HEAP32[$710 >> 2] = $76; //@line 22012
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 22013
      HEAP32[$711 >> 2] = $78; //@line 22014
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 22015
      HEAP32[$712 >> 2] = $80; //@line 22016
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 22017
      HEAP32[$713 >> 2] = $82; //@line 22018
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 22019
      HEAP32[$714 >> 2] = $84; //@line 22020
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 22021
      HEAP32[$715 >> 2] = $86; //@line 22022
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 22023
      HEAP32[$716 >> 2] = $88; //@line 22024
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 22025
      HEAP32[$717 >> 2] = $90; //@line 22026
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 22027
      HEAP32[$718 >> 2] = $92; //@line 22028
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 22029
      HEAP32[$719 >> 2] = $94; //@line 22030
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 22031
      HEAP32[$720 >> 2] = $96; //@line 22032
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 22033
      HEAP32[$721 >> 2] = $98; //@line 22034
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 22035
      HEAP32[$722 >> 2] = $100; //@line 22036
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 22037
      HEAP32[$723 >> 2] = $102; //@line 22038
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 22039
      HEAP32[$724 >> 2] = $104; //@line 22040
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 22041
      HEAP32[$725 >> 2] = $106; //@line 22042
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 22043
      HEAP32[$726 >> 2] = $108; //@line 22044
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 22045
      HEAP32[$727 >> 2] = $110; //@line 22046
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 22047
      HEAP32[$728 >> 2] = $112; //@line 22048
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 22049
      HEAP32[$729 >> 2] = $114; //@line 22050
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 22051
      HEAP32[$730 >> 2] = $116; //@line 22052
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 22053
      HEAP32[$731 >> 2] = $118; //@line 22054
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 22055
      HEAP32[$732 >> 2] = $120; //@line 22056
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 22057
      HEAP32[$733 >> 2] = $122; //@line 22058
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 22059
      HEAP32[$734 >> 2] = $124; //@line 22060
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 22061
      HEAP32[$735 >> 2] = $126; //@line 22062
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 22063
      HEAP32[$736 >> 2] = $128; //@line 22064
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 22065
      HEAP32[$737 >> 2] = $130; //@line 22066
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 22067
      HEAP32[$738 >> 2] = $132; //@line 22068
      sp = STACKTOP; //@line 22069
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 22073
     ___async_unwind = 0; //@line 22074
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 22075
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 22076
     HEAP32[$673 >> 2] = $2; //@line 22077
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 22078
     HEAP32[$674 >> 2] = $4; //@line 22079
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 22080
     HEAP32[$675 >> 2] = $6; //@line 22081
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 22082
     HEAP32[$676 >> 2] = $8; //@line 22083
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 22084
     HEAP32[$677 >> 2] = $10; //@line 22085
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 22086
     HEAP32[$678 >> 2] = $12; //@line 22087
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 22088
     HEAP32[$679 >> 2] = $14; //@line 22089
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 22090
     HEAP32[$680 >> 2] = $16; //@line 22091
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 22092
     HEAP32[$681 >> 2] = $18; //@line 22093
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 22094
     HEAP32[$682 >> 2] = $20; //@line 22095
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 22096
     HEAP32[$683 >> 2] = $22; //@line 22097
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 22098
     HEAP32[$684 >> 2] = $24; //@line 22099
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 22100
     HEAP32[$685 >> 2] = $26; //@line 22101
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 22102
     HEAP32[$686 >> 2] = $28; //@line 22103
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 22104
     HEAP32[$687 >> 2] = $30; //@line 22105
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 22106
     HEAP32[$688 >> 2] = $32; //@line 22107
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 22108
     HEAP32[$689 >> 2] = $34; //@line 22109
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 22110
     HEAP32[$690 >> 2] = $36; //@line 22111
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 22112
     HEAP32[$691 >> 2] = $38; //@line 22113
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 22114
     HEAP32[$692 >> 2] = $157; //@line 22115
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 22116
     HEAP32[$693 >> 2] = $42; //@line 22117
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 22118
     HEAP32[$694 >> 2] = $44; //@line 22119
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 22120
     HEAP32[$695 >> 2] = $46; //@line 22121
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 22122
     HEAP32[$696 >> 2] = $48; //@line 22123
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 22124
     HEAP32[$697 >> 2] = $50; //@line 22125
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 22126
     HEAP32[$698 >> 2] = $52; //@line 22127
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 22128
     HEAP32[$699 >> 2] = $54; //@line 22129
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 22130
     HEAP32[$700 >> 2] = $56; //@line 22131
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 22132
     HEAP32[$701 >> 2] = $58; //@line 22133
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 22134
     HEAP32[$702 >> 2] = $60; //@line 22135
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 22136
     HEAP32[$703 >> 2] = $62; //@line 22137
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 22138
     HEAP32[$704 >> 2] = $64; //@line 22139
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 22140
     HEAP32[$705 >> 2] = $66; //@line 22141
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 22142
     HEAP32[$706 >> 2] = $68; //@line 22143
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 22144
     HEAP32[$707 >> 2] = $70; //@line 22145
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 22146
     HEAP32[$708 >> 2] = $72; //@line 22147
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 22148
     HEAP32[$709 >> 2] = $74; //@line 22149
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 22150
     HEAP32[$710 >> 2] = $76; //@line 22151
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 22152
     HEAP32[$711 >> 2] = $78; //@line 22153
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 22154
     HEAP32[$712 >> 2] = $80; //@line 22155
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 22156
     HEAP32[$713 >> 2] = $82; //@line 22157
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 22158
     HEAP32[$714 >> 2] = $84; //@line 22159
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 22160
     HEAP32[$715 >> 2] = $86; //@line 22161
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 22162
     HEAP32[$716 >> 2] = $88; //@line 22163
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 22164
     HEAP32[$717 >> 2] = $90; //@line 22165
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 22166
     HEAP32[$718 >> 2] = $92; //@line 22167
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 22168
     HEAP32[$719 >> 2] = $94; //@line 22169
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 22170
     HEAP32[$720 >> 2] = $96; //@line 22171
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 22172
     HEAP32[$721 >> 2] = $98; //@line 22173
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 22174
     HEAP32[$722 >> 2] = $100; //@line 22175
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 22176
     HEAP32[$723 >> 2] = $102; //@line 22177
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 22178
     HEAP32[$724 >> 2] = $104; //@line 22179
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 22180
     HEAP32[$725 >> 2] = $106; //@line 22181
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 22182
     HEAP32[$726 >> 2] = $108; //@line 22183
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 22184
     HEAP32[$727 >> 2] = $110; //@line 22185
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 22186
     HEAP32[$728 >> 2] = $112; //@line 22187
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 22188
     HEAP32[$729 >> 2] = $114; //@line 22189
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 22190
     HEAP32[$730 >> 2] = $116; //@line 22191
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 22192
     HEAP32[$731 >> 2] = $118; //@line 22193
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 22194
     HEAP32[$732 >> 2] = $120; //@line 22195
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 22196
     HEAP32[$733 >> 2] = $122; //@line 22197
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 22198
     HEAP32[$734 >> 2] = $124; //@line 22199
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 22200
     HEAP32[$735 >> 2] = $126; //@line 22201
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 22202
     HEAP32[$736 >> 2] = $128; //@line 22203
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 22204
     HEAP32[$737 >> 2] = $130; //@line 22205
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 22206
     HEAP32[$738 >> 2] = $132; //@line 22207
     sp = STACKTOP; //@line 22208
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 22213
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$130 >> 2] | 0; //@line 22218
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 22221
     $759 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 22222
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 22225
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 22226
      HEAP32[$760 >> 2] = $2; //@line 22227
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 22228
      HEAP32[$761 >> 2] = $4; //@line 22229
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 22230
      HEAP32[$762 >> 2] = $6; //@line 22231
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 22232
      HEAP32[$763 >> 2] = $8; //@line 22233
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 22234
      HEAP32[$764 >> 2] = $10; //@line 22235
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 22236
      HEAP32[$765 >> 2] = $12; //@line 22237
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 22238
      HEAP32[$766 >> 2] = $14; //@line 22239
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 22240
      HEAP32[$767 >> 2] = $16; //@line 22241
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 22242
      HEAP32[$768 >> 2] = $18; //@line 22243
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 22244
      HEAP32[$769 >> 2] = $20; //@line 22245
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 22246
      HEAP32[$770 >> 2] = $22; //@line 22247
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 22248
      HEAP32[$771 >> 2] = $24; //@line 22249
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 22250
      HEAP32[$772 >> 2] = $26; //@line 22251
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 22252
      HEAP32[$773 >> 2] = $28; //@line 22253
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 22254
      HEAP32[$774 >> 2] = $30; //@line 22255
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 22256
      HEAP32[$775 >> 2] = $32; //@line 22257
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 22258
      HEAP32[$776 >> 2] = $34; //@line 22259
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 22260
      HEAP32[$777 >> 2] = $36; //@line 22261
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 22262
      HEAP32[$778 >> 2] = $38; //@line 22263
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 22264
      HEAP32[$779 >> 2] = $157; //@line 22265
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 22266
      HEAP32[$780 >> 2] = $42; //@line 22267
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 22268
      HEAP32[$781 >> 2] = $44; //@line 22269
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 22270
      HEAP32[$782 >> 2] = $46; //@line 22271
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 22272
      HEAP32[$783 >> 2] = $48; //@line 22273
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 22274
      HEAP32[$784 >> 2] = $50; //@line 22275
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 22276
      HEAP32[$785 >> 2] = $52; //@line 22277
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 22278
      HEAP32[$786 >> 2] = $54; //@line 22279
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 22280
      HEAP32[$787 >> 2] = $56; //@line 22281
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 22282
      HEAP32[$788 >> 2] = $58; //@line 22283
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 22284
      HEAP32[$789 >> 2] = $60; //@line 22285
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 22286
      HEAP32[$790 >> 2] = $62; //@line 22287
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 22288
      HEAP32[$791 >> 2] = $64; //@line 22289
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 22290
      HEAP32[$792 >> 2] = $66; //@line 22291
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 22292
      HEAP32[$793 >> 2] = $68; //@line 22293
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 22294
      HEAP32[$794 >> 2] = $70; //@line 22295
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 22296
      HEAP32[$795 >> 2] = $72; //@line 22297
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 22298
      HEAP32[$796 >> 2] = $74; //@line 22299
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 22300
      HEAP32[$797 >> 2] = $76; //@line 22301
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 22302
      HEAP32[$798 >> 2] = $78; //@line 22303
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 22304
      HEAP32[$799 >> 2] = $80; //@line 22305
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 22306
      HEAP32[$800 >> 2] = $82; //@line 22307
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 22308
      HEAP32[$801 >> 2] = $84; //@line 22309
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 22310
      HEAP32[$802 >> 2] = $86; //@line 22311
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 22312
      HEAP32[$803 >> 2] = $88; //@line 22313
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 22314
      HEAP32[$804 >> 2] = $90; //@line 22315
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 22316
      HEAP32[$805 >> 2] = $92; //@line 22317
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 22318
      HEAP32[$806 >> 2] = $94; //@line 22319
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 22320
      HEAP32[$807 >> 2] = $96; //@line 22321
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 22322
      HEAP32[$808 >> 2] = $98; //@line 22323
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 22324
      HEAP32[$809 >> 2] = $100; //@line 22325
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 22326
      HEAP32[$810 >> 2] = $102; //@line 22327
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 22328
      HEAP32[$811 >> 2] = $104; //@line 22329
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 22330
      HEAP32[$812 >> 2] = $106; //@line 22331
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 22332
      HEAP32[$813 >> 2] = $108; //@line 22333
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 22334
      HEAP32[$814 >> 2] = $110; //@line 22335
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 22336
      HEAP32[$815 >> 2] = $112; //@line 22337
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 22338
      HEAP32[$816 >> 2] = $114; //@line 22339
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 22340
      HEAP32[$817 >> 2] = $116; //@line 22341
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 22342
      HEAP32[$818 >> 2] = $118; //@line 22343
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 22344
      HEAP32[$819 >> 2] = $120; //@line 22345
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 22346
      HEAP32[$820 >> 2] = $122; //@line 22347
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 22348
      HEAP32[$821 >> 2] = $124; //@line 22349
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 22350
      HEAP32[$822 >> 2] = $126; //@line 22351
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 22352
      HEAP32[$823 >> 2] = $128; //@line 22353
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 22354
      HEAP32[$824 >> 2] = $130; //@line 22355
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 22356
      HEAP32[$825 >> 2] = $132; //@line 22357
      sp = STACKTOP; //@line 22358
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 22362
     ___async_unwind = 0; //@line 22363
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 22364
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 22365
     HEAP32[$760 >> 2] = $2; //@line 22366
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 22367
     HEAP32[$761 >> 2] = $4; //@line 22368
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 22369
     HEAP32[$762 >> 2] = $6; //@line 22370
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 22371
     HEAP32[$763 >> 2] = $8; //@line 22372
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 22373
     HEAP32[$764 >> 2] = $10; //@line 22374
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 22375
     HEAP32[$765 >> 2] = $12; //@line 22376
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 22377
     HEAP32[$766 >> 2] = $14; //@line 22378
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 22379
     HEAP32[$767 >> 2] = $16; //@line 22380
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 22381
     HEAP32[$768 >> 2] = $18; //@line 22382
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 22383
     HEAP32[$769 >> 2] = $20; //@line 22384
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 22385
     HEAP32[$770 >> 2] = $22; //@line 22386
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 22387
     HEAP32[$771 >> 2] = $24; //@line 22388
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 22389
     HEAP32[$772 >> 2] = $26; //@line 22390
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 22391
     HEAP32[$773 >> 2] = $28; //@line 22392
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 22393
     HEAP32[$774 >> 2] = $30; //@line 22394
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 22395
     HEAP32[$775 >> 2] = $32; //@line 22396
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 22397
     HEAP32[$776 >> 2] = $34; //@line 22398
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 22399
     HEAP32[$777 >> 2] = $36; //@line 22400
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 22401
     HEAP32[$778 >> 2] = $38; //@line 22402
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 22403
     HEAP32[$779 >> 2] = $157; //@line 22404
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 22405
     HEAP32[$780 >> 2] = $42; //@line 22406
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 22407
     HEAP32[$781 >> 2] = $44; //@line 22408
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 22409
     HEAP32[$782 >> 2] = $46; //@line 22410
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 22411
     HEAP32[$783 >> 2] = $48; //@line 22412
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 22413
     HEAP32[$784 >> 2] = $50; //@line 22414
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 22415
     HEAP32[$785 >> 2] = $52; //@line 22416
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 22417
     HEAP32[$786 >> 2] = $54; //@line 22418
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 22419
     HEAP32[$787 >> 2] = $56; //@line 22420
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 22421
     HEAP32[$788 >> 2] = $58; //@line 22422
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 22423
     HEAP32[$789 >> 2] = $60; //@line 22424
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 22425
     HEAP32[$790 >> 2] = $62; //@line 22426
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 22427
     HEAP32[$791 >> 2] = $64; //@line 22428
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 22429
     HEAP32[$792 >> 2] = $66; //@line 22430
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 22431
     HEAP32[$793 >> 2] = $68; //@line 22432
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 22433
     HEAP32[$794 >> 2] = $70; //@line 22434
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 22435
     HEAP32[$795 >> 2] = $72; //@line 22436
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 22437
     HEAP32[$796 >> 2] = $74; //@line 22438
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 22439
     HEAP32[$797 >> 2] = $76; //@line 22440
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 22441
     HEAP32[$798 >> 2] = $78; //@line 22442
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 22443
     HEAP32[$799 >> 2] = $80; //@line 22444
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 22445
     HEAP32[$800 >> 2] = $82; //@line 22446
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 22447
     HEAP32[$801 >> 2] = $84; //@line 22448
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 22449
     HEAP32[$802 >> 2] = $86; //@line 22450
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 22451
     HEAP32[$803 >> 2] = $88; //@line 22452
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 22453
     HEAP32[$804 >> 2] = $90; //@line 22454
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 22455
     HEAP32[$805 >> 2] = $92; //@line 22456
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 22457
     HEAP32[$806 >> 2] = $94; //@line 22458
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 22459
     HEAP32[$807 >> 2] = $96; //@line 22460
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 22461
     HEAP32[$808 >> 2] = $98; //@line 22462
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 22463
     HEAP32[$809 >> 2] = $100; //@line 22464
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 22465
     HEAP32[$810 >> 2] = $102; //@line 22466
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 22467
     HEAP32[$811 >> 2] = $104; //@line 22468
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 22469
     HEAP32[$812 >> 2] = $106; //@line 22470
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 22471
     HEAP32[$813 >> 2] = $108; //@line 22472
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 22473
     HEAP32[$814 >> 2] = $110; //@line 22474
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 22475
     HEAP32[$815 >> 2] = $112; //@line 22476
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 22477
     HEAP32[$816 >> 2] = $114; //@line 22478
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 22479
     HEAP32[$817 >> 2] = $116; //@line 22480
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 22481
     HEAP32[$818 >> 2] = $118; //@line 22482
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 22483
     HEAP32[$819 >> 2] = $120; //@line 22484
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 22485
     HEAP32[$820 >> 2] = $122; //@line 22486
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 22487
     HEAP32[$821 >> 2] = $124; //@line 22488
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 22489
     HEAP32[$822 >> 2] = $126; //@line 22490
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 22491
     HEAP32[$823 >> 2] = $128; //@line 22492
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 22493
     HEAP32[$824 >> 2] = $130; //@line 22494
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 22495
     HEAP32[$825 >> 2] = $132; //@line 22496
     sp = STACKTOP; //@line 22497
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3737, 5086, $110); //@line 22502
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 22507
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 22512
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 22517
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 22522
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3737, 5389, $128); //@line 22527
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $18 | 0) >= ($10 | 0)) {
      $936 = ___async_retval; //@line 22536
      HEAP32[$936 >> 2] = $32; //@line 22537
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 22543
      HEAP32[$82 >> 2] = $926; //@line 22544
      $927 = $926; //@line 22545
      $929 = $18 - $927 + $10 | 0; //@line 22547
      HEAP16[$100 + 24 >> 1] = $929; //@line 22550
      if ($929 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $927; //@line 22555
       $936 = ___async_retval; //@line 22556
       HEAP32[$936 >> 2] = $32; //@line 22557
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 22561
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 22564
     $936 = ___async_retval; //@line 22565
     HEAP32[$936 >> 2] = $32; //@line 22566
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3737, 4697, $114); //@line 22572
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 22576
 $936 = ___async_retval; //@line 22577
 HEAP32[$936 >> 2] = $32; //@line 22578
 return;
}
function _sn_coap_parser__async_cb_83($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 12979
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12981
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12983
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12985
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12987
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12989
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12991
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12993
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12995
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12997
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12999
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13001
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13003
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13005
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13007
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13009
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13011
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13013
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13015
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13017
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 13021
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 13023
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 13025
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 13027
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 13029
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 13031
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 13033
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 13035
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 13037
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 13039
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 13041
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 13043
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 13045
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 13047
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 13049
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 13051
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 13053
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 13055
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 13057
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 13059
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 13061
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 13063
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 13065
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 13067
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 13069
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 13071
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 13073
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 13075
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 13077
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 13079
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 13081
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 13083
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 13085
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 13087
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 13089
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 13091
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 13093
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 13095
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 13097
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 13099
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 13101
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 13103
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 13105
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 13107
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 13109
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 13111
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 13117
   L3 : while (1) {
    $917 = HEAP32[$4 >> 2] | 0; //@line 13119
    $918 = $917 - $18 | 0; //@line 13120
    $137 = $917; //@line 13123
    if (($918 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 13130
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 13133
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 13136
     break;
    }
    $140 = $trunc277$i & 15; //@line 13140
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 13141
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 13146
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 13154
      $$sink214$i = 13; //@line 13154
      $$sink3$i = 1; //@line 13154
      label = 8; //@line 13155
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 13167
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 13167
      $$sink3$i = 2; //@line 13167
      label = 8; //@line 13168
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 13172
      $159 = $137; //@line 13172
      $937 = $917; //@line 13172
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 13176
     $154 = $137 + $$sink3$i | 0; //@line 13178
     HEAP32[$82 >> 2] = $154; //@line 13179
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 13181
     $159 = $154; //@line 13181
     $937 = $154; //@line 13181
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 13184
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 13188
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 13196
      $$sink216$i = 13; //@line 13196
      $$sink8$i = 1; //@line 13196
      label = 13; //@line 13197
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 13209
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 13209
      $$sink8$i = 2; //@line 13209
      label = 13; //@line 13210
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 13214
      $174 = $937; //@line 13214
      $215 = $159; //@line 13214
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 13218
     $171 = $159 + $$sink8$i | 0; //@line 13220
     HEAP32[$82 >> 2] = $171; //@line 13221
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 13223
     $174 = $171; //@line 13223
     $215 = $171; //@line 13223
    }
    $$1202$i = $$1202$in$i & 65535; //@line 13225
    $175 = $104 - $174 & 65535; //@line 13227
    $trunc$i = $157 & 65535; //@line 13228
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 13232
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 13240
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 13245
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 13250
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 13255
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 13260
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 13265
         break L3;
         break;
        }
       case 11:
        {
         label = 60; //@line 13270
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 13275
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 13286
          break L3;
         }
         $268 = $215 + 1 | 0; //@line 13289
         HEAP32[$82 >> 2] = $268; //@line 13290
         $269 = $$1202$in$i & 255; //@line 13291
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 13294
         } else {
          $$045$i221$i = $269; //@line 13296
          $$06$i220$i = 0; //@line 13296
          $274 = $268; //@line 13296
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 13298
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 13300
           HEAP32[$82 >> 2] = $274; //@line 13301
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 13304
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 13307
            break;
           } else {
            $$06$i220$i = $277; //@line 13310
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 13316
         $$reg2mem$0 = $157; //@line 13317
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 13324
          break L3;
         }
         $586 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 13328
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 13332
          break L3;
         }
         $589 = $215 + 1 | 0; //@line 13335
         HEAP32[$82 >> 2] = $589; //@line 13336
         $590 = $$1202$in$i & 255; //@line 13337
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 13340
         } else {
          $$045$i263$i = $590; //@line 13342
          $$06$i262$i = 0; //@line 13342
          $595 = $589; //@line 13342
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 13344
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 13346
           HEAP32[$82 >> 2] = $595; //@line 13347
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 13350
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 13353
            break;
           } else {
            $$06$i262$i = $598; //@line 13356
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 13360
         $$reg2mem$0 = $157; //@line 13361
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 13368
          break L3;
         }
         $742 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 13372
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 13376
          break L3;
         }
         $745 = $215 + 1 | 0; //@line 13379
         HEAP32[$82 >> 2] = $745; //@line 13380
         $746 = $$1202$in$i & 255; //@line 13381
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 13384
         } else {
          $$045$i270$i = $746; //@line 13386
          $$06$i269$i = 0; //@line 13386
          $751 = $745; //@line 13386
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 13388
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 13390
           HEAP32[$82 >> 2] = $751; //@line 13391
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 13394
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 13397
            break;
           } else {
            $$06$i269$i = $754; //@line 13400
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 13404
         $$reg2mem$0 = $157; //@line 13405
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 13412
          break L3;
         }
         $829 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 13416
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 13420
          break L3;
         }
         $832 = $215 + 1 | 0; //@line 13423
         HEAP32[$82 >> 2] = $832; //@line 13424
         $833 = $$1202$in$i & 255; //@line 13425
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 13428
         } else {
          $$045$i256$i = $833; //@line 13430
          $$06$i255$i = 0; //@line 13430
          $838 = $832; //@line 13430
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 13432
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 13434
           HEAP32[$82 >> 2] = $838; //@line 13435
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 13438
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 13441
            break;
           } else {
            $$06$i255$i = $841; //@line 13444
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 13448
         $$reg2mem$0 = $157; //@line 13449
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 13456
          break L3;
         }
         $845 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 13460
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 13464
          break L3;
         }
         $848 = $215 + 1 | 0; //@line 13467
         HEAP32[$82 >> 2] = $848; //@line 13468
         $849 = $$1202$in$i & 255; //@line 13469
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 13472
         } else {
          $$045$i249$i = $849; //@line 13474
          $$06$i248$i = 0; //@line 13474
          $854 = $848; //@line 13474
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 13476
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 13478
           HEAP32[$82 >> 2] = $854; //@line 13479
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 13482
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 13485
            break;
           } else {
            $$06$i248$i = $857; //@line 13488
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 13492
         $$reg2mem$0 = $157; //@line 13493
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 13500
          break L3;
         }
         $861 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 13504
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 13508
          break L3;
         }
         $864 = $215 + 1 | 0; //@line 13511
         HEAP32[$82 >> 2] = $864; //@line 13512
         $865 = $$1202$in$i & 255; //@line 13513
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 13516
         } else {
          $$045$i242$i = $865; //@line 13518
          $$06$i241$i = 0; //@line 13518
          $870 = $864; //@line 13518
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 13520
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 13522
           HEAP32[$82 >> 2] = $870; //@line 13523
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 13526
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 13529
            break;
           } else {
            $$06$i241$i = $873; //@line 13532
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 13536
         $$reg2mem$0 = $157; //@line 13537
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 13544
          break L3;
         }
         $877 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 13548
         $878 = HEAP8[$877 >> 0] | 0; //@line 13549
         if ($878 & 1) {
          label = 94; //@line 13553
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 13557
         $883 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 13559
         HEAP32[$82 >> 2] = $883; //@line 13560
         $884 = $$1202$in$i & 255; //@line 13561
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 13564
         } else {
          $$045$i235$i = $884; //@line 13566
          $$06$i234$i = 0; //@line 13566
          $889 = $883; //@line 13566
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 13568
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 13570
           HEAP32[$82 >> 2] = $889; //@line 13571
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 13574
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 13577
            break;
           } else {
            $$06$i234$i = $892; //@line 13580
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 13586
         $$reg2mem$0 = $157; //@line 13587
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 13594
          break L3;
         }
         $898 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 13598
         $899 = HEAP8[$898 >> 0] | 0; //@line 13599
         if ($899 & 2) {
          label = 100; //@line 13603
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 13607
         $904 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 13609
         HEAP32[$82 >> 2] = $904; //@line 13610
         $905 = $$1202$in$i & 255; //@line 13611
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 13614
         } else {
          $$045$i228$i = $905; //@line 13616
          $$06$i227$i = 0; //@line 13616
          $910 = $904; //@line 13616
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 13618
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 13620
           HEAP32[$82 >> 2] = $910; //@line 13621
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 13624
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 13627
            break;
           } else {
            $$06$i227$i = $913; //@line 13630
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 13636
         $$reg2mem$0 = $157; //@line 13637
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 13642
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 13652
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 13659
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 13665
     break;
    }
    $256 = $215 + 1 | 0; //@line 13668
    HEAP32[$82 >> 2] = $256; //@line 13669
    $257 = $$1202$in$i & 255; //@line 13670
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 13673
    } else {
     $$045$i$i = $257; //@line 13675
     $$06$i$i = 0; //@line 13675
     $262 = $256; //@line 13675
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 13677
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 13679
      HEAP32[$82 >> 2] = $262; //@line 13680
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 13683
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 13686
       break;
      } else {
       $$06$i$i = $265; //@line 13689
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 13693
    $$reg2mem$0 = $157; //@line 13694
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 13698
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 13703
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$120 >> 2] | 0; //@line 13708
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 13709
     $179 = FUNCTION_TABLE_ii[$178 & 15](68) | 0; //@line 13710
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 13713
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 13714
      HEAP16[$180 >> 1] = $175; //@line 13715
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 13716
      HEAP32[$181 >> 2] = $2; //@line 13717
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 13718
      HEAP32[$182 >> 2] = $4; //@line 13719
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 13720
      HEAP32[$183 >> 2] = $6; //@line 13721
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 13722
      HEAP32[$184 >> 2] = $124; //@line 13723
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 13724
      HEAP32[$185 >> 2] = $8; //@line 13725
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 13726
      HEAP32[$186 >> 2] = $10; //@line 13727
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 13728
      HEAP32[$187 >> 2] = $12; //@line 13729
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 13730
      HEAP32[$188 >> 2] = $14; //@line 13731
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 13732
      HEAP32[$189 >> 2] = $16; //@line 13733
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 13734
      HEAP32[$190 >> 2] = $18; //@line 13735
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 13736
      HEAP32[$191 >> 2] = $20; //@line 13737
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 13738
      HEAP32[$192 >> 2] = $22; //@line 13739
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 13740
      HEAP32[$193 >> 2] = $24; //@line 13741
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 13742
      HEAP32[$194 >> 2] = $26; //@line 13743
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 13744
      HEAP16[$195 >> 1] = $$1202$i; //@line 13745
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 13746
      HEAP32[$196 >> 2] = $28; //@line 13747
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 13748
      HEAP32[$197 >> 2] = $30; //@line 13749
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 13750
      HEAP32[$198 >> 2] = $32; //@line 13751
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 13752
      HEAP32[$199 >> 2] = $34; //@line 13753
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 13754
      HEAP32[$200 >> 2] = $157; //@line 13755
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 13756
      HEAP32[$201 >> 2] = $38; //@line 13757
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 13758
      HEAP32[$202 >> 2] = $$1202$in$i; //@line 13759
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 13760
      HEAP32[$203 >> 2] = $42; //@line 13761
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 13762
      HEAP32[$204 >> 2] = $36; //@line 13763
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 13764
      HEAP32[$205 >> 2] = $44; //@line 13765
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 13766
      HEAP32[$206 >> 2] = $46; //@line 13767
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 13768
      HEAP32[$207 >> 2] = $48; //@line 13769
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 13770
      HEAP32[$208 >> 2] = $50; //@line 13771
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 13772
      HEAP32[$209 >> 2] = $52; //@line 13773
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 13774
      HEAP32[$210 >> 2] = $54; //@line 13775
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 13776
      HEAP32[$211 >> 2] = $56; //@line 13777
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 13778
      HEAP32[$212 >> 2] = $58; //@line 13779
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 13780
      HEAP32[$213 >> 2] = $60; //@line 13781
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 13782
      HEAP32[$214 >> 2] = $215; //@line 13783
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 13784
      HEAP32[$216 >> 2] = $62; //@line 13785
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 13786
      HEAP32[$217 >> 2] = $64; //@line 13787
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 13788
      HEAP32[$218 >> 2] = $66; //@line 13789
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 13790
      HEAP32[$219 >> 2] = $68; //@line 13791
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 13792
      HEAP32[$220 >> 2] = $70; //@line 13793
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 13794
      HEAP32[$221 >> 2] = $72; //@line 13795
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 13796
      HEAP32[$222 >> 2] = $74; //@line 13797
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 13798
      HEAP32[$223 >> 2] = $76; //@line 13799
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 13800
      HEAP32[$224 >> 2] = $78; //@line 13801
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 13802
      HEAP32[$225 >> 2] = $80; //@line 13803
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 13804
      HEAP32[$226 >> 2] = $82; //@line 13805
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 13806
      HEAP32[$227 >> 2] = $84; //@line 13807
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 13808
      HEAP32[$228 >> 2] = $86; //@line 13809
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 13810
      HEAP32[$229 >> 2] = $88; //@line 13811
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 13812
      HEAP32[$230 >> 2] = $90; //@line 13813
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 13814
      HEAP32[$231 >> 2] = $92; //@line 13815
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 13816
      HEAP32[$232 >> 2] = $94; //@line 13817
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 13818
      HEAP32[$233 >> 2] = $96; //@line 13819
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 13820
      HEAP32[$234 >> 2] = $98; //@line 13821
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 13822
      HEAP32[$235 >> 2] = $100; //@line 13823
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 13824
      HEAP32[$236 >> 2] = $102; //@line 13825
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 13826
      HEAP32[$237 >> 2] = $104; //@line 13827
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 13828
      HEAP32[$238 >> 2] = $106; //@line 13829
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 13830
      HEAP16[$239 >> 1] = $trunc$i; //@line 13831
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 13832
      HEAP32[$240 >> 2] = $108; //@line 13833
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 13834
      HEAP32[$241 >> 2] = $110; //@line 13835
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 13836
      HEAP32[$242 >> 2] = $112; //@line 13837
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 13838
      HEAP32[$243 >> 2] = $114; //@line 13839
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 13840
      HEAP32[$244 >> 2] = $116; //@line 13841
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 13842
      HEAP32[$245 >> 2] = $118; //@line 13843
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 13844
      HEAP32[$246 >> 2] = $120; //@line 13845
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 13846
      HEAP32[$247 >> 2] = $122; //@line 13847
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 13848
      HEAP32[$248 >> 2] = $126; //@line 13849
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 13850
      HEAP32[$249 >> 2] = $128; //@line 13851
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 13852
      HEAP32[$250 >> 2] = $130; //@line 13853
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 13854
      HEAP32[$251 >> 2] = $132; //@line 13855
      sp = STACKTOP; //@line 13856
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 13860
     ___async_unwind = 0; //@line 13861
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 13862
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 13863
     HEAP16[$180 >> 1] = $175; //@line 13864
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 13865
     HEAP32[$181 >> 2] = $2; //@line 13866
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 13867
     HEAP32[$182 >> 2] = $4; //@line 13868
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 13869
     HEAP32[$183 >> 2] = $6; //@line 13870
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 13871
     HEAP32[$184 >> 2] = $124; //@line 13872
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 13873
     HEAP32[$185 >> 2] = $8; //@line 13874
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 13875
     HEAP32[$186 >> 2] = $10; //@line 13876
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 13877
     HEAP32[$187 >> 2] = $12; //@line 13878
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 13879
     HEAP32[$188 >> 2] = $14; //@line 13880
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 13881
     HEAP32[$189 >> 2] = $16; //@line 13882
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 13883
     HEAP32[$190 >> 2] = $18; //@line 13884
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 13885
     HEAP32[$191 >> 2] = $20; //@line 13886
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 13887
     HEAP32[$192 >> 2] = $22; //@line 13888
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 13889
     HEAP32[$193 >> 2] = $24; //@line 13890
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 13891
     HEAP32[$194 >> 2] = $26; //@line 13892
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 13893
     HEAP16[$195 >> 1] = $$1202$i; //@line 13894
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 13895
     HEAP32[$196 >> 2] = $28; //@line 13896
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 13897
     HEAP32[$197 >> 2] = $30; //@line 13898
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 13899
     HEAP32[$198 >> 2] = $32; //@line 13900
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 13901
     HEAP32[$199 >> 2] = $34; //@line 13902
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 13903
     HEAP32[$200 >> 2] = $157; //@line 13904
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 13905
     HEAP32[$201 >> 2] = $38; //@line 13906
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 13907
     HEAP32[$202 >> 2] = $$1202$in$i; //@line 13908
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 13909
     HEAP32[$203 >> 2] = $42; //@line 13910
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 13911
     HEAP32[$204 >> 2] = $36; //@line 13912
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 13913
     HEAP32[$205 >> 2] = $44; //@line 13914
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 13915
     HEAP32[$206 >> 2] = $46; //@line 13916
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 13917
     HEAP32[$207 >> 2] = $48; //@line 13918
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 13919
     HEAP32[$208 >> 2] = $50; //@line 13920
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 13921
     HEAP32[$209 >> 2] = $52; //@line 13922
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 13923
     HEAP32[$210 >> 2] = $54; //@line 13924
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 13925
     HEAP32[$211 >> 2] = $56; //@line 13926
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 13927
     HEAP32[$212 >> 2] = $58; //@line 13928
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 13929
     HEAP32[$213 >> 2] = $60; //@line 13930
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 13931
     HEAP32[$214 >> 2] = $215; //@line 13932
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 13933
     HEAP32[$216 >> 2] = $62; //@line 13934
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 13935
     HEAP32[$217 >> 2] = $64; //@line 13936
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 13937
     HEAP32[$218 >> 2] = $66; //@line 13938
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 13939
     HEAP32[$219 >> 2] = $68; //@line 13940
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 13941
     HEAP32[$220 >> 2] = $70; //@line 13942
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 13943
     HEAP32[$221 >> 2] = $72; //@line 13944
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 13945
     HEAP32[$222 >> 2] = $74; //@line 13946
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 13947
     HEAP32[$223 >> 2] = $76; //@line 13948
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 13949
     HEAP32[$224 >> 2] = $78; //@line 13950
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 13951
     HEAP32[$225 >> 2] = $80; //@line 13952
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 13953
     HEAP32[$226 >> 2] = $82; //@line 13954
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 13955
     HEAP32[$227 >> 2] = $84; //@line 13956
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 13957
     HEAP32[$228 >> 2] = $86; //@line 13958
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 13959
     HEAP32[$229 >> 2] = $88; //@line 13960
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 13961
     HEAP32[$230 >> 2] = $90; //@line 13962
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 13963
     HEAP32[$231 >> 2] = $92; //@line 13964
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 13965
     HEAP32[$232 >> 2] = $94; //@line 13966
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 13967
     HEAP32[$233 >> 2] = $96; //@line 13968
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 13969
     HEAP32[$234 >> 2] = $98; //@line 13970
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 13971
     HEAP32[$235 >> 2] = $100; //@line 13972
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 13973
     HEAP32[$236 >> 2] = $102; //@line 13974
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 13975
     HEAP32[$237 >> 2] = $104; //@line 13976
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 13977
     HEAP32[$238 >> 2] = $106; //@line 13978
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 13979
     HEAP16[$239 >> 1] = $trunc$i; //@line 13980
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 13981
     HEAP32[$240 >> 2] = $108; //@line 13982
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 13983
     HEAP32[$241 >> 2] = $110; //@line 13984
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 13985
     HEAP32[$242 >> 2] = $112; //@line 13986
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 13987
     HEAP32[$243 >> 2] = $114; //@line 13988
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 13989
     HEAP32[$244 >> 2] = $116; //@line 13990
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 13991
     HEAP32[$245 >> 2] = $118; //@line 13992
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 13993
     HEAP32[$246 >> 2] = $120; //@line 13994
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 13995
     HEAP32[$247 >> 2] = $122; //@line 13996
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 13997
     HEAP32[$248 >> 2] = $126; //@line 13998
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 13999
     HEAP32[$249 >> 2] = $128; //@line 14000
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 14001
     HEAP32[$250 >> 2] = $130; //@line 14002
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 14003
     HEAP32[$251 >> 2] = $132; //@line 14004
     sp = STACKTOP; //@line 14005
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $118); //@line 14010
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 14015
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 14020
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$130 >> 2] | 0; //@line 14024
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 14030
       $289 = $215 + 1 | 0; //@line 14031
       HEAP32[$82 >> 2] = $289; //@line 14032
       $290 = HEAP32[$120 >> 2] | 0; //@line 14033
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 14034
       $291 = FUNCTION_TABLE_ii[$290 & 15]($$1202$i) | 0; //@line 14035
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 14038
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 14039
        HEAP32[$292 >> 2] = $2; //@line 14040
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 14041
        HEAP32[$293 >> 2] = $4; //@line 14042
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 14043
        HEAP32[$294 >> 2] = $6; //@line 14044
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 14045
        HEAP32[$295 >> 2] = $8; //@line 14046
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 14047
        HEAP32[$296 >> 2] = $10; //@line 14048
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 14049
        HEAP32[$297 >> 2] = $12; //@line 14050
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 14051
        HEAP32[$298 >> 2] = $14; //@line 14052
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 14053
        HEAP32[$299 >> 2] = $16; //@line 14054
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 14055
        HEAP32[$300 >> 2] = $18; //@line 14056
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 14057
        HEAP32[$301 >> 2] = $20; //@line 14058
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 14059
        HEAP32[$302 >> 2] = $22; //@line 14060
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 14061
        HEAP32[$303 >> 2] = $24; //@line 14062
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 14063
        HEAP32[$304 >> 2] = $26; //@line 14064
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 14065
        HEAP32[$305 >> 2] = $28; //@line 14066
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 14067
        HEAP32[$306 >> 2] = $30; //@line 14068
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 14069
        HEAP32[$307 >> 2] = $32; //@line 14070
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 14071
        HEAP32[$308 >> 2] = $34; //@line 14072
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 14073
        HEAP32[$309 >> 2] = $36; //@line 14074
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 14075
        HEAP32[$310 >> 2] = $38; //@line 14076
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 14077
        HEAP32[$311 >> 2] = $157; //@line 14078
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 14079
        HEAP32[$312 >> 2] = $42; //@line 14080
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 14081
        HEAP32[$313 >> 2] = $44; //@line 14082
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 14083
        HEAP32[$314 >> 2] = $46; //@line 14084
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 14085
        HEAP32[$315 >> 2] = $48; //@line 14086
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 14087
        HEAP32[$316 >> 2] = $50; //@line 14088
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 14089
        HEAP32[$317 >> 2] = $52; //@line 14090
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 14091
        HEAP32[$318 >> 2] = $54; //@line 14092
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 14093
        HEAP32[$319 >> 2] = $56; //@line 14094
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 14095
        HEAP32[$320 >> 2] = $58; //@line 14096
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 14097
        HEAP32[$321 >> 2] = $60; //@line 14098
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 14099
        HEAP32[$322 >> 2] = $62; //@line 14100
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 14101
        HEAP32[$323 >> 2] = $64; //@line 14102
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 14103
        HEAP32[$324 >> 2] = $66; //@line 14104
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 14105
        HEAP32[$325 >> 2] = $68; //@line 14106
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 14107
        HEAP32[$326 >> 2] = $70; //@line 14108
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 14109
        HEAP32[$327 >> 2] = $72; //@line 14110
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 14111
        HEAP32[$328 >> 2] = $74; //@line 14112
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 14113
        HEAP32[$329 >> 2] = $76; //@line 14114
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 14115
        HEAP32[$330 >> 2] = $78; //@line 14116
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 14117
        HEAP32[$331 >> 2] = $80; //@line 14118
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 14119
        HEAP32[$332 >> 2] = $82; //@line 14120
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 14121
        HEAP32[$333 >> 2] = $84; //@line 14122
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 14123
        HEAP32[$334 >> 2] = $86; //@line 14124
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 14125
        HEAP32[$335 >> 2] = $88; //@line 14126
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 14127
        HEAP32[$336 >> 2] = $90; //@line 14128
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 14129
        HEAP32[$337 >> 2] = $92; //@line 14130
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 14131
        HEAP32[$338 >> 2] = $94; //@line 14132
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 14133
        HEAP32[$339 >> 2] = $96; //@line 14134
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 14135
        HEAP32[$340 >> 2] = $98; //@line 14136
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 14137
        HEAP32[$341 >> 2] = $100; //@line 14138
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 14139
        HEAP32[$342 >> 2] = $102; //@line 14140
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 14141
        HEAP32[$343 >> 2] = $104; //@line 14142
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 14143
        HEAP32[$344 >> 2] = $106; //@line 14144
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 14145
        HEAP32[$345 >> 2] = $108; //@line 14146
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 14147
        HEAP32[$346 >> 2] = $289; //@line 14148
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 14149
        HEAP32[$347 >> 2] = $110; //@line 14150
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 14151
        HEAP32[$348 >> 2] = $281; //@line 14152
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 14153
        HEAP32[$349 >> 2] = $112; //@line 14154
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 14155
        HEAP32[$350 >> 2] = $114; //@line 14156
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 14157
        HEAP32[$351 >> 2] = $116; //@line 14158
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 14159
        HEAP32[$352 >> 2] = $118; //@line 14160
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 14161
        HEAP32[$353 >> 2] = $120; //@line 14162
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 14163
        HEAP32[$354 >> 2] = $122; //@line 14164
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 14165
        HEAP32[$355 >> 2] = $124; //@line 14166
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 14167
        HEAP32[$356 >> 2] = $126; //@line 14168
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 14169
        HEAP32[$357 >> 2] = $128; //@line 14170
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 14171
        HEAP32[$358 >> 2] = $130; //@line 14172
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 14173
        HEAP32[$359 >> 2] = $132; //@line 14174
        sp = STACKTOP; //@line 14175
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 14179
       ___async_unwind = 0; //@line 14180
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 14181
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 14182
       HEAP32[$292 >> 2] = $2; //@line 14183
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 14184
       HEAP32[$293 >> 2] = $4; //@line 14185
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 14186
       HEAP32[$294 >> 2] = $6; //@line 14187
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 14188
       HEAP32[$295 >> 2] = $8; //@line 14189
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 14190
       HEAP32[$296 >> 2] = $10; //@line 14191
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 14192
       HEAP32[$297 >> 2] = $12; //@line 14193
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 14194
       HEAP32[$298 >> 2] = $14; //@line 14195
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 14196
       HEAP32[$299 >> 2] = $16; //@line 14197
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 14198
       HEAP32[$300 >> 2] = $18; //@line 14199
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 14200
       HEAP32[$301 >> 2] = $20; //@line 14201
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 14202
       HEAP32[$302 >> 2] = $22; //@line 14203
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 14204
       HEAP32[$303 >> 2] = $24; //@line 14205
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 14206
       HEAP32[$304 >> 2] = $26; //@line 14207
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 14208
       HEAP32[$305 >> 2] = $28; //@line 14209
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 14210
       HEAP32[$306 >> 2] = $30; //@line 14211
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 14212
       HEAP32[$307 >> 2] = $32; //@line 14213
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 14214
       HEAP32[$308 >> 2] = $34; //@line 14215
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 14216
       HEAP32[$309 >> 2] = $36; //@line 14217
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 14218
       HEAP32[$310 >> 2] = $38; //@line 14219
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 14220
       HEAP32[$311 >> 2] = $157; //@line 14221
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 14222
       HEAP32[$312 >> 2] = $42; //@line 14223
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 14224
       HEAP32[$313 >> 2] = $44; //@line 14225
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 14226
       HEAP32[$314 >> 2] = $46; //@line 14227
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 14228
       HEAP32[$315 >> 2] = $48; //@line 14229
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 14230
       HEAP32[$316 >> 2] = $50; //@line 14231
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 14232
       HEAP32[$317 >> 2] = $52; //@line 14233
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 14234
       HEAP32[$318 >> 2] = $54; //@line 14235
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 14236
       HEAP32[$319 >> 2] = $56; //@line 14237
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 14238
       HEAP32[$320 >> 2] = $58; //@line 14239
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 14240
       HEAP32[$321 >> 2] = $60; //@line 14241
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 14242
       HEAP32[$322 >> 2] = $62; //@line 14243
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 14244
       HEAP32[$323 >> 2] = $64; //@line 14245
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 14246
       HEAP32[$324 >> 2] = $66; //@line 14247
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 14248
       HEAP32[$325 >> 2] = $68; //@line 14249
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 14250
       HEAP32[$326 >> 2] = $70; //@line 14251
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 14252
       HEAP32[$327 >> 2] = $72; //@line 14253
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 14254
       HEAP32[$328 >> 2] = $74; //@line 14255
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 14256
       HEAP32[$329 >> 2] = $76; //@line 14257
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 14258
       HEAP32[$330 >> 2] = $78; //@line 14259
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 14260
       HEAP32[$331 >> 2] = $80; //@line 14261
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 14262
       HEAP32[$332 >> 2] = $82; //@line 14263
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 14264
       HEAP32[$333 >> 2] = $84; //@line 14265
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 14266
       HEAP32[$334 >> 2] = $86; //@line 14267
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 14268
       HEAP32[$335 >> 2] = $88; //@line 14269
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 14270
       HEAP32[$336 >> 2] = $90; //@line 14271
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 14272
       HEAP32[$337 >> 2] = $92; //@line 14273
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 14274
       HEAP32[$338 >> 2] = $94; //@line 14275
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 14276
       HEAP32[$339 >> 2] = $96; //@line 14277
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 14278
       HEAP32[$340 >> 2] = $98; //@line 14279
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 14280
       HEAP32[$341 >> 2] = $100; //@line 14281
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 14282
       HEAP32[$342 >> 2] = $102; //@line 14283
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 14284
       HEAP32[$343 >> 2] = $104; //@line 14285
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 14286
       HEAP32[$344 >> 2] = $106; //@line 14287
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 14288
       HEAP32[$345 >> 2] = $108; //@line 14289
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 14290
       HEAP32[$346 >> 2] = $289; //@line 14291
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 14292
       HEAP32[$347 >> 2] = $110; //@line 14293
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 14294
       HEAP32[$348 >> 2] = $281; //@line 14295
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 14296
       HEAP32[$349 >> 2] = $112; //@line 14297
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 14298
       HEAP32[$350 >> 2] = $114; //@line 14299
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 14300
       HEAP32[$351 >> 2] = $116; //@line 14301
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 14302
       HEAP32[$352 >> 2] = $118; //@line 14303
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 14304
       HEAP32[$353 >> 2] = $120; //@line 14305
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 14306
       HEAP32[$354 >> 2] = $122; //@line 14307
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 14308
       HEAP32[$355 >> 2] = $124; //@line 14309
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 14310
       HEAP32[$356 >> 2] = $126; //@line 14311
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 14312
       HEAP32[$357 >> 2] = $128; //@line 14313
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 14314
       HEAP32[$358 >> 2] = $130; //@line 14315
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 14316
       HEAP32[$359 >> 2] = $132; //@line 14317
       sp = STACKTOP; //@line 14318
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 14322
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$130 >> 2] | 0; //@line 14327
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 14329
     $363 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 14330
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 14333
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 14334
      HEAP32[$364 >> 2] = $2; //@line 14335
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 14336
      HEAP32[$365 >> 2] = $4; //@line 14337
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 14338
      HEAP32[$366 >> 2] = $6; //@line 14339
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 14340
      HEAP32[$367 >> 2] = $8; //@line 14341
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 14342
      HEAP32[$368 >> 2] = $10; //@line 14343
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 14344
      HEAP32[$369 >> 2] = $12; //@line 14345
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 14346
      HEAP32[$370 >> 2] = $14; //@line 14347
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 14348
      HEAP32[$371 >> 2] = $16; //@line 14349
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 14350
      HEAP32[$372 >> 2] = $18; //@line 14351
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 14352
      HEAP32[$373 >> 2] = $20; //@line 14353
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 14354
      HEAP32[$374 >> 2] = $22; //@line 14355
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 14356
      HEAP32[$375 >> 2] = $24; //@line 14357
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 14358
      HEAP32[$376 >> 2] = $26; //@line 14359
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 14360
      HEAP32[$377 >> 2] = $28; //@line 14361
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 14362
      HEAP32[$378 >> 2] = $30; //@line 14363
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 14364
      HEAP32[$379 >> 2] = $32; //@line 14365
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 14366
      HEAP32[$380 >> 2] = $34; //@line 14367
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 14368
      HEAP32[$381 >> 2] = $36; //@line 14369
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 14370
      HEAP32[$382 >> 2] = $38; //@line 14371
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 14372
      HEAP32[$383 >> 2] = $157; //@line 14373
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 14374
      HEAP32[$384 >> 2] = $42; //@line 14375
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 14376
      HEAP32[$385 >> 2] = $44; //@line 14377
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 14378
      HEAP32[$386 >> 2] = $46; //@line 14379
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 14380
      HEAP32[$387 >> 2] = $48; //@line 14381
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 14382
      HEAP32[$388 >> 2] = $50; //@line 14383
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 14384
      HEAP32[$389 >> 2] = $52; //@line 14385
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 14386
      HEAP32[$390 >> 2] = $54; //@line 14387
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 14388
      HEAP32[$391 >> 2] = $56; //@line 14389
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 14390
      HEAP32[$392 >> 2] = $58; //@line 14391
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 14392
      HEAP32[$393 >> 2] = $60; //@line 14393
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 14394
      HEAP32[$394 >> 2] = $62; //@line 14395
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 14396
      HEAP32[$395 >> 2] = $64; //@line 14397
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 14398
      HEAP32[$396 >> 2] = $66; //@line 14399
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 14400
      HEAP32[$397 >> 2] = $68; //@line 14401
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 14402
      HEAP32[$398 >> 2] = $70; //@line 14403
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 14404
      HEAP32[$399 >> 2] = $72; //@line 14405
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 14406
      HEAP32[$400 >> 2] = $74; //@line 14407
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 14408
      HEAP32[$401 >> 2] = $76; //@line 14409
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 14410
      HEAP32[$402 >> 2] = $78; //@line 14411
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 14412
      HEAP32[$403 >> 2] = $80; //@line 14413
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 14414
      HEAP32[$404 >> 2] = $82; //@line 14415
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 14416
      HEAP32[$405 >> 2] = $84; //@line 14417
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 14418
      HEAP32[$406 >> 2] = $86; //@line 14419
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 14420
      HEAP32[$407 >> 2] = $88; //@line 14421
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 14422
      HEAP32[$408 >> 2] = $90; //@line 14423
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 14424
      HEAP32[$409 >> 2] = $92; //@line 14425
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 14426
      HEAP32[$410 >> 2] = $94; //@line 14427
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 14428
      HEAP32[$411 >> 2] = $96; //@line 14429
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 14430
      HEAP32[$412 >> 2] = $98; //@line 14431
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 14432
      HEAP32[$413 >> 2] = $100; //@line 14433
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 14434
      HEAP32[$414 >> 2] = $102; //@line 14435
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 14436
      HEAP32[$415 >> 2] = $104; //@line 14437
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 14438
      HEAP32[$416 >> 2] = $106; //@line 14439
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 14440
      HEAP32[$417 >> 2] = $108; //@line 14441
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 14442
      HEAP32[$418 >> 2] = $110; //@line 14443
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 14444
      HEAP32[$419 >> 2] = $112; //@line 14445
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 14446
      HEAP32[$420 >> 2] = $114; //@line 14447
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 14448
      HEAP32[$421 >> 2] = $116; //@line 14449
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 14450
      HEAP32[$422 >> 2] = $118; //@line 14451
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 14452
      HEAP32[$423 >> 2] = $120; //@line 14453
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 14454
      HEAP32[$424 >> 2] = $122; //@line 14455
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 14456
      HEAP32[$425 >> 2] = $124; //@line 14457
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 14458
      HEAP32[$426 >> 2] = $126; //@line 14459
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 14460
      HEAP32[$427 >> 2] = $128; //@line 14461
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 14462
      HEAP32[$428 >> 2] = $130; //@line 14463
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 14464
      HEAP32[$429 >> 2] = $132; //@line 14465
      sp = STACKTOP; //@line 14466
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 14470
     ___async_unwind = 0; //@line 14471
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 14472
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 14473
     HEAP32[$364 >> 2] = $2; //@line 14474
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 14475
     HEAP32[$365 >> 2] = $4; //@line 14476
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 14477
     HEAP32[$366 >> 2] = $6; //@line 14478
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 14479
     HEAP32[$367 >> 2] = $8; //@line 14480
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 14481
     HEAP32[$368 >> 2] = $10; //@line 14482
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 14483
     HEAP32[$369 >> 2] = $12; //@line 14484
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 14485
     HEAP32[$370 >> 2] = $14; //@line 14486
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 14487
     HEAP32[$371 >> 2] = $16; //@line 14488
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 14489
     HEAP32[$372 >> 2] = $18; //@line 14490
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 14491
     HEAP32[$373 >> 2] = $20; //@line 14492
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 14493
     HEAP32[$374 >> 2] = $22; //@line 14494
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 14495
     HEAP32[$375 >> 2] = $24; //@line 14496
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 14497
     HEAP32[$376 >> 2] = $26; //@line 14498
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 14499
     HEAP32[$377 >> 2] = $28; //@line 14500
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 14501
     HEAP32[$378 >> 2] = $30; //@line 14502
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 14503
     HEAP32[$379 >> 2] = $32; //@line 14504
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 14505
     HEAP32[$380 >> 2] = $34; //@line 14506
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 14507
     HEAP32[$381 >> 2] = $36; //@line 14508
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 14509
     HEAP32[$382 >> 2] = $38; //@line 14510
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 14511
     HEAP32[$383 >> 2] = $157; //@line 14512
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 14513
     HEAP32[$384 >> 2] = $42; //@line 14514
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 14515
     HEAP32[$385 >> 2] = $44; //@line 14516
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 14517
     HEAP32[$386 >> 2] = $46; //@line 14518
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 14519
     HEAP32[$387 >> 2] = $48; //@line 14520
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 14521
     HEAP32[$388 >> 2] = $50; //@line 14522
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 14523
     HEAP32[$389 >> 2] = $52; //@line 14524
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 14525
     HEAP32[$390 >> 2] = $54; //@line 14526
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 14527
     HEAP32[$391 >> 2] = $56; //@line 14528
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 14529
     HEAP32[$392 >> 2] = $58; //@line 14530
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 14531
     HEAP32[$393 >> 2] = $60; //@line 14532
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 14533
     HEAP32[$394 >> 2] = $62; //@line 14534
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 14535
     HEAP32[$395 >> 2] = $64; //@line 14536
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 14537
     HEAP32[$396 >> 2] = $66; //@line 14538
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 14539
     HEAP32[$397 >> 2] = $68; //@line 14540
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 14541
     HEAP32[$398 >> 2] = $70; //@line 14542
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 14543
     HEAP32[$399 >> 2] = $72; //@line 14544
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 14545
     HEAP32[$400 >> 2] = $74; //@line 14546
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 14547
     HEAP32[$401 >> 2] = $76; //@line 14548
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 14549
     HEAP32[$402 >> 2] = $78; //@line 14550
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 14551
     HEAP32[$403 >> 2] = $80; //@line 14552
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 14553
     HEAP32[$404 >> 2] = $82; //@line 14554
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 14555
     HEAP32[$405 >> 2] = $84; //@line 14556
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 14557
     HEAP32[$406 >> 2] = $86; //@line 14558
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 14559
     HEAP32[$407 >> 2] = $88; //@line 14560
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 14561
     HEAP32[$408 >> 2] = $90; //@line 14562
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 14563
     HEAP32[$409 >> 2] = $92; //@line 14564
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 14565
     HEAP32[$410 >> 2] = $94; //@line 14566
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 14567
     HEAP32[$411 >> 2] = $96; //@line 14568
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 14569
     HEAP32[$412 >> 2] = $98; //@line 14570
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 14571
     HEAP32[$413 >> 2] = $100; //@line 14572
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 14573
     HEAP32[$414 >> 2] = $102; //@line 14574
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 14575
     HEAP32[$415 >> 2] = $104; //@line 14576
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 14577
     HEAP32[$416 >> 2] = $106; //@line 14578
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 14579
     HEAP32[$417 >> 2] = $108; //@line 14580
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 14581
     HEAP32[$418 >> 2] = $110; //@line 14582
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 14583
     HEAP32[$419 >> 2] = $112; //@line 14584
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 14585
     HEAP32[$420 >> 2] = $114; //@line 14586
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 14587
     HEAP32[$421 >> 2] = $116; //@line 14588
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 14589
     HEAP32[$422 >> 2] = $118; //@line 14590
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 14591
     HEAP32[$423 >> 2] = $120; //@line 14592
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 14593
     HEAP32[$424 >> 2] = $122; //@line 14594
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 14595
     HEAP32[$425 >> 2] = $124; //@line 14596
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 14597
     HEAP32[$426 >> 2] = $126; //@line 14598
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 14599
     HEAP32[$427 >> 2] = $128; //@line 14600
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 14601
     HEAP32[$428 >> 2] = $130; //@line 14602
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 14603
     HEAP32[$429 >> 2] = $132; //@line 14604
     sp = STACKTOP; //@line 14605
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 14610
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$130 >> 2] | 0; //@line 14614
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 14620
       $439 = $215 + 1 | 0; //@line 14621
       HEAP32[$82 >> 2] = $439; //@line 14622
       $440 = HEAP32[$120 >> 2] | 0; //@line 14623
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 14624
       $441 = FUNCTION_TABLE_ii[$440 & 15]($$1202$i) | 0; //@line 14625
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 14628
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 14629
        HEAP32[$442 >> 2] = $2; //@line 14630
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 14631
        HEAP32[$443 >> 2] = $4; //@line 14632
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 14633
        HEAP32[$444 >> 2] = $6; //@line 14634
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 14635
        HEAP32[$445 >> 2] = $8; //@line 14636
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 14637
        HEAP32[$446 >> 2] = $10; //@line 14638
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 14639
        HEAP32[$447 >> 2] = $12; //@line 14640
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 14641
        HEAP32[$448 >> 2] = $14; //@line 14642
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 14643
        HEAP32[$449 >> 2] = $16; //@line 14644
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 14645
        HEAP32[$450 >> 2] = $18; //@line 14646
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 14647
        HEAP32[$451 >> 2] = $20; //@line 14648
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 14649
        HEAP32[$452 >> 2] = $22; //@line 14650
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 14651
        HEAP32[$453 >> 2] = $24; //@line 14652
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 14653
        HEAP32[$454 >> 2] = $26; //@line 14654
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 14655
        HEAP32[$455 >> 2] = $28; //@line 14656
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 14657
        HEAP32[$456 >> 2] = $30; //@line 14658
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 14659
        HEAP32[$457 >> 2] = $32; //@line 14660
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 14661
        HEAP32[$458 >> 2] = $34; //@line 14662
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 14663
        HEAP32[$459 >> 2] = $36; //@line 14664
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 14665
        HEAP32[$460 >> 2] = $38; //@line 14666
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 14667
        HEAP32[$461 >> 2] = $157; //@line 14668
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 14669
        HEAP32[$462 >> 2] = $42; //@line 14670
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 14671
        HEAP32[$463 >> 2] = $44; //@line 14672
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 14673
        HEAP32[$464 >> 2] = $46; //@line 14674
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 14675
        HEAP32[$465 >> 2] = $48; //@line 14676
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 14677
        HEAP32[$466 >> 2] = $50; //@line 14678
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 14679
        HEAP32[$467 >> 2] = $52; //@line 14680
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 14681
        HEAP32[$468 >> 2] = $54; //@line 14682
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 14683
        HEAP32[$469 >> 2] = $56; //@line 14684
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 14685
        HEAP32[$470 >> 2] = $58; //@line 14686
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 14687
        HEAP32[$471 >> 2] = $60; //@line 14688
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 14689
        HEAP32[$472 >> 2] = $62; //@line 14690
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 14691
        HEAP32[$473 >> 2] = $64; //@line 14692
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 14693
        HEAP32[$474 >> 2] = $66; //@line 14694
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 14695
        HEAP32[$475 >> 2] = $68; //@line 14696
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 14697
        HEAP32[$476 >> 2] = $70; //@line 14698
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 14699
        HEAP32[$477 >> 2] = $72; //@line 14700
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 14701
        HEAP32[$478 >> 2] = $74; //@line 14702
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 14703
        HEAP32[$479 >> 2] = $76; //@line 14704
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 14705
        HEAP32[$480 >> 2] = $78; //@line 14706
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 14707
        HEAP32[$481 >> 2] = $80; //@line 14708
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 14709
        HEAP32[$482 >> 2] = $82; //@line 14710
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 14711
        HEAP32[$483 >> 2] = $84; //@line 14712
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 14713
        HEAP32[$484 >> 2] = $86; //@line 14714
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 14715
        HEAP32[$485 >> 2] = $88; //@line 14716
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 14717
        HEAP32[$486 >> 2] = $90; //@line 14718
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 14719
        HEAP32[$487 >> 2] = $92; //@line 14720
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 14721
        HEAP32[$488 >> 2] = $94; //@line 14722
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 14723
        HEAP32[$489 >> 2] = $96; //@line 14724
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 14725
        HEAP32[$490 >> 2] = $98; //@line 14726
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 14727
        HEAP32[$491 >> 2] = $100; //@line 14728
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 14729
        HEAP32[$492 >> 2] = $102; //@line 14730
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 14731
        HEAP32[$493 >> 2] = $104; //@line 14732
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 14733
        HEAP32[$494 >> 2] = $106; //@line 14734
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 14735
        HEAP32[$495 >> 2] = $108; //@line 14736
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 14737
        HEAP32[$496 >> 2] = $110; //@line 14738
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 14739
        HEAP32[$497 >> 2] = $112; //@line 14740
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 14741
        HEAP32[$498 >> 2] = $114; //@line 14742
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 14743
        HEAP32[$499 >> 2] = $116; //@line 14744
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 14745
        HEAP32[$500 >> 2] = $439; //@line 14746
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 14747
        HEAP32[$501 >> 2] = $118; //@line 14748
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 14749
        HEAP32[$502 >> 2] = $431; //@line 14750
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 14751
        HEAP32[$503 >> 2] = $120; //@line 14752
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 14753
        HEAP32[$504 >> 2] = $122; //@line 14754
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 14755
        HEAP32[$505 >> 2] = $124; //@line 14756
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 14757
        HEAP32[$506 >> 2] = $126; //@line 14758
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 14759
        HEAP32[$507 >> 2] = $128; //@line 14760
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 14761
        HEAP32[$508 >> 2] = $130; //@line 14762
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 14763
        HEAP32[$509 >> 2] = $132; //@line 14764
        sp = STACKTOP; //@line 14765
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 14769
       ___async_unwind = 0; //@line 14770
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 14771
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 14772
       HEAP32[$442 >> 2] = $2; //@line 14773
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 14774
       HEAP32[$443 >> 2] = $4; //@line 14775
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 14776
       HEAP32[$444 >> 2] = $6; //@line 14777
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 14778
       HEAP32[$445 >> 2] = $8; //@line 14779
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 14780
       HEAP32[$446 >> 2] = $10; //@line 14781
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 14782
       HEAP32[$447 >> 2] = $12; //@line 14783
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 14784
       HEAP32[$448 >> 2] = $14; //@line 14785
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 14786
       HEAP32[$449 >> 2] = $16; //@line 14787
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 14788
       HEAP32[$450 >> 2] = $18; //@line 14789
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 14790
       HEAP32[$451 >> 2] = $20; //@line 14791
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 14792
       HEAP32[$452 >> 2] = $22; //@line 14793
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 14794
       HEAP32[$453 >> 2] = $24; //@line 14795
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 14796
       HEAP32[$454 >> 2] = $26; //@line 14797
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 14798
       HEAP32[$455 >> 2] = $28; //@line 14799
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 14800
       HEAP32[$456 >> 2] = $30; //@line 14801
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 14802
       HEAP32[$457 >> 2] = $32; //@line 14803
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 14804
       HEAP32[$458 >> 2] = $34; //@line 14805
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 14806
       HEAP32[$459 >> 2] = $36; //@line 14807
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 14808
       HEAP32[$460 >> 2] = $38; //@line 14809
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 14810
       HEAP32[$461 >> 2] = $157; //@line 14811
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 14812
       HEAP32[$462 >> 2] = $42; //@line 14813
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 14814
       HEAP32[$463 >> 2] = $44; //@line 14815
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 14816
       HEAP32[$464 >> 2] = $46; //@line 14817
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 14818
       HEAP32[$465 >> 2] = $48; //@line 14819
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 14820
       HEAP32[$466 >> 2] = $50; //@line 14821
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 14822
       HEAP32[$467 >> 2] = $52; //@line 14823
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 14824
       HEAP32[$468 >> 2] = $54; //@line 14825
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 14826
       HEAP32[$469 >> 2] = $56; //@line 14827
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 14828
       HEAP32[$470 >> 2] = $58; //@line 14829
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 14830
       HEAP32[$471 >> 2] = $60; //@line 14831
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 14832
       HEAP32[$472 >> 2] = $62; //@line 14833
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 14834
       HEAP32[$473 >> 2] = $64; //@line 14835
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 14836
       HEAP32[$474 >> 2] = $66; //@line 14837
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 14838
       HEAP32[$475 >> 2] = $68; //@line 14839
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 14840
       HEAP32[$476 >> 2] = $70; //@line 14841
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 14842
       HEAP32[$477 >> 2] = $72; //@line 14843
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 14844
       HEAP32[$478 >> 2] = $74; //@line 14845
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 14846
       HEAP32[$479 >> 2] = $76; //@line 14847
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 14848
       HEAP32[$480 >> 2] = $78; //@line 14849
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 14850
       HEAP32[$481 >> 2] = $80; //@line 14851
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 14852
       HEAP32[$482 >> 2] = $82; //@line 14853
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 14854
       HEAP32[$483 >> 2] = $84; //@line 14855
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 14856
       HEAP32[$484 >> 2] = $86; //@line 14857
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 14858
       HEAP32[$485 >> 2] = $88; //@line 14859
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 14860
       HEAP32[$486 >> 2] = $90; //@line 14861
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 14862
       HEAP32[$487 >> 2] = $92; //@line 14863
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 14864
       HEAP32[$488 >> 2] = $94; //@line 14865
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 14866
       HEAP32[$489 >> 2] = $96; //@line 14867
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 14868
       HEAP32[$490 >> 2] = $98; //@line 14869
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 14870
       HEAP32[$491 >> 2] = $100; //@line 14871
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 14872
       HEAP32[$492 >> 2] = $102; //@line 14873
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 14874
       HEAP32[$493 >> 2] = $104; //@line 14875
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 14876
       HEAP32[$494 >> 2] = $106; //@line 14877
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 14878
       HEAP32[$495 >> 2] = $108; //@line 14879
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 14880
       HEAP32[$496 >> 2] = $110; //@line 14881
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 14882
       HEAP32[$497 >> 2] = $112; //@line 14883
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 14884
       HEAP32[$498 >> 2] = $114; //@line 14885
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 14886
       HEAP32[$499 >> 2] = $116; //@line 14887
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 14888
       HEAP32[$500 >> 2] = $439; //@line 14889
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 14890
       HEAP32[$501 >> 2] = $118; //@line 14891
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 14892
       HEAP32[$502 >> 2] = $431; //@line 14893
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 14894
       HEAP32[$503 >> 2] = $120; //@line 14895
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 14896
       HEAP32[$504 >> 2] = $122; //@line 14897
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 14898
       HEAP32[$505 >> 2] = $124; //@line 14899
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 14900
       HEAP32[$506 >> 2] = $126; //@line 14901
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 14902
       HEAP32[$507 >> 2] = $128; //@line 14903
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 14904
       HEAP32[$508 >> 2] = $130; //@line 14905
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 14906
       HEAP32[$509 >> 2] = $132; //@line 14907
       sp = STACKTOP; //@line 14908
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 14912
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$130 >> 2] | 0; //@line 14917
     $512 = $511 + 56 | 0; //@line 14918
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 14922
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 14926
     $516 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 14927
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 14930
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 14931
      HEAP32[$517 >> 2] = $2; //@line 14932
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 14933
      HEAP32[$518 >> 2] = $4; //@line 14934
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 14935
      HEAP32[$519 >> 2] = $6; //@line 14936
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 14937
      HEAP32[$520 >> 2] = $8; //@line 14938
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 14939
      HEAP32[$521 >> 2] = $10; //@line 14940
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 14941
      HEAP32[$522 >> 2] = $12; //@line 14942
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 14943
      HEAP32[$523 >> 2] = $14; //@line 14944
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 14945
      HEAP32[$524 >> 2] = $16; //@line 14946
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 14947
      HEAP32[$525 >> 2] = $18; //@line 14948
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 14949
      HEAP32[$526 >> 2] = $20; //@line 14950
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 14951
      HEAP32[$527 >> 2] = $22; //@line 14952
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 14953
      HEAP32[$528 >> 2] = $24; //@line 14954
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 14955
      HEAP32[$529 >> 2] = $26; //@line 14956
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 14957
      HEAP32[$530 >> 2] = $28; //@line 14958
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 14959
      HEAP32[$531 >> 2] = $30; //@line 14960
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 14961
      HEAP32[$532 >> 2] = $32; //@line 14962
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 14963
      HEAP32[$533 >> 2] = $34; //@line 14964
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 14965
      HEAP32[$534 >> 2] = $36; //@line 14966
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 14967
      HEAP32[$535 >> 2] = $38; //@line 14968
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 14969
      HEAP32[$536 >> 2] = $157; //@line 14970
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 14971
      HEAP32[$537 >> 2] = $42; //@line 14972
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 14973
      HEAP32[$538 >> 2] = $44; //@line 14974
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 14975
      HEAP32[$539 >> 2] = $46; //@line 14976
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 14977
      HEAP32[$540 >> 2] = $48; //@line 14978
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 14979
      HEAP32[$541 >> 2] = $50; //@line 14980
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 14981
      HEAP32[$542 >> 2] = $52; //@line 14982
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 14983
      HEAP32[$543 >> 2] = $54; //@line 14984
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 14985
      HEAP32[$544 >> 2] = $56; //@line 14986
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 14987
      HEAP32[$545 >> 2] = $58; //@line 14988
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 14989
      HEAP32[$546 >> 2] = $60; //@line 14990
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 14991
      HEAP32[$547 >> 2] = $62; //@line 14992
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 14993
      HEAP32[$548 >> 2] = $64; //@line 14994
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 14995
      HEAP32[$549 >> 2] = $66; //@line 14996
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 14997
      HEAP32[$550 >> 2] = $68; //@line 14998
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 14999
      HEAP32[$551 >> 2] = $70; //@line 15000
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 15001
      HEAP32[$552 >> 2] = $72; //@line 15002
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 15003
      HEAP32[$553 >> 2] = $74; //@line 15004
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 15005
      HEAP32[$554 >> 2] = $76; //@line 15006
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 15007
      HEAP32[$555 >> 2] = $78; //@line 15008
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 15009
      HEAP32[$556 >> 2] = $80; //@line 15010
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 15011
      HEAP32[$557 >> 2] = $82; //@line 15012
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 15013
      HEAP32[$558 >> 2] = $84; //@line 15014
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 15015
      HEAP32[$559 >> 2] = $86; //@line 15016
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 15017
      HEAP32[$560 >> 2] = $88; //@line 15018
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 15019
      HEAP32[$561 >> 2] = $90; //@line 15020
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 15021
      HEAP32[$562 >> 2] = $92; //@line 15022
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 15023
      HEAP32[$563 >> 2] = $94; //@line 15024
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 15025
      HEAP32[$564 >> 2] = $96; //@line 15026
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 15027
      HEAP32[$565 >> 2] = $98; //@line 15028
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 15029
      HEAP32[$566 >> 2] = $100; //@line 15030
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 15031
      HEAP32[$567 >> 2] = $102; //@line 15032
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 15033
      HEAP32[$568 >> 2] = $104; //@line 15034
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 15035
      HEAP32[$569 >> 2] = $106; //@line 15036
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 15037
      HEAP32[$570 >> 2] = $108; //@line 15038
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 15039
      HEAP32[$571 >> 2] = $110; //@line 15040
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 15041
      HEAP32[$572 >> 2] = $112; //@line 15042
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 15043
      HEAP32[$573 >> 2] = $114; //@line 15044
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 15045
      HEAP32[$574 >> 2] = $116; //@line 15046
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 15047
      HEAP32[$575 >> 2] = $118; //@line 15048
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 15049
      HEAP32[$576 >> 2] = $120; //@line 15050
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 15051
      HEAP32[$577 >> 2] = $122; //@line 15052
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 15053
      HEAP32[$578 >> 2] = $124; //@line 15054
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 15055
      HEAP32[$579 >> 2] = $126; //@line 15056
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 15057
      HEAP32[$580 >> 2] = $128; //@line 15058
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 15059
      HEAP32[$581 >> 2] = $130; //@line 15060
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 15061
      HEAP32[$582 >> 2] = $132; //@line 15062
      sp = STACKTOP; //@line 15063
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 15067
     ___async_unwind = 0; //@line 15068
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 15069
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 15070
     HEAP32[$517 >> 2] = $2; //@line 15071
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 15072
     HEAP32[$518 >> 2] = $4; //@line 15073
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 15074
     HEAP32[$519 >> 2] = $6; //@line 15075
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 15076
     HEAP32[$520 >> 2] = $8; //@line 15077
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 15078
     HEAP32[$521 >> 2] = $10; //@line 15079
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 15080
     HEAP32[$522 >> 2] = $12; //@line 15081
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 15082
     HEAP32[$523 >> 2] = $14; //@line 15083
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 15084
     HEAP32[$524 >> 2] = $16; //@line 15085
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 15086
     HEAP32[$525 >> 2] = $18; //@line 15087
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 15088
     HEAP32[$526 >> 2] = $20; //@line 15089
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 15090
     HEAP32[$527 >> 2] = $22; //@line 15091
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 15092
     HEAP32[$528 >> 2] = $24; //@line 15093
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 15094
     HEAP32[$529 >> 2] = $26; //@line 15095
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 15096
     HEAP32[$530 >> 2] = $28; //@line 15097
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 15098
     HEAP32[$531 >> 2] = $30; //@line 15099
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 15100
     HEAP32[$532 >> 2] = $32; //@line 15101
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 15102
     HEAP32[$533 >> 2] = $34; //@line 15103
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 15104
     HEAP32[$534 >> 2] = $36; //@line 15105
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 15106
     HEAP32[$535 >> 2] = $38; //@line 15107
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 15108
     HEAP32[$536 >> 2] = $157; //@line 15109
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 15110
     HEAP32[$537 >> 2] = $42; //@line 15111
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 15112
     HEAP32[$538 >> 2] = $44; //@line 15113
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 15114
     HEAP32[$539 >> 2] = $46; //@line 15115
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 15116
     HEAP32[$540 >> 2] = $48; //@line 15117
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 15118
     HEAP32[$541 >> 2] = $50; //@line 15119
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 15120
     HEAP32[$542 >> 2] = $52; //@line 15121
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 15122
     HEAP32[$543 >> 2] = $54; //@line 15123
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 15124
     HEAP32[$544 >> 2] = $56; //@line 15125
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 15126
     HEAP32[$545 >> 2] = $58; //@line 15127
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 15128
     HEAP32[$546 >> 2] = $60; //@line 15129
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 15130
     HEAP32[$547 >> 2] = $62; //@line 15131
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 15132
     HEAP32[$548 >> 2] = $64; //@line 15133
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 15134
     HEAP32[$549 >> 2] = $66; //@line 15135
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 15136
     HEAP32[$550 >> 2] = $68; //@line 15137
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 15138
     HEAP32[$551 >> 2] = $70; //@line 15139
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 15140
     HEAP32[$552 >> 2] = $72; //@line 15141
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 15142
     HEAP32[$553 >> 2] = $74; //@line 15143
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 15144
     HEAP32[$554 >> 2] = $76; //@line 15145
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 15146
     HEAP32[$555 >> 2] = $78; //@line 15147
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 15148
     HEAP32[$556 >> 2] = $80; //@line 15149
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 15150
     HEAP32[$557 >> 2] = $82; //@line 15151
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 15152
     HEAP32[$558 >> 2] = $84; //@line 15153
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 15154
     HEAP32[$559 >> 2] = $86; //@line 15155
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 15156
     HEAP32[$560 >> 2] = $88; //@line 15157
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 15158
     HEAP32[$561 >> 2] = $90; //@line 15159
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 15160
     HEAP32[$562 >> 2] = $92; //@line 15161
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 15162
     HEAP32[$563 >> 2] = $94; //@line 15163
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 15164
     HEAP32[$564 >> 2] = $96; //@line 15165
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 15166
     HEAP32[$565 >> 2] = $98; //@line 15167
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 15168
     HEAP32[$566 >> 2] = $100; //@line 15169
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 15170
     HEAP32[$567 >> 2] = $102; //@line 15171
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 15172
     HEAP32[$568 >> 2] = $104; //@line 15173
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 15174
     HEAP32[$569 >> 2] = $106; //@line 15175
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 15176
     HEAP32[$570 >> 2] = $108; //@line 15177
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 15178
     HEAP32[$571 >> 2] = $110; //@line 15179
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 15180
     HEAP32[$572 >> 2] = $112; //@line 15181
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 15182
     HEAP32[$573 >> 2] = $114; //@line 15183
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 15184
     HEAP32[$574 >> 2] = $116; //@line 15185
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 15186
     HEAP32[$575 >> 2] = $118; //@line 15187
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 15188
     HEAP32[$576 >> 2] = $120; //@line 15189
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 15190
     HEAP32[$577 >> 2] = $122; //@line 15191
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 15192
     HEAP32[$578 >> 2] = $124; //@line 15193
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 15194
     HEAP32[$579 >> 2] = $126; //@line 15195
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 15196
     HEAP32[$580 >> 2] = $128; //@line 15197
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 15198
     HEAP32[$581 >> 2] = $130; //@line 15199
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 15200
     HEAP32[$582 >> 2] = $132; //@line 15201
     sp = STACKTOP; //@line 15202
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 15207
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$130 >> 2] | 0; //@line 15212
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 15215
     $603 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 15216
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 15219
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 15220
      HEAP32[$604 >> 2] = $2; //@line 15221
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 15222
      HEAP32[$605 >> 2] = $4; //@line 15223
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 15224
      HEAP32[$606 >> 2] = $6; //@line 15225
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 15226
      HEAP32[$607 >> 2] = $8; //@line 15227
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 15228
      HEAP32[$608 >> 2] = $10; //@line 15229
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 15230
      HEAP32[$609 >> 2] = $12; //@line 15231
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 15232
      HEAP32[$610 >> 2] = $14; //@line 15233
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 15234
      HEAP32[$611 >> 2] = $16; //@line 15235
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 15236
      HEAP32[$612 >> 2] = $18; //@line 15237
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 15238
      HEAP32[$613 >> 2] = $20; //@line 15239
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 15240
      HEAP32[$614 >> 2] = $22; //@line 15241
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 15242
      HEAP32[$615 >> 2] = $24; //@line 15243
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 15244
      HEAP32[$616 >> 2] = $26; //@line 15245
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 15246
      HEAP32[$617 >> 2] = $28; //@line 15247
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 15248
      HEAP32[$618 >> 2] = $30; //@line 15249
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 15250
      HEAP32[$619 >> 2] = $32; //@line 15251
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 15252
      HEAP32[$620 >> 2] = $34; //@line 15253
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 15254
      HEAP32[$621 >> 2] = $36; //@line 15255
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 15256
      HEAP32[$622 >> 2] = $38; //@line 15257
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 15258
      HEAP32[$623 >> 2] = $157; //@line 15259
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 15260
      HEAP32[$624 >> 2] = $42; //@line 15261
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 15262
      HEAP32[$625 >> 2] = $44; //@line 15263
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 15264
      HEAP32[$626 >> 2] = $46; //@line 15265
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 15266
      HEAP32[$627 >> 2] = $48; //@line 15267
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 15268
      HEAP32[$628 >> 2] = $50; //@line 15269
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 15270
      HEAP32[$629 >> 2] = $52; //@line 15271
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 15272
      HEAP32[$630 >> 2] = $54; //@line 15273
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 15274
      HEAP32[$631 >> 2] = $56; //@line 15275
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 15276
      HEAP32[$632 >> 2] = $58; //@line 15277
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 15278
      HEAP32[$633 >> 2] = $60; //@line 15279
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 15280
      HEAP32[$634 >> 2] = $62; //@line 15281
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 15282
      HEAP32[$635 >> 2] = $64; //@line 15283
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 15284
      HEAP32[$636 >> 2] = $66; //@line 15285
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 15286
      HEAP32[$637 >> 2] = $68; //@line 15287
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 15288
      HEAP32[$638 >> 2] = $70; //@line 15289
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 15290
      HEAP32[$639 >> 2] = $72; //@line 15291
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 15292
      HEAP32[$640 >> 2] = $74; //@line 15293
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 15294
      HEAP32[$641 >> 2] = $76; //@line 15295
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 15296
      HEAP32[$642 >> 2] = $78; //@line 15297
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 15298
      HEAP32[$643 >> 2] = $80; //@line 15299
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 15300
      HEAP32[$644 >> 2] = $82; //@line 15301
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 15302
      HEAP32[$645 >> 2] = $84; //@line 15303
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 15304
      HEAP32[$646 >> 2] = $86; //@line 15305
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 15306
      HEAP32[$647 >> 2] = $88; //@line 15307
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 15308
      HEAP32[$648 >> 2] = $90; //@line 15309
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 15310
      HEAP32[$649 >> 2] = $92; //@line 15311
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 15312
      HEAP32[$650 >> 2] = $94; //@line 15313
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 15314
      HEAP32[$651 >> 2] = $96; //@line 15315
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 15316
      HEAP32[$652 >> 2] = $98; //@line 15317
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 15318
      HEAP32[$653 >> 2] = $100; //@line 15319
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 15320
      HEAP32[$654 >> 2] = $102; //@line 15321
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 15322
      HEAP32[$655 >> 2] = $104; //@line 15323
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 15324
      HEAP32[$656 >> 2] = $106; //@line 15325
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 15326
      HEAP32[$657 >> 2] = $108; //@line 15327
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 15328
      HEAP32[$658 >> 2] = $110; //@line 15329
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 15330
      HEAP32[$659 >> 2] = $112; //@line 15331
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 15332
      HEAP32[$660 >> 2] = $114; //@line 15333
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 15334
      HEAP32[$661 >> 2] = $116; //@line 15335
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 15336
      HEAP32[$662 >> 2] = $118; //@line 15337
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 15338
      HEAP32[$663 >> 2] = $120; //@line 15339
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 15340
      HEAP32[$664 >> 2] = $122; //@line 15341
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 15342
      HEAP32[$665 >> 2] = $124; //@line 15343
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 15344
      HEAP32[$666 >> 2] = $126; //@line 15345
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 15346
      HEAP32[$667 >> 2] = $128; //@line 15347
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 15348
      HEAP32[$668 >> 2] = $130; //@line 15349
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 15350
      HEAP32[$669 >> 2] = $132; //@line 15351
      sp = STACKTOP; //@line 15352
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 15356
     ___async_unwind = 0; //@line 15357
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 15358
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 15359
     HEAP32[$604 >> 2] = $2; //@line 15360
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 15361
     HEAP32[$605 >> 2] = $4; //@line 15362
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 15363
     HEAP32[$606 >> 2] = $6; //@line 15364
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 15365
     HEAP32[$607 >> 2] = $8; //@line 15366
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 15367
     HEAP32[$608 >> 2] = $10; //@line 15368
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 15369
     HEAP32[$609 >> 2] = $12; //@line 15370
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 15371
     HEAP32[$610 >> 2] = $14; //@line 15372
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 15373
     HEAP32[$611 >> 2] = $16; //@line 15374
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 15375
     HEAP32[$612 >> 2] = $18; //@line 15376
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 15377
     HEAP32[$613 >> 2] = $20; //@line 15378
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 15379
     HEAP32[$614 >> 2] = $22; //@line 15380
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 15381
     HEAP32[$615 >> 2] = $24; //@line 15382
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 15383
     HEAP32[$616 >> 2] = $26; //@line 15384
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 15385
     HEAP32[$617 >> 2] = $28; //@line 15386
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 15387
     HEAP32[$618 >> 2] = $30; //@line 15388
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 15389
     HEAP32[$619 >> 2] = $32; //@line 15390
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 15391
     HEAP32[$620 >> 2] = $34; //@line 15392
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 15393
     HEAP32[$621 >> 2] = $36; //@line 15394
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 15395
     HEAP32[$622 >> 2] = $38; //@line 15396
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 15397
     HEAP32[$623 >> 2] = $157; //@line 15398
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 15399
     HEAP32[$624 >> 2] = $42; //@line 15400
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 15401
     HEAP32[$625 >> 2] = $44; //@line 15402
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 15403
     HEAP32[$626 >> 2] = $46; //@line 15404
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 15405
     HEAP32[$627 >> 2] = $48; //@line 15406
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 15407
     HEAP32[$628 >> 2] = $50; //@line 15408
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 15409
     HEAP32[$629 >> 2] = $52; //@line 15410
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 15411
     HEAP32[$630 >> 2] = $54; //@line 15412
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 15413
     HEAP32[$631 >> 2] = $56; //@line 15414
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 15415
     HEAP32[$632 >> 2] = $58; //@line 15416
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 15417
     HEAP32[$633 >> 2] = $60; //@line 15418
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 15419
     HEAP32[$634 >> 2] = $62; //@line 15420
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 15421
     HEAP32[$635 >> 2] = $64; //@line 15422
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 15423
     HEAP32[$636 >> 2] = $66; //@line 15424
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 15425
     HEAP32[$637 >> 2] = $68; //@line 15426
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 15427
     HEAP32[$638 >> 2] = $70; //@line 15428
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 15429
     HEAP32[$639 >> 2] = $72; //@line 15430
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 15431
     HEAP32[$640 >> 2] = $74; //@line 15432
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 15433
     HEAP32[$641 >> 2] = $76; //@line 15434
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 15435
     HEAP32[$642 >> 2] = $78; //@line 15436
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 15437
     HEAP32[$643 >> 2] = $80; //@line 15438
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 15439
     HEAP32[$644 >> 2] = $82; //@line 15440
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 15441
     HEAP32[$645 >> 2] = $84; //@line 15442
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 15443
     HEAP32[$646 >> 2] = $86; //@line 15444
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 15445
     HEAP32[$647 >> 2] = $88; //@line 15446
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 15447
     HEAP32[$648 >> 2] = $90; //@line 15448
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 15449
     HEAP32[$649 >> 2] = $92; //@line 15450
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 15451
     HEAP32[$650 >> 2] = $94; //@line 15452
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 15453
     HEAP32[$651 >> 2] = $96; //@line 15454
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 15455
     HEAP32[$652 >> 2] = $98; //@line 15456
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 15457
     HEAP32[$653 >> 2] = $100; //@line 15458
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 15459
     HEAP32[$654 >> 2] = $102; //@line 15460
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 15461
     HEAP32[$655 >> 2] = $104; //@line 15462
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 15463
     HEAP32[$656 >> 2] = $106; //@line 15464
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 15465
     HEAP32[$657 >> 2] = $108; //@line 15466
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 15467
     HEAP32[$658 >> 2] = $110; //@line 15468
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 15469
     HEAP32[$659 >> 2] = $112; //@line 15470
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 15471
     HEAP32[$660 >> 2] = $114; //@line 15472
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 15473
     HEAP32[$661 >> 2] = $116; //@line 15474
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 15475
     HEAP32[$662 >> 2] = $118; //@line 15476
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 15477
     HEAP32[$663 >> 2] = $120; //@line 15478
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 15479
     HEAP32[$664 >> 2] = $122; //@line 15480
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 15481
     HEAP32[$665 >> 2] = $124; //@line 15482
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 15483
     HEAP32[$666 >> 2] = $126; //@line 15484
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 15485
     HEAP32[$667 >> 2] = $128; //@line 15486
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 15487
     HEAP32[$668 >> 2] = $130; //@line 15488
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 15489
     HEAP32[$669 >> 2] = $132; //@line 15490
     sp = STACKTOP; //@line 15491
     return;
    }
   case 60:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 15496
     $671 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $84, $88, 11, $$1202$i) | 0; //@line 15497
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 15500
      $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 15501
      HEAP32[$672 >> 2] = $2; //@line 15502
      $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 15503
      HEAP32[$673 >> 2] = $4; //@line 15504
      $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 15505
      HEAP32[$674 >> 2] = $6; //@line 15506
      $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 15507
      HEAP32[$675 >> 2] = $8; //@line 15508
      $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 15509
      HEAP32[$676 >> 2] = $10; //@line 15510
      $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 15511
      HEAP32[$677 >> 2] = $12; //@line 15512
      $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 15513
      HEAP32[$678 >> 2] = $14; //@line 15514
      $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 15515
      HEAP32[$679 >> 2] = $16; //@line 15516
      $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 15517
      HEAP32[$680 >> 2] = $18; //@line 15518
      $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 15519
      HEAP32[$681 >> 2] = $20; //@line 15520
      $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 15521
      HEAP32[$682 >> 2] = $22; //@line 15522
      $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 15523
      HEAP32[$683 >> 2] = $24; //@line 15524
      $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 15525
      HEAP32[$684 >> 2] = $26; //@line 15526
      $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 15527
      HEAP32[$685 >> 2] = $28; //@line 15528
      $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 15529
      HEAP32[$686 >> 2] = $30; //@line 15530
      $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 15531
      HEAP32[$687 >> 2] = $32; //@line 15532
      $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 15533
      HEAP32[$688 >> 2] = $34; //@line 15534
      $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 15535
      HEAP32[$689 >> 2] = $36; //@line 15536
      $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 15537
      HEAP32[$690 >> 2] = $38; //@line 15538
      $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 15539
      HEAP32[$691 >> 2] = $157; //@line 15540
      $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 15541
      HEAP32[$692 >> 2] = $42; //@line 15542
      $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 15543
      HEAP32[$693 >> 2] = $44; //@line 15544
      $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 15545
      HEAP32[$694 >> 2] = $46; //@line 15546
      $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 15547
      HEAP32[$695 >> 2] = $48; //@line 15548
      $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 15549
      HEAP32[$696 >> 2] = $50; //@line 15550
      $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 15551
      HEAP32[$697 >> 2] = $52; //@line 15552
      $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 15553
      HEAP32[$698 >> 2] = $54; //@line 15554
      $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 15555
      HEAP32[$699 >> 2] = $56; //@line 15556
      $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 15557
      HEAP32[$700 >> 2] = $58; //@line 15558
      $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 15559
      HEAP32[$701 >> 2] = $60; //@line 15560
      $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 15561
      HEAP32[$702 >> 2] = $62; //@line 15562
      $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 15563
      HEAP32[$703 >> 2] = $64; //@line 15564
      $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 15565
      HEAP32[$704 >> 2] = $66; //@line 15566
      $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 15567
      HEAP32[$705 >> 2] = $68; //@line 15568
      $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 15569
      HEAP32[$706 >> 2] = $70; //@line 15570
      $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 15571
      HEAP32[$707 >> 2] = $72; //@line 15572
      $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 15573
      HEAP32[$708 >> 2] = $74; //@line 15574
      $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 15575
      HEAP32[$709 >> 2] = $76; //@line 15576
      $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 15577
      HEAP32[$710 >> 2] = $78; //@line 15578
      $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 15579
      HEAP32[$711 >> 2] = $80; //@line 15580
      $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 15581
      HEAP32[$712 >> 2] = $82; //@line 15582
      $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 15583
      HEAP32[$713 >> 2] = $84; //@line 15584
      $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 15585
      HEAP32[$714 >> 2] = $86; //@line 15586
      $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 15587
      HEAP32[$715 >> 2] = $88; //@line 15588
      $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 15589
      HEAP32[$716 >> 2] = $90; //@line 15590
      $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 15591
      HEAP32[$717 >> 2] = $92; //@line 15592
      $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 15593
      HEAP32[$718 >> 2] = $94; //@line 15594
      $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 15595
      HEAP32[$719 >> 2] = $96; //@line 15596
      $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 15597
      HEAP32[$720 >> 2] = $98; //@line 15598
      $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 15599
      HEAP32[$721 >> 2] = $100; //@line 15600
      $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 15601
      HEAP32[$722 >> 2] = $102; //@line 15602
      $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 15603
      HEAP32[$723 >> 2] = $104; //@line 15604
      $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 15605
      HEAP32[$724 >> 2] = $106; //@line 15606
      $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 15607
      HEAP32[$725 >> 2] = $108; //@line 15608
      $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 15609
      HEAP32[$726 >> 2] = $110; //@line 15610
      $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 15611
      HEAP32[$727 >> 2] = $112; //@line 15612
      $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 15613
      HEAP32[$728 >> 2] = $114; //@line 15614
      $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 15615
      HEAP32[$729 >> 2] = $116; //@line 15616
      $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 15617
      HEAP32[$730 >> 2] = $118; //@line 15618
      $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 15619
      HEAP32[$731 >> 2] = $120; //@line 15620
      $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 15621
      HEAP32[$732 >> 2] = $122; //@line 15622
      $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 15623
      HEAP32[$733 >> 2] = $124; //@line 15624
      $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 15625
      HEAP32[$734 >> 2] = $126; //@line 15626
      $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 15627
      HEAP32[$735 >> 2] = $128; //@line 15628
      $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 15629
      HEAP32[$736 >> 2] = $130; //@line 15630
      $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 15631
      HEAP32[$737 >> 2] = $132; //@line 15632
      sp = STACKTOP; //@line 15633
      return;
     }
     HEAP8[___async_retval >> 0] = $671; //@line 15637
     ___async_unwind = 0; //@line 15638
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 15639
     $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 15640
     HEAP32[$672 >> 2] = $2; //@line 15641
     $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 15642
     HEAP32[$673 >> 2] = $4; //@line 15643
     $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 15644
     HEAP32[$674 >> 2] = $6; //@line 15645
     $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 15646
     HEAP32[$675 >> 2] = $8; //@line 15647
     $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 15648
     HEAP32[$676 >> 2] = $10; //@line 15649
     $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 15650
     HEAP32[$677 >> 2] = $12; //@line 15651
     $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 15652
     HEAP32[$678 >> 2] = $14; //@line 15653
     $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 15654
     HEAP32[$679 >> 2] = $16; //@line 15655
     $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 15656
     HEAP32[$680 >> 2] = $18; //@line 15657
     $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 15658
     HEAP32[$681 >> 2] = $20; //@line 15659
     $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 15660
     HEAP32[$682 >> 2] = $22; //@line 15661
     $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 15662
     HEAP32[$683 >> 2] = $24; //@line 15663
     $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 15664
     HEAP32[$684 >> 2] = $26; //@line 15665
     $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 15666
     HEAP32[$685 >> 2] = $28; //@line 15667
     $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 15668
     HEAP32[$686 >> 2] = $30; //@line 15669
     $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 15670
     HEAP32[$687 >> 2] = $32; //@line 15671
     $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 15672
     HEAP32[$688 >> 2] = $34; //@line 15673
     $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 15674
     HEAP32[$689 >> 2] = $36; //@line 15675
     $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 15676
     HEAP32[$690 >> 2] = $38; //@line 15677
     $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 15678
     HEAP32[$691 >> 2] = $157; //@line 15679
     $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 15680
     HEAP32[$692 >> 2] = $42; //@line 15681
     $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 15682
     HEAP32[$693 >> 2] = $44; //@line 15683
     $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 15684
     HEAP32[$694 >> 2] = $46; //@line 15685
     $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 15686
     HEAP32[$695 >> 2] = $48; //@line 15687
     $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 15688
     HEAP32[$696 >> 2] = $50; //@line 15689
     $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 15690
     HEAP32[$697 >> 2] = $52; //@line 15691
     $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 15692
     HEAP32[$698 >> 2] = $54; //@line 15693
     $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 15694
     HEAP32[$699 >> 2] = $56; //@line 15695
     $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 15696
     HEAP32[$700 >> 2] = $58; //@line 15697
     $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 15698
     HEAP32[$701 >> 2] = $60; //@line 15699
     $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 15700
     HEAP32[$702 >> 2] = $62; //@line 15701
     $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 15702
     HEAP32[$703 >> 2] = $64; //@line 15703
     $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 15704
     HEAP32[$704 >> 2] = $66; //@line 15705
     $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 15706
     HEAP32[$705 >> 2] = $68; //@line 15707
     $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 15708
     HEAP32[$706 >> 2] = $70; //@line 15709
     $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 15710
     HEAP32[$707 >> 2] = $72; //@line 15711
     $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 15712
     HEAP32[$708 >> 2] = $74; //@line 15713
     $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 15714
     HEAP32[$709 >> 2] = $76; //@line 15715
     $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 15716
     HEAP32[$710 >> 2] = $78; //@line 15717
     $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 15718
     HEAP32[$711 >> 2] = $80; //@line 15719
     $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 15720
     HEAP32[$712 >> 2] = $82; //@line 15721
     $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 15722
     HEAP32[$713 >> 2] = $84; //@line 15723
     $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 15724
     HEAP32[$714 >> 2] = $86; //@line 15725
     $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 15726
     HEAP32[$715 >> 2] = $88; //@line 15727
     $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 15728
     HEAP32[$716 >> 2] = $90; //@line 15729
     $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 15730
     HEAP32[$717 >> 2] = $92; //@line 15731
     $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 15732
     HEAP32[$718 >> 2] = $94; //@line 15733
     $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 15734
     HEAP32[$719 >> 2] = $96; //@line 15735
     $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 15736
     HEAP32[$720 >> 2] = $98; //@line 15737
     $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 15738
     HEAP32[$721 >> 2] = $100; //@line 15739
     $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 15740
     HEAP32[$722 >> 2] = $102; //@line 15741
     $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 15742
     HEAP32[$723 >> 2] = $104; //@line 15743
     $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 15744
     HEAP32[$724 >> 2] = $106; //@line 15745
     $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 15746
     HEAP32[$725 >> 2] = $108; //@line 15747
     $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 15748
     HEAP32[$726 >> 2] = $110; //@line 15749
     $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 15750
     HEAP32[$727 >> 2] = $112; //@line 15751
     $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 15752
     HEAP32[$728 >> 2] = $114; //@line 15753
     $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 15754
     HEAP32[$729 >> 2] = $116; //@line 15755
     $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 15756
     HEAP32[$730 >> 2] = $118; //@line 15757
     $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 15758
     HEAP32[$731 >> 2] = $120; //@line 15759
     $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 15760
     HEAP32[$732 >> 2] = $122; //@line 15761
     $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 15762
     HEAP32[$733 >> 2] = $124; //@line 15763
     $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 15764
     HEAP32[$734 >> 2] = $126; //@line 15765
     $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 15766
     HEAP32[$735 >> 2] = $128; //@line 15767
     $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 15768
     HEAP32[$736 >> 2] = $130; //@line 15769
     $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 15770
     HEAP32[$737 >> 2] = $132; //@line 15771
     sp = STACKTOP; //@line 15772
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 15777
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$130 >> 2] | 0; //@line 15782
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 15785
     $759 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 15786
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 15789
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 15790
      HEAP32[$760 >> 2] = $2; //@line 15791
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 15792
      HEAP32[$761 >> 2] = $4; //@line 15793
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 15794
      HEAP32[$762 >> 2] = $6; //@line 15795
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 15796
      HEAP32[$763 >> 2] = $8; //@line 15797
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 15798
      HEAP32[$764 >> 2] = $10; //@line 15799
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 15800
      HEAP32[$765 >> 2] = $12; //@line 15801
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 15802
      HEAP32[$766 >> 2] = $14; //@line 15803
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 15804
      HEAP32[$767 >> 2] = $16; //@line 15805
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 15806
      HEAP32[$768 >> 2] = $18; //@line 15807
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 15808
      HEAP32[$769 >> 2] = $20; //@line 15809
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 15810
      HEAP32[$770 >> 2] = $22; //@line 15811
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 15812
      HEAP32[$771 >> 2] = $24; //@line 15813
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 15814
      HEAP32[$772 >> 2] = $26; //@line 15815
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 15816
      HEAP32[$773 >> 2] = $28; //@line 15817
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 15818
      HEAP32[$774 >> 2] = $30; //@line 15819
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 15820
      HEAP32[$775 >> 2] = $32; //@line 15821
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 15822
      HEAP32[$776 >> 2] = $34; //@line 15823
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 15824
      HEAP32[$777 >> 2] = $36; //@line 15825
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 15826
      HEAP32[$778 >> 2] = $38; //@line 15827
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 15828
      HEAP32[$779 >> 2] = $157; //@line 15829
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 15830
      HEAP32[$780 >> 2] = $42; //@line 15831
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 15832
      HEAP32[$781 >> 2] = $44; //@line 15833
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 15834
      HEAP32[$782 >> 2] = $46; //@line 15835
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 15836
      HEAP32[$783 >> 2] = $48; //@line 15837
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 15838
      HEAP32[$784 >> 2] = $50; //@line 15839
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 15840
      HEAP32[$785 >> 2] = $52; //@line 15841
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 15842
      HEAP32[$786 >> 2] = $54; //@line 15843
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 15844
      HEAP32[$787 >> 2] = $56; //@line 15845
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 15846
      HEAP32[$788 >> 2] = $58; //@line 15847
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 15848
      HEAP32[$789 >> 2] = $60; //@line 15849
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 15850
      HEAP32[$790 >> 2] = $62; //@line 15851
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 15852
      HEAP32[$791 >> 2] = $64; //@line 15853
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 15854
      HEAP32[$792 >> 2] = $66; //@line 15855
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 15856
      HEAP32[$793 >> 2] = $68; //@line 15857
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 15858
      HEAP32[$794 >> 2] = $70; //@line 15859
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 15860
      HEAP32[$795 >> 2] = $72; //@line 15861
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 15862
      HEAP32[$796 >> 2] = $74; //@line 15863
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 15864
      HEAP32[$797 >> 2] = $76; //@line 15865
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 15866
      HEAP32[$798 >> 2] = $78; //@line 15867
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 15868
      HEAP32[$799 >> 2] = $80; //@line 15869
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 15870
      HEAP32[$800 >> 2] = $82; //@line 15871
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 15872
      HEAP32[$801 >> 2] = $84; //@line 15873
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 15874
      HEAP32[$802 >> 2] = $86; //@line 15875
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 15876
      HEAP32[$803 >> 2] = $88; //@line 15877
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 15878
      HEAP32[$804 >> 2] = $90; //@line 15879
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 15880
      HEAP32[$805 >> 2] = $92; //@line 15881
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 15882
      HEAP32[$806 >> 2] = $94; //@line 15883
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 15884
      HEAP32[$807 >> 2] = $96; //@line 15885
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 15886
      HEAP32[$808 >> 2] = $98; //@line 15887
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 15888
      HEAP32[$809 >> 2] = $100; //@line 15889
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 15890
      HEAP32[$810 >> 2] = $102; //@line 15891
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 15892
      HEAP32[$811 >> 2] = $104; //@line 15893
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 15894
      HEAP32[$812 >> 2] = $106; //@line 15895
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 15896
      HEAP32[$813 >> 2] = $108; //@line 15897
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 15898
      HEAP32[$814 >> 2] = $110; //@line 15899
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 15900
      HEAP32[$815 >> 2] = $112; //@line 15901
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 15902
      HEAP32[$816 >> 2] = $114; //@line 15903
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 15904
      HEAP32[$817 >> 2] = $116; //@line 15905
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 15906
      HEAP32[$818 >> 2] = $118; //@line 15907
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 15908
      HEAP32[$819 >> 2] = $120; //@line 15909
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 15910
      HEAP32[$820 >> 2] = $122; //@line 15911
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 15912
      HEAP32[$821 >> 2] = $124; //@line 15913
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 15914
      HEAP32[$822 >> 2] = $126; //@line 15915
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 15916
      HEAP32[$823 >> 2] = $128; //@line 15917
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 15918
      HEAP32[$824 >> 2] = $130; //@line 15919
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 15920
      HEAP32[$825 >> 2] = $132; //@line 15921
      sp = STACKTOP; //@line 15922
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 15926
     ___async_unwind = 0; //@line 15927
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 15928
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 15929
     HEAP32[$760 >> 2] = $2; //@line 15930
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 15931
     HEAP32[$761 >> 2] = $4; //@line 15932
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 15933
     HEAP32[$762 >> 2] = $6; //@line 15934
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 15935
     HEAP32[$763 >> 2] = $8; //@line 15936
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 15937
     HEAP32[$764 >> 2] = $10; //@line 15938
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 15939
     HEAP32[$765 >> 2] = $12; //@line 15940
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 15941
     HEAP32[$766 >> 2] = $14; //@line 15942
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 15943
     HEAP32[$767 >> 2] = $16; //@line 15944
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 15945
     HEAP32[$768 >> 2] = $18; //@line 15946
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 15947
     HEAP32[$769 >> 2] = $20; //@line 15948
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 15949
     HEAP32[$770 >> 2] = $22; //@line 15950
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 15951
     HEAP32[$771 >> 2] = $24; //@line 15952
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 15953
     HEAP32[$772 >> 2] = $26; //@line 15954
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 15955
     HEAP32[$773 >> 2] = $28; //@line 15956
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 15957
     HEAP32[$774 >> 2] = $30; //@line 15958
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 15959
     HEAP32[$775 >> 2] = $32; //@line 15960
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 15961
     HEAP32[$776 >> 2] = $34; //@line 15962
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 15963
     HEAP32[$777 >> 2] = $36; //@line 15964
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 15965
     HEAP32[$778 >> 2] = $38; //@line 15966
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 15967
     HEAP32[$779 >> 2] = $157; //@line 15968
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 15969
     HEAP32[$780 >> 2] = $42; //@line 15970
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 15971
     HEAP32[$781 >> 2] = $44; //@line 15972
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 15973
     HEAP32[$782 >> 2] = $46; //@line 15974
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 15975
     HEAP32[$783 >> 2] = $48; //@line 15976
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 15977
     HEAP32[$784 >> 2] = $50; //@line 15978
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 15979
     HEAP32[$785 >> 2] = $52; //@line 15980
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 15981
     HEAP32[$786 >> 2] = $54; //@line 15982
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 15983
     HEAP32[$787 >> 2] = $56; //@line 15984
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 15985
     HEAP32[$788 >> 2] = $58; //@line 15986
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 15987
     HEAP32[$789 >> 2] = $60; //@line 15988
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 15989
     HEAP32[$790 >> 2] = $62; //@line 15990
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 15991
     HEAP32[$791 >> 2] = $64; //@line 15992
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 15993
     HEAP32[$792 >> 2] = $66; //@line 15994
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 15995
     HEAP32[$793 >> 2] = $68; //@line 15996
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 15997
     HEAP32[$794 >> 2] = $70; //@line 15998
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 15999
     HEAP32[$795 >> 2] = $72; //@line 16000
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 16001
     HEAP32[$796 >> 2] = $74; //@line 16002
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 16003
     HEAP32[$797 >> 2] = $76; //@line 16004
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 16005
     HEAP32[$798 >> 2] = $78; //@line 16006
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 16007
     HEAP32[$799 >> 2] = $80; //@line 16008
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 16009
     HEAP32[$800 >> 2] = $82; //@line 16010
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 16011
     HEAP32[$801 >> 2] = $84; //@line 16012
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 16013
     HEAP32[$802 >> 2] = $86; //@line 16014
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 16015
     HEAP32[$803 >> 2] = $88; //@line 16016
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 16017
     HEAP32[$804 >> 2] = $90; //@line 16018
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 16019
     HEAP32[$805 >> 2] = $92; //@line 16020
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 16021
     HEAP32[$806 >> 2] = $94; //@line 16022
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 16023
     HEAP32[$807 >> 2] = $96; //@line 16024
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 16025
     HEAP32[$808 >> 2] = $98; //@line 16026
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 16027
     HEAP32[$809 >> 2] = $100; //@line 16028
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 16029
     HEAP32[$810 >> 2] = $102; //@line 16030
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 16031
     HEAP32[$811 >> 2] = $104; //@line 16032
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 16033
     HEAP32[$812 >> 2] = $106; //@line 16034
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 16035
     HEAP32[$813 >> 2] = $108; //@line 16036
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 16037
     HEAP32[$814 >> 2] = $110; //@line 16038
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 16039
     HEAP32[$815 >> 2] = $112; //@line 16040
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 16041
     HEAP32[$816 >> 2] = $114; //@line 16042
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 16043
     HEAP32[$817 >> 2] = $116; //@line 16044
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 16045
     HEAP32[$818 >> 2] = $118; //@line 16046
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 16047
     HEAP32[$819 >> 2] = $120; //@line 16048
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 16049
     HEAP32[$820 >> 2] = $122; //@line 16050
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 16051
     HEAP32[$821 >> 2] = $124; //@line 16052
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 16053
     HEAP32[$822 >> 2] = $126; //@line 16054
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 16055
     HEAP32[$823 >> 2] = $128; //@line 16056
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 16057
     HEAP32[$824 >> 2] = $130; //@line 16058
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 16059
     HEAP32[$825 >> 2] = $132; //@line 16060
     sp = STACKTOP; //@line 16061
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3737, 5086, $110); //@line 16066
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 16071
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 16076
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 16081
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 16086
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3737, 5389, $128); //@line 16091
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $18 | 0) >= ($10 | 0)) {
      $936 = ___async_retval; //@line 16100
      HEAP32[$936 >> 2] = $32; //@line 16101
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 16107
      HEAP32[$82 >> 2] = $926; //@line 16108
      $927 = $926; //@line 16109
      $929 = $18 - $927 + $10 | 0; //@line 16111
      HEAP16[$100 + 24 >> 1] = $929; //@line 16114
      if ($929 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $927; //@line 16119
       $936 = ___async_retval; //@line 16120
       HEAP32[$936 >> 2] = $32; //@line 16121
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 16125
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 16128
     $936 = ___async_retval; //@line 16129
     HEAP32[$936 >> 2] = $32; //@line 16130
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3737, 4897, $122); //@line 16136
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 16140
 $936 = ___async_retval; //@line 16141
 HEAP32[$936 >> 2] = $32; //@line 16142
 return;
}
function _sn_coap_parser__async_cb_84($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 16197
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16201
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16203
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16205
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16207
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16209
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16211
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16213
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16215
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16217
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16219
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16221
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16223
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16225
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16227
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16229
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16231
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16233
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16235
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16239
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16241
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16243
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16245
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16247
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16249
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 16251
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 16253
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 16255
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 16257
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 16259
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 16261
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 16263
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 16265
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 16267
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 16269
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 16271
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 16273
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 16275
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 16277
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 16279
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 16281
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 16283
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 16285
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 16287
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 16289
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 16291
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 16293
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 16295
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 16297
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 16299
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 16301
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 16303
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 16305
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 16307
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 16309
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 16311
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 16313
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 16315
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 16317
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 16319
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 16321
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 16323
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 16325
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 16327
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 16329
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 16335
   L3 : while (1) {
    $917 = HEAP32[$4 >> 2] | 0; //@line 16337
    $918 = $917 - $18 | 0; //@line 16338
    $137 = $917; //@line 16341
    if (($918 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 16348
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 16351
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 16354
     break;
    }
    $140 = $trunc277$i & 15; //@line 16358
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 16359
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 16364
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 16372
      $$sink214$i = 13; //@line 16372
      $$sink3$i = 1; //@line 16372
      label = 8; //@line 16373
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 16385
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 16385
      $$sink3$i = 2; //@line 16385
      label = 8; //@line 16386
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 16390
      $159 = $137; //@line 16390
      $937 = $917; //@line 16390
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 16394
     $154 = $137 + $$sink3$i | 0; //@line 16396
     HEAP32[$82 >> 2] = $154; //@line 16397
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 16399
     $159 = $154; //@line 16399
     $937 = $154; //@line 16399
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 16402
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 16406
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 16414
      $$sink216$i = 13; //@line 16414
      $$sink8$i = 1; //@line 16414
      label = 13; //@line 16415
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 16427
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 16427
      $$sink8$i = 2; //@line 16427
      label = 13; //@line 16428
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 16432
      $174 = $937; //@line 16432
      $215 = $159; //@line 16432
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 16436
     $171 = $159 + $$sink8$i | 0; //@line 16438
     HEAP32[$82 >> 2] = $171; //@line 16439
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 16441
     $174 = $171; //@line 16441
     $215 = $171; //@line 16441
    }
    $$1202$i = $$1202$in$i & 65535; //@line 16443
    $175 = $104 - $174 & 65535; //@line 16445
    $trunc$i = $157 & 65535; //@line 16446
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 16450
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 16458
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 16463
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 16468
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 16473
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 16478
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 16483
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 16488
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 16493
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 16504
          break L3;
         }
         $268 = $215 + 1 | 0; //@line 16507
         HEAP32[$82 >> 2] = $268; //@line 16508
         $269 = $$1202$in$i & 255; //@line 16509
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 16512
         } else {
          $$045$i221$i = $269; //@line 16514
          $$06$i220$i = 0; //@line 16514
          $274 = $268; //@line 16514
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 16516
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 16518
           HEAP32[$82 >> 2] = $274; //@line 16519
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 16522
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 16525
            break;
           } else {
            $$06$i220$i = $277; //@line 16528
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 16534
         $$reg2mem$0 = $157; //@line 16535
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 16542
          break L3;
         }
         $586 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 16546
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 16550
          break L3;
         }
         $589 = $215 + 1 | 0; //@line 16553
         HEAP32[$82 >> 2] = $589; //@line 16554
         $590 = $$1202$in$i & 255; //@line 16555
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 16558
         } else {
          $$045$i263$i = $590; //@line 16560
          $$06$i262$i = 0; //@line 16560
          $595 = $589; //@line 16560
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 16562
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 16564
           HEAP32[$82 >> 2] = $595; //@line 16565
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 16568
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 16571
            break;
           } else {
            $$06$i262$i = $598; //@line 16574
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 16578
         $$reg2mem$0 = $157; //@line 16579
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 16586
          break L3;
         }
         $742 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 16590
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 16594
          break L3;
         }
         $745 = $215 + 1 | 0; //@line 16597
         HEAP32[$82 >> 2] = $745; //@line 16598
         $746 = $$1202$in$i & 255; //@line 16599
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 16602
         } else {
          $$045$i270$i = $746; //@line 16604
          $$06$i269$i = 0; //@line 16604
          $751 = $745; //@line 16604
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 16606
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 16608
           HEAP32[$82 >> 2] = $751; //@line 16609
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 16612
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 16615
            break;
           } else {
            $$06$i269$i = $754; //@line 16618
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 16622
         $$reg2mem$0 = $157; //@line 16623
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 16630
          break L3;
         }
         $829 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 16634
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 16638
          break L3;
         }
         $832 = $215 + 1 | 0; //@line 16641
         HEAP32[$82 >> 2] = $832; //@line 16642
         $833 = $$1202$in$i & 255; //@line 16643
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 16646
         } else {
          $$045$i256$i = $833; //@line 16648
          $$06$i255$i = 0; //@line 16648
          $838 = $832; //@line 16648
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 16650
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 16652
           HEAP32[$82 >> 2] = $838; //@line 16653
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 16656
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 16659
            break;
           } else {
            $$06$i255$i = $841; //@line 16662
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 16666
         $$reg2mem$0 = $157; //@line 16667
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 16674
          break L3;
         }
         $845 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 16678
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 16682
          break L3;
         }
         $848 = $215 + 1 | 0; //@line 16685
         HEAP32[$82 >> 2] = $848; //@line 16686
         $849 = $$1202$in$i & 255; //@line 16687
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 16690
         } else {
          $$045$i249$i = $849; //@line 16692
          $$06$i248$i = 0; //@line 16692
          $854 = $848; //@line 16692
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 16694
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 16696
           HEAP32[$82 >> 2] = $854; //@line 16697
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 16700
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 16703
            break;
           } else {
            $$06$i248$i = $857; //@line 16706
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 16710
         $$reg2mem$0 = $157; //@line 16711
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 16718
          break L3;
         }
         $861 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 16722
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 16726
          break L3;
         }
         $864 = $215 + 1 | 0; //@line 16729
         HEAP32[$82 >> 2] = $864; //@line 16730
         $865 = $$1202$in$i & 255; //@line 16731
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 16734
         } else {
          $$045$i242$i = $865; //@line 16736
          $$06$i241$i = 0; //@line 16736
          $870 = $864; //@line 16736
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 16738
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 16740
           HEAP32[$82 >> 2] = $870; //@line 16741
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 16744
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 16747
            break;
           } else {
            $$06$i241$i = $873; //@line 16750
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 16754
         $$reg2mem$0 = $157; //@line 16755
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 16762
          break L3;
         }
         $877 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 16766
         $878 = HEAP8[$877 >> 0] | 0; //@line 16767
         if ($878 & 1) {
          label = 94; //@line 16771
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 16775
         $883 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 16777
         HEAP32[$82 >> 2] = $883; //@line 16778
         $884 = $$1202$in$i & 255; //@line 16779
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 16782
         } else {
          $$045$i235$i = $884; //@line 16784
          $$06$i234$i = 0; //@line 16784
          $889 = $883; //@line 16784
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 16786
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 16788
           HEAP32[$82 >> 2] = $889; //@line 16789
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 16792
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 16795
            break;
           } else {
            $$06$i234$i = $892; //@line 16798
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 16804
         $$reg2mem$0 = $157; //@line 16805
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 16812
          break L3;
         }
         $898 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 16816
         $899 = HEAP8[$898 >> 0] | 0; //@line 16817
         if ($899 & 2) {
          label = 100; //@line 16821
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 16825
         $904 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 16827
         HEAP32[$82 >> 2] = $904; //@line 16828
         $905 = $$1202$in$i & 255; //@line 16829
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 16832
         } else {
          $$045$i228$i = $905; //@line 16834
          $$06$i227$i = 0; //@line 16834
          $910 = $904; //@line 16834
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 16836
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 16838
           HEAP32[$82 >> 2] = $910; //@line 16839
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 16842
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 16845
            break;
           } else {
            $$06$i227$i = $913; //@line 16848
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 16854
         $$reg2mem$0 = $157; //@line 16855
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 16860
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 16870
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 16877
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 16883
     break;
    }
    $256 = $215 + 1 | 0; //@line 16886
    HEAP32[$82 >> 2] = $256; //@line 16887
    $257 = $$1202$in$i & 255; //@line 16888
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 16891
    } else {
     $$045$i$i = $257; //@line 16893
     $$06$i$i = 0; //@line 16893
     $262 = $256; //@line 16893
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 16895
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 16897
      HEAP32[$82 >> 2] = $262; //@line 16898
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 16901
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 16904
       break;
      } else {
       $$06$i$i = $265; //@line 16907
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 16911
    $$reg2mem$0 = $157; //@line 16912
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 16916
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 16921
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$120 >> 2] | 0; //@line 16926
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 16927
     $179 = FUNCTION_TABLE_ii[$178 & 15](68) | 0; //@line 16928
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 16931
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 16932
      HEAP16[$180 >> 1] = $175; //@line 16933
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 16934
      HEAP32[$181 >> 2] = $2; //@line 16935
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 16936
      HEAP32[$182 >> 2] = $4; //@line 16937
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 16938
      HEAP32[$183 >> 2] = $6; //@line 16939
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 16940
      HEAP32[$184 >> 2] = $124; //@line 16941
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 16942
      HEAP32[$185 >> 2] = $8; //@line 16943
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 16944
      HEAP32[$186 >> 2] = $10; //@line 16945
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 16946
      HEAP32[$187 >> 2] = $12; //@line 16947
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 16948
      HEAP32[$188 >> 2] = $14; //@line 16949
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 16950
      HEAP32[$189 >> 2] = $16; //@line 16951
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 16952
      HEAP32[$190 >> 2] = $18; //@line 16953
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 16954
      HEAP32[$191 >> 2] = $20; //@line 16955
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 16956
      HEAP32[$192 >> 2] = $22; //@line 16957
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 16958
      HEAP32[$193 >> 2] = $24; //@line 16959
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 16960
      HEAP32[$194 >> 2] = $26; //@line 16961
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 16962
      HEAP16[$195 >> 1] = $$1202$i; //@line 16963
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 16964
      HEAP32[$196 >> 2] = $28; //@line 16965
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 16966
      HEAP32[$197 >> 2] = $30; //@line 16967
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 16968
      HEAP32[$198 >> 2] = $32; //@line 16969
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 16970
      HEAP32[$199 >> 2] = $34; //@line 16971
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 16972
      HEAP32[$200 >> 2] = $157; //@line 16973
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 16974
      HEAP32[$201 >> 2] = $38; //@line 16975
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 16976
      HEAP32[$202 >> 2] = $$1202$in$i; //@line 16977
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 16978
      HEAP32[$203 >> 2] = $42; //@line 16979
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 16980
      HEAP32[$204 >> 2] = $36; //@line 16981
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 16982
      HEAP32[$205 >> 2] = $44; //@line 16983
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 16984
      HEAP32[$206 >> 2] = $46; //@line 16985
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 16986
      HEAP32[$207 >> 2] = $48; //@line 16987
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 16988
      HEAP32[$208 >> 2] = $50; //@line 16989
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 16990
      HEAP32[$209 >> 2] = $52; //@line 16991
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 16992
      HEAP32[$210 >> 2] = $54; //@line 16993
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 16994
      HEAP32[$211 >> 2] = $56; //@line 16995
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 16996
      HEAP32[$212 >> 2] = $58; //@line 16997
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 16998
      HEAP32[$213 >> 2] = $60; //@line 16999
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 17000
      HEAP32[$214 >> 2] = $215; //@line 17001
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 17002
      HEAP32[$216 >> 2] = $62; //@line 17003
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 17004
      HEAP32[$217 >> 2] = $64; //@line 17005
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 17006
      HEAP32[$218 >> 2] = $66; //@line 17007
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 17008
      HEAP32[$219 >> 2] = $68; //@line 17009
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 17010
      HEAP32[$220 >> 2] = $70; //@line 17011
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 17012
      HEAP32[$221 >> 2] = $72; //@line 17013
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 17014
      HEAP32[$222 >> 2] = $74; //@line 17015
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 17016
      HEAP32[$223 >> 2] = $76; //@line 17017
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 17018
      HEAP32[$224 >> 2] = $78; //@line 17019
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 17020
      HEAP32[$225 >> 2] = $80; //@line 17021
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 17022
      HEAP32[$226 >> 2] = $82; //@line 17023
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 17024
      HEAP32[$227 >> 2] = $84; //@line 17025
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 17026
      HEAP32[$228 >> 2] = $86; //@line 17027
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 17028
      HEAP32[$229 >> 2] = $88; //@line 17029
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 17030
      HEAP32[$230 >> 2] = $90; //@line 17031
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 17032
      HEAP32[$231 >> 2] = $92; //@line 17033
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 17034
      HEAP32[$232 >> 2] = $94; //@line 17035
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 17036
      HEAP32[$233 >> 2] = $96; //@line 17037
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 17038
      HEAP32[$234 >> 2] = $98; //@line 17039
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 17040
      HEAP32[$235 >> 2] = $100; //@line 17041
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 17042
      HEAP32[$236 >> 2] = $102; //@line 17043
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 17044
      HEAP32[$237 >> 2] = $104; //@line 17045
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 17046
      HEAP32[$238 >> 2] = $106; //@line 17047
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 17048
      HEAP16[$239 >> 1] = $trunc$i; //@line 17049
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 17050
      HEAP32[$240 >> 2] = $108; //@line 17051
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 17052
      HEAP32[$241 >> 2] = $110; //@line 17053
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 17054
      HEAP32[$242 >> 2] = $112; //@line 17055
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 17056
      HEAP32[$243 >> 2] = $114; //@line 17057
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 17058
      HEAP32[$244 >> 2] = $116; //@line 17059
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 17060
      HEAP32[$245 >> 2] = $118; //@line 17061
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 17062
      HEAP32[$246 >> 2] = $120; //@line 17063
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 17064
      HEAP32[$247 >> 2] = $122; //@line 17065
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 17066
      HEAP32[$248 >> 2] = $126; //@line 17067
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 17068
      HEAP32[$249 >> 2] = $128; //@line 17069
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 17070
      HEAP32[$250 >> 2] = $130; //@line 17071
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 17072
      HEAP32[$251 >> 2] = $132; //@line 17073
      sp = STACKTOP; //@line 17074
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 17078
     ___async_unwind = 0; //@line 17079
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 17080
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 17081
     HEAP16[$180 >> 1] = $175; //@line 17082
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 17083
     HEAP32[$181 >> 2] = $2; //@line 17084
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 17085
     HEAP32[$182 >> 2] = $4; //@line 17086
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 17087
     HEAP32[$183 >> 2] = $6; //@line 17088
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 17089
     HEAP32[$184 >> 2] = $124; //@line 17090
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 17091
     HEAP32[$185 >> 2] = $8; //@line 17092
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 17093
     HEAP32[$186 >> 2] = $10; //@line 17094
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 17095
     HEAP32[$187 >> 2] = $12; //@line 17096
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 17097
     HEAP32[$188 >> 2] = $14; //@line 17098
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 17099
     HEAP32[$189 >> 2] = $16; //@line 17100
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 17101
     HEAP32[$190 >> 2] = $18; //@line 17102
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 17103
     HEAP32[$191 >> 2] = $20; //@line 17104
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 17105
     HEAP32[$192 >> 2] = $22; //@line 17106
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 17107
     HEAP32[$193 >> 2] = $24; //@line 17108
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 17109
     HEAP32[$194 >> 2] = $26; //@line 17110
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 17111
     HEAP16[$195 >> 1] = $$1202$i; //@line 17112
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 17113
     HEAP32[$196 >> 2] = $28; //@line 17114
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 17115
     HEAP32[$197 >> 2] = $30; //@line 17116
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 17117
     HEAP32[$198 >> 2] = $32; //@line 17118
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 17119
     HEAP32[$199 >> 2] = $34; //@line 17120
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 17121
     HEAP32[$200 >> 2] = $157; //@line 17122
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 17123
     HEAP32[$201 >> 2] = $38; //@line 17124
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 17125
     HEAP32[$202 >> 2] = $$1202$in$i; //@line 17126
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 17127
     HEAP32[$203 >> 2] = $42; //@line 17128
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 17129
     HEAP32[$204 >> 2] = $36; //@line 17130
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 17131
     HEAP32[$205 >> 2] = $44; //@line 17132
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 17133
     HEAP32[$206 >> 2] = $46; //@line 17134
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 17135
     HEAP32[$207 >> 2] = $48; //@line 17136
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 17137
     HEAP32[$208 >> 2] = $50; //@line 17138
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 17139
     HEAP32[$209 >> 2] = $52; //@line 17140
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 17141
     HEAP32[$210 >> 2] = $54; //@line 17142
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 17143
     HEAP32[$211 >> 2] = $56; //@line 17144
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 17145
     HEAP32[$212 >> 2] = $58; //@line 17146
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 17147
     HEAP32[$213 >> 2] = $60; //@line 17148
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 17149
     HEAP32[$214 >> 2] = $215; //@line 17150
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 17151
     HEAP32[$216 >> 2] = $62; //@line 17152
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 17153
     HEAP32[$217 >> 2] = $64; //@line 17154
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 17155
     HEAP32[$218 >> 2] = $66; //@line 17156
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 17157
     HEAP32[$219 >> 2] = $68; //@line 17158
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 17159
     HEAP32[$220 >> 2] = $70; //@line 17160
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 17161
     HEAP32[$221 >> 2] = $72; //@line 17162
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 17163
     HEAP32[$222 >> 2] = $74; //@line 17164
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 17165
     HEAP32[$223 >> 2] = $76; //@line 17166
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 17167
     HEAP32[$224 >> 2] = $78; //@line 17168
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 17169
     HEAP32[$225 >> 2] = $80; //@line 17170
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 17171
     HEAP32[$226 >> 2] = $82; //@line 17172
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 17173
     HEAP32[$227 >> 2] = $84; //@line 17174
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 17175
     HEAP32[$228 >> 2] = $86; //@line 17176
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 17177
     HEAP32[$229 >> 2] = $88; //@line 17178
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 17179
     HEAP32[$230 >> 2] = $90; //@line 17180
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 17181
     HEAP32[$231 >> 2] = $92; //@line 17182
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 17183
     HEAP32[$232 >> 2] = $94; //@line 17184
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 17185
     HEAP32[$233 >> 2] = $96; //@line 17186
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 17187
     HEAP32[$234 >> 2] = $98; //@line 17188
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 17189
     HEAP32[$235 >> 2] = $100; //@line 17190
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 17191
     HEAP32[$236 >> 2] = $102; //@line 17192
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 17193
     HEAP32[$237 >> 2] = $104; //@line 17194
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 17195
     HEAP32[$238 >> 2] = $106; //@line 17196
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 17197
     HEAP16[$239 >> 1] = $trunc$i; //@line 17198
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 17199
     HEAP32[$240 >> 2] = $108; //@line 17200
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 17201
     HEAP32[$241 >> 2] = $110; //@line 17202
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 17203
     HEAP32[$242 >> 2] = $112; //@line 17204
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 17205
     HEAP32[$243 >> 2] = $114; //@line 17206
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 17207
     HEAP32[$244 >> 2] = $116; //@line 17208
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 17209
     HEAP32[$245 >> 2] = $118; //@line 17210
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 17211
     HEAP32[$246 >> 2] = $120; //@line 17212
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 17213
     HEAP32[$247 >> 2] = $122; //@line 17214
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 17215
     HEAP32[$248 >> 2] = $126; //@line 17216
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 17217
     HEAP32[$249 >> 2] = $128; //@line 17218
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 17219
     HEAP32[$250 >> 2] = $130; //@line 17220
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 17221
     HEAP32[$251 >> 2] = $132; //@line 17222
     sp = STACKTOP; //@line 17223
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $118); //@line 17228
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 17233
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 17238
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$130 >> 2] | 0; //@line 17242
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 17248
       $289 = $215 + 1 | 0; //@line 17249
       HEAP32[$82 >> 2] = $289; //@line 17250
       $290 = HEAP32[$120 >> 2] | 0; //@line 17251
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 17252
       $291 = FUNCTION_TABLE_ii[$290 & 15]($$1202$i) | 0; //@line 17253
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 17256
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 17257
        HEAP32[$292 >> 2] = $2; //@line 17258
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 17259
        HEAP32[$293 >> 2] = $4; //@line 17260
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 17261
        HEAP32[$294 >> 2] = $6; //@line 17262
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 17263
        HEAP32[$295 >> 2] = $8; //@line 17264
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 17265
        HEAP32[$296 >> 2] = $10; //@line 17266
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 17267
        HEAP32[$297 >> 2] = $12; //@line 17268
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 17269
        HEAP32[$298 >> 2] = $14; //@line 17270
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 17271
        HEAP32[$299 >> 2] = $16; //@line 17272
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 17273
        HEAP32[$300 >> 2] = $18; //@line 17274
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 17275
        HEAP32[$301 >> 2] = $20; //@line 17276
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 17277
        HEAP32[$302 >> 2] = $22; //@line 17278
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 17279
        HEAP32[$303 >> 2] = $24; //@line 17280
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 17281
        HEAP32[$304 >> 2] = $26; //@line 17282
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 17283
        HEAP32[$305 >> 2] = $28; //@line 17284
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 17285
        HEAP32[$306 >> 2] = $30; //@line 17286
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 17287
        HEAP32[$307 >> 2] = $32; //@line 17288
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 17289
        HEAP32[$308 >> 2] = $34; //@line 17290
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 17291
        HEAP32[$309 >> 2] = $36; //@line 17292
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 17293
        HEAP32[$310 >> 2] = $38; //@line 17294
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 17295
        HEAP32[$311 >> 2] = $157; //@line 17296
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 17297
        HEAP32[$312 >> 2] = $42; //@line 17298
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 17299
        HEAP32[$313 >> 2] = $44; //@line 17300
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 17301
        HEAP32[$314 >> 2] = $46; //@line 17302
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 17303
        HEAP32[$315 >> 2] = $48; //@line 17304
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 17305
        HEAP32[$316 >> 2] = $50; //@line 17306
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 17307
        HEAP32[$317 >> 2] = $52; //@line 17308
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 17309
        HEAP32[$318 >> 2] = $54; //@line 17310
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 17311
        HEAP32[$319 >> 2] = $56; //@line 17312
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 17313
        HEAP32[$320 >> 2] = $58; //@line 17314
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 17315
        HEAP32[$321 >> 2] = $60; //@line 17316
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 17317
        HEAP32[$322 >> 2] = $62; //@line 17318
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 17319
        HEAP32[$323 >> 2] = $64; //@line 17320
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 17321
        HEAP32[$324 >> 2] = $66; //@line 17322
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 17323
        HEAP32[$325 >> 2] = $68; //@line 17324
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 17325
        HEAP32[$326 >> 2] = $70; //@line 17326
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 17327
        HEAP32[$327 >> 2] = $72; //@line 17328
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 17329
        HEAP32[$328 >> 2] = $74; //@line 17330
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 17331
        HEAP32[$329 >> 2] = $76; //@line 17332
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 17333
        HEAP32[$330 >> 2] = $78; //@line 17334
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 17335
        HEAP32[$331 >> 2] = $80; //@line 17336
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 17337
        HEAP32[$332 >> 2] = $82; //@line 17338
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 17339
        HEAP32[$333 >> 2] = $84; //@line 17340
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 17341
        HEAP32[$334 >> 2] = $86; //@line 17342
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 17343
        HEAP32[$335 >> 2] = $88; //@line 17344
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 17345
        HEAP32[$336 >> 2] = $90; //@line 17346
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 17347
        HEAP32[$337 >> 2] = $92; //@line 17348
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 17349
        HEAP32[$338 >> 2] = $94; //@line 17350
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 17351
        HEAP32[$339 >> 2] = $96; //@line 17352
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 17353
        HEAP32[$340 >> 2] = $98; //@line 17354
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 17355
        HEAP32[$341 >> 2] = $100; //@line 17356
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 17357
        HEAP32[$342 >> 2] = $102; //@line 17358
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 17359
        HEAP32[$343 >> 2] = $104; //@line 17360
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 17361
        HEAP32[$344 >> 2] = $106; //@line 17362
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 17363
        HEAP32[$345 >> 2] = $108; //@line 17364
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 17365
        HEAP32[$346 >> 2] = $289; //@line 17366
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 17367
        HEAP32[$347 >> 2] = $110; //@line 17368
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 17369
        HEAP32[$348 >> 2] = $281; //@line 17370
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 17371
        HEAP32[$349 >> 2] = $112; //@line 17372
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 17373
        HEAP32[$350 >> 2] = $114; //@line 17374
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 17375
        HEAP32[$351 >> 2] = $116; //@line 17376
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 17377
        HEAP32[$352 >> 2] = $118; //@line 17378
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 17379
        HEAP32[$353 >> 2] = $120; //@line 17380
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 17381
        HEAP32[$354 >> 2] = $122; //@line 17382
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 17383
        HEAP32[$355 >> 2] = $124; //@line 17384
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 17385
        HEAP32[$356 >> 2] = $126; //@line 17386
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 17387
        HEAP32[$357 >> 2] = $128; //@line 17388
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 17389
        HEAP32[$358 >> 2] = $130; //@line 17390
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 17391
        HEAP32[$359 >> 2] = $132; //@line 17392
        sp = STACKTOP; //@line 17393
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 17397
       ___async_unwind = 0; //@line 17398
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 17399
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 17400
       HEAP32[$292 >> 2] = $2; //@line 17401
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 17402
       HEAP32[$293 >> 2] = $4; //@line 17403
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 17404
       HEAP32[$294 >> 2] = $6; //@line 17405
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 17406
       HEAP32[$295 >> 2] = $8; //@line 17407
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 17408
       HEAP32[$296 >> 2] = $10; //@line 17409
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 17410
       HEAP32[$297 >> 2] = $12; //@line 17411
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 17412
       HEAP32[$298 >> 2] = $14; //@line 17413
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 17414
       HEAP32[$299 >> 2] = $16; //@line 17415
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 17416
       HEAP32[$300 >> 2] = $18; //@line 17417
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 17418
       HEAP32[$301 >> 2] = $20; //@line 17419
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 17420
       HEAP32[$302 >> 2] = $22; //@line 17421
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 17422
       HEAP32[$303 >> 2] = $24; //@line 17423
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 17424
       HEAP32[$304 >> 2] = $26; //@line 17425
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 17426
       HEAP32[$305 >> 2] = $28; //@line 17427
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 17428
       HEAP32[$306 >> 2] = $30; //@line 17429
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 17430
       HEAP32[$307 >> 2] = $32; //@line 17431
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 17432
       HEAP32[$308 >> 2] = $34; //@line 17433
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 17434
       HEAP32[$309 >> 2] = $36; //@line 17435
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 17436
       HEAP32[$310 >> 2] = $38; //@line 17437
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 17438
       HEAP32[$311 >> 2] = $157; //@line 17439
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 17440
       HEAP32[$312 >> 2] = $42; //@line 17441
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 17442
       HEAP32[$313 >> 2] = $44; //@line 17443
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 17444
       HEAP32[$314 >> 2] = $46; //@line 17445
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 17446
       HEAP32[$315 >> 2] = $48; //@line 17447
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 17448
       HEAP32[$316 >> 2] = $50; //@line 17449
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 17450
       HEAP32[$317 >> 2] = $52; //@line 17451
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 17452
       HEAP32[$318 >> 2] = $54; //@line 17453
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 17454
       HEAP32[$319 >> 2] = $56; //@line 17455
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 17456
       HEAP32[$320 >> 2] = $58; //@line 17457
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 17458
       HEAP32[$321 >> 2] = $60; //@line 17459
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 17460
       HEAP32[$322 >> 2] = $62; //@line 17461
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 17462
       HEAP32[$323 >> 2] = $64; //@line 17463
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 17464
       HEAP32[$324 >> 2] = $66; //@line 17465
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 17466
       HEAP32[$325 >> 2] = $68; //@line 17467
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 17468
       HEAP32[$326 >> 2] = $70; //@line 17469
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 17470
       HEAP32[$327 >> 2] = $72; //@line 17471
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 17472
       HEAP32[$328 >> 2] = $74; //@line 17473
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 17474
       HEAP32[$329 >> 2] = $76; //@line 17475
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 17476
       HEAP32[$330 >> 2] = $78; //@line 17477
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 17478
       HEAP32[$331 >> 2] = $80; //@line 17479
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 17480
       HEAP32[$332 >> 2] = $82; //@line 17481
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 17482
       HEAP32[$333 >> 2] = $84; //@line 17483
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 17484
       HEAP32[$334 >> 2] = $86; //@line 17485
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 17486
       HEAP32[$335 >> 2] = $88; //@line 17487
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 17488
       HEAP32[$336 >> 2] = $90; //@line 17489
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 17490
       HEAP32[$337 >> 2] = $92; //@line 17491
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 17492
       HEAP32[$338 >> 2] = $94; //@line 17493
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 17494
       HEAP32[$339 >> 2] = $96; //@line 17495
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 17496
       HEAP32[$340 >> 2] = $98; //@line 17497
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 17498
       HEAP32[$341 >> 2] = $100; //@line 17499
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 17500
       HEAP32[$342 >> 2] = $102; //@line 17501
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 17502
       HEAP32[$343 >> 2] = $104; //@line 17503
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 17504
       HEAP32[$344 >> 2] = $106; //@line 17505
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 17506
       HEAP32[$345 >> 2] = $108; //@line 17507
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 17508
       HEAP32[$346 >> 2] = $289; //@line 17509
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 17510
       HEAP32[$347 >> 2] = $110; //@line 17511
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 17512
       HEAP32[$348 >> 2] = $281; //@line 17513
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 17514
       HEAP32[$349 >> 2] = $112; //@line 17515
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 17516
       HEAP32[$350 >> 2] = $114; //@line 17517
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 17518
       HEAP32[$351 >> 2] = $116; //@line 17519
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 17520
       HEAP32[$352 >> 2] = $118; //@line 17521
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 17522
       HEAP32[$353 >> 2] = $120; //@line 17523
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 17524
       HEAP32[$354 >> 2] = $122; //@line 17525
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 17526
       HEAP32[$355 >> 2] = $124; //@line 17527
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 17528
       HEAP32[$356 >> 2] = $126; //@line 17529
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 17530
       HEAP32[$357 >> 2] = $128; //@line 17531
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 17532
       HEAP32[$358 >> 2] = $130; //@line 17533
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 17534
       HEAP32[$359 >> 2] = $132; //@line 17535
       sp = STACKTOP; //@line 17536
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 17540
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$130 >> 2] | 0; //@line 17545
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 17547
     $363 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 17548
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 17551
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 17552
      HEAP32[$364 >> 2] = $2; //@line 17553
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 17554
      HEAP32[$365 >> 2] = $4; //@line 17555
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 17556
      HEAP32[$366 >> 2] = $6; //@line 17557
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 17558
      HEAP32[$367 >> 2] = $8; //@line 17559
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 17560
      HEAP32[$368 >> 2] = $10; //@line 17561
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 17562
      HEAP32[$369 >> 2] = $12; //@line 17563
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 17564
      HEAP32[$370 >> 2] = $14; //@line 17565
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 17566
      HEAP32[$371 >> 2] = $16; //@line 17567
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 17568
      HEAP32[$372 >> 2] = $18; //@line 17569
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 17570
      HEAP32[$373 >> 2] = $20; //@line 17571
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 17572
      HEAP32[$374 >> 2] = $22; //@line 17573
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 17574
      HEAP32[$375 >> 2] = $24; //@line 17575
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 17576
      HEAP32[$376 >> 2] = $26; //@line 17577
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 17578
      HEAP32[$377 >> 2] = $28; //@line 17579
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 17580
      HEAP32[$378 >> 2] = $30; //@line 17581
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 17582
      HEAP32[$379 >> 2] = $32; //@line 17583
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 17584
      HEAP32[$380 >> 2] = $34; //@line 17585
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 17586
      HEAP32[$381 >> 2] = $36; //@line 17587
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 17588
      HEAP32[$382 >> 2] = $38; //@line 17589
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 17590
      HEAP32[$383 >> 2] = $157; //@line 17591
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 17592
      HEAP32[$384 >> 2] = $42; //@line 17593
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 17594
      HEAP32[$385 >> 2] = $44; //@line 17595
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 17596
      HEAP32[$386 >> 2] = $46; //@line 17597
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 17598
      HEAP32[$387 >> 2] = $48; //@line 17599
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 17600
      HEAP32[$388 >> 2] = $50; //@line 17601
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 17602
      HEAP32[$389 >> 2] = $52; //@line 17603
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 17604
      HEAP32[$390 >> 2] = $54; //@line 17605
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 17606
      HEAP32[$391 >> 2] = $56; //@line 17607
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 17608
      HEAP32[$392 >> 2] = $58; //@line 17609
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 17610
      HEAP32[$393 >> 2] = $60; //@line 17611
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 17612
      HEAP32[$394 >> 2] = $62; //@line 17613
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 17614
      HEAP32[$395 >> 2] = $64; //@line 17615
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 17616
      HEAP32[$396 >> 2] = $66; //@line 17617
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 17618
      HEAP32[$397 >> 2] = $68; //@line 17619
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 17620
      HEAP32[$398 >> 2] = $70; //@line 17621
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 17622
      HEAP32[$399 >> 2] = $72; //@line 17623
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 17624
      HEAP32[$400 >> 2] = $74; //@line 17625
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 17626
      HEAP32[$401 >> 2] = $76; //@line 17627
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 17628
      HEAP32[$402 >> 2] = $78; //@line 17629
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 17630
      HEAP32[$403 >> 2] = $80; //@line 17631
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 17632
      HEAP32[$404 >> 2] = $82; //@line 17633
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 17634
      HEAP32[$405 >> 2] = $84; //@line 17635
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 17636
      HEAP32[$406 >> 2] = $86; //@line 17637
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 17638
      HEAP32[$407 >> 2] = $88; //@line 17639
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 17640
      HEAP32[$408 >> 2] = $90; //@line 17641
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 17642
      HEAP32[$409 >> 2] = $92; //@line 17643
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 17644
      HEAP32[$410 >> 2] = $94; //@line 17645
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 17646
      HEAP32[$411 >> 2] = $96; //@line 17647
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 17648
      HEAP32[$412 >> 2] = $98; //@line 17649
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 17650
      HEAP32[$413 >> 2] = $100; //@line 17651
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 17652
      HEAP32[$414 >> 2] = $102; //@line 17653
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 17654
      HEAP32[$415 >> 2] = $104; //@line 17655
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 17656
      HEAP32[$416 >> 2] = $106; //@line 17657
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 17658
      HEAP32[$417 >> 2] = $108; //@line 17659
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 17660
      HEAP32[$418 >> 2] = $110; //@line 17661
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 17662
      HEAP32[$419 >> 2] = $112; //@line 17663
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 17664
      HEAP32[$420 >> 2] = $114; //@line 17665
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 17666
      HEAP32[$421 >> 2] = $116; //@line 17667
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 17668
      HEAP32[$422 >> 2] = $118; //@line 17669
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 17670
      HEAP32[$423 >> 2] = $120; //@line 17671
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 17672
      HEAP32[$424 >> 2] = $122; //@line 17673
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 17674
      HEAP32[$425 >> 2] = $124; //@line 17675
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 17676
      HEAP32[$426 >> 2] = $126; //@line 17677
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 17678
      HEAP32[$427 >> 2] = $128; //@line 17679
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 17680
      HEAP32[$428 >> 2] = $130; //@line 17681
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 17682
      HEAP32[$429 >> 2] = $132; //@line 17683
      sp = STACKTOP; //@line 17684
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 17688
     ___async_unwind = 0; //@line 17689
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 17690
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 17691
     HEAP32[$364 >> 2] = $2; //@line 17692
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 17693
     HEAP32[$365 >> 2] = $4; //@line 17694
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 17695
     HEAP32[$366 >> 2] = $6; //@line 17696
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 17697
     HEAP32[$367 >> 2] = $8; //@line 17698
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 17699
     HEAP32[$368 >> 2] = $10; //@line 17700
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 17701
     HEAP32[$369 >> 2] = $12; //@line 17702
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 17703
     HEAP32[$370 >> 2] = $14; //@line 17704
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 17705
     HEAP32[$371 >> 2] = $16; //@line 17706
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 17707
     HEAP32[$372 >> 2] = $18; //@line 17708
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 17709
     HEAP32[$373 >> 2] = $20; //@line 17710
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 17711
     HEAP32[$374 >> 2] = $22; //@line 17712
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 17713
     HEAP32[$375 >> 2] = $24; //@line 17714
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 17715
     HEAP32[$376 >> 2] = $26; //@line 17716
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 17717
     HEAP32[$377 >> 2] = $28; //@line 17718
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 17719
     HEAP32[$378 >> 2] = $30; //@line 17720
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 17721
     HEAP32[$379 >> 2] = $32; //@line 17722
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 17723
     HEAP32[$380 >> 2] = $34; //@line 17724
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 17725
     HEAP32[$381 >> 2] = $36; //@line 17726
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 17727
     HEAP32[$382 >> 2] = $38; //@line 17728
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 17729
     HEAP32[$383 >> 2] = $157; //@line 17730
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 17731
     HEAP32[$384 >> 2] = $42; //@line 17732
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 17733
     HEAP32[$385 >> 2] = $44; //@line 17734
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 17735
     HEAP32[$386 >> 2] = $46; //@line 17736
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 17737
     HEAP32[$387 >> 2] = $48; //@line 17738
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 17739
     HEAP32[$388 >> 2] = $50; //@line 17740
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 17741
     HEAP32[$389 >> 2] = $52; //@line 17742
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 17743
     HEAP32[$390 >> 2] = $54; //@line 17744
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 17745
     HEAP32[$391 >> 2] = $56; //@line 17746
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 17747
     HEAP32[$392 >> 2] = $58; //@line 17748
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 17749
     HEAP32[$393 >> 2] = $60; //@line 17750
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 17751
     HEAP32[$394 >> 2] = $62; //@line 17752
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 17753
     HEAP32[$395 >> 2] = $64; //@line 17754
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 17755
     HEAP32[$396 >> 2] = $66; //@line 17756
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 17757
     HEAP32[$397 >> 2] = $68; //@line 17758
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 17759
     HEAP32[$398 >> 2] = $70; //@line 17760
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 17761
     HEAP32[$399 >> 2] = $72; //@line 17762
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 17763
     HEAP32[$400 >> 2] = $74; //@line 17764
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 17765
     HEAP32[$401 >> 2] = $76; //@line 17766
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 17767
     HEAP32[$402 >> 2] = $78; //@line 17768
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 17769
     HEAP32[$403 >> 2] = $80; //@line 17770
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 17771
     HEAP32[$404 >> 2] = $82; //@line 17772
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 17773
     HEAP32[$405 >> 2] = $84; //@line 17774
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 17775
     HEAP32[$406 >> 2] = $86; //@line 17776
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 17777
     HEAP32[$407 >> 2] = $88; //@line 17778
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 17779
     HEAP32[$408 >> 2] = $90; //@line 17780
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 17781
     HEAP32[$409 >> 2] = $92; //@line 17782
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 17783
     HEAP32[$410 >> 2] = $94; //@line 17784
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 17785
     HEAP32[$411 >> 2] = $96; //@line 17786
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 17787
     HEAP32[$412 >> 2] = $98; //@line 17788
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 17789
     HEAP32[$413 >> 2] = $100; //@line 17790
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 17791
     HEAP32[$414 >> 2] = $102; //@line 17792
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 17793
     HEAP32[$415 >> 2] = $104; //@line 17794
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 17795
     HEAP32[$416 >> 2] = $106; //@line 17796
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 17797
     HEAP32[$417 >> 2] = $108; //@line 17798
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 17799
     HEAP32[$418 >> 2] = $110; //@line 17800
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 17801
     HEAP32[$419 >> 2] = $112; //@line 17802
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 17803
     HEAP32[$420 >> 2] = $114; //@line 17804
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 17805
     HEAP32[$421 >> 2] = $116; //@line 17806
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 17807
     HEAP32[$422 >> 2] = $118; //@line 17808
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 17809
     HEAP32[$423 >> 2] = $120; //@line 17810
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 17811
     HEAP32[$424 >> 2] = $122; //@line 17812
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 17813
     HEAP32[$425 >> 2] = $124; //@line 17814
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 17815
     HEAP32[$426 >> 2] = $126; //@line 17816
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 17817
     HEAP32[$427 >> 2] = $128; //@line 17818
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 17819
     HEAP32[$428 >> 2] = $130; //@line 17820
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 17821
     HEAP32[$429 >> 2] = $132; //@line 17822
     sp = STACKTOP; //@line 17823
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 17828
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$130 >> 2] | 0; //@line 17832
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 17838
       $439 = $215 + 1 | 0; //@line 17839
       HEAP32[$82 >> 2] = $439; //@line 17840
       $440 = HEAP32[$120 >> 2] | 0; //@line 17841
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 17842
       $441 = FUNCTION_TABLE_ii[$440 & 15]($$1202$i) | 0; //@line 17843
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 17846
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 17847
        HEAP32[$442 >> 2] = $2; //@line 17848
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 17849
        HEAP32[$443 >> 2] = $4; //@line 17850
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 17851
        HEAP32[$444 >> 2] = $6; //@line 17852
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 17853
        HEAP32[$445 >> 2] = $8; //@line 17854
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 17855
        HEAP32[$446 >> 2] = $10; //@line 17856
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 17857
        HEAP32[$447 >> 2] = $12; //@line 17858
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 17859
        HEAP32[$448 >> 2] = $14; //@line 17860
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 17861
        HEAP32[$449 >> 2] = $16; //@line 17862
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 17863
        HEAP32[$450 >> 2] = $18; //@line 17864
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 17865
        HEAP32[$451 >> 2] = $20; //@line 17866
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 17867
        HEAP32[$452 >> 2] = $22; //@line 17868
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 17869
        HEAP32[$453 >> 2] = $24; //@line 17870
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 17871
        HEAP32[$454 >> 2] = $26; //@line 17872
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 17873
        HEAP32[$455 >> 2] = $28; //@line 17874
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 17875
        HEAP32[$456 >> 2] = $30; //@line 17876
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 17877
        HEAP32[$457 >> 2] = $32; //@line 17878
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 17879
        HEAP32[$458 >> 2] = $34; //@line 17880
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 17881
        HEAP32[$459 >> 2] = $36; //@line 17882
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 17883
        HEAP32[$460 >> 2] = $38; //@line 17884
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 17885
        HEAP32[$461 >> 2] = $157; //@line 17886
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 17887
        HEAP32[$462 >> 2] = $42; //@line 17888
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 17889
        HEAP32[$463 >> 2] = $44; //@line 17890
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 17891
        HEAP32[$464 >> 2] = $46; //@line 17892
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 17893
        HEAP32[$465 >> 2] = $48; //@line 17894
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 17895
        HEAP32[$466 >> 2] = $50; //@line 17896
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 17897
        HEAP32[$467 >> 2] = $52; //@line 17898
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 17899
        HEAP32[$468 >> 2] = $54; //@line 17900
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 17901
        HEAP32[$469 >> 2] = $56; //@line 17902
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 17903
        HEAP32[$470 >> 2] = $58; //@line 17904
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 17905
        HEAP32[$471 >> 2] = $60; //@line 17906
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 17907
        HEAP32[$472 >> 2] = $62; //@line 17908
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 17909
        HEAP32[$473 >> 2] = $64; //@line 17910
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 17911
        HEAP32[$474 >> 2] = $66; //@line 17912
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 17913
        HEAP32[$475 >> 2] = $68; //@line 17914
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 17915
        HEAP32[$476 >> 2] = $70; //@line 17916
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 17917
        HEAP32[$477 >> 2] = $72; //@line 17918
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 17919
        HEAP32[$478 >> 2] = $74; //@line 17920
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 17921
        HEAP32[$479 >> 2] = $76; //@line 17922
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 17923
        HEAP32[$480 >> 2] = $78; //@line 17924
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 17925
        HEAP32[$481 >> 2] = $80; //@line 17926
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 17927
        HEAP32[$482 >> 2] = $82; //@line 17928
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 17929
        HEAP32[$483 >> 2] = $84; //@line 17930
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 17931
        HEAP32[$484 >> 2] = $86; //@line 17932
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 17933
        HEAP32[$485 >> 2] = $88; //@line 17934
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 17935
        HEAP32[$486 >> 2] = $90; //@line 17936
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 17937
        HEAP32[$487 >> 2] = $92; //@line 17938
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 17939
        HEAP32[$488 >> 2] = $94; //@line 17940
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 17941
        HEAP32[$489 >> 2] = $96; //@line 17942
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 17943
        HEAP32[$490 >> 2] = $98; //@line 17944
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 17945
        HEAP32[$491 >> 2] = $100; //@line 17946
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 17947
        HEAP32[$492 >> 2] = $102; //@line 17948
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 17949
        HEAP32[$493 >> 2] = $104; //@line 17950
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 17951
        HEAP32[$494 >> 2] = $106; //@line 17952
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 17953
        HEAP32[$495 >> 2] = $108; //@line 17954
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 17955
        HEAP32[$496 >> 2] = $110; //@line 17956
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 17957
        HEAP32[$497 >> 2] = $112; //@line 17958
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 17959
        HEAP32[$498 >> 2] = $114; //@line 17960
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 17961
        HEAP32[$499 >> 2] = $116; //@line 17962
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 17963
        HEAP32[$500 >> 2] = $439; //@line 17964
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 17965
        HEAP32[$501 >> 2] = $118; //@line 17966
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 17967
        HEAP32[$502 >> 2] = $431; //@line 17968
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 17969
        HEAP32[$503 >> 2] = $120; //@line 17970
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 17971
        HEAP32[$504 >> 2] = $122; //@line 17972
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 17973
        HEAP32[$505 >> 2] = $124; //@line 17974
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 17975
        HEAP32[$506 >> 2] = $126; //@line 17976
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 17977
        HEAP32[$507 >> 2] = $128; //@line 17978
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 17979
        HEAP32[$508 >> 2] = $130; //@line 17980
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 17981
        HEAP32[$509 >> 2] = $132; //@line 17982
        sp = STACKTOP; //@line 17983
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 17987
       ___async_unwind = 0; //@line 17988
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 17989
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 17990
       HEAP32[$442 >> 2] = $2; //@line 17991
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 17992
       HEAP32[$443 >> 2] = $4; //@line 17993
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 17994
       HEAP32[$444 >> 2] = $6; //@line 17995
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 17996
       HEAP32[$445 >> 2] = $8; //@line 17997
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 17998
       HEAP32[$446 >> 2] = $10; //@line 17999
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 18000
       HEAP32[$447 >> 2] = $12; //@line 18001
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 18002
       HEAP32[$448 >> 2] = $14; //@line 18003
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 18004
       HEAP32[$449 >> 2] = $16; //@line 18005
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 18006
       HEAP32[$450 >> 2] = $18; //@line 18007
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 18008
       HEAP32[$451 >> 2] = $20; //@line 18009
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 18010
       HEAP32[$452 >> 2] = $22; //@line 18011
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 18012
       HEAP32[$453 >> 2] = $24; //@line 18013
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 18014
       HEAP32[$454 >> 2] = $26; //@line 18015
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 18016
       HEAP32[$455 >> 2] = $28; //@line 18017
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 18018
       HEAP32[$456 >> 2] = $30; //@line 18019
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 18020
       HEAP32[$457 >> 2] = $32; //@line 18021
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 18022
       HEAP32[$458 >> 2] = $34; //@line 18023
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 18024
       HEAP32[$459 >> 2] = $36; //@line 18025
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 18026
       HEAP32[$460 >> 2] = $38; //@line 18027
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 18028
       HEAP32[$461 >> 2] = $157; //@line 18029
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 18030
       HEAP32[$462 >> 2] = $42; //@line 18031
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 18032
       HEAP32[$463 >> 2] = $44; //@line 18033
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 18034
       HEAP32[$464 >> 2] = $46; //@line 18035
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 18036
       HEAP32[$465 >> 2] = $48; //@line 18037
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 18038
       HEAP32[$466 >> 2] = $50; //@line 18039
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 18040
       HEAP32[$467 >> 2] = $52; //@line 18041
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 18042
       HEAP32[$468 >> 2] = $54; //@line 18043
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 18044
       HEAP32[$469 >> 2] = $56; //@line 18045
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 18046
       HEAP32[$470 >> 2] = $58; //@line 18047
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 18048
       HEAP32[$471 >> 2] = $60; //@line 18049
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 18050
       HEAP32[$472 >> 2] = $62; //@line 18051
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 18052
       HEAP32[$473 >> 2] = $64; //@line 18053
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 18054
       HEAP32[$474 >> 2] = $66; //@line 18055
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 18056
       HEAP32[$475 >> 2] = $68; //@line 18057
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 18058
       HEAP32[$476 >> 2] = $70; //@line 18059
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 18060
       HEAP32[$477 >> 2] = $72; //@line 18061
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 18062
       HEAP32[$478 >> 2] = $74; //@line 18063
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 18064
       HEAP32[$479 >> 2] = $76; //@line 18065
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 18066
       HEAP32[$480 >> 2] = $78; //@line 18067
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 18068
       HEAP32[$481 >> 2] = $80; //@line 18069
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 18070
       HEAP32[$482 >> 2] = $82; //@line 18071
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 18072
       HEAP32[$483 >> 2] = $84; //@line 18073
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 18074
       HEAP32[$484 >> 2] = $86; //@line 18075
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 18076
       HEAP32[$485 >> 2] = $88; //@line 18077
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 18078
       HEAP32[$486 >> 2] = $90; //@line 18079
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 18080
       HEAP32[$487 >> 2] = $92; //@line 18081
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 18082
       HEAP32[$488 >> 2] = $94; //@line 18083
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 18084
       HEAP32[$489 >> 2] = $96; //@line 18085
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 18086
       HEAP32[$490 >> 2] = $98; //@line 18087
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 18088
       HEAP32[$491 >> 2] = $100; //@line 18089
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 18090
       HEAP32[$492 >> 2] = $102; //@line 18091
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 18092
       HEAP32[$493 >> 2] = $104; //@line 18093
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 18094
       HEAP32[$494 >> 2] = $106; //@line 18095
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 18096
       HEAP32[$495 >> 2] = $108; //@line 18097
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 18098
       HEAP32[$496 >> 2] = $110; //@line 18099
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 18100
       HEAP32[$497 >> 2] = $112; //@line 18101
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 18102
       HEAP32[$498 >> 2] = $114; //@line 18103
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 18104
       HEAP32[$499 >> 2] = $116; //@line 18105
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 18106
       HEAP32[$500 >> 2] = $439; //@line 18107
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 18108
       HEAP32[$501 >> 2] = $118; //@line 18109
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 18110
       HEAP32[$502 >> 2] = $431; //@line 18111
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 18112
       HEAP32[$503 >> 2] = $120; //@line 18113
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 18114
       HEAP32[$504 >> 2] = $122; //@line 18115
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 18116
       HEAP32[$505 >> 2] = $124; //@line 18117
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 18118
       HEAP32[$506 >> 2] = $126; //@line 18119
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 18120
       HEAP32[$507 >> 2] = $128; //@line 18121
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 18122
       HEAP32[$508 >> 2] = $130; //@line 18123
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 18124
       HEAP32[$509 >> 2] = $132; //@line 18125
       sp = STACKTOP; //@line 18126
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 18130
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$130 >> 2] | 0; //@line 18135
     $512 = $511 + 56 | 0; //@line 18136
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 18140
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 18144
     $516 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 18145
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 18148
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 18149
      HEAP32[$517 >> 2] = $2; //@line 18150
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 18151
      HEAP32[$518 >> 2] = $4; //@line 18152
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 18153
      HEAP32[$519 >> 2] = $6; //@line 18154
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 18155
      HEAP32[$520 >> 2] = $8; //@line 18156
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 18157
      HEAP32[$521 >> 2] = $10; //@line 18158
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 18159
      HEAP32[$522 >> 2] = $12; //@line 18160
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 18161
      HEAP32[$523 >> 2] = $14; //@line 18162
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 18163
      HEAP32[$524 >> 2] = $16; //@line 18164
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 18165
      HEAP32[$525 >> 2] = $18; //@line 18166
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 18167
      HEAP32[$526 >> 2] = $20; //@line 18168
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 18169
      HEAP32[$527 >> 2] = $22; //@line 18170
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 18171
      HEAP32[$528 >> 2] = $24; //@line 18172
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 18173
      HEAP32[$529 >> 2] = $26; //@line 18174
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 18175
      HEAP32[$530 >> 2] = $28; //@line 18176
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 18177
      HEAP32[$531 >> 2] = $30; //@line 18178
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 18179
      HEAP32[$532 >> 2] = $32; //@line 18180
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 18181
      HEAP32[$533 >> 2] = $34; //@line 18182
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 18183
      HEAP32[$534 >> 2] = $36; //@line 18184
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 18185
      HEAP32[$535 >> 2] = $38; //@line 18186
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 18187
      HEAP32[$536 >> 2] = $157; //@line 18188
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 18189
      HEAP32[$537 >> 2] = $42; //@line 18190
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 18191
      HEAP32[$538 >> 2] = $44; //@line 18192
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 18193
      HEAP32[$539 >> 2] = $46; //@line 18194
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 18195
      HEAP32[$540 >> 2] = $48; //@line 18196
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 18197
      HEAP32[$541 >> 2] = $50; //@line 18198
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 18199
      HEAP32[$542 >> 2] = $52; //@line 18200
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 18201
      HEAP32[$543 >> 2] = $54; //@line 18202
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 18203
      HEAP32[$544 >> 2] = $56; //@line 18204
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 18205
      HEAP32[$545 >> 2] = $58; //@line 18206
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 18207
      HEAP32[$546 >> 2] = $60; //@line 18208
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 18209
      HEAP32[$547 >> 2] = $62; //@line 18210
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 18211
      HEAP32[$548 >> 2] = $64; //@line 18212
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 18213
      HEAP32[$549 >> 2] = $66; //@line 18214
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 18215
      HEAP32[$550 >> 2] = $68; //@line 18216
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 18217
      HEAP32[$551 >> 2] = $70; //@line 18218
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 18219
      HEAP32[$552 >> 2] = $72; //@line 18220
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 18221
      HEAP32[$553 >> 2] = $74; //@line 18222
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 18223
      HEAP32[$554 >> 2] = $76; //@line 18224
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 18225
      HEAP32[$555 >> 2] = $78; //@line 18226
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 18227
      HEAP32[$556 >> 2] = $80; //@line 18228
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 18229
      HEAP32[$557 >> 2] = $82; //@line 18230
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 18231
      HEAP32[$558 >> 2] = $84; //@line 18232
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 18233
      HEAP32[$559 >> 2] = $86; //@line 18234
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 18235
      HEAP32[$560 >> 2] = $88; //@line 18236
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 18237
      HEAP32[$561 >> 2] = $90; //@line 18238
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 18239
      HEAP32[$562 >> 2] = $92; //@line 18240
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 18241
      HEAP32[$563 >> 2] = $94; //@line 18242
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 18243
      HEAP32[$564 >> 2] = $96; //@line 18244
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 18245
      HEAP32[$565 >> 2] = $98; //@line 18246
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 18247
      HEAP32[$566 >> 2] = $100; //@line 18248
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 18249
      HEAP32[$567 >> 2] = $102; //@line 18250
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 18251
      HEAP32[$568 >> 2] = $104; //@line 18252
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 18253
      HEAP32[$569 >> 2] = $106; //@line 18254
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 18255
      HEAP32[$570 >> 2] = $108; //@line 18256
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 18257
      HEAP32[$571 >> 2] = $110; //@line 18258
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 18259
      HEAP32[$572 >> 2] = $112; //@line 18260
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 18261
      HEAP32[$573 >> 2] = $114; //@line 18262
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 18263
      HEAP32[$574 >> 2] = $116; //@line 18264
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 18265
      HEAP32[$575 >> 2] = $118; //@line 18266
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 18267
      HEAP32[$576 >> 2] = $120; //@line 18268
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 18269
      HEAP32[$577 >> 2] = $122; //@line 18270
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 18271
      HEAP32[$578 >> 2] = $124; //@line 18272
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 18273
      HEAP32[$579 >> 2] = $126; //@line 18274
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 18275
      HEAP32[$580 >> 2] = $128; //@line 18276
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 18277
      HEAP32[$581 >> 2] = $130; //@line 18278
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 18279
      HEAP32[$582 >> 2] = $132; //@line 18280
      sp = STACKTOP; //@line 18281
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 18285
     ___async_unwind = 0; //@line 18286
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 18287
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 18288
     HEAP32[$517 >> 2] = $2; //@line 18289
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 18290
     HEAP32[$518 >> 2] = $4; //@line 18291
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 18292
     HEAP32[$519 >> 2] = $6; //@line 18293
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 18294
     HEAP32[$520 >> 2] = $8; //@line 18295
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 18296
     HEAP32[$521 >> 2] = $10; //@line 18297
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 18298
     HEAP32[$522 >> 2] = $12; //@line 18299
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 18300
     HEAP32[$523 >> 2] = $14; //@line 18301
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 18302
     HEAP32[$524 >> 2] = $16; //@line 18303
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 18304
     HEAP32[$525 >> 2] = $18; //@line 18305
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 18306
     HEAP32[$526 >> 2] = $20; //@line 18307
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 18308
     HEAP32[$527 >> 2] = $22; //@line 18309
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 18310
     HEAP32[$528 >> 2] = $24; //@line 18311
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 18312
     HEAP32[$529 >> 2] = $26; //@line 18313
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 18314
     HEAP32[$530 >> 2] = $28; //@line 18315
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 18316
     HEAP32[$531 >> 2] = $30; //@line 18317
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 18318
     HEAP32[$532 >> 2] = $32; //@line 18319
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 18320
     HEAP32[$533 >> 2] = $34; //@line 18321
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 18322
     HEAP32[$534 >> 2] = $36; //@line 18323
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 18324
     HEAP32[$535 >> 2] = $38; //@line 18325
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 18326
     HEAP32[$536 >> 2] = $157; //@line 18327
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 18328
     HEAP32[$537 >> 2] = $42; //@line 18329
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 18330
     HEAP32[$538 >> 2] = $44; //@line 18331
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 18332
     HEAP32[$539 >> 2] = $46; //@line 18333
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 18334
     HEAP32[$540 >> 2] = $48; //@line 18335
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 18336
     HEAP32[$541 >> 2] = $50; //@line 18337
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 18338
     HEAP32[$542 >> 2] = $52; //@line 18339
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 18340
     HEAP32[$543 >> 2] = $54; //@line 18341
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 18342
     HEAP32[$544 >> 2] = $56; //@line 18343
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 18344
     HEAP32[$545 >> 2] = $58; //@line 18345
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 18346
     HEAP32[$546 >> 2] = $60; //@line 18347
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 18348
     HEAP32[$547 >> 2] = $62; //@line 18349
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 18350
     HEAP32[$548 >> 2] = $64; //@line 18351
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 18352
     HEAP32[$549 >> 2] = $66; //@line 18353
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 18354
     HEAP32[$550 >> 2] = $68; //@line 18355
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 18356
     HEAP32[$551 >> 2] = $70; //@line 18357
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 18358
     HEAP32[$552 >> 2] = $72; //@line 18359
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 18360
     HEAP32[$553 >> 2] = $74; //@line 18361
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 18362
     HEAP32[$554 >> 2] = $76; //@line 18363
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 18364
     HEAP32[$555 >> 2] = $78; //@line 18365
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 18366
     HEAP32[$556 >> 2] = $80; //@line 18367
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 18368
     HEAP32[$557 >> 2] = $82; //@line 18369
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 18370
     HEAP32[$558 >> 2] = $84; //@line 18371
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 18372
     HEAP32[$559 >> 2] = $86; //@line 18373
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 18374
     HEAP32[$560 >> 2] = $88; //@line 18375
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 18376
     HEAP32[$561 >> 2] = $90; //@line 18377
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 18378
     HEAP32[$562 >> 2] = $92; //@line 18379
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 18380
     HEAP32[$563 >> 2] = $94; //@line 18381
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 18382
     HEAP32[$564 >> 2] = $96; //@line 18383
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 18384
     HEAP32[$565 >> 2] = $98; //@line 18385
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 18386
     HEAP32[$566 >> 2] = $100; //@line 18387
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 18388
     HEAP32[$567 >> 2] = $102; //@line 18389
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 18390
     HEAP32[$568 >> 2] = $104; //@line 18391
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 18392
     HEAP32[$569 >> 2] = $106; //@line 18393
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 18394
     HEAP32[$570 >> 2] = $108; //@line 18395
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 18396
     HEAP32[$571 >> 2] = $110; //@line 18397
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 18398
     HEAP32[$572 >> 2] = $112; //@line 18399
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 18400
     HEAP32[$573 >> 2] = $114; //@line 18401
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 18402
     HEAP32[$574 >> 2] = $116; //@line 18403
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 18404
     HEAP32[$575 >> 2] = $118; //@line 18405
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 18406
     HEAP32[$576 >> 2] = $120; //@line 18407
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 18408
     HEAP32[$577 >> 2] = $122; //@line 18409
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 18410
     HEAP32[$578 >> 2] = $124; //@line 18411
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 18412
     HEAP32[$579 >> 2] = $126; //@line 18413
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 18414
     HEAP32[$580 >> 2] = $128; //@line 18415
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 18416
     HEAP32[$581 >> 2] = $130; //@line 18417
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 18418
     HEAP32[$582 >> 2] = $132; //@line 18419
     sp = STACKTOP; //@line 18420
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 18425
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$130 >> 2] | 0; //@line 18430
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 18433
     $603 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 18434
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 18437
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 18438
      HEAP32[$604 >> 2] = $2; //@line 18439
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 18440
      HEAP32[$605 >> 2] = $4; //@line 18441
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 18442
      HEAP32[$606 >> 2] = $6; //@line 18443
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 18444
      HEAP32[$607 >> 2] = $8; //@line 18445
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 18446
      HEAP32[$608 >> 2] = $10; //@line 18447
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 18448
      HEAP32[$609 >> 2] = $12; //@line 18449
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 18450
      HEAP32[$610 >> 2] = $14; //@line 18451
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 18452
      HEAP32[$611 >> 2] = $16; //@line 18453
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 18454
      HEAP32[$612 >> 2] = $18; //@line 18455
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 18456
      HEAP32[$613 >> 2] = $20; //@line 18457
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 18458
      HEAP32[$614 >> 2] = $22; //@line 18459
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 18460
      HEAP32[$615 >> 2] = $24; //@line 18461
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 18462
      HEAP32[$616 >> 2] = $26; //@line 18463
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 18464
      HEAP32[$617 >> 2] = $28; //@line 18465
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 18466
      HEAP32[$618 >> 2] = $30; //@line 18467
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 18468
      HEAP32[$619 >> 2] = $32; //@line 18469
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 18470
      HEAP32[$620 >> 2] = $34; //@line 18471
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 18472
      HEAP32[$621 >> 2] = $36; //@line 18473
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 18474
      HEAP32[$622 >> 2] = $38; //@line 18475
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 18476
      HEAP32[$623 >> 2] = $157; //@line 18477
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 18478
      HEAP32[$624 >> 2] = $42; //@line 18479
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 18480
      HEAP32[$625 >> 2] = $44; //@line 18481
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 18482
      HEAP32[$626 >> 2] = $46; //@line 18483
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 18484
      HEAP32[$627 >> 2] = $48; //@line 18485
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 18486
      HEAP32[$628 >> 2] = $50; //@line 18487
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 18488
      HEAP32[$629 >> 2] = $52; //@line 18489
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 18490
      HEAP32[$630 >> 2] = $54; //@line 18491
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 18492
      HEAP32[$631 >> 2] = $56; //@line 18493
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 18494
      HEAP32[$632 >> 2] = $58; //@line 18495
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 18496
      HEAP32[$633 >> 2] = $60; //@line 18497
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 18498
      HEAP32[$634 >> 2] = $62; //@line 18499
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 18500
      HEAP32[$635 >> 2] = $64; //@line 18501
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 18502
      HEAP32[$636 >> 2] = $66; //@line 18503
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 18504
      HEAP32[$637 >> 2] = $68; //@line 18505
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 18506
      HEAP32[$638 >> 2] = $70; //@line 18507
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 18508
      HEAP32[$639 >> 2] = $72; //@line 18509
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 18510
      HEAP32[$640 >> 2] = $74; //@line 18511
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 18512
      HEAP32[$641 >> 2] = $76; //@line 18513
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 18514
      HEAP32[$642 >> 2] = $78; //@line 18515
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 18516
      HEAP32[$643 >> 2] = $80; //@line 18517
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 18518
      HEAP32[$644 >> 2] = $82; //@line 18519
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 18520
      HEAP32[$645 >> 2] = $84; //@line 18521
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 18522
      HEAP32[$646 >> 2] = $86; //@line 18523
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 18524
      HEAP32[$647 >> 2] = $88; //@line 18525
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 18526
      HEAP32[$648 >> 2] = $90; //@line 18527
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 18528
      HEAP32[$649 >> 2] = $92; //@line 18529
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 18530
      HEAP32[$650 >> 2] = $94; //@line 18531
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 18532
      HEAP32[$651 >> 2] = $96; //@line 18533
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 18534
      HEAP32[$652 >> 2] = $98; //@line 18535
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 18536
      HEAP32[$653 >> 2] = $100; //@line 18537
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 18538
      HEAP32[$654 >> 2] = $102; //@line 18539
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 18540
      HEAP32[$655 >> 2] = $104; //@line 18541
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 18542
      HEAP32[$656 >> 2] = $106; //@line 18543
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 18544
      HEAP32[$657 >> 2] = $108; //@line 18545
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 18546
      HEAP32[$658 >> 2] = $110; //@line 18547
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 18548
      HEAP32[$659 >> 2] = $112; //@line 18549
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 18550
      HEAP32[$660 >> 2] = $114; //@line 18551
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 18552
      HEAP32[$661 >> 2] = $116; //@line 18553
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 18554
      HEAP32[$662 >> 2] = $118; //@line 18555
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 18556
      HEAP32[$663 >> 2] = $120; //@line 18557
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 18558
      HEAP32[$664 >> 2] = $122; //@line 18559
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 18560
      HEAP32[$665 >> 2] = $124; //@line 18561
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 18562
      HEAP32[$666 >> 2] = $126; //@line 18563
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 18564
      HEAP32[$667 >> 2] = $128; //@line 18565
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 18566
      HEAP32[$668 >> 2] = $130; //@line 18567
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 18568
      HEAP32[$669 >> 2] = $132; //@line 18569
      sp = STACKTOP; //@line 18570
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 18574
     ___async_unwind = 0; //@line 18575
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 18576
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 18577
     HEAP32[$604 >> 2] = $2; //@line 18578
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 18579
     HEAP32[$605 >> 2] = $4; //@line 18580
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 18581
     HEAP32[$606 >> 2] = $6; //@line 18582
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 18583
     HEAP32[$607 >> 2] = $8; //@line 18584
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 18585
     HEAP32[$608 >> 2] = $10; //@line 18586
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 18587
     HEAP32[$609 >> 2] = $12; //@line 18588
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 18589
     HEAP32[$610 >> 2] = $14; //@line 18590
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 18591
     HEAP32[$611 >> 2] = $16; //@line 18592
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 18593
     HEAP32[$612 >> 2] = $18; //@line 18594
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 18595
     HEAP32[$613 >> 2] = $20; //@line 18596
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 18597
     HEAP32[$614 >> 2] = $22; //@line 18598
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 18599
     HEAP32[$615 >> 2] = $24; //@line 18600
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 18601
     HEAP32[$616 >> 2] = $26; //@line 18602
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 18603
     HEAP32[$617 >> 2] = $28; //@line 18604
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 18605
     HEAP32[$618 >> 2] = $30; //@line 18606
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 18607
     HEAP32[$619 >> 2] = $32; //@line 18608
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 18609
     HEAP32[$620 >> 2] = $34; //@line 18610
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 18611
     HEAP32[$621 >> 2] = $36; //@line 18612
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 18613
     HEAP32[$622 >> 2] = $38; //@line 18614
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 18615
     HEAP32[$623 >> 2] = $157; //@line 18616
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 18617
     HEAP32[$624 >> 2] = $42; //@line 18618
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 18619
     HEAP32[$625 >> 2] = $44; //@line 18620
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 18621
     HEAP32[$626 >> 2] = $46; //@line 18622
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 18623
     HEAP32[$627 >> 2] = $48; //@line 18624
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 18625
     HEAP32[$628 >> 2] = $50; //@line 18626
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 18627
     HEAP32[$629 >> 2] = $52; //@line 18628
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 18629
     HEAP32[$630 >> 2] = $54; //@line 18630
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 18631
     HEAP32[$631 >> 2] = $56; //@line 18632
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 18633
     HEAP32[$632 >> 2] = $58; //@line 18634
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 18635
     HEAP32[$633 >> 2] = $60; //@line 18636
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 18637
     HEAP32[$634 >> 2] = $62; //@line 18638
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 18639
     HEAP32[$635 >> 2] = $64; //@line 18640
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 18641
     HEAP32[$636 >> 2] = $66; //@line 18642
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 18643
     HEAP32[$637 >> 2] = $68; //@line 18644
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 18645
     HEAP32[$638 >> 2] = $70; //@line 18646
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 18647
     HEAP32[$639 >> 2] = $72; //@line 18648
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 18649
     HEAP32[$640 >> 2] = $74; //@line 18650
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 18651
     HEAP32[$641 >> 2] = $76; //@line 18652
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 18653
     HEAP32[$642 >> 2] = $78; //@line 18654
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 18655
     HEAP32[$643 >> 2] = $80; //@line 18656
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 18657
     HEAP32[$644 >> 2] = $82; //@line 18658
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 18659
     HEAP32[$645 >> 2] = $84; //@line 18660
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 18661
     HEAP32[$646 >> 2] = $86; //@line 18662
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 18663
     HEAP32[$647 >> 2] = $88; //@line 18664
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 18665
     HEAP32[$648 >> 2] = $90; //@line 18666
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 18667
     HEAP32[$649 >> 2] = $92; //@line 18668
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 18669
     HEAP32[$650 >> 2] = $94; //@line 18670
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 18671
     HEAP32[$651 >> 2] = $96; //@line 18672
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 18673
     HEAP32[$652 >> 2] = $98; //@line 18674
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 18675
     HEAP32[$653 >> 2] = $100; //@line 18676
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 18677
     HEAP32[$654 >> 2] = $102; //@line 18678
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 18679
     HEAP32[$655 >> 2] = $104; //@line 18680
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 18681
     HEAP32[$656 >> 2] = $106; //@line 18682
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 18683
     HEAP32[$657 >> 2] = $108; //@line 18684
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 18685
     HEAP32[$658 >> 2] = $110; //@line 18686
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 18687
     HEAP32[$659 >> 2] = $112; //@line 18688
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 18689
     HEAP32[$660 >> 2] = $114; //@line 18690
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 18691
     HEAP32[$661 >> 2] = $116; //@line 18692
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 18693
     HEAP32[$662 >> 2] = $118; //@line 18694
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 18695
     HEAP32[$663 >> 2] = $120; //@line 18696
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 18697
     HEAP32[$664 >> 2] = $122; //@line 18698
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 18699
     HEAP32[$665 >> 2] = $124; //@line 18700
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 18701
     HEAP32[$666 >> 2] = $126; //@line 18702
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 18703
     HEAP32[$667 >> 2] = $128; //@line 18704
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 18705
     HEAP32[$668 >> 2] = $130; //@line 18706
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 18707
     HEAP32[$669 >> 2] = $132; //@line 18708
     sp = STACKTOP; //@line 18709
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 18714
     $672 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $84, $88, 11, $$1202$i) | 0; //@line 18715
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 18718
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 18719
      HEAP32[$673 >> 2] = $2; //@line 18720
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 18721
      HEAP32[$674 >> 2] = $4; //@line 18722
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 18723
      HEAP32[$675 >> 2] = $6; //@line 18724
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 18725
      HEAP32[$676 >> 2] = $8; //@line 18726
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 18727
      HEAP32[$677 >> 2] = $10; //@line 18728
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 18729
      HEAP32[$678 >> 2] = $12; //@line 18730
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 18731
      HEAP32[$679 >> 2] = $14; //@line 18732
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 18733
      HEAP32[$680 >> 2] = $16; //@line 18734
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 18735
      HEAP32[$681 >> 2] = $18; //@line 18736
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 18737
      HEAP32[$682 >> 2] = $20; //@line 18738
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 18739
      HEAP32[$683 >> 2] = $22; //@line 18740
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 18741
      HEAP32[$684 >> 2] = $24; //@line 18742
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 18743
      HEAP32[$685 >> 2] = $26; //@line 18744
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 18745
      HEAP32[$686 >> 2] = $28; //@line 18746
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 18747
      HEAP32[$687 >> 2] = $30; //@line 18748
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 18749
      HEAP32[$688 >> 2] = $32; //@line 18750
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 18751
      HEAP32[$689 >> 2] = $34; //@line 18752
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 18753
      HEAP32[$690 >> 2] = $36; //@line 18754
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 18755
      HEAP32[$691 >> 2] = $38; //@line 18756
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 18757
      HEAP32[$692 >> 2] = $157; //@line 18758
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 18759
      HEAP32[$693 >> 2] = $42; //@line 18760
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 18761
      HEAP32[$694 >> 2] = $44; //@line 18762
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 18763
      HEAP32[$695 >> 2] = $46; //@line 18764
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 18765
      HEAP32[$696 >> 2] = $48; //@line 18766
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 18767
      HEAP32[$697 >> 2] = $50; //@line 18768
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 18769
      HEAP32[$698 >> 2] = $52; //@line 18770
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 18771
      HEAP32[$699 >> 2] = $54; //@line 18772
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 18773
      HEAP32[$700 >> 2] = $56; //@line 18774
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 18775
      HEAP32[$701 >> 2] = $58; //@line 18776
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 18777
      HEAP32[$702 >> 2] = $60; //@line 18778
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 18779
      HEAP32[$703 >> 2] = $62; //@line 18780
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 18781
      HEAP32[$704 >> 2] = $64; //@line 18782
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 18783
      HEAP32[$705 >> 2] = $66; //@line 18784
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 18785
      HEAP32[$706 >> 2] = $68; //@line 18786
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 18787
      HEAP32[$707 >> 2] = $70; //@line 18788
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 18789
      HEAP32[$708 >> 2] = $72; //@line 18790
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 18791
      HEAP32[$709 >> 2] = $74; //@line 18792
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 18793
      HEAP32[$710 >> 2] = $76; //@line 18794
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 18795
      HEAP32[$711 >> 2] = $78; //@line 18796
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 18797
      HEAP32[$712 >> 2] = $80; //@line 18798
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 18799
      HEAP32[$713 >> 2] = $82; //@line 18800
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 18801
      HEAP32[$714 >> 2] = $84; //@line 18802
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 18803
      HEAP32[$715 >> 2] = $86; //@line 18804
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 18805
      HEAP32[$716 >> 2] = $88; //@line 18806
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 18807
      HEAP32[$717 >> 2] = $90; //@line 18808
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 18809
      HEAP32[$718 >> 2] = $92; //@line 18810
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 18811
      HEAP32[$719 >> 2] = $94; //@line 18812
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 18813
      HEAP32[$720 >> 2] = $96; //@line 18814
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 18815
      HEAP32[$721 >> 2] = $98; //@line 18816
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 18817
      HEAP32[$722 >> 2] = $100; //@line 18818
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 18819
      HEAP32[$723 >> 2] = $102; //@line 18820
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 18821
      HEAP32[$724 >> 2] = $104; //@line 18822
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 18823
      HEAP32[$725 >> 2] = $106; //@line 18824
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 18825
      HEAP32[$726 >> 2] = $108; //@line 18826
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 18827
      HEAP32[$727 >> 2] = $110; //@line 18828
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 18829
      HEAP32[$728 >> 2] = $112; //@line 18830
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 18831
      HEAP32[$729 >> 2] = $114; //@line 18832
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 18833
      HEAP32[$730 >> 2] = $116; //@line 18834
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 18835
      HEAP32[$731 >> 2] = $118; //@line 18836
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 18837
      HEAP32[$732 >> 2] = $120; //@line 18838
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 18839
      HEAP32[$733 >> 2] = $122; //@line 18840
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 18841
      HEAP32[$734 >> 2] = $124; //@line 18842
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 18843
      HEAP32[$735 >> 2] = $126; //@line 18844
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 18845
      HEAP32[$736 >> 2] = $128; //@line 18846
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 18847
      HEAP32[$737 >> 2] = $130; //@line 18848
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 18849
      HEAP32[$738 >> 2] = $132; //@line 18850
      sp = STACKTOP; //@line 18851
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 18855
     ___async_unwind = 0; //@line 18856
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 18857
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 18858
     HEAP32[$673 >> 2] = $2; //@line 18859
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 18860
     HEAP32[$674 >> 2] = $4; //@line 18861
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 18862
     HEAP32[$675 >> 2] = $6; //@line 18863
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 18864
     HEAP32[$676 >> 2] = $8; //@line 18865
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 18866
     HEAP32[$677 >> 2] = $10; //@line 18867
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 18868
     HEAP32[$678 >> 2] = $12; //@line 18869
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 18870
     HEAP32[$679 >> 2] = $14; //@line 18871
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 18872
     HEAP32[$680 >> 2] = $16; //@line 18873
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 18874
     HEAP32[$681 >> 2] = $18; //@line 18875
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 18876
     HEAP32[$682 >> 2] = $20; //@line 18877
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 18878
     HEAP32[$683 >> 2] = $22; //@line 18879
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 18880
     HEAP32[$684 >> 2] = $24; //@line 18881
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 18882
     HEAP32[$685 >> 2] = $26; //@line 18883
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 18884
     HEAP32[$686 >> 2] = $28; //@line 18885
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 18886
     HEAP32[$687 >> 2] = $30; //@line 18887
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 18888
     HEAP32[$688 >> 2] = $32; //@line 18889
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 18890
     HEAP32[$689 >> 2] = $34; //@line 18891
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 18892
     HEAP32[$690 >> 2] = $36; //@line 18893
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 18894
     HEAP32[$691 >> 2] = $38; //@line 18895
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 18896
     HEAP32[$692 >> 2] = $157; //@line 18897
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 18898
     HEAP32[$693 >> 2] = $42; //@line 18899
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 18900
     HEAP32[$694 >> 2] = $44; //@line 18901
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 18902
     HEAP32[$695 >> 2] = $46; //@line 18903
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 18904
     HEAP32[$696 >> 2] = $48; //@line 18905
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 18906
     HEAP32[$697 >> 2] = $50; //@line 18907
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 18908
     HEAP32[$698 >> 2] = $52; //@line 18909
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 18910
     HEAP32[$699 >> 2] = $54; //@line 18911
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 18912
     HEAP32[$700 >> 2] = $56; //@line 18913
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 18914
     HEAP32[$701 >> 2] = $58; //@line 18915
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 18916
     HEAP32[$702 >> 2] = $60; //@line 18917
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 18918
     HEAP32[$703 >> 2] = $62; //@line 18919
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 18920
     HEAP32[$704 >> 2] = $64; //@line 18921
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 18922
     HEAP32[$705 >> 2] = $66; //@line 18923
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 18924
     HEAP32[$706 >> 2] = $68; //@line 18925
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 18926
     HEAP32[$707 >> 2] = $70; //@line 18927
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 18928
     HEAP32[$708 >> 2] = $72; //@line 18929
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 18930
     HEAP32[$709 >> 2] = $74; //@line 18931
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 18932
     HEAP32[$710 >> 2] = $76; //@line 18933
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 18934
     HEAP32[$711 >> 2] = $78; //@line 18935
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 18936
     HEAP32[$712 >> 2] = $80; //@line 18937
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 18938
     HEAP32[$713 >> 2] = $82; //@line 18939
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 18940
     HEAP32[$714 >> 2] = $84; //@line 18941
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 18942
     HEAP32[$715 >> 2] = $86; //@line 18943
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 18944
     HEAP32[$716 >> 2] = $88; //@line 18945
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 18946
     HEAP32[$717 >> 2] = $90; //@line 18947
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 18948
     HEAP32[$718 >> 2] = $92; //@line 18949
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 18950
     HEAP32[$719 >> 2] = $94; //@line 18951
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 18952
     HEAP32[$720 >> 2] = $96; //@line 18953
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 18954
     HEAP32[$721 >> 2] = $98; //@line 18955
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 18956
     HEAP32[$722 >> 2] = $100; //@line 18957
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 18958
     HEAP32[$723 >> 2] = $102; //@line 18959
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 18960
     HEAP32[$724 >> 2] = $104; //@line 18961
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 18962
     HEAP32[$725 >> 2] = $106; //@line 18963
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 18964
     HEAP32[$726 >> 2] = $108; //@line 18965
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 18966
     HEAP32[$727 >> 2] = $110; //@line 18967
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 18968
     HEAP32[$728 >> 2] = $112; //@line 18969
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 18970
     HEAP32[$729 >> 2] = $114; //@line 18971
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 18972
     HEAP32[$730 >> 2] = $116; //@line 18973
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 18974
     HEAP32[$731 >> 2] = $118; //@line 18975
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 18976
     HEAP32[$732 >> 2] = $120; //@line 18977
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 18978
     HEAP32[$733 >> 2] = $122; //@line 18979
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 18980
     HEAP32[$734 >> 2] = $124; //@line 18981
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 18982
     HEAP32[$735 >> 2] = $126; //@line 18983
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 18984
     HEAP32[$736 >> 2] = $128; //@line 18985
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 18986
     HEAP32[$737 >> 2] = $130; //@line 18987
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 18988
     HEAP32[$738 >> 2] = $132; //@line 18989
     sp = STACKTOP; //@line 18990
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 18995
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$130 >> 2] | 0; //@line 19000
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 19003
     $759 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 19004
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 19007
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 19008
      HEAP32[$760 >> 2] = $2; //@line 19009
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 19010
      HEAP32[$761 >> 2] = $4; //@line 19011
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 19012
      HEAP32[$762 >> 2] = $6; //@line 19013
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 19014
      HEAP32[$763 >> 2] = $8; //@line 19015
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 19016
      HEAP32[$764 >> 2] = $10; //@line 19017
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 19018
      HEAP32[$765 >> 2] = $12; //@line 19019
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 19020
      HEAP32[$766 >> 2] = $14; //@line 19021
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 19022
      HEAP32[$767 >> 2] = $16; //@line 19023
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 19024
      HEAP32[$768 >> 2] = $18; //@line 19025
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 19026
      HEAP32[$769 >> 2] = $20; //@line 19027
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 19028
      HEAP32[$770 >> 2] = $22; //@line 19029
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 19030
      HEAP32[$771 >> 2] = $24; //@line 19031
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 19032
      HEAP32[$772 >> 2] = $26; //@line 19033
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 19034
      HEAP32[$773 >> 2] = $28; //@line 19035
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 19036
      HEAP32[$774 >> 2] = $30; //@line 19037
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 19038
      HEAP32[$775 >> 2] = $32; //@line 19039
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 19040
      HEAP32[$776 >> 2] = $34; //@line 19041
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 19042
      HEAP32[$777 >> 2] = $36; //@line 19043
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 19044
      HEAP32[$778 >> 2] = $38; //@line 19045
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 19046
      HEAP32[$779 >> 2] = $157; //@line 19047
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 19048
      HEAP32[$780 >> 2] = $42; //@line 19049
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 19050
      HEAP32[$781 >> 2] = $44; //@line 19051
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 19052
      HEAP32[$782 >> 2] = $46; //@line 19053
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 19054
      HEAP32[$783 >> 2] = $48; //@line 19055
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 19056
      HEAP32[$784 >> 2] = $50; //@line 19057
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 19058
      HEAP32[$785 >> 2] = $52; //@line 19059
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 19060
      HEAP32[$786 >> 2] = $54; //@line 19061
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 19062
      HEAP32[$787 >> 2] = $56; //@line 19063
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 19064
      HEAP32[$788 >> 2] = $58; //@line 19065
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 19066
      HEAP32[$789 >> 2] = $60; //@line 19067
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 19068
      HEAP32[$790 >> 2] = $62; //@line 19069
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 19070
      HEAP32[$791 >> 2] = $64; //@line 19071
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 19072
      HEAP32[$792 >> 2] = $66; //@line 19073
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 19074
      HEAP32[$793 >> 2] = $68; //@line 19075
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 19076
      HEAP32[$794 >> 2] = $70; //@line 19077
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 19078
      HEAP32[$795 >> 2] = $72; //@line 19079
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 19080
      HEAP32[$796 >> 2] = $74; //@line 19081
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 19082
      HEAP32[$797 >> 2] = $76; //@line 19083
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 19084
      HEAP32[$798 >> 2] = $78; //@line 19085
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 19086
      HEAP32[$799 >> 2] = $80; //@line 19087
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 19088
      HEAP32[$800 >> 2] = $82; //@line 19089
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 19090
      HEAP32[$801 >> 2] = $84; //@line 19091
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 19092
      HEAP32[$802 >> 2] = $86; //@line 19093
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 19094
      HEAP32[$803 >> 2] = $88; //@line 19095
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 19096
      HEAP32[$804 >> 2] = $90; //@line 19097
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 19098
      HEAP32[$805 >> 2] = $92; //@line 19099
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 19100
      HEAP32[$806 >> 2] = $94; //@line 19101
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 19102
      HEAP32[$807 >> 2] = $96; //@line 19103
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 19104
      HEAP32[$808 >> 2] = $98; //@line 19105
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 19106
      HEAP32[$809 >> 2] = $100; //@line 19107
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 19108
      HEAP32[$810 >> 2] = $102; //@line 19109
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 19110
      HEAP32[$811 >> 2] = $104; //@line 19111
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 19112
      HEAP32[$812 >> 2] = $106; //@line 19113
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 19114
      HEAP32[$813 >> 2] = $108; //@line 19115
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 19116
      HEAP32[$814 >> 2] = $110; //@line 19117
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 19118
      HEAP32[$815 >> 2] = $112; //@line 19119
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 19120
      HEAP32[$816 >> 2] = $114; //@line 19121
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 19122
      HEAP32[$817 >> 2] = $116; //@line 19123
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 19124
      HEAP32[$818 >> 2] = $118; //@line 19125
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 19126
      HEAP32[$819 >> 2] = $120; //@line 19127
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 19128
      HEAP32[$820 >> 2] = $122; //@line 19129
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 19130
      HEAP32[$821 >> 2] = $124; //@line 19131
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 19132
      HEAP32[$822 >> 2] = $126; //@line 19133
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 19134
      HEAP32[$823 >> 2] = $128; //@line 19135
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 19136
      HEAP32[$824 >> 2] = $130; //@line 19137
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 19138
      HEAP32[$825 >> 2] = $132; //@line 19139
      sp = STACKTOP; //@line 19140
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 19144
     ___async_unwind = 0; //@line 19145
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 19146
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 19147
     HEAP32[$760 >> 2] = $2; //@line 19148
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 19149
     HEAP32[$761 >> 2] = $4; //@line 19150
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 19151
     HEAP32[$762 >> 2] = $6; //@line 19152
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 19153
     HEAP32[$763 >> 2] = $8; //@line 19154
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 19155
     HEAP32[$764 >> 2] = $10; //@line 19156
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 19157
     HEAP32[$765 >> 2] = $12; //@line 19158
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 19159
     HEAP32[$766 >> 2] = $14; //@line 19160
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 19161
     HEAP32[$767 >> 2] = $16; //@line 19162
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 19163
     HEAP32[$768 >> 2] = $18; //@line 19164
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 19165
     HEAP32[$769 >> 2] = $20; //@line 19166
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 19167
     HEAP32[$770 >> 2] = $22; //@line 19168
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 19169
     HEAP32[$771 >> 2] = $24; //@line 19170
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 19171
     HEAP32[$772 >> 2] = $26; //@line 19172
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 19173
     HEAP32[$773 >> 2] = $28; //@line 19174
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 19175
     HEAP32[$774 >> 2] = $30; //@line 19176
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 19177
     HEAP32[$775 >> 2] = $32; //@line 19178
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 19179
     HEAP32[$776 >> 2] = $34; //@line 19180
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 19181
     HEAP32[$777 >> 2] = $36; //@line 19182
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 19183
     HEAP32[$778 >> 2] = $38; //@line 19184
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 19185
     HEAP32[$779 >> 2] = $157; //@line 19186
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 19187
     HEAP32[$780 >> 2] = $42; //@line 19188
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 19189
     HEAP32[$781 >> 2] = $44; //@line 19190
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 19191
     HEAP32[$782 >> 2] = $46; //@line 19192
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 19193
     HEAP32[$783 >> 2] = $48; //@line 19194
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 19195
     HEAP32[$784 >> 2] = $50; //@line 19196
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 19197
     HEAP32[$785 >> 2] = $52; //@line 19198
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 19199
     HEAP32[$786 >> 2] = $54; //@line 19200
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 19201
     HEAP32[$787 >> 2] = $56; //@line 19202
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 19203
     HEAP32[$788 >> 2] = $58; //@line 19204
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 19205
     HEAP32[$789 >> 2] = $60; //@line 19206
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 19207
     HEAP32[$790 >> 2] = $62; //@line 19208
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 19209
     HEAP32[$791 >> 2] = $64; //@line 19210
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 19211
     HEAP32[$792 >> 2] = $66; //@line 19212
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 19213
     HEAP32[$793 >> 2] = $68; //@line 19214
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 19215
     HEAP32[$794 >> 2] = $70; //@line 19216
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 19217
     HEAP32[$795 >> 2] = $72; //@line 19218
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 19219
     HEAP32[$796 >> 2] = $74; //@line 19220
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 19221
     HEAP32[$797 >> 2] = $76; //@line 19222
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 19223
     HEAP32[$798 >> 2] = $78; //@line 19224
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 19225
     HEAP32[$799 >> 2] = $80; //@line 19226
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 19227
     HEAP32[$800 >> 2] = $82; //@line 19228
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 19229
     HEAP32[$801 >> 2] = $84; //@line 19230
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 19231
     HEAP32[$802 >> 2] = $86; //@line 19232
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 19233
     HEAP32[$803 >> 2] = $88; //@line 19234
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 19235
     HEAP32[$804 >> 2] = $90; //@line 19236
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 19237
     HEAP32[$805 >> 2] = $92; //@line 19238
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 19239
     HEAP32[$806 >> 2] = $94; //@line 19240
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 19241
     HEAP32[$807 >> 2] = $96; //@line 19242
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 19243
     HEAP32[$808 >> 2] = $98; //@line 19244
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 19245
     HEAP32[$809 >> 2] = $100; //@line 19246
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 19247
     HEAP32[$810 >> 2] = $102; //@line 19248
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 19249
     HEAP32[$811 >> 2] = $104; //@line 19250
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 19251
     HEAP32[$812 >> 2] = $106; //@line 19252
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 19253
     HEAP32[$813 >> 2] = $108; //@line 19254
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 19255
     HEAP32[$814 >> 2] = $110; //@line 19256
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 19257
     HEAP32[$815 >> 2] = $112; //@line 19258
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 19259
     HEAP32[$816 >> 2] = $114; //@line 19260
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 19261
     HEAP32[$817 >> 2] = $116; //@line 19262
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 19263
     HEAP32[$818 >> 2] = $118; //@line 19264
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 19265
     HEAP32[$819 >> 2] = $120; //@line 19266
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 19267
     HEAP32[$820 >> 2] = $122; //@line 19268
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 19269
     HEAP32[$821 >> 2] = $124; //@line 19270
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 19271
     HEAP32[$822 >> 2] = $126; //@line 19272
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 19273
     HEAP32[$823 >> 2] = $128; //@line 19274
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 19275
     HEAP32[$824 >> 2] = $130; //@line 19276
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 19277
     HEAP32[$825 >> 2] = $132; //@line 19278
     sp = STACKTOP; //@line 19279
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3737, 5086, $110); //@line 19284
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 19289
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 19294
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 19299
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 19304
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3737, 5389, $128); //@line 19309
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $18 | 0) >= ($10 | 0)) {
      $936 = ___async_retval; //@line 19318
      HEAP32[$936 >> 2] = $32; //@line 19319
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 19325
      HEAP32[$82 >> 2] = $926; //@line 19326
      $927 = $926; //@line 19327
      $929 = $18 - $927 + $10 | 0; //@line 19329
      HEAP16[$100 + 24 >> 1] = $929; //@line 19332
      if ($929 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $927; //@line 19337
       $936 = ___async_retval; //@line 19338
       HEAP32[$936 >> 2] = $32; //@line 19339
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 19343
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 19346
     $936 = ___async_retval; //@line 19347
     HEAP32[$936 >> 2] = $32; //@line 19348
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3737, 4828, $42); //@line 19354
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 19358
 $936 = ___async_retval; //@line 19359
 HEAP32[$936 >> 2] = $32; //@line 19360
 return;
}
function _sn_coap_parser__async_cb_82($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $434 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $511 = 0, $512 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $586 = 0, $589 = 0, $590 = 0, $595 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $741 = 0, $744 = 0, $745 = 0, $750 = 0, $753 = 0, $755 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $595$looptemp = 0, $750$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 9761
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9763
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9765
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9767
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9769
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9771
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9773
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9775
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9777
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9779
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9781
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9783
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9785
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9787
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9789
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9791
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9793
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9795
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9797
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9799
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9803
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9805
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9807
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9809
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9811
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9813
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9815
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 9817
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 9819
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 9821
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 9823
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 9825
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 9827
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 9829
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 9831
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 9833
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 9835
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 9837
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 9839
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 9841
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 9843
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 9845
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 9847
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 9849
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 9851
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 9853
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 9855
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 9857
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 9859
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 9861
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 9863
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 9865
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 9867
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 9869
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 9871
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 9873
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 9875
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 9877
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 9879
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 9881
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 9883
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 9885
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 9887
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 9889
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 9891
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 9893
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 9899
   L3 : while (1) {
    $917 = HEAP32[$4 >> 2] | 0; //@line 9901
    $918 = $917 - $18 | 0; //@line 9902
    $137 = $917; //@line 9905
    if (($918 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 9912
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 9915
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 9918
     break;
    }
    $140 = $trunc277$i & 15; //@line 9922
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 9923
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 9928
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 9936
      $$sink214$i = 13; //@line 9936
      $$sink3$i = 1; //@line 9936
      label = 8; //@line 9937
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 9949
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 9949
      $$sink3$i = 2; //@line 9949
      label = 8; //@line 9950
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 9954
      $159 = $137; //@line 9954
      $937 = $917; //@line 9954
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 9958
     $154 = $137 + $$sink3$i | 0; //@line 9960
     HEAP32[$82 >> 2] = $154; //@line 9961
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 9963
     $159 = $154; //@line 9963
     $937 = $154; //@line 9963
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 9966
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 9970
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 9978
      $$sink216$i = 13; //@line 9978
      $$sink8$i = 1; //@line 9978
      label = 13; //@line 9979
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 9991
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 9991
      $$sink8$i = 2; //@line 9991
      label = 13; //@line 9992
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 9996
      $174 = $937; //@line 9996
      $215 = $159; //@line 9996
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 10000
     $171 = $159 + $$sink8$i | 0; //@line 10002
     HEAP32[$82 >> 2] = $171; //@line 10003
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 10005
     $174 = $171; //@line 10005
     $215 = $171; //@line 10005
    }
    $$1202$i = $$1202$in$i & 65535; //@line 10007
    $175 = $104 - $174 & 65535; //@line 10009
    $trunc$i = $157 & 65535; //@line 10010
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 60; //@line 10014
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 10022
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 10027
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 10032
         break L3;
         break;
        }
       case 3:
        {
         label = 40; //@line 10037
         break L3;
         break;
        }
       case 8:
        {
         label = 46; //@line 10042
         break L3;
         break;
        }
       case 20:
        {
         label = 57; //@line 10047
         break L3;
         break;
        }
       case 11:
        {
         label = 60; //@line 10052
         break L3;
         break;
        }
       case 15:
        {
         label = 69; //@line 10057
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 10068
          break L3;
         }
         $268 = $215 + 1 | 0; //@line 10071
         HEAP32[$82 >> 2] = $268; //@line 10072
         $269 = $$1202$in$i & 255; //@line 10073
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 10076
         } else {
          $$045$i221$i = $269; //@line 10078
          $$06$i220$i = 0; //@line 10078
          $274 = $268; //@line 10078
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 10080
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 10082
           HEAP32[$82 >> 2] = $274; //@line 10083
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 10086
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 10089
            break;
           } else {
            $$06$i220$i = $277; //@line 10092
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 10098
         $$reg2mem$0 = $157; //@line 10099
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 53; //@line 10106
          break L3;
         }
         $586 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 10110
         if ((HEAP32[$586 >> 2] | 0) != -1) {
          label = 53; //@line 10114
          break L3;
         }
         $589 = $215 + 1 | 0; //@line 10117
         HEAP32[$82 >> 2] = $589; //@line 10118
         $590 = $$1202$in$i & 255; //@line 10119
         if (!($590 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 10122
         } else {
          $$045$i263$i = $590; //@line 10124
          $$06$i262$i = 0; //@line 10124
          $595 = $589; //@line 10124
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 10126
           $595$looptemp = $595;
           $595 = $595 + 1 | 0; //@line 10128
           HEAP32[$82 >> 2] = $595; //@line 10129
           $598 = $$06$i262$i << 8 | HEAPU8[$595$looptemp >> 0]; //@line 10132
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $598; //@line 10135
            break;
           } else {
            $$06$i262$i = $598; //@line 10138
           }
          }
         }
         HEAP32[$586 >> 2] = $$0$lcssa$i265$i; //@line 10142
         $$reg2mem$0 = $157; //@line 10143
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 65; //@line 10150
          break L3;
         }
         $741 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 10154
         if ((HEAP32[$741 >> 2] | 0) != -1) {
          label = 65; //@line 10158
          break L3;
         }
         $744 = $215 + 1 | 0; //@line 10161
         HEAP32[$82 >> 2] = $744; //@line 10162
         $745 = $$1202$in$i & 255; //@line 10163
         if (!($745 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 10166
         } else {
          $$045$i270$i = $745; //@line 10168
          $$06$i269$i = 0; //@line 10168
          $750 = $744; //@line 10168
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 10170
           $750$looptemp = $750;
           $750 = $750 + 1 | 0; //@line 10172
           HEAP32[$82 >> 2] = $750; //@line 10173
           $753 = $$06$i269$i << 8 | HEAPU8[$750$looptemp >> 0]; //@line 10176
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $753; //@line 10179
            break;
           } else {
            $$06$i269$i = $753; //@line 10182
           }
          }
         }
         HEAP32[$741 >> 2] = $$0$lcssa$i272$i; //@line 10186
         $$reg2mem$0 = $157; //@line 10187
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 10194
          break L3;
         }
         $829 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 10198
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 10202
          break L3;
         }
         $832 = $215 + 1 | 0; //@line 10205
         HEAP32[$82 >> 2] = $832; //@line 10206
         $833 = $$1202$in$i & 255; //@line 10207
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 10210
         } else {
          $$045$i256$i = $833; //@line 10212
          $$06$i255$i = 0; //@line 10212
          $838 = $832; //@line 10212
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 10214
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 10216
           HEAP32[$82 >> 2] = $838; //@line 10217
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 10220
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 10223
            break;
           } else {
            $$06$i255$i = $841; //@line 10226
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 10230
         $$reg2mem$0 = $157; //@line 10231
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 10238
          break L3;
         }
         $845 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 10242
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 10246
          break L3;
         }
         $848 = $215 + 1 | 0; //@line 10249
         HEAP32[$82 >> 2] = $848; //@line 10250
         $849 = $$1202$in$i & 255; //@line 10251
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 10254
         } else {
          $$045$i249$i = $849; //@line 10256
          $$06$i248$i = 0; //@line 10256
          $854 = $848; //@line 10256
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 10258
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 10260
           HEAP32[$82 >> 2] = $854; //@line 10261
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 10264
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 10267
            break;
           } else {
            $$06$i248$i = $857; //@line 10270
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 10274
         $$reg2mem$0 = $157; //@line 10275
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 10282
          break L3;
         }
         $861 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 10286
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 10290
          break L3;
         }
         $864 = $215 + 1 | 0; //@line 10293
         HEAP32[$82 >> 2] = $864; //@line 10294
         $865 = $$1202$in$i & 255; //@line 10295
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 10298
         } else {
          $$045$i242$i = $865; //@line 10300
          $$06$i241$i = 0; //@line 10300
          $870 = $864; //@line 10300
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 10302
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 10304
           HEAP32[$82 >> 2] = $870; //@line 10305
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 10308
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 10311
            break;
           } else {
            $$06$i241$i = $873; //@line 10314
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 10318
         $$reg2mem$0 = $157; //@line 10319
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 10326
          break L3;
         }
         $877 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 10330
         $878 = HEAP8[$877 >> 0] | 0; //@line 10331
         if ($878 & 1) {
          label = 94; //@line 10335
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 10339
         $883 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 10341
         HEAP32[$82 >> 2] = $883; //@line 10342
         $884 = $$1202$in$i & 255; //@line 10343
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 10346
         } else {
          $$045$i235$i = $884; //@line 10348
          $$06$i234$i = 0; //@line 10348
          $889 = $883; //@line 10348
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 10350
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 10352
           HEAP32[$82 >> 2] = $889; //@line 10353
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 10356
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 10359
            break;
           } else {
            $$06$i234$i = $892; //@line 10362
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 10368
         $$reg2mem$0 = $157; //@line 10369
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 10376
          break L3;
         }
         $898 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 10380
         $899 = HEAP8[$898 >> 0] | 0; //@line 10381
         if ($899 & 2) {
          label = 100; //@line 10385
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 10389
         $904 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 10391
         HEAP32[$82 >> 2] = $904; //@line 10392
         $905 = $$1202$in$i & 255; //@line 10393
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 10396
         } else {
          $$045$i228$i = $905; //@line 10398
          $$06$i227$i = 0; //@line 10398
          $910 = $904; //@line 10398
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 10400
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 10402
           HEAP32[$82 >> 2] = $910; //@line 10403
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 10406
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 10409
            break;
           } else {
            $$06$i227$i = $913; //@line 10412
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 10418
         $$reg2mem$0 = $157; //@line 10419
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 10424
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 10434
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 10441
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 10447
     break;
    }
    $256 = $215 + 1 | 0; //@line 10450
    HEAP32[$82 >> 2] = $256; //@line 10451
    $257 = $$1202$in$i & 255; //@line 10452
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 10455
    } else {
     $$045$i$i = $257; //@line 10457
     $$06$i$i = 0; //@line 10457
     $262 = $256; //@line 10457
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 10459
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 10461
      HEAP32[$82 >> 2] = $262; //@line 10462
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 10465
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 10468
       break;
      } else {
       $$06$i$i = $265; //@line 10471
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 10475
    $$reg2mem$0 = $157; //@line 10476
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 10480
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 10485
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$120 >> 2] | 0; //@line 10490
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 10491
     $179 = FUNCTION_TABLE_ii[$178 & 15](68) | 0; //@line 10492
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 10495
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 10496
      HEAP16[$180 >> 1] = $175; //@line 10497
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 10498
      HEAP32[$181 >> 2] = $2; //@line 10499
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 10500
      HEAP32[$182 >> 2] = $4; //@line 10501
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 10502
      HEAP32[$183 >> 2] = $6; //@line 10503
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 10504
      HEAP32[$184 >> 2] = $124; //@line 10505
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 10506
      HEAP32[$185 >> 2] = $8; //@line 10507
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 10508
      HEAP32[$186 >> 2] = $10; //@line 10509
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 10510
      HEAP32[$187 >> 2] = $12; //@line 10511
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 10512
      HEAP32[$188 >> 2] = $14; //@line 10513
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 10514
      HEAP32[$189 >> 2] = $16; //@line 10515
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 10516
      HEAP32[$190 >> 2] = $18; //@line 10517
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 10518
      HEAP32[$191 >> 2] = $20; //@line 10519
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 10520
      HEAP32[$192 >> 2] = $22; //@line 10521
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 10522
      HEAP32[$193 >> 2] = $24; //@line 10523
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 10524
      HEAP32[$194 >> 2] = $26; //@line 10525
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 10526
      HEAP16[$195 >> 1] = $$1202$i; //@line 10527
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 10528
      HEAP32[$196 >> 2] = $28; //@line 10529
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 10530
      HEAP32[$197 >> 2] = $30; //@line 10531
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 10532
      HEAP32[$198 >> 2] = $32; //@line 10533
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 10534
      HEAP32[$199 >> 2] = $34; //@line 10535
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 10536
      HEAP32[$200 >> 2] = $157; //@line 10537
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 10538
      HEAP32[$201 >> 2] = $38; //@line 10539
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 10540
      HEAP32[$202 >> 2] = $$1202$in$i; //@line 10541
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 10542
      HEAP32[$203 >> 2] = $42; //@line 10543
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 10544
      HEAP32[$204 >> 2] = $36; //@line 10545
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 10546
      HEAP32[$205 >> 2] = $44; //@line 10547
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 10548
      HEAP32[$206 >> 2] = $46; //@line 10549
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 10550
      HEAP32[$207 >> 2] = $48; //@line 10551
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 10552
      HEAP32[$208 >> 2] = $50; //@line 10553
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 10554
      HEAP32[$209 >> 2] = $52; //@line 10555
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 10556
      HEAP32[$210 >> 2] = $54; //@line 10557
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 10558
      HEAP32[$211 >> 2] = $56; //@line 10559
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 10560
      HEAP32[$212 >> 2] = $58; //@line 10561
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 10562
      HEAP32[$213 >> 2] = $60; //@line 10563
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 10564
      HEAP32[$214 >> 2] = $215; //@line 10565
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 10566
      HEAP32[$216 >> 2] = $62; //@line 10567
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 10568
      HEAP32[$217 >> 2] = $64; //@line 10569
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 10570
      HEAP32[$218 >> 2] = $66; //@line 10571
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 10572
      HEAP32[$219 >> 2] = $68; //@line 10573
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 10574
      HEAP32[$220 >> 2] = $70; //@line 10575
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 10576
      HEAP32[$221 >> 2] = $72; //@line 10577
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 10578
      HEAP32[$222 >> 2] = $74; //@line 10579
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 10580
      HEAP32[$223 >> 2] = $76; //@line 10581
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 10582
      HEAP32[$224 >> 2] = $78; //@line 10583
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 10584
      HEAP32[$225 >> 2] = $80; //@line 10585
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 10586
      HEAP32[$226 >> 2] = $82; //@line 10587
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 10588
      HEAP32[$227 >> 2] = $84; //@line 10589
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 10590
      HEAP32[$228 >> 2] = $86; //@line 10591
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 10592
      HEAP32[$229 >> 2] = $88; //@line 10593
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 10594
      HEAP32[$230 >> 2] = $90; //@line 10595
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 10596
      HEAP32[$231 >> 2] = $92; //@line 10597
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 10598
      HEAP32[$232 >> 2] = $94; //@line 10599
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 10600
      HEAP32[$233 >> 2] = $96; //@line 10601
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 10602
      HEAP32[$234 >> 2] = $98; //@line 10603
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 10604
      HEAP32[$235 >> 2] = $100; //@line 10605
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 10606
      HEAP32[$236 >> 2] = $102; //@line 10607
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 10608
      HEAP32[$237 >> 2] = $104; //@line 10609
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 10610
      HEAP32[$238 >> 2] = $106; //@line 10611
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 10612
      HEAP16[$239 >> 1] = $trunc$i; //@line 10613
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 10614
      HEAP32[$240 >> 2] = $108; //@line 10615
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 10616
      HEAP32[$241 >> 2] = $110; //@line 10617
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 10618
      HEAP32[$242 >> 2] = $112; //@line 10619
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 10620
      HEAP32[$243 >> 2] = $114; //@line 10621
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 10622
      HEAP32[$244 >> 2] = $116; //@line 10623
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 10624
      HEAP32[$245 >> 2] = $118; //@line 10625
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 10626
      HEAP32[$246 >> 2] = $120; //@line 10627
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 10628
      HEAP32[$247 >> 2] = $122; //@line 10629
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 10630
      HEAP32[$248 >> 2] = $126; //@line 10631
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 10632
      HEAP32[$249 >> 2] = $128; //@line 10633
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 10634
      HEAP32[$250 >> 2] = $130; //@line 10635
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 10636
      HEAP32[$251 >> 2] = $132; //@line 10637
      sp = STACKTOP; //@line 10638
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 10642
     ___async_unwind = 0; //@line 10643
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 10644
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 10645
     HEAP16[$180 >> 1] = $175; //@line 10646
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 10647
     HEAP32[$181 >> 2] = $2; //@line 10648
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 10649
     HEAP32[$182 >> 2] = $4; //@line 10650
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 10651
     HEAP32[$183 >> 2] = $6; //@line 10652
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 10653
     HEAP32[$184 >> 2] = $124; //@line 10654
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 10655
     HEAP32[$185 >> 2] = $8; //@line 10656
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 10657
     HEAP32[$186 >> 2] = $10; //@line 10658
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 10659
     HEAP32[$187 >> 2] = $12; //@line 10660
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 10661
     HEAP32[$188 >> 2] = $14; //@line 10662
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 10663
     HEAP32[$189 >> 2] = $16; //@line 10664
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 10665
     HEAP32[$190 >> 2] = $18; //@line 10666
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 10667
     HEAP32[$191 >> 2] = $20; //@line 10668
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 10669
     HEAP32[$192 >> 2] = $22; //@line 10670
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 10671
     HEAP32[$193 >> 2] = $24; //@line 10672
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 10673
     HEAP32[$194 >> 2] = $26; //@line 10674
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 10675
     HEAP16[$195 >> 1] = $$1202$i; //@line 10676
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 10677
     HEAP32[$196 >> 2] = $28; //@line 10678
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 10679
     HEAP32[$197 >> 2] = $30; //@line 10680
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 10681
     HEAP32[$198 >> 2] = $32; //@line 10682
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 10683
     HEAP32[$199 >> 2] = $34; //@line 10684
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 10685
     HEAP32[$200 >> 2] = $157; //@line 10686
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 10687
     HEAP32[$201 >> 2] = $38; //@line 10688
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 10689
     HEAP32[$202 >> 2] = $$1202$in$i; //@line 10690
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 10691
     HEAP32[$203 >> 2] = $42; //@line 10692
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 10693
     HEAP32[$204 >> 2] = $36; //@line 10694
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 10695
     HEAP32[$205 >> 2] = $44; //@line 10696
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 10697
     HEAP32[$206 >> 2] = $46; //@line 10698
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 10699
     HEAP32[$207 >> 2] = $48; //@line 10700
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 10701
     HEAP32[$208 >> 2] = $50; //@line 10702
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 10703
     HEAP32[$209 >> 2] = $52; //@line 10704
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 10705
     HEAP32[$210 >> 2] = $54; //@line 10706
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 10707
     HEAP32[$211 >> 2] = $56; //@line 10708
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 10709
     HEAP32[$212 >> 2] = $58; //@line 10710
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 10711
     HEAP32[$213 >> 2] = $60; //@line 10712
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 10713
     HEAP32[$214 >> 2] = $215; //@line 10714
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 10715
     HEAP32[$216 >> 2] = $62; //@line 10716
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 10717
     HEAP32[$217 >> 2] = $64; //@line 10718
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 10719
     HEAP32[$218 >> 2] = $66; //@line 10720
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 10721
     HEAP32[$219 >> 2] = $68; //@line 10722
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 10723
     HEAP32[$220 >> 2] = $70; //@line 10724
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 10725
     HEAP32[$221 >> 2] = $72; //@line 10726
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 10727
     HEAP32[$222 >> 2] = $74; //@line 10728
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 10729
     HEAP32[$223 >> 2] = $76; //@line 10730
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 10731
     HEAP32[$224 >> 2] = $78; //@line 10732
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 10733
     HEAP32[$225 >> 2] = $80; //@line 10734
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 10735
     HEAP32[$226 >> 2] = $82; //@line 10736
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 10737
     HEAP32[$227 >> 2] = $84; //@line 10738
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 10739
     HEAP32[$228 >> 2] = $86; //@line 10740
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 10741
     HEAP32[$229 >> 2] = $88; //@line 10742
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 10743
     HEAP32[$230 >> 2] = $90; //@line 10744
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 10745
     HEAP32[$231 >> 2] = $92; //@line 10746
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 10747
     HEAP32[$232 >> 2] = $94; //@line 10748
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 10749
     HEAP32[$233 >> 2] = $96; //@line 10750
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 10751
     HEAP32[$234 >> 2] = $98; //@line 10752
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 10753
     HEAP32[$235 >> 2] = $100; //@line 10754
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 10755
     HEAP32[$236 >> 2] = $102; //@line 10756
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 10757
     HEAP32[$237 >> 2] = $104; //@line 10758
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 10759
     HEAP32[$238 >> 2] = $106; //@line 10760
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 10761
     HEAP16[$239 >> 1] = $trunc$i; //@line 10762
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 10763
     HEAP32[$240 >> 2] = $108; //@line 10764
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 10765
     HEAP32[$241 >> 2] = $110; //@line 10766
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 10767
     HEAP32[$242 >> 2] = $112; //@line 10768
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 10769
     HEAP32[$243 >> 2] = $114; //@line 10770
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 10771
     HEAP32[$244 >> 2] = $116; //@line 10772
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 10773
     HEAP32[$245 >> 2] = $118; //@line 10774
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 10775
     HEAP32[$246 >> 2] = $120; //@line 10776
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 10777
     HEAP32[$247 >> 2] = $122; //@line 10778
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 10779
     HEAP32[$248 >> 2] = $126; //@line 10780
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 10781
     HEAP32[$249 >> 2] = $128; //@line 10782
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 10783
     HEAP32[$250 >> 2] = $130; //@line 10784
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 10785
     HEAP32[$251 >> 2] = $132; //@line 10786
     sp = STACKTOP; //@line 10787
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $118); //@line 10792
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 10797
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 10802
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$130 >> 2] | 0; //@line 10806
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 10812
       $289 = $215 + 1 | 0; //@line 10813
       HEAP32[$82 >> 2] = $289; //@line 10814
       $290 = HEAP32[$120 >> 2] | 0; //@line 10815
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 10816
       $291 = FUNCTION_TABLE_ii[$290 & 15]($$1202$i) | 0; //@line 10817
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 10820
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 10821
        HEAP32[$292 >> 2] = $2; //@line 10822
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 10823
        HEAP32[$293 >> 2] = $4; //@line 10824
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 10825
        HEAP32[$294 >> 2] = $6; //@line 10826
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 10827
        HEAP32[$295 >> 2] = $8; //@line 10828
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 10829
        HEAP32[$296 >> 2] = $10; //@line 10830
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 10831
        HEAP32[$297 >> 2] = $12; //@line 10832
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 10833
        HEAP32[$298 >> 2] = $14; //@line 10834
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 10835
        HEAP32[$299 >> 2] = $16; //@line 10836
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 10837
        HEAP32[$300 >> 2] = $18; //@line 10838
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 10839
        HEAP32[$301 >> 2] = $20; //@line 10840
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 10841
        HEAP32[$302 >> 2] = $22; //@line 10842
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 10843
        HEAP32[$303 >> 2] = $24; //@line 10844
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 10845
        HEAP32[$304 >> 2] = $26; //@line 10846
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 10847
        HEAP32[$305 >> 2] = $28; //@line 10848
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 10849
        HEAP32[$306 >> 2] = $30; //@line 10850
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 10851
        HEAP32[$307 >> 2] = $32; //@line 10852
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 10853
        HEAP32[$308 >> 2] = $34; //@line 10854
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 10855
        HEAP32[$309 >> 2] = $36; //@line 10856
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 10857
        HEAP32[$310 >> 2] = $38; //@line 10858
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 10859
        HEAP32[$311 >> 2] = $157; //@line 10860
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 10861
        HEAP32[$312 >> 2] = $42; //@line 10862
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 10863
        HEAP32[$313 >> 2] = $44; //@line 10864
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 10865
        HEAP32[$314 >> 2] = $46; //@line 10866
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 10867
        HEAP32[$315 >> 2] = $48; //@line 10868
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 10869
        HEAP32[$316 >> 2] = $50; //@line 10870
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 10871
        HEAP32[$317 >> 2] = $52; //@line 10872
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 10873
        HEAP32[$318 >> 2] = $54; //@line 10874
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 10875
        HEAP32[$319 >> 2] = $56; //@line 10876
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 10877
        HEAP32[$320 >> 2] = $58; //@line 10878
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 10879
        HEAP32[$321 >> 2] = $60; //@line 10880
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 10881
        HEAP32[$322 >> 2] = $62; //@line 10882
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 10883
        HEAP32[$323 >> 2] = $64; //@line 10884
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 10885
        HEAP32[$324 >> 2] = $66; //@line 10886
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 10887
        HEAP32[$325 >> 2] = $68; //@line 10888
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 10889
        HEAP32[$326 >> 2] = $70; //@line 10890
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 10891
        HEAP32[$327 >> 2] = $72; //@line 10892
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 10893
        HEAP32[$328 >> 2] = $74; //@line 10894
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 10895
        HEAP32[$329 >> 2] = $76; //@line 10896
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 10897
        HEAP32[$330 >> 2] = $78; //@line 10898
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 10899
        HEAP32[$331 >> 2] = $80; //@line 10900
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 10901
        HEAP32[$332 >> 2] = $82; //@line 10902
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 10903
        HEAP32[$333 >> 2] = $84; //@line 10904
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 10905
        HEAP32[$334 >> 2] = $86; //@line 10906
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 10907
        HEAP32[$335 >> 2] = $88; //@line 10908
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 10909
        HEAP32[$336 >> 2] = $90; //@line 10910
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 10911
        HEAP32[$337 >> 2] = $92; //@line 10912
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 10913
        HEAP32[$338 >> 2] = $94; //@line 10914
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 10915
        HEAP32[$339 >> 2] = $96; //@line 10916
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 10917
        HEAP32[$340 >> 2] = $98; //@line 10918
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 10919
        HEAP32[$341 >> 2] = $100; //@line 10920
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 10921
        HEAP32[$342 >> 2] = $102; //@line 10922
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 10923
        HEAP32[$343 >> 2] = $104; //@line 10924
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 10925
        HEAP32[$344 >> 2] = $106; //@line 10926
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 10927
        HEAP32[$345 >> 2] = $108; //@line 10928
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 10929
        HEAP32[$346 >> 2] = $289; //@line 10930
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 10931
        HEAP32[$347 >> 2] = $110; //@line 10932
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 10933
        HEAP32[$348 >> 2] = $281; //@line 10934
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 10935
        HEAP32[$349 >> 2] = $112; //@line 10936
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 10937
        HEAP32[$350 >> 2] = $114; //@line 10938
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 10939
        HEAP32[$351 >> 2] = $116; //@line 10940
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 10941
        HEAP32[$352 >> 2] = $118; //@line 10942
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 10943
        HEAP32[$353 >> 2] = $120; //@line 10944
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 10945
        HEAP32[$354 >> 2] = $122; //@line 10946
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 10947
        HEAP32[$355 >> 2] = $124; //@line 10948
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 10949
        HEAP32[$356 >> 2] = $126; //@line 10950
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 10951
        HEAP32[$357 >> 2] = $128; //@line 10952
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 10953
        HEAP32[$358 >> 2] = $130; //@line 10954
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 10955
        HEAP32[$359 >> 2] = $132; //@line 10956
        sp = STACKTOP; //@line 10957
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 10961
       ___async_unwind = 0; //@line 10962
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 10963
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 10964
       HEAP32[$292 >> 2] = $2; //@line 10965
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 10966
       HEAP32[$293 >> 2] = $4; //@line 10967
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 10968
       HEAP32[$294 >> 2] = $6; //@line 10969
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 10970
       HEAP32[$295 >> 2] = $8; //@line 10971
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 10972
       HEAP32[$296 >> 2] = $10; //@line 10973
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 10974
       HEAP32[$297 >> 2] = $12; //@line 10975
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 10976
       HEAP32[$298 >> 2] = $14; //@line 10977
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 10978
       HEAP32[$299 >> 2] = $16; //@line 10979
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 10980
       HEAP32[$300 >> 2] = $18; //@line 10981
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 10982
       HEAP32[$301 >> 2] = $20; //@line 10983
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 10984
       HEAP32[$302 >> 2] = $22; //@line 10985
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 10986
       HEAP32[$303 >> 2] = $24; //@line 10987
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 10988
       HEAP32[$304 >> 2] = $26; //@line 10989
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 10990
       HEAP32[$305 >> 2] = $28; //@line 10991
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 10992
       HEAP32[$306 >> 2] = $30; //@line 10993
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 10994
       HEAP32[$307 >> 2] = $32; //@line 10995
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 10996
       HEAP32[$308 >> 2] = $34; //@line 10997
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 10998
       HEAP32[$309 >> 2] = $36; //@line 10999
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 11000
       HEAP32[$310 >> 2] = $38; //@line 11001
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 11002
       HEAP32[$311 >> 2] = $157; //@line 11003
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 11004
       HEAP32[$312 >> 2] = $42; //@line 11005
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 11006
       HEAP32[$313 >> 2] = $44; //@line 11007
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 11008
       HEAP32[$314 >> 2] = $46; //@line 11009
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 11010
       HEAP32[$315 >> 2] = $48; //@line 11011
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 11012
       HEAP32[$316 >> 2] = $50; //@line 11013
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 11014
       HEAP32[$317 >> 2] = $52; //@line 11015
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 11016
       HEAP32[$318 >> 2] = $54; //@line 11017
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 11018
       HEAP32[$319 >> 2] = $56; //@line 11019
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 11020
       HEAP32[$320 >> 2] = $58; //@line 11021
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 11022
       HEAP32[$321 >> 2] = $60; //@line 11023
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 11024
       HEAP32[$322 >> 2] = $62; //@line 11025
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 11026
       HEAP32[$323 >> 2] = $64; //@line 11027
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 11028
       HEAP32[$324 >> 2] = $66; //@line 11029
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 11030
       HEAP32[$325 >> 2] = $68; //@line 11031
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 11032
       HEAP32[$326 >> 2] = $70; //@line 11033
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 11034
       HEAP32[$327 >> 2] = $72; //@line 11035
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 11036
       HEAP32[$328 >> 2] = $74; //@line 11037
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 11038
       HEAP32[$329 >> 2] = $76; //@line 11039
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 11040
       HEAP32[$330 >> 2] = $78; //@line 11041
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 11042
       HEAP32[$331 >> 2] = $80; //@line 11043
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 11044
       HEAP32[$332 >> 2] = $82; //@line 11045
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 11046
       HEAP32[$333 >> 2] = $84; //@line 11047
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 11048
       HEAP32[$334 >> 2] = $86; //@line 11049
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 11050
       HEAP32[$335 >> 2] = $88; //@line 11051
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 11052
       HEAP32[$336 >> 2] = $90; //@line 11053
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 11054
       HEAP32[$337 >> 2] = $92; //@line 11055
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 11056
       HEAP32[$338 >> 2] = $94; //@line 11057
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 11058
       HEAP32[$339 >> 2] = $96; //@line 11059
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 11060
       HEAP32[$340 >> 2] = $98; //@line 11061
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 11062
       HEAP32[$341 >> 2] = $100; //@line 11063
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 11064
       HEAP32[$342 >> 2] = $102; //@line 11065
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 11066
       HEAP32[$343 >> 2] = $104; //@line 11067
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 11068
       HEAP32[$344 >> 2] = $106; //@line 11069
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 11070
       HEAP32[$345 >> 2] = $108; //@line 11071
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 11072
       HEAP32[$346 >> 2] = $289; //@line 11073
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 11074
       HEAP32[$347 >> 2] = $110; //@line 11075
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 11076
       HEAP32[$348 >> 2] = $281; //@line 11077
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 11078
       HEAP32[$349 >> 2] = $112; //@line 11079
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 11080
       HEAP32[$350 >> 2] = $114; //@line 11081
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 11082
       HEAP32[$351 >> 2] = $116; //@line 11083
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 11084
       HEAP32[$352 >> 2] = $118; //@line 11085
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 11086
       HEAP32[$353 >> 2] = $120; //@line 11087
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 11088
       HEAP32[$354 >> 2] = $122; //@line 11089
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 11090
       HEAP32[$355 >> 2] = $124; //@line 11091
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 11092
       HEAP32[$356 >> 2] = $126; //@line 11093
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 11094
       HEAP32[$357 >> 2] = $128; //@line 11095
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 11096
       HEAP32[$358 >> 2] = $130; //@line 11097
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 11098
       HEAP32[$359 >> 2] = $132; //@line 11099
       sp = STACKTOP; //@line 11100
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 11104
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$130 >> 2] | 0; //@line 11109
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 11111
     $363 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 11112
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 11115
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 11116
      HEAP32[$364 >> 2] = $2; //@line 11117
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 11118
      HEAP32[$365 >> 2] = $4; //@line 11119
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 11120
      HEAP32[$366 >> 2] = $6; //@line 11121
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 11122
      HEAP32[$367 >> 2] = $8; //@line 11123
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 11124
      HEAP32[$368 >> 2] = $10; //@line 11125
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 11126
      HEAP32[$369 >> 2] = $12; //@line 11127
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 11128
      HEAP32[$370 >> 2] = $14; //@line 11129
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 11130
      HEAP32[$371 >> 2] = $16; //@line 11131
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 11132
      HEAP32[$372 >> 2] = $18; //@line 11133
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 11134
      HEAP32[$373 >> 2] = $20; //@line 11135
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 11136
      HEAP32[$374 >> 2] = $22; //@line 11137
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 11138
      HEAP32[$375 >> 2] = $24; //@line 11139
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 11140
      HEAP32[$376 >> 2] = $26; //@line 11141
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 11142
      HEAP32[$377 >> 2] = $28; //@line 11143
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 11144
      HEAP32[$378 >> 2] = $30; //@line 11145
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 11146
      HEAP32[$379 >> 2] = $32; //@line 11147
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 11148
      HEAP32[$380 >> 2] = $34; //@line 11149
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 11150
      HEAP32[$381 >> 2] = $36; //@line 11151
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 11152
      HEAP32[$382 >> 2] = $38; //@line 11153
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 11154
      HEAP32[$383 >> 2] = $157; //@line 11155
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 11156
      HEAP32[$384 >> 2] = $42; //@line 11157
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 11158
      HEAP32[$385 >> 2] = $44; //@line 11159
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 11160
      HEAP32[$386 >> 2] = $46; //@line 11161
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 11162
      HEAP32[$387 >> 2] = $48; //@line 11163
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 11164
      HEAP32[$388 >> 2] = $50; //@line 11165
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 11166
      HEAP32[$389 >> 2] = $52; //@line 11167
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 11168
      HEAP32[$390 >> 2] = $54; //@line 11169
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 11170
      HEAP32[$391 >> 2] = $56; //@line 11171
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 11172
      HEAP32[$392 >> 2] = $58; //@line 11173
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 11174
      HEAP32[$393 >> 2] = $60; //@line 11175
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 11176
      HEAP32[$394 >> 2] = $62; //@line 11177
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 11178
      HEAP32[$395 >> 2] = $64; //@line 11179
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 11180
      HEAP32[$396 >> 2] = $66; //@line 11181
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 11182
      HEAP32[$397 >> 2] = $68; //@line 11183
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 11184
      HEAP32[$398 >> 2] = $70; //@line 11185
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 11186
      HEAP32[$399 >> 2] = $72; //@line 11187
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 11188
      HEAP32[$400 >> 2] = $74; //@line 11189
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 11190
      HEAP32[$401 >> 2] = $76; //@line 11191
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 11192
      HEAP32[$402 >> 2] = $78; //@line 11193
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 11194
      HEAP32[$403 >> 2] = $80; //@line 11195
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 11196
      HEAP32[$404 >> 2] = $82; //@line 11197
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 11198
      HEAP32[$405 >> 2] = $84; //@line 11199
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 11200
      HEAP32[$406 >> 2] = $86; //@line 11201
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 11202
      HEAP32[$407 >> 2] = $88; //@line 11203
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 11204
      HEAP32[$408 >> 2] = $90; //@line 11205
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 11206
      HEAP32[$409 >> 2] = $92; //@line 11207
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 11208
      HEAP32[$410 >> 2] = $94; //@line 11209
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 11210
      HEAP32[$411 >> 2] = $96; //@line 11211
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 11212
      HEAP32[$412 >> 2] = $98; //@line 11213
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 11214
      HEAP32[$413 >> 2] = $100; //@line 11215
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 11216
      HEAP32[$414 >> 2] = $102; //@line 11217
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 11218
      HEAP32[$415 >> 2] = $104; //@line 11219
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 11220
      HEAP32[$416 >> 2] = $106; //@line 11221
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 11222
      HEAP32[$417 >> 2] = $108; //@line 11223
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 11224
      HEAP32[$418 >> 2] = $110; //@line 11225
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 11226
      HEAP32[$419 >> 2] = $112; //@line 11227
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 11228
      HEAP32[$420 >> 2] = $114; //@line 11229
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 11230
      HEAP32[$421 >> 2] = $116; //@line 11231
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 11232
      HEAP32[$422 >> 2] = $118; //@line 11233
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 11234
      HEAP32[$423 >> 2] = $120; //@line 11235
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 11236
      HEAP32[$424 >> 2] = $122; //@line 11237
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 11238
      HEAP32[$425 >> 2] = $124; //@line 11239
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 11240
      HEAP32[$426 >> 2] = $126; //@line 11241
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 11242
      HEAP32[$427 >> 2] = $128; //@line 11243
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 11244
      HEAP32[$428 >> 2] = $130; //@line 11245
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 11246
      HEAP32[$429 >> 2] = $132; //@line 11247
      sp = STACKTOP; //@line 11248
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 11252
     ___async_unwind = 0; //@line 11253
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 11254
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 11255
     HEAP32[$364 >> 2] = $2; //@line 11256
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 11257
     HEAP32[$365 >> 2] = $4; //@line 11258
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 11259
     HEAP32[$366 >> 2] = $6; //@line 11260
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 11261
     HEAP32[$367 >> 2] = $8; //@line 11262
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 11263
     HEAP32[$368 >> 2] = $10; //@line 11264
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 11265
     HEAP32[$369 >> 2] = $12; //@line 11266
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 11267
     HEAP32[$370 >> 2] = $14; //@line 11268
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 11269
     HEAP32[$371 >> 2] = $16; //@line 11270
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 11271
     HEAP32[$372 >> 2] = $18; //@line 11272
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 11273
     HEAP32[$373 >> 2] = $20; //@line 11274
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 11275
     HEAP32[$374 >> 2] = $22; //@line 11276
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 11277
     HEAP32[$375 >> 2] = $24; //@line 11278
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 11279
     HEAP32[$376 >> 2] = $26; //@line 11280
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 11281
     HEAP32[$377 >> 2] = $28; //@line 11282
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 11283
     HEAP32[$378 >> 2] = $30; //@line 11284
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 11285
     HEAP32[$379 >> 2] = $32; //@line 11286
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 11287
     HEAP32[$380 >> 2] = $34; //@line 11288
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 11289
     HEAP32[$381 >> 2] = $36; //@line 11290
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 11291
     HEAP32[$382 >> 2] = $38; //@line 11292
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 11293
     HEAP32[$383 >> 2] = $157; //@line 11294
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 11295
     HEAP32[$384 >> 2] = $42; //@line 11296
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 11297
     HEAP32[$385 >> 2] = $44; //@line 11298
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 11299
     HEAP32[$386 >> 2] = $46; //@line 11300
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 11301
     HEAP32[$387 >> 2] = $48; //@line 11302
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 11303
     HEAP32[$388 >> 2] = $50; //@line 11304
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 11305
     HEAP32[$389 >> 2] = $52; //@line 11306
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 11307
     HEAP32[$390 >> 2] = $54; //@line 11308
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 11309
     HEAP32[$391 >> 2] = $56; //@line 11310
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 11311
     HEAP32[$392 >> 2] = $58; //@line 11312
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 11313
     HEAP32[$393 >> 2] = $60; //@line 11314
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 11315
     HEAP32[$394 >> 2] = $62; //@line 11316
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 11317
     HEAP32[$395 >> 2] = $64; //@line 11318
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 11319
     HEAP32[$396 >> 2] = $66; //@line 11320
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 11321
     HEAP32[$397 >> 2] = $68; //@line 11322
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 11323
     HEAP32[$398 >> 2] = $70; //@line 11324
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 11325
     HEAP32[$399 >> 2] = $72; //@line 11326
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 11327
     HEAP32[$400 >> 2] = $74; //@line 11328
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 11329
     HEAP32[$401 >> 2] = $76; //@line 11330
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 11331
     HEAP32[$402 >> 2] = $78; //@line 11332
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 11333
     HEAP32[$403 >> 2] = $80; //@line 11334
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 11335
     HEAP32[$404 >> 2] = $82; //@line 11336
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 11337
     HEAP32[$405 >> 2] = $84; //@line 11338
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 11339
     HEAP32[$406 >> 2] = $86; //@line 11340
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 11341
     HEAP32[$407 >> 2] = $88; //@line 11342
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 11343
     HEAP32[$408 >> 2] = $90; //@line 11344
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 11345
     HEAP32[$409 >> 2] = $92; //@line 11346
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 11347
     HEAP32[$410 >> 2] = $94; //@line 11348
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 11349
     HEAP32[$411 >> 2] = $96; //@line 11350
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 11351
     HEAP32[$412 >> 2] = $98; //@line 11352
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 11353
     HEAP32[$413 >> 2] = $100; //@line 11354
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 11355
     HEAP32[$414 >> 2] = $102; //@line 11356
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 11357
     HEAP32[$415 >> 2] = $104; //@line 11358
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 11359
     HEAP32[$416 >> 2] = $106; //@line 11360
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 11361
     HEAP32[$417 >> 2] = $108; //@line 11362
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 11363
     HEAP32[$418 >> 2] = $110; //@line 11364
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 11365
     HEAP32[$419 >> 2] = $112; //@line 11366
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 11367
     HEAP32[$420 >> 2] = $114; //@line 11368
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 11369
     HEAP32[$421 >> 2] = $116; //@line 11370
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 11371
     HEAP32[$422 >> 2] = $118; //@line 11372
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 11373
     HEAP32[$423 >> 2] = $120; //@line 11374
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 11375
     HEAP32[$424 >> 2] = $122; //@line 11376
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 11377
     HEAP32[$425 >> 2] = $124; //@line 11378
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 11379
     HEAP32[$426 >> 2] = $126; //@line 11380
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 11381
     HEAP32[$427 >> 2] = $128; //@line 11382
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 11383
     HEAP32[$428 >> 2] = $130; //@line 11384
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 11385
     HEAP32[$429 >> 2] = $132; //@line 11386
     sp = STACKTOP; //@line 11387
     return;
    }
   case 40:
    {
     $431 = $$1202$in$i & 65535; //@line 11392
     if (($$1202$i + -1 & 65535) <= 254) {
      $434 = HEAP32[$130 >> 2] | 0; //@line 11396
      if (!(HEAP32[$434 + 52 >> 2] | 0)) {
       HEAP16[$434 + 4 >> 1] = $$1202$i; //@line 11402
       $439 = $215 + 1 | 0; //@line 11403
       HEAP32[$82 >> 2] = $439; //@line 11404
       $440 = HEAP32[$120 >> 2] | 0; //@line 11405
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 11406
       $441 = FUNCTION_TABLE_ii[$440 & 15]($$1202$i) | 0; //@line 11407
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 11410
        $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 11411
        HEAP32[$442 >> 2] = $2; //@line 11412
        $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 11413
        HEAP32[$443 >> 2] = $4; //@line 11414
        $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 11415
        HEAP32[$444 >> 2] = $6; //@line 11416
        $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 11417
        HEAP32[$445 >> 2] = $8; //@line 11418
        $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 11419
        HEAP32[$446 >> 2] = $10; //@line 11420
        $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 11421
        HEAP32[$447 >> 2] = $12; //@line 11422
        $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 11423
        HEAP32[$448 >> 2] = $14; //@line 11424
        $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 11425
        HEAP32[$449 >> 2] = $16; //@line 11426
        $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 11427
        HEAP32[$450 >> 2] = $18; //@line 11428
        $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 11429
        HEAP32[$451 >> 2] = $20; //@line 11430
        $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 11431
        HEAP32[$452 >> 2] = $22; //@line 11432
        $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 11433
        HEAP32[$453 >> 2] = $24; //@line 11434
        $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 11435
        HEAP32[$454 >> 2] = $26; //@line 11436
        $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 11437
        HEAP32[$455 >> 2] = $28; //@line 11438
        $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 11439
        HEAP32[$456 >> 2] = $30; //@line 11440
        $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 11441
        HEAP32[$457 >> 2] = $32; //@line 11442
        $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 11443
        HEAP32[$458 >> 2] = $34; //@line 11444
        $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 11445
        HEAP32[$459 >> 2] = $36; //@line 11446
        $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 11447
        HEAP32[$460 >> 2] = $38; //@line 11448
        $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 11449
        HEAP32[$461 >> 2] = $157; //@line 11450
        $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 11451
        HEAP32[$462 >> 2] = $42; //@line 11452
        $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 11453
        HEAP32[$463 >> 2] = $44; //@line 11454
        $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 11455
        HEAP32[$464 >> 2] = $46; //@line 11456
        $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 11457
        HEAP32[$465 >> 2] = $48; //@line 11458
        $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 11459
        HEAP32[$466 >> 2] = $50; //@line 11460
        $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 11461
        HEAP32[$467 >> 2] = $52; //@line 11462
        $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 11463
        HEAP32[$468 >> 2] = $54; //@line 11464
        $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 11465
        HEAP32[$469 >> 2] = $56; //@line 11466
        $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 11467
        HEAP32[$470 >> 2] = $58; //@line 11468
        $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 11469
        HEAP32[$471 >> 2] = $60; //@line 11470
        $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 11471
        HEAP32[$472 >> 2] = $62; //@line 11472
        $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 11473
        HEAP32[$473 >> 2] = $64; //@line 11474
        $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 11475
        HEAP32[$474 >> 2] = $66; //@line 11476
        $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 11477
        HEAP32[$475 >> 2] = $68; //@line 11478
        $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 11479
        HEAP32[$476 >> 2] = $70; //@line 11480
        $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 11481
        HEAP32[$477 >> 2] = $72; //@line 11482
        $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 11483
        HEAP32[$478 >> 2] = $74; //@line 11484
        $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 11485
        HEAP32[$479 >> 2] = $76; //@line 11486
        $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 11487
        HEAP32[$480 >> 2] = $78; //@line 11488
        $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 11489
        HEAP32[$481 >> 2] = $80; //@line 11490
        $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 11491
        HEAP32[$482 >> 2] = $82; //@line 11492
        $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 11493
        HEAP32[$483 >> 2] = $84; //@line 11494
        $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 11495
        HEAP32[$484 >> 2] = $86; //@line 11496
        $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 11497
        HEAP32[$485 >> 2] = $88; //@line 11498
        $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 11499
        HEAP32[$486 >> 2] = $90; //@line 11500
        $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 11501
        HEAP32[$487 >> 2] = $92; //@line 11502
        $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 11503
        HEAP32[$488 >> 2] = $94; //@line 11504
        $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 11505
        HEAP32[$489 >> 2] = $96; //@line 11506
        $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 11507
        HEAP32[$490 >> 2] = $98; //@line 11508
        $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 11509
        HEAP32[$491 >> 2] = $100; //@line 11510
        $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 11511
        HEAP32[$492 >> 2] = $102; //@line 11512
        $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 11513
        HEAP32[$493 >> 2] = $104; //@line 11514
        $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 11515
        HEAP32[$494 >> 2] = $106; //@line 11516
        $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 11517
        HEAP32[$495 >> 2] = $108; //@line 11518
        $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 11519
        HEAP32[$496 >> 2] = $110; //@line 11520
        $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 11521
        HEAP32[$497 >> 2] = $112; //@line 11522
        $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 11523
        HEAP32[$498 >> 2] = $114; //@line 11524
        $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 11525
        HEAP32[$499 >> 2] = $116; //@line 11526
        $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 11527
        HEAP32[$500 >> 2] = $439; //@line 11528
        $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 11529
        HEAP32[$501 >> 2] = $118; //@line 11530
        $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 11531
        HEAP32[$502 >> 2] = $431; //@line 11532
        $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 11533
        HEAP32[$503 >> 2] = $120; //@line 11534
        $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 11535
        HEAP32[$504 >> 2] = $122; //@line 11536
        $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 11537
        HEAP32[$505 >> 2] = $124; //@line 11538
        $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 11539
        HEAP32[$506 >> 2] = $126; //@line 11540
        $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 11541
        HEAP32[$507 >> 2] = $128; //@line 11542
        $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 11543
        HEAP32[$508 >> 2] = $130; //@line 11544
        $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 11545
        HEAP32[$509 >> 2] = $132; //@line 11546
        sp = STACKTOP; //@line 11547
        return;
       }
       HEAP32[___async_retval >> 2] = $441; //@line 11551
       ___async_unwind = 0; //@line 11552
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 11553
       $442 = $ReallocAsyncCtx5 + 4 | 0; //@line 11554
       HEAP32[$442 >> 2] = $2; //@line 11555
       $443 = $ReallocAsyncCtx5 + 8 | 0; //@line 11556
       HEAP32[$443 >> 2] = $4; //@line 11557
       $444 = $ReallocAsyncCtx5 + 12 | 0; //@line 11558
       HEAP32[$444 >> 2] = $6; //@line 11559
       $445 = $ReallocAsyncCtx5 + 16 | 0; //@line 11560
       HEAP32[$445 >> 2] = $8; //@line 11561
       $446 = $ReallocAsyncCtx5 + 20 | 0; //@line 11562
       HEAP32[$446 >> 2] = $10; //@line 11563
       $447 = $ReallocAsyncCtx5 + 24 | 0; //@line 11564
       HEAP32[$447 >> 2] = $12; //@line 11565
       $448 = $ReallocAsyncCtx5 + 28 | 0; //@line 11566
       HEAP32[$448 >> 2] = $14; //@line 11567
       $449 = $ReallocAsyncCtx5 + 32 | 0; //@line 11568
       HEAP32[$449 >> 2] = $16; //@line 11569
       $450 = $ReallocAsyncCtx5 + 36 | 0; //@line 11570
       HEAP32[$450 >> 2] = $18; //@line 11571
       $451 = $ReallocAsyncCtx5 + 40 | 0; //@line 11572
       HEAP32[$451 >> 2] = $20; //@line 11573
       $452 = $ReallocAsyncCtx5 + 44 | 0; //@line 11574
       HEAP32[$452 >> 2] = $22; //@line 11575
       $453 = $ReallocAsyncCtx5 + 48 | 0; //@line 11576
       HEAP32[$453 >> 2] = $24; //@line 11577
       $454 = $ReallocAsyncCtx5 + 52 | 0; //@line 11578
       HEAP32[$454 >> 2] = $26; //@line 11579
       $455 = $ReallocAsyncCtx5 + 56 | 0; //@line 11580
       HEAP32[$455 >> 2] = $28; //@line 11581
       $456 = $ReallocAsyncCtx5 + 60 | 0; //@line 11582
       HEAP32[$456 >> 2] = $30; //@line 11583
       $457 = $ReallocAsyncCtx5 + 64 | 0; //@line 11584
       HEAP32[$457 >> 2] = $32; //@line 11585
       $458 = $ReallocAsyncCtx5 + 68 | 0; //@line 11586
       HEAP32[$458 >> 2] = $34; //@line 11587
       $459 = $ReallocAsyncCtx5 + 72 | 0; //@line 11588
       HEAP32[$459 >> 2] = $36; //@line 11589
       $460 = $ReallocAsyncCtx5 + 76 | 0; //@line 11590
       HEAP32[$460 >> 2] = $38; //@line 11591
       $461 = $ReallocAsyncCtx5 + 80 | 0; //@line 11592
       HEAP32[$461 >> 2] = $157; //@line 11593
       $462 = $ReallocAsyncCtx5 + 84 | 0; //@line 11594
       HEAP32[$462 >> 2] = $42; //@line 11595
       $463 = $ReallocAsyncCtx5 + 88 | 0; //@line 11596
       HEAP32[$463 >> 2] = $44; //@line 11597
       $464 = $ReallocAsyncCtx5 + 92 | 0; //@line 11598
       HEAP32[$464 >> 2] = $46; //@line 11599
       $465 = $ReallocAsyncCtx5 + 96 | 0; //@line 11600
       HEAP32[$465 >> 2] = $48; //@line 11601
       $466 = $ReallocAsyncCtx5 + 100 | 0; //@line 11602
       HEAP32[$466 >> 2] = $50; //@line 11603
       $467 = $ReallocAsyncCtx5 + 104 | 0; //@line 11604
       HEAP32[$467 >> 2] = $52; //@line 11605
       $468 = $ReallocAsyncCtx5 + 108 | 0; //@line 11606
       HEAP32[$468 >> 2] = $54; //@line 11607
       $469 = $ReallocAsyncCtx5 + 112 | 0; //@line 11608
       HEAP32[$469 >> 2] = $56; //@line 11609
       $470 = $ReallocAsyncCtx5 + 116 | 0; //@line 11610
       HEAP32[$470 >> 2] = $58; //@line 11611
       $471 = $ReallocAsyncCtx5 + 120 | 0; //@line 11612
       HEAP32[$471 >> 2] = $60; //@line 11613
       $472 = $ReallocAsyncCtx5 + 124 | 0; //@line 11614
       HEAP32[$472 >> 2] = $62; //@line 11615
       $473 = $ReallocAsyncCtx5 + 128 | 0; //@line 11616
       HEAP32[$473 >> 2] = $64; //@line 11617
       $474 = $ReallocAsyncCtx5 + 132 | 0; //@line 11618
       HEAP32[$474 >> 2] = $66; //@line 11619
       $475 = $ReallocAsyncCtx5 + 136 | 0; //@line 11620
       HEAP32[$475 >> 2] = $68; //@line 11621
       $476 = $ReallocAsyncCtx5 + 140 | 0; //@line 11622
       HEAP32[$476 >> 2] = $70; //@line 11623
       $477 = $ReallocAsyncCtx5 + 144 | 0; //@line 11624
       HEAP32[$477 >> 2] = $72; //@line 11625
       $478 = $ReallocAsyncCtx5 + 148 | 0; //@line 11626
       HEAP32[$478 >> 2] = $74; //@line 11627
       $479 = $ReallocAsyncCtx5 + 152 | 0; //@line 11628
       HEAP32[$479 >> 2] = $76; //@line 11629
       $480 = $ReallocAsyncCtx5 + 156 | 0; //@line 11630
       HEAP32[$480 >> 2] = $78; //@line 11631
       $481 = $ReallocAsyncCtx5 + 160 | 0; //@line 11632
       HEAP32[$481 >> 2] = $80; //@line 11633
       $482 = $ReallocAsyncCtx5 + 164 | 0; //@line 11634
       HEAP32[$482 >> 2] = $82; //@line 11635
       $483 = $ReallocAsyncCtx5 + 168 | 0; //@line 11636
       HEAP32[$483 >> 2] = $84; //@line 11637
       $484 = $ReallocAsyncCtx5 + 172 | 0; //@line 11638
       HEAP32[$484 >> 2] = $86; //@line 11639
       $485 = $ReallocAsyncCtx5 + 176 | 0; //@line 11640
       HEAP32[$485 >> 2] = $88; //@line 11641
       $486 = $ReallocAsyncCtx5 + 180 | 0; //@line 11642
       HEAP32[$486 >> 2] = $90; //@line 11643
       $487 = $ReallocAsyncCtx5 + 184 | 0; //@line 11644
       HEAP32[$487 >> 2] = $92; //@line 11645
       $488 = $ReallocAsyncCtx5 + 188 | 0; //@line 11646
       HEAP32[$488 >> 2] = $94; //@line 11647
       $489 = $ReallocAsyncCtx5 + 192 | 0; //@line 11648
       HEAP32[$489 >> 2] = $96; //@line 11649
       $490 = $ReallocAsyncCtx5 + 196 | 0; //@line 11650
       HEAP32[$490 >> 2] = $98; //@line 11651
       $491 = $ReallocAsyncCtx5 + 200 | 0; //@line 11652
       HEAP32[$491 >> 2] = $100; //@line 11653
       $492 = $ReallocAsyncCtx5 + 204 | 0; //@line 11654
       HEAP32[$492 >> 2] = $102; //@line 11655
       $493 = $ReallocAsyncCtx5 + 208 | 0; //@line 11656
       HEAP32[$493 >> 2] = $104; //@line 11657
       $494 = $ReallocAsyncCtx5 + 212 | 0; //@line 11658
       HEAP32[$494 >> 2] = $106; //@line 11659
       $495 = $ReallocAsyncCtx5 + 216 | 0; //@line 11660
       HEAP32[$495 >> 2] = $108; //@line 11661
       $496 = $ReallocAsyncCtx5 + 220 | 0; //@line 11662
       HEAP32[$496 >> 2] = $110; //@line 11663
       $497 = $ReallocAsyncCtx5 + 224 | 0; //@line 11664
       HEAP32[$497 >> 2] = $112; //@line 11665
       $498 = $ReallocAsyncCtx5 + 228 | 0; //@line 11666
       HEAP32[$498 >> 2] = $114; //@line 11667
       $499 = $ReallocAsyncCtx5 + 232 | 0; //@line 11668
       HEAP32[$499 >> 2] = $116; //@line 11669
       $500 = $ReallocAsyncCtx5 + 236 | 0; //@line 11670
       HEAP32[$500 >> 2] = $439; //@line 11671
       $501 = $ReallocAsyncCtx5 + 240 | 0; //@line 11672
       HEAP32[$501 >> 2] = $118; //@line 11673
       $502 = $ReallocAsyncCtx5 + 244 | 0; //@line 11674
       HEAP32[$502 >> 2] = $431; //@line 11675
       $503 = $ReallocAsyncCtx5 + 248 | 0; //@line 11676
       HEAP32[$503 >> 2] = $120; //@line 11677
       $504 = $ReallocAsyncCtx5 + 252 | 0; //@line 11678
       HEAP32[$504 >> 2] = $122; //@line 11679
       $505 = $ReallocAsyncCtx5 + 256 | 0; //@line 11680
       HEAP32[$505 >> 2] = $124; //@line 11681
       $506 = $ReallocAsyncCtx5 + 260 | 0; //@line 11682
       HEAP32[$506 >> 2] = $126; //@line 11683
       $507 = $ReallocAsyncCtx5 + 264 | 0; //@line 11684
       HEAP32[$507 >> 2] = $128; //@line 11685
       $508 = $ReallocAsyncCtx5 + 268 | 0; //@line 11686
       HEAP32[$508 >> 2] = $130; //@line 11687
       $509 = $ReallocAsyncCtx5 + 272 | 0; //@line 11688
       HEAP32[$509 >> 2] = $132; //@line 11689
       sp = STACKTOP; //@line 11690
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 11694
     break L2;
     break;
    }
   case 46:
    {
     $511 = HEAP32[$130 >> 2] | 0; //@line 11699
     $512 = $511 + 56 | 0; //@line 11700
     if (HEAP32[$512 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 11704
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 11708
     $516 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $512, $511 + 6 | 0, 8, $$1202$i) | 0; //@line 11709
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 11712
      $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 11713
      HEAP32[$517 >> 2] = $2; //@line 11714
      $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 11715
      HEAP32[$518 >> 2] = $4; //@line 11716
      $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 11717
      HEAP32[$519 >> 2] = $6; //@line 11718
      $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 11719
      HEAP32[$520 >> 2] = $8; //@line 11720
      $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 11721
      HEAP32[$521 >> 2] = $10; //@line 11722
      $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 11723
      HEAP32[$522 >> 2] = $12; //@line 11724
      $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 11725
      HEAP32[$523 >> 2] = $14; //@line 11726
      $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 11727
      HEAP32[$524 >> 2] = $16; //@line 11728
      $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 11729
      HEAP32[$525 >> 2] = $18; //@line 11730
      $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 11731
      HEAP32[$526 >> 2] = $20; //@line 11732
      $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 11733
      HEAP32[$527 >> 2] = $22; //@line 11734
      $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 11735
      HEAP32[$528 >> 2] = $24; //@line 11736
      $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 11737
      HEAP32[$529 >> 2] = $26; //@line 11738
      $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 11739
      HEAP32[$530 >> 2] = $28; //@line 11740
      $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 11741
      HEAP32[$531 >> 2] = $30; //@line 11742
      $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 11743
      HEAP32[$532 >> 2] = $32; //@line 11744
      $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 11745
      HEAP32[$533 >> 2] = $34; //@line 11746
      $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 11747
      HEAP32[$534 >> 2] = $36; //@line 11748
      $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 11749
      HEAP32[$535 >> 2] = $38; //@line 11750
      $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 11751
      HEAP32[$536 >> 2] = $157; //@line 11752
      $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 11753
      HEAP32[$537 >> 2] = $42; //@line 11754
      $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 11755
      HEAP32[$538 >> 2] = $44; //@line 11756
      $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 11757
      HEAP32[$539 >> 2] = $46; //@line 11758
      $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 11759
      HEAP32[$540 >> 2] = $48; //@line 11760
      $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 11761
      HEAP32[$541 >> 2] = $50; //@line 11762
      $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 11763
      HEAP32[$542 >> 2] = $52; //@line 11764
      $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 11765
      HEAP32[$543 >> 2] = $54; //@line 11766
      $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 11767
      HEAP32[$544 >> 2] = $56; //@line 11768
      $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 11769
      HEAP32[$545 >> 2] = $58; //@line 11770
      $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 11771
      HEAP32[$546 >> 2] = $60; //@line 11772
      $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 11773
      HEAP32[$547 >> 2] = $62; //@line 11774
      $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 11775
      HEAP32[$548 >> 2] = $64; //@line 11776
      $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 11777
      HEAP32[$549 >> 2] = $66; //@line 11778
      $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 11779
      HEAP32[$550 >> 2] = $68; //@line 11780
      $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 11781
      HEAP32[$551 >> 2] = $70; //@line 11782
      $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 11783
      HEAP32[$552 >> 2] = $72; //@line 11784
      $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 11785
      HEAP32[$553 >> 2] = $74; //@line 11786
      $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 11787
      HEAP32[$554 >> 2] = $76; //@line 11788
      $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 11789
      HEAP32[$555 >> 2] = $78; //@line 11790
      $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 11791
      HEAP32[$556 >> 2] = $80; //@line 11792
      $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 11793
      HEAP32[$557 >> 2] = $82; //@line 11794
      $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 11795
      HEAP32[$558 >> 2] = $84; //@line 11796
      $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 11797
      HEAP32[$559 >> 2] = $86; //@line 11798
      $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 11799
      HEAP32[$560 >> 2] = $88; //@line 11800
      $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 11801
      HEAP32[$561 >> 2] = $90; //@line 11802
      $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 11803
      HEAP32[$562 >> 2] = $92; //@line 11804
      $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 11805
      HEAP32[$563 >> 2] = $94; //@line 11806
      $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 11807
      HEAP32[$564 >> 2] = $96; //@line 11808
      $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 11809
      HEAP32[$565 >> 2] = $98; //@line 11810
      $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 11811
      HEAP32[$566 >> 2] = $100; //@line 11812
      $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 11813
      HEAP32[$567 >> 2] = $102; //@line 11814
      $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 11815
      HEAP32[$568 >> 2] = $104; //@line 11816
      $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 11817
      HEAP32[$569 >> 2] = $106; //@line 11818
      $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 11819
      HEAP32[$570 >> 2] = $108; //@line 11820
      $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 11821
      HEAP32[$571 >> 2] = $110; //@line 11822
      $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 11823
      HEAP32[$572 >> 2] = $112; //@line 11824
      $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 11825
      HEAP32[$573 >> 2] = $114; //@line 11826
      $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 11827
      HEAP32[$574 >> 2] = $116; //@line 11828
      $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 11829
      HEAP32[$575 >> 2] = $118; //@line 11830
      $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 11831
      HEAP32[$576 >> 2] = $120; //@line 11832
      $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 11833
      HEAP32[$577 >> 2] = $122; //@line 11834
      $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 11835
      HEAP32[$578 >> 2] = $124; //@line 11836
      $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 11837
      HEAP32[$579 >> 2] = $126; //@line 11838
      $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 11839
      HEAP32[$580 >> 2] = $128; //@line 11840
      $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 11841
      HEAP32[$581 >> 2] = $130; //@line 11842
      $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 11843
      HEAP32[$582 >> 2] = $132; //@line 11844
      sp = STACKTOP; //@line 11845
      return;
     }
     HEAP8[___async_retval >> 0] = $516; //@line 11849
     ___async_unwind = 0; //@line 11850
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 11851
     $517 = $ReallocAsyncCtx9 + 4 | 0; //@line 11852
     HEAP32[$517 >> 2] = $2; //@line 11853
     $518 = $ReallocAsyncCtx9 + 8 | 0; //@line 11854
     HEAP32[$518 >> 2] = $4; //@line 11855
     $519 = $ReallocAsyncCtx9 + 12 | 0; //@line 11856
     HEAP32[$519 >> 2] = $6; //@line 11857
     $520 = $ReallocAsyncCtx9 + 16 | 0; //@line 11858
     HEAP32[$520 >> 2] = $8; //@line 11859
     $521 = $ReallocAsyncCtx9 + 20 | 0; //@line 11860
     HEAP32[$521 >> 2] = $10; //@line 11861
     $522 = $ReallocAsyncCtx9 + 24 | 0; //@line 11862
     HEAP32[$522 >> 2] = $12; //@line 11863
     $523 = $ReallocAsyncCtx9 + 28 | 0; //@line 11864
     HEAP32[$523 >> 2] = $14; //@line 11865
     $524 = $ReallocAsyncCtx9 + 32 | 0; //@line 11866
     HEAP32[$524 >> 2] = $16; //@line 11867
     $525 = $ReallocAsyncCtx9 + 36 | 0; //@line 11868
     HEAP32[$525 >> 2] = $18; //@line 11869
     $526 = $ReallocAsyncCtx9 + 40 | 0; //@line 11870
     HEAP32[$526 >> 2] = $20; //@line 11871
     $527 = $ReallocAsyncCtx9 + 44 | 0; //@line 11872
     HEAP32[$527 >> 2] = $22; //@line 11873
     $528 = $ReallocAsyncCtx9 + 48 | 0; //@line 11874
     HEAP32[$528 >> 2] = $24; //@line 11875
     $529 = $ReallocAsyncCtx9 + 52 | 0; //@line 11876
     HEAP32[$529 >> 2] = $26; //@line 11877
     $530 = $ReallocAsyncCtx9 + 56 | 0; //@line 11878
     HEAP32[$530 >> 2] = $28; //@line 11879
     $531 = $ReallocAsyncCtx9 + 60 | 0; //@line 11880
     HEAP32[$531 >> 2] = $30; //@line 11881
     $532 = $ReallocAsyncCtx9 + 64 | 0; //@line 11882
     HEAP32[$532 >> 2] = $32; //@line 11883
     $533 = $ReallocAsyncCtx9 + 68 | 0; //@line 11884
     HEAP32[$533 >> 2] = $34; //@line 11885
     $534 = $ReallocAsyncCtx9 + 72 | 0; //@line 11886
     HEAP32[$534 >> 2] = $36; //@line 11887
     $535 = $ReallocAsyncCtx9 + 76 | 0; //@line 11888
     HEAP32[$535 >> 2] = $38; //@line 11889
     $536 = $ReallocAsyncCtx9 + 80 | 0; //@line 11890
     HEAP32[$536 >> 2] = $157; //@line 11891
     $537 = $ReallocAsyncCtx9 + 84 | 0; //@line 11892
     HEAP32[$537 >> 2] = $42; //@line 11893
     $538 = $ReallocAsyncCtx9 + 88 | 0; //@line 11894
     HEAP32[$538 >> 2] = $44; //@line 11895
     $539 = $ReallocAsyncCtx9 + 92 | 0; //@line 11896
     HEAP32[$539 >> 2] = $46; //@line 11897
     $540 = $ReallocAsyncCtx9 + 96 | 0; //@line 11898
     HEAP32[$540 >> 2] = $48; //@line 11899
     $541 = $ReallocAsyncCtx9 + 100 | 0; //@line 11900
     HEAP32[$541 >> 2] = $50; //@line 11901
     $542 = $ReallocAsyncCtx9 + 104 | 0; //@line 11902
     HEAP32[$542 >> 2] = $52; //@line 11903
     $543 = $ReallocAsyncCtx9 + 108 | 0; //@line 11904
     HEAP32[$543 >> 2] = $54; //@line 11905
     $544 = $ReallocAsyncCtx9 + 112 | 0; //@line 11906
     HEAP32[$544 >> 2] = $56; //@line 11907
     $545 = $ReallocAsyncCtx9 + 116 | 0; //@line 11908
     HEAP32[$545 >> 2] = $58; //@line 11909
     $546 = $ReallocAsyncCtx9 + 120 | 0; //@line 11910
     HEAP32[$546 >> 2] = $60; //@line 11911
     $547 = $ReallocAsyncCtx9 + 124 | 0; //@line 11912
     HEAP32[$547 >> 2] = $62; //@line 11913
     $548 = $ReallocAsyncCtx9 + 128 | 0; //@line 11914
     HEAP32[$548 >> 2] = $64; //@line 11915
     $549 = $ReallocAsyncCtx9 + 132 | 0; //@line 11916
     HEAP32[$549 >> 2] = $66; //@line 11917
     $550 = $ReallocAsyncCtx9 + 136 | 0; //@line 11918
     HEAP32[$550 >> 2] = $68; //@line 11919
     $551 = $ReallocAsyncCtx9 + 140 | 0; //@line 11920
     HEAP32[$551 >> 2] = $70; //@line 11921
     $552 = $ReallocAsyncCtx9 + 144 | 0; //@line 11922
     HEAP32[$552 >> 2] = $72; //@line 11923
     $553 = $ReallocAsyncCtx9 + 148 | 0; //@line 11924
     HEAP32[$553 >> 2] = $74; //@line 11925
     $554 = $ReallocAsyncCtx9 + 152 | 0; //@line 11926
     HEAP32[$554 >> 2] = $76; //@line 11927
     $555 = $ReallocAsyncCtx9 + 156 | 0; //@line 11928
     HEAP32[$555 >> 2] = $78; //@line 11929
     $556 = $ReallocAsyncCtx9 + 160 | 0; //@line 11930
     HEAP32[$556 >> 2] = $80; //@line 11931
     $557 = $ReallocAsyncCtx9 + 164 | 0; //@line 11932
     HEAP32[$557 >> 2] = $82; //@line 11933
     $558 = $ReallocAsyncCtx9 + 168 | 0; //@line 11934
     HEAP32[$558 >> 2] = $84; //@line 11935
     $559 = $ReallocAsyncCtx9 + 172 | 0; //@line 11936
     HEAP32[$559 >> 2] = $86; //@line 11937
     $560 = $ReallocAsyncCtx9 + 176 | 0; //@line 11938
     HEAP32[$560 >> 2] = $88; //@line 11939
     $561 = $ReallocAsyncCtx9 + 180 | 0; //@line 11940
     HEAP32[$561 >> 2] = $90; //@line 11941
     $562 = $ReallocAsyncCtx9 + 184 | 0; //@line 11942
     HEAP32[$562 >> 2] = $92; //@line 11943
     $563 = $ReallocAsyncCtx9 + 188 | 0; //@line 11944
     HEAP32[$563 >> 2] = $94; //@line 11945
     $564 = $ReallocAsyncCtx9 + 192 | 0; //@line 11946
     HEAP32[$564 >> 2] = $96; //@line 11947
     $565 = $ReallocAsyncCtx9 + 196 | 0; //@line 11948
     HEAP32[$565 >> 2] = $98; //@line 11949
     $566 = $ReallocAsyncCtx9 + 200 | 0; //@line 11950
     HEAP32[$566 >> 2] = $100; //@line 11951
     $567 = $ReallocAsyncCtx9 + 204 | 0; //@line 11952
     HEAP32[$567 >> 2] = $102; //@line 11953
     $568 = $ReallocAsyncCtx9 + 208 | 0; //@line 11954
     HEAP32[$568 >> 2] = $104; //@line 11955
     $569 = $ReallocAsyncCtx9 + 212 | 0; //@line 11956
     HEAP32[$569 >> 2] = $106; //@line 11957
     $570 = $ReallocAsyncCtx9 + 216 | 0; //@line 11958
     HEAP32[$570 >> 2] = $108; //@line 11959
     $571 = $ReallocAsyncCtx9 + 220 | 0; //@line 11960
     HEAP32[$571 >> 2] = $110; //@line 11961
     $572 = $ReallocAsyncCtx9 + 224 | 0; //@line 11962
     HEAP32[$572 >> 2] = $112; //@line 11963
     $573 = $ReallocAsyncCtx9 + 228 | 0; //@line 11964
     HEAP32[$573 >> 2] = $114; //@line 11965
     $574 = $ReallocAsyncCtx9 + 232 | 0; //@line 11966
     HEAP32[$574 >> 2] = $116; //@line 11967
     $575 = $ReallocAsyncCtx9 + 236 | 0; //@line 11968
     HEAP32[$575 >> 2] = $118; //@line 11969
     $576 = $ReallocAsyncCtx9 + 240 | 0; //@line 11970
     HEAP32[$576 >> 2] = $120; //@line 11971
     $577 = $ReallocAsyncCtx9 + 244 | 0; //@line 11972
     HEAP32[$577 >> 2] = $122; //@line 11973
     $578 = $ReallocAsyncCtx9 + 248 | 0; //@line 11974
     HEAP32[$578 >> 2] = $124; //@line 11975
     $579 = $ReallocAsyncCtx9 + 252 | 0; //@line 11976
     HEAP32[$579 >> 2] = $126; //@line 11977
     $580 = $ReallocAsyncCtx9 + 256 | 0; //@line 11978
     HEAP32[$580 >> 2] = $128; //@line 11979
     $581 = $ReallocAsyncCtx9 + 260 | 0; //@line 11980
     HEAP32[$581 >> 2] = $130; //@line 11981
     $582 = $ReallocAsyncCtx9 + 264 | 0; //@line 11982
     HEAP32[$582 >> 2] = $132; //@line 11983
     sp = STACKTOP; //@line 11984
     return;
    }
   case 53:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 11989
     break L2;
     break;
    }
   case 57:
    {
     $600 = HEAP32[$130 >> 2] | 0; //@line 11994
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 11997
     $603 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $600 + 60 | 0, $600 + 8 | 0, 20, $$1202$i) | 0; //@line 11998
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 12001
      $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 12002
      HEAP32[$604 >> 2] = $2; //@line 12003
      $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 12004
      HEAP32[$605 >> 2] = $4; //@line 12005
      $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 12006
      HEAP32[$606 >> 2] = $6; //@line 12007
      $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 12008
      HEAP32[$607 >> 2] = $8; //@line 12009
      $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 12010
      HEAP32[$608 >> 2] = $10; //@line 12011
      $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 12012
      HEAP32[$609 >> 2] = $12; //@line 12013
      $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 12014
      HEAP32[$610 >> 2] = $14; //@line 12015
      $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 12016
      HEAP32[$611 >> 2] = $16; //@line 12017
      $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 12018
      HEAP32[$612 >> 2] = $18; //@line 12019
      $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 12020
      HEAP32[$613 >> 2] = $20; //@line 12021
      $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 12022
      HEAP32[$614 >> 2] = $22; //@line 12023
      $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 12024
      HEAP32[$615 >> 2] = $24; //@line 12025
      $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 12026
      HEAP32[$616 >> 2] = $26; //@line 12027
      $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 12028
      HEAP32[$617 >> 2] = $28; //@line 12029
      $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 12030
      HEAP32[$618 >> 2] = $30; //@line 12031
      $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 12032
      HEAP32[$619 >> 2] = $32; //@line 12033
      $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 12034
      HEAP32[$620 >> 2] = $34; //@line 12035
      $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 12036
      HEAP32[$621 >> 2] = $36; //@line 12037
      $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 12038
      HEAP32[$622 >> 2] = $38; //@line 12039
      $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 12040
      HEAP32[$623 >> 2] = $157; //@line 12041
      $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 12042
      HEAP32[$624 >> 2] = $42; //@line 12043
      $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 12044
      HEAP32[$625 >> 2] = $44; //@line 12045
      $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 12046
      HEAP32[$626 >> 2] = $46; //@line 12047
      $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 12048
      HEAP32[$627 >> 2] = $48; //@line 12049
      $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 12050
      HEAP32[$628 >> 2] = $50; //@line 12051
      $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 12052
      HEAP32[$629 >> 2] = $52; //@line 12053
      $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 12054
      HEAP32[$630 >> 2] = $54; //@line 12055
      $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 12056
      HEAP32[$631 >> 2] = $56; //@line 12057
      $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 12058
      HEAP32[$632 >> 2] = $58; //@line 12059
      $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 12060
      HEAP32[$633 >> 2] = $60; //@line 12061
      $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 12062
      HEAP32[$634 >> 2] = $62; //@line 12063
      $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 12064
      HEAP32[$635 >> 2] = $64; //@line 12065
      $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 12066
      HEAP32[$636 >> 2] = $66; //@line 12067
      $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 12068
      HEAP32[$637 >> 2] = $68; //@line 12069
      $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 12070
      HEAP32[$638 >> 2] = $70; //@line 12071
      $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 12072
      HEAP32[$639 >> 2] = $72; //@line 12073
      $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 12074
      HEAP32[$640 >> 2] = $74; //@line 12075
      $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 12076
      HEAP32[$641 >> 2] = $76; //@line 12077
      $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 12078
      HEAP32[$642 >> 2] = $78; //@line 12079
      $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 12080
      HEAP32[$643 >> 2] = $80; //@line 12081
      $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 12082
      HEAP32[$644 >> 2] = $82; //@line 12083
      $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 12084
      HEAP32[$645 >> 2] = $84; //@line 12085
      $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 12086
      HEAP32[$646 >> 2] = $86; //@line 12087
      $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 12088
      HEAP32[$647 >> 2] = $88; //@line 12089
      $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 12090
      HEAP32[$648 >> 2] = $90; //@line 12091
      $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 12092
      HEAP32[$649 >> 2] = $92; //@line 12093
      $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 12094
      HEAP32[$650 >> 2] = $94; //@line 12095
      $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 12096
      HEAP32[$651 >> 2] = $96; //@line 12097
      $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 12098
      HEAP32[$652 >> 2] = $98; //@line 12099
      $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 12100
      HEAP32[$653 >> 2] = $100; //@line 12101
      $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 12102
      HEAP32[$654 >> 2] = $102; //@line 12103
      $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 12104
      HEAP32[$655 >> 2] = $104; //@line 12105
      $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 12106
      HEAP32[$656 >> 2] = $106; //@line 12107
      $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 12108
      HEAP32[$657 >> 2] = $108; //@line 12109
      $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 12110
      HEAP32[$658 >> 2] = $110; //@line 12111
      $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 12112
      HEAP32[$659 >> 2] = $112; //@line 12113
      $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 12114
      HEAP32[$660 >> 2] = $114; //@line 12115
      $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 12116
      HEAP32[$661 >> 2] = $116; //@line 12117
      $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 12118
      HEAP32[$662 >> 2] = $118; //@line 12119
      $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 12120
      HEAP32[$663 >> 2] = $120; //@line 12121
      $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 12122
      HEAP32[$664 >> 2] = $122; //@line 12123
      $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 12124
      HEAP32[$665 >> 2] = $124; //@line 12125
      $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 12126
      HEAP32[$666 >> 2] = $126; //@line 12127
      $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 12128
      HEAP32[$667 >> 2] = $128; //@line 12129
      $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 12130
      HEAP32[$668 >> 2] = $130; //@line 12131
      $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 12132
      HEAP32[$669 >> 2] = $132; //@line 12133
      sp = STACKTOP; //@line 12134
      return;
     }
     HEAP8[___async_retval >> 0] = $603; //@line 12138
     ___async_unwind = 0; //@line 12139
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 12140
     $604 = $ReallocAsyncCtx8 + 4 | 0; //@line 12141
     HEAP32[$604 >> 2] = $2; //@line 12142
     $605 = $ReallocAsyncCtx8 + 8 | 0; //@line 12143
     HEAP32[$605 >> 2] = $4; //@line 12144
     $606 = $ReallocAsyncCtx8 + 12 | 0; //@line 12145
     HEAP32[$606 >> 2] = $6; //@line 12146
     $607 = $ReallocAsyncCtx8 + 16 | 0; //@line 12147
     HEAP32[$607 >> 2] = $8; //@line 12148
     $608 = $ReallocAsyncCtx8 + 20 | 0; //@line 12149
     HEAP32[$608 >> 2] = $10; //@line 12150
     $609 = $ReallocAsyncCtx8 + 24 | 0; //@line 12151
     HEAP32[$609 >> 2] = $12; //@line 12152
     $610 = $ReallocAsyncCtx8 + 28 | 0; //@line 12153
     HEAP32[$610 >> 2] = $14; //@line 12154
     $611 = $ReallocAsyncCtx8 + 32 | 0; //@line 12155
     HEAP32[$611 >> 2] = $16; //@line 12156
     $612 = $ReallocAsyncCtx8 + 36 | 0; //@line 12157
     HEAP32[$612 >> 2] = $18; //@line 12158
     $613 = $ReallocAsyncCtx8 + 40 | 0; //@line 12159
     HEAP32[$613 >> 2] = $20; //@line 12160
     $614 = $ReallocAsyncCtx8 + 44 | 0; //@line 12161
     HEAP32[$614 >> 2] = $22; //@line 12162
     $615 = $ReallocAsyncCtx8 + 48 | 0; //@line 12163
     HEAP32[$615 >> 2] = $24; //@line 12164
     $616 = $ReallocAsyncCtx8 + 52 | 0; //@line 12165
     HEAP32[$616 >> 2] = $26; //@line 12166
     $617 = $ReallocAsyncCtx8 + 56 | 0; //@line 12167
     HEAP32[$617 >> 2] = $28; //@line 12168
     $618 = $ReallocAsyncCtx8 + 60 | 0; //@line 12169
     HEAP32[$618 >> 2] = $30; //@line 12170
     $619 = $ReallocAsyncCtx8 + 64 | 0; //@line 12171
     HEAP32[$619 >> 2] = $32; //@line 12172
     $620 = $ReallocAsyncCtx8 + 68 | 0; //@line 12173
     HEAP32[$620 >> 2] = $34; //@line 12174
     $621 = $ReallocAsyncCtx8 + 72 | 0; //@line 12175
     HEAP32[$621 >> 2] = $36; //@line 12176
     $622 = $ReallocAsyncCtx8 + 76 | 0; //@line 12177
     HEAP32[$622 >> 2] = $38; //@line 12178
     $623 = $ReallocAsyncCtx8 + 80 | 0; //@line 12179
     HEAP32[$623 >> 2] = $157; //@line 12180
     $624 = $ReallocAsyncCtx8 + 84 | 0; //@line 12181
     HEAP32[$624 >> 2] = $42; //@line 12182
     $625 = $ReallocAsyncCtx8 + 88 | 0; //@line 12183
     HEAP32[$625 >> 2] = $44; //@line 12184
     $626 = $ReallocAsyncCtx8 + 92 | 0; //@line 12185
     HEAP32[$626 >> 2] = $46; //@line 12186
     $627 = $ReallocAsyncCtx8 + 96 | 0; //@line 12187
     HEAP32[$627 >> 2] = $48; //@line 12188
     $628 = $ReallocAsyncCtx8 + 100 | 0; //@line 12189
     HEAP32[$628 >> 2] = $50; //@line 12190
     $629 = $ReallocAsyncCtx8 + 104 | 0; //@line 12191
     HEAP32[$629 >> 2] = $52; //@line 12192
     $630 = $ReallocAsyncCtx8 + 108 | 0; //@line 12193
     HEAP32[$630 >> 2] = $54; //@line 12194
     $631 = $ReallocAsyncCtx8 + 112 | 0; //@line 12195
     HEAP32[$631 >> 2] = $56; //@line 12196
     $632 = $ReallocAsyncCtx8 + 116 | 0; //@line 12197
     HEAP32[$632 >> 2] = $58; //@line 12198
     $633 = $ReallocAsyncCtx8 + 120 | 0; //@line 12199
     HEAP32[$633 >> 2] = $60; //@line 12200
     $634 = $ReallocAsyncCtx8 + 124 | 0; //@line 12201
     HEAP32[$634 >> 2] = $62; //@line 12202
     $635 = $ReallocAsyncCtx8 + 128 | 0; //@line 12203
     HEAP32[$635 >> 2] = $64; //@line 12204
     $636 = $ReallocAsyncCtx8 + 132 | 0; //@line 12205
     HEAP32[$636 >> 2] = $66; //@line 12206
     $637 = $ReallocAsyncCtx8 + 136 | 0; //@line 12207
     HEAP32[$637 >> 2] = $68; //@line 12208
     $638 = $ReallocAsyncCtx8 + 140 | 0; //@line 12209
     HEAP32[$638 >> 2] = $70; //@line 12210
     $639 = $ReallocAsyncCtx8 + 144 | 0; //@line 12211
     HEAP32[$639 >> 2] = $72; //@line 12212
     $640 = $ReallocAsyncCtx8 + 148 | 0; //@line 12213
     HEAP32[$640 >> 2] = $74; //@line 12214
     $641 = $ReallocAsyncCtx8 + 152 | 0; //@line 12215
     HEAP32[$641 >> 2] = $76; //@line 12216
     $642 = $ReallocAsyncCtx8 + 156 | 0; //@line 12217
     HEAP32[$642 >> 2] = $78; //@line 12218
     $643 = $ReallocAsyncCtx8 + 160 | 0; //@line 12219
     HEAP32[$643 >> 2] = $80; //@line 12220
     $644 = $ReallocAsyncCtx8 + 164 | 0; //@line 12221
     HEAP32[$644 >> 2] = $82; //@line 12222
     $645 = $ReallocAsyncCtx8 + 168 | 0; //@line 12223
     HEAP32[$645 >> 2] = $84; //@line 12224
     $646 = $ReallocAsyncCtx8 + 172 | 0; //@line 12225
     HEAP32[$646 >> 2] = $86; //@line 12226
     $647 = $ReallocAsyncCtx8 + 176 | 0; //@line 12227
     HEAP32[$647 >> 2] = $88; //@line 12228
     $648 = $ReallocAsyncCtx8 + 180 | 0; //@line 12229
     HEAP32[$648 >> 2] = $90; //@line 12230
     $649 = $ReallocAsyncCtx8 + 184 | 0; //@line 12231
     HEAP32[$649 >> 2] = $92; //@line 12232
     $650 = $ReallocAsyncCtx8 + 188 | 0; //@line 12233
     HEAP32[$650 >> 2] = $94; //@line 12234
     $651 = $ReallocAsyncCtx8 + 192 | 0; //@line 12235
     HEAP32[$651 >> 2] = $96; //@line 12236
     $652 = $ReallocAsyncCtx8 + 196 | 0; //@line 12237
     HEAP32[$652 >> 2] = $98; //@line 12238
     $653 = $ReallocAsyncCtx8 + 200 | 0; //@line 12239
     HEAP32[$653 >> 2] = $100; //@line 12240
     $654 = $ReallocAsyncCtx8 + 204 | 0; //@line 12241
     HEAP32[$654 >> 2] = $102; //@line 12242
     $655 = $ReallocAsyncCtx8 + 208 | 0; //@line 12243
     HEAP32[$655 >> 2] = $104; //@line 12244
     $656 = $ReallocAsyncCtx8 + 212 | 0; //@line 12245
     HEAP32[$656 >> 2] = $106; //@line 12246
     $657 = $ReallocAsyncCtx8 + 216 | 0; //@line 12247
     HEAP32[$657 >> 2] = $108; //@line 12248
     $658 = $ReallocAsyncCtx8 + 220 | 0; //@line 12249
     HEAP32[$658 >> 2] = $110; //@line 12250
     $659 = $ReallocAsyncCtx8 + 224 | 0; //@line 12251
     HEAP32[$659 >> 2] = $112; //@line 12252
     $660 = $ReallocAsyncCtx8 + 228 | 0; //@line 12253
     HEAP32[$660 >> 2] = $114; //@line 12254
     $661 = $ReallocAsyncCtx8 + 232 | 0; //@line 12255
     HEAP32[$661 >> 2] = $116; //@line 12256
     $662 = $ReallocAsyncCtx8 + 236 | 0; //@line 12257
     HEAP32[$662 >> 2] = $118; //@line 12258
     $663 = $ReallocAsyncCtx8 + 240 | 0; //@line 12259
     HEAP32[$663 >> 2] = $120; //@line 12260
     $664 = $ReallocAsyncCtx8 + 244 | 0; //@line 12261
     HEAP32[$664 >> 2] = $122; //@line 12262
     $665 = $ReallocAsyncCtx8 + 248 | 0; //@line 12263
     HEAP32[$665 >> 2] = $124; //@line 12264
     $666 = $ReallocAsyncCtx8 + 252 | 0; //@line 12265
     HEAP32[$666 >> 2] = $126; //@line 12266
     $667 = $ReallocAsyncCtx8 + 256 | 0; //@line 12267
     HEAP32[$667 >> 2] = $128; //@line 12268
     $668 = $ReallocAsyncCtx8 + 260 | 0; //@line 12269
     HEAP32[$668 >> 2] = $130; //@line 12270
     $669 = $ReallocAsyncCtx8 + 264 | 0; //@line 12271
     HEAP32[$669 >> 2] = $132; //@line 12272
     sp = STACKTOP; //@line 12273
     return;
    }
   case 60:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 12278
     $671 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $84, $88, 11, $$1202$i) | 0; //@line 12279
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 12282
      $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 12283
      HEAP32[$672 >> 2] = $2; //@line 12284
      $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 12285
      HEAP32[$673 >> 2] = $4; //@line 12286
      $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 12287
      HEAP32[$674 >> 2] = $6; //@line 12288
      $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 12289
      HEAP32[$675 >> 2] = $8; //@line 12290
      $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 12291
      HEAP32[$676 >> 2] = $10; //@line 12292
      $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 12293
      HEAP32[$677 >> 2] = $12; //@line 12294
      $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 12295
      HEAP32[$678 >> 2] = $14; //@line 12296
      $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 12297
      HEAP32[$679 >> 2] = $16; //@line 12298
      $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 12299
      HEAP32[$680 >> 2] = $18; //@line 12300
      $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 12301
      HEAP32[$681 >> 2] = $20; //@line 12302
      $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 12303
      HEAP32[$682 >> 2] = $22; //@line 12304
      $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 12305
      HEAP32[$683 >> 2] = $24; //@line 12306
      $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 12307
      HEAP32[$684 >> 2] = $26; //@line 12308
      $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 12309
      HEAP32[$685 >> 2] = $28; //@line 12310
      $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 12311
      HEAP32[$686 >> 2] = $30; //@line 12312
      $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 12313
      HEAP32[$687 >> 2] = $32; //@line 12314
      $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 12315
      HEAP32[$688 >> 2] = $34; //@line 12316
      $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 12317
      HEAP32[$689 >> 2] = $36; //@line 12318
      $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 12319
      HEAP32[$690 >> 2] = $38; //@line 12320
      $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 12321
      HEAP32[$691 >> 2] = $157; //@line 12322
      $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 12323
      HEAP32[$692 >> 2] = $42; //@line 12324
      $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 12325
      HEAP32[$693 >> 2] = $44; //@line 12326
      $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 12327
      HEAP32[$694 >> 2] = $46; //@line 12328
      $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 12329
      HEAP32[$695 >> 2] = $48; //@line 12330
      $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 12331
      HEAP32[$696 >> 2] = $50; //@line 12332
      $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 12333
      HEAP32[$697 >> 2] = $52; //@line 12334
      $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 12335
      HEAP32[$698 >> 2] = $54; //@line 12336
      $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 12337
      HEAP32[$699 >> 2] = $56; //@line 12338
      $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 12339
      HEAP32[$700 >> 2] = $58; //@line 12340
      $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 12341
      HEAP32[$701 >> 2] = $60; //@line 12342
      $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 12343
      HEAP32[$702 >> 2] = $62; //@line 12344
      $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 12345
      HEAP32[$703 >> 2] = $64; //@line 12346
      $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 12347
      HEAP32[$704 >> 2] = $66; //@line 12348
      $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 12349
      HEAP32[$705 >> 2] = $68; //@line 12350
      $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 12351
      HEAP32[$706 >> 2] = $70; //@line 12352
      $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 12353
      HEAP32[$707 >> 2] = $72; //@line 12354
      $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 12355
      HEAP32[$708 >> 2] = $74; //@line 12356
      $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 12357
      HEAP32[$709 >> 2] = $76; //@line 12358
      $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 12359
      HEAP32[$710 >> 2] = $78; //@line 12360
      $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 12361
      HEAP32[$711 >> 2] = $80; //@line 12362
      $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 12363
      HEAP32[$712 >> 2] = $82; //@line 12364
      $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 12365
      HEAP32[$713 >> 2] = $84; //@line 12366
      $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 12367
      HEAP32[$714 >> 2] = $86; //@line 12368
      $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 12369
      HEAP32[$715 >> 2] = $88; //@line 12370
      $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 12371
      HEAP32[$716 >> 2] = $90; //@line 12372
      $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 12373
      HEAP32[$717 >> 2] = $92; //@line 12374
      $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 12375
      HEAP32[$718 >> 2] = $94; //@line 12376
      $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 12377
      HEAP32[$719 >> 2] = $96; //@line 12378
      $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 12379
      HEAP32[$720 >> 2] = $98; //@line 12380
      $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 12381
      HEAP32[$721 >> 2] = $100; //@line 12382
      $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 12383
      HEAP32[$722 >> 2] = $102; //@line 12384
      $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 12385
      HEAP32[$723 >> 2] = $104; //@line 12386
      $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 12387
      HEAP32[$724 >> 2] = $106; //@line 12388
      $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 12389
      HEAP32[$725 >> 2] = $108; //@line 12390
      $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 12391
      HEAP32[$726 >> 2] = $110; //@line 12392
      $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 12393
      HEAP32[$727 >> 2] = $112; //@line 12394
      $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 12395
      HEAP32[$728 >> 2] = $114; //@line 12396
      $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 12397
      HEAP32[$729 >> 2] = $116; //@line 12398
      $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 12399
      HEAP32[$730 >> 2] = $118; //@line 12400
      $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 12401
      HEAP32[$731 >> 2] = $120; //@line 12402
      $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 12403
      HEAP32[$732 >> 2] = $122; //@line 12404
      $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 12405
      HEAP32[$733 >> 2] = $124; //@line 12406
      $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 12407
      HEAP32[$734 >> 2] = $126; //@line 12408
      $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 12409
      HEAP32[$735 >> 2] = $128; //@line 12410
      $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 12411
      HEAP32[$736 >> 2] = $130; //@line 12412
      $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 12413
      HEAP32[$737 >> 2] = $132; //@line 12414
      sp = STACKTOP; //@line 12415
      return;
     }
     HEAP8[___async_retval >> 0] = $671; //@line 12419
     ___async_unwind = 0; //@line 12420
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 12421
     $672 = $ReallocAsyncCtx7 + 4 | 0; //@line 12422
     HEAP32[$672 >> 2] = $2; //@line 12423
     $673 = $ReallocAsyncCtx7 + 8 | 0; //@line 12424
     HEAP32[$673 >> 2] = $4; //@line 12425
     $674 = $ReallocAsyncCtx7 + 12 | 0; //@line 12426
     HEAP32[$674 >> 2] = $6; //@line 12427
     $675 = $ReallocAsyncCtx7 + 16 | 0; //@line 12428
     HEAP32[$675 >> 2] = $8; //@line 12429
     $676 = $ReallocAsyncCtx7 + 20 | 0; //@line 12430
     HEAP32[$676 >> 2] = $10; //@line 12431
     $677 = $ReallocAsyncCtx7 + 24 | 0; //@line 12432
     HEAP32[$677 >> 2] = $12; //@line 12433
     $678 = $ReallocAsyncCtx7 + 28 | 0; //@line 12434
     HEAP32[$678 >> 2] = $14; //@line 12435
     $679 = $ReallocAsyncCtx7 + 32 | 0; //@line 12436
     HEAP32[$679 >> 2] = $16; //@line 12437
     $680 = $ReallocAsyncCtx7 + 36 | 0; //@line 12438
     HEAP32[$680 >> 2] = $18; //@line 12439
     $681 = $ReallocAsyncCtx7 + 40 | 0; //@line 12440
     HEAP32[$681 >> 2] = $20; //@line 12441
     $682 = $ReallocAsyncCtx7 + 44 | 0; //@line 12442
     HEAP32[$682 >> 2] = $22; //@line 12443
     $683 = $ReallocAsyncCtx7 + 48 | 0; //@line 12444
     HEAP32[$683 >> 2] = $24; //@line 12445
     $684 = $ReallocAsyncCtx7 + 52 | 0; //@line 12446
     HEAP32[$684 >> 2] = $26; //@line 12447
     $685 = $ReallocAsyncCtx7 + 56 | 0; //@line 12448
     HEAP32[$685 >> 2] = $28; //@line 12449
     $686 = $ReallocAsyncCtx7 + 60 | 0; //@line 12450
     HEAP32[$686 >> 2] = $30; //@line 12451
     $687 = $ReallocAsyncCtx7 + 64 | 0; //@line 12452
     HEAP32[$687 >> 2] = $32; //@line 12453
     $688 = $ReallocAsyncCtx7 + 68 | 0; //@line 12454
     HEAP32[$688 >> 2] = $34; //@line 12455
     $689 = $ReallocAsyncCtx7 + 72 | 0; //@line 12456
     HEAP32[$689 >> 2] = $36; //@line 12457
     $690 = $ReallocAsyncCtx7 + 76 | 0; //@line 12458
     HEAP32[$690 >> 2] = $38; //@line 12459
     $691 = $ReallocAsyncCtx7 + 80 | 0; //@line 12460
     HEAP32[$691 >> 2] = $157; //@line 12461
     $692 = $ReallocAsyncCtx7 + 84 | 0; //@line 12462
     HEAP32[$692 >> 2] = $42; //@line 12463
     $693 = $ReallocAsyncCtx7 + 88 | 0; //@line 12464
     HEAP32[$693 >> 2] = $44; //@line 12465
     $694 = $ReallocAsyncCtx7 + 92 | 0; //@line 12466
     HEAP32[$694 >> 2] = $46; //@line 12467
     $695 = $ReallocAsyncCtx7 + 96 | 0; //@line 12468
     HEAP32[$695 >> 2] = $48; //@line 12469
     $696 = $ReallocAsyncCtx7 + 100 | 0; //@line 12470
     HEAP32[$696 >> 2] = $50; //@line 12471
     $697 = $ReallocAsyncCtx7 + 104 | 0; //@line 12472
     HEAP32[$697 >> 2] = $52; //@line 12473
     $698 = $ReallocAsyncCtx7 + 108 | 0; //@line 12474
     HEAP32[$698 >> 2] = $54; //@line 12475
     $699 = $ReallocAsyncCtx7 + 112 | 0; //@line 12476
     HEAP32[$699 >> 2] = $56; //@line 12477
     $700 = $ReallocAsyncCtx7 + 116 | 0; //@line 12478
     HEAP32[$700 >> 2] = $58; //@line 12479
     $701 = $ReallocAsyncCtx7 + 120 | 0; //@line 12480
     HEAP32[$701 >> 2] = $60; //@line 12481
     $702 = $ReallocAsyncCtx7 + 124 | 0; //@line 12482
     HEAP32[$702 >> 2] = $62; //@line 12483
     $703 = $ReallocAsyncCtx7 + 128 | 0; //@line 12484
     HEAP32[$703 >> 2] = $64; //@line 12485
     $704 = $ReallocAsyncCtx7 + 132 | 0; //@line 12486
     HEAP32[$704 >> 2] = $66; //@line 12487
     $705 = $ReallocAsyncCtx7 + 136 | 0; //@line 12488
     HEAP32[$705 >> 2] = $68; //@line 12489
     $706 = $ReallocAsyncCtx7 + 140 | 0; //@line 12490
     HEAP32[$706 >> 2] = $70; //@line 12491
     $707 = $ReallocAsyncCtx7 + 144 | 0; //@line 12492
     HEAP32[$707 >> 2] = $72; //@line 12493
     $708 = $ReallocAsyncCtx7 + 148 | 0; //@line 12494
     HEAP32[$708 >> 2] = $74; //@line 12495
     $709 = $ReallocAsyncCtx7 + 152 | 0; //@line 12496
     HEAP32[$709 >> 2] = $76; //@line 12497
     $710 = $ReallocAsyncCtx7 + 156 | 0; //@line 12498
     HEAP32[$710 >> 2] = $78; //@line 12499
     $711 = $ReallocAsyncCtx7 + 160 | 0; //@line 12500
     HEAP32[$711 >> 2] = $80; //@line 12501
     $712 = $ReallocAsyncCtx7 + 164 | 0; //@line 12502
     HEAP32[$712 >> 2] = $82; //@line 12503
     $713 = $ReallocAsyncCtx7 + 168 | 0; //@line 12504
     HEAP32[$713 >> 2] = $84; //@line 12505
     $714 = $ReallocAsyncCtx7 + 172 | 0; //@line 12506
     HEAP32[$714 >> 2] = $86; //@line 12507
     $715 = $ReallocAsyncCtx7 + 176 | 0; //@line 12508
     HEAP32[$715 >> 2] = $88; //@line 12509
     $716 = $ReallocAsyncCtx7 + 180 | 0; //@line 12510
     HEAP32[$716 >> 2] = $90; //@line 12511
     $717 = $ReallocAsyncCtx7 + 184 | 0; //@line 12512
     HEAP32[$717 >> 2] = $92; //@line 12513
     $718 = $ReallocAsyncCtx7 + 188 | 0; //@line 12514
     HEAP32[$718 >> 2] = $94; //@line 12515
     $719 = $ReallocAsyncCtx7 + 192 | 0; //@line 12516
     HEAP32[$719 >> 2] = $96; //@line 12517
     $720 = $ReallocAsyncCtx7 + 196 | 0; //@line 12518
     HEAP32[$720 >> 2] = $98; //@line 12519
     $721 = $ReallocAsyncCtx7 + 200 | 0; //@line 12520
     HEAP32[$721 >> 2] = $100; //@line 12521
     $722 = $ReallocAsyncCtx7 + 204 | 0; //@line 12522
     HEAP32[$722 >> 2] = $102; //@line 12523
     $723 = $ReallocAsyncCtx7 + 208 | 0; //@line 12524
     HEAP32[$723 >> 2] = $104; //@line 12525
     $724 = $ReallocAsyncCtx7 + 212 | 0; //@line 12526
     HEAP32[$724 >> 2] = $106; //@line 12527
     $725 = $ReallocAsyncCtx7 + 216 | 0; //@line 12528
     HEAP32[$725 >> 2] = $108; //@line 12529
     $726 = $ReallocAsyncCtx7 + 220 | 0; //@line 12530
     HEAP32[$726 >> 2] = $110; //@line 12531
     $727 = $ReallocAsyncCtx7 + 224 | 0; //@line 12532
     HEAP32[$727 >> 2] = $112; //@line 12533
     $728 = $ReallocAsyncCtx7 + 228 | 0; //@line 12534
     HEAP32[$728 >> 2] = $114; //@line 12535
     $729 = $ReallocAsyncCtx7 + 232 | 0; //@line 12536
     HEAP32[$729 >> 2] = $116; //@line 12537
     $730 = $ReallocAsyncCtx7 + 236 | 0; //@line 12538
     HEAP32[$730 >> 2] = $118; //@line 12539
     $731 = $ReallocAsyncCtx7 + 240 | 0; //@line 12540
     HEAP32[$731 >> 2] = $120; //@line 12541
     $732 = $ReallocAsyncCtx7 + 244 | 0; //@line 12542
     HEAP32[$732 >> 2] = $122; //@line 12543
     $733 = $ReallocAsyncCtx7 + 248 | 0; //@line 12544
     HEAP32[$733 >> 2] = $124; //@line 12545
     $734 = $ReallocAsyncCtx7 + 252 | 0; //@line 12546
     HEAP32[$734 >> 2] = $126; //@line 12547
     $735 = $ReallocAsyncCtx7 + 256 | 0; //@line 12548
     HEAP32[$735 >> 2] = $128; //@line 12549
     $736 = $ReallocAsyncCtx7 + 260 | 0; //@line 12550
     HEAP32[$736 >> 2] = $130; //@line 12551
     $737 = $ReallocAsyncCtx7 + 264 | 0; //@line 12552
     HEAP32[$737 >> 2] = $132; //@line 12553
     sp = STACKTOP; //@line 12554
     return;
    }
   case 65:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 12559
     break L2;
     break;
    }
   case 69:
    {
     $755 = HEAP32[$130 >> 2] | 0; //@line 12564
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 12567
     $758 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $755 + 64 | 0, $755 + 10 | 0, 15, $$1202$i) | 0; //@line 12568
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 12571
      $759 = $ReallocAsyncCtx6 + 4 | 0; //@line 12572
      HEAP32[$759 >> 2] = $2; //@line 12573
      $760 = $ReallocAsyncCtx6 + 8 | 0; //@line 12574
      HEAP32[$760 >> 2] = $4; //@line 12575
      $761 = $ReallocAsyncCtx6 + 12 | 0; //@line 12576
      HEAP32[$761 >> 2] = $6; //@line 12577
      $762 = $ReallocAsyncCtx6 + 16 | 0; //@line 12578
      HEAP32[$762 >> 2] = $8; //@line 12579
      $763 = $ReallocAsyncCtx6 + 20 | 0; //@line 12580
      HEAP32[$763 >> 2] = $10; //@line 12581
      $764 = $ReallocAsyncCtx6 + 24 | 0; //@line 12582
      HEAP32[$764 >> 2] = $12; //@line 12583
      $765 = $ReallocAsyncCtx6 + 28 | 0; //@line 12584
      HEAP32[$765 >> 2] = $14; //@line 12585
      $766 = $ReallocAsyncCtx6 + 32 | 0; //@line 12586
      HEAP32[$766 >> 2] = $16; //@line 12587
      $767 = $ReallocAsyncCtx6 + 36 | 0; //@line 12588
      HEAP32[$767 >> 2] = $18; //@line 12589
      $768 = $ReallocAsyncCtx6 + 40 | 0; //@line 12590
      HEAP32[$768 >> 2] = $20; //@line 12591
      $769 = $ReallocAsyncCtx6 + 44 | 0; //@line 12592
      HEAP32[$769 >> 2] = $22; //@line 12593
      $770 = $ReallocAsyncCtx6 + 48 | 0; //@line 12594
      HEAP32[$770 >> 2] = $24; //@line 12595
      $771 = $ReallocAsyncCtx6 + 52 | 0; //@line 12596
      HEAP32[$771 >> 2] = $26; //@line 12597
      $772 = $ReallocAsyncCtx6 + 56 | 0; //@line 12598
      HEAP32[$772 >> 2] = $28; //@line 12599
      $773 = $ReallocAsyncCtx6 + 60 | 0; //@line 12600
      HEAP32[$773 >> 2] = $30; //@line 12601
      $774 = $ReallocAsyncCtx6 + 64 | 0; //@line 12602
      HEAP32[$774 >> 2] = $32; //@line 12603
      $775 = $ReallocAsyncCtx6 + 68 | 0; //@line 12604
      HEAP32[$775 >> 2] = $34; //@line 12605
      $776 = $ReallocAsyncCtx6 + 72 | 0; //@line 12606
      HEAP32[$776 >> 2] = $36; //@line 12607
      $777 = $ReallocAsyncCtx6 + 76 | 0; //@line 12608
      HEAP32[$777 >> 2] = $38; //@line 12609
      $778 = $ReallocAsyncCtx6 + 80 | 0; //@line 12610
      HEAP32[$778 >> 2] = $157; //@line 12611
      $779 = $ReallocAsyncCtx6 + 84 | 0; //@line 12612
      HEAP32[$779 >> 2] = $42; //@line 12613
      $780 = $ReallocAsyncCtx6 + 88 | 0; //@line 12614
      HEAP32[$780 >> 2] = $44; //@line 12615
      $781 = $ReallocAsyncCtx6 + 92 | 0; //@line 12616
      HEAP32[$781 >> 2] = $46; //@line 12617
      $782 = $ReallocAsyncCtx6 + 96 | 0; //@line 12618
      HEAP32[$782 >> 2] = $48; //@line 12619
      $783 = $ReallocAsyncCtx6 + 100 | 0; //@line 12620
      HEAP32[$783 >> 2] = $50; //@line 12621
      $784 = $ReallocAsyncCtx6 + 104 | 0; //@line 12622
      HEAP32[$784 >> 2] = $52; //@line 12623
      $785 = $ReallocAsyncCtx6 + 108 | 0; //@line 12624
      HEAP32[$785 >> 2] = $54; //@line 12625
      $786 = $ReallocAsyncCtx6 + 112 | 0; //@line 12626
      HEAP32[$786 >> 2] = $56; //@line 12627
      $787 = $ReallocAsyncCtx6 + 116 | 0; //@line 12628
      HEAP32[$787 >> 2] = $58; //@line 12629
      $788 = $ReallocAsyncCtx6 + 120 | 0; //@line 12630
      HEAP32[$788 >> 2] = $60; //@line 12631
      $789 = $ReallocAsyncCtx6 + 124 | 0; //@line 12632
      HEAP32[$789 >> 2] = $62; //@line 12633
      $790 = $ReallocAsyncCtx6 + 128 | 0; //@line 12634
      HEAP32[$790 >> 2] = $64; //@line 12635
      $791 = $ReallocAsyncCtx6 + 132 | 0; //@line 12636
      HEAP32[$791 >> 2] = $66; //@line 12637
      $792 = $ReallocAsyncCtx6 + 136 | 0; //@line 12638
      HEAP32[$792 >> 2] = $68; //@line 12639
      $793 = $ReallocAsyncCtx6 + 140 | 0; //@line 12640
      HEAP32[$793 >> 2] = $70; //@line 12641
      $794 = $ReallocAsyncCtx6 + 144 | 0; //@line 12642
      HEAP32[$794 >> 2] = $72; //@line 12643
      $795 = $ReallocAsyncCtx6 + 148 | 0; //@line 12644
      HEAP32[$795 >> 2] = $74; //@line 12645
      $796 = $ReallocAsyncCtx6 + 152 | 0; //@line 12646
      HEAP32[$796 >> 2] = $76; //@line 12647
      $797 = $ReallocAsyncCtx6 + 156 | 0; //@line 12648
      HEAP32[$797 >> 2] = $78; //@line 12649
      $798 = $ReallocAsyncCtx6 + 160 | 0; //@line 12650
      HEAP32[$798 >> 2] = $80; //@line 12651
      $799 = $ReallocAsyncCtx6 + 164 | 0; //@line 12652
      HEAP32[$799 >> 2] = $82; //@line 12653
      $800 = $ReallocAsyncCtx6 + 168 | 0; //@line 12654
      HEAP32[$800 >> 2] = $84; //@line 12655
      $801 = $ReallocAsyncCtx6 + 172 | 0; //@line 12656
      HEAP32[$801 >> 2] = $86; //@line 12657
      $802 = $ReallocAsyncCtx6 + 176 | 0; //@line 12658
      HEAP32[$802 >> 2] = $88; //@line 12659
      $803 = $ReallocAsyncCtx6 + 180 | 0; //@line 12660
      HEAP32[$803 >> 2] = $90; //@line 12661
      $804 = $ReallocAsyncCtx6 + 184 | 0; //@line 12662
      HEAP32[$804 >> 2] = $92; //@line 12663
      $805 = $ReallocAsyncCtx6 + 188 | 0; //@line 12664
      HEAP32[$805 >> 2] = $94; //@line 12665
      $806 = $ReallocAsyncCtx6 + 192 | 0; //@line 12666
      HEAP32[$806 >> 2] = $96; //@line 12667
      $807 = $ReallocAsyncCtx6 + 196 | 0; //@line 12668
      HEAP32[$807 >> 2] = $98; //@line 12669
      $808 = $ReallocAsyncCtx6 + 200 | 0; //@line 12670
      HEAP32[$808 >> 2] = $100; //@line 12671
      $809 = $ReallocAsyncCtx6 + 204 | 0; //@line 12672
      HEAP32[$809 >> 2] = $102; //@line 12673
      $810 = $ReallocAsyncCtx6 + 208 | 0; //@line 12674
      HEAP32[$810 >> 2] = $104; //@line 12675
      $811 = $ReallocAsyncCtx6 + 212 | 0; //@line 12676
      HEAP32[$811 >> 2] = $106; //@line 12677
      $812 = $ReallocAsyncCtx6 + 216 | 0; //@line 12678
      HEAP32[$812 >> 2] = $108; //@line 12679
      $813 = $ReallocAsyncCtx6 + 220 | 0; //@line 12680
      HEAP32[$813 >> 2] = $110; //@line 12681
      $814 = $ReallocAsyncCtx6 + 224 | 0; //@line 12682
      HEAP32[$814 >> 2] = $112; //@line 12683
      $815 = $ReallocAsyncCtx6 + 228 | 0; //@line 12684
      HEAP32[$815 >> 2] = $114; //@line 12685
      $816 = $ReallocAsyncCtx6 + 232 | 0; //@line 12686
      HEAP32[$816 >> 2] = $116; //@line 12687
      $817 = $ReallocAsyncCtx6 + 236 | 0; //@line 12688
      HEAP32[$817 >> 2] = $118; //@line 12689
      $818 = $ReallocAsyncCtx6 + 240 | 0; //@line 12690
      HEAP32[$818 >> 2] = $120; //@line 12691
      $819 = $ReallocAsyncCtx6 + 244 | 0; //@line 12692
      HEAP32[$819 >> 2] = $122; //@line 12693
      $820 = $ReallocAsyncCtx6 + 248 | 0; //@line 12694
      HEAP32[$820 >> 2] = $124; //@line 12695
      $821 = $ReallocAsyncCtx6 + 252 | 0; //@line 12696
      HEAP32[$821 >> 2] = $126; //@line 12697
      $822 = $ReallocAsyncCtx6 + 256 | 0; //@line 12698
      HEAP32[$822 >> 2] = $128; //@line 12699
      $823 = $ReallocAsyncCtx6 + 260 | 0; //@line 12700
      HEAP32[$823 >> 2] = $130; //@line 12701
      $824 = $ReallocAsyncCtx6 + 264 | 0; //@line 12702
      HEAP32[$824 >> 2] = $132; //@line 12703
      sp = STACKTOP; //@line 12704
      return;
     }
     HEAP8[___async_retval >> 0] = $758; //@line 12708
     ___async_unwind = 0; //@line 12709
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 12710
     $759 = $ReallocAsyncCtx6 + 4 | 0; //@line 12711
     HEAP32[$759 >> 2] = $2; //@line 12712
     $760 = $ReallocAsyncCtx6 + 8 | 0; //@line 12713
     HEAP32[$760 >> 2] = $4; //@line 12714
     $761 = $ReallocAsyncCtx6 + 12 | 0; //@line 12715
     HEAP32[$761 >> 2] = $6; //@line 12716
     $762 = $ReallocAsyncCtx6 + 16 | 0; //@line 12717
     HEAP32[$762 >> 2] = $8; //@line 12718
     $763 = $ReallocAsyncCtx6 + 20 | 0; //@line 12719
     HEAP32[$763 >> 2] = $10; //@line 12720
     $764 = $ReallocAsyncCtx6 + 24 | 0; //@line 12721
     HEAP32[$764 >> 2] = $12; //@line 12722
     $765 = $ReallocAsyncCtx6 + 28 | 0; //@line 12723
     HEAP32[$765 >> 2] = $14; //@line 12724
     $766 = $ReallocAsyncCtx6 + 32 | 0; //@line 12725
     HEAP32[$766 >> 2] = $16; //@line 12726
     $767 = $ReallocAsyncCtx6 + 36 | 0; //@line 12727
     HEAP32[$767 >> 2] = $18; //@line 12728
     $768 = $ReallocAsyncCtx6 + 40 | 0; //@line 12729
     HEAP32[$768 >> 2] = $20; //@line 12730
     $769 = $ReallocAsyncCtx6 + 44 | 0; //@line 12731
     HEAP32[$769 >> 2] = $22; //@line 12732
     $770 = $ReallocAsyncCtx6 + 48 | 0; //@line 12733
     HEAP32[$770 >> 2] = $24; //@line 12734
     $771 = $ReallocAsyncCtx6 + 52 | 0; //@line 12735
     HEAP32[$771 >> 2] = $26; //@line 12736
     $772 = $ReallocAsyncCtx6 + 56 | 0; //@line 12737
     HEAP32[$772 >> 2] = $28; //@line 12738
     $773 = $ReallocAsyncCtx6 + 60 | 0; //@line 12739
     HEAP32[$773 >> 2] = $30; //@line 12740
     $774 = $ReallocAsyncCtx6 + 64 | 0; //@line 12741
     HEAP32[$774 >> 2] = $32; //@line 12742
     $775 = $ReallocAsyncCtx6 + 68 | 0; //@line 12743
     HEAP32[$775 >> 2] = $34; //@line 12744
     $776 = $ReallocAsyncCtx6 + 72 | 0; //@line 12745
     HEAP32[$776 >> 2] = $36; //@line 12746
     $777 = $ReallocAsyncCtx6 + 76 | 0; //@line 12747
     HEAP32[$777 >> 2] = $38; //@line 12748
     $778 = $ReallocAsyncCtx6 + 80 | 0; //@line 12749
     HEAP32[$778 >> 2] = $157; //@line 12750
     $779 = $ReallocAsyncCtx6 + 84 | 0; //@line 12751
     HEAP32[$779 >> 2] = $42; //@line 12752
     $780 = $ReallocAsyncCtx6 + 88 | 0; //@line 12753
     HEAP32[$780 >> 2] = $44; //@line 12754
     $781 = $ReallocAsyncCtx6 + 92 | 0; //@line 12755
     HEAP32[$781 >> 2] = $46; //@line 12756
     $782 = $ReallocAsyncCtx6 + 96 | 0; //@line 12757
     HEAP32[$782 >> 2] = $48; //@line 12758
     $783 = $ReallocAsyncCtx6 + 100 | 0; //@line 12759
     HEAP32[$783 >> 2] = $50; //@line 12760
     $784 = $ReallocAsyncCtx6 + 104 | 0; //@line 12761
     HEAP32[$784 >> 2] = $52; //@line 12762
     $785 = $ReallocAsyncCtx6 + 108 | 0; //@line 12763
     HEAP32[$785 >> 2] = $54; //@line 12764
     $786 = $ReallocAsyncCtx6 + 112 | 0; //@line 12765
     HEAP32[$786 >> 2] = $56; //@line 12766
     $787 = $ReallocAsyncCtx6 + 116 | 0; //@line 12767
     HEAP32[$787 >> 2] = $58; //@line 12768
     $788 = $ReallocAsyncCtx6 + 120 | 0; //@line 12769
     HEAP32[$788 >> 2] = $60; //@line 12770
     $789 = $ReallocAsyncCtx6 + 124 | 0; //@line 12771
     HEAP32[$789 >> 2] = $62; //@line 12772
     $790 = $ReallocAsyncCtx6 + 128 | 0; //@line 12773
     HEAP32[$790 >> 2] = $64; //@line 12774
     $791 = $ReallocAsyncCtx6 + 132 | 0; //@line 12775
     HEAP32[$791 >> 2] = $66; //@line 12776
     $792 = $ReallocAsyncCtx6 + 136 | 0; //@line 12777
     HEAP32[$792 >> 2] = $68; //@line 12778
     $793 = $ReallocAsyncCtx6 + 140 | 0; //@line 12779
     HEAP32[$793 >> 2] = $70; //@line 12780
     $794 = $ReallocAsyncCtx6 + 144 | 0; //@line 12781
     HEAP32[$794 >> 2] = $72; //@line 12782
     $795 = $ReallocAsyncCtx6 + 148 | 0; //@line 12783
     HEAP32[$795 >> 2] = $74; //@line 12784
     $796 = $ReallocAsyncCtx6 + 152 | 0; //@line 12785
     HEAP32[$796 >> 2] = $76; //@line 12786
     $797 = $ReallocAsyncCtx6 + 156 | 0; //@line 12787
     HEAP32[$797 >> 2] = $78; //@line 12788
     $798 = $ReallocAsyncCtx6 + 160 | 0; //@line 12789
     HEAP32[$798 >> 2] = $80; //@line 12790
     $799 = $ReallocAsyncCtx6 + 164 | 0; //@line 12791
     HEAP32[$799 >> 2] = $82; //@line 12792
     $800 = $ReallocAsyncCtx6 + 168 | 0; //@line 12793
     HEAP32[$800 >> 2] = $84; //@line 12794
     $801 = $ReallocAsyncCtx6 + 172 | 0; //@line 12795
     HEAP32[$801 >> 2] = $86; //@line 12796
     $802 = $ReallocAsyncCtx6 + 176 | 0; //@line 12797
     HEAP32[$802 >> 2] = $88; //@line 12798
     $803 = $ReallocAsyncCtx6 + 180 | 0; //@line 12799
     HEAP32[$803 >> 2] = $90; //@line 12800
     $804 = $ReallocAsyncCtx6 + 184 | 0; //@line 12801
     HEAP32[$804 >> 2] = $92; //@line 12802
     $805 = $ReallocAsyncCtx6 + 188 | 0; //@line 12803
     HEAP32[$805 >> 2] = $94; //@line 12804
     $806 = $ReallocAsyncCtx6 + 192 | 0; //@line 12805
     HEAP32[$806 >> 2] = $96; //@line 12806
     $807 = $ReallocAsyncCtx6 + 196 | 0; //@line 12807
     HEAP32[$807 >> 2] = $98; //@line 12808
     $808 = $ReallocAsyncCtx6 + 200 | 0; //@line 12809
     HEAP32[$808 >> 2] = $100; //@line 12810
     $809 = $ReallocAsyncCtx6 + 204 | 0; //@line 12811
     HEAP32[$809 >> 2] = $102; //@line 12812
     $810 = $ReallocAsyncCtx6 + 208 | 0; //@line 12813
     HEAP32[$810 >> 2] = $104; //@line 12814
     $811 = $ReallocAsyncCtx6 + 212 | 0; //@line 12815
     HEAP32[$811 >> 2] = $106; //@line 12816
     $812 = $ReallocAsyncCtx6 + 216 | 0; //@line 12817
     HEAP32[$812 >> 2] = $108; //@line 12818
     $813 = $ReallocAsyncCtx6 + 220 | 0; //@line 12819
     HEAP32[$813 >> 2] = $110; //@line 12820
     $814 = $ReallocAsyncCtx6 + 224 | 0; //@line 12821
     HEAP32[$814 >> 2] = $112; //@line 12822
     $815 = $ReallocAsyncCtx6 + 228 | 0; //@line 12823
     HEAP32[$815 >> 2] = $114; //@line 12824
     $816 = $ReallocAsyncCtx6 + 232 | 0; //@line 12825
     HEAP32[$816 >> 2] = $116; //@line 12826
     $817 = $ReallocAsyncCtx6 + 236 | 0; //@line 12827
     HEAP32[$817 >> 2] = $118; //@line 12828
     $818 = $ReallocAsyncCtx6 + 240 | 0; //@line 12829
     HEAP32[$818 >> 2] = $120; //@line 12830
     $819 = $ReallocAsyncCtx6 + 244 | 0; //@line 12831
     HEAP32[$819 >> 2] = $122; //@line 12832
     $820 = $ReallocAsyncCtx6 + 248 | 0; //@line 12833
     HEAP32[$820 >> 2] = $124; //@line 12834
     $821 = $ReallocAsyncCtx6 + 252 | 0; //@line 12835
     HEAP32[$821 >> 2] = $126; //@line 12836
     $822 = $ReallocAsyncCtx6 + 256 | 0; //@line 12837
     HEAP32[$822 >> 2] = $128; //@line 12838
     $823 = $ReallocAsyncCtx6 + 260 | 0; //@line 12839
     HEAP32[$823 >> 2] = $130; //@line 12840
     $824 = $ReallocAsyncCtx6 + 264 | 0; //@line 12841
     HEAP32[$824 >> 2] = $132; //@line 12842
     sp = STACKTOP; //@line 12843
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3737, 5086, $110); //@line 12848
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 12853
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 12858
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 12863
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 12868
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3737, 5389, $128); //@line 12873
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $18 | 0) >= ($10 | 0)) {
      $936 = ___async_retval; //@line 12882
      HEAP32[$936 >> 2] = $32; //@line 12883
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 12889
      HEAP32[$82 >> 2] = $926; //@line 12890
      $927 = $926; //@line 12891
      $929 = $18 - $927 + $10 | 0; //@line 12893
      HEAP16[$100 + 24 >> 1] = $929; //@line 12896
      if ($929 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $927; //@line 12901
       $936 = ___async_retval; //@line 12902
       HEAP32[$936 >> 2] = $32; //@line 12903
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 12907
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 12910
     $936 = ___async_retval; //@line 12911
     HEAP32[$936 >> 2] = $32; //@line 12912
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3737, 5022, $90); //@line 12918
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 12922
 $936 = ___async_retval; //@line 12923
 HEAP32[$936 >> 2] = $32; //@line 12924
 return;
}
function _sn_coap_parser__async_cb_80($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $369 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $439 = 0, $44 = 0, $442 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $594 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $603 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $845 = 0, $848 = 0, $852 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $864 = 0, $868 = 0, $871 = 0, $872 = 0, $877 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $890 = 0, $891 = 0, $896 = 0, $899 = 0, $90 = 0, $905 = 0, $906 = 0, $911 = 0, $912 = 0, $917 = 0, $92 = 0, $920 = 0, $924 = 0, $925 = 0, $933 = 0, $934 = 0, $936 = 0, $94 = 0, $943 = 0, $944 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $278$looptemp = 0, $603$looptemp = 0, $758$looptemp = 0, $845$looptemp = 0, $861$looptemp = 0, $877$looptemp = 0, $896$looptemp = 0, $917$looptemp = 0, $266$looptemp = 0;
 sp = STACKTOP; //@line 3304
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3306
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3308
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3310
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3312
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3314
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3316
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3318
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3320
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3322
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3324
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3326
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3328
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3330
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3332
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 3334
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 3336
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 3338
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 3340
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 3342
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 3344
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 3346
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 3348
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 3350
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 3352
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 3354
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 3356
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 3358
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 3360
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 3362
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 3364
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 3366
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 3368
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 3370
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 3372
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 3374
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 3376
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 3378
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 3380
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 3382
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 3384
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 3386
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 3388
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 3390
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 3392
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 3394
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 3396
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 3398
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 3400
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 3402
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 3404
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 3406
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 3408
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 3410
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 3412
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 3414
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 3416
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 3418
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 3420
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 3422
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 3424
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 3426
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 3428
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 3430
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 3432
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 3434
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 3436
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 3438
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 3440
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3442
 HEAP32[(HEAP32[$134 >> 2] | 0) + 44 >> 2] = $AsyncRetVal; //@line 3445
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3737, 4367, $120); //@line 3449
  } else {
   _memcpy($AsyncRetVal | 0, $110 | 0, $114 | 0) | 0; //@line 3451
   HEAP32[$82 >> 2] = $110 + $114; //@line 3453
   $$reg2mem$0 = $40; //@line 3454
   L5 : while (1) {
    $924 = HEAP32[$4 >> 2] | 0; //@line 3456
    $925 = $924 - $18 | 0; //@line 3457
    $141 = $924; //@line 3460
    if (($925 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $925 & 65535) << 16 >> 16)) {
     label = 108; //@line 3467
     break;
    }
    $trunc277$i = HEAP8[$141 >> 0] | 0; //@line 3470
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 108; //@line 3473
     break;
    }
    $144 = $trunc277$i & 15; //@line 3477
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 3478
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 3483
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$141 + 1 >> 0] | 0; //@line 3491
      $$sink214$i = 13; //@line 3491
      $$sink3$i = 1; //@line 3491
      label = 8; //@line 3492
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$141 + 1 >> 0] << 8) + 269 | 0; //@line 3504
      $$sink214$i = HEAPU8[$141 + 2 >> 0] | 0; //@line 3504
      $$sink3$i = 2; //@line 3504
      label = 8; //@line 3505
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 3509
      $163 = $141; //@line 3509
      $944 = $924; //@line 3509
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 3513
     $158 = $141 + $$sink3$i | 0; //@line 3515
     HEAP32[$82 >> 2] = $158; //@line 3516
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 3518
     $163 = $158; //@line 3518
     $944 = $158; //@line 3518
    }
    $161 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 3521
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 3525
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$163 + 1 >> 0] | 0; //@line 3533
      $$sink216$i = 13; //@line 3533
      $$sink8$i = 1; //@line 3533
      label = 13; //@line 3534
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$163 + 1 >> 0] << 8) + 269 | 0; //@line 3546
      $$sink216$i = HEAPU8[$163 + 2 >> 0] | 0; //@line 3546
      $$sink8$i = 2; //@line 3546
      label = 13; //@line 3547
      break;
     }
    default:
     {
      $$1202$in$i = $144; //@line 3551
      $178 = $944; //@line 3551
      $219 = $163; //@line 3551
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 3555
     $175 = $163 + $$sink8$i | 0; //@line 3557
     HEAP32[$82 >> 2] = $175; //@line 3558
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 3560
     $178 = $175; //@line 3560
     $219 = $175; //@line 3560
    }
    $$1202$i = $$1202$in$i & 65535; //@line 3562
    $179 = $104 - $178 & 65535; //@line 3564
    $trunc$i = $161 & 65535; //@line 3565
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 63; //@line 3569
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$134 >> 2] | 0)) {
        label = 16; //@line 3577
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 3582
         break L5;
         break;
        }
       case 4:
        {
         label = 40; //@line 3587
         break L5;
         break;
        }
       case 3:
        {
         label = 43; //@line 3592
         break L5;
         break;
        }
       case 8:
        {
         label = 49; //@line 3597
         break L5;
         break;
        }
       case 20:
        {
         label = 60; //@line 3602
         break L5;
         break;
        }
       case 11:
        {
         label = 63; //@line 3607
         break L5;
         break;
        }
       case 15:
        {
         label = 72; //@line 3612
         break L5;
         break;
        }
       case 12:
        {
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 3623
          break L5;
         }
         $272 = $219 + 1 | 0; //@line 3626
         HEAP32[$82 >> 2] = $272; //@line 3627
         $273 = $$1202$in$i & 255; //@line 3628
         if (!($273 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 3631
         } else {
          $$045$i221$i = $273; //@line 3633
          $$06$i220$i = 0; //@line 3633
          $278 = $272; //@line 3633
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 3635
           $278$looptemp = $278;
           $278 = $278 + 1 | 0; //@line 3637
           HEAP32[$82 >> 2] = $278; //@line 3638
           $281 = $$06$i220$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 3641
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $281; //@line 3644
            break;
           } else {
            $$06$i220$i = $281; //@line 3647
           }
          }
         }
         HEAP32[(HEAP32[$134 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 3653
         $$reg2mem$0 = $161; //@line 3654
         continue L5;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 56; //@line 3661
          break L5;
         }
         $594 = (HEAP32[$134 >> 2] | 0) + 28 | 0; //@line 3665
         if ((HEAP32[$594 >> 2] | 0) != -1) {
          label = 56; //@line 3669
          break L5;
         }
         $597 = $219 + 1 | 0; //@line 3672
         HEAP32[$82 >> 2] = $597; //@line 3673
         $598 = $$1202$in$i & 255; //@line 3674
         if (!($598 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 3677
         } else {
          $$045$i263$i = $598; //@line 3679
          $$06$i262$i = 0; //@line 3679
          $603 = $597; //@line 3679
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 3681
           $603$looptemp = $603;
           $603 = $603 + 1 | 0; //@line 3683
           HEAP32[$82 >> 2] = $603; //@line 3684
           $606 = $$06$i262$i << 8 | HEAPU8[$603$looptemp >> 0]; //@line 3687
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $606; //@line 3690
            break;
           } else {
            $$06$i262$i = $606; //@line 3693
           }
          }
         }
         HEAP32[$594 >> 2] = $$0$lcssa$i265$i; //@line 3697
         $$reg2mem$0 = $161; //@line 3698
         continue L5;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 68; //@line 3705
          break L5;
         }
         $749 = (HEAP32[$134 >> 2] | 0) + 32 | 0; //@line 3709
         if ((HEAP32[$749 >> 2] | 0) != -1) {
          label = 68; //@line 3713
          break L5;
         }
         $752 = $219 + 1 | 0; //@line 3716
         HEAP32[$82 >> 2] = $752; //@line 3717
         $753 = $$1202$in$i & 255; //@line 3718
         if (!($753 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 3721
         } else {
          $$045$i270$i = $753; //@line 3723
          $$06$i269$i = 0; //@line 3723
          $758 = $752; //@line 3723
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 3725
           $758$looptemp = $758;
           $758 = $758 + 1 | 0; //@line 3727
           HEAP32[$82 >> 2] = $758; //@line 3728
           $761 = $$06$i269$i << 8 | HEAPU8[$758$looptemp >> 0]; //@line 3731
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $761; //@line 3734
            break;
           } else {
            $$06$i269$i = $761; //@line 3737
           }
          }
         }
         HEAP32[$749 >> 2] = $$0$lcssa$i272$i; //@line 3741
         $$reg2mem$0 = $161; //@line 3742
         continue L5;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 77; //@line 3749
          break L5;
         }
         $836 = (HEAP32[$134 >> 2] | 0) + 40 | 0; //@line 3753
         if ((HEAP32[$836 >> 2] | 0) != -1) {
          label = 77; //@line 3757
          break L5;
         }
         $839 = $219 + 1 | 0; //@line 3760
         HEAP32[$82 >> 2] = $839; //@line 3761
         $840 = $$1202$in$i & 255; //@line 3762
         if (!($840 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 3765
         } else {
          $$045$i256$i = $840; //@line 3767
          $$06$i255$i = 0; //@line 3767
          $845 = $839; //@line 3767
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 3769
           $845$looptemp = $845;
           $845 = $845 + 1 | 0; //@line 3771
           HEAP32[$82 >> 2] = $845; //@line 3772
           $848 = $$06$i255$i << 8 | HEAPU8[$845$looptemp >> 0]; //@line 3775
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $848; //@line 3778
            break;
           } else {
            $$06$i255$i = $848; //@line 3781
           }
          }
         }
         HEAP32[$836 >> 2] = $$0$lcssa$i258$i; //@line 3785
         $$reg2mem$0 = $161; //@line 3786
         continue L5;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 83; //@line 3793
          break L5;
         }
         $852 = (HEAP32[$134 >> 2] | 0) + 36 | 0; //@line 3797
         if ((HEAP32[$852 >> 2] | 0) != -1) {
          label = 83; //@line 3801
          break L5;
         }
         $855 = $219 + 1 | 0; //@line 3804
         HEAP32[$82 >> 2] = $855; //@line 3805
         $856 = $$1202$in$i & 255; //@line 3806
         if (!($856 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 3809
         } else {
          $$045$i249$i = $856; //@line 3811
          $$06$i248$i = 0; //@line 3811
          $861 = $855; //@line 3811
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 3813
           $861$looptemp = $861;
           $861 = $861 + 1 | 0; //@line 3815
           HEAP32[$82 >> 2] = $861; //@line 3816
           $864 = $$06$i248$i << 8 | HEAPU8[$861$looptemp >> 0]; //@line 3819
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $864; //@line 3822
            break;
           } else {
            $$06$i248$i = $864; //@line 3825
           }
          }
         }
         HEAP32[$852 >> 2] = $$0$lcssa$i251$i; //@line 3829
         $$reg2mem$0 = $161; //@line 3830
         continue L5;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 89; //@line 3837
          break L5;
         }
         $868 = (HEAP32[$134 >> 2] | 0) + 12 | 0; //@line 3841
         if ((HEAP32[$868 >> 2] | 0) != -1) {
          label = 89; //@line 3845
          break L5;
         }
         $871 = $219 + 1 | 0; //@line 3848
         HEAP32[$82 >> 2] = $871; //@line 3849
         $872 = $$1202$in$i & 255; //@line 3850
         if (!($872 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 3853
         } else {
          $$045$i242$i = $872; //@line 3855
          $$06$i241$i = 0; //@line 3855
          $877 = $871; //@line 3855
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 3857
           $877$looptemp = $877;
           $877 = $877 + 1 | 0; //@line 3859
           HEAP32[$82 >> 2] = $877; //@line 3860
           $880 = $$06$i241$i << 8 | HEAPU8[$877$looptemp >> 0]; //@line 3863
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $880; //@line 3866
            break;
           } else {
            $$06$i241$i = $880; //@line 3869
           }
          }
         }
         HEAP32[$868 >> 2] = $$0$lcssa$i244$i; //@line 3873
         $$reg2mem$0 = $161; //@line 3874
         continue L5;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 95; //@line 3881
          break L5;
         }
         $884 = (HEAP32[$134 >> 2] | 0) + 1 | 0; //@line 3885
         $885 = HEAP8[$884 >> 0] | 0; //@line 3886
         if ($885 & 1) {
          label = 95; //@line 3890
          break L5;
         }
         HEAP8[$884 >> 0] = $885 | 1; //@line 3894
         $890 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 3896
         HEAP32[$82 >> 2] = $890; //@line 3897
         $891 = $$1202$in$i & 255; //@line 3898
         if (!($891 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 3901
         } else {
          $$045$i235$i = $891; //@line 3903
          $$06$i234$i = 0; //@line 3903
          $896 = $890; //@line 3903
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 3905
           $896$looptemp = $896;
           $896 = $896 + 1 | 0; //@line 3907
           HEAP32[$82 >> 2] = $896; //@line 3908
           $899 = $$06$i234$i << 8 | HEAPU8[$896$looptemp >> 0]; //@line 3911
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $899; //@line 3914
            break;
           } else {
            $$06$i234$i = $899; //@line 3917
           }
          }
         }
         HEAP32[(HEAP32[$134 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 3923
         $$reg2mem$0 = $161; //@line 3924
         continue L5;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 101; //@line 3931
          break L5;
         }
         $905 = (HEAP32[$134 >> 2] | 0) + 1 | 0; //@line 3935
         $906 = HEAP8[$905 >> 0] | 0; //@line 3936
         if ($906 & 2) {
          label = 101; //@line 3940
          break L5;
         }
         HEAP8[$905 >> 0] = $906 | 2; //@line 3944
         $911 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 3946
         HEAP32[$82 >> 2] = $911; //@line 3947
         $912 = $$1202$in$i & 255; //@line 3948
         if (!($912 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 3951
         } else {
          $$045$i228$i = $912; //@line 3953
          $$06$i227$i = 0; //@line 3953
          $917 = $911; //@line 3953
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 3955
           $917$looptemp = $917;
           $917 = $917 + 1 | 0; //@line 3957
           HEAP32[$82 >> 2] = $917; //@line 3958
           $920 = $$06$i227$i << 8 | HEAPU8[$917$looptemp >> 0]; //@line 3961
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $920; //@line 3964
            break;
           } else {
            $$06$i227$i = $920; //@line 3967
           }
          }
         }
         HEAP32[(HEAP32[$134 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 3973
         $$reg2mem$0 = $161; //@line 3974
         continue L5;
         break;
        }
       default:
        {
         label = 105; //@line 3979
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 105; //@line 3989
       break L5;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 3996
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 4002
     break;
    }
    $260 = $219 + 1 | 0; //@line 4005
    HEAP32[$82 >> 2] = $260; //@line 4006
    $261 = $$1202$in$i & 255; //@line 4007
    if (!($261 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 4010
    } else {
     $$045$i$i = $261; //@line 4012
     $$06$i$i = 0; //@line 4012
     $266 = $260; //@line 4012
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 4014
      $266$looptemp = $266;
      $266 = $266 + 1 | 0; //@line 4016
      HEAP32[$82 >> 2] = $266; //@line 4017
      $269 = $$06$i$i << 8 | HEAPU8[$266$looptemp >> 0]; //@line 4020
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $269; //@line 4023
       break;
      } else {
       $$06$i$i = $269; //@line 4026
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 4030
    $$reg2mem$0 = $161; //@line 4031
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 4035
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 4040
     break L2;
     break;
    }
   case 16:
    {
     $182 = HEAP32[$124 >> 2] | 0; //@line 4045
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 4046
     $183 = FUNCTION_TABLE_ii[$182 & 15](68) | 0; //@line 4047
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 4050
      $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 4051
      HEAP16[$184 >> 1] = $179; //@line 4052
      $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 4053
      HEAP32[$185 >> 2] = $2; //@line 4054
      $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 4055
      HEAP32[$186 >> 2] = $4; //@line 4056
      $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 4057
      HEAP32[$187 >> 2] = $6; //@line 4058
      $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 4059
      HEAP32[$188 >> 2] = $128; //@line 4060
      $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 4061
      HEAP32[$189 >> 2] = $8; //@line 4062
      $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 4063
      HEAP32[$190 >> 2] = $10; //@line 4064
      $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 4065
      HEAP32[$191 >> 2] = $12; //@line 4066
      $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 4067
      HEAP32[$192 >> 2] = $14; //@line 4068
      $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 4069
      HEAP32[$193 >> 2] = $16; //@line 4070
      $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 4071
      HEAP32[$194 >> 2] = $18; //@line 4072
      $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 4073
      HEAP32[$195 >> 2] = $20; //@line 4074
      $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 4075
      HEAP32[$196 >> 2] = $22; //@line 4076
      $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 4077
      HEAP32[$197 >> 2] = $24; //@line 4078
      $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 4079
      HEAP32[$198 >> 2] = $26; //@line 4080
      $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 4081
      HEAP16[$199 >> 1] = $$1202$i; //@line 4082
      $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 4083
      HEAP32[$200 >> 2] = $28; //@line 4084
      $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 4085
      HEAP32[$201 >> 2] = $30; //@line 4086
      $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 4087
      HEAP32[$202 >> 2] = $32; //@line 4088
      $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 4089
      HEAP32[$203 >> 2] = $34; //@line 4090
      $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 4091
      HEAP32[$204 >> 2] = $161; //@line 4092
      $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 4093
      HEAP32[$205 >> 2] = $38; //@line 4094
      $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 4095
      HEAP32[$206 >> 2] = $$1202$in$i; //@line 4096
      $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 4097
      HEAP32[$207 >> 2] = $42; //@line 4098
      $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 4099
      HEAP32[$208 >> 2] = $36; //@line 4100
      $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 4101
      HEAP32[$209 >> 2] = $44; //@line 4102
      $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 4103
      HEAP32[$210 >> 2] = $46; //@line 4104
      $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 4105
      HEAP32[$211 >> 2] = $48; //@line 4106
      $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 4107
      HEAP32[$212 >> 2] = $50; //@line 4108
      $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 4109
      HEAP32[$213 >> 2] = $52; //@line 4110
      $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 4111
      HEAP32[$214 >> 2] = $54; //@line 4112
      $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 4113
      HEAP32[$215 >> 2] = $56; //@line 4114
      $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 4115
      HEAP32[$216 >> 2] = $58; //@line 4116
      $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 4117
      HEAP32[$217 >> 2] = $60; //@line 4118
      $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 4119
      HEAP32[$218 >> 2] = $219; //@line 4120
      $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 4121
      HEAP32[$220 >> 2] = $62; //@line 4122
      $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 4123
      HEAP32[$221 >> 2] = $64; //@line 4124
      $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 4125
      HEAP32[$222 >> 2] = $66; //@line 4126
      $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 4127
      HEAP32[$223 >> 2] = $68; //@line 4128
      $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 4129
      HEAP32[$224 >> 2] = $70; //@line 4130
      $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 4131
      HEAP32[$225 >> 2] = $72; //@line 4132
      $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 4133
      HEAP32[$226 >> 2] = $74; //@line 4134
      $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 4135
      HEAP32[$227 >> 2] = $76; //@line 4136
      $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 4137
      HEAP32[$228 >> 2] = $78; //@line 4138
      $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 4139
      HEAP32[$229 >> 2] = $80; //@line 4140
      $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 4141
      HEAP32[$230 >> 2] = $82; //@line 4142
      $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 4143
      HEAP32[$231 >> 2] = $84; //@line 4144
      $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 4145
      HEAP32[$232 >> 2] = $86; //@line 4146
      $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 4147
      HEAP32[$233 >> 2] = $88; //@line 4148
      $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 4149
      HEAP32[$234 >> 2] = $90; //@line 4150
      $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 4151
      HEAP32[$235 >> 2] = $92; //@line 4152
      $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 4153
      HEAP32[$236 >> 2] = $94; //@line 4154
      $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 4155
      HEAP32[$237 >> 2] = $96; //@line 4156
      $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 4157
      HEAP32[$238 >> 2] = $98; //@line 4158
      $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 4159
      HEAP32[$239 >> 2] = $100; //@line 4160
      $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 4161
      HEAP32[$240 >> 2] = $102; //@line 4162
      $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 4163
      HEAP32[$241 >> 2] = $104; //@line 4164
      $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 4165
      HEAP32[$242 >> 2] = $106; //@line 4166
      $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 4167
      HEAP16[$243 >> 1] = $trunc$i; //@line 4168
      $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 4169
      HEAP32[$244 >> 2] = $108; //@line 4170
      $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 4171
      HEAP32[$245 >> 2] = $112; //@line 4172
      $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 4173
      HEAP32[$246 >> 2] = $116; //@line 4174
      $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 4175
      HEAP32[$247 >> 2] = $118; //@line 4176
      $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 4177
      HEAP32[$248 >> 2] = $120; //@line 4178
      $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 4179
      HEAP32[$249 >> 2] = $122; //@line 4180
      $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 4181
      HEAP32[$250 >> 2] = $124; //@line 4182
      $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 4183
      HEAP32[$251 >> 2] = $126; //@line 4184
      $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 4185
      HEAP32[$252 >> 2] = $130; //@line 4186
      $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 4187
      HEAP32[$253 >> 2] = $132; //@line 4188
      $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 4189
      HEAP32[$254 >> 2] = $134; //@line 4190
      $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 4191
      HEAP32[$255 >> 2] = $136; //@line 4192
      sp = STACKTOP; //@line 4193
      return;
     }
     HEAP32[___async_retval >> 2] = $183; //@line 4197
     ___async_unwind = 0; //@line 4198
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 4199
     $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 4200
     HEAP16[$184 >> 1] = $179; //@line 4201
     $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 4202
     HEAP32[$185 >> 2] = $2; //@line 4203
     $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 4204
     HEAP32[$186 >> 2] = $4; //@line 4205
     $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 4206
     HEAP32[$187 >> 2] = $6; //@line 4207
     $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 4208
     HEAP32[$188 >> 2] = $128; //@line 4209
     $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 4210
     HEAP32[$189 >> 2] = $8; //@line 4211
     $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 4212
     HEAP32[$190 >> 2] = $10; //@line 4213
     $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 4214
     HEAP32[$191 >> 2] = $12; //@line 4215
     $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 4216
     HEAP32[$192 >> 2] = $14; //@line 4217
     $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 4218
     HEAP32[$193 >> 2] = $16; //@line 4219
     $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 4220
     HEAP32[$194 >> 2] = $18; //@line 4221
     $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 4222
     HEAP32[$195 >> 2] = $20; //@line 4223
     $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 4224
     HEAP32[$196 >> 2] = $22; //@line 4225
     $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 4226
     HEAP32[$197 >> 2] = $24; //@line 4227
     $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 4228
     HEAP32[$198 >> 2] = $26; //@line 4229
     $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 4230
     HEAP16[$199 >> 1] = $$1202$i; //@line 4231
     $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 4232
     HEAP32[$200 >> 2] = $28; //@line 4233
     $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 4234
     HEAP32[$201 >> 2] = $30; //@line 4235
     $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 4236
     HEAP32[$202 >> 2] = $32; //@line 4237
     $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 4238
     HEAP32[$203 >> 2] = $34; //@line 4239
     $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 4240
     HEAP32[$204 >> 2] = $161; //@line 4241
     $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 4242
     HEAP32[$205 >> 2] = $38; //@line 4243
     $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 4244
     HEAP32[$206 >> 2] = $$1202$in$i; //@line 4245
     $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 4246
     HEAP32[$207 >> 2] = $42; //@line 4247
     $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 4248
     HEAP32[$208 >> 2] = $36; //@line 4249
     $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 4250
     HEAP32[$209 >> 2] = $44; //@line 4251
     $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 4252
     HEAP32[$210 >> 2] = $46; //@line 4253
     $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 4254
     HEAP32[$211 >> 2] = $48; //@line 4255
     $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 4256
     HEAP32[$212 >> 2] = $50; //@line 4257
     $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 4258
     HEAP32[$213 >> 2] = $52; //@line 4259
     $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 4260
     HEAP32[$214 >> 2] = $54; //@line 4261
     $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 4262
     HEAP32[$215 >> 2] = $56; //@line 4263
     $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 4264
     HEAP32[$216 >> 2] = $58; //@line 4265
     $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 4266
     HEAP32[$217 >> 2] = $60; //@line 4267
     $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 4268
     HEAP32[$218 >> 2] = $219; //@line 4269
     $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 4270
     HEAP32[$220 >> 2] = $62; //@line 4271
     $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 4272
     HEAP32[$221 >> 2] = $64; //@line 4273
     $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 4274
     HEAP32[$222 >> 2] = $66; //@line 4275
     $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 4276
     HEAP32[$223 >> 2] = $68; //@line 4277
     $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 4278
     HEAP32[$224 >> 2] = $70; //@line 4279
     $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 4280
     HEAP32[$225 >> 2] = $72; //@line 4281
     $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 4282
     HEAP32[$226 >> 2] = $74; //@line 4283
     $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 4284
     HEAP32[$227 >> 2] = $76; //@line 4285
     $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 4286
     HEAP32[$228 >> 2] = $78; //@line 4287
     $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 4288
     HEAP32[$229 >> 2] = $80; //@line 4289
     $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 4290
     HEAP32[$230 >> 2] = $82; //@line 4291
     $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 4292
     HEAP32[$231 >> 2] = $84; //@line 4293
     $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 4294
     HEAP32[$232 >> 2] = $86; //@line 4295
     $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 4296
     HEAP32[$233 >> 2] = $88; //@line 4297
     $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 4298
     HEAP32[$234 >> 2] = $90; //@line 4299
     $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 4300
     HEAP32[$235 >> 2] = $92; //@line 4301
     $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 4302
     HEAP32[$236 >> 2] = $94; //@line 4303
     $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 4304
     HEAP32[$237 >> 2] = $96; //@line 4305
     $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 4306
     HEAP32[$238 >> 2] = $98; //@line 4307
     $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 4308
     HEAP32[$239 >> 2] = $100; //@line 4309
     $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 4310
     HEAP32[$240 >> 2] = $102; //@line 4311
     $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 4312
     HEAP32[$241 >> 2] = $104; //@line 4313
     $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 4314
     HEAP32[$242 >> 2] = $106; //@line 4315
     $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 4316
     HEAP16[$243 >> 1] = $trunc$i; //@line 4317
     $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 4318
     HEAP32[$244 >> 2] = $108; //@line 4319
     $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 4320
     HEAP32[$245 >> 2] = $112; //@line 4321
     $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 4322
     HEAP32[$246 >> 2] = $116; //@line 4323
     $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 4324
     HEAP32[$247 >> 2] = $118; //@line 4325
     $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 4326
     HEAP32[$248 >> 2] = $120; //@line 4327
     $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 4328
     HEAP32[$249 >> 2] = $122; //@line 4329
     $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 4330
     HEAP32[$250 >> 2] = $124; //@line 4331
     $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 4332
     HEAP32[$251 >> 2] = $126; //@line 4333
     $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 4334
     HEAP32[$252 >> 2] = $130; //@line 4335
     $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 4336
     HEAP32[$253 >> 2] = $132; //@line 4337
     $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 4338
     HEAP32[$254 >> 2] = $134; //@line 4339
     $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 4340
     HEAP32[$255 >> 2] = $136; //@line 4341
     sp = STACKTOP; //@line 4342
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $122); //@line 4347
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 4352
     break L2;
     break;
    }
   case 31:
    {
     $285 = $$1202$in$i & 65535; //@line 4357
     if (($$1202$i + -1 & 65535) <= 1033) {
      $288 = HEAP32[$134 >> 2] | 0; //@line 4361
      if (!(HEAP32[$288 + 44 >> 2] | 0)) {
       HEAP16[$288 + 2 >> 1] = $$1202$i; //@line 4367
       $293 = $219 + 1 | 0; //@line 4368
       HEAP32[$82 >> 2] = $293; //@line 4369
       $294 = HEAP32[$124 >> 2] | 0; //@line 4370
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 4371
       $295 = FUNCTION_TABLE_ii[$294 & 15]($$1202$i) | 0; //@line 4372
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 4375
        $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 4376
        HEAP32[$296 >> 2] = $2; //@line 4377
        $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 4378
        HEAP32[$297 >> 2] = $4; //@line 4379
        $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 4380
        HEAP32[$298 >> 2] = $6; //@line 4381
        $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 4382
        HEAP32[$299 >> 2] = $8; //@line 4383
        $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 4384
        HEAP32[$300 >> 2] = $10; //@line 4385
        $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 4386
        HEAP32[$301 >> 2] = $12; //@line 4387
        $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 4388
        HEAP32[$302 >> 2] = $14; //@line 4389
        $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 4390
        HEAP32[$303 >> 2] = $16; //@line 4391
        $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 4392
        HEAP32[$304 >> 2] = $18; //@line 4393
        $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 4394
        HEAP32[$305 >> 2] = $20; //@line 4395
        $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 4396
        HEAP32[$306 >> 2] = $22; //@line 4397
        $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 4398
        HEAP32[$307 >> 2] = $24; //@line 4399
        $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 4400
        HEAP32[$308 >> 2] = $26; //@line 4401
        $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 4402
        HEAP32[$309 >> 2] = $28; //@line 4403
        $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 4404
        HEAP32[$310 >> 2] = $30; //@line 4405
        $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 4406
        HEAP32[$311 >> 2] = $32; //@line 4407
        $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 4408
        HEAP32[$312 >> 2] = $34; //@line 4409
        $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 4410
        HEAP32[$313 >> 2] = $36; //@line 4411
        $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 4412
        HEAP32[$314 >> 2] = $38; //@line 4413
        $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 4414
        HEAP32[$315 >> 2] = $161; //@line 4415
        $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 4416
        HEAP32[$316 >> 2] = $42; //@line 4417
        $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 4418
        HEAP32[$317 >> 2] = $44; //@line 4419
        $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 4420
        HEAP32[$318 >> 2] = $46; //@line 4421
        $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 4422
        HEAP32[$319 >> 2] = $48; //@line 4423
        $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 4424
        HEAP32[$320 >> 2] = $50; //@line 4425
        $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 4426
        HEAP32[$321 >> 2] = $52; //@line 4427
        $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 4428
        HEAP32[$322 >> 2] = $54; //@line 4429
        $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 4430
        HEAP32[$323 >> 2] = $56; //@line 4431
        $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 4432
        HEAP32[$324 >> 2] = $58; //@line 4433
        $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 4434
        HEAP32[$325 >> 2] = $60; //@line 4435
        $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 4436
        HEAP32[$326 >> 2] = $62; //@line 4437
        $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 4438
        HEAP32[$327 >> 2] = $64; //@line 4439
        $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 4440
        HEAP32[$328 >> 2] = $66; //@line 4441
        $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 4442
        HEAP32[$329 >> 2] = $68; //@line 4443
        $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 4444
        HEAP32[$330 >> 2] = $70; //@line 4445
        $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 4446
        HEAP32[$331 >> 2] = $72; //@line 4447
        $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 4448
        HEAP32[$332 >> 2] = $74; //@line 4449
        $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 4450
        HEAP32[$333 >> 2] = $76; //@line 4451
        $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 4452
        HEAP32[$334 >> 2] = $78; //@line 4453
        $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 4454
        HEAP32[$335 >> 2] = $80; //@line 4455
        $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 4456
        HEAP32[$336 >> 2] = $82; //@line 4457
        $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 4458
        HEAP32[$337 >> 2] = $84; //@line 4459
        $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 4460
        HEAP32[$338 >> 2] = $86; //@line 4461
        $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 4462
        HEAP32[$339 >> 2] = $88; //@line 4463
        $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 4464
        HEAP32[$340 >> 2] = $90; //@line 4465
        $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 4466
        HEAP32[$341 >> 2] = $92; //@line 4467
        $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 4468
        HEAP32[$342 >> 2] = $94; //@line 4469
        $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 4470
        HEAP32[$343 >> 2] = $96; //@line 4471
        $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 4472
        HEAP32[$344 >> 2] = $98; //@line 4473
        $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 4474
        HEAP32[$345 >> 2] = $100; //@line 4475
        $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 4476
        HEAP32[$346 >> 2] = $102; //@line 4477
        $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 4478
        HEAP32[$347 >> 2] = $104; //@line 4479
        $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 4480
        HEAP32[$348 >> 2] = $106; //@line 4481
        $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 4482
        HEAP32[$349 >> 2] = $108; //@line 4483
        $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 4484
        HEAP32[$350 >> 2] = $293; //@line 4485
        $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 4486
        HEAP32[$351 >> 2] = $112; //@line 4487
        $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 4488
        HEAP32[$352 >> 2] = $285; //@line 4489
        $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 4490
        HEAP32[$353 >> 2] = $116; //@line 4491
        $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 4492
        HEAP32[$354 >> 2] = $118; //@line 4493
        $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 4494
        HEAP32[$355 >> 2] = $120; //@line 4495
        $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 4496
        HEAP32[$356 >> 2] = $122; //@line 4497
        $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 4498
        HEAP32[$357 >> 2] = $124; //@line 4499
        $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 4500
        HEAP32[$358 >> 2] = $126; //@line 4501
        $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 4502
        HEAP32[$359 >> 2] = $128; //@line 4503
        $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 4504
        HEAP32[$360 >> 2] = $130; //@line 4505
        $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 4506
        HEAP32[$361 >> 2] = $132; //@line 4507
        $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 4508
        HEAP32[$362 >> 2] = $134; //@line 4509
        $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 4510
        HEAP32[$363 >> 2] = $136; //@line 4511
        sp = STACKTOP; //@line 4512
        return;
       }
       HEAP32[___async_retval >> 2] = $295; //@line 4516
       ___async_unwind = 0; //@line 4517
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 4518
       $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 4519
       HEAP32[$296 >> 2] = $2; //@line 4520
       $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 4521
       HEAP32[$297 >> 2] = $4; //@line 4522
       $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 4523
       HEAP32[$298 >> 2] = $6; //@line 4524
       $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 4525
       HEAP32[$299 >> 2] = $8; //@line 4526
       $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 4527
       HEAP32[$300 >> 2] = $10; //@line 4528
       $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 4529
       HEAP32[$301 >> 2] = $12; //@line 4530
       $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 4531
       HEAP32[$302 >> 2] = $14; //@line 4532
       $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 4533
       HEAP32[$303 >> 2] = $16; //@line 4534
       $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 4535
       HEAP32[$304 >> 2] = $18; //@line 4536
       $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 4537
       HEAP32[$305 >> 2] = $20; //@line 4538
       $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 4539
       HEAP32[$306 >> 2] = $22; //@line 4540
       $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 4541
       HEAP32[$307 >> 2] = $24; //@line 4542
       $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 4543
       HEAP32[$308 >> 2] = $26; //@line 4544
       $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 4545
       HEAP32[$309 >> 2] = $28; //@line 4546
       $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 4547
       HEAP32[$310 >> 2] = $30; //@line 4548
       $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 4549
       HEAP32[$311 >> 2] = $32; //@line 4550
       $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 4551
       HEAP32[$312 >> 2] = $34; //@line 4552
       $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 4553
       HEAP32[$313 >> 2] = $36; //@line 4554
       $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 4555
       HEAP32[$314 >> 2] = $38; //@line 4556
       $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 4557
       HEAP32[$315 >> 2] = $161; //@line 4558
       $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 4559
       HEAP32[$316 >> 2] = $42; //@line 4560
       $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 4561
       HEAP32[$317 >> 2] = $44; //@line 4562
       $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 4563
       HEAP32[$318 >> 2] = $46; //@line 4564
       $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 4565
       HEAP32[$319 >> 2] = $48; //@line 4566
       $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 4567
       HEAP32[$320 >> 2] = $50; //@line 4568
       $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 4569
       HEAP32[$321 >> 2] = $52; //@line 4570
       $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 4571
       HEAP32[$322 >> 2] = $54; //@line 4572
       $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 4573
       HEAP32[$323 >> 2] = $56; //@line 4574
       $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 4575
       HEAP32[$324 >> 2] = $58; //@line 4576
       $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 4577
       HEAP32[$325 >> 2] = $60; //@line 4578
       $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 4579
       HEAP32[$326 >> 2] = $62; //@line 4580
       $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 4581
       HEAP32[$327 >> 2] = $64; //@line 4582
       $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 4583
       HEAP32[$328 >> 2] = $66; //@line 4584
       $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 4585
       HEAP32[$329 >> 2] = $68; //@line 4586
       $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 4587
       HEAP32[$330 >> 2] = $70; //@line 4588
       $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 4589
       HEAP32[$331 >> 2] = $72; //@line 4590
       $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 4591
       HEAP32[$332 >> 2] = $74; //@line 4592
       $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 4593
       HEAP32[$333 >> 2] = $76; //@line 4594
       $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 4595
       HEAP32[$334 >> 2] = $78; //@line 4596
       $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 4597
       HEAP32[$335 >> 2] = $80; //@line 4598
       $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 4599
       HEAP32[$336 >> 2] = $82; //@line 4600
       $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 4601
       HEAP32[$337 >> 2] = $84; //@line 4602
       $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 4603
       HEAP32[$338 >> 2] = $86; //@line 4604
       $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 4605
       HEAP32[$339 >> 2] = $88; //@line 4606
       $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 4607
       HEAP32[$340 >> 2] = $90; //@line 4608
       $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 4609
       HEAP32[$341 >> 2] = $92; //@line 4610
       $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 4611
       HEAP32[$342 >> 2] = $94; //@line 4612
       $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 4613
       HEAP32[$343 >> 2] = $96; //@line 4614
       $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 4615
       HEAP32[$344 >> 2] = $98; //@line 4616
       $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 4617
       HEAP32[$345 >> 2] = $100; //@line 4618
       $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 4619
       HEAP32[$346 >> 2] = $102; //@line 4620
       $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 4621
       HEAP32[$347 >> 2] = $104; //@line 4622
       $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 4623
       HEAP32[$348 >> 2] = $106; //@line 4624
       $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 4625
       HEAP32[$349 >> 2] = $108; //@line 4626
       $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 4627
       HEAP32[$350 >> 2] = $293; //@line 4628
       $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 4629
       HEAP32[$351 >> 2] = $112; //@line 4630
       $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 4631
       HEAP32[$352 >> 2] = $285; //@line 4632
       $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 4633
       HEAP32[$353 >> 2] = $116; //@line 4634
       $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 4635
       HEAP32[$354 >> 2] = $118; //@line 4636
       $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 4637
       HEAP32[$355 >> 2] = $120; //@line 4638
       $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 4639
       HEAP32[$356 >> 2] = $122; //@line 4640
       $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 4641
       HEAP32[$357 >> 2] = $124; //@line 4642
       $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 4643
       HEAP32[$358 >> 2] = $126; //@line 4644
       $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 4645
       HEAP32[$359 >> 2] = $128; //@line 4646
       $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 4647
       HEAP32[$360 >> 2] = $130; //@line 4648
       $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 4649
       HEAP32[$361 >> 2] = $132; //@line 4650
       $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 4651
       HEAP32[$362 >> 2] = $134; //@line 4652
       $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 4653
       HEAP32[$363 >> 2] = $136; //@line 4654
       sp = STACKTOP; //@line 4655
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 4659
     break L2;
     break;
    }
   case 40:
    {
     $369 = HEAP32[$134 >> 2] | 0; //@line 4664
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 4666
     $371 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $369 + 48 | 0, $369, 4, $$1202$i) | 0; //@line 4667
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 4670
      $372 = $ReallocAsyncCtx10 + 4 | 0; //@line 4671
      HEAP32[$372 >> 2] = $2; //@line 4672
      $373 = $ReallocAsyncCtx10 + 8 | 0; //@line 4673
      HEAP32[$373 >> 2] = $4; //@line 4674
      $374 = $ReallocAsyncCtx10 + 12 | 0; //@line 4675
      HEAP32[$374 >> 2] = $6; //@line 4676
      $375 = $ReallocAsyncCtx10 + 16 | 0; //@line 4677
      HEAP32[$375 >> 2] = $8; //@line 4678
      $376 = $ReallocAsyncCtx10 + 20 | 0; //@line 4679
      HEAP32[$376 >> 2] = $10; //@line 4680
      $377 = $ReallocAsyncCtx10 + 24 | 0; //@line 4681
      HEAP32[$377 >> 2] = $12; //@line 4682
      $378 = $ReallocAsyncCtx10 + 28 | 0; //@line 4683
      HEAP32[$378 >> 2] = $14; //@line 4684
      $379 = $ReallocAsyncCtx10 + 32 | 0; //@line 4685
      HEAP32[$379 >> 2] = $16; //@line 4686
      $380 = $ReallocAsyncCtx10 + 36 | 0; //@line 4687
      HEAP32[$380 >> 2] = $18; //@line 4688
      $381 = $ReallocAsyncCtx10 + 40 | 0; //@line 4689
      HEAP32[$381 >> 2] = $20; //@line 4690
      $382 = $ReallocAsyncCtx10 + 44 | 0; //@line 4691
      HEAP32[$382 >> 2] = $22; //@line 4692
      $383 = $ReallocAsyncCtx10 + 48 | 0; //@line 4693
      HEAP32[$383 >> 2] = $24; //@line 4694
      $384 = $ReallocAsyncCtx10 + 52 | 0; //@line 4695
      HEAP32[$384 >> 2] = $26; //@line 4696
      $385 = $ReallocAsyncCtx10 + 56 | 0; //@line 4697
      HEAP32[$385 >> 2] = $28; //@line 4698
      $386 = $ReallocAsyncCtx10 + 60 | 0; //@line 4699
      HEAP32[$386 >> 2] = $30; //@line 4700
      $387 = $ReallocAsyncCtx10 + 64 | 0; //@line 4701
      HEAP32[$387 >> 2] = $32; //@line 4702
      $388 = $ReallocAsyncCtx10 + 68 | 0; //@line 4703
      HEAP32[$388 >> 2] = $34; //@line 4704
      $389 = $ReallocAsyncCtx10 + 72 | 0; //@line 4705
      HEAP32[$389 >> 2] = $36; //@line 4706
      $390 = $ReallocAsyncCtx10 + 76 | 0; //@line 4707
      HEAP32[$390 >> 2] = $38; //@line 4708
      $391 = $ReallocAsyncCtx10 + 80 | 0; //@line 4709
      HEAP32[$391 >> 2] = $161; //@line 4710
      $392 = $ReallocAsyncCtx10 + 84 | 0; //@line 4711
      HEAP32[$392 >> 2] = $42; //@line 4712
      $393 = $ReallocAsyncCtx10 + 88 | 0; //@line 4713
      HEAP32[$393 >> 2] = $44; //@line 4714
      $394 = $ReallocAsyncCtx10 + 92 | 0; //@line 4715
      HEAP32[$394 >> 2] = $46; //@line 4716
      $395 = $ReallocAsyncCtx10 + 96 | 0; //@line 4717
      HEAP32[$395 >> 2] = $48; //@line 4718
      $396 = $ReallocAsyncCtx10 + 100 | 0; //@line 4719
      HEAP32[$396 >> 2] = $50; //@line 4720
      $397 = $ReallocAsyncCtx10 + 104 | 0; //@line 4721
      HEAP32[$397 >> 2] = $52; //@line 4722
      $398 = $ReallocAsyncCtx10 + 108 | 0; //@line 4723
      HEAP32[$398 >> 2] = $54; //@line 4724
      $399 = $ReallocAsyncCtx10 + 112 | 0; //@line 4725
      HEAP32[$399 >> 2] = $56; //@line 4726
      $400 = $ReallocAsyncCtx10 + 116 | 0; //@line 4727
      HEAP32[$400 >> 2] = $58; //@line 4728
      $401 = $ReallocAsyncCtx10 + 120 | 0; //@line 4729
      HEAP32[$401 >> 2] = $60; //@line 4730
      $402 = $ReallocAsyncCtx10 + 124 | 0; //@line 4731
      HEAP32[$402 >> 2] = $62; //@line 4732
      $403 = $ReallocAsyncCtx10 + 128 | 0; //@line 4733
      HEAP32[$403 >> 2] = $64; //@line 4734
      $404 = $ReallocAsyncCtx10 + 132 | 0; //@line 4735
      HEAP32[$404 >> 2] = $66; //@line 4736
      $405 = $ReallocAsyncCtx10 + 136 | 0; //@line 4737
      HEAP32[$405 >> 2] = $68; //@line 4738
      $406 = $ReallocAsyncCtx10 + 140 | 0; //@line 4739
      HEAP32[$406 >> 2] = $70; //@line 4740
      $407 = $ReallocAsyncCtx10 + 144 | 0; //@line 4741
      HEAP32[$407 >> 2] = $72; //@line 4742
      $408 = $ReallocAsyncCtx10 + 148 | 0; //@line 4743
      HEAP32[$408 >> 2] = $74; //@line 4744
      $409 = $ReallocAsyncCtx10 + 152 | 0; //@line 4745
      HEAP32[$409 >> 2] = $76; //@line 4746
      $410 = $ReallocAsyncCtx10 + 156 | 0; //@line 4747
      HEAP32[$410 >> 2] = $78; //@line 4748
      $411 = $ReallocAsyncCtx10 + 160 | 0; //@line 4749
      HEAP32[$411 >> 2] = $80; //@line 4750
      $412 = $ReallocAsyncCtx10 + 164 | 0; //@line 4751
      HEAP32[$412 >> 2] = $82; //@line 4752
      $413 = $ReallocAsyncCtx10 + 168 | 0; //@line 4753
      HEAP32[$413 >> 2] = $84; //@line 4754
      $414 = $ReallocAsyncCtx10 + 172 | 0; //@line 4755
      HEAP32[$414 >> 2] = $86; //@line 4756
      $415 = $ReallocAsyncCtx10 + 176 | 0; //@line 4757
      HEAP32[$415 >> 2] = $88; //@line 4758
      $416 = $ReallocAsyncCtx10 + 180 | 0; //@line 4759
      HEAP32[$416 >> 2] = $90; //@line 4760
      $417 = $ReallocAsyncCtx10 + 184 | 0; //@line 4761
      HEAP32[$417 >> 2] = $92; //@line 4762
      $418 = $ReallocAsyncCtx10 + 188 | 0; //@line 4763
      HEAP32[$418 >> 2] = $94; //@line 4764
      $419 = $ReallocAsyncCtx10 + 192 | 0; //@line 4765
      HEAP32[$419 >> 2] = $96; //@line 4766
      $420 = $ReallocAsyncCtx10 + 196 | 0; //@line 4767
      HEAP32[$420 >> 2] = $98; //@line 4768
      $421 = $ReallocAsyncCtx10 + 200 | 0; //@line 4769
      HEAP32[$421 >> 2] = $100; //@line 4770
      $422 = $ReallocAsyncCtx10 + 204 | 0; //@line 4771
      HEAP32[$422 >> 2] = $102; //@line 4772
      $423 = $ReallocAsyncCtx10 + 208 | 0; //@line 4773
      HEAP32[$423 >> 2] = $104; //@line 4774
      $424 = $ReallocAsyncCtx10 + 212 | 0; //@line 4775
      HEAP32[$424 >> 2] = $106; //@line 4776
      $425 = $ReallocAsyncCtx10 + 216 | 0; //@line 4777
      HEAP32[$425 >> 2] = $108; //@line 4778
      $426 = $ReallocAsyncCtx10 + 220 | 0; //@line 4779
      HEAP32[$426 >> 2] = $112; //@line 4780
      $427 = $ReallocAsyncCtx10 + 224 | 0; //@line 4781
      HEAP32[$427 >> 2] = $116; //@line 4782
      $428 = $ReallocAsyncCtx10 + 228 | 0; //@line 4783
      HEAP32[$428 >> 2] = $118; //@line 4784
      $429 = $ReallocAsyncCtx10 + 232 | 0; //@line 4785
      HEAP32[$429 >> 2] = $120; //@line 4786
      $430 = $ReallocAsyncCtx10 + 236 | 0; //@line 4787
      HEAP32[$430 >> 2] = $122; //@line 4788
      $431 = $ReallocAsyncCtx10 + 240 | 0; //@line 4789
      HEAP32[$431 >> 2] = $124; //@line 4790
      $432 = $ReallocAsyncCtx10 + 244 | 0; //@line 4791
      HEAP32[$432 >> 2] = $126; //@line 4792
      $433 = $ReallocAsyncCtx10 + 248 | 0; //@line 4793
      HEAP32[$433 >> 2] = $128; //@line 4794
      $434 = $ReallocAsyncCtx10 + 252 | 0; //@line 4795
      HEAP32[$434 >> 2] = $130; //@line 4796
      $435 = $ReallocAsyncCtx10 + 256 | 0; //@line 4797
      HEAP32[$435 >> 2] = $132; //@line 4798
      $436 = $ReallocAsyncCtx10 + 260 | 0; //@line 4799
      HEAP32[$436 >> 2] = $134; //@line 4800
      $437 = $ReallocAsyncCtx10 + 264 | 0; //@line 4801
      HEAP32[$437 >> 2] = $136; //@line 4802
      sp = STACKTOP; //@line 4803
      return;
     }
     HEAP8[___async_retval >> 0] = $371; //@line 4807
     ___async_unwind = 0; //@line 4808
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 4809
     $372 = $ReallocAsyncCtx10 + 4 | 0; //@line 4810
     HEAP32[$372 >> 2] = $2; //@line 4811
     $373 = $ReallocAsyncCtx10 + 8 | 0; //@line 4812
     HEAP32[$373 >> 2] = $4; //@line 4813
     $374 = $ReallocAsyncCtx10 + 12 | 0; //@line 4814
     HEAP32[$374 >> 2] = $6; //@line 4815
     $375 = $ReallocAsyncCtx10 + 16 | 0; //@line 4816
     HEAP32[$375 >> 2] = $8; //@line 4817
     $376 = $ReallocAsyncCtx10 + 20 | 0; //@line 4818
     HEAP32[$376 >> 2] = $10; //@line 4819
     $377 = $ReallocAsyncCtx10 + 24 | 0; //@line 4820
     HEAP32[$377 >> 2] = $12; //@line 4821
     $378 = $ReallocAsyncCtx10 + 28 | 0; //@line 4822
     HEAP32[$378 >> 2] = $14; //@line 4823
     $379 = $ReallocAsyncCtx10 + 32 | 0; //@line 4824
     HEAP32[$379 >> 2] = $16; //@line 4825
     $380 = $ReallocAsyncCtx10 + 36 | 0; //@line 4826
     HEAP32[$380 >> 2] = $18; //@line 4827
     $381 = $ReallocAsyncCtx10 + 40 | 0; //@line 4828
     HEAP32[$381 >> 2] = $20; //@line 4829
     $382 = $ReallocAsyncCtx10 + 44 | 0; //@line 4830
     HEAP32[$382 >> 2] = $22; //@line 4831
     $383 = $ReallocAsyncCtx10 + 48 | 0; //@line 4832
     HEAP32[$383 >> 2] = $24; //@line 4833
     $384 = $ReallocAsyncCtx10 + 52 | 0; //@line 4834
     HEAP32[$384 >> 2] = $26; //@line 4835
     $385 = $ReallocAsyncCtx10 + 56 | 0; //@line 4836
     HEAP32[$385 >> 2] = $28; //@line 4837
     $386 = $ReallocAsyncCtx10 + 60 | 0; //@line 4838
     HEAP32[$386 >> 2] = $30; //@line 4839
     $387 = $ReallocAsyncCtx10 + 64 | 0; //@line 4840
     HEAP32[$387 >> 2] = $32; //@line 4841
     $388 = $ReallocAsyncCtx10 + 68 | 0; //@line 4842
     HEAP32[$388 >> 2] = $34; //@line 4843
     $389 = $ReallocAsyncCtx10 + 72 | 0; //@line 4844
     HEAP32[$389 >> 2] = $36; //@line 4845
     $390 = $ReallocAsyncCtx10 + 76 | 0; //@line 4846
     HEAP32[$390 >> 2] = $38; //@line 4847
     $391 = $ReallocAsyncCtx10 + 80 | 0; //@line 4848
     HEAP32[$391 >> 2] = $161; //@line 4849
     $392 = $ReallocAsyncCtx10 + 84 | 0; //@line 4850
     HEAP32[$392 >> 2] = $42; //@line 4851
     $393 = $ReallocAsyncCtx10 + 88 | 0; //@line 4852
     HEAP32[$393 >> 2] = $44; //@line 4853
     $394 = $ReallocAsyncCtx10 + 92 | 0; //@line 4854
     HEAP32[$394 >> 2] = $46; //@line 4855
     $395 = $ReallocAsyncCtx10 + 96 | 0; //@line 4856
     HEAP32[$395 >> 2] = $48; //@line 4857
     $396 = $ReallocAsyncCtx10 + 100 | 0; //@line 4858
     HEAP32[$396 >> 2] = $50; //@line 4859
     $397 = $ReallocAsyncCtx10 + 104 | 0; //@line 4860
     HEAP32[$397 >> 2] = $52; //@line 4861
     $398 = $ReallocAsyncCtx10 + 108 | 0; //@line 4862
     HEAP32[$398 >> 2] = $54; //@line 4863
     $399 = $ReallocAsyncCtx10 + 112 | 0; //@line 4864
     HEAP32[$399 >> 2] = $56; //@line 4865
     $400 = $ReallocAsyncCtx10 + 116 | 0; //@line 4866
     HEAP32[$400 >> 2] = $58; //@line 4867
     $401 = $ReallocAsyncCtx10 + 120 | 0; //@line 4868
     HEAP32[$401 >> 2] = $60; //@line 4869
     $402 = $ReallocAsyncCtx10 + 124 | 0; //@line 4870
     HEAP32[$402 >> 2] = $62; //@line 4871
     $403 = $ReallocAsyncCtx10 + 128 | 0; //@line 4872
     HEAP32[$403 >> 2] = $64; //@line 4873
     $404 = $ReallocAsyncCtx10 + 132 | 0; //@line 4874
     HEAP32[$404 >> 2] = $66; //@line 4875
     $405 = $ReallocAsyncCtx10 + 136 | 0; //@line 4876
     HEAP32[$405 >> 2] = $68; //@line 4877
     $406 = $ReallocAsyncCtx10 + 140 | 0; //@line 4878
     HEAP32[$406 >> 2] = $70; //@line 4879
     $407 = $ReallocAsyncCtx10 + 144 | 0; //@line 4880
     HEAP32[$407 >> 2] = $72; //@line 4881
     $408 = $ReallocAsyncCtx10 + 148 | 0; //@line 4882
     HEAP32[$408 >> 2] = $74; //@line 4883
     $409 = $ReallocAsyncCtx10 + 152 | 0; //@line 4884
     HEAP32[$409 >> 2] = $76; //@line 4885
     $410 = $ReallocAsyncCtx10 + 156 | 0; //@line 4886
     HEAP32[$410 >> 2] = $78; //@line 4887
     $411 = $ReallocAsyncCtx10 + 160 | 0; //@line 4888
     HEAP32[$411 >> 2] = $80; //@line 4889
     $412 = $ReallocAsyncCtx10 + 164 | 0; //@line 4890
     HEAP32[$412 >> 2] = $82; //@line 4891
     $413 = $ReallocAsyncCtx10 + 168 | 0; //@line 4892
     HEAP32[$413 >> 2] = $84; //@line 4893
     $414 = $ReallocAsyncCtx10 + 172 | 0; //@line 4894
     HEAP32[$414 >> 2] = $86; //@line 4895
     $415 = $ReallocAsyncCtx10 + 176 | 0; //@line 4896
     HEAP32[$415 >> 2] = $88; //@line 4897
     $416 = $ReallocAsyncCtx10 + 180 | 0; //@line 4898
     HEAP32[$416 >> 2] = $90; //@line 4899
     $417 = $ReallocAsyncCtx10 + 184 | 0; //@line 4900
     HEAP32[$417 >> 2] = $92; //@line 4901
     $418 = $ReallocAsyncCtx10 + 188 | 0; //@line 4902
     HEAP32[$418 >> 2] = $94; //@line 4903
     $419 = $ReallocAsyncCtx10 + 192 | 0; //@line 4904
     HEAP32[$419 >> 2] = $96; //@line 4905
     $420 = $ReallocAsyncCtx10 + 196 | 0; //@line 4906
     HEAP32[$420 >> 2] = $98; //@line 4907
     $421 = $ReallocAsyncCtx10 + 200 | 0; //@line 4908
     HEAP32[$421 >> 2] = $100; //@line 4909
     $422 = $ReallocAsyncCtx10 + 204 | 0; //@line 4910
     HEAP32[$422 >> 2] = $102; //@line 4911
     $423 = $ReallocAsyncCtx10 + 208 | 0; //@line 4912
     HEAP32[$423 >> 2] = $104; //@line 4913
     $424 = $ReallocAsyncCtx10 + 212 | 0; //@line 4914
     HEAP32[$424 >> 2] = $106; //@line 4915
     $425 = $ReallocAsyncCtx10 + 216 | 0; //@line 4916
     HEAP32[$425 >> 2] = $108; //@line 4917
     $426 = $ReallocAsyncCtx10 + 220 | 0; //@line 4918
     HEAP32[$426 >> 2] = $112; //@line 4919
     $427 = $ReallocAsyncCtx10 + 224 | 0; //@line 4920
     HEAP32[$427 >> 2] = $116; //@line 4921
     $428 = $ReallocAsyncCtx10 + 228 | 0; //@line 4922
     HEAP32[$428 >> 2] = $118; //@line 4923
     $429 = $ReallocAsyncCtx10 + 232 | 0; //@line 4924
     HEAP32[$429 >> 2] = $120; //@line 4925
     $430 = $ReallocAsyncCtx10 + 236 | 0; //@line 4926
     HEAP32[$430 >> 2] = $122; //@line 4927
     $431 = $ReallocAsyncCtx10 + 240 | 0; //@line 4928
     HEAP32[$431 >> 2] = $124; //@line 4929
     $432 = $ReallocAsyncCtx10 + 244 | 0; //@line 4930
     HEAP32[$432 >> 2] = $126; //@line 4931
     $433 = $ReallocAsyncCtx10 + 248 | 0; //@line 4932
     HEAP32[$433 >> 2] = $128; //@line 4933
     $434 = $ReallocAsyncCtx10 + 252 | 0; //@line 4934
     HEAP32[$434 >> 2] = $130; //@line 4935
     $435 = $ReallocAsyncCtx10 + 256 | 0; //@line 4936
     HEAP32[$435 >> 2] = $132; //@line 4937
     $436 = $ReallocAsyncCtx10 + 260 | 0; //@line 4938
     HEAP32[$436 >> 2] = $134; //@line 4939
     $437 = $ReallocAsyncCtx10 + 264 | 0; //@line 4940
     HEAP32[$437 >> 2] = $136; //@line 4941
     sp = STACKTOP; //@line 4942
     return;
    }
   case 43:
    {
     $439 = $$1202$in$i & 65535; //@line 4947
     if (($$1202$i + -1 & 65535) <= 254) {
      $442 = HEAP32[$134 >> 2] | 0; //@line 4951
      if (!(HEAP32[$442 + 52 >> 2] | 0)) {
       HEAP16[$442 + 4 >> 1] = $$1202$i; //@line 4957
       $447 = $219 + 1 | 0; //@line 4958
       HEAP32[$82 >> 2] = $447; //@line 4959
       $448 = HEAP32[$124 >> 2] | 0; //@line 4960
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 4961
       $449 = FUNCTION_TABLE_ii[$448 & 15]($$1202$i) | 0; //@line 4962
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 4965
        $450 = $ReallocAsyncCtx5 + 4 | 0; //@line 4966
        HEAP32[$450 >> 2] = $2; //@line 4967
        $451 = $ReallocAsyncCtx5 + 8 | 0; //@line 4968
        HEAP32[$451 >> 2] = $4; //@line 4969
        $452 = $ReallocAsyncCtx5 + 12 | 0; //@line 4970
        HEAP32[$452 >> 2] = $6; //@line 4971
        $453 = $ReallocAsyncCtx5 + 16 | 0; //@line 4972
        HEAP32[$453 >> 2] = $8; //@line 4973
        $454 = $ReallocAsyncCtx5 + 20 | 0; //@line 4974
        HEAP32[$454 >> 2] = $10; //@line 4975
        $455 = $ReallocAsyncCtx5 + 24 | 0; //@line 4976
        HEAP32[$455 >> 2] = $12; //@line 4977
        $456 = $ReallocAsyncCtx5 + 28 | 0; //@line 4978
        HEAP32[$456 >> 2] = $14; //@line 4979
        $457 = $ReallocAsyncCtx5 + 32 | 0; //@line 4980
        HEAP32[$457 >> 2] = $16; //@line 4981
        $458 = $ReallocAsyncCtx5 + 36 | 0; //@line 4982
        HEAP32[$458 >> 2] = $18; //@line 4983
        $459 = $ReallocAsyncCtx5 + 40 | 0; //@line 4984
        HEAP32[$459 >> 2] = $20; //@line 4985
        $460 = $ReallocAsyncCtx5 + 44 | 0; //@line 4986
        HEAP32[$460 >> 2] = $22; //@line 4987
        $461 = $ReallocAsyncCtx5 + 48 | 0; //@line 4988
        HEAP32[$461 >> 2] = $24; //@line 4989
        $462 = $ReallocAsyncCtx5 + 52 | 0; //@line 4990
        HEAP32[$462 >> 2] = $26; //@line 4991
        $463 = $ReallocAsyncCtx5 + 56 | 0; //@line 4992
        HEAP32[$463 >> 2] = $28; //@line 4993
        $464 = $ReallocAsyncCtx5 + 60 | 0; //@line 4994
        HEAP32[$464 >> 2] = $30; //@line 4995
        $465 = $ReallocAsyncCtx5 + 64 | 0; //@line 4996
        HEAP32[$465 >> 2] = $32; //@line 4997
        $466 = $ReallocAsyncCtx5 + 68 | 0; //@line 4998
        HEAP32[$466 >> 2] = $34; //@line 4999
        $467 = $ReallocAsyncCtx5 + 72 | 0; //@line 5000
        HEAP32[$467 >> 2] = $36; //@line 5001
        $468 = $ReallocAsyncCtx5 + 76 | 0; //@line 5002
        HEAP32[$468 >> 2] = $38; //@line 5003
        $469 = $ReallocAsyncCtx5 + 80 | 0; //@line 5004
        HEAP32[$469 >> 2] = $161; //@line 5005
        $470 = $ReallocAsyncCtx5 + 84 | 0; //@line 5006
        HEAP32[$470 >> 2] = $42; //@line 5007
        $471 = $ReallocAsyncCtx5 + 88 | 0; //@line 5008
        HEAP32[$471 >> 2] = $44; //@line 5009
        $472 = $ReallocAsyncCtx5 + 92 | 0; //@line 5010
        HEAP32[$472 >> 2] = $46; //@line 5011
        $473 = $ReallocAsyncCtx5 + 96 | 0; //@line 5012
        HEAP32[$473 >> 2] = $48; //@line 5013
        $474 = $ReallocAsyncCtx5 + 100 | 0; //@line 5014
        HEAP32[$474 >> 2] = $50; //@line 5015
        $475 = $ReallocAsyncCtx5 + 104 | 0; //@line 5016
        HEAP32[$475 >> 2] = $52; //@line 5017
        $476 = $ReallocAsyncCtx5 + 108 | 0; //@line 5018
        HEAP32[$476 >> 2] = $54; //@line 5019
        $477 = $ReallocAsyncCtx5 + 112 | 0; //@line 5020
        HEAP32[$477 >> 2] = $56; //@line 5021
        $478 = $ReallocAsyncCtx5 + 116 | 0; //@line 5022
        HEAP32[$478 >> 2] = $58; //@line 5023
        $479 = $ReallocAsyncCtx5 + 120 | 0; //@line 5024
        HEAP32[$479 >> 2] = $60; //@line 5025
        $480 = $ReallocAsyncCtx5 + 124 | 0; //@line 5026
        HEAP32[$480 >> 2] = $62; //@line 5027
        $481 = $ReallocAsyncCtx5 + 128 | 0; //@line 5028
        HEAP32[$481 >> 2] = $64; //@line 5029
        $482 = $ReallocAsyncCtx5 + 132 | 0; //@line 5030
        HEAP32[$482 >> 2] = $66; //@line 5031
        $483 = $ReallocAsyncCtx5 + 136 | 0; //@line 5032
        HEAP32[$483 >> 2] = $68; //@line 5033
        $484 = $ReallocAsyncCtx5 + 140 | 0; //@line 5034
        HEAP32[$484 >> 2] = $70; //@line 5035
        $485 = $ReallocAsyncCtx5 + 144 | 0; //@line 5036
        HEAP32[$485 >> 2] = $72; //@line 5037
        $486 = $ReallocAsyncCtx5 + 148 | 0; //@line 5038
        HEAP32[$486 >> 2] = $74; //@line 5039
        $487 = $ReallocAsyncCtx5 + 152 | 0; //@line 5040
        HEAP32[$487 >> 2] = $76; //@line 5041
        $488 = $ReallocAsyncCtx5 + 156 | 0; //@line 5042
        HEAP32[$488 >> 2] = $78; //@line 5043
        $489 = $ReallocAsyncCtx5 + 160 | 0; //@line 5044
        HEAP32[$489 >> 2] = $80; //@line 5045
        $490 = $ReallocAsyncCtx5 + 164 | 0; //@line 5046
        HEAP32[$490 >> 2] = $82; //@line 5047
        $491 = $ReallocAsyncCtx5 + 168 | 0; //@line 5048
        HEAP32[$491 >> 2] = $84; //@line 5049
        $492 = $ReallocAsyncCtx5 + 172 | 0; //@line 5050
        HEAP32[$492 >> 2] = $86; //@line 5051
        $493 = $ReallocAsyncCtx5 + 176 | 0; //@line 5052
        HEAP32[$493 >> 2] = $88; //@line 5053
        $494 = $ReallocAsyncCtx5 + 180 | 0; //@line 5054
        HEAP32[$494 >> 2] = $90; //@line 5055
        $495 = $ReallocAsyncCtx5 + 184 | 0; //@line 5056
        HEAP32[$495 >> 2] = $92; //@line 5057
        $496 = $ReallocAsyncCtx5 + 188 | 0; //@line 5058
        HEAP32[$496 >> 2] = $94; //@line 5059
        $497 = $ReallocAsyncCtx5 + 192 | 0; //@line 5060
        HEAP32[$497 >> 2] = $96; //@line 5061
        $498 = $ReallocAsyncCtx5 + 196 | 0; //@line 5062
        HEAP32[$498 >> 2] = $98; //@line 5063
        $499 = $ReallocAsyncCtx5 + 200 | 0; //@line 5064
        HEAP32[$499 >> 2] = $100; //@line 5065
        $500 = $ReallocAsyncCtx5 + 204 | 0; //@line 5066
        HEAP32[$500 >> 2] = $102; //@line 5067
        $501 = $ReallocAsyncCtx5 + 208 | 0; //@line 5068
        HEAP32[$501 >> 2] = $104; //@line 5069
        $502 = $ReallocAsyncCtx5 + 212 | 0; //@line 5070
        HEAP32[$502 >> 2] = $106; //@line 5071
        $503 = $ReallocAsyncCtx5 + 216 | 0; //@line 5072
        HEAP32[$503 >> 2] = $108; //@line 5073
        $504 = $ReallocAsyncCtx5 + 220 | 0; //@line 5074
        HEAP32[$504 >> 2] = $112; //@line 5075
        $505 = $ReallocAsyncCtx5 + 224 | 0; //@line 5076
        HEAP32[$505 >> 2] = $116; //@line 5077
        $506 = $ReallocAsyncCtx5 + 228 | 0; //@line 5078
        HEAP32[$506 >> 2] = $118; //@line 5079
        $507 = $ReallocAsyncCtx5 + 232 | 0; //@line 5080
        HEAP32[$507 >> 2] = $120; //@line 5081
        $508 = $ReallocAsyncCtx5 + 236 | 0; //@line 5082
        HEAP32[$508 >> 2] = $447; //@line 5083
        $509 = $ReallocAsyncCtx5 + 240 | 0; //@line 5084
        HEAP32[$509 >> 2] = $122; //@line 5085
        $510 = $ReallocAsyncCtx5 + 244 | 0; //@line 5086
        HEAP32[$510 >> 2] = $439; //@line 5087
        $511 = $ReallocAsyncCtx5 + 248 | 0; //@line 5088
        HEAP32[$511 >> 2] = $124; //@line 5089
        $512 = $ReallocAsyncCtx5 + 252 | 0; //@line 5090
        HEAP32[$512 >> 2] = $126; //@line 5091
        $513 = $ReallocAsyncCtx5 + 256 | 0; //@line 5092
        HEAP32[$513 >> 2] = $128; //@line 5093
        $514 = $ReallocAsyncCtx5 + 260 | 0; //@line 5094
        HEAP32[$514 >> 2] = $130; //@line 5095
        $515 = $ReallocAsyncCtx5 + 264 | 0; //@line 5096
        HEAP32[$515 >> 2] = $132; //@line 5097
        $516 = $ReallocAsyncCtx5 + 268 | 0; //@line 5098
        HEAP32[$516 >> 2] = $134; //@line 5099
        $517 = $ReallocAsyncCtx5 + 272 | 0; //@line 5100
        HEAP32[$517 >> 2] = $136; //@line 5101
        sp = STACKTOP; //@line 5102
        return;
       }
       HEAP32[___async_retval >> 2] = $449; //@line 5106
       ___async_unwind = 0; //@line 5107
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 5108
       $450 = $ReallocAsyncCtx5 + 4 | 0; //@line 5109
       HEAP32[$450 >> 2] = $2; //@line 5110
       $451 = $ReallocAsyncCtx5 + 8 | 0; //@line 5111
       HEAP32[$451 >> 2] = $4; //@line 5112
       $452 = $ReallocAsyncCtx5 + 12 | 0; //@line 5113
       HEAP32[$452 >> 2] = $6; //@line 5114
       $453 = $ReallocAsyncCtx5 + 16 | 0; //@line 5115
       HEAP32[$453 >> 2] = $8; //@line 5116
       $454 = $ReallocAsyncCtx5 + 20 | 0; //@line 5117
       HEAP32[$454 >> 2] = $10; //@line 5118
       $455 = $ReallocAsyncCtx5 + 24 | 0; //@line 5119
       HEAP32[$455 >> 2] = $12; //@line 5120
       $456 = $ReallocAsyncCtx5 + 28 | 0; //@line 5121
       HEAP32[$456 >> 2] = $14; //@line 5122
       $457 = $ReallocAsyncCtx5 + 32 | 0; //@line 5123
       HEAP32[$457 >> 2] = $16; //@line 5124
       $458 = $ReallocAsyncCtx5 + 36 | 0; //@line 5125
       HEAP32[$458 >> 2] = $18; //@line 5126
       $459 = $ReallocAsyncCtx5 + 40 | 0; //@line 5127
       HEAP32[$459 >> 2] = $20; //@line 5128
       $460 = $ReallocAsyncCtx5 + 44 | 0; //@line 5129
       HEAP32[$460 >> 2] = $22; //@line 5130
       $461 = $ReallocAsyncCtx5 + 48 | 0; //@line 5131
       HEAP32[$461 >> 2] = $24; //@line 5132
       $462 = $ReallocAsyncCtx5 + 52 | 0; //@line 5133
       HEAP32[$462 >> 2] = $26; //@line 5134
       $463 = $ReallocAsyncCtx5 + 56 | 0; //@line 5135
       HEAP32[$463 >> 2] = $28; //@line 5136
       $464 = $ReallocAsyncCtx5 + 60 | 0; //@line 5137
       HEAP32[$464 >> 2] = $30; //@line 5138
       $465 = $ReallocAsyncCtx5 + 64 | 0; //@line 5139
       HEAP32[$465 >> 2] = $32; //@line 5140
       $466 = $ReallocAsyncCtx5 + 68 | 0; //@line 5141
       HEAP32[$466 >> 2] = $34; //@line 5142
       $467 = $ReallocAsyncCtx5 + 72 | 0; //@line 5143
       HEAP32[$467 >> 2] = $36; //@line 5144
       $468 = $ReallocAsyncCtx5 + 76 | 0; //@line 5145
       HEAP32[$468 >> 2] = $38; //@line 5146
       $469 = $ReallocAsyncCtx5 + 80 | 0; //@line 5147
       HEAP32[$469 >> 2] = $161; //@line 5148
       $470 = $ReallocAsyncCtx5 + 84 | 0; //@line 5149
       HEAP32[$470 >> 2] = $42; //@line 5150
       $471 = $ReallocAsyncCtx5 + 88 | 0; //@line 5151
       HEAP32[$471 >> 2] = $44; //@line 5152
       $472 = $ReallocAsyncCtx5 + 92 | 0; //@line 5153
       HEAP32[$472 >> 2] = $46; //@line 5154
       $473 = $ReallocAsyncCtx5 + 96 | 0; //@line 5155
       HEAP32[$473 >> 2] = $48; //@line 5156
       $474 = $ReallocAsyncCtx5 + 100 | 0; //@line 5157
       HEAP32[$474 >> 2] = $50; //@line 5158
       $475 = $ReallocAsyncCtx5 + 104 | 0; //@line 5159
       HEAP32[$475 >> 2] = $52; //@line 5160
       $476 = $ReallocAsyncCtx5 + 108 | 0; //@line 5161
       HEAP32[$476 >> 2] = $54; //@line 5162
       $477 = $ReallocAsyncCtx5 + 112 | 0; //@line 5163
       HEAP32[$477 >> 2] = $56; //@line 5164
       $478 = $ReallocAsyncCtx5 + 116 | 0; //@line 5165
       HEAP32[$478 >> 2] = $58; //@line 5166
       $479 = $ReallocAsyncCtx5 + 120 | 0; //@line 5167
       HEAP32[$479 >> 2] = $60; //@line 5168
       $480 = $ReallocAsyncCtx5 + 124 | 0; //@line 5169
       HEAP32[$480 >> 2] = $62; //@line 5170
       $481 = $ReallocAsyncCtx5 + 128 | 0; //@line 5171
       HEAP32[$481 >> 2] = $64; //@line 5172
       $482 = $ReallocAsyncCtx5 + 132 | 0; //@line 5173
       HEAP32[$482 >> 2] = $66; //@line 5174
       $483 = $ReallocAsyncCtx5 + 136 | 0; //@line 5175
       HEAP32[$483 >> 2] = $68; //@line 5176
       $484 = $ReallocAsyncCtx5 + 140 | 0; //@line 5177
       HEAP32[$484 >> 2] = $70; //@line 5178
       $485 = $ReallocAsyncCtx5 + 144 | 0; //@line 5179
       HEAP32[$485 >> 2] = $72; //@line 5180
       $486 = $ReallocAsyncCtx5 + 148 | 0; //@line 5181
       HEAP32[$486 >> 2] = $74; //@line 5182
       $487 = $ReallocAsyncCtx5 + 152 | 0; //@line 5183
       HEAP32[$487 >> 2] = $76; //@line 5184
       $488 = $ReallocAsyncCtx5 + 156 | 0; //@line 5185
       HEAP32[$488 >> 2] = $78; //@line 5186
       $489 = $ReallocAsyncCtx5 + 160 | 0; //@line 5187
       HEAP32[$489 >> 2] = $80; //@line 5188
       $490 = $ReallocAsyncCtx5 + 164 | 0; //@line 5189
       HEAP32[$490 >> 2] = $82; //@line 5190
       $491 = $ReallocAsyncCtx5 + 168 | 0; //@line 5191
       HEAP32[$491 >> 2] = $84; //@line 5192
       $492 = $ReallocAsyncCtx5 + 172 | 0; //@line 5193
       HEAP32[$492 >> 2] = $86; //@line 5194
       $493 = $ReallocAsyncCtx5 + 176 | 0; //@line 5195
       HEAP32[$493 >> 2] = $88; //@line 5196
       $494 = $ReallocAsyncCtx5 + 180 | 0; //@line 5197
       HEAP32[$494 >> 2] = $90; //@line 5198
       $495 = $ReallocAsyncCtx5 + 184 | 0; //@line 5199
       HEAP32[$495 >> 2] = $92; //@line 5200
       $496 = $ReallocAsyncCtx5 + 188 | 0; //@line 5201
       HEAP32[$496 >> 2] = $94; //@line 5202
       $497 = $ReallocAsyncCtx5 + 192 | 0; //@line 5203
       HEAP32[$497 >> 2] = $96; //@line 5204
       $498 = $ReallocAsyncCtx5 + 196 | 0; //@line 5205
       HEAP32[$498 >> 2] = $98; //@line 5206
       $499 = $ReallocAsyncCtx5 + 200 | 0; //@line 5207
       HEAP32[$499 >> 2] = $100; //@line 5208
       $500 = $ReallocAsyncCtx5 + 204 | 0; //@line 5209
       HEAP32[$500 >> 2] = $102; //@line 5210
       $501 = $ReallocAsyncCtx5 + 208 | 0; //@line 5211
       HEAP32[$501 >> 2] = $104; //@line 5212
       $502 = $ReallocAsyncCtx5 + 212 | 0; //@line 5213
       HEAP32[$502 >> 2] = $106; //@line 5214
       $503 = $ReallocAsyncCtx5 + 216 | 0; //@line 5215
       HEAP32[$503 >> 2] = $108; //@line 5216
       $504 = $ReallocAsyncCtx5 + 220 | 0; //@line 5217
       HEAP32[$504 >> 2] = $112; //@line 5218
       $505 = $ReallocAsyncCtx5 + 224 | 0; //@line 5219
       HEAP32[$505 >> 2] = $116; //@line 5220
       $506 = $ReallocAsyncCtx5 + 228 | 0; //@line 5221
       HEAP32[$506 >> 2] = $118; //@line 5222
       $507 = $ReallocAsyncCtx5 + 232 | 0; //@line 5223
       HEAP32[$507 >> 2] = $120; //@line 5224
       $508 = $ReallocAsyncCtx5 + 236 | 0; //@line 5225
       HEAP32[$508 >> 2] = $447; //@line 5226
       $509 = $ReallocAsyncCtx5 + 240 | 0; //@line 5227
       HEAP32[$509 >> 2] = $122; //@line 5228
       $510 = $ReallocAsyncCtx5 + 244 | 0; //@line 5229
       HEAP32[$510 >> 2] = $439; //@line 5230
       $511 = $ReallocAsyncCtx5 + 248 | 0; //@line 5231
       HEAP32[$511 >> 2] = $124; //@line 5232
       $512 = $ReallocAsyncCtx5 + 252 | 0; //@line 5233
       HEAP32[$512 >> 2] = $126; //@line 5234
       $513 = $ReallocAsyncCtx5 + 256 | 0; //@line 5235
       HEAP32[$513 >> 2] = $128; //@line 5236
       $514 = $ReallocAsyncCtx5 + 260 | 0; //@line 5237
       HEAP32[$514 >> 2] = $130; //@line 5238
       $515 = $ReallocAsyncCtx5 + 264 | 0; //@line 5239
       HEAP32[$515 >> 2] = $132; //@line 5240
       $516 = $ReallocAsyncCtx5 + 268 | 0; //@line 5241
       HEAP32[$516 >> 2] = $134; //@line 5242
       $517 = $ReallocAsyncCtx5 + 272 | 0; //@line 5243
       HEAP32[$517 >> 2] = $136; //@line 5244
       sp = STACKTOP; //@line 5245
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 5249
     break L2;
     break;
    }
   case 49:
    {
     $519 = HEAP32[$134 >> 2] | 0; //@line 5254
     $520 = $519 + 56 | 0; //@line 5255
     if (HEAP32[$520 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 5259
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 5263
     $524 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $520, $519 + 6 | 0, 8, $$1202$i) | 0; //@line 5264
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 5267
      $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 5268
      HEAP32[$525 >> 2] = $2; //@line 5269
      $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 5270
      HEAP32[$526 >> 2] = $4; //@line 5271
      $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 5272
      HEAP32[$527 >> 2] = $6; //@line 5273
      $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 5274
      HEAP32[$528 >> 2] = $8; //@line 5275
      $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 5276
      HEAP32[$529 >> 2] = $10; //@line 5277
      $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 5278
      HEAP32[$530 >> 2] = $12; //@line 5279
      $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 5280
      HEAP32[$531 >> 2] = $14; //@line 5281
      $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 5282
      HEAP32[$532 >> 2] = $16; //@line 5283
      $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 5284
      HEAP32[$533 >> 2] = $18; //@line 5285
      $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 5286
      HEAP32[$534 >> 2] = $20; //@line 5287
      $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 5288
      HEAP32[$535 >> 2] = $22; //@line 5289
      $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 5290
      HEAP32[$536 >> 2] = $24; //@line 5291
      $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 5292
      HEAP32[$537 >> 2] = $26; //@line 5293
      $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 5294
      HEAP32[$538 >> 2] = $28; //@line 5295
      $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 5296
      HEAP32[$539 >> 2] = $30; //@line 5297
      $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 5298
      HEAP32[$540 >> 2] = $32; //@line 5299
      $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 5300
      HEAP32[$541 >> 2] = $34; //@line 5301
      $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 5302
      HEAP32[$542 >> 2] = $36; //@line 5303
      $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 5304
      HEAP32[$543 >> 2] = $38; //@line 5305
      $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 5306
      HEAP32[$544 >> 2] = $161; //@line 5307
      $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 5308
      HEAP32[$545 >> 2] = $42; //@line 5309
      $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 5310
      HEAP32[$546 >> 2] = $44; //@line 5311
      $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 5312
      HEAP32[$547 >> 2] = $46; //@line 5313
      $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 5314
      HEAP32[$548 >> 2] = $48; //@line 5315
      $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 5316
      HEAP32[$549 >> 2] = $50; //@line 5317
      $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 5318
      HEAP32[$550 >> 2] = $52; //@line 5319
      $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 5320
      HEAP32[$551 >> 2] = $54; //@line 5321
      $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 5322
      HEAP32[$552 >> 2] = $56; //@line 5323
      $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 5324
      HEAP32[$553 >> 2] = $58; //@line 5325
      $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 5326
      HEAP32[$554 >> 2] = $60; //@line 5327
      $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 5328
      HEAP32[$555 >> 2] = $62; //@line 5329
      $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 5330
      HEAP32[$556 >> 2] = $64; //@line 5331
      $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 5332
      HEAP32[$557 >> 2] = $66; //@line 5333
      $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 5334
      HEAP32[$558 >> 2] = $68; //@line 5335
      $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 5336
      HEAP32[$559 >> 2] = $70; //@line 5337
      $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 5338
      HEAP32[$560 >> 2] = $72; //@line 5339
      $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 5340
      HEAP32[$561 >> 2] = $74; //@line 5341
      $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 5342
      HEAP32[$562 >> 2] = $76; //@line 5343
      $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 5344
      HEAP32[$563 >> 2] = $78; //@line 5345
      $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 5346
      HEAP32[$564 >> 2] = $80; //@line 5347
      $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 5348
      HEAP32[$565 >> 2] = $82; //@line 5349
      $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 5350
      HEAP32[$566 >> 2] = $84; //@line 5351
      $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 5352
      HEAP32[$567 >> 2] = $86; //@line 5353
      $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 5354
      HEAP32[$568 >> 2] = $88; //@line 5355
      $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 5356
      HEAP32[$569 >> 2] = $90; //@line 5357
      $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 5358
      HEAP32[$570 >> 2] = $92; //@line 5359
      $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 5360
      HEAP32[$571 >> 2] = $94; //@line 5361
      $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 5362
      HEAP32[$572 >> 2] = $96; //@line 5363
      $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 5364
      HEAP32[$573 >> 2] = $98; //@line 5365
      $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 5366
      HEAP32[$574 >> 2] = $100; //@line 5367
      $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 5368
      HEAP32[$575 >> 2] = $102; //@line 5369
      $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 5370
      HEAP32[$576 >> 2] = $104; //@line 5371
      $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 5372
      HEAP32[$577 >> 2] = $106; //@line 5373
      $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 5374
      HEAP32[$578 >> 2] = $108; //@line 5375
      $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 5376
      HEAP32[$579 >> 2] = $112; //@line 5377
      $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 5378
      HEAP32[$580 >> 2] = $116; //@line 5379
      $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 5380
      HEAP32[$581 >> 2] = $118; //@line 5381
      $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 5382
      HEAP32[$582 >> 2] = $120; //@line 5383
      $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 5384
      HEAP32[$583 >> 2] = $122; //@line 5385
      $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 5386
      HEAP32[$584 >> 2] = $124; //@line 5387
      $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 5388
      HEAP32[$585 >> 2] = $126; //@line 5389
      $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 5390
      HEAP32[$586 >> 2] = $128; //@line 5391
      $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 5392
      HEAP32[$587 >> 2] = $130; //@line 5393
      $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 5394
      HEAP32[$588 >> 2] = $132; //@line 5395
      $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 5396
      HEAP32[$589 >> 2] = $134; //@line 5397
      $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 5398
      HEAP32[$590 >> 2] = $136; //@line 5399
      sp = STACKTOP; //@line 5400
      return;
     }
     HEAP8[___async_retval >> 0] = $524; //@line 5404
     ___async_unwind = 0; //@line 5405
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 5406
     $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 5407
     HEAP32[$525 >> 2] = $2; //@line 5408
     $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 5409
     HEAP32[$526 >> 2] = $4; //@line 5410
     $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 5411
     HEAP32[$527 >> 2] = $6; //@line 5412
     $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 5413
     HEAP32[$528 >> 2] = $8; //@line 5414
     $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 5415
     HEAP32[$529 >> 2] = $10; //@line 5416
     $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 5417
     HEAP32[$530 >> 2] = $12; //@line 5418
     $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 5419
     HEAP32[$531 >> 2] = $14; //@line 5420
     $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 5421
     HEAP32[$532 >> 2] = $16; //@line 5422
     $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 5423
     HEAP32[$533 >> 2] = $18; //@line 5424
     $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 5425
     HEAP32[$534 >> 2] = $20; //@line 5426
     $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 5427
     HEAP32[$535 >> 2] = $22; //@line 5428
     $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 5429
     HEAP32[$536 >> 2] = $24; //@line 5430
     $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 5431
     HEAP32[$537 >> 2] = $26; //@line 5432
     $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 5433
     HEAP32[$538 >> 2] = $28; //@line 5434
     $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 5435
     HEAP32[$539 >> 2] = $30; //@line 5436
     $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 5437
     HEAP32[$540 >> 2] = $32; //@line 5438
     $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 5439
     HEAP32[$541 >> 2] = $34; //@line 5440
     $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 5441
     HEAP32[$542 >> 2] = $36; //@line 5442
     $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 5443
     HEAP32[$543 >> 2] = $38; //@line 5444
     $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 5445
     HEAP32[$544 >> 2] = $161; //@line 5446
     $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 5447
     HEAP32[$545 >> 2] = $42; //@line 5448
     $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 5449
     HEAP32[$546 >> 2] = $44; //@line 5450
     $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 5451
     HEAP32[$547 >> 2] = $46; //@line 5452
     $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 5453
     HEAP32[$548 >> 2] = $48; //@line 5454
     $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 5455
     HEAP32[$549 >> 2] = $50; //@line 5456
     $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 5457
     HEAP32[$550 >> 2] = $52; //@line 5458
     $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 5459
     HEAP32[$551 >> 2] = $54; //@line 5460
     $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 5461
     HEAP32[$552 >> 2] = $56; //@line 5462
     $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 5463
     HEAP32[$553 >> 2] = $58; //@line 5464
     $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 5465
     HEAP32[$554 >> 2] = $60; //@line 5466
     $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 5467
     HEAP32[$555 >> 2] = $62; //@line 5468
     $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 5469
     HEAP32[$556 >> 2] = $64; //@line 5470
     $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 5471
     HEAP32[$557 >> 2] = $66; //@line 5472
     $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 5473
     HEAP32[$558 >> 2] = $68; //@line 5474
     $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 5475
     HEAP32[$559 >> 2] = $70; //@line 5476
     $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 5477
     HEAP32[$560 >> 2] = $72; //@line 5478
     $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 5479
     HEAP32[$561 >> 2] = $74; //@line 5480
     $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 5481
     HEAP32[$562 >> 2] = $76; //@line 5482
     $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 5483
     HEAP32[$563 >> 2] = $78; //@line 5484
     $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 5485
     HEAP32[$564 >> 2] = $80; //@line 5486
     $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 5487
     HEAP32[$565 >> 2] = $82; //@line 5488
     $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 5489
     HEAP32[$566 >> 2] = $84; //@line 5490
     $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 5491
     HEAP32[$567 >> 2] = $86; //@line 5492
     $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 5493
     HEAP32[$568 >> 2] = $88; //@line 5494
     $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 5495
     HEAP32[$569 >> 2] = $90; //@line 5496
     $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 5497
     HEAP32[$570 >> 2] = $92; //@line 5498
     $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 5499
     HEAP32[$571 >> 2] = $94; //@line 5500
     $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 5501
     HEAP32[$572 >> 2] = $96; //@line 5502
     $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 5503
     HEAP32[$573 >> 2] = $98; //@line 5504
     $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 5505
     HEAP32[$574 >> 2] = $100; //@line 5506
     $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 5507
     HEAP32[$575 >> 2] = $102; //@line 5508
     $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 5509
     HEAP32[$576 >> 2] = $104; //@line 5510
     $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 5511
     HEAP32[$577 >> 2] = $106; //@line 5512
     $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 5513
     HEAP32[$578 >> 2] = $108; //@line 5514
     $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 5515
     HEAP32[$579 >> 2] = $112; //@line 5516
     $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 5517
     HEAP32[$580 >> 2] = $116; //@line 5518
     $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 5519
     HEAP32[$581 >> 2] = $118; //@line 5520
     $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 5521
     HEAP32[$582 >> 2] = $120; //@line 5522
     $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 5523
     HEAP32[$583 >> 2] = $122; //@line 5524
     $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 5525
     HEAP32[$584 >> 2] = $124; //@line 5526
     $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 5527
     HEAP32[$585 >> 2] = $126; //@line 5528
     $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 5529
     HEAP32[$586 >> 2] = $128; //@line 5530
     $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 5531
     HEAP32[$587 >> 2] = $130; //@line 5532
     $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 5533
     HEAP32[$588 >> 2] = $132; //@line 5534
     $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 5535
     HEAP32[$589 >> 2] = $134; //@line 5536
     $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 5537
     HEAP32[$590 >> 2] = $136; //@line 5538
     sp = STACKTOP; //@line 5539
     return;
    }
   case 56:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 5544
     break L2;
     break;
    }
   case 60:
    {
     $608 = HEAP32[$134 >> 2] | 0; //@line 5549
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 5552
     $611 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $608 + 60 | 0, $608 + 8 | 0, 20, $$1202$i) | 0; //@line 5553
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 5556
      $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 5557
      HEAP32[$612 >> 2] = $2; //@line 5558
      $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 5559
      HEAP32[$613 >> 2] = $4; //@line 5560
      $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 5561
      HEAP32[$614 >> 2] = $6; //@line 5562
      $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 5563
      HEAP32[$615 >> 2] = $8; //@line 5564
      $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 5565
      HEAP32[$616 >> 2] = $10; //@line 5566
      $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 5567
      HEAP32[$617 >> 2] = $12; //@line 5568
      $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 5569
      HEAP32[$618 >> 2] = $14; //@line 5570
      $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 5571
      HEAP32[$619 >> 2] = $16; //@line 5572
      $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 5573
      HEAP32[$620 >> 2] = $18; //@line 5574
      $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 5575
      HEAP32[$621 >> 2] = $20; //@line 5576
      $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 5577
      HEAP32[$622 >> 2] = $22; //@line 5578
      $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 5579
      HEAP32[$623 >> 2] = $24; //@line 5580
      $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 5581
      HEAP32[$624 >> 2] = $26; //@line 5582
      $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 5583
      HEAP32[$625 >> 2] = $28; //@line 5584
      $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 5585
      HEAP32[$626 >> 2] = $30; //@line 5586
      $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 5587
      HEAP32[$627 >> 2] = $32; //@line 5588
      $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 5589
      HEAP32[$628 >> 2] = $34; //@line 5590
      $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 5591
      HEAP32[$629 >> 2] = $36; //@line 5592
      $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 5593
      HEAP32[$630 >> 2] = $38; //@line 5594
      $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 5595
      HEAP32[$631 >> 2] = $161; //@line 5596
      $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 5597
      HEAP32[$632 >> 2] = $42; //@line 5598
      $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 5599
      HEAP32[$633 >> 2] = $44; //@line 5600
      $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 5601
      HEAP32[$634 >> 2] = $46; //@line 5602
      $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 5603
      HEAP32[$635 >> 2] = $48; //@line 5604
      $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 5605
      HEAP32[$636 >> 2] = $50; //@line 5606
      $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 5607
      HEAP32[$637 >> 2] = $52; //@line 5608
      $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 5609
      HEAP32[$638 >> 2] = $54; //@line 5610
      $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 5611
      HEAP32[$639 >> 2] = $56; //@line 5612
      $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 5613
      HEAP32[$640 >> 2] = $58; //@line 5614
      $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 5615
      HEAP32[$641 >> 2] = $60; //@line 5616
      $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 5617
      HEAP32[$642 >> 2] = $62; //@line 5618
      $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 5619
      HEAP32[$643 >> 2] = $64; //@line 5620
      $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 5621
      HEAP32[$644 >> 2] = $66; //@line 5622
      $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 5623
      HEAP32[$645 >> 2] = $68; //@line 5624
      $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 5625
      HEAP32[$646 >> 2] = $70; //@line 5626
      $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 5627
      HEAP32[$647 >> 2] = $72; //@line 5628
      $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 5629
      HEAP32[$648 >> 2] = $74; //@line 5630
      $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 5631
      HEAP32[$649 >> 2] = $76; //@line 5632
      $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 5633
      HEAP32[$650 >> 2] = $78; //@line 5634
      $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 5635
      HEAP32[$651 >> 2] = $80; //@line 5636
      $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 5637
      HEAP32[$652 >> 2] = $82; //@line 5638
      $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 5639
      HEAP32[$653 >> 2] = $84; //@line 5640
      $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 5641
      HEAP32[$654 >> 2] = $86; //@line 5642
      $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 5643
      HEAP32[$655 >> 2] = $88; //@line 5644
      $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 5645
      HEAP32[$656 >> 2] = $90; //@line 5646
      $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 5647
      HEAP32[$657 >> 2] = $92; //@line 5648
      $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 5649
      HEAP32[$658 >> 2] = $94; //@line 5650
      $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 5651
      HEAP32[$659 >> 2] = $96; //@line 5652
      $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 5653
      HEAP32[$660 >> 2] = $98; //@line 5654
      $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 5655
      HEAP32[$661 >> 2] = $100; //@line 5656
      $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 5657
      HEAP32[$662 >> 2] = $102; //@line 5658
      $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 5659
      HEAP32[$663 >> 2] = $104; //@line 5660
      $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 5661
      HEAP32[$664 >> 2] = $106; //@line 5662
      $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 5663
      HEAP32[$665 >> 2] = $108; //@line 5664
      $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 5665
      HEAP32[$666 >> 2] = $112; //@line 5666
      $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 5667
      HEAP32[$667 >> 2] = $116; //@line 5668
      $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 5669
      HEAP32[$668 >> 2] = $118; //@line 5670
      $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 5671
      HEAP32[$669 >> 2] = $120; //@line 5672
      $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 5673
      HEAP32[$670 >> 2] = $122; //@line 5674
      $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 5675
      HEAP32[$671 >> 2] = $124; //@line 5676
      $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 5677
      HEAP32[$672 >> 2] = $126; //@line 5678
      $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 5679
      HEAP32[$673 >> 2] = $128; //@line 5680
      $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 5681
      HEAP32[$674 >> 2] = $130; //@line 5682
      $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 5683
      HEAP32[$675 >> 2] = $132; //@line 5684
      $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 5685
      HEAP32[$676 >> 2] = $134; //@line 5686
      $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 5687
      HEAP32[$677 >> 2] = $136; //@line 5688
      sp = STACKTOP; //@line 5689
      return;
     }
     HEAP8[___async_retval >> 0] = $611; //@line 5693
     ___async_unwind = 0; //@line 5694
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 5695
     $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 5696
     HEAP32[$612 >> 2] = $2; //@line 5697
     $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 5698
     HEAP32[$613 >> 2] = $4; //@line 5699
     $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 5700
     HEAP32[$614 >> 2] = $6; //@line 5701
     $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 5702
     HEAP32[$615 >> 2] = $8; //@line 5703
     $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 5704
     HEAP32[$616 >> 2] = $10; //@line 5705
     $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 5706
     HEAP32[$617 >> 2] = $12; //@line 5707
     $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 5708
     HEAP32[$618 >> 2] = $14; //@line 5709
     $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 5710
     HEAP32[$619 >> 2] = $16; //@line 5711
     $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 5712
     HEAP32[$620 >> 2] = $18; //@line 5713
     $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 5714
     HEAP32[$621 >> 2] = $20; //@line 5715
     $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 5716
     HEAP32[$622 >> 2] = $22; //@line 5717
     $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 5718
     HEAP32[$623 >> 2] = $24; //@line 5719
     $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 5720
     HEAP32[$624 >> 2] = $26; //@line 5721
     $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 5722
     HEAP32[$625 >> 2] = $28; //@line 5723
     $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 5724
     HEAP32[$626 >> 2] = $30; //@line 5725
     $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 5726
     HEAP32[$627 >> 2] = $32; //@line 5727
     $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 5728
     HEAP32[$628 >> 2] = $34; //@line 5729
     $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 5730
     HEAP32[$629 >> 2] = $36; //@line 5731
     $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 5732
     HEAP32[$630 >> 2] = $38; //@line 5733
     $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 5734
     HEAP32[$631 >> 2] = $161; //@line 5735
     $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 5736
     HEAP32[$632 >> 2] = $42; //@line 5737
     $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 5738
     HEAP32[$633 >> 2] = $44; //@line 5739
     $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 5740
     HEAP32[$634 >> 2] = $46; //@line 5741
     $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 5742
     HEAP32[$635 >> 2] = $48; //@line 5743
     $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 5744
     HEAP32[$636 >> 2] = $50; //@line 5745
     $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 5746
     HEAP32[$637 >> 2] = $52; //@line 5747
     $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 5748
     HEAP32[$638 >> 2] = $54; //@line 5749
     $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 5750
     HEAP32[$639 >> 2] = $56; //@line 5751
     $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 5752
     HEAP32[$640 >> 2] = $58; //@line 5753
     $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 5754
     HEAP32[$641 >> 2] = $60; //@line 5755
     $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 5756
     HEAP32[$642 >> 2] = $62; //@line 5757
     $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 5758
     HEAP32[$643 >> 2] = $64; //@line 5759
     $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 5760
     HEAP32[$644 >> 2] = $66; //@line 5761
     $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 5762
     HEAP32[$645 >> 2] = $68; //@line 5763
     $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 5764
     HEAP32[$646 >> 2] = $70; //@line 5765
     $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 5766
     HEAP32[$647 >> 2] = $72; //@line 5767
     $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 5768
     HEAP32[$648 >> 2] = $74; //@line 5769
     $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 5770
     HEAP32[$649 >> 2] = $76; //@line 5771
     $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 5772
     HEAP32[$650 >> 2] = $78; //@line 5773
     $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 5774
     HEAP32[$651 >> 2] = $80; //@line 5775
     $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 5776
     HEAP32[$652 >> 2] = $82; //@line 5777
     $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 5778
     HEAP32[$653 >> 2] = $84; //@line 5779
     $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 5780
     HEAP32[$654 >> 2] = $86; //@line 5781
     $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 5782
     HEAP32[$655 >> 2] = $88; //@line 5783
     $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 5784
     HEAP32[$656 >> 2] = $90; //@line 5785
     $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 5786
     HEAP32[$657 >> 2] = $92; //@line 5787
     $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 5788
     HEAP32[$658 >> 2] = $94; //@line 5789
     $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 5790
     HEAP32[$659 >> 2] = $96; //@line 5791
     $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 5792
     HEAP32[$660 >> 2] = $98; //@line 5793
     $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 5794
     HEAP32[$661 >> 2] = $100; //@line 5795
     $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 5796
     HEAP32[$662 >> 2] = $102; //@line 5797
     $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 5798
     HEAP32[$663 >> 2] = $104; //@line 5799
     $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 5800
     HEAP32[$664 >> 2] = $106; //@line 5801
     $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 5802
     HEAP32[$665 >> 2] = $108; //@line 5803
     $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 5804
     HEAP32[$666 >> 2] = $112; //@line 5805
     $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 5806
     HEAP32[$667 >> 2] = $116; //@line 5807
     $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 5808
     HEAP32[$668 >> 2] = $118; //@line 5809
     $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 5810
     HEAP32[$669 >> 2] = $120; //@line 5811
     $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 5812
     HEAP32[$670 >> 2] = $122; //@line 5813
     $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 5814
     HEAP32[$671 >> 2] = $124; //@line 5815
     $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 5816
     HEAP32[$672 >> 2] = $126; //@line 5817
     $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 5818
     HEAP32[$673 >> 2] = $128; //@line 5819
     $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 5820
     HEAP32[$674 >> 2] = $130; //@line 5821
     $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 5822
     HEAP32[$675 >> 2] = $132; //@line 5823
     $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 5824
     HEAP32[$676 >> 2] = $134; //@line 5825
     $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 5826
     HEAP32[$677 >> 2] = $136; //@line 5827
     sp = STACKTOP; //@line 5828
     return;
    }
   case 63:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 5833
     $679 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $84, $88, 11, $$1202$i) | 0; //@line 5834
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 5837
      $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 5838
      HEAP32[$680 >> 2] = $2; //@line 5839
      $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 5840
      HEAP32[$681 >> 2] = $4; //@line 5841
      $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 5842
      HEAP32[$682 >> 2] = $6; //@line 5843
      $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 5844
      HEAP32[$683 >> 2] = $8; //@line 5845
      $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 5846
      HEAP32[$684 >> 2] = $10; //@line 5847
      $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 5848
      HEAP32[$685 >> 2] = $12; //@line 5849
      $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 5850
      HEAP32[$686 >> 2] = $14; //@line 5851
      $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 5852
      HEAP32[$687 >> 2] = $16; //@line 5853
      $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 5854
      HEAP32[$688 >> 2] = $18; //@line 5855
      $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 5856
      HEAP32[$689 >> 2] = $20; //@line 5857
      $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 5858
      HEAP32[$690 >> 2] = $22; //@line 5859
      $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 5860
      HEAP32[$691 >> 2] = $24; //@line 5861
      $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 5862
      HEAP32[$692 >> 2] = $26; //@line 5863
      $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 5864
      HEAP32[$693 >> 2] = $28; //@line 5865
      $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 5866
      HEAP32[$694 >> 2] = $30; //@line 5867
      $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 5868
      HEAP32[$695 >> 2] = $32; //@line 5869
      $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 5870
      HEAP32[$696 >> 2] = $34; //@line 5871
      $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 5872
      HEAP32[$697 >> 2] = $36; //@line 5873
      $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 5874
      HEAP32[$698 >> 2] = $38; //@line 5875
      $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 5876
      HEAP32[$699 >> 2] = $161; //@line 5877
      $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 5878
      HEAP32[$700 >> 2] = $42; //@line 5879
      $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 5880
      HEAP32[$701 >> 2] = $44; //@line 5881
      $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 5882
      HEAP32[$702 >> 2] = $46; //@line 5883
      $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 5884
      HEAP32[$703 >> 2] = $48; //@line 5885
      $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 5886
      HEAP32[$704 >> 2] = $50; //@line 5887
      $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 5888
      HEAP32[$705 >> 2] = $52; //@line 5889
      $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 5890
      HEAP32[$706 >> 2] = $54; //@line 5891
      $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 5892
      HEAP32[$707 >> 2] = $56; //@line 5893
      $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 5894
      HEAP32[$708 >> 2] = $58; //@line 5895
      $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 5896
      HEAP32[$709 >> 2] = $60; //@line 5897
      $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 5898
      HEAP32[$710 >> 2] = $62; //@line 5899
      $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 5900
      HEAP32[$711 >> 2] = $64; //@line 5901
      $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 5902
      HEAP32[$712 >> 2] = $66; //@line 5903
      $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 5904
      HEAP32[$713 >> 2] = $68; //@line 5905
      $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 5906
      HEAP32[$714 >> 2] = $70; //@line 5907
      $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 5908
      HEAP32[$715 >> 2] = $72; //@line 5909
      $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 5910
      HEAP32[$716 >> 2] = $74; //@line 5911
      $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 5912
      HEAP32[$717 >> 2] = $76; //@line 5913
      $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 5914
      HEAP32[$718 >> 2] = $78; //@line 5915
      $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 5916
      HEAP32[$719 >> 2] = $80; //@line 5917
      $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 5918
      HEAP32[$720 >> 2] = $82; //@line 5919
      $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 5920
      HEAP32[$721 >> 2] = $84; //@line 5921
      $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 5922
      HEAP32[$722 >> 2] = $86; //@line 5923
      $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 5924
      HEAP32[$723 >> 2] = $88; //@line 5925
      $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 5926
      HEAP32[$724 >> 2] = $90; //@line 5927
      $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 5928
      HEAP32[$725 >> 2] = $92; //@line 5929
      $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 5930
      HEAP32[$726 >> 2] = $94; //@line 5931
      $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 5932
      HEAP32[$727 >> 2] = $96; //@line 5933
      $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 5934
      HEAP32[$728 >> 2] = $98; //@line 5935
      $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 5936
      HEAP32[$729 >> 2] = $100; //@line 5937
      $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 5938
      HEAP32[$730 >> 2] = $102; //@line 5939
      $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 5940
      HEAP32[$731 >> 2] = $104; //@line 5941
      $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 5942
      HEAP32[$732 >> 2] = $106; //@line 5943
      $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 5944
      HEAP32[$733 >> 2] = $108; //@line 5945
      $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 5946
      HEAP32[$734 >> 2] = $112; //@line 5947
      $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 5948
      HEAP32[$735 >> 2] = $116; //@line 5949
      $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 5950
      HEAP32[$736 >> 2] = $118; //@line 5951
      $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 5952
      HEAP32[$737 >> 2] = $120; //@line 5953
      $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 5954
      HEAP32[$738 >> 2] = $122; //@line 5955
      $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 5956
      HEAP32[$739 >> 2] = $124; //@line 5957
      $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 5958
      HEAP32[$740 >> 2] = $126; //@line 5959
      $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 5960
      HEAP32[$741 >> 2] = $128; //@line 5961
      $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 5962
      HEAP32[$742 >> 2] = $130; //@line 5963
      $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 5964
      HEAP32[$743 >> 2] = $132; //@line 5965
      $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 5966
      HEAP32[$744 >> 2] = $134; //@line 5967
      $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 5968
      HEAP32[$745 >> 2] = $136; //@line 5969
      sp = STACKTOP; //@line 5970
      return;
     }
     HEAP8[___async_retval >> 0] = $679; //@line 5974
     ___async_unwind = 0; //@line 5975
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 5976
     $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 5977
     HEAP32[$680 >> 2] = $2; //@line 5978
     $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 5979
     HEAP32[$681 >> 2] = $4; //@line 5980
     $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 5981
     HEAP32[$682 >> 2] = $6; //@line 5982
     $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 5983
     HEAP32[$683 >> 2] = $8; //@line 5984
     $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 5985
     HEAP32[$684 >> 2] = $10; //@line 5986
     $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 5987
     HEAP32[$685 >> 2] = $12; //@line 5988
     $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 5989
     HEAP32[$686 >> 2] = $14; //@line 5990
     $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 5991
     HEAP32[$687 >> 2] = $16; //@line 5992
     $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 5993
     HEAP32[$688 >> 2] = $18; //@line 5994
     $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 5995
     HEAP32[$689 >> 2] = $20; //@line 5996
     $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 5997
     HEAP32[$690 >> 2] = $22; //@line 5998
     $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 5999
     HEAP32[$691 >> 2] = $24; //@line 6000
     $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 6001
     HEAP32[$692 >> 2] = $26; //@line 6002
     $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 6003
     HEAP32[$693 >> 2] = $28; //@line 6004
     $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 6005
     HEAP32[$694 >> 2] = $30; //@line 6006
     $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 6007
     HEAP32[$695 >> 2] = $32; //@line 6008
     $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 6009
     HEAP32[$696 >> 2] = $34; //@line 6010
     $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 6011
     HEAP32[$697 >> 2] = $36; //@line 6012
     $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 6013
     HEAP32[$698 >> 2] = $38; //@line 6014
     $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 6015
     HEAP32[$699 >> 2] = $161; //@line 6016
     $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 6017
     HEAP32[$700 >> 2] = $42; //@line 6018
     $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 6019
     HEAP32[$701 >> 2] = $44; //@line 6020
     $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 6021
     HEAP32[$702 >> 2] = $46; //@line 6022
     $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 6023
     HEAP32[$703 >> 2] = $48; //@line 6024
     $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 6025
     HEAP32[$704 >> 2] = $50; //@line 6026
     $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 6027
     HEAP32[$705 >> 2] = $52; //@line 6028
     $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 6029
     HEAP32[$706 >> 2] = $54; //@line 6030
     $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 6031
     HEAP32[$707 >> 2] = $56; //@line 6032
     $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 6033
     HEAP32[$708 >> 2] = $58; //@line 6034
     $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 6035
     HEAP32[$709 >> 2] = $60; //@line 6036
     $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 6037
     HEAP32[$710 >> 2] = $62; //@line 6038
     $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 6039
     HEAP32[$711 >> 2] = $64; //@line 6040
     $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 6041
     HEAP32[$712 >> 2] = $66; //@line 6042
     $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 6043
     HEAP32[$713 >> 2] = $68; //@line 6044
     $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 6045
     HEAP32[$714 >> 2] = $70; //@line 6046
     $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 6047
     HEAP32[$715 >> 2] = $72; //@line 6048
     $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 6049
     HEAP32[$716 >> 2] = $74; //@line 6050
     $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 6051
     HEAP32[$717 >> 2] = $76; //@line 6052
     $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 6053
     HEAP32[$718 >> 2] = $78; //@line 6054
     $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 6055
     HEAP32[$719 >> 2] = $80; //@line 6056
     $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 6057
     HEAP32[$720 >> 2] = $82; //@line 6058
     $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 6059
     HEAP32[$721 >> 2] = $84; //@line 6060
     $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 6061
     HEAP32[$722 >> 2] = $86; //@line 6062
     $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 6063
     HEAP32[$723 >> 2] = $88; //@line 6064
     $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 6065
     HEAP32[$724 >> 2] = $90; //@line 6066
     $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 6067
     HEAP32[$725 >> 2] = $92; //@line 6068
     $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 6069
     HEAP32[$726 >> 2] = $94; //@line 6070
     $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 6071
     HEAP32[$727 >> 2] = $96; //@line 6072
     $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 6073
     HEAP32[$728 >> 2] = $98; //@line 6074
     $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 6075
     HEAP32[$729 >> 2] = $100; //@line 6076
     $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 6077
     HEAP32[$730 >> 2] = $102; //@line 6078
     $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 6079
     HEAP32[$731 >> 2] = $104; //@line 6080
     $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 6081
     HEAP32[$732 >> 2] = $106; //@line 6082
     $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 6083
     HEAP32[$733 >> 2] = $108; //@line 6084
     $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 6085
     HEAP32[$734 >> 2] = $112; //@line 6086
     $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 6087
     HEAP32[$735 >> 2] = $116; //@line 6088
     $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 6089
     HEAP32[$736 >> 2] = $118; //@line 6090
     $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 6091
     HEAP32[$737 >> 2] = $120; //@line 6092
     $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 6093
     HEAP32[$738 >> 2] = $122; //@line 6094
     $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 6095
     HEAP32[$739 >> 2] = $124; //@line 6096
     $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 6097
     HEAP32[$740 >> 2] = $126; //@line 6098
     $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 6099
     HEAP32[$741 >> 2] = $128; //@line 6100
     $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 6101
     HEAP32[$742 >> 2] = $130; //@line 6102
     $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 6103
     HEAP32[$743 >> 2] = $132; //@line 6104
     $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 6105
     HEAP32[$744 >> 2] = $134; //@line 6106
     $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 6107
     HEAP32[$745 >> 2] = $136; //@line 6108
     sp = STACKTOP; //@line 6109
     return;
    }
   case 68:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 6114
     break L2;
     break;
    }
   case 72:
    {
     $763 = HEAP32[$134 >> 2] | 0; //@line 6119
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 6122
     $766 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $763 + 64 | 0, $763 + 10 | 0, 15, $$1202$i) | 0; //@line 6123
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 6126
      $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 6127
      HEAP32[$767 >> 2] = $2; //@line 6128
      $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 6129
      HEAP32[$768 >> 2] = $4; //@line 6130
      $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 6131
      HEAP32[$769 >> 2] = $6; //@line 6132
      $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 6133
      HEAP32[$770 >> 2] = $8; //@line 6134
      $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 6135
      HEAP32[$771 >> 2] = $10; //@line 6136
      $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 6137
      HEAP32[$772 >> 2] = $12; //@line 6138
      $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 6139
      HEAP32[$773 >> 2] = $14; //@line 6140
      $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 6141
      HEAP32[$774 >> 2] = $16; //@line 6142
      $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 6143
      HEAP32[$775 >> 2] = $18; //@line 6144
      $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 6145
      HEAP32[$776 >> 2] = $20; //@line 6146
      $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 6147
      HEAP32[$777 >> 2] = $22; //@line 6148
      $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 6149
      HEAP32[$778 >> 2] = $24; //@line 6150
      $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 6151
      HEAP32[$779 >> 2] = $26; //@line 6152
      $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 6153
      HEAP32[$780 >> 2] = $28; //@line 6154
      $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 6155
      HEAP32[$781 >> 2] = $30; //@line 6156
      $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 6157
      HEAP32[$782 >> 2] = $32; //@line 6158
      $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 6159
      HEAP32[$783 >> 2] = $34; //@line 6160
      $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 6161
      HEAP32[$784 >> 2] = $36; //@line 6162
      $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 6163
      HEAP32[$785 >> 2] = $38; //@line 6164
      $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 6165
      HEAP32[$786 >> 2] = $161; //@line 6166
      $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 6167
      HEAP32[$787 >> 2] = $42; //@line 6168
      $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 6169
      HEAP32[$788 >> 2] = $44; //@line 6170
      $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 6171
      HEAP32[$789 >> 2] = $46; //@line 6172
      $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 6173
      HEAP32[$790 >> 2] = $48; //@line 6174
      $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 6175
      HEAP32[$791 >> 2] = $50; //@line 6176
      $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 6177
      HEAP32[$792 >> 2] = $52; //@line 6178
      $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 6179
      HEAP32[$793 >> 2] = $54; //@line 6180
      $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 6181
      HEAP32[$794 >> 2] = $56; //@line 6182
      $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 6183
      HEAP32[$795 >> 2] = $58; //@line 6184
      $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 6185
      HEAP32[$796 >> 2] = $60; //@line 6186
      $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 6187
      HEAP32[$797 >> 2] = $62; //@line 6188
      $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 6189
      HEAP32[$798 >> 2] = $64; //@line 6190
      $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 6191
      HEAP32[$799 >> 2] = $66; //@line 6192
      $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 6193
      HEAP32[$800 >> 2] = $68; //@line 6194
      $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 6195
      HEAP32[$801 >> 2] = $70; //@line 6196
      $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 6197
      HEAP32[$802 >> 2] = $72; //@line 6198
      $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 6199
      HEAP32[$803 >> 2] = $74; //@line 6200
      $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 6201
      HEAP32[$804 >> 2] = $76; //@line 6202
      $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 6203
      HEAP32[$805 >> 2] = $78; //@line 6204
      $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 6205
      HEAP32[$806 >> 2] = $80; //@line 6206
      $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 6207
      HEAP32[$807 >> 2] = $82; //@line 6208
      $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 6209
      HEAP32[$808 >> 2] = $84; //@line 6210
      $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 6211
      HEAP32[$809 >> 2] = $86; //@line 6212
      $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 6213
      HEAP32[$810 >> 2] = $88; //@line 6214
      $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 6215
      HEAP32[$811 >> 2] = $90; //@line 6216
      $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 6217
      HEAP32[$812 >> 2] = $92; //@line 6218
      $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 6219
      HEAP32[$813 >> 2] = $94; //@line 6220
      $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 6221
      HEAP32[$814 >> 2] = $96; //@line 6222
      $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 6223
      HEAP32[$815 >> 2] = $98; //@line 6224
      $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 6225
      HEAP32[$816 >> 2] = $100; //@line 6226
      $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 6227
      HEAP32[$817 >> 2] = $102; //@line 6228
      $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 6229
      HEAP32[$818 >> 2] = $104; //@line 6230
      $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 6231
      HEAP32[$819 >> 2] = $106; //@line 6232
      $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 6233
      HEAP32[$820 >> 2] = $108; //@line 6234
      $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 6235
      HEAP32[$821 >> 2] = $112; //@line 6236
      $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 6237
      HEAP32[$822 >> 2] = $116; //@line 6238
      $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 6239
      HEAP32[$823 >> 2] = $118; //@line 6240
      $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 6241
      HEAP32[$824 >> 2] = $120; //@line 6242
      $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 6243
      HEAP32[$825 >> 2] = $122; //@line 6244
      $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 6245
      HEAP32[$826 >> 2] = $124; //@line 6246
      $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 6247
      HEAP32[$827 >> 2] = $126; //@line 6248
      $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 6249
      HEAP32[$828 >> 2] = $128; //@line 6250
      $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 6251
      HEAP32[$829 >> 2] = $130; //@line 6252
      $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 6253
      HEAP32[$830 >> 2] = $132; //@line 6254
      $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 6255
      HEAP32[$831 >> 2] = $134; //@line 6256
      $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 6257
      HEAP32[$832 >> 2] = $136; //@line 6258
      sp = STACKTOP; //@line 6259
      return;
     }
     HEAP8[___async_retval >> 0] = $766; //@line 6263
     ___async_unwind = 0; //@line 6264
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 6265
     $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 6266
     HEAP32[$767 >> 2] = $2; //@line 6267
     $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 6268
     HEAP32[$768 >> 2] = $4; //@line 6269
     $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 6270
     HEAP32[$769 >> 2] = $6; //@line 6271
     $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 6272
     HEAP32[$770 >> 2] = $8; //@line 6273
     $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 6274
     HEAP32[$771 >> 2] = $10; //@line 6275
     $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 6276
     HEAP32[$772 >> 2] = $12; //@line 6277
     $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 6278
     HEAP32[$773 >> 2] = $14; //@line 6279
     $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 6280
     HEAP32[$774 >> 2] = $16; //@line 6281
     $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 6282
     HEAP32[$775 >> 2] = $18; //@line 6283
     $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 6284
     HEAP32[$776 >> 2] = $20; //@line 6285
     $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 6286
     HEAP32[$777 >> 2] = $22; //@line 6287
     $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 6288
     HEAP32[$778 >> 2] = $24; //@line 6289
     $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 6290
     HEAP32[$779 >> 2] = $26; //@line 6291
     $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 6292
     HEAP32[$780 >> 2] = $28; //@line 6293
     $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 6294
     HEAP32[$781 >> 2] = $30; //@line 6295
     $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 6296
     HEAP32[$782 >> 2] = $32; //@line 6297
     $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 6298
     HEAP32[$783 >> 2] = $34; //@line 6299
     $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 6300
     HEAP32[$784 >> 2] = $36; //@line 6301
     $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 6302
     HEAP32[$785 >> 2] = $38; //@line 6303
     $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 6304
     HEAP32[$786 >> 2] = $161; //@line 6305
     $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 6306
     HEAP32[$787 >> 2] = $42; //@line 6307
     $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 6308
     HEAP32[$788 >> 2] = $44; //@line 6309
     $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 6310
     HEAP32[$789 >> 2] = $46; //@line 6311
     $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 6312
     HEAP32[$790 >> 2] = $48; //@line 6313
     $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 6314
     HEAP32[$791 >> 2] = $50; //@line 6315
     $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 6316
     HEAP32[$792 >> 2] = $52; //@line 6317
     $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 6318
     HEAP32[$793 >> 2] = $54; //@line 6319
     $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 6320
     HEAP32[$794 >> 2] = $56; //@line 6321
     $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 6322
     HEAP32[$795 >> 2] = $58; //@line 6323
     $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 6324
     HEAP32[$796 >> 2] = $60; //@line 6325
     $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 6326
     HEAP32[$797 >> 2] = $62; //@line 6327
     $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 6328
     HEAP32[$798 >> 2] = $64; //@line 6329
     $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 6330
     HEAP32[$799 >> 2] = $66; //@line 6331
     $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 6332
     HEAP32[$800 >> 2] = $68; //@line 6333
     $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 6334
     HEAP32[$801 >> 2] = $70; //@line 6335
     $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 6336
     HEAP32[$802 >> 2] = $72; //@line 6337
     $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 6338
     HEAP32[$803 >> 2] = $74; //@line 6339
     $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 6340
     HEAP32[$804 >> 2] = $76; //@line 6341
     $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 6342
     HEAP32[$805 >> 2] = $78; //@line 6343
     $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 6344
     HEAP32[$806 >> 2] = $80; //@line 6345
     $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 6346
     HEAP32[$807 >> 2] = $82; //@line 6347
     $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 6348
     HEAP32[$808 >> 2] = $84; //@line 6349
     $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 6350
     HEAP32[$809 >> 2] = $86; //@line 6351
     $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 6352
     HEAP32[$810 >> 2] = $88; //@line 6353
     $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 6354
     HEAP32[$811 >> 2] = $90; //@line 6355
     $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 6356
     HEAP32[$812 >> 2] = $92; //@line 6357
     $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 6358
     HEAP32[$813 >> 2] = $94; //@line 6359
     $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 6360
     HEAP32[$814 >> 2] = $96; //@line 6361
     $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 6362
     HEAP32[$815 >> 2] = $98; //@line 6363
     $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 6364
     HEAP32[$816 >> 2] = $100; //@line 6365
     $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 6366
     HEAP32[$817 >> 2] = $102; //@line 6367
     $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 6368
     HEAP32[$818 >> 2] = $104; //@line 6369
     $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 6370
     HEAP32[$819 >> 2] = $106; //@line 6371
     $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 6372
     HEAP32[$820 >> 2] = $108; //@line 6373
     $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 6374
     HEAP32[$821 >> 2] = $112; //@line 6375
     $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 6376
     HEAP32[$822 >> 2] = $116; //@line 6377
     $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 6378
     HEAP32[$823 >> 2] = $118; //@line 6379
     $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 6380
     HEAP32[$824 >> 2] = $120; //@line 6381
     $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 6382
     HEAP32[$825 >> 2] = $122; //@line 6383
     $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 6384
     HEAP32[$826 >> 2] = $124; //@line 6385
     $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 6386
     HEAP32[$827 >> 2] = $126; //@line 6387
     $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 6388
     HEAP32[$828 >> 2] = $128; //@line 6389
     $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 6390
     HEAP32[$829 >> 2] = $130; //@line 6391
     $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 6392
     HEAP32[$830 >> 2] = $132; //@line 6393
     $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 6394
     HEAP32[$831 >> 2] = $134; //@line 6395
     $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 6396
     HEAP32[$832 >> 2] = $136; //@line 6397
     sp = STACKTOP; //@line 6398
     return;
    }
   case 77:
    {
     _mbed_tracef(2, 3737, 5086, $112); //@line 6403
     break L2;
     break;
    }
   case 83:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 6408
     break L2;
     break;
    }
   case 89:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 6413
     break L2;
     break;
    }
   case 95:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 6418
     break L2;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 6423
     break L2;
     break;
    }
   case 105:
    {
     _mbed_tracef(2, 3737, 5389, $132); //@line 6428
     break L2;
     break;
    }
   case 108:
    {
     if (($141 - $18 | 0) >= ($10 | 0)) {
      $943 = ___async_retval; //@line 6437
      HEAP32[$943 >> 2] = $32; //@line 6438
      return;
     }
     if ((HEAP8[$141 >> 0] | 0) == -1) {
      $933 = $141 + 1 | 0; //@line 6444
      HEAP32[$82 >> 2] = $933; //@line 6445
      $934 = $933; //@line 6446
      $936 = $18 - $934 + $10 | 0; //@line 6448
      HEAP16[$100 + 24 >> 1] = $936; //@line 6451
      if ($936 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $934; //@line 6456
       $943 = ___async_retval; //@line 6457
       HEAP32[$943 >> 2] = $32; //@line 6458
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 6462
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 6465
     $943 = ___async_retval; //@line 6466
     HEAP32[$943 >> 2] = $32; //@line 6467
     return;
    }
   }
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 6475
 $943 = ___async_retval; //@line 6476
 HEAP32[$943 >> 2] = $32; //@line 6477
 return;
}
function _sn_coap_parser__async_cb_81($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $260 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $278 = 0, $28 = 0, $281 = 0, $285 = 0, $288 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $435 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $594 = 0, $597 = 0, $598 = 0, $6 = 0, $60 = 0, $603 = 0, $606 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $749 = 0, $752 = 0, $753 = 0, $758 = 0, $76 = 0, $761 = 0, $763 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $830 = 0, $831 = 0, $832 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $845 = 0, $848 = 0, $852 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $864 = 0, $868 = 0, $871 = 0, $872 = 0, $877 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $890 = 0, $891 = 0, $896 = 0, $899 = 0, $90 = 0, $905 = 0, $906 = 0, $911 = 0, $912 = 0, $917 = 0, $92 = 0, $920 = 0, $924 = 0, $925 = 0, $933 = 0, $934 = 0, $936 = 0, $94 = 0, $943 = 0, $944 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $278$looptemp = 0, $603$looptemp = 0, $758$looptemp = 0, $845$looptemp = 0, $861$looptemp = 0, $877$looptemp = 0, $896$looptemp = 0, $917$looptemp = 0, $266$looptemp = 0;
 sp = STACKTOP; //@line 6533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6535
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6541
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6543
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6545
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6547
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6549
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6551
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6553
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6555
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6557
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6559
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6561
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6563
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6565
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6567
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6569
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6571
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6573
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6575
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6577
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6579
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6581
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6583
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6585
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 6587
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 6589
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 6591
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 6593
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 6595
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 6597
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 6599
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 6601
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 6603
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 6605
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 6607
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 6609
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 6611
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 6613
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 6615
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 6617
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 6619
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 6621
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 6623
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 6625
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 6627
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 6629
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 6631
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 6633
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 6635
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 6637
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 6639
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 6641
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 6643
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 6645
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 6647
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 6649
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 6651
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 6653
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 6655
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 6657
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 6659
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 6661
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 6663
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 6665
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 6667
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 6669
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6671
 HEAP32[(HEAP32[$134 >> 2] | 0) + 52 >> 2] = $AsyncRetVal; //@line 6674
 L2 : do {
  if (!$AsyncRetVal) {
   _mbed_tracef(2, 3737, 4561, $8); //@line 6678
  } else {
   _memcpy($AsyncRetVal | 0, $118 | 0, $122 | 0) | 0; //@line 6680
   HEAP32[$82 >> 2] = $118 + $122; //@line 6682
   $$reg2mem$0 = $40; //@line 6683
   L5 : while (1) {
    $924 = HEAP32[$4 >> 2] | 0; //@line 6685
    $925 = $924 - $18 | 0; //@line 6686
    $141 = $924; //@line 6689
    if (($925 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $925 & 65535) << 16 >> 16)) {
     label = 108; //@line 6696
     break;
    }
    $trunc277$i = HEAP8[$141 >> 0] | 0; //@line 6699
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 108; //@line 6702
     break;
    }
    $144 = $trunc277$i & 15; //@line 6706
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 6707
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 6712
      break L5;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$141 + 1 >> 0] | 0; //@line 6720
      $$sink214$i = 13; //@line 6720
      $$sink3$i = 1; //@line 6720
      label = 8; //@line 6721
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$141 + 1 >> 0] << 8) + 269 | 0; //@line 6733
      $$sink214$i = HEAPU8[$141 + 2 >> 0] | 0; //@line 6733
      $$sink3$i = 2; //@line 6733
      label = 8; //@line 6734
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 6738
      $163 = $141; //@line 6738
      $944 = $924; //@line 6738
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 6742
     $158 = $141 + $$sink3$i | 0; //@line 6744
     HEAP32[$82 >> 2] = $158; //@line 6745
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 6747
     $163 = $158; //@line 6747
     $944 = $158; //@line 6747
    }
    $161 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 6750
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 6754
      break L5;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$163 + 1 >> 0] | 0; //@line 6762
      $$sink216$i = 13; //@line 6762
      $$sink8$i = 1; //@line 6762
      label = 13; //@line 6763
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$163 + 1 >> 0] << 8) + 269 | 0; //@line 6775
      $$sink216$i = HEAPU8[$163 + 2 >> 0] | 0; //@line 6775
      $$sink8$i = 2; //@line 6775
      label = 13; //@line 6776
      break;
     }
    default:
     {
      $$1202$in$i = $144; //@line 6780
      $178 = $944; //@line 6780
      $219 = $163; //@line 6780
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 6784
     $175 = $163 + $$sink8$i | 0; //@line 6786
     HEAP32[$82 >> 2] = $175; //@line 6787
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 6789
     $178 = $175; //@line 6789
     $219 = $175; //@line 6789
    }
    $$1202$i = $$1202$in$i & 65535; //@line 6791
    $179 = $104 - $178 & 65535; //@line 6793
    $trunc$i = $161 & 65535; //@line 6794
    L22 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 63; //@line 6798
       break L5;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$134 >> 2] | 0)) {
        label = 16; //@line 6806
        break L5;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 6811
         break L5;
         break;
        }
       case 4:
        {
         label = 37; //@line 6816
         break L5;
         break;
        }
       case 3:
        {
         label = 40; //@line 6821
         break L5;
         break;
        }
       case 8:
        {
         label = 49; //@line 6826
         break L5;
         break;
        }
       case 20:
        {
         label = 60; //@line 6831
         break L5;
         break;
        }
       case 11:
        {
         label = 63; //@line 6836
         break L5;
         break;
        }
       case 15:
        {
         label = 72; //@line 6841
         break L5;
         break;
        }
       case 12:
        {
         break L22;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 6852
          break L5;
         }
         $272 = $219 + 1 | 0; //@line 6855
         HEAP32[$82 >> 2] = $272; //@line 6856
         $273 = $$1202$in$i & 255; //@line 6857
         if (!($273 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 6860
         } else {
          $$045$i221$i = $273; //@line 6862
          $$06$i220$i = 0; //@line 6862
          $278 = $272; //@line 6862
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 6864
           $278$looptemp = $278;
           $278 = $278 + 1 | 0; //@line 6866
           HEAP32[$82 >> 2] = $278; //@line 6867
           $281 = $$06$i220$i << 8 | HEAPU8[$278$looptemp >> 0]; //@line 6870
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $281; //@line 6873
            break;
           } else {
            $$06$i220$i = $281; //@line 6876
           }
          }
         }
         HEAP32[(HEAP32[$134 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 6882
         $$reg2mem$0 = $161; //@line 6883
         continue L5;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 56; //@line 6890
          break L5;
         }
         $594 = (HEAP32[$134 >> 2] | 0) + 28 | 0; //@line 6894
         if ((HEAP32[$594 >> 2] | 0) != -1) {
          label = 56; //@line 6898
          break L5;
         }
         $597 = $219 + 1 | 0; //@line 6901
         HEAP32[$82 >> 2] = $597; //@line 6902
         $598 = $$1202$in$i & 255; //@line 6903
         if (!($598 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 6906
         } else {
          $$045$i263$i = $598; //@line 6908
          $$06$i262$i = 0; //@line 6908
          $603 = $597; //@line 6908
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 6910
           $603$looptemp = $603;
           $603 = $603 + 1 | 0; //@line 6912
           HEAP32[$82 >> 2] = $603; //@line 6913
           $606 = $$06$i262$i << 8 | HEAPU8[$603$looptemp >> 0]; //@line 6916
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $606; //@line 6919
            break;
           } else {
            $$06$i262$i = $606; //@line 6922
           }
          }
         }
         HEAP32[$594 >> 2] = $$0$lcssa$i265$i; //@line 6926
         $$reg2mem$0 = $161; //@line 6927
         continue L5;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 68; //@line 6934
          break L5;
         }
         $749 = (HEAP32[$134 >> 2] | 0) + 32 | 0; //@line 6938
         if ((HEAP32[$749 >> 2] | 0) != -1) {
          label = 68; //@line 6942
          break L5;
         }
         $752 = $219 + 1 | 0; //@line 6945
         HEAP32[$82 >> 2] = $752; //@line 6946
         $753 = $$1202$in$i & 255; //@line 6947
         if (!($753 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 6950
         } else {
          $$045$i270$i = $753; //@line 6952
          $$06$i269$i = 0; //@line 6952
          $758 = $752; //@line 6952
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 6954
           $758$looptemp = $758;
           $758 = $758 + 1 | 0; //@line 6956
           HEAP32[$82 >> 2] = $758; //@line 6957
           $761 = $$06$i269$i << 8 | HEAPU8[$758$looptemp >> 0]; //@line 6960
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $761; //@line 6963
            break;
           } else {
            $$06$i269$i = $761; //@line 6966
           }
          }
         }
         HEAP32[$749 >> 2] = $$0$lcssa$i272$i; //@line 6970
         $$reg2mem$0 = $161; //@line 6971
         continue L5;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 77; //@line 6978
          break L5;
         }
         $836 = (HEAP32[$134 >> 2] | 0) + 40 | 0; //@line 6982
         if ((HEAP32[$836 >> 2] | 0) != -1) {
          label = 77; //@line 6986
          break L5;
         }
         $839 = $219 + 1 | 0; //@line 6989
         HEAP32[$82 >> 2] = $839; //@line 6990
         $840 = $$1202$in$i & 255; //@line 6991
         if (!($840 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 6994
         } else {
          $$045$i256$i = $840; //@line 6996
          $$06$i255$i = 0; //@line 6996
          $845 = $839; //@line 6996
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 6998
           $845$looptemp = $845;
           $845 = $845 + 1 | 0; //@line 7000
           HEAP32[$82 >> 2] = $845; //@line 7001
           $848 = $$06$i255$i << 8 | HEAPU8[$845$looptemp >> 0]; //@line 7004
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $848; //@line 7007
            break;
           } else {
            $$06$i255$i = $848; //@line 7010
           }
          }
         }
         HEAP32[$836 >> 2] = $$0$lcssa$i258$i; //@line 7014
         $$reg2mem$0 = $161; //@line 7015
         continue L5;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 83; //@line 7022
          break L5;
         }
         $852 = (HEAP32[$134 >> 2] | 0) + 36 | 0; //@line 7026
         if ((HEAP32[$852 >> 2] | 0) != -1) {
          label = 83; //@line 7030
          break L5;
         }
         $855 = $219 + 1 | 0; //@line 7033
         HEAP32[$82 >> 2] = $855; //@line 7034
         $856 = $$1202$in$i & 255; //@line 7035
         if (!($856 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 7038
         } else {
          $$045$i249$i = $856; //@line 7040
          $$06$i248$i = 0; //@line 7040
          $861 = $855; //@line 7040
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 7042
           $861$looptemp = $861;
           $861 = $861 + 1 | 0; //@line 7044
           HEAP32[$82 >> 2] = $861; //@line 7045
           $864 = $$06$i248$i << 8 | HEAPU8[$861$looptemp >> 0]; //@line 7048
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $864; //@line 7051
            break;
           } else {
            $$06$i248$i = $864; //@line 7054
           }
          }
         }
         HEAP32[$852 >> 2] = $$0$lcssa$i251$i; //@line 7058
         $$reg2mem$0 = $161; //@line 7059
         continue L5;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 89; //@line 7066
          break L5;
         }
         $868 = (HEAP32[$134 >> 2] | 0) + 12 | 0; //@line 7070
         if ((HEAP32[$868 >> 2] | 0) != -1) {
          label = 89; //@line 7074
          break L5;
         }
         $871 = $219 + 1 | 0; //@line 7077
         HEAP32[$82 >> 2] = $871; //@line 7078
         $872 = $$1202$in$i & 255; //@line 7079
         if (!($872 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 7082
         } else {
          $$045$i242$i = $872; //@line 7084
          $$06$i241$i = 0; //@line 7084
          $877 = $871; //@line 7084
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 7086
           $877$looptemp = $877;
           $877 = $877 + 1 | 0; //@line 7088
           HEAP32[$82 >> 2] = $877; //@line 7089
           $880 = $$06$i241$i << 8 | HEAPU8[$877$looptemp >> 0]; //@line 7092
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $880; //@line 7095
            break;
           } else {
            $$06$i241$i = $880; //@line 7098
           }
          }
         }
         HEAP32[$868 >> 2] = $$0$lcssa$i244$i; //@line 7102
         $$reg2mem$0 = $161; //@line 7103
         continue L5;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 95; //@line 7110
          break L5;
         }
         $884 = (HEAP32[$134 >> 2] | 0) + 1 | 0; //@line 7114
         $885 = HEAP8[$884 >> 0] | 0; //@line 7115
         if ($885 & 1) {
          label = 95; //@line 7119
          break L5;
         }
         HEAP8[$884 >> 0] = $885 | 1; //@line 7123
         $890 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 7125
         HEAP32[$82 >> 2] = $890; //@line 7126
         $891 = $$1202$in$i & 255; //@line 7127
         if (!($891 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 7130
         } else {
          $$045$i235$i = $891; //@line 7132
          $$06$i234$i = 0; //@line 7132
          $896 = $890; //@line 7132
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 7134
           $896$looptemp = $896;
           $896 = $896 + 1 | 0; //@line 7136
           HEAP32[$82 >> 2] = $896; //@line 7137
           $899 = $$06$i234$i << 8 | HEAPU8[$896$looptemp >> 0]; //@line 7140
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $899; //@line 7143
            break;
           } else {
            $$06$i234$i = $899; //@line 7146
           }
          }
         }
         HEAP32[(HEAP32[$134 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 7152
         $$reg2mem$0 = $161; //@line 7153
         continue L5;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 101; //@line 7160
          break L5;
         }
         $905 = (HEAP32[$134 >> 2] | 0) + 1 | 0; //@line 7164
         $906 = HEAP8[$905 >> 0] | 0; //@line 7165
         if ($906 & 2) {
          label = 101; //@line 7169
          break L5;
         }
         HEAP8[$905 >> 0] = $906 | 2; //@line 7173
         $911 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 7175
         HEAP32[$82 >> 2] = $911; //@line 7176
         $912 = $$1202$in$i & 255; //@line 7177
         if (!($912 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 7180
         } else {
          $$045$i228$i = $912; //@line 7182
          $$06$i227$i = 0; //@line 7182
          $917 = $911; //@line 7182
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 7184
           $917$looptemp = $917;
           $917 = $917 + 1 | 0; //@line 7186
           HEAP32[$82 >> 2] = $917; //@line 7187
           $920 = $$06$i227$i << 8 | HEAPU8[$917$looptemp >> 0]; //@line 7190
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $920; //@line 7193
            break;
           } else {
            $$06$i227$i = $920; //@line 7196
           }
          }
         }
         HEAP32[(HEAP32[$134 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 7202
         $$reg2mem$0 = $161; //@line 7203
         continue L5;
         break;
        }
       default:
        {
         label = 105; //@line 7208
         break L5;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 105; //@line 7218
       break L5;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 7225
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 7231
     break;
    }
    $260 = $219 + 1 | 0; //@line 7234
    HEAP32[$82 >> 2] = $260; //@line 7235
    $261 = $$1202$in$i & 255; //@line 7236
    if (!($261 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 7239
    } else {
     $$045$i$i = $261; //@line 7241
     $$06$i$i = 0; //@line 7241
     $266 = $260; //@line 7241
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 7243
      $266$looptemp = $266;
      $266 = $266 + 1 | 0; //@line 7245
      HEAP32[$82 >> 2] = $266; //@line 7246
      $269 = $$06$i$i << 8 | HEAPU8[$266$looptemp >> 0]; //@line 7249
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $269; //@line 7252
       break;
      } else {
       $$06$i$i = $269; //@line 7255
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 7259
    $$reg2mem$0 = $161; //@line 7260
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 7264
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 7269
     break L2;
     break;
    }
   case 16:
    {
     $182 = HEAP32[$124 >> 2] | 0; //@line 7274
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 7275
     $183 = FUNCTION_TABLE_ii[$182 & 15](68) | 0; //@line 7276
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 7279
      $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 7280
      HEAP16[$184 >> 1] = $179; //@line 7281
      $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 7282
      HEAP32[$185 >> 2] = $2; //@line 7283
      $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 7284
      HEAP32[$186 >> 2] = $4; //@line 7285
      $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 7286
      HEAP32[$187 >> 2] = $6; //@line 7287
      $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 7288
      HEAP32[$188 >> 2] = $128; //@line 7289
      $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 7290
      HEAP32[$189 >> 2] = $8; //@line 7291
      $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 7292
      HEAP32[$190 >> 2] = $10; //@line 7293
      $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 7294
      HEAP32[$191 >> 2] = $12; //@line 7295
      $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 7296
      HEAP32[$192 >> 2] = $14; //@line 7297
      $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 7298
      HEAP32[$193 >> 2] = $16; //@line 7299
      $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 7300
      HEAP32[$194 >> 2] = $18; //@line 7301
      $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 7302
      HEAP32[$195 >> 2] = $20; //@line 7303
      $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 7304
      HEAP32[$196 >> 2] = $22; //@line 7305
      $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 7306
      HEAP32[$197 >> 2] = $24; //@line 7307
      $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 7308
      HEAP32[$198 >> 2] = $26; //@line 7309
      $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 7310
      HEAP16[$199 >> 1] = $$1202$i; //@line 7311
      $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 7312
      HEAP32[$200 >> 2] = $28; //@line 7313
      $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 7314
      HEAP32[$201 >> 2] = $30; //@line 7315
      $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 7316
      HEAP32[$202 >> 2] = $32; //@line 7317
      $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 7318
      HEAP32[$203 >> 2] = $34; //@line 7319
      $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 7320
      HEAP32[$204 >> 2] = $161; //@line 7321
      $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 7322
      HEAP32[$205 >> 2] = $38; //@line 7323
      $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 7324
      HEAP32[$206 >> 2] = $$1202$in$i; //@line 7325
      $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 7326
      HEAP32[$207 >> 2] = $42; //@line 7327
      $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 7328
      HEAP32[$208 >> 2] = $36; //@line 7329
      $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 7330
      HEAP32[$209 >> 2] = $44; //@line 7331
      $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 7332
      HEAP32[$210 >> 2] = $46; //@line 7333
      $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 7334
      HEAP32[$211 >> 2] = $48; //@line 7335
      $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 7336
      HEAP32[$212 >> 2] = $50; //@line 7337
      $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 7338
      HEAP32[$213 >> 2] = $52; //@line 7339
      $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 7340
      HEAP32[$214 >> 2] = $54; //@line 7341
      $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 7342
      HEAP32[$215 >> 2] = $56; //@line 7343
      $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 7344
      HEAP32[$216 >> 2] = $58; //@line 7345
      $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 7346
      HEAP32[$217 >> 2] = $60; //@line 7347
      $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 7348
      HEAP32[$218 >> 2] = $219; //@line 7349
      $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 7350
      HEAP32[$220 >> 2] = $62; //@line 7351
      $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 7352
      HEAP32[$221 >> 2] = $64; //@line 7353
      $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 7354
      HEAP32[$222 >> 2] = $66; //@line 7355
      $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 7356
      HEAP32[$223 >> 2] = $68; //@line 7357
      $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 7358
      HEAP32[$224 >> 2] = $70; //@line 7359
      $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 7360
      HEAP32[$225 >> 2] = $72; //@line 7361
      $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 7362
      HEAP32[$226 >> 2] = $74; //@line 7363
      $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 7364
      HEAP32[$227 >> 2] = $76; //@line 7365
      $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 7366
      HEAP32[$228 >> 2] = $78; //@line 7367
      $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 7368
      HEAP32[$229 >> 2] = $80; //@line 7369
      $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 7370
      HEAP32[$230 >> 2] = $82; //@line 7371
      $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 7372
      HEAP32[$231 >> 2] = $84; //@line 7373
      $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 7374
      HEAP32[$232 >> 2] = $86; //@line 7375
      $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 7376
      HEAP32[$233 >> 2] = $88; //@line 7377
      $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 7378
      HEAP32[$234 >> 2] = $90; //@line 7379
      $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 7380
      HEAP32[$235 >> 2] = $92; //@line 7381
      $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 7382
      HEAP32[$236 >> 2] = $94; //@line 7383
      $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 7384
      HEAP32[$237 >> 2] = $96; //@line 7385
      $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 7386
      HEAP32[$238 >> 2] = $98; //@line 7387
      $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 7388
      HEAP32[$239 >> 2] = $100; //@line 7389
      $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 7390
      HEAP32[$240 >> 2] = $102; //@line 7391
      $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 7392
      HEAP32[$241 >> 2] = $104; //@line 7393
      $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 7394
      HEAP32[$242 >> 2] = $106; //@line 7395
      $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 7396
      HEAP16[$243 >> 1] = $trunc$i; //@line 7397
      $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 7398
      HEAP32[$244 >> 2] = $108; //@line 7399
      $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 7400
      HEAP32[$245 >> 2] = $110; //@line 7401
      $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 7402
      HEAP32[$246 >> 2] = $112; //@line 7403
      $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 7404
      HEAP32[$247 >> 2] = $114; //@line 7405
      $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 7406
      HEAP32[$248 >> 2] = $116; //@line 7407
      $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 7408
      HEAP32[$249 >> 2] = $120; //@line 7409
      $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 7410
      HEAP32[$250 >> 2] = $124; //@line 7411
      $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 7412
      HEAP32[$251 >> 2] = $126; //@line 7413
      $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 7414
      HEAP32[$252 >> 2] = $130; //@line 7415
      $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 7416
      HEAP32[$253 >> 2] = $132; //@line 7417
      $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 7418
      HEAP32[$254 >> 2] = $134; //@line 7419
      $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 7420
      HEAP32[$255 >> 2] = $136; //@line 7421
      sp = STACKTOP; //@line 7422
      return;
     }
     HEAP32[___async_retval >> 2] = $183; //@line 7426
     ___async_unwind = 0; //@line 7427
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 7428
     $184 = $ReallocAsyncCtx3 + 4 | 0; //@line 7429
     HEAP16[$184 >> 1] = $179; //@line 7430
     $185 = $ReallocAsyncCtx3 + 8 | 0; //@line 7431
     HEAP32[$185 >> 2] = $2; //@line 7432
     $186 = $ReallocAsyncCtx3 + 12 | 0; //@line 7433
     HEAP32[$186 >> 2] = $4; //@line 7434
     $187 = $ReallocAsyncCtx3 + 16 | 0; //@line 7435
     HEAP32[$187 >> 2] = $6; //@line 7436
     $188 = $ReallocAsyncCtx3 + 20 | 0; //@line 7437
     HEAP32[$188 >> 2] = $128; //@line 7438
     $189 = $ReallocAsyncCtx3 + 24 | 0; //@line 7439
     HEAP32[$189 >> 2] = $8; //@line 7440
     $190 = $ReallocAsyncCtx3 + 28 | 0; //@line 7441
     HEAP32[$190 >> 2] = $10; //@line 7442
     $191 = $ReallocAsyncCtx3 + 32 | 0; //@line 7443
     HEAP32[$191 >> 2] = $12; //@line 7444
     $192 = $ReallocAsyncCtx3 + 36 | 0; //@line 7445
     HEAP32[$192 >> 2] = $14; //@line 7446
     $193 = $ReallocAsyncCtx3 + 40 | 0; //@line 7447
     HEAP32[$193 >> 2] = $16; //@line 7448
     $194 = $ReallocAsyncCtx3 + 44 | 0; //@line 7449
     HEAP32[$194 >> 2] = $18; //@line 7450
     $195 = $ReallocAsyncCtx3 + 48 | 0; //@line 7451
     HEAP32[$195 >> 2] = $20; //@line 7452
     $196 = $ReallocAsyncCtx3 + 52 | 0; //@line 7453
     HEAP32[$196 >> 2] = $22; //@line 7454
     $197 = $ReallocAsyncCtx3 + 56 | 0; //@line 7455
     HEAP32[$197 >> 2] = $24; //@line 7456
     $198 = $ReallocAsyncCtx3 + 60 | 0; //@line 7457
     HEAP32[$198 >> 2] = $26; //@line 7458
     $199 = $ReallocAsyncCtx3 + 64 | 0; //@line 7459
     HEAP16[$199 >> 1] = $$1202$i; //@line 7460
     $200 = $ReallocAsyncCtx3 + 68 | 0; //@line 7461
     HEAP32[$200 >> 2] = $28; //@line 7462
     $201 = $ReallocAsyncCtx3 + 72 | 0; //@line 7463
     HEAP32[$201 >> 2] = $30; //@line 7464
     $202 = $ReallocAsyncCtx3 + 76 | 0; //@line 7465
     HEAP32[$202 >> 2] = $32; //@line 7466
     $203 = $ReallocAsyncCtx3 + 80 | 0; //@line 7467
     HEAP32[$203 >> 2] = $34; //@line 7468
     $204 = $ReallocAsyncCtx3 + 84 | 0; //@line 7469
     HEAP32[$204 >> 2] = $161; //@line 7470
     $205 = $ReallocAsyncCtx3 + 88 | 0; //@line 7471
     HEAP32[$205 >> 2] = $38; //@line 7472
     $206 = $ReallocAsyncCtx3 + 92 | 0; //@line 7473
     HEAP32[$206 >> 2] = $$1202$in$i; //@line 7474
     $207 = $ReallocAsyncCtx3 + 96 | 0; //@line 7475
     HEAP32[$207 >> 2] = $42; //@line 7476
     $208 = $ReallocAsyncCtx3 + 100 | 0; //@line 7477
     HEAP32[$208 >> 2] = $36; //@line 7478
     $209 = $ReallocAsyncCtx3 + 104 | 0; //@line 7479
     HEAP32[$209 >> 2] = $44; //@line 7480
     $210 = $ReallocAsyncCtx3 + 108 | 0; //@line 7481
     HEAP32[$210 >> 2] = $46; //@line 7482
     $211 = $ReallocAsyncCtx3 + 112 | 0; //@line 7483
     HEAP32[$211 >> 2] = $48; //@line 7484
     $212 = $ReallocAsyncCtx3 + 116 | 0; //@line 7485
     HEAP32[$212 >> 2] = $50; //@line 7486
     $213 = $ReallocAsyncCtx3 + 120 | 0; //@line 7487
     HEAP32[$213 >> 2] = $52; //@line 7488
     $214 = $ReallocAsyncCtx3 + 124 | 0; //@line 7489
     HEAP32[$214 >> 2] = $54; //@line 7490
     $215 = $ReallocAsyncCtx3 + 128 | 0; //@line 7491
     HEAP32[$215 >> 2] = $56; //@line 7492
     $216 = $ReallocAsyncCtx3 + 132 | 0; //@line 7493
     HEAP32[$216 >> 2] = $58; //@line 7494
     $217 = $ReallocAsyncCtx3 + 136 | 0; //@line 7495
     HEAP32[$217 >> 2] = $60; //@line 7496
     $218 = $ReallocAsyncCtx3 + 140 | 0; //@line 7497
     HEAP32[$218 >> 2] = $219; //@line 7498
     $220 = $ReallocAsyncCtx3 + 144 | 0; //@line 7499
     HEAP32[$220 >> 2] = $62; //@line 7500
     $221 = $ReallocAsyncCtx3 + 148 | 0; //@line 7501
     HEAP32[$221 >> 2] = $64; //@line 7502
     $222 = $ReallocAsyncCtx3 + 152 | 0; //@line 7503
     HEAP32[$222 >> 2] = $66; //@line 7504
     $223 = $ReallocAsyncCtx3 + 156 | 0; //@line 7505
     HEAP32[$223 >> 2] = $68; //@line 7506
     $224 = $ReallocAsyncCtx3 + 160 | 0; //@line 7507
     HEAP32[$224 >> 2] = $70; //@line 7508
     $225 = $ReallocAsyncCtx3 + 164 | 0; //@line 7509
     HEAP32[$225 >> 2] = $72; //@line 7510
     $226 = $ReallocAsyncCtx3 + 168 | 0; //@line 7511
     HEAP32[$226 >> 2] = $74; //@line 7512
     $227 = $ReallocAsyncCtx3 + 172 | 0; //@line 7513
     HEAP32[$227 >> 2] = $76; //@line 7514
     $228 = $ReallocAsyncCtx3 + 176 | 0; //@line 7515
     HEAP32[$228 >> 2] = $78; //@line 7516
     $229 = $ReallocAsyncCtx3 + 180 | 0; //@line 7517
     HEAP32[$229 >> 2] = $80; //@line 7518
     $230 = $ReallocAsyncCtx3 + 184 | 0; //@line 7519
     HEAP32[$230 >> 2] = $82; //@line 7520
     $231 = $ReallocAsyncCtx3 + 188 | 0; //@line 7521
     HEAP32[$231 >> 2] = $84; //@line 7522
     $232 = $ReallocAsyncCtx3 + 192 | 0; //@line 7523
     HEAP32[$232 >> 2] = $86; //@line 7524
     $233 = $ReallocAsyncCtx3 + 196 | 0; //@line 7525
     HEAP32[$233 >> 2] = $88; //@line 7526
     $234 = $ReallocAsyncCtx3 + 200 | 0; //@line 7527
     HEAP32[$234 >> 2] = $90; //@line 7528
     $235 = $ReallocAsyncCtx3 + 204 | 0; //@line 7529
     HEAP32[$235 >> 2] = $92; //@line 7530
     $236 = $ReallocAsyncCtx3 + 208 | 0; //@line 7531
     HEAP32[$236 >> 2] = $94; //@line 7532
     $237 = $ReallocAsyncCtx3 + 212 | 0; //@line 7533
     HEAP32[$237 >> 2] = $96; //@line 7534
     $238 = $ReallocAsyncCtx3 + 216 | 0; //@line 7535
     HEAP32[$238 >> 2] = $98; //@line 7536
     $239 = $ReallocAsyncCtx3 + 220 | 0; //@line 7537
     HEAP32[$239 >> 2] = $100; //@line 7538
     $240 = $ReallocAsyncCtx3 + 224 | 0; //@line 7539
     HEAP32[$240 >> 2] = $102; //@line 7540
     $241 = $ReallocAsyncCtx3 + 228 | 0; //@line 7541
     HEAP32[$241 >> 2] = $104; //@line 7542
     $242 = $ReallocAsyncCtx3 + 232 | 0; //@line 7543
     HEAP32[$242 >> 2] = $106; //@line 7544
     $243 = $ReallocAsyncCtx3 + 236 | 0; //@line 7545
     HEAP16[$243 >> 1] = $trunc$i; //@line 7546
     $244 = $ReallocAsyncCtx3 + 240 | 0; //@line 7547
     HEAP32[$244 >> 2] = $108; //@line 7548
     $245 = $ReallocAsyncCtx3 + 244 | 0; //@line 7549
     HEAP32[$245 >> 2] = $110; //@line 7550
     $246 = $ReallocAsyncCtx3 + 248 | 0; //@line 7551
     HEAP32[$246 >> 2] = $112; //@line 7552
     $247 = $ReallocAsyncCtx3 + 252 | 0; //@line 7553
     HEAP32[$247 >> 2] = $114; //@line 7554
     $248 = $ReallocAsyncCtx3 + 256 | 0; //@line 7555
     HEAP32[$248 >> 2] = $116; //@line 7556
     $249 = $ReallocAsyncCtx3 + 260 | 0; //@line 7557
     HEAP32[$249 >> 2] = $120; //@line 7558
     $250 = $ReallocAsyncCtx3 + 264 | 0; //@line 7559
     HEAP32[$250 >> 2] = $124; //@line 7560
     $251 = $ReallocAsyncCtx3 + 268 | 0; //@line 7561
     HEAP32[$251 >> 2] = $126; //@line 7562
     $252 = $ReallocAsyncCtx3 + 272 | 0; //@line 7563
     HEAP32[$252 >> 2] = $130; //@line 7564
     $253 = $ReallocAsyncCtx3 + 276 | 0; //@line 7565
     HEAP32[$253 >> 2] = $132; //@line 7566
     $254 = $ReallocAsyncCtx3 + 280 | 0; //@line 7567
     HEAP32[$254 >> 2] = $134; //@line 7568
     $255 = $ReallocAsyncCtx3 + 284 | 0; //@line 7569
     HEAP32[$255 >> 2] = $136; //@line 7570
     sp = STACKTOP; //@line 7571
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $120); //@line 7576
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 7581
     break L2;
     break;
    }
   case 31:
    {
     $285 = $$1202$in$i & 65535; //@line 7586
     if (($$1202$i + -1 & 65535) <= 1033) {
      $288 = HEAP32[$134 >> 2] | 0; //@line 7590
      if (!(HEAP32[$288 + 44 >> 2] | 0)) {
       HEAP16[$288 + 2 >> 1] = $$1202$i; //@line 7596
       $293 = $219 + 1 | 0; //@line 7597
       HEAP32[$82 >> 2] = $293; //@line 7598
       $294 = HEAP32[$124 >> 2] | 0; //@line 7599
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 7600
       $295 = FUNCTION_TABLE_ii[$294 & 15]($$1202$i) | 0; //@line 7601
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 7604
        $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 7605
        HEAP32[$296 >> 2] = $2; //@line 7606
        $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 7607
        HEAP32[$297 >> 2] = $4; //@line 7608
        $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 7609
        HEAP32[$298 >> 2] = $6; //@line 7610
        $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 7611
        HEAP32[$299 >> 2] = $8; //@line 7612
        $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 7613
        HEAP32[$300 >> 2] = $10; //@line 7614
        $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 7615
        HEAP32[$301 >> 2] = $12; //@line 7616
        $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 7617
        HEAP32[$302 >> 2] = $14; //@line 7618
        $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 7619
        HEAP32[$303 >> 2] = $16; //@line 7620
        $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 7621
        HEAP32[$304 >> 2] = $18; //@line 7622
        $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 7623
        HEAP32[$305 >> 2] = $20; //@line 7624
        $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 7625
        HEAP32[$306 >> 2] = $22; //@line 7626
        $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 7627
        HEAP32[$307 >> 2] = $24; //@line 7628
        $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 7629
        HEAP32[$308 >> 2] = $26; //@line 7630
        $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 7631
        HEAP32[$309 >> 2] = $28; //@line 7632
        $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 7633
        HEAP32[$310 >> 2] = $30; //@line 7634
        $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 7635
        HEAP32[$311 >> 2] = $32; //@line 7636
        $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 7637
        HEAP32[$312 >> 2] = $34; //@line 7638
        $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 7639
        HEAP32[$313 >> 2] = $36; //@line 7640
        $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 7641
        HEAP32[$314 >> 2] = $38; //@line 7642
        $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 7643
        HEAP32[$315 >> 2] = $161; //@line 7644
        $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 7645
        HEAP32[$316 >> 2] = $42; //@line 7646
        $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 7647
        HEAP32[$317 >> 2] = $44; //@line 7648
        $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 7649
        HEAP32[$318 >> 2] = $46; //@line 7650
        $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 7651
        HEAP32[$319 >> 2] = $48; //@line 7652
        $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 7653
        HEAP32[$320 >> 2] = $50; //@line 7654
        $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 7655
        HEAP32[$321 >> 2] = $52; //@line 7656
        $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 7657
        HEAP32[$322 >> 2] = $54; //@line 7658
        $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 7659
        HEAP32[$323 >> 2] = $56; //@line 7660
        $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 7661
        HEAP32[$324 >> 2] = $58; //@line 7662
        $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 7663
        HEAP32[$325 >> 2] = $60; //@line 7664
        $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 7665
        HEAP32[$326 >> 2] = $62; //@line 7666
        $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 7667
        HEAP32[$327 >> 2] = $64; //@line 7668
        $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 7669
        HEAP32[$328 >> 2] = $66; //@line 7670
        $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 7671
        HEAP32[$329 >> 2] = $68; //@line 7672
        $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 7673
        HEAP32[$330 >> 2] = $70; //@line 7674
        $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 7675
        HEAP32[$331 >> 2] = $72; //@line 7676
        $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 7677
        HEAP32[$332 >> 2] = $74; //@line 7678
        $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 7679
        HEAP32[$333 >> 2] = $76; //@line 7680
        $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 7681
        HEAP32[$334 >> 2] = $78; //@line 7682
        $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 7683
        HEAP32[$335 >> 2] = $80; //@line 7684
        $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 7685
        HEAP32[$336 >> 2] = $82; //@line 7686
        $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 7687
        HEAP32[$337 >> 2] = $84; //@line 7688
        $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 7689
        HEAP32[$338 >> 2] = $86; //@line 7690
        $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 7691
        HEAP32[$339 >> 2] = $88; //@line 7692
        $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 7693
        HEAP32[$340 >> 2] = $90; //@line 7694
        $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 7695
        HEAP32[$341 >> 2] = $92; //@line 7696
        $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 7697
        HEAP32[$342 >> 2] = $94; //@line 7698
        $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 7699
        HEAP32[$343 >> 2] = $96; //@line 7700
        $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 7701
        HEAP32[$344 >> 2] = $98; //@line 7702
        $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 7703
        HEAP32[$345 >> 2] = $100; //@line 7704
        $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 7705
        HEAP32[$346 >> 2] = $102; //@line 7706
        $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 7707
        HEAP32[$347 >> 2] = $104; //@line 7708
        $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 7709
        HEAP32[$348 >> 2] = $106; //@line 7710
        $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 7711
        HEAP32[$349 >> 2] = $108; //@line 7712
        $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 7713
        HEAP32[$350 >> 2] = $293; //@line 7714
        $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 7715
        HEAP32[$351 >> 2] = $110; //@line 7716
        $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 7717
        HEAP32[$352 >> 2] = $285; //@line 7718
        $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 7719
        HEAP32[$353 >> 2] = $112; //@line 7720
        $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 7721
        HEAP32[$354 >> 2] = $114; //@line 7722
        $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 7723
        HEAP32[$355 >> 2] = $116; //@line 7724
        $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 7725
        HEAP32[$356 >> 2] = $120; //@line 7726
        $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 7727
        HEAP32[$357 >> 2] = $124; //@line 7728
        $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 7729
        HEAP32[$358 >> 2] = $126; //@line 7730
        $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 7731
        HEAP32[$359 >> 2] = $128; //@line 7732
        $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 7733
        HEAP32[$360 >> 2] = $130; //@line 7734
        $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 7735
        HEAP32[$361 >> 2] = $132; //@line 7736
        $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 7737
        HEAP32[$362 >> 2] = $134; //@line 7738
        $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 7739
        HEAP32[$363 >> 2] = $136; //@line 7740
        sp = STACKTOP; //@line 7741
        return;
       }
       HEAP32[___async_retval >> 2] = $295; //@line 7745
       ___async_unwind = 0; //@line 7746
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 7747
       $296 = $ReallocAsyncCtx4 + 4 | 0; //@line 7748
       HEAP32[$296 >> 2] = $2; //@line 7749
       $297 = $ReallocAsyncCtx4 + 8 | 0; //@line 7750
       HEAP32[$297 >> 2] = $4; //@line 7751
       $298 = $ReallocAsyncCtx4 + 12 | 0; //@line 7752
       HEAP32[$298 >> 2] = $6; //@line 7753
       $299 = $ReallocAsyncCtx4 + 16 | 0; //@line 7754
       HEAP32[$299 >> 2] = $8; //@line 7755
       $300 = $ReallocAsyncCtx4 + 20 | 0; //@line 7756
       HEAP32[$300 >> 2] = $10; //@line 7757
       $301 = $ReallocAsyncCtx4 + 24 | 0; //@line 7758
       HEAP32[$301 >> 2] = $12; //@line 7759
       $302 = $ReallocAsyncCtx4 + 28 | 0; //@line 7760
       HEAP32[$302 >> 2] = $14; //@line 7761
       $303 = $ReallocAsyncCtx4 + 32 | 0; //@line 7762
       HEAP32[$303 >> 2] = $16; //@line 7763
       $304 = $ReallocAsyncCtx4 + 36 | 0; //@line 7764
       HEAP32[$304 >> 2] = $18; //@line 7765
       $305 = $ReallocAsyncCtx4 + 40 | 0; //@line 7766
       HEAP32[$305 >> 2] = $20; //@line 7767
       $306 = $ReallocAsyncCtx4 + 44 | 0; //@line 7768
       HEAP32[$306 >> 2] = $22; //@line 7769
       $307 = $ReallocAsyncCtx4 + 48 | 0; //@line 7770
       HEAP32[$307 >> 2] = $24; //@line 7771
       $308 = $ReallocAsyncCtx4 + 52 | 0; //@line 7772
       HEAP32[$308 >> 2] = $26; //@line 7773
       $309 = $ReallocAsyncCtx4 + 56 | 0; //@line 7774
       HEAP32[$309 >> 2] = $28; //@line 7775
       $310 = $ReallocAsyncCtx4 + 60 | 0; //@line 7776
       HEAP32[$310 >> 2] = $30; //@line 7777
       $311 = $ReallocAsyncCtx4 + 64 | 0; //@line 7778
       HEAP32[$311 >> 2] = $32; //@line 7779
       $312 = $ReallocAsyncCtx4 + 68 | 0; //@line 7780
       HEAP32[$312 >> 2] = $34; //@line 7781
       $313 = $ReallocAsyncCtx4 + 72 | 0; //@line 7782
       HEAP32[$313 >> 2] = $36; //@line 7783
       $314 = $ReallocAsyncCtx4 + 76 | 0; //@line 7784
       HEAP32[$314 >> 2] = $38; //@line 7785
       $315 = $ReallocAsyncCtx4 + 80 | 0; //@line 7786
       HEAP32[$315 >> 2] = $161; //@line 7787
       $316 = $ReallocAsyncCtx4 + 84 | 0; //@line 7788
       HEAP32[$316 >> 2] = $42; //@line 7789
       $317 = $ReallocAsyncCtx4 + 88 | 0; //@line 7790
       HEAP32[$317 >> 2] = $44; //@line 7791
       $318 = $ReallocAsyncCtx4 + 92 | 0; //@line 7792
       HEAP32[$318 >> 2] = $46; //@line 7793
       $319 = $ReallocAsyncCtx4 + 96 | 0; //@line 7794
       HEAP32[$319 >> 2] = $48; //@line 7795
       $320 = $ReallocAsyncCtx4 + 100 | 0; //@line 7796
       HEAP32[$320 >> 2] = $50; //@line 7797
       $321 = $ReallocAsyncCtx4 + 104 | 0; //@line 7798
       HEAP32[$321 >> 2] = $52; //@line 7799
       $322 = $ReallocAsyncCtx4 + 108 | 0; //@line 7800
       HEAP32[$322 >> 2] = $54; //@line 7801
       $323 = $ReallocAsyncCtx4 + 112 | 0; //@line 7802
       HEAP32[$323 >> 2] = $56; //@line 7803
       $324 = $ReallocAsyncCtx4 + 116 | 0; //@line 7804
       HEAP32[$324 >> 2] = $58; //@line 7805
       $325 = $ReallocAsyncCtx4 + 120 | 0; //@line 7806
       HEAP32[$325 >> 2] = $60; //@line 7807
       $326 = $ReallocAsyncCtx4 + 124 | 0; //@line 7808
       HEAP32[$326 >> 2] = $62; //@line 7809
       $327 = $ReallocAsyncCtx4 + 128 | 0; //@line 7810
       HEAP32[$327 >> 2] = $64; //@line 7811
       $328 = $ReallocAsyncCtx4 + 132 | 0; //@line 7812
       HEAP32[$328 >> 2] = $66; //@line 7813
       $329 = $ReallocAsyncCtx4 + 136 | 0; //@line 7814
       HEAP32[$329 >> 2] = $68; //@line 7815
       $330 = $ReallocAsyncCtx4 + 140 | 0; //@line 7816
       HEAP32[$330 >> 2] = $70; //@line 7817
       $331 = $ReallocAsyncCtx4 + 144 | 0; //@line 7818
       HEAP32[$331 >> 2] = $72; //@line 7819
       $332 = $ReallocAsyncCtx4 + 148 | 0; //@line 7820
       HEAP32[$332 >> 2] = $74; //@line 7821
       $333 = $ReallocAsyncCtx4 + 152 | 0; //@line 7822
       HEAP32[$333 >> 2] = $76; //@line 7823
       $334 = $ReallocAsyncCtx4 + 156 | 0; //@line 7824
       HEAP32[$334 >> 2] = $78; //@line 7825
       $335 = $ReallocAsyncCtx4 + 160 | 0; //@line 7826
       HEAP32[$335 >> 2] = $80; //@line 7827
       $336 = $ReallocAsyncCtx4 + 164 | 0; //@line 7828
       HEAP32[$336 >> 2] = $82; //@line 7829
       $337 = $ReallocAsyncCtx4 + 168 | 0; //@line 7830
       HEAP32[$337 >> 2] = $84; //@line 7831
       $338 = $ReallocAsyncCtx4 + 172 | 0; //@line 7832
       HEAP32[$338 >> 2] = $86; //@line 7833
       $339 = $ReallocAsyncCtx4 + 176 | 0; //@line 7834
       HEAP32[$339 >> 2] = $88; //@line 7835
       $340 = $ReallocAsyncCtx4 + 180 | 0; //@line 7836
       HEAP32[$340 >> 2] = $90; //@line 7837
       $341 = $ReallocAsyncCtx4 + 184 | 0; //@line 7838
       HEAP32[$341 >> 2] = $92; //@line 7839
       $342 = $ReallocAsyncCtx4 + 188 | 0; //@line 7840
       HEAP32[$342 >> 2] = $94; //@line 7841
       $343 = $ReallocAsyncCtx4 + 192 | 0; //@line 7842
       HEAP32[$343 >> 2] = $96; //@line 7843
       $344 = $ReallocAsyncCtx4 + 196 | 0; //@line 7844
       HEAP32[$344 >> 2] = $98; //@line 7845
       $345 = $ReallocAsyncCtx4 + 200 | 0; //@line 7846
       HEAP32[$345 >> 2] = $100; //@line 7847
       $346 = $ReallocAsyncCtx4 + 204 | 0; //@line 7848
       HEAP32[$346 >> 2] = $102; //@line 7849
       $347 = $ReallocAsyncCtx4 + 208 | 0; //@line 7850
       HEAP32[$347 >> 2] = $104; //@line 7851
       $348 = $ReallocAsyncCtx4 + 212 | 0; //@line 7852
       HEAP32[$348 >> 2] = $106; //@line 7853
       $349 = $ReallocAsyncCtx4 + 216 | 0; //@line 7854
       HEAP32[$349 >> 2] = $108; //@line 7855
       $350 = $ReallocAsyncCtx4 + 220 | 0; //@line 7856
       HEAP32[$350 >> 2] = $293; //@line 7857
       $351 = $ReallocAsyncCtx4 + 224 | 0; //@line 7858
       HEAP32[$351 >> 2] = $110; //@line 7859
       $352 = $ReallocAsyncCtx4 + 228 | 0; //@line 7860
       HEAP32[$352 >> 2] = $285; //@line 7861
       $353 = $ReallocAsyncCtx4 + 232 | 0; //@line 7862
       HEAP32[$353 >> 2] = $112; //@line 7863
       $354 = $ReallocAsyncCtx4 + 236 | 0; //@line 7864
       HEAP32[$354 >> 2] = $114; //@line 7865
       $355 = $ReallocAsyncCtx4 + 240 | 0; //@line 7866
       HEAP32[$355 >> 2] = $116; //@line 7867
       $356 = $ReallocAsyncCtx4 + 244 | 0; //@line 7868
       HEAP32[$356 >> 2] = $120; //@line 7869
       $357 = $ReallocAsyncCtx4 + 248 | 0; //@line 7870
       HEAP32[$357 >> 2] = $124; //@line 7871
       $358 = $ReallocAsyncCtx4 + 252 | 0; //@line 7872
       HEAP32[$358 >> 2] = $126; //@line 7873
       $359 = $ReallocAsyncCtx4 + 256 | 0; //@line 7874
       HEAP32[$359 >> 2] = $128; //@line 7875
       $360 = $ReallocAsyncCtx4 + 260 | 0; //@line 7876
       HEAP32[$360 >> 2] = $130; //@line 7877
       $361 = $ReallocAsyncCtx4 + 264 | 0; //@line 7878
       HEAP32[$361 >> 2] = $132; //@line 7879
       $362 = $ReallocAsyncCtx4 + 268 | 0; //@line 7880
       HEAP32[$362 >> 2] = $134; //@line 7881
       $363 = $ReallocAsyncCtx4 + 272 | 0; //@line 7882
       HEAP32[$363 >> 2] = $136; //@line 7883
       sp = STACKTOP; //@line 7884
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 7888
     break L2;
     break;
    }
   case 37:
    {
     $365 = HEAP32[$134 >> 2] | 0; //@line 7893
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 7895
     $367 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $365 + 48 | 0, $365, 4, $$1202$i) | 0; //@line 7896
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 7899
      $368 = $ReallocAsyncCtx10 + 4 | 0; //@line 7900
      HEAP32[$368 >> 2] = $2; //@line 7901
      $369 = $ReallocAsyncCtx10 + 8 | 0; //@line 7902
      HEAP32[$369 >> 2] = $4; //@line 7903
      $370 = $ReallocAsyncCtx10 + 12 | 0; //@line 7904
      HEAP32[$370 >> 2] = $6; //@line 7905
      $371 = $ReallocAsyncCtx10 + 16 | 0; //@line 7906
      HEAP32[$371 >> 2] = $8; //@line 7907
      $372 = $ReallocAsyncCtx10 + 20 | 0; //@line 7908
      HEAP32[$372 >> 2] = $10; //@line 7909
      $373 = $ReallocAsyncCtx10 + 24 | 0; //@line 7910
      HEAP32[$373 >> 2] = $12; //@line 7911
      $374 = $ReallocAsyncCtx10 + 28 | 0; //@line 7912
      HEAP32[$374 >> 2] = $14; //@line 7913
      $375 = $ReallocAsyncCtx10 + 32 | 0; //@line 7914
      HEAP32[$375 >> 2] = $16; //@line 7915
      $376 = $ReallocAsyncCtx10 + 36 | 0; //@line 7916
      HEAP32[$376 >> 2] = $18; //@line 7917
      $377 = $ReallocAsyncCtx10 + 40 | 0; //@line 7918
      HEAP32[$377 >> 2] = $20; //@line 7919
      $378 = $ReallocAsyncCtx10 + 44 | 0; //@line 7920
      HEAP32[$378 >> 2] = $22; //@line 7921
      $379 = $ReallocAsyncCtx10 + 48 | 0; //@line 7922
      HEAP32[$379 >> 2] = $24; //@line 7923
      $380 = $ReallocAsyncCtx10 + 52 | 0; //@line 7924
      HEAP32[$380 >> 2] = $26; //@line 7925
      $381 = $ReallocAsyncCtx10 + 56 | 0; //@line 7926
      HEAP32[$381 >> 2] = $28; //@line 7927
      $382 = $ReallocAsyncCtx10 + 60 | 0; //@line 7928
      HEAP32[$382 >> 2] = $30; //@line 7929
      $383 = $ReallocAsyncCtx10 + 64 | 0; //@line 7930
      HEAP32[$383 >> 2] = $32; //@line 7931
      $384 = $ReallocAsyncCtx10 + 68 | 0; //@line 7932
      HEAP32[$384 >> 2] = $34; //@line 7933
      $385 = $ReallocAsyncCtx10 + 72 | 0; //@line 7934
      HEAP32[$385 >> 2] = $36; //@line 7935
      $386 = $ReallocAsyncCtx10 + 76 | 0; //@line 7936
      HEAP32[$386 >> 2] = $38; //@line 7937
      $387 = $ReallocAsyncCtx10 + 80 | 0; //@line 7938
      HEAP32[$387 >> 2] = $161; //@line 7939
      $388 = $ReallocAsyncCtx10 + 84 | 0; //@line 7940
      HEAP32[$388 >> 2] = $42; //@line 7941
      $389 = $ReallocAsyncCtx10 + 88 | 0; //@line 7942
      HEAP32[$389 >> 2] = $44; //@line 7943
      $390 = $ReallocAsyncCtx10 + 92 | 0; //@line 7944
      HEAP32[$390 >> 2] = $46; //@line 7945
      $391 = $ReallocAsyncCtx10 + 96 | 0; //@line 7946
      HEAP32[$391 >> 2] = $48; //@line 7947
      $392 = $ReallocAsyncCtx10 + 100 | 0; //@line 7948
      HEAP32[$392 >> 2] = $50; //@line 7949
      $393 = $ReallocAsyncCtx10 + 104 | 0; //@line 7950
      HEAP32[$393 >> 2] = $52; //@line 7951
      $394 = $ReallocAsyncCtx10 + 108 | 0; //@line 7952
      HEAP32[$394 >> 2] = $54; //@line 7953
      $395 = $ReallocAsyncCtx10 + 112 | 0; //@line 7954
      HEAP32[$395 >> 2] = $56; //@line 7955
      $396 = $ReallocAsyncCtx10 + 116 | 0; //@line 7956
      HEAP32[$396 >> 2] = $58; //@line 7957
      $397 = $ReallocAsyncCtx10 + 120 | 0; //@line 7958
      HEAP32[$397 >> 2] = $60; //@line 7959
      $398 = $ReallocAsyncCtx10 + 124 | 0; //@line 7960
      HEAP32[$398 >> 2] = $62; //@line 7961
      $399 = $ReallocAsyncCtx10 + 128 | 0; //@line 7962
      HEAP32[$399 >> 2] = $64; //@line 7963
      $400 = $ReallocAsyncCtx10 + 132 | 0; //@line 7964
      HEAP32[$400 >> 2] = $66; //@line 7965
      $401 = $ReallocAsyncCtx10 + 136 | 0; //@line 7966
      HEAP32[$401 >> 2] = $68; //@line 7967
      $402 = $ReallocAsyncCtx10 + 140 | 0; //@line 7968
      HEAP32[$402 >> 2] = $70; //@line 7969
      $403 = $ReallocAsyncCtx10 + 144 | 0; //@line 7970
      HEAP32[$403 >> 2] = $72; //@line 7971
      $404 = $ReallocAsyncCtx10 + 148 | 0; //@line 7972
      HEAP32[$404 >> 2] = $74; //@line 7973
      $405 = $ReallocAsyncCtx10 + 152 | 0; //@line 7974
      HEAP32[$405 >> 2] = $76; //@line 7975
      $406 = $ReallocAsyncCtx10 + 156 | 0; //@line 7976
      HEAP32[$406 >> 2] = $78; //@line 7977
      $407 = $ReallocAsyncCtx10 + 160 | 0; //@line 7978
      HEAP32[$407 >> 2] = $80; //@line 7979
      $408 = $ReallocAsyncCtx10 + 164 | 0; //@line 7980
      HEAP32[$408 >> 2] = $82; //@line 7981
      $409 = $ReallocAsyncCtx10 + 168 | 0; //@line 7982
      HEAP32[$409 >> 2] = $84; //@line 7983
      $410 = $ReallocAsyncCtx10 + 172 | 0; //@line 7984
      HEAP32[$410 >> 2] = $86; //@line 7985
      $411 = $ReallocAsyncCtx10 + 176 | 0; //@line 7986
      HEAP32[$411 >> 2] = $88; //@line 7987
      $412 = $ReallocAsyncCtx10 + 180 | 0; //@line 7988
      HEAP32[$412 >> 2] = $90; //@line 7989
      $413 = $ReallocAsyncCtx10 + 184 | 0; //@line 7990
      HEAP32[$413 >> 2] = $92; //@line 7991
      $414 = $ReallocAsyncCtx10 + 188 | 0; //@line 7992
      HEAP32[$414 >> 2] = $94; //@line 7993
      $415 = $ReallocAsyncCtx10 + 192 | 0; //@line 7994
      HEAP32[$415 >> 2] = $96; //@line 7995
      $416 = $ReallocAsyncCtx10 + 196 | 0; //@line 7996
      HEAP32[$416 >> 2] = $98; //@line 7997
      $417 = $ReallocAsyncCtx10 + 200 | 0; //@line 7998
      HEAP32[$417 >> 2] = $100; //@line 7999
      $418 = $ReallocAsyncCtx10 + 204 | 0; //@line 8000
      HEAP32[$418 >> 2] = $102; //@line 8001
      $419 = $ReallocAsyncCtx10 + 208 | 0; //@line 8002
      HEAP32[$419 >> 2] = $104; //@line 8003
      $420 = $ReallocAsyncCtx10 + 212 | 0; //@line 8004
      HEAP32[$420 >> 2] = $106; //@line 8005
      $421 = $ReallocAsyncCtx10 + 216 | 0; //@line 8006
      HEAP32[$421 >> 2] = $108; //@line 8007
      $422 = $ReallocAsyncCtx10 + 220 | 0; //@line 8008
      HEAP32[$422 >> 2] = $110; //@line 8009
      $423 = $ReallocAsyncCtx10 + 224 | 0; //@line 8010
      HEAP32[$423 >> 2] = $112; //@line 8011
      $424 = $ReallocAsyncCtx10 + 228 | 0; //@line 8012
      HEAP32[$424 >> 2] = $114; //@line 8013
      $425 = $ReallocAsyncCtx10 + 232 | 0; //@line 8014
      HEAP32[$425 >> 2] = $116; //@line 8015
      $426 = $ReallocAsyncCtx10 + 236 | 0; //@line 8016
      HEAP32[$426 >> 2] = $120; //@line 8017
      $427 = $ReallocAsyncCtx10 + 240 | 0; //@line 8018
      HEAP32[$427 >> 2] = $124; //@line 8019
      $428 = $ReallocAsyncCtx10 + 244 | 0; //@line 8020
      HEAP32[$428 >> 2] = $126; //@line 8021
      $429 = $ReallocAsyncCtx10 + 248 | 0; //@line 8022
      HEAP32[$429 >> 2] = $128; //@line 8023
      $430 = $ReallocAsyncCtx10 + 252 | 0; //@line 8024
      HEAP32[$430 >> 2] = $130; //@line 8025
      $431 = $ReallocAsyncCtx10 + 256 | 0; //@line 8026
      HEAP32[$431 >> 2] = $132; //@line 8027
      $432 = $ReallocAsyncCtx10 + 260 | 0; //@line 8028
      HEAP32[$432 >> 2] = $134; //@line 8029
      $433 = $ReallocAsyncCtx10 + 264 | 0; //@line 8030
      HEAP32[$433 >> 2] = $136; //@line 8031
      sp = STACKTOP; //@line 8032
      return;
     }
     HEAP8[___async_retval >> 0] = $367; //@line 8036
     ___async_unwind = 0; //@line 8037
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 8038
     $368 = $ReallocAsyncCtx10 + 4 | 0; //@line 8039
     HEAP32[$368 >> 2] = $2; //@line 8040
     $369 = $ReallocAsyncCtx10 + 8 | 0; //@line 8041
     HEAP32[$369 >> 2] = $4; //@line 8042
     $370 = $ReallocAsyncCtx10 + 12 | 0; //@line 8043
     HEAP32[$370 >> 2] = $6; //@line 8044
     $371 = $ReallocAsyncCtx10 + 16 | 0; //@line 8045
     HEAP32[$371 >> 2] = $8; //@line 8046
     $372 = $ReallocAsyncCtx10 + 20 | 0; //@line 8047
     HEAP32[$372 >> 2] = $10; //@line 8048
     $373 = $ReallocAsyncCtx10 + 24 | 0; //@line 8049
     HEAP32[$373 >> 2] = $12; //@line 8050
     $374 = $ReallocAsyncCtx10 + 28 | 0; //@line 8051
     HEAP32[$374 >> 2] = $14; //@line 8052
     $375 = $ReallocAsyncCtx10 + 32 | 0; //@line 8053
     HEAP32[$375 >> 2] = $16; //@line 8054
     $376 = $ReallocAsyncCtx10 + 36 | 0; //@line 8055
     HEAP32[$376 >> 2] = $18; //@line 8056
     $377 = $ReallocAsyncCtx10 + 40 | 0; //@line 8057
     HEAP32[$377 >> 2] = $20; //@line 8058
     $378 = $ReallocAsyncCtx10 + 44 | 0; //@line 8059
     HEAP32[$378 >> 2] = $22; //@line 8060
     $379 = $ReallocAsyncCtx10 + 48 | 0; //@line 8061
     HEAP32[$379 >> 2] = $24; //@line 8062
     $380 = $ReallocAsyncCtx10 + 52 | 0; //@line 8063
     HEAP32[$380 >> 2] = $26; //@line 8064
     $381 = $ReallocAsyncCtx10 + 56 | 0; //@line 8065
     HEAP32[$381 >> 2] = $28; //@line 8066
     $382 = $ReallocAsyncCtx10 + 60 | 0; //@line 8067
     HEAP32[$382 >> 2] = $30; //@line 8068
     $383 = $ReallocAsyncCtx10 + 64 | 0; //@line 8069
     HEAP32[$383 >> 2] = $32; //@line 8070
     $384 = $ReallocAsyncCtx10 + 68 | 0; //@line 8071
     HEAP32[$384 >> 2] = $34; //@line 8072
     $385 = $ReallocAsyncCtx10 + 72 | 0; //@line 8073
     HEAP32[$385 >> 2] = $36; //@line 8074
     $386 = $ReallocAsyncCtx10 + 76 | 0; //@line 8075
     HEAP32[$386 >> 2] = $38; //@line 8076
     $387 = $ReallocAsyncCtx10 + 80 | 0; //@line 8077
     HEAP32[$387 >> 2] = $161; //@line 8078
     $388 = $ReallocAsyncCtx10 + 84 | 0; //@line 8079
     HEAP32[$388 >> 2] = $42; //@line 8080
     $389 = $ReallocAsyncCtx10 + 88 | 0; //@line 8081
     HEAP32[$389 >> 2] = $44; //@line 8082
     $390 = $ReallocAsyncCtx10 + 92 | 0; //@line 8083
     HEAP32[$390 >> 2] = $46; //@line 8084
     $391 = $ReallocAsyncCtx10 + 96 | 0; //@line 8085
     HEAP32[$391 >> 2] = $48; //@line 8086
     $392 = $ReallocAsyncCtx10 + 100 | 0; //@line 8087
     HEAP32[$392 >> 2] = $50; //@line 8088
     $393 = $ReallocAsyncCtx10 + 104 | 0; //@line 8089
     HEAP32[$393 >> 2] = $52; //@line 8090
     $394 = $ReallocAsyncCtx10 + 108 | 0; //@line 8091
     HEAP32[$394 >> 2] = $54; //@line 8092
     $395 = $ReallocAsyncCtx10 + 112 | 0; //@line 8093
     HEAP32[$395 >> 2] = $56; //@line 8094
     $396 = $ReallocAsyncCtx10 + 116 | 0; //@line 8095
     HEAP32[$396 >> 2] = $58; //@line 8096
     $397 = $ReallocAsyncCtx10 + 120 | 0; //@line 8097
     HEAP32[$397 >> 2] = $60; //@line 8098
     $398 = $ReallocAsyncCtx10 + 124 | 0; //@line 8099
     HEAP32[$398 >> 2] = $62; //@line 8100
     $399 = $ReallocAsyncCtx10 + 128 | 0; //@line 8101
     HEAP32[$399 >> 2] = $64; //@line 8102
     $400 = $ReallocAsyncCtx10 + 132 | 0; //@line 8103
     HEAP32[$400 >> 2] = $66; //@line 8104
     $401 = $ReallocAsyncCtx10 + 136 | 0; //@line 8105
     HEAP32[$401 >> 2] = $68; //@line 8106
     $402 = $ReallocAsyncCtx10 + 140 | 0; //@line 8107
     HEAP32[$402 >> 2] = $70; //@line 8108
     $403 = $ReallocAsyncCtx10 + 144 | 0; //@line 8109
     HEAP32[$403 >> 2] = $72; //@line 8110
     $404 = $ReallocAsyncCtx10 + 148 | 0; //@line 8111
     HEAP32[$404 >> 2] = $74; //@line 8112
     $405 = $ReallocAsyncCtx10 + 152 | 0; //@line 8113
     HEAP32[$405 >> 2] = $76; //@line 8114
     $406 = $ReallocAsyncCtx10 + 156 | 0; //@line 8115
     HEAP32[$406 >> 2] = $78; //@line 8116
     $407 = $ReallocAsyncCtx10 + 160 | 0; //@line 8117
     HEAP32[$407 >> 2] = $80; //@line 8118
     $408 = $ReallocAsyncCtx10 + 164 | 0; //@line 8119
     HEAP32[$408 >> 2] = $82; //@line 8120
     $409 = $ReallocAsyncCtx10 + 168 | 0; //@line 8121
     HEAP32[$409 >> 2] = $84; //@line 8122
     $410 = $ReallocAsyncCtx10 + 172 | 0; //@line 8123
     HEAP32[$410 >> 2] = $86; //@line 8124
     $411 = $ReallocAsyncCtx10 + 176 | 0; //@line 8125
     HEAP32[$411 >> 2] = $88; //@line 8126
     $412 = $ReallocAsyncCtx10 + 180 | 0; //@line 8127
     HEAP32[$412 >> 2] = $90; //@line 8128
     $413 = $ReallocAsyncCtx10 + 184 | 0; //@line 8129
     HEAP32[$413 >> 2] = $92; //@line 8130
     $414 = $ReallocAsyncCtx10 + 188 | 0; //@line 8131
     HEAP32[$414 >> 2] = $94; //@line 8132
     $415 = $ReallocAsyncCtx10 + 192 | 0; //@line 8133
     HEAP32[$415 >> 2] = $96; //@line 8134
     $416 = $ReallocAsyncCtx10 + 196 | 0; //@line 8135
     HEAP32[$416 >> 2] = $98; //@line 8136
     $417 = $ReallocAsyncCtx10 + 200 | 0; //@line 8137
     HEAP32[$417 >> 2] = $100; //@line 8138
     $418 = $ReallocAsyncCtx10 + 204 | 0; //@line 8139
     HEAP32[$418 >> 2] = $102; //@line 8140
     $419 = $ReallocAsyncCtx10 + 208 | 0; //@line 8141
     HEAP32[$419 >> 2] = $104; //@line 8142
     $420 = $ReallocAsyncCtx10 + 212 | 0; //@line 8143
     HEAP32[$420 >> 2] = $106; //@line 8144
     $421 = $ReallocAsyncCtx10 + 216 | 0; //@line 8145
     HEAP32[$421 >> 2] = $108; //@line 8146
     $422 = $ReallocAsyncCtx10 + 220 | 0; //@line 8147
     HEAP32[$422 >> 2] = $110; //@line 8148
     $423 = $ReallocAsyncCtx10 + 224 | 0; //@line 8149
     HEAP32[$423 >> 2] = $112; //@line 8150
     $424 = $ReallocAsyncCtx10 + 228 | 0; //@line 8151
     HEAP32[$424 >> 2] = $114; //@line 8152
     $425 = $ReallocAsyncCtx10 + 232 | 0; //@line 8153
     HEAP32[$425 >> 2] = $116; //@line 8154
     $426 = $ReallocAsyncCtx10 + 236 | 0; //@line 8155
     HEAP32[$426 >> 2] = $120; //@line 8156
     $427 = $ReallocAsyncCtx10 + 240 | 0; //@line 8157
     HEAP32[$427 >> 2] = $124; //@line 8158
     $428 = $ReallocAsyncCtx10 + 244 | 0; //@line 8159
     HEAP32[$428 >> 2] = $126; //@line 8160
     $429 = $ReallocAsyncCtx10 + 248 | 0; //@line 8161
     HEAP32[$429 >> 2] = $128; //@line 8162
     $430 = $ReallocAsyncCtx10 + 252 | 0; //@line 8163
     HEAP32[$430 >> 2] = $130; //@line 8164
     $431 = $ReallocAsyncCtx10 + 256 | 0; //@line 8165
     HEAP32[$431 >> 2] = $132; //@line 8166
     $432 = $ReallocAsyncCtx10 + 260 | 0; //@line 8167
     HEAP32[$432 >> 2] = $134; //@line 8168
     $433 = $ReallocAsyncCtx10 + 264 | 0; //@line 8169
     HEAP32[$433 >> 2] = $136; //@line 8170
     sp = STACKTOP; //@line 8171
     return;
    }
   case 40:
    {
     $435 = $$1202$in$i & 65535; //@line 8176
     if (($$1202$i + -1 & 65535) <= 254) {
      $438 = HEAP32[$134 >> 2] | 0; //@line 8180
      if (!(HEAP32[$438 + 52 >> 2] | 0)) {
       HEAP16[$438 + 4 >> 1] = $$1202$i; //@line 8186
       $443 = $219 + 1 | 0; //@line 8187
       HEAP32[$82 >> 2] = $443; //@line 8188
       $444 = HEAP32[$124 >> 2] | 0; //@line 8189
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 8190
       $445 = FUNCTION_TABLE_ii[$444 & 15]($$1202$i) | 0; //@line 8191
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 8194
        $446 = $ReallocAsyncCtx5 + 4 | 0; //@line 8195
        HEAP32[$446 >> 2] = $2; //@line 8196
        $447 = $ReallocAsyncCtx5 + 8 | 0; //@line 8197
        HEAP32[$447 >> 2] = $4; //@line 8198
        $448 = $ReallocAsyncCtx5 + 12 | 0; //@line 8199
        HEAP32[$448 >> 2] = $6; //@line 8200
        $449 = $ReallocAsyncCtx5 + 16 | 0; //@line 8201
        HEAP32[$449 >> 2] = $8; //@line 8202
        $450 = $ReallocAsyncCtx5 + 20 | 0; //@line 8203
        HEAP32[$450 >> 2] = $10; //@line 8204
        $451 = $ReallocAsyncCtx5 + 24 | 0; //@line 8205
        HEAP32[$451 >> 2] = $12; //@line 8206
        $452 = $ReallocAsyncCtx5 + 28 | 0; //@line 8207
        HEAP32[$452 >> 2] = $14; //@line 8208
        $453 = $ReallocAsyncCtx5 + 32 | 0; //@line 8209
        HEAP32[$453 >> 2] = $16; //@line 8210
        $454 = $ReallocAsyncCtx5 + 36 | 0; //@line 8211
        HEAP32[$454 >> 2] = $18; //@line 8212
        $455 = $ReallocAsyncCtx5 + 40 | 0; //@line 8213
        HEAP32[$455 >> 2] = $20; //@line 8214
        $456 = $ReallocAsyncCtx5 + 44 | 0; //@line 8215
        HEAP32[$456 >> 2] = $22; //@line 8216
        $457 = $ReallocAsyncCtx5 + 48 | 0; //@line 8217
        HEAP32[$457 >> 2] = $24; //@line 8218
        $458 = $ReallocAsyncCtx5 + 52 | 0; //@line 8219
        HEAP32[$458 >> 2] = $26; //@line 8220
        $459 = $ReallocAsyncCtx5 + 56 | 0; //@line 8221
        HEAP32[$459 >> 2] = $28; //@line 8222
        $460 = $ReallocAsyncCtx5 + 60 | 0; //@line 8223
        HEAP32[$460 >> 2] = $30; //@line 8224
        $461 = $ReallocAsyncCtx5 + 64 | 0; //@line 8225
        HEAP32[$461 >> 2] = $32; //@line 8226
        $462 = $ReallocAsyncCtx5 + 68 | 0; //@line 8227
        HEAP32[$462 >> 2] = $34; //@line 8228
        $463 = $ReallocAsyncCtx5 + 72 | 0; //@line 8229
        HEAP32[$463 >> 2] = $36; //@line 8230
        $464 = $ReallocAsyncCtx5 + 76 | 0; //@line 8231
        HEAP32[$464 >> 2] = $38; //@line 8232
        $465 = $ReallocAsyncCtx5 + 80 | 0; //@line 8233
        HEAP32[$465 >> 2] = $161; //@line 8234
        $466 = $ReallocAsyncCtx5 + 84 | 0; //@line 8235
        HEAP32[$466 >> 2] = $42; //@line 8236
        $467 = $ReallocAsyncCtx5 + 88 | 0; //@line 8237
        HEAP32[$467 >> 2] = $44; //@line 8238
        $468 = $ReallocAsyncCtx5 + 92 | 0; //@line 8239
        HEAP32[$468 >> 2] = $46; //@line 8240
        $469 = $ReallocAsyncCtx5 + 96 | 0; //@line 8241
        HEAP32[$469 >> 2] = $48; //@line 8242
        $470 = $ReallocAsyncCtx5 + 100 | 0; //@line 8243
        HEAP32[$470 >> 2] = $50; //@line 8244
        $471 = $ReallocAsyncCtx5 + 104 | 0; //@line 8245
        HEAP32[$471 >> 2] = $52; //@line 8246
        $472 = $ReallocAsyncCtx5 + 108 | 0; //@line 8247
        HEAP32[$472 >> 2] = $54; //@line 8248
        $473 = $ReallocAsyncCtx5 + 112 | 0; //@line 8249
        HEAP32[$473 >> 2] = $56; //@line 8250
        $474 = $ReallocAsyncCtx5 + 116 | 0; //@line 8251
        HEAP32[$474 >> 2] = $58; //@line 8252
        $475 = $ReallocAsyncCtx5 + 120 | 0; //@line 8253
        HEAP32[$475 >> 2] = $60; //@line 8254
        $476 = $ReallocAsyncCtx5 + 124 | 0; //@line 8255
        HEAP32[$476 >> 2] = $62; //@line 8256
        $477 = $ReallocAsyncCtx5 + 128 | 0; //@line 8257
        HEAP32[$477 >> 2] = $64; //@line 8258
        $478 = $ReallocAsyncCtx5 + 132 | 0; //@line 8259
        HEAP32[$478 >> 2] = $66; //@line 8260
        $479 = $ReallocAsyncCtx5 + 136 | 0; //@line 8261
        HEAP32[$479 >> 2] = $68; //@line 8262
        $480 = $ReallocAsyncCtx5 + 140 | 0; //@line 8263
        HEAP32[$480 >> 2] = $70; //@line 8264
        $481 = $ReallocAsyncCtx5 + 144 | 0; //@line 8265
        HEAP32[$481 >> 2] = $72; //@line 8266
        $482 = $ReallocAsyncCtx5 + 148 | 0; //@line 8267
        HEAP32[$482 >> 2] = $74; //@line 8268
        $483 = $ReallocAsyncCtx5 + 152 | 0; //@line 8269
        HEAP32[$483 >> 2] = $76; //@line 8270
        $484 = $ReallocAsyncCtx5 + 156 | 0; //@line 8271
        HEAP32[$484 >> 2] = $78; //@line 8272
        $485 = $ReallocAsyncCtx5 + 160 | 0; //@line 8273
        HEAP32[$485 >> 2] = $80; //@line 8274
        $486 = $ReallocAsyncCtx5 + 164 | 0; //@line 8275
        HEAP32[$486 >> 2] = $82; //@line 8276
        $487 = $ReallocAsyncCtx5 + 168 | 0; //@line 8277
        HEAP32[$487 >> 2] = $84; //@line 8278
        $488 = $ReallocAsyncCtx5 + 172 | 0; //@line 8279
        HEAP32[$488 >> 2] = $86; //@line 8280
        $489 = $ReallocAsyncCtx5 + 176 | 0; //@line 8281
        HEAP32[$489 >> 2] = $88; //@line 8282
        $490 = $ReallocAsyncCtx5 + 180 | 0; //@line 8283
        HEAP32[$490 >> 2] = $90; //@line 8284
        $491 = $ReallocAsyncCtx5 + 184 | 0; //@line 8285
        HEAP32[$491 >> 2] = $92; //@line 8286
        $492 = $ReallocAsyncCtx5 + 188 | 0; //@line 8287
        HEAP32[$492 >> 2] = $94; //@line 8288
        $493 = $ReallocAsyncCtx5 + 192 | 0; //@line 8289
        HEAP32[$493 >> 2] = $96; //@line 8290
        $494 = $ReallocAsyncCtx5 + 196 | 0; //@line 8291
        HEAP32[$494 >> 2] = $98; //@line 8292
        $495 = $ReallocAsyncCtx5 + 200 | 0; //@line 8293
        HEAP32[$495 >> 2] = $100; //@line 8294
        $496 = $ReallocAsyncCtx5 + 204 | 0; //@line 8295
        HEAP32[$496 >> 2] = $102; //@line 8296
        $497 = $ReallocAsyncCtx5 + 208 | 0; //@line 8297
        HEAP32[$497 >> 2] = $104; //@line 8298
        $498 = $ReallocAsyncCtx5 + 212 | 0; //@line 8299
        HEAP32[$498 >> 2] = $106; //@line 8300
        $499 = $ReallocAsyncCtx5 + 216 | 0; //@line 8301
        HEAP32[$499 >> 2] = $108; //@line 8302
        $500 = $ReallocAsyncCtx5 + 220 | 0; //@line 8303
        HEAP32[$500 >> 2] = $110; //@line 8304
        $501 = $ReallocAsyncCtx5 + 224 | 0; //@line 8305
        HEAP32[$501 >> 2] = $112; //@line 8306
        $502 = $ReallocAsyncCtx5 + 228 | 0; //@line 8307
        HEAP32[$502 >> 2] = $114; //@line 8308
        $503 = $ReallocAsyncCtx5 + 232 | 0; //@line 8309
        HEAP32[$503 >> 2] = $116; //@line 8310
        $504 = $ReallocAsyncCtx5 + 236 | 0; //@line 8311
        HEAP32[$504 >> 2] = $443; //@line 8312
        $505 = $ReallocAsyncCtx5 + 240 | 0; //@line 8313
        HEAP32[$505 >> 2] = $120; //@line 8314
        $506 = $ReallocAsyncCtx5 + 244 | 0; //@line 8315
        HEAP32[$506 >> 2] = $435; //@line 8316
        $507 = $ReallocAsyncCtx5 + 248 | 0; //@line 8317
        HEAP32[$507 >> 2] = $124; //@line 8318
        $508 = $ReallocAsyncCtx5 + 252 | 0; //@line 8319
        HEAP32[$508 >> 2] = $126; //@line 8320
        $509 = $ReallocAsyncCtx5 + 256 | 0; //@line 8321
        HEAP32[$509 >> 2] = $128; //@line 8322
        $510 = $ReallocAsyncCtx5 + 260 | 0; //@line 8323
        HEAP32[$510 >> 2] = $130; //@line 8324
        $511 = $ReallocAsyncCtx5 + 264 | 0; //@line 8325
        HEAP32[$511 >> 2] = $132; //@line 8326
        $512 = $ReallocAsyncCtx5 + 268 | 0; //@line 8327
        HEAP32[$512 >> 2] = $134; //@line 8328
        $513 = $ReallocAsyncCtx5 + 272 | 0; //@line 8329
        HEAP32[$513 >> 2] = $136; //@line 8330
        sp = STACKTOP; //@line 8331
        return;
       }
       HEAP32[___async_retval >> 2] = $445; //@line 8335
       ___async_unwind = 0; //@line 8336
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 8337
       $446 = $ReallocAsyncCtx5 + 4 | 0; //@line 8338
       HEAP32[$446 >> 2] = $2; //@line 8339
       $447 = $ReallocAsyncCtx5 + 8 | 0; //@line 8340
       HEAP32[$447 >> 2] = $4; //@line 8341
       $448 = $ReallocAsyncCtx5 + 12 | 0; //@line 8342
       HEAP32[$448 >> 2] = $6; //@line 8343
       $449 = $ReallocAsyncCtx5 + 16 | 0; //@line 8344
       HEAP32[$449 >> 2] = $8; //@line 8345
       $450 = $ReallocAsyncCtx5 + 20 | 0; //@line 8346
       HEAP32[$450 >> 2] = $10; //@line 8347
       $451 = $ReallocAsyncCtx5 + 24 | 0; //@line 8348
       HEAP32[$451 >> 2] = $12; //@line 8349
       $452 = $ReallocAsyncCtx5 + 28 | 0; //@line 8350
       HEAP32[$452 >> 2] = $14; //@line 8351
       $453 = $ReallocAsyncCtx5 + 32 | 0; //@line 8352
       HEAP32[$453 >> 2] = $16; //@line 8353
       $454 = $ReallocAsyncCtx5 + 36 | 0; //@line 8354
       HEAP32[$454 >> 2] = $18; //@line 8355
       $455 = $ReallocAsyncCtx5 + 40 | 0; //@line 8356
       HEAP32[$455 >> 2] = $20; //@line 8357
       $456 = $ReallocAsyncCtx5 + 44 | 0; //@line 8358
       HEAP32[$456 >> 2] = $22; //@line 8359
       $457 = $ReallocAsyncCtx5 + 48 | 0; //@line 8360
       HEAP32[$457 >> 2] = $24; //@line 8361
       $458 = $ReallocAsyncCtx5 + 52 | 0; //@line 8362
       HEAP32[$458 >> 2] = $26; //@line 8363
       $459 = $ReallocAsyncCtx5 + 56 | 0; //@line 8364
       HEAP32[$459 >> 2] = $28; //@line 8365
       $460 = $ReallocAsyncCtx5 + 60 | 0; //@line 8366
       HEAP32[$460 >> 2] = $30; //@line 8367
       $461 = $ReallocAsyncCtx5 + 64 | 0; //@line 8368
       HEAP32[$461 >> 2] = $32; //@line 8369
       $462 = $ReallocAsyncCtx5 + 68 | 0; //@line 8370
       HEAP32[$462 >> 2] = $34; //@line 8371
       $463 = $ReallocAsyncCtx5 + 72 | 0; //@line 8372
       HEAP32[$463 >> 2] = $36; //@line 8373
       $464 = $ReallocAsyncCtx5 + 76 | 0; //@line 8374
       HEAP32[$464 >> 2] = $38; //@line 8375
       $465 = $ReallocAsyncCtx5 + 80 | 0; //@line 8376
       HEAP32[$465 >> 2] = $161; //@line 8377
       $466 = $ReallocAsyncCtx5 + 84 | 0; //@line 8378
       HEAP32[$466 >> 2] = $42; //@line 8379
       $467 = $ReallocAsyncCtx5 + 88 | 0; //@line 8380
       HEAP32[$467 >> 2] = $44; //@line 8381
       $468 = $ReallocAsyncCtx5 + 92 | 0; //@line 8382
       HEAP32[$468 >> 2] = $46; //@line 8383
       $469 = $ReallocAsyncCtx5 + 96 | 0; //@line 8384
       HEAP32[$469 >> 2] = $48; //@line 8385
       $470 = $ReallocAsyncCtx5 + 100 | 0; //@line 8386
       HEAP32[$470 >> 2] = $50; //@line 8387
       $471 = $ReallocAsyncCtx5 + 104 | 0; //@line 8388
       HEAP32[$471 >> 2] = $52; //@line 8389
       $472 = $ReallocAsyncCtx5 + 108 | 0; //@line 8390
       HEAP32[$472 >> 2] = $54; //@line 8391
       $473 = $ReallocAsyncCtx5 + 112 | 0; //@line 8392
       HEAP32[$473 >> 2] = $56; //@line 8393
       $474 = $ReallocAsyncCtx5 + 116 | 0; //@line 8394
       HEAP32[$474 >> 2] = $58; //@line 8395
       $475 = $ReallocAsyncCtx5 + 120 | 0; //@line 8396
       HEAP32[$475 >> 2] = $60; //@line 8397
       $476 = $ReallocAsyncCtx5 + 124 | 0; //@line 8398
       HEAP32[$476 >> 2] = $62; //@line 8399
       $477 = $ReallocAsyncCtx5 + 128 | 0; //@line 8400
       HEAP32[$477 >> 2] = $64; //@line 8401
       $478 = $ReallocAsyncCtx5 + 132 | 0; //@line 8402
       HEAP32[$478 >> 2] = $66; //@line 8403
       $479 = $ReallocAsyncCtx5 + 136 | 0; //@line 8404
       HEAP32[$479 >> 2] = $68; //@line 8405
       $480 = $ReallocAsyncCtx5 + 140 | 0; //@line 8406
       HEAP32[$480 >> 2] = $70; //@line 8407
       $481 = $ReallocAsyncCtx5 + 144 | 0; //@line 8408
       HEAP32[$481 >> 2] = $72; //@line 8409
       $482 = $ReallocAsyncCtx5 + 148 | 0; //@line 8410
       HEAP32[$482 >> 2] = $74; //@line 8411
       $483 = $ReallocAsyncCtx5 + 152 | 0; //@line 8412
       HEAP32[$483 >> 2] = $76; //@line 8413
       $484 = $ReallocAsyncCtx5 + 156 | 0; //@line 8414
       HEAP32[$484 >> 2] = $78; //@line 8415
       $485 = $ReallocAsyncCtx5 + 160 | 0; //@line 8416
       HEAP32[$485 >> 2] = $80; //@line 8417
       $486 = $ReallocAsyncCtx5 + 164 | 0; //@line 8418
       HEAP32[$486 >> 2] = $82; //@line 8419
       $487 = $ReallocAsyncCtx5 + 168 | 0; //@line 8420
       HEAP32[$487 >> 2] = $84; //@line 8421
       $488 = $ReallocAsyncCtx5 + 172 | 0; //@line 8422
       HEAP32[$488 >> 2] = $86; //@line 8423
       $489 = $ReallocAsyncCtx5 + 176 | 0; //@line 8424
       HEAP32[$489 >> 2] = $88; //@line 8425
       $490 = $ReallocAsyncCtx5 + 180 | 0; //@line 8426
       HEAP32[$490 >> 2] = $90; //@line 8427
       $491 = $ReallocAsyncCtx5 + 184 | 0; //@line 8428
       HEAP32[$491 >> 2] = $92; //@line 8429
       $492 = $ReallocAsyncCtx5 + 188 | 0; //@line 8430
       HEAP32[$492 >> 2] = $94; //@line 8431
       $493 = $ReallocAsyncCtx5 + 192 | 0; //@line 8432
       HEAP32[$493 >> 2] = $96; //@line 8433
       $494 = $ReallocAsyncCtx5 + 196 | 0; //@line 8434
       HEAP32[$494 >> 2] = $98; //@line 8435
       $495 = $ReallocAsyncCtx5 + 200 | 0; //@line 8436
       HEAP32[$495 >> 2] = $100; //@line 8437
       $496 = $ReallocAsyncCtx5 + 204 | 0; //@line 8438
       HEAP32[$496 >> 2] = $102; //@line 8439
       $497 = $ReallocAsyncCtx5 + 208 | 0; //@line 8440
       HEAP32[$497 >> 2] = $104; //@line 8441
       $498 = $ReallocAsyncCtx5 + 212 | 0; //@line 8442
       HEAP32[$498 >> 2] = $106; //@line 8443
       $499 = $ReallocAsyncCtx5 + 216 | 0; //@line 8444
       HEAP32[$499 >> 2] = $108; //@line 8445
       $500 = $ReallocAsyncCtx5 + 220 | 0; //@line 8446
       HEAP32[$500 >> 2] = $110; //@line 8447
       $501 = $ReallocAsyncCtx5 + 224 | 0; //@line 8448
       HEAP32[$501 >> 2] = $112; //@line 8449
       $502 = $ReallocAsyncCtx5 + 228 | 0; //@line 8450
       HEAP32[$502 >> 2] = $114; //@line 8451
       $503 = $ReallocAsyncCtx5 + 232 | 0; //@line 8452
       HEAP32[$503 >> 2] = $116; //@line 8453
       $504 = $ReallocAsyncCtx5 + 236 | 0; //@line 8454
       HEAP32[$504 >> 2] = $443; //@line 8455
       $505 = $ReallocAsyncCtx5 + 240 | 0; //@line 8456
       HEAP32[$505 >> 2] = $120; //@line 8457
       $506 = $ReallocAsyncCtx5 + 244 | 0; //@line 8458
       HEAP32[$506 >> 2] = $435; //@line 8459
       $507 = $ReallocAsyncCtx5 + 248 | 0; //@line 8460
       HEAP32[$507 >> 2] = $124; //@line 8461
       $508 = $ReallocAsyncCtx5 + 252 | 0; //@line 8462
       HEAP32[$508 >> 2] = $126; //@line 8463
       $509 = $ReallocAsyncCtx5 + 256 | 0; //@line 8464
       HEAP32[$509 >> 2] = $128; //@line 8465
       $510 = $ReallocAsyncCtx5 + 260 | 0; //@line 8466
       HEAP32[$510 >> 2] = $130; //@line 8467
       $511 = $ReallocAsyncCtx5 + 264 | 0; //@line 8468
       HEAP32[$511 >> 2] = $132; //@line 8469
       $512 = $ReallocAsyncCtx5 + 268 | 0; //@line 8470
       HEAP32[$512 >> 2] = $134; //@line 8471
       $513 = $ReallocAsyncCtx5 + 272 | 0; //@line 8472
       HEAP32[$513 >> 2] = $136; //@line 8473
       sp = STACKTOP; //@line 8474
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 8478
     break L2;
     break;
    }
   case 49:
    {
     $519 = HEAP32[$134 >> 2] | 0; //@line 8483
     $520 = $519 + 56 | 0; //@line 8484
     if (HEAP32[$520 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 8488
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 8492
     $524 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $520, $519 + 6 | 0, 8, $$1202$i) | 0; //@line 8493
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 8496
      $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 8497
      HEAP32[$525 >> 2] = $2; //@line 8498
      $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 8499
      HEAP32[$526 >> 2] = $4; //@line 8500
      $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 8501
      HEAP32[$527 >> 2] = $6; //@line 8502
      $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 8503
      HEAP32[$528 >> 2] = $8; //@line 8504
      $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 8505
      HEAP32[$529 >> 2] = $10; //@line 8506
      $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 8507
      HEAP32[$530 >> 2] = $12; //@line 8508
      $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 8509
      HEAP32[$531 >> 2] = $14; //@line 8510
      $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 8511
      HEAP32[$532 >> 2] = $16; //@line 8512
      $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 8513
      HEAP32[$533 >> 2] = $18; //@line 8514
      $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 8515
      HEAP32[$534 >> 2] = $20; //@line 8516
      $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 8517
      HEAP32[$535 >> 2] = $22; //@line 8518
      $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 8519
      HEAP32[$536 >> 2] = $24; //@line 8520
      $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 8521
      HEAP32[$537 >> 2] = $26; //@line 8522
      $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 8523
      HEAP32[$538 >> 2] = $28; //@line 8524
      $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 8525
      HEAP32[$539 >> 2] = $30; //@line 8526
      $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 8527
      HEAP32[$540 >> 2] = $32; //@line 8528
      $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 8529
      HEAP32[$541 >> 2] = $34; //@line 8530
      $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 8531
      HEAP32[$542 >> 2] = $36; //@line 8532
      $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 8533
      HEAP32[$543 >> 2] = $38; //@line 8534
      $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 8535
      HEAP32[$544 >> 2] = $161; //@line 8536
      $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 8537
      HEAP32[$545 >> 2] = $42; //@line 8538
      $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 8539
      HEAP32[$546 >> 2] = $44; //@line 8540
      $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 8541
      HEAP32[$547 >> 2] = $46; //@line 8542
      $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 8543
      HEAP32[$548 >> 2] = $48; //@line 8544
      $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 8545
      HEAP32[$549 >> 2] = $50; //@line 8546
      $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 8547
      HEAP32[$550 >> 2] = $52; //@line 8548
      $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 8549
      HEAP32[$551 >> 2] = $54; //@line 8550
      $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 8551
      HEAP32[$552 >> 2] = $56; //@line 8552
      $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 8553
      HEAP32[$553 >> 2] = $58; //@line 8554
      $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 8555
      HEAP32[$554 >> 2] = $60; //@line 8556
      $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 8557
      HEAP32[$555 >> 2] = $62; //@line 8558
      $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 8559
      HEAP32[$556 >> 2] = $64; //@line 8560
      $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 8561
      HEAP32[$557 >> 2] = $66; //@line 8562
      $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 8563
      HEAP32[$558 >> 2] = $68; //@line 8564
      $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 8565
      HEAP32[$559 >> 2] = $70; //@line 8566
      $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 8567
      HEAP32[$560 >> 2] = $72; //@line 8568
      $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 8569
      HEAP32[$561 >> 2] = $74; //@line 8570
      $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 8571
      HEAP32[$562 >> 2] = $76; //@line 8572
      $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 8573
      HEAP32[$563 >> 2] = $78; //@line 8574
      $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 8575
      HEAP32[$564 >> 2] = $80; //@line 8576
      $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 8577
      HEAP32[$565 >> 2] = $82; //@line 8578
      $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 8579
      HEAP32[$566 >> 2] = $84; //@line 8580
      $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 8581
      HEAP32[$567 >> 2] = $86; //@line 8582
      $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 8583
      HEAP32[$568 >> 2] = $88; //@line 8584
      $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 8585
      HEAP32[$569 >> 2] = $90; //@line 8586
      $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 8587
      HEAP32[$570 >> 2] = $92; //@line 8588
      $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 8589
      HEAP32[$571 >> 2] = $94; //@line 8590
      $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 8591
      HEAP32[$572 >> 2] = $96; //@line 8592
      $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 8593
      HEAP32[$573 >> 2] = $98; //@line 8594
      $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 8595
      HEAP32[$574 >> 2] = $100; //@line 8596
      $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 8597
      HEAP32[$575 >> 2] = $102; //@line 8598
      $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 8599
      HEAP32[$576 >> 2] = $104; //@line 8600
      $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 8601
      HEAP32[$577 >> 2] = $106; //@line 8602
      $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 8603
      HEAP32[$578 >> 2] = $108; //@line 8604
      $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 8605
      HEAP32[$579 >> 2] = $110; //@line 8606
      $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 8607
      HEAP32[$580 >> 2] = $112; //@line 8608
      $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 8609
      HEAP32[$581 >> 2] = $114; //@line 8610
      $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 8611
      HEAP32[$582 >> 2] = $116; //@line 8612
      $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 8613
      HEAP32[$583 >> 2] = $120; //@line 8614
      $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 8615
      HEAP32[$584 >> 2] = $124; //@line 8616
      $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 8617
      HEAP32[$585 >> 2] = $126; //@line 8618
      $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 8619
      HEAP32[$586 >> 2] = $128; //@line 8620
      $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 8621
      HEAP32[$587 >> 2] = $130; //@line 8622
      $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 8623
      HEAP32[$588 >> 2] = $132; //@line 8624
      $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 8625
      HEAP32[$589 >> 2] = $134; //@line 8626
      $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 8627
      HEAP32[$590 >> 2] = $136; //@line 8628
      sp = STACKTOP; //@line 8629
      return;
     }
     HEAP8[___async_retval >> 0] = $524; //@line 8633
     ___async_unwind = 0; //@line 8634
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 8635
     $525 = $ReallocAsyncCtx9 + 4 | 0; //@line 8636
     HEAP32[$525 >> 2] = $2; //@line 8637
     $526 = $ReallocAsyncCtx9 + 8 | 0; //@line 8638
     HEAP32[$526 >> 2] = $4; //@line 8639
     $527 = $ReallocAsyncCtx9 + 12 | 0; //@line 8640
     HEAP32[$527 >> 2] = $6; //@line 8641
     $528 = $ReallocAsyncCtx9 + 16 | 0; //@line 8642
     HEAP32[$528 >> 2] = $8; //@line 8643
     $529 = $ReallocAsyncCtx9 + 20 | 0; //@line 8644
     HEAP32[$529 >> 2] = $10; //@line 8645
     $530 = $ReallocAsyncCtx9 + 24 | 0; //@line 8646
     HEAP32[$530 >> 2] = $12; //@line 8647
     $531 = $ReallocAsyncCtx9 + 28 | 0; //@line 8648
     HEAP32[$531 >> 2] = $14; //@line 8649
     $532 = $ReallocAsyncCtx9 + 32 | 0; //@line 8650
     HEAP32[$532 >> 2] = $16; //@line 8651
     $533 = $ReallocAsyncCtx9 + 36 | 0; //@line 8652
     HEAP32[$533 >> 2] = $18; //@line 8653
     $534 = $ReallocAsyncCtx9 + 40 | 0; //@line 8654
     HEAP32[$534 >> 2] = $20; //@line 8655
     $535 = $ReallocAsyncCtx9 + 44 | 0; //@line 8656
     HEAP32[$535 >> 2] = $22; //@line 8657
     $536 = $ReallocAsyncCtx9 + 48 | 0; //@line 8658
     HEAP32[$536 >> 2] = $24; //@line 8659
     $537 = $ReallocAsyncCtx9 + 52 | 0; //@line 8660
     HEAP32[$537 >> 2] = $26; //@line 8661
     $538 = $ReallocAsyncCtx9 + 56 | 0; //@line 8662
     HEAP32[$538 >> 2] = $28; //@line 8663
     $539 = $ReallocAsyncCtx9 + 60 | 0; //@line 8664
     HEAP32[$539 >> 2] = $30; //@line 8665
     $540 = $ReallocAsyncCtx9 + 64 | 0; //@line 8666
     HEAP32[$540 >> 2] = $32; //@line 8667
     $541 = $ReallocAsyncCtx9 + 68 | 0; //@line 8668
     HEAP32[$541 >> 2] = $34; //@line 8669
     $542 = $ReallocAsyncCtx9 + 72 | 0; //@line 8670
     HEAP32[$542 >> 2] = $36; //@line 8671
     $543 = $ReallocAsyncCtx9 + 76 | 0; //@line 8672
     HEAP32[$543 >> 2] = $38; //@line 8673
     $544 = $ReallocAsyncCtx9 + 80 | 0; //@line 8674
     HEAP32[$544 >> 2] = $161; //@line 8675
     $545 = $ReallocAsyncCtx9 + 84 | 0; //@line 8676
     HEAP32[$545 >> 2] = $42; //@line 8677
     $546 = $ReallocAsyncCtx9 + 88 | 0; //@line 8678
     HEAP32[$546 >> 2] = $44; //@line 8679
     $547 = $ReallocAsyncCtx9 + 92 | 0; //@line 8680
     HEAP32[$547 >> 2] = $46; //@line 8681
     $548 = $ReallocAsyncCtx9 + 96 | 0; //@line 8682
     HEAP32[$548 >> 2] = $48; //@line 8683
     $549 = $ReallocAsyncCtx9 + 100 | 0; //@line 8684
     HEAP32[$549 >> 2] = $50; //@line 8685
     $550 = $ReallocAsyncCtx9 + 104 | 0; //@line 8686
     HEAP32[$550 >> 2] = $52; //@line 8687
     $551 = $ReallocAsyncCtx9 + 108 | 0; //@line 8688
     HEAP32[$551 >> 2] = $54; //@line 8689
     $552 = $ReallocAsyncCtx9 + 112 | 0; //@line 8690
     HEAP32[$552 >> 2] = $56; //@line 8691
     $553 = $ReallocAsyncCtx9 + 116 | 0; //@line 8692
     HEAP32[$553 >> 2] = $58; //@line 8693
     $554 = $ReallocAsyncCtx9 + 120 | 0; //@line 8694
     HEAP32[$554 >> 2] = $60; //@line 8695
     $555 = $ReallocAsyncCtx9 + 124 | 0; //@line 8696
     HEAP32[$555 >> 2] = $62; //@line 8697
     $556 = $ReallocAsyncCtx9 + 128 | 0; //@line 8698
     HEAP32[$556 >> 2] = $64; //@line 8699
     $557 = $ReallocAsyncCtx9 + 132 | 0; //@line 8700
     HEAP32[$557 >> 2] = $66; //@line 8701
     $558 = $ReallocAsyncCtx9 + 136 | 0; //@line 8702
     HEAP32[$558 >> 2] = $68; //@line 8703
     $559 = $ReallocAsyncCtx9 + 140 | 0; //@line 8704
     HEAP32[$559 >> 2] = $70; //@line 8705
     $560 = $ReallocAsyncCtx9 + 144 | 0; //@line 8706
     HEAP32[$560 >> 2] = $72; //@line 8707
     $561 = $ReallocAsyncCtx9 + 148 | 0; //@line 8708
     HEAP32[$561 >> 2] = $74; //@line 8709
     $562 = $ReallocAsyncCtx9 + 152 | 0; //@line 8710
     HEAP32[$562 >> 2] = $76; //@line 8711
     $563 = $ReallocAsyncCtx9 + 156 | 0; //@line 8712
     HEAP32[$563 >> 2] = $78; //@line 8713
     $564 = $ReallocAsyncCtx9 + 160 | 0; //@line 8714
     HEAP32[$564 >> 2] = $80; //@line 8715
     $565 = $ReallocAsyncCtx9 + 164 | 0; //@line 8716
     HEAP32[$565 >> 2] = $82; //@line 8717
     $566 = $ReallocAsyncCtx9 + 168 | 0; //@line 8718
     HEAP32[$566 >> 2] = $84; //@line 8719
     $567 = $ReallocAsyncCtx9 + 172 | 0; //@line 8720
     HEAP32[$567 >> 2] = $86; //@line 8721
     $568 = $ReallocAsyncCtx9 + 176 | 0; //@line 8722
     HEAP32[$568 >> 2] = $88; //@line 8723
     $569 = $ReallocAsyncCtx9 + 180 | 0; //@line 8724
     HEAP32[$569 >> 2] = $90; //@line 8725
     $570 = $ReallocAsyncCtx9 + 184 | 0; //@line 8726
     HEAP32[$570 >> 2] = $92; //@line 8727
     $571 = $ReallocAsyncCtx9 + 188 | 0; //@line 8728
     HEAP32[$571 >> 2] = $94; //@line 8729
     $572 = $ReallocAsyncCtx9 + 192 | 0; //@line 8730
     HEAP32[$572 >> 2] = $96; //@line 8731
     $573 = $ReallocAsyncCtx9 + 196 | 0; //@line 8732
     HEAP32[$573 >> 2] = $98; //@line 8733
     $574 = $ReallocAsyncCtx9 + 200 | 0; //@line 8734
     HEAP32[$574 >> 2] = $100; //@line 8735
     $575 = $ReallocAsyncCtx9 + 204 | 0; //@line 8736
     HEAP32[$575 >> 2] = $102; //@line 8737
     $576 = $ReallocAsyncCtx9 + 208 | 0; //@line 8738
     HEAP32[$576 >> 2] = $104; //@line 8739
     $577 = $ReallocAsyncCtx9 + 212 | 0; //@line 8740
     HEAP32[$577 >> 2] = $106; //@line 8741
     $578 = $ReallocAsyncCtx9 + 216 | 0; //@line 8742
     HEAP32[$578 >> 2] = $108; //@line 8743
     $579 = $ReallocAsyncCtx9 + 220 | 0; //@line 8744
     HEAP32[$579 >> 2] = $110; //@line 8745
     $580 = $ReallocAsyncCtx9 + 224 | 0; //@line 8746
     HEAP32[$580 >> 2] = $112; //@line 8747
     $581 = $ReallocAsyncCtx9 + 228 | 0; //@line 8748
     HEAP32[$581 >> 2] = $114; //@line 8749
     $582 = $ReallocAsyncCtx9 + 232 | 0; //@line 8750
     HEAP32[$582 >> 2] = $116; //@line 8751
     $583 = $ReallocAsyncCtx9 + 236 | 0; //@line 8752
     HEAP32[$583 >> 2] = $120; //@line 8753
     $584 = $ReallocAsyncCtx9 + 240 | 0; //@line 8754
     HEAP32[$584 >> 2] = $124; //@line 8755
     $585 = $ReallocAsyncCtx9 + 244 | 0; //@line 8756
     HEAP32[$585 >> 2] = $126; //@line 8757
     $586 = $ReallocAsyncCtx9 + 248 | 0; //@line 8758
     HEAP32[$586 >> 2] = $128; //@line 8759
     $587 = $ReallocAsyncCtx9 + 252 | 0; //@line 8760
     HEAP32[$587 >> 2] = $130; //@line 8761
     $588 = $ReallocAsyncCtx9 + 256 | 0; //@line 8762
     HEAP32[$588 >> 2] = $132; //@line 8763
     $589 = $ReallocAsyncCtx9 + 260 | 0; //@line 8764
     HEAP32[$589 >> 2] = $134; //@line 8765
     $590 = $ReallocAsyncCtx9 + 264 | 0; //@line 8766
     HEAP32[$590 >> 2] = $136; //@line 8767
     sp = STACKTOP; //@line 8768
     return;
    }
   case 56:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 8773
     break L2;
     break;
    }
   case 60:
    {
     $608 = HEAP32[$134 >> 2] | 0; //@line 8778
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 8781
     $611 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $608 + 60 | 0, $608 + 8 | 0, 20, $$1202$i) | 0; //@line 8782
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 8785
      $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 8786
      HEAP32[$612 >> 2] = $2; //@line 8787
      $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 8788
      HEAP32[$613 >> 2] = $4; //@line 8789
      $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 8790
      HEAP32[$614 >> 2] = $6; //@line 8791
      $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 8792
      HEAP32[$615 >> 2] = $8; //@line 8793
      $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 8794
      HEAP32[$616 >> 2] = $10; //@line 8795
      $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 8796
      HEAP32[$617 >> 2] = $12; //@line 8797
      $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 8798
      HEAP32[$618 >> 2] = $14; //@line 8799
      $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 8800
      HEAP32[$619 >> 2] = $16; //@line 8801
      $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 8802
      HEAP32[$620 >> 2] = $18; //@line 8803
      $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 8804
      HEAP32[$621 >> 2] = $20; //@line 8805
      $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 8806
      HEAP32[$622 >> 2] = $22; //@line 8807
      $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 8808
      HEAP32[$623 >> 2] = $24; //@line 8809
      $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 8810
      HEAP32[$624 >> 2] = $26; //@line 8811
      $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 8812
      HEAP32[$625 >> 2] = $28; //@line 8813
      $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 8814
      HEAP32[$626 >> 2] = $30; //@line 8815
      $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 8816
      HEAP32[$627 >> 2] = $32; //@line 8817
      $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 8818
      HEAP32[$628 >> 2] = $34; //@line 8819
      $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 8820
      HEAP32[$629 >> 2] = $36; //@line 8821
      $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 8822
      HEAP32[$630 >> 2] = $38; //@line 8823
      $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 8824
      HEAP32[$631 >> 2] = $161; //@line 8825
      $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 8826
      HEAP32[$632 >> 2] = $42; //@line 8827
      $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 8828
      HEAP32[$633 >> 2] = $44; //@line 8829
      $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 8830
      HEAP32[$634 >> 2] = $46; //@line 8831
      $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 8832
      HEAP32[$635 >> 2] = $48; //@line 8833
      $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 8834
      HEAP32[$636 >> 2] = $50; //@line 8835
      $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 8836
      HEAP32[$637 >> 2] = $52; //@line 8837
      $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 8838
      HEAP32[$638 >> 2] = $54; //@line 8839
      $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 8840
      HEAP32[$639 >> 2] = $56; //@line 8841
      $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 8842
      HEAP32[$640 >> 2] = $58; //@line 8843
      $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 8844
      HEAP32[$641 >> 2] = $60; //@line 8845
      $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 8846
      HEAP32[$642 >> 2] = $62; //@line 8847
      $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 8848
      HEAP32[$643 >> 2] = $64; //@line 8849
      $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 8850
      HEAP32[$644 >> 2] = $66; //@line 8851
      $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 8852
      HEAP32[$645 >> 2] = $68; //@line 8853
      $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 8854
      HEAP32[$646 >> 2] = $70; //@line 8855
      $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 8856
      HEAP32[$647 >> 2] = $72; //@line 8857
      $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 8858
      HEAP32[$648 >> 2] = $74; //@line 8859
      $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 8860
      HEAP32[$649 >> 2] = $76; //@line 8861
      $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 8862
      HEAP32[$650 >> 2] = $78; //@line 8863
      $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 8864
      HEAP32[$651 >> 2] = $80; //@line 8865
      $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 8866
      HEAP32[$652 >> 2] = $82; //@line 8867
      $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 8868
      HEAP32[$653 >> 2] = $84; //@line 8869
      $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 8870
      HEAP32[$654 >> 2] = $86; //@line 8871
      $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 8872
      HEAP32[$655 >> 2] = $88; //@line 8873
      $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 8874
      HEAP32[$656 >> 2] = $90; //@line 8875
      $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 8876
      HEAP32[$657 >> 2] = $92; //@line 8877
      $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 8878
      HEAP32[$658 >> 2] = $94; //@line 8879
      $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 8880
      HEAP32[$659 >> 2] = $96; //@line 8881
      $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 8882
      HEAP32[$660 >> 2] = $98; //@line 8883
      $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 8884
      HEAP32[$661 >> 2] = $100; //@line 8885
      $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 8886
      HEAP32[$662 >> 2] = $102; //@line 8887
      $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 8888
      HEAP32[$663 >> 2] = $104; //@line 8889
      $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 8890
      HEAP32[$664 >> 2] = $106; //@line 8891
      $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 8892
      HEAP32[$665 >> 2] = $108; //@line 8893
      $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 8894
      HEAP32[$666 >> 2] = $110; //@line 8895
      $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 8896
      HEAP32[$667 >> 2] = $112; //@line 8897
      $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 8898
      HEAP32[$668 >> 2] = $114; //@line 8899
      $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 8900
      HEAP32[$669 >> 2] = $116; //@line 8901
      $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 8902
      HEAP32[$670 >> 2] = $120; //@line 8903
      $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 8904
      HEAP32[$671 >> 2] = $124; //@line 8905
      $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 8906
      HEAP32[$672 >> 2] = $126; //@line 8907
      $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 8908
      HEAP32[$673 >> 2] = $128; //@line 8909
      $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 8910
      HEAP32[$674 >> 2] = $130; //@line 8911
      $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 8912
      HEAP32[$675 >> 2] = $132; //@line 8913
      $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 8914
      HEAP32[$676 >> 2] = $134; //@line 8915
      $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 8916
      HEAP32[$677 >> 2] = $136; //@line 8917
      sp = STACKTOP; //@line 8918
      return;
     }
     HEAP8[___async_retval >> 0] = $611; //@line 8922
     ___async_unwind = 0; //@line 8923
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 8924
     $612 = $ReallocAsyncCtx8 + 4 | 0; //@line 8925
     HEAP32[$612 >> 2] = $2; //@line 8926
     $613 = $ReallocAsyncCtx8 + 8 | 0; //@line 8927
     HEAP32[$613 >> 2] = $4; //@line 8928
     $614 = $ReallocAsyncCtx8 + 12 | 0; //@line 8929
     HEAP32[$614 >> 2] = $6; //@line 8930
     $615 = $ReallocAsyncCtx8 + 16 | 0; //@line 8931
     HEAP32[$615 >> 2] = $8; //@line 8932
     $616 = $ReallocAsyncCtx8 + 20 | 0; //@line 8933
     HEAP32[$616 >> 2] = $10; //@line 8934
     $617 = $ReallocAsyncCtx8 + 24 | 0; //@line 8935
     HEAP32[$617 >> 2] = $12; //@line 8936
     $618 = $ReallocAsyncCtx8 + 28 | 0; //@line 8937
     HEAP32[$618 >> 2] = $14; //@line 8938
     $619 = $ReallocAsyncCtx8 + 32 | 0; //@line 8939
     HEAP32[$619 >> 2] = $16; //@line 8940
     $620 = $ReallocAsyncCtx8 + 36 | 0; //@line 8941
     HEAP32[$620 >> 2] = $18; //@line 8942
     $621 = $ReallocAsyncCtx8 + 40 | 0; //@line 8943
     HEAP32[$621 >> 2] = $20; //@line 8944
     $622 = $ReallocAsyncCtx8 + 44 | 0; //@line 8945
     HEAP32[$622 >> 2] = $22; //@line 8946
     $623 = $ReallocAsyncCtx8 + 48 | 0; //@line 8947
     HEAP32[$623 >> 2] = $24; //@line 8948
     $624 = $ReallocAsyncCtx8 + 52 | 0; //@line 8949
     HEAP32[$624 >> 2] = $26; //@line 8950
     $625 = $ReallocAsyncCtx8 + 56 | 0; //@line 8951
     HEAP32[$625 >> 2] = $28; //@line 8952
     $626 = $ReallocAsyncCtx8 + 60 | 0; //@line 8953
     HEAP32[$626 >> 2] = $30; //@line 8954
     $627 = $ReallocAsyncCtx8 + 64 | 0; //@line 8955
     HEAP32[$627 >> 2] = $32; //@line 8956
     $628 = $ReallocAsyncCtx8 + 68 | 0; //@line 8957
     HEAP32[$628 >> 2] = $34; //@line 8958
     $629 = $ReallocAsyncCtx8 + 72 | 0; //@line 8959
     HEAP32[$629 >> 2] = $36; //@line 8960
     $630 = $ReallocAsyncCtx8 + 76 | 0; //@line 8961
     HEAP32[$630 >> 2] = $38; //@line 8962
     $631 = $ReallocAsyncCtx8 + 80 | 0; //@line 8963
     HEAP32[$631 >> 2] = $161; //@line 8964
     $632 = $ReallocAsyncCtx8 + 84 | 0; //@line 8965
     HEAP32[$632 >> 2] = $42; //@line 8966
     $633 = $ReallocAsyncCtx8 + 88 | 0; //@line 8967
     HEAP32[$633 >> 2] = $44; //@line 8968
     $634 = $ReallocAsyncCtx8 + 92 | 0; //@line 8969
     HEAP32[$634 >> 2] = $46; //@line 8970
     $635 = $ReallocAsyncCtx8 + 96 | 0; //@line 8971
     HEAP32[$635 >> 2] = $48; //@line 8972
     $636 = $ReallocAsyncCtx8 + 100 | 0; //@line 8973
     HEAP32[$636 >> 2] = $50; //@line 8974
     $637 = $ReallocAsyncCtx8 + 104 | 0; //@line 8975
     HEAP32[$637 >> 2] = $52; //@line 8976
     $638 = $ReallocAsyncCtx8 + 108 | 0; //@line 8977
     HEAP32[$638 >> 2] = $54; //@line 8978
     $639 = $ReallocAsyncCtx8 + 112 | 0; //@line 8979
     HEAP32[$639 >> 2] = $56; //@line 8980
     $640 = $ReallocAsyncCtx8 + 116 | 0; //@line 8981
     HEAP32[$640 >> 2] = $58; //@line 8982
     $641 = $ReallocAsyncCtx8 + 120 | 0; //@line 8983
     HEAP32[$641 >> 2] = $60; //@line 8984
     $642 = $ReallocAsyncCtx8 + 124 | 0; //@line 8985
     HEAP32[$642 >> 2] = $62; //@line 8986
     $643 = $ReallocAsyncCtx8 + 128 | 0; //@line 8987
     HEAP32[$643 >> 2] = $64; //@line 8988
     $644 = $ReallocAsyncCtx8 + 132 | 0; //@line 8989
     HEAP32[$644 >> 2] = $66; //@line 8990
     $645 = $ReallocAsyncCtx8 + 136 | 0; //@line 8991
     HEAP32[$645 >> 2] = $68; //@line 8992
     $646 = $ReallocAsyncCtx8 + 140 | 0; //@line 8993
     HEAP32[$646 >> 2] = $70; //@line 8994
     $647 = $ReallocAsyncCtx8 + 144 | 0; //@line 8995
     HEAP32[$647 >> 2] = $72; //@line 8996
     $648 = $ReallocAsyncCtx8 + 148 | 0; //@line 8997
     HEAP32[$648 >> 2] = $74; //@line 8998
     $649 = $ReallocAsyncCtx8 + 152 | 0; //@line 8999
     HEAP32[$649 >> 2] = $76; //@line 9000
     $650 = $ReallocAsyncCtx8 + 156 | 0; //@line 9001
     HEAP32[$650 >> 2] = $78; //@line 9002
     $651 = $ReallocAsyncCtx8 + 160 | 0; //@line 9003
     HEAP32[$651 >> 2] = $80; //@line 9004
     $652 = $ReallocAsyncCtx8 + 164 | 0; //@line 9005
     HEAP32[$652 >> 2] = $82; //@line 9006
     $653 = $ReallocAsyncCtx8 + 168 | 0; //@line 9007
     HEAP32[$653 >> 2] = $84; //@line 9008
     $654 = $ReallocAsyncCtx8 + 172 | 0; //@line 9009
     HEAP32[$654 >> 2] = $86; //@line 9010
     $655 = $ReallocAsyncCtx8 + 176 | 0; //@line 9011
     HEAP32[$655 >> 2] = $88; //@line 9012
     $656 = $ReallocAsyncCtx8 + 180 | 0; //@line 9013
     HEAP32[$656 >> 2] = $90; //@line 9014
     $657 = $ReallocAsyncCtx8 + 184 | 0; //@line 9015
     HEAP32[$657 >> 2] = $92; //@line 9016
     $658 = $ReallocAsyncCtx8 + 188 | 0; //@line 9017
     HEAP32[$658 >> 2] = $94; //@line 9018
     $659 = $ReallocAsyncCtx8 + 192 | 0; //@line 9019
     HEAP32[$659 >> 2] = $96; //@line 9020
     $660 = $ReallocAsyncCtx8 + 196 | 0; //@line 9021
     HEAP32[$660 >> 2] = $98; //@line 9022
     $661 = $ReallocAsyncCtx8 + 200 | 0; //@line 9023
     HEAP32[$661 >> 2] = $100; //@line 9024
     $662 = $ReallocAsyncCtx8 + 204 | 0; //@line 9025
     HEAP32[$662 >> 2] = $102; //@line 9026
     $663 = $ReallocAsyncCtx8 + 208 | 0; //@line 9027
     HEAP32[$663 >> 2] = $104; //@line 9028
     $664 = $ReallocAsyncCtx8 + 212 | 0; //@line 9029
     HEAP32[$664 >> 2] = $106; //@line 9030
     $665 = $ReallocAsyncCtx8 + 216 | 0; //@line 9031
     HEAP32[$665 >> 2] = $108; //@line 9032
     $666 = $ReallocAsyncCtx8 + 220 | 0; //@line 9033
     HEAP32[$666 >> 2] = $110; //@line 9034
     $667 = $ReallocAsyncCtx8 + 224 | 0; //@line 9035
     HEAP32[$667 >> 2] = $112; //@line 9036
     $668 = $ReallocAsyncCtx8 + 228 | 0; //@line 9037
     HEAP32[$668 >> 2] = $114; //@line 9038
     $669 = $ReallocAsyncCtx8 + 232 | 0; //@line 9039
     HEAP32[$669 >> 2] = $116; //@line 9040
     $670 = $ReallocAsyncCtx8 + 236 | 0; //@line 9041
     HEAP32[$670 >> 2] = $120; //@line 9042
     $671 = $ReallocAsyncCtx8 + 240 | 0; //@line 9043
     HEAP32[$671 >> 2] = $124; //@line 9044
     $672 = $ReallocAsyncCtx8 + 244 | 0; //@line 9045
     HEAP32[$672 >> 2] = $126; //@line 9046
     $673 = $ReallocAsyncCtx8 + 248 | 0; //@line 9047
     HEAP32[$673 >> 2] = $128; //@line 9048
     $674 = $ReallocAsyncCtx8 + 252 | 0; //@line 9049
     HEAP32[$674 >> 2] = $130; //@line 9050
     $675 = $ReallocAsyncCtx8 + 256 | 0; //@line 9051
     HEAP32[$675 >> 2] = $132; //@line 9052
     $676 = $ReallocAsyncCtx8 + 260 | 0; //@line 9053
     HEAP32[$676 >> 2] = $134; //@line 9054
     $677 = $ReallocAsyncCtx8 + 264 | 0; //@line 9055
     HEAP32[$677 >> 2] = $136; //@line 9056
     sp = STACKTOP; //@line 9057
     return;
    }
   case 63:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 9062
     $679 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $84, $88, 11, $$1202$i) | 0; //@line 9063
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 9066
      $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 9067
      HEAP32[$680 >> 2] = $2; //@line 9068
      $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 9069
      HEAP32[$681 >> 2] = $4; //@line 9070
      $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 9071
      HEAP32[$682 >> 2] = $6; //@line 9072
      $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 9073
      HEAP32[$683 >> 2] = $8; //@line 9074
      $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 9075
      HEAP32[$684 >> 2] = $10; //@line 9076
      $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 9077
      HEAP32[$685 >> 2] = $12; //@line 9078
      $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 9079
      HEAP32[$686 >> 2] = $14; //@line 9080
      $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 9081
      HEAP32[$687 >> 2] = $16; //@line 9082
      $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 9083
      HEAP32[$688 >> 2] = $18; //@line 9084
      $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 9085
      HEAP32[$689 >> 2] = $20; //@line 9086
      $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 9087
      HEAP32[$690 >> 2] = $22; //@line 9088
      $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 9089
      HEAP32[$691 >> 2] = $24; //@line 9090
      $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 9091
      HEAP32[$692 >> 2] = $26; //@line 9092
      $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 9093
      HEAP32[$693 >> 2] = $28; //@line 9094
      $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 9095
      HEAP32[$694 >> 2] = $30; //@line 9096
      $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 9097
      HEAP32[$695 >> 2] = $32; //@line 9098
      $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 9099
      HEAP32[$696 >> 2] = $34; //@line 9100
      $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 9101
      HEAP32[$697 >> 2] = $36; //@line 9102
      $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 9103
      HEAP32[$698 >> 2] = $38; //@line 9104
      $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 9105
      HEAP32[$699 >> 2] = $161; //@line 9106
      $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 9107
      HEAP32[$700 >> 2] = $42; //@line 9108
      $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 9109
      HEAP32[$701 >> 2] = $44; //@line 9110
      $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 9111
      HEAP32[$702 >> 2] = $46; //@line 9112
      $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 9113
      HEAP32[$703 >> 2] = $48; //@line 9114
      $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 9115
      HEAP32[$704 >> 2] = $50; //@line 9116
      $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 9117
      HEAP32[$705 >> 2] = $52; //@line 9118
      $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 9119
      HEAP32[$706 >> 2] = $54; //@line 9120
      $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 9121
      HEAP32[$707 >> 2] = $56; //@line 9122
      $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 9123
      HEAP32[$708 >> 2] = $58; //@line 9124
      $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 9125
      HEAP32[$709 >> 2] = $60; //@line 9126
      $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 9127
      HEAP32[$710 >> 2] = $62; //@line 9128
      $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 9129
      HEAP32[$711 >> 2] = $64; //@line 9130
      $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 9131
      HEAP32[$712 >> 2] = $66; //@line 9132
      $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 9133
      HEAP32[$713 >> 2] = $68; //@line 9134
      $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 9135
      HEAP32[$714 >> 2] = $70; //@line 9136
      $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 9137
      HEAP32[$715 >> 2] = $72; //@line 9138
      $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 9139
      HEAP32[$716 >> 2] = $74; //@line 9140
      $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 9141
      HEAP32[$717 >> 2] = $76; //@line 9142
      $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 9143
      HEAP32[$718 >> 2] = $78; //@line 9144
      $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 9145
      HEAP32[$719 >> 2] = $80; //@line 9146
      $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 9147
      HEAP32[$720 >> 2] = $82; //@line 9148
      $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 9149
      HEAP32[$721 >> 2] = $84; //@line 9150
      $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 9151
      HEAP32[$722 >> 2] = $86; //@line 9152
      $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 9153
      HEAP32[$723 >> 2] = $88; //@line 9154
      $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 9155
      HEAP32[$724 >> 2] = $90; //@line 9156
      $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 9157
      HEAP32[$725 >> 2] = $92; //@line 9158
      $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 9159
      HEAP32[$726 >> 2] = $94; //@line 9160
      $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 9161
      HEAP32[$727 >> 2] = $96; //@line 9162
      $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 9163
      HEAP32[$728 >> 2] = $98; //@line 9164
      $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 9165
      HEAP32[$729 >> 2] = $100; //@line 9166
      $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 9167
      HEAP32[$730 >> 2] = $102; //@line 9168
      $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 9169
      HEAP32[$731 >> 2] = $104; //@line 9170
      $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 9171
      HEAP32[$732 >> 2] = $106; //@line 9172
      $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 9173
      HEAP32[$733 >> 2] = $108; //@line 9174
      $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 9175
      HEAP32[$734 >> 2] = $110; //@line 9176
      $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 9177
      HEAP32[$735 >> 2] = $112; //@line 9178
      $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 9179
      HEAP32[$736 >> 2] = $114; //@line 9180
      $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 9181
      HEAP32[$737 >> 2] = $116; //@line 9182
      $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 9183
      HEAP32[$738 >> 2] = $120; //@line 9184
      $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 9185
      HEAP32[$739 >> 2] = $124; //@line 9186
      $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 9187
      HEAP32[$740 >> 2] = $126; //@line 9188
      $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 9189
      HEAP32[$741 >> 2] = $128; //@line 9190
      $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 9191
      HEAP32[$742 >> 2] = $130; //@line 9192
      $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 9193
      HEAP32[$743 >> 2] = $132; //@line 9194
      $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 9195
      HEAP32[$744 >> 2] = $134; //@line 9196
      $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 9197
      HEAP32[$745 >> 2] = $136; //@line 9198
      sp = STACKTOP; //@line 9199
      return;
     }
     HEAP8[___async_retval >> 0] = $679; //@line 9203
     ___async_unwind = 0; //@line 9204
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 9205
     $680 = $ReallocAsyncCtx7 + 4 | 0; //@line 9206
     HEAP32[$680 >> 2] = $2; //@line 9207
     $681 = $ReallocAsyncCtx7 + 8 | 0; //@line 9208
     HEAP32[$681 >> 2] = $4; //@line 9209
     $682 = $ReallocAsyncCtx7 + 12 | 0; //@line 9210
     HEAP32[$682 >> 2] = $6; //@line 9211
     $683 = $ReallocAsyncCtx7 + 16 | 0; //@line 9212
     HEAP32[$683 >> 2] = $8; //@line 9213
     $684 = $ReallocAsyncCtx7 + 20 | 0; //@line 9214
     HEAP32[$684 >> 2] = $10; //@line 9215
     $685 = $ReallocAsyncCtx7 + 24 | 0; //@line 9216
     HEAP32[$685 >> 2] = $12; //@line 9217
     $686 = $ReallocAsyncCtx7 + 28 | 0; //@line 9218
     HEAP32[$686 >> 2] = $14; //@line 9219
     $687 = $ReallocAsyncCtx7 + 32 | 0; //@line 9220
     HEAP32[$687 >> 2] = $16; //@line 9221
     $688 = $ReallocAsyncCtx7 + 36 | 0; //@line 9222
     HEAP32[$688 >> 2] = $18; //@line 9223
     $689 = $ReallocAsyncCtx7 + 40 | 0; //@line 9224
     HEAP32[$689 >> 2] = $20; //@line 9225
     $690 = $ReallocAsyncCtx7 + 44 | 0; //@line 9226
     HEAP32[$690 >> 2] = $22; //@line 9227
     $691 = $ReallocAsyncCtx7 + 48 | 0; //@line 9228
     HEAP32[$691 >> 2] = $24; //@line 9229
     $692 = $ReallocAsyncCtx7 + 52 | 0; //@line 9230
     HEAP32[$692 >> 2] = $26; //@line 9231
     $693 = $ReallocAsyncCtx7 + 56 | 0; //@line 9232
     HEAP32[$693 >> 2] = $28; //@line 9233
     $694 = $ReallocAsyncCtx7 + 60 | 0; //@line 9234
     HEAP32[$694 >> 2] = $30; //@line 9235
     $695 = $ReallocAsyncCtx7 + 64 | 0; //@line 9236
     HEAP32[$695 >> 2] = $32; //@line 9237
     $696 = $ReallocAsyncCtx7 + 68 | 0; //@line 9238
     HEAP32[$696 >> 2] = $34; //@line 9239
     $697 = $ReallocAsyncCtx7 + 72 | 0; //@line 9240
     HEAP32[$697 >> 2] = $36; //@line 9241
     $698 = $ReallocAsyncCtx7 + 76 | 0; //@line 9242
     HEAP32[$698 >> 2] = $38; //@line 9243
     $699 = $ReallocAsyncCtx7 + 80 | 0; //@line 9244
     HEAP32[$699 >> 2] = $161; //@line 9245
     $700 = $ReallocAsyncCtx7 + 84 | 0; //@line 9246
     HEAP32[$700 >> 2] = $42; //@line 9247
     $701 = $ReallocAsyncCtx7 + 88 | 0; //@line 9248
     HEAP32[$701 >> 2] = $44; //@line 9249
     $702 = $ReallocAsyncCtx7 + 92 | 0; //@line 9250
     HEAP32[$702 >> 2] = $46; //@line 9251
     $703 = $ReallocAsyncCtx7 + 96 | 0; //@line 9252
     HEAP32[$703 >> 2] = $48; //@line 9253
     $704 = $ReallocAsyncCtx7 + 100 | 0; //@line 9254
     HEAP32[$704 >> 2] = $50; //@line 9255
     $705 = $ReallocAsyncCtx7 + 104 | 0; //@line 9256
     HEAP32[$705 >> 2] = $52; //@line 9257
     $706 = $ReallocAsyncCtx7 + 108 | 0; //@line 9258
     HEAP32[$706 >> 2] = $54; //@line 9259
     $707 = $ReallocAsyncCtx7 + 112 | 0; //@line 9260
     HEAP32[$707 >> 2] = $56; //@line 9261
     $708 = $ReallocAsyncCtx7 + 116 | 0; //@line 9262
     HEAP32[$708 >> 2] = $58; //@line 9263
     $709 = $ReallocAsyncCtx7 + 120 | 0; //@line 9264
     HEAP32[$709 >> 2] = $60; //@line 9265
     $710 = $ReallocAsyncCtx7 + 124 | 0; //@line 9266
     HEAP32[$710 >> 2] = $62; //@line 9267
     $711 = $ReallocAsyncCtx7 + 128 | 0; //@line 9268
     HEAP32[$711 >> 2] = $64; //@line 9269
     $712 = $ReallocAsyncCtx7 + 132 | 0; //@line 9270
     HEAP32[$712 >> 2] = $66; //@line 9271
     $713 = $ReallocAsyncCtx7 + 136 | 0; //@line 9272
     HEAP32[$713 >> 2] = $68; //@line 9273
     $714 = $ReallocAsyncCtx7 + 140 | 0; //@line 9274
     HEAP32[$714 >> 2] = $70; //@line 9275
     $715 = $ReallocAsyncCtx7 + 144 | 0; //@line 9276
     HEAP32[$715 >> 2] = $72; //@line 9277
     $716 = $ReallocAsyncCtx7 + 148 | 0; //@line 9278
     HEAP32[$716 >> 2] = $74; //@line 9279
     $717 = $ReallocAsyncCtx7 + 152 | 0; //@line 9280
     HEAP32[$717 >> 2] = $76; //@line 9281
     $718 = $ReallocAsyncCtx7 + 156 | 0; //@line 9282
     HEAP32[$718 >> 2] = $78; //@line 9283
     $719 = $ReallocAsyncCtx7 + 160 | 0; //@line 9284
     HEAP32[$719 >> 2] = $80; //@line 9285
     $720 = $ReallocAsyncCtx7 + 164 | 0; //@line 9286
     HEAP32[$720 >> 2] = $82; //@line 9287
     $721 = $ReallocAsyncCtx7 + 168 | 0; //@line 9288
     HEAP32[$721 >> 2] = $84; //@line 9289
     $722 = $ReallocAsyncCtx7 + 172 | 0; //@line 9290
     HEAP32[$722 >> 2] = $86; //@line 9291
     $723 = $ReallocAsyncCtx7 + 176 | 0; //@line 9292
     HEAP32[$723 >> 2] = $88; //@line 9293
     $724 = $ReallocAsyncCtx7 + 180 | 0; //@line 9294
     HEAP32[$724 >> 2] = $90; //@line 9295
     $725 = $ReallocAsyncCtx7 + 184 | 0; //@line 9296
     HEAP32[$725 >> 2] = $92; //@line 9297
     $726 = $ReallocAsyncCtx7 + 188 | 0; //@line 9298
     HEAP32[$726 >> 2] = $94; //@line 9299
     $727 = $ReallocAsyncCtx7 + 192 | 0; //@line 9300
     HEAP32[$727 >> 2] = $96; //@line 9301
     $728 = $ReallocAsyncCtx7 + 196 | 0; //@line 9302
     HEAP32[$728 >> 2] = $98; //@line 9303
     $729 = $ReallocAsyncCtx7 + 200 | 0; //@line 9304
     HEAP32[$729 >> 2] = $100; //@line 9305
     $730 = $ReallocAsyncCtx7 + 204 | 0; //@line 9306
     HEAP32[$730 >> 2] = $102; //@line 9307
     $731 = $ReallocAsyncCtx7 + 208 | 0; //@line 9308
     HEAP32[$731 >> 2] = $104; //@line 9309
     $732 = $ReallocAsyncCtx7 + 212 | 0; //@line 9310
     HEAP32[$732 >> 2] = $106; //@line 9311
     $733 = $ReallocAsyncCtx7 + 216 | 0; //@line 9312
     HEAP32[$733 >> 2] = $108; //@line 9313
     $734 = $ReallocAsyncCtx7 + 220 | 0; //@line 9314
     HEAP32[$734 >> 2] = $110; //@line 9315
     $735 = $ReallocAsyncCtx7 + 224 | 0; //@line 9316
     HEAP32[$735 >> 2] = $112; //@line 9317
     $736 = $ReallocAsyncCtx7 + 228 | 0; //@line 9318
     HEAP32[$736 >> 2] = $114; //@line 9319
     $737 = $ReallocAsyncCtx7 + 232 | 0; //@line 9320
     HEAP32[$737 >> 2] = $116; //@line 9321
     $738 = $ReallocAsyncCtx7 + 236 | 0; //@line 9322
     HEAP32[$738 >> 2] = $120; //@line 9323
     $739 = $ReallocAsyncCtx7 + 240 | 0; //@line 9324
     HEAP32[$739 >> 2] = $124; //@line 9325
     $740 = $ReallocAsyncCtx7 + 244 | 0; //@line 9326
     HEAP32[$740 >> 2] = $126; //@line 9327
     $741 = $ReallocAsyncCtx7 + 248 | 0; //@line 9328
     HEAP32[$741 >> 2] = $128; //@line 9329
     $742 = $ReallocAsyncCtx7 + 252 | 0; //@line 9330
     HEAP32[$742 >> 2] = $130; //@line 9331
     $743 = $ReallocAsyncCtx7 + 256 | 0; //@line 9332
     HEAP32[$743 >> 2] = $132; //@line 9333
     $744 = $ReallocAsyncCtx7 + 260 | 0; //@line 9334
     HEAP32[$744 >> 2] = $134; //@line 9335
     $745 = $ReallocAsyncCtx7 + 264 | 0; //@line 9336
     HEAP32[$745 >> 2] = $136; //@line 9337
     sp = STACKTOP; //@line 9338
     return;
    }
   case 68:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 9343
     break L2;
     break;
    }
   case 72:
    {
     $763 = HEAP32[$134 >> 2] | 0; //@line 9348
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 9351
     $766 = _sn_coap_parser_options_parse_multiple_options($56, $82, $179, $763 + 64 | 0, $763 + 10 | 0, 15, $$1202$i) | 0; //@line 9352
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 9355
      $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 9356
      HEAP32[$767 >> 2] = $2; //@line 9357
      $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 9358
      HEAP32[$768 >> 2] = $4; //@line 9359
      $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 9360
      HEAP32[$769 >> 2] = $6; //@line 9361
      $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 9362
      HEAP32[$770 >> 2] = $8; //@line 9363
      $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 9364
      HEAP32[$771 >> 2] = $10; //@line 9365
      $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 9366
      HEAP32[$772 >> 2] = $12; //@line 9367
      $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 9368
      HEAP32[$773 >> 2] = $14; //@line 9369
      $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 9370
      HEAP32[$774 >> 2] = $16; //@line 9371
      $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 9372
      HEAP32[$775 >> 2] = $18; //@line 9373
      $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 9374
      HEAP32[$776 >> 2] = $20; //@line 9375
      $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 9376
      HEAP32[$777 >> 2] = $22; //@line 9377
      $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 9378
      HEAP32[$778 >> 2] = $24; //@line 9379
      $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 9380
      HEAP32[$779 >> 2] = $26; //@line 9381
      $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 9382
      HEAP32[$780 >> 2] = $28; //@line 9383
      $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 9384
      HEAP32[$781 >> 2] = $30; //@line 9385
      $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 9386
      HEAP32[$782 >> 2] = $32; //@line 9387
      $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 9388
      HEAP32[$783 >> 2] = $34; //@line 9389
      $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 9390
      HEAP32[$784 >> 2] = $36; //@line 9391
      $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 9392
      HEAP32[$785 >> 2] = $38; //@line 9393
      $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 9394
      HEAP32[$786 >> 2] = $161; //@line 9395
      $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 9396
      HEAP32[$787 >> 2] = $42; //@line 9397
      $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 9398
      HEAP32[$788 >> 2] = $44; //@line 9399
      $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 9400
      HEAP32[$789 >> 2] = $46; //@line 9401
      $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 9402
      HEAP32[$790 >> 2] = $48; //@line 9403
      $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 9404
      HEAP32[$791 >> 2] = $50; //@line 9405
      $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 9406
      HEAP32[$792 >> 2] = $52; //@line 9407
      $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 9408
      HEAP32[$793 >> 2] = $54; //@line 9409
      $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 9410
      HEAP32[$794 >> 2] = $56; //@line 9411
      $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 9412
      HEAP32[$795 >> 2] = $58; //@line 9413
      $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 9414
      HEAP32[$796 >> 2] = $60; //@line 9415
      $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 9416
      HEAP32[$797 >> 2] = $62; //@line 9417
      $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 9418
      HEAP32[$798 >> 2] = $64; //@line 9419
      $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 9420
      HEAP32[$799 >> 2] = $66; //@line 9421
      $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 9422
      HEAP32[$800 >> 2] = $68; //@line 9423
      $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 9424
      HEAP32[$801 >> 2] = $70; //@line 9425
      $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 9426
      HEAP32[$802 >> 2] = $72; //@line 9427
      $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 9428
      HEAP32[$803 >> 2] = $74; //@line 9429
      $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 9430
      HEAP32[$804 >> 2] = $76; //@line 9431
      $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 9432
      HEAP32[$805 >> 2] = $78; //@line 9433
      $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 9434
      HEAP32[$806 >> 2] = $80; //@line 9435
      $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 9436
      HEAP32[$807 >> 2] = $82; //@line 9437
      $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 9438
      HEAP32[$808 >> 2] = $84; //@line 9439
      $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 9440
      HEAP32[$809 >> 2] = $86; //@line 9441
      $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 9442
      HEAP32[$810 >> 2] = $88; //@line 9443
      $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 9444
      HEAP32[$811 >> 2] = $90; //@line 9445
      $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 9446
      HEAP32[$812 >> 2] = $92; //@line 9447
      $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 9448
      HEAP32[$813 >> 2] = $94; //@line 9449
      $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 9450
      HEAP32[$814 >> 2] = $96; //@line 9451
      $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 9452
      HEAP32[$815 >> 2] = $98; //@line 9453
      $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 9454
      HEAP32[$816 >> 2] = $100; //@line 9455
      $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 9456
      HEAP32[$817 >> 2] = $102; //@line 9457
      $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 9458
      HEAP32[$818 >> 2] = $104; //@line 9459
      $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 9460
      HEAP32[$819 >> 2] = $106; //@line 9461
      $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 9462
      HEAP32[$820 >> 2] = $108; //@line 9463
      $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 9464
      HEAP32[$821 >> 2] = $110; //@line 9465
      $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 9466
      HEAP32[$822 >> 2] = $112; //@line 9467
      $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 9468
      HEAP32[$823 >> 2] = $114; //@line 9469
      $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 9470
      HEAP32[$824 >> 2] = $116; //@line 9471
      $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 9472
      HEAP32[$825 >> 2] = $120; //@line 9473
      $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 9474
      HEAP32[$826 >> 2] = $124; //@line 9475
      $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 9476
      HEAP32[$827 >> 2] = $126; //@line 9477
      $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 9478
      HEAP32[$828 >> 2] = $128; //@line 9479
      $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 9480
      HEAP32[$829 >> 2] = $130; //@line 9481
      $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 9482
      HEAP32[$830 >> 2] = $132; //@line 9483
      $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 9484
      HEAP32[$831 >> 2] = $134; //@line 9485
      $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 9486
      HEAP32[$832 >> 2] = $136; //@line 9487
      sp = STACKTOP; //@line 9488
      return;
     }
     HEAP8[___async_retval >> 0] = $766; //@line 9492
     ___async_unwind = 0; //@line 9493
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 9494
     $767 = $ReallocAsyncCtx6 + 4 | 0; //@line 9495
     HEAP32[$767 >> 2] = $2; //@line 9496
     $768 = $ReallocAsyncCtx6 + 8 | 0; //@line 9497
     HEAP32[$768 >> 2] = $4; //@line 9498
     $769 = $ReallocAsyncCtx6 + 12 | 0; //@line 9499
     HEAP32[$769 >> 2] = $6; //@line 9500
     $770 = $ReallocAsyncCtx6 + 16 | 0; //@line 9501
     HEAP32[$770 >> 2] = $8; //@line 9502
     $771 = $ReallocAsyncCtx6 + 20 | 0; //@line 9503
     HEAP32[$771 >> 2] = $10; //@line 9504
     $772 = $ReallocAsyncCtx6 + 24 | 0; //@line 9505
     HEAP32[$772 >> 2] = $12; //@line 9506
     $773 = $ReallocAsyncCtx6 + 28 | 0; //@line 9507
     HEAP32[$773 >> 2] = $14; //@line 9508
     $774 = $ReallocAsyncCtx6 + 32 | 0; //@line 9509
     HEAP32[$774 >> 2] = $16; //@line 9510
     $775 = $ReallocAsyncCtx6 + 36 | 0; //@line 9511
     HEAP32[$775 >> 2] = $18; //@line 9512
     $776 = $ReallocAsyncCtx6 + 40 | 0; //@line 9513
     HEAP32[$776 >> 2] = $20; //@line 9514
     $777 = $ReallocAsyncCtx6 + 44 | 0; //@line 9515
     HEAP32[$777 >> 2] = $22; //@line 9516
     $778 = $ReallocAsyncCtx6 + 48 | 0; //@line 9517
     HEAP32[$778 >> 2] = $24; //@line 9518
     $779 = $ReallocAsyncCtx6 + 52 | 0; //@line 9519
     HEAP32[$779 >> 2] = $26; //@line 9520
     $780 = $ReallocAsyncCtx6 + 56 | 0; //@line 9521
     HEAP32[$780 >> 2] = $28; //@line 9522
     $781 = $ReallocAsyncCtx6 + 60 | 0; //@line 9523
     HEAP32[$781 >> 2] = $30; //@line 9524
     $782 = $ReallocAsyncCtx6 + 64 | 0; //@line 9525
     HEAP32[$782 >> 2] = $32; //@line 9526
     $783 = $ReallocAsyncCtx6 + 68 | 0; //@line 9527
     HEAP32[$783 >> 2] = $34; //@line 9528
     $784 = $ReallocAsyncCtx6 + 72 | 0; //@line 9529
     HEAP32[$784 >> 2] = $36; //@line 9530
     $785 = $ReallocAsyncCtx6 + 76 | 0; //@line 9531
     HEAP32[$785 >> 2] = $38; //@line 9532
     $786 = $ReallocAsyncCtx6 + 80 | 0; //@line 9533
     HEAP32[$786 >> 2] = $161; //@line 9534
     $787 = $ReallocAsyncCtx6 + 84 | 0; //@line 9535
     HEAP32[$787 >> 2] = $42; //@line 9536
     $788 = $ReallocAsyncCtx6 + 88 | 0; //@line 9537
     HEAP32[$788 >> 2] = $44; //@line 9538
     $789 = $ReallocAsyncCtx6 + 92 | 0; //@line 9539
     HEAP32[$789 >> 2] = $46; //@line 9540
     $790 = $ReallocAsyncCtx6 + 96 | 0; //@line 9541
     HEAP32[$790 >> 2] = $48; //@line 9542
     $791 = $ReallocAsyncCtx6 + 100 | 0; //@line 9543
     HEAP32[$791 >> 2] = $50; //@line 9544
     $792 = $ReallocAsyncCtx6 + 104 | 0; //@line 9545
     HEAP32[$792 >> 2] = $52; //@line 9546
     $793 = $ReallocAsyncCtx6 + 108 | 0; //@line 9547
     HEAP32[$793 >> 2] = $54; //@line 9548
     $794 = $ReallocAsyncCtx6 + 112 | 0; //@line 9549
     HEAP32[$794 >> 2] = $56; //@line 9550
     $795 = $ReallocAsyncCtx6 + 116 | 0; //@line 9551
     HEAP32[$795 >> 2] = $58; //@line 9552
     $796 = $ReallocAsyncCtx6 + 120 | 0; //@line 9553
     HEAP32[$796 >> 2] = $60; //@line 9554
     $797 = $ReallocAsyncCtx6 + 124 | 0; //@line 9555
     HEAP32[$797 >> 2] = $62; //@line 9556
     $798 = $ReallocAsyncCtx6 + 128 | 0; //@line 9557
     HEAP32[$798 >> 2] = $64; //@line 9558
     $799 = $ReallocAsyncCtx6 + 132 | 0; //@line 9559
     HEAP32[$799 >> 2] = $66; //@line 9560
     $800 = $ReallocAsyncCtx6 + 136 | 0; //@line 9561
     HEAP32[$800 >> 2] = $68; //@line 9562
     $801 = $ReallocAsyncCtx6 + 140 | 0; //@line 9563
     HEAP32[$801 >> 2] = $70; //@line 9564
     $802 = $ReallocAsyncCtx6 + 144 | 0; //@line 9565
     HEAP32[$802 >> 2] = $72; //@line 9566
     $803 = $ReallocAsyncCtx6 + 148 | 0; //@line 9567
     HEAP32[$803 >> 2] = $74; //@line 9568
     $804 = $ReallocAsyncCtx6 + 152 | 0; //@line 9569
     HEAP32[$804 >> 2] = $76; //@line 9570
     $805 = $ReallocAsyncCtx6 + 156 | 0; //@line 9571
     HEAP32[$805 >> 2] = $78; //@line 9572
     $806 = $ReallocAsyncCtx6 + 160 | 0; //@line 9573
     HEAP32[$806 >> 2] = $80; //@line 9574
     $807 = $ReallocAsyncCtx6 + 164 | 0; //@line 9575
     HEAP32[$807 >> 2] = $82; //@line 9576
     $808 = $ReallocAsyncCtx6 + 168 | 0; //@line 9577
     HEAP32[$808 >> 2] = $84; //@line 9578
     $809 = $ReallocAsyncCtx6 + 172 | 0; //@line 9579
     HEAP32[$809 >> 2] = $86; //@line 9580
     $810 = $ReallocAsyncCtx6 + 176 | 0; //@line 9581
     HEAP32[$810 >> 2] = $88; //@line 9582
     $811 = $ReallocAsyncCtx6 + 180 | 0; //@line 9583
     HEAP32[$811 >> 2] = $90; //@line 9584
     $812 = $ReallocAsyncCtx6 + 184 | 0; //@line 9585
     HEAP32[$812 >> 2] = $92; //@line 9586
     $813 = $ReallocAsyncCtx6 + 188 | 0; //@line 9587
     HEAP32[$813 >> 2] = $94; //@line 9588
     $814 = $ReallocAsyncCtx6 + 192 | 0; //@line 9589
     HEAP32[$814 >> 2] = $96; //@line 9590
     $815 = $ReallocAsyncCtx6 + 196 | 0; //@line 9591
     HEAP32[$815 >> 2] = $98; //@line 9592
     $816 = $ReallocAsyncCtx6 + 200 | 0; //@line 9593
     HEAP32[$816 >> 2] = $100; //@line 9594
     $817 = $ReallocAsyncCtx6 + 204 | 0; //@line 9595
     HEAP32[$817 >> 2] = $102; //@line 9596
     $818 = $ReallocAsyncCtx6 + 208 | 0; //@line 9597
     HEAP32[$818 >> 2] = $104; //@line 9598
     $819 = $ReallocAsyncCtx6 + 212 | 0; //@line 9599
     HEAP32[$819 >> 2] = $106; //@line 9600
     $820 = $ReallocAsyncCtx6 + 216 | 0; //@line 9601
     HEAP32[$820 >> 2] = $108; //@line 9602
     $821 = $ReallocAsyncCtx6 + 220 | 0; //@line 9603
     HEAP32[$821 >> 2] = $110; //@line 9604
     $822 = $ReallocAsyncCtx6 + 224 | 0; //@line 9605
     HEAP32[$822 >> 2] = $112; //@line 9606
     $823 = $ReallocAsyncCtx6 + 228 | 0; //@line 9607
     HEAP32[$823 >> 2] = $114; //@line 9608
     $824 = $ReallocAsyncCtx6 + 232 | 0; //@line 9609
     HEAP32[$824 >> 2] = $116; //@line 9610
     $825 = $ReallocAsyncCtx6 + 236 | 0; //@line 9611
     HEAP32[$825 >> 2] = $120; //@line 9612
     $826 = $ReallocAsyncCtx6 + 240 | 0; //@line 9613
     HEAP32[$826 >> 2] = $124; //@line 9614
     $827 = $ReallocAsyncCtx6 + 244 | 0; //@line 9615
     HEAP32[$827 >> 2] = $126; //@line 9616
     $828 = $ReallocAsyncCtx6 + 248 | 0; //@line 9617
     HEAP32[$828 >> 2] = $128; //@line 9618
     $829 = $ReallocAsyncCtx6 + 252 | 0; //@line 9619
     HEAP32[$829 >> 2] = $130; //@line 9620
     $830 = $ReallocAsyncCtx6 + 256 | 0; //@line 9621
     HEAP32[$830 >> 2] = $132; //@line 9622
     $831 = $ReallocAsyncCtx6 + 260 | 0; //@line 9623
     HEAP32[$831 >> 2] = $134; //@line 9624
     $832 = $ReallocAsyncCtx6 + 264 | 0; //@line 9625
     HEAP32[$832 >> 2] = $136; //@line 9626
     sp = STACKTOP; //@line 9627
     return;
    }
   case 77:
    {
     _mbed_tracef(2, 3737, 5086, $110); //@line 9632
     break L2;
     break;
    }
   case 83:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 9637
     break L2;
     break;
    }
   case 89:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 9642
     break L2;
     break;
    }
   case 95:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 9647
     break L2;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 9652
     break L2;
     break;
    }
   case 105:
    {
     _mbed_tracef(2, 3737, 5389, $132); //@line 9657
     break L2;
     break;
    }
   case 108:
    {
     if (($141 - $18 | 0) >= ($10 | 0)) {
      $943 = ___async_retval; //@line 9666
      HEAP32[$943 >> 2] = $32; //@line 9667
      return;
     }
     if ((HEAP8[$141 >> 0] | 0) == -1) {
      $933 = $141 + 1 | 0; //@line 9673
      HEAP32[$82 >> 2] = $933; //@line 9674
      $934 = $933; //@line 9675
      $936 = $18 - $934 + $10 | 0; //@line 9677
      HEAP16[$100 + 24 >> 1] = $936; //@line 9680
      if ($936 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $934; //@line 9685
       $943 = ___async_retval; //@line 9686
       HEAP32[$943 >> 2] = $32; //@line 9687
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 9691
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 9694
     $943 = ___async_retval; //@line 9695
     HEAP32[$943 >> 2] = $32; //@line 9696
     return;
    }
   }
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 9704
 $943 = ___async_retval; //@line 9705
 HEAP32[$943 >> 2] = $32; //@line 9706
 return;
}
function _sn_coap_parser__async_cb_86($0) {
 $0 = $0 | 0;
 var $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$reg2mem$0 = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink3$i = 0, $$sink8$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $140 = 0, $154 = 0, $157 = 0, $159 = 0, $16 = 0, $171 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $262 = 0, $265 = 0, $268 = 0, $269 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $284 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $361 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $432 = 0, $435 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $512 = 0, $513 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $587 = 0, $590 = 0, $591 = 0, $596 = 0, $599 = 0, $6 = 0, $60 = 0, $601 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $751 = 0, $754 = 0, $756 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $829 = 0, $832 = 0, $833 = 0, $838 = 0, $84 = 0, $841 = 0, $845 = 0, $848 = 0, $849 = 0, $854 = 0, $857 = 0, $86 = 0, $861 = 0, $864 = 0, $865 = 0, $870 = 0, $873 = 0, $877 = 0, $878 = 0, $88 = 0, $883 = 0, $884 = 0, $889 = 0, $892 = 0, $898 = 0, $899 = 0, $90 = 0, $904 = 0, $905 = 0, $910 = 0, $913 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $927 = 0, $929 = 0, $936 = 0, $937 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, label = 0, sp = 0, $274$looptemp = 0, $596$looptemp = 0, $751$looptemp = 0, $838$looptemp = 0, $854$looptemp = 0, $870$looptemp = 0, $889$looptemp = 0, $910$looptemp = 0, $262$looptemp = 0;
 sp = STACKTOP; //@line 52
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 54
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 56
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 58
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 60
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 62
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 64
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 66
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 68
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 70
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 72
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 74
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 76
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 78
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 80
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 82
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 84
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 86
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 88
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 90
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 94
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 96
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 98
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 100
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 102
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 104
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 106
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 108
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 110
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 112
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 114
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 116
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 118
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 120
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 122
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 124
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 126
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 128
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 130
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 132
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 134
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 136
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 138
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 140
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 142
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 144
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 146
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 148
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 150
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 152
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 154
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 156
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 158
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 160
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 162
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 164
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 166
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 168
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 170
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 172
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 174
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 176
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 178
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 180
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 182
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 184
 L2 : do {
  if ((HEAP8[___async_retval >> 0] | 0) > -1) {
   $$reg2mem$0 = HEAP32[$0 + 80 >> 2] | 0; //@line 190
   L3 : while (1) {
    $917 = HEAP32[$4 >> 2] | 0; //@line 192
    $918 = $917 - $18 | 0; //@line 193
    $137 = $917; //@line 196
    if (($918 | 0) > ($10 | 0)) {
     break L2;
    }
    if (!(($10 - $918 & 65535) << 16 >> 16)) {
     label = 107; //@line 203
     break;
    }
    $trunc277$i = HEAP8[$137 >> 0] | 0; //@line 206
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 107; //@line 209
     break;
    }
    $140 = $trunc277$i & 15; //@line 213
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 214
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 7; //@line 219
      break L3;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$137 + 1 >> 0] | 0; //@line 227
      $$sink214$i = 13; //@line 227
      $$sink3$i = 1; //@line 227
      label = 8; //@line 228
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$137 + 1 >> 0] << 8) + 269 | 0; //@line 240
      $$sink214$i = HEAPU8[$137 + 2 >> 0] | 0; //@line 240
      $$sink3$i = 2; //@line 240
      label = 8; //@line 241
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 245
      $159 = $137; //@line 245
      $937 = $917; //@line 245
     }
    }
    if ((label | 0) == 8) {
     label = 0; //@line 249
     $154 = $137 + $$sink3$i | 0; //@line 251
     HEAP32[$82 >> 2] = $154; //@line 252
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 254
     $159 = $154; //@line 254
     $937 = $154; //@line 254
    }
    $157 = $$1$i + ($$reg2mem$0 & 255) | 0; //@line 257
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 12; //@line 261
      break L3;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$159 + 1 >> 0] | 0; //@line 269
      $$sink216$i = 13; //@line 269
      $$sink8$i = 1; //@line 269
      label = 13; //@line 270
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$159 + 1 >> 0] << 8) + 269 | 0; //@line 282
      $$sink216$i = HEAPU8[$159 + 2 >> 0] | 0; //@line 282
      $$sink8$i = 2; //@line 282
      label = 13; //@line 283
      break;
     }
    default:
     {
      $$1202$in$i = $140; //@line 287
      $174 = $937; //@line 287
      $215 = $159; //@line 287
     }
    }
    if ((label | 0) == 13) {
     label = 0; //@line 291
     $171 = $159 + $$sink8$i | 0; //@line 293
     HEAP32[$82 >> 2] = $171; //@line 294
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 296
     $174 = $171; //@line 296
     $215 = $171; //@line 296
    }
    $$1202$i = $$1202$in$i & 65535; //@line 298
    $175 = $104 - $174 & 65535; //@line 300
    $trunc$i = $157 & 65535; //@line 301
    L20 : do {
     switch ($trunc$i << 16 >> 16) {
     case 11:
      {
       label = 62; //@line 305
       break L3;
       break;
      }
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$130 >> 2] | 0)) {
        label = 16; //@line 313
        break L3;
       }
       switch ($trunc$i << 16 >> 16) {
       case 35:
        {
         label = 31; //@line 318
         break L3;
         break;
        }
       case 4:
        {
         label = 37; //@line 323
         break L3;
         break;
        }
       case 3:
        {
         label = 42; //@line 328
         break L3;
         break;
        }
       case 8:
        {
         label = 48; //@line 333
         break L3;
         break;
        }
       case 20:
        {
         label = 59; //@line 338
         break L3;
         break;
        }
       case 11:
        {
         label = 62; //@line 343
         break L3;
         break;
        }
       case 15:
        {
         label = 71; //@line 348
         break L3;
         break;
        }
       case 12:
        {
         break L20;
         break;
        }
       case 14:
        {
         if (($$1202$i & 65535) > 4) {
          label = 27; //@line 359
          break L3;
         }
         $268 = $215 + 1 | 0; //@line 362
         HEAP32[$82 >> 2] = $268; //@line 363
         $269 = $$1202$in$i & 255; //@line 364
         if (!($269 << 24 >> 24)) {
          $$0$lcssa$i223$i = 0; //@line 367
         } else {
          $$045$i221$i = $269; //@line 369
          $$06$i220$i = 0; //@line 369
          $274 = $268; //@line 369
          while (1) {
           $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 371
           $274$looptemp = $274;
           $274 = $274 + 1 | 0; //@line 373
           HEAP32[$82 >> 2] = $274; //@line 374
           $277 = $$06$i220$i << 8 | HEAPU8[$274$looptemp >> 0]; //@line 377
           if (!($$045$i221$i << 24 >> 24)) {
            $$0$lcssa$i223$i = $277; //@line 380
            break;
           } else {
            $$06$i220$i = $277; //@line 383
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 389
         $$reg2mem$0 = $157; //@line 390
         continue L3;
         break;
        }
       case 7:
        {
         if (($$1202$i & 65535) > 2) {
          label = 55; //@line 397
          break L3;
         }
         $587 = (HEAP32[$130 >> 2] | 0) + 28 | 0; //@line 401
         if ((HEAP32[$587 >> 2] | 0) != -1) {
          label = 55; //@line 405
          break L3;
         }
         $590 = $215 + 1 | 0; //@line 408
         HEAP32[$82 >> 2] = $590; //@line 409
         $591 = $$1202$in$i & 255; //@line 410
         if (!($591 << 24 >> 24)) {
          $$0$lcssa$i265$i = 0; //@line 413
         } else {
          $$045$i263$i = $591; //@line 415
          $$06$i262$i = 0; //@line 415
          $596 = $590; //@line 415
          while (1) {
           $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 417
           $596$looptemp = $596;
           $596 = $596 + 1 | 0; //@line 419
           HEAP32[$82 >> 2] = $596; //@line 420
           $599 = $$06$i262$i << 8 | HEAPU8[$596$looptemp >> 0]; //@line 423
           if (!($$045$i263$i << 24 >> 24)) {
            $$0$lcssa$i265$i = $599; //@line 426
            break;
           } else {
            $$06$i262$i = $599; //@line 429
           }
          }
         }
         HEAP32[$587 >> 2] = $$0$lcssa$i265$i; //@line 433
         $$reg2mem$0 = $157; //@line 434
         continue L3;
         break;
        }
       case 6:
        {
         if (($$1202$i & 65535) > 2) {
          label = 67; //@line 441
          break L3;
         }
         $742 = (HEAP32[$130 >> 2] | 0) + 32 | 0; //@line 445
         if ((HEAP32[$742 >> 2] | 0) != -1) {
          label = 67; //@line 449
          break L3;
         }
         $745 = $215 + 1 | 0; //@line 452
         HEAP32[$82 >> 2] = $745; //@line 453
         $746 = $$1202$in$i & 255; //@line 454
         if (!($746 << 24 >> 24)) {
          $$0$lcssa$i272$i = 0; //@line 457
         } else {
          $$045$i270$i = $746; //@line 459
          $$06$i269$i = 0; //@line 459
          $751 = $745; //@line 459
          while (1) {
           $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 461
           $751$looptemp = $751;
           $751 = $751 + 1 | 0; //@line 463
           HEAP32[$82 >> 2] = $751; //@line 464
           $754 = $$06$i269$i << 8 | HEAPU8[$751$looptemp >> 0]; //@line 467
           if (!($$045$i270$i << 24 >> 24)) {
            $$0$lcssa$i272$i = $754; //@line 470
            break;
           } else {
            $$06$i269$i = $754; //@line 473
           }
          }
         }
         HEAP32[$742 >> 2] = $$0$lcssa$i272$i; //@line 477
         $$reg2mem$0 = $157; //@line 478
         continue L3;
         break;
        }
       case 23:
        {
         if (($$1202$i & 65535) > 3) {
          label = 76; //@line 485
          break L3;
         }
         $829 = (HEAP32[$130 >> 2] | 0) + 40 | 0; //@line 489
         if ((HEAP32[$829 >> 2] | 0) != -1) {
          label = 76; //@line 493
          break L3;
         }
         $832 = $215 + 1 | 0; //@line 496
         HEAP32[$82 >> 2] = $832; //@line 497
         $833 = $$1202$in$i & 255; //@line 498
         if (!($833 << 24 >> 24)) {
          $$0$lcssa$i258$i = 0; //@line 501
         } else {
          $$045$i256$i = $833; //@line 503
          $$06$i255$i = 0; //@line 503
          $838 = $832; //@line 503
          while (1) {
           $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 505
           $838$looptemp = $838;
           $838 = $838 + 1 | 0; //@line 507
           HEAP32[$82 >> 2] = $838; //@line 508
           $841 = $$06$i255$i << 8 | HEAPU8[$838$looptemp >> 0]; //@line 511
           if (!($$045$i256$i << 24 >> 24)) {
            $$0$lcssa$i258$i = $841; //@line 514
            break;
           } else {
            $$06$i255$i = $841; //@line 517
           }
          }
         }
         HEAP32[$829 >> 2] = $$0$lcssa$i258$i; //@line 521
         $$reg2mem$0 = $157; //@line 522
         continue L3;
         break;
        }
       case 27:
        {
         if (($$1202$i & 65535) > 3) {
          label = 82; //@line 529
          break L3;
         }
         $845 = (HEAP32[$130 >> 2] | 0) + 36 | 0; //@line 533
         if ((HEAP32[$845 >> 2] | 0) != -1) {
          label = 82; //@line 537
          break L3;
         }
         $848 = $215 + 1 | 0; //@line 540
         HEAP32[$82 >> 2] = $848; //@line 541
         $849 = $$1202$in$i & 255; //@line 542
         if (!($849 << 24 >> 24)) {
          $$0$lcssa$i251$i = 0; //@line 545
         } else {
          $$045$i249$i = $849; //@line 547
          $$06$i248$i = 0; //@line 547
          $854 = $848; //@line 547
          while (1) {
           $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 549
           $854$looptemp = $854;
           $854 = $854 + 1 | 0; //@line 551
           HEAP32[$82 >> 2] = $854; //@line 552
           $857 = $$06$i248$i << 8 | HEAPU8[$854$looptemp >> 0]; //@line 555
           if (!($$045$i249$i << 24 >> 24)) {
            $$0$lcssa$i251$i = $857; //@line 558
            break;
           } else {
            $$06$i248$i = $857; //@line 561
           }
          }
         }
         HEAP32[$845 >> 2] = $$0$lcssa$i251$i; //@line 565
         $$reg2mem$0 = $157; //@line 566
         continue L3;
         break;
        }
       case 17:
        {
         if (($$1202$i & 65535) > 2) {
          label = 88; //@line 573
          break L3;
         }
         $861 = (HEAP32[$130 >> 2] | 0) + 12 | 0; //@line 577
         if ((HEAP32[$861 >> 2] | 0) != -1) {
          label = 88; //@line 581
          break L3;
         }
         $864 = $215 + 1 | 0; //@line 584
         HEAP32[$82 >> 2] = $864; //@line 585
         $865 = $$1202$in$i & 255; //@line 586
         if (!($865 << 24 >> 24)) {
          $$0$lcssa$i244$i = 0; //@line 589
         } else {
          $$045$i242$i = $865; //@line 591
          $$06$i241$i = 0; //@line 591
          $870 = $864; //@line 591
          while (1) {
           $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 593
           $870$looptemp = $870;
           $870 = $870 + 1 | 0; //@line 595
           HEAP32[$82 >> 2] = $870; //@line 596
           $873 = $$06$i241$i << 8 | HEAPU8[$870$looptemp >> 0]; //@line 599
           if (!($$045$i242$i << 24 >> 24)) {
            $$0$lcssa$i244$i = $873; //@line 602
            break;
           } else {
            $$06$i241$i = $873; //@line 605
           }
          }
         }
         HEAP32[$861 >> 2] = $$0$lcssa$i244$i; //@line 609
         $$reg2mem$0 = $157; //@line 610
         continue L3;
         break;
        }
       case 60:
        {
         if (($$1202$i & 65535) > 4) {
          label = 94; //@line 617
          break L3;
         }
         $877 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 621
         $878 = HEAP8[$877 >> 0] | 0; //@line 622
         if ($878 & 1) {
          label = 94; //@line 626
          break L3;
         }
         HEAP8[$877 >> 0] = $878 | 1; //@line 630
         $883 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 632
         HEAP32[$82 >> 2] = $883; //@line 633
         $884 = $$1202$in$i & 255; //@line 634
         if (!($884 << 24 >> 24)) {
          $$0$lcssa$i237$i = 0; //@line 637
         } else {
          $$045$i235$i = $884; //@line 639
          $$06$i234$i = 0; //@line 639
          $889 = $883; //@line 639
          while (1) {
           $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 641
           $889$looptemp = $889;
           $889 = $889 + 1 | 0; //@line 643
           HEAP32[$82 >> 2] = $889; //@line 644
           $892 = $$06$i234$i << 8 | HEAPU8[$889$looptemp >> 0]; //@line 647
           if (!($$045$i235$i << 24 >> 24)) {
            $$0$lcssa$i237$i = $892; //@line 650
            break;
           } else {
            $$06$i234$i = $892; //@line 653
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 659
         $$reg2mem$0 = $157; //@line 660
         continue L3;
         break;
        }
       case 28:
        {
         if (($$1202$i & 65535) > 4) {
          label = 100; //@line 667
          break L3;
         }
         $898 = (HEAP32[$130 >> 2] | 0) + 1 | 0; //@line 671
         $899 = HEAP8[$898 >> 0] | 0; //@line 672
         if ($899 & 2) {
          label = 100; //@line 676
          break L3;
         }
         HEAP8[$898 >> 0] = $899 | 2; //@line 680
         $904 = (HEAP32[$82 >> 2] | 0) + 1 | 0; //@line 682
         HEAP32[$82 >> 2] = $904; //@line 683
         $905 = $$1202$in$i & 255; //@line 684
         if (!($905 << 24 >> 24)) {
          $$0$lcssa$i230$i = 0; //@line 687
         } else {
          $$045$i228$i = $905; //@line 689
          $$06$i227$i = 0; //@line 689
          $910 = $904; //@line 689
          while (1) {
           $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 691
           $910$looptemp = $910;
           $910 = $910 + 1 | 0; //@line 693
           HEAP32[$82 >> 2] = $910; //@line 694
           $913 = $$06$i227$i << 8 | HEAPU8[$910$looptemp >> 0]; //@line 697
           if (!($$045$i228$i << 24 >> 24)) {
            $$0$lcssa$i230$i = $913; //@line 700
            break;
           } else {
            $$06$i227$i = $913; //@line 703
           }
          }
         }
         HEAP32[(HEAP32[$130 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 709
         $$reg2mem$0 = $157; //@line 710
         continue L3;
         break;
        }
       default:
        {
         label = 104; //@line 715
         break L3;
        }
       }
       break;
      }
     case 12:
      {
       break;
      }
     default:
      {
       label = 104; //@line 725
       break L3;
      }
     }
    } while (0);
    if (($$1202$i & 65535) > 2) {
     label = 22; //@line 732
     break;
    }
    if ((HEAP32[$64 >> 2] | 0) != -1) {
     label = 22; //@line 738
     break;
    }
    $256 = $215 + 1 | 0; //@line 741
    HEAP32[$82 >> 2] = $256; //@line 742
    $257 = $$1202$in$i & 255; //@line 743
    if (!($257 << 24 >> 24)) {
     $$0$lcssa$i$i = 0; //@line 746
    } else {
     $$045$i$i = $257; //@line 748
     $$06$i$i = 0; //@line 748
     $262 = $256; //@line 748
     while (1) {
      $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 750
      $262$looptemp = $262;
      $262 = $262 + 1 | 0; //@line 752
      HEAP32[$82 >> 2] = $262; //@line 753
      $265 = $$06$i$i << 8 | HEAPU8[$262$looptemp >> 0]; //@line 756
      if (!($$045$i$i << 24 >> 24)) {
       $$0$lcssa$i$i = $265; //@line 759
       break;
      } else {
       $$06$i$i = $265; //@line 762
      }
     }
    }
    HEAP32[$64 >> 2] = $$0$lcssa$i$i; //@line 766
    $$reg2mem$0 = $157; //@line 767
   }
   switch (label | 0) {
   case 7:
    {
     _mbed_tracef(2, 3737, 4e3, $76); //@line 771
     break L2;
     break;
    }
   case 12:
    {
     _mbed_tracef(2, 3737, 4058, $106); //@line 776
     break L2;
     break;
    }
   case 16:
    {
     $178 = HEAP32[$120 >> 2] | 0; //@line 781
     $ReallocAsyncCtx3 = _emscripten_realloc_async_context(288) | 0; //@line 782
     $179 = FUNCTION_TABLE_ii[$178 & 15](68) | 0; //@line 783
     if (___async) {
      HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 786
      $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 787
      HEAP16[$180 >> 1] = $175; //@line 788
      $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 789
      HEAP32[$181 >> 2] = $2; //@line 790
      $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 791
      HEAP32[$182 >> 2] = $4; //@line 792
      $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 793
      HEAP32[$183 >> 2] = $6; //@line 794
      $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 795
      HEAP32[$184 >> 2] = $124; //@line 796
      $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 797
      HEAP32[$185 >> 2] = $8; //@line 798
      $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 799
      HEAP32[$186 >> 2] = $10; //@line 800
      $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 801
      HEAP32[$187 >> 2] = $12; //@line 802
      $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 803
      HEAP32[$188 >> 2] = $14; //@line 804
      $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 805
      HEAP32[$189 >> 2] = $16; //@line 806
      $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 807
      HEAP32[$190 >> 2] = $18; //@line 808
      $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 809
      HEAP32[$191 >> 2] = $20; //@line 810
      $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 811
      HEAP32[$192 >> 2] = $22; //@line 812
      $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 813
      HEAP32[$193 >> 2] = $24; //@line 814
      $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 815
      HEAP32[$194 >> 2] = $26; //@line 816
      $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 817
      HEAP16[$195 >> 1] = $$1202$i; //@line 818
      $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 819
      HEAP32[$196 >> 2] = $28; //@line 820
      $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 821
      HEAP32[$197 >> 2] = $30; //@line 822
      $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 823
      HEAP32[$198 >> 2] = $32; //@line 824
      $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 825
      HEAP32[$199 >> 2] = $34; //@line 826
      $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 827
      HEAP32[$200 >> 2] = $157; //@line 828
      $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 829
      HEAP32[$201 >> 2] = $38; //@line 830
      $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 831
      HEAP32[$202 >> 2] = $$1202$in$i; //@line 832
      $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 833
      HEAP32[$203 >> 2] = $42; //@line 834
      $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 835
      HEAP32[$204 >> 2] = $36; //@line 836
      $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 837
      HEAP32[$205 >> 2] = $44; //@line 838
      $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 839
      HEAP32[$206 >> 2] = $46; //@line 840
      $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 841
      HEAP32[$207 >> 2] = $48; //@line 842
      $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 843
      HEAP32[$208 >> 2] = $50; //@line 844
      $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 845
      HEAP32[$209 >> 2] = $52; //@line 846
      $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 847
      HEAP32[$210 >> 2] = $54; //@line 848
      $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 849
      HEAP32[$211 >> 2] = $56; //@line 850
      $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 851
      HEAP32[$212 >> 2] = $58; //@line 852
      $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 853
      HEAP32[$213 >> 2] = $60; //@line 854
      $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 855
      HEAP32[$214 >> 2] = $215; //@line 856
      $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 857
      HEAP32[$216 >> 2] = $62; //@line 858
      $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 859
      HEAP32[$217 >> 2] = $64; //@line 860
      $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 861
      HEAP32[$218 >> 2] = $66; //@line 862
      $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 863
      HEAP32[$219 >> 2] = $68; //@line 864
      $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 865
      HEAP32[$220 >> 2] = $70; //@line 866
      $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 867
      HEAP32[$221 >> 2] = $72; //@line 868
      $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 869
      HEAP32[$222 >> 2] = $74; //@line 870
      $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 871
      HEAP32[$223 >> 2] = $76; //@line 872
      $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 873
      HEAP32[$224 >> 2] = $78; //@line 874
      $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 875
      HEAP32[$225 >> 2] = $80; //@line 876
      $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 877
      HEAP32[$226 >> 2] = $82; //@line 878
      $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 879
      HEAP32[$227 >> 2] = $84; //@line 880
      $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 881
      HEAP32[$228 >> 2] = $86; //@line 882
      $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 883
      HEAP32[$229 >> 2] = $88; //@line 884
      $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 885
      HEAP32[$230 >> 2] = $90; //@line 886
      $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 887
      HEAP32[$231 >> 2] = $92; //@line 888
      $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 889
      HEAP32[$232 >> 2] = $94; //@line 890
      $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 891
      HEAP32[$233 >> 2] = $96; //@line 892
      $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 893
      HEAP32[$234 >> 2] = $98; //@line 894
      $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 895
      HEAP32[$235 >> 2] = $100; //@line 896
      $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 897
      HEAP32[$236 >> 2] = $102; //@line 898
      $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 899
      HEAP32[$237 >> 2] = $104; //@line 900
      $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 901
      HEAP32[$238 >> 2] = $106; //@line 902
      $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 903
      HEAP16[$239 >> 1] = $trunc$i; //@line 904
      $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 905
      HEAP32[$240 >> 2] = $108; //@line 906
      $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 907
      HEAP32[$241 >> 2] = $110; //@line 908
      $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 909
      HEAP32[$242 >> 2] = $112; //@line 910
      $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 911
      HEAP32[$243 >> 2] = $114; //@line 912
      $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 913
      HEAP32[$244 >> 2] = $116; //@line 914
      $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 915
      HEAP32[$245 >> 2] = $118; //@line 916
      $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 917
      HEAP32[$246 >> 2] = $120; //@line 918
      $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 919
      HEAP32[$247 >> 2] = $122; //@line 920
      $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 921
      HEAP32[$248 >> 2] = $126; //@line 922
      $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 923
      HEAP32[$249 >> 2] = $128; //@line 924
      $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 925
      HEAP32[$250 >> 2] = $130; //@line 926
      $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 927
      HEAP32[$251 >> 2] = $132; //@line 928
      sp = STACKTOP; //@line 929
      return;
     }
     HEAP32[___async_retval >> 2] = $179; //@line 933
     ___async_unwind = 0; //@line 934
     HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 935
     $180 = $ReallocAsyncCtx3 + 4 | 0; //@line 936
     HEAP16[$180 >> 1] = $175; //@line 937
     $181 = $ReallocAsyncCtx3 + 8 | 0; //@line 938
     HEAP32[$181 >> 2] = $2; //@line 939
     $182 = $ReallocAsyncCtx3 + 12 | 0; //@line 940
     HEAP32[$182 >> 2] = $4; //@line 941
     $183 = $ReallocAsyncCtx3 + 16 | 0; //@line 942
     HEAP32[$183 >> 2] = $6; //@line 943
     $184 = $ReallocAsyncCtx3 + 20 | 0; //@line 944
     HEAP32[$184 >> 2] = $124; //@line 945
     $185 = $ReallocAsyncCtx3 + 24 | 0; //@line 946
     HEAP32[$185 >> 2] = $8; //@line 947
     $186 = $ReallocAsyncCtx3 + 28 | 0; //@line 948
     HEAP32[$186 >> 2] = $10; //@line 949
     $187 = $ReallocAsyncCtx3 + 32 | 0; //@line 950
     HEAP32[$187 >> 2] = $12; //@line 951
     $188 = $ReallocAsyncCtx3 + 36 | 0; //@line 952
     HEAP32[$188 >> 2] = $14; //@line 953
     $189 = $ReallocAsyncCtx3 + 40 | 0; //@line 954
     HEAP32[$189 >> 2] = $16; //@line 955
     $190 = $ReallocAsyncCtx3 + 44 | 0; //@line 956
     HEAP32[$190 >> 2] = $18; //@line 957
     $191 = $ReallocAsyncCtx3 + 48 | 0; //@line 958
     HEAP32[$191 >> 2] = $20; //@line 959
     $192 = $ReallocAsyncCtx3 + 52 | 0; //@line 960
     HEAP32[$192 >> 2] = $22; //@line 961
     $193 = $ReallocAsyncCtx3 + 56 | 0; //@line 962
     HEAP32[$193 >> 2] = $24; //@line 963
     $194 = $ReallocAsyncCtx3 + 60 | 0; //@line 964
     HEAP32[$194 >> 2] = $26; //@line 965
     $195 = $ReallocAsyncCtx3 + 64 | 0; //@line 966
     HEAP16[$195 >> 1] = $$1202$i; //@line 967
     $196 = $ReallocAsyncCtx3 + 68 | 0; //@line 968
     HEAP32[$196 >> 2] = $28; //@line 969
     $197 = $ReallocAsyncCtx3 + 72 | 0; //@line 970
     HEAP32[$197 >> 2] = $30; //@line 971
     $198 = $ReallocAsyncCtx3 + 76 | 0; //@line 972
     HEAP32[$198 >> 2] = $32; //@line 973
     $199 = $ReallocAsyncCtx3 + 80 | 0; //@line 974
     HEAP32[$199 >> 2] = $34; //@line 975
     $200 = $ReallocAsyncCtx3 + 84 | 0; //@line 976
     HEAP32[$200 >> 2] = $157; //@line 977
     $201 = $ReallocAsyncCtx3 + 88 | 0; //@line 978
     HEAP32[$201 >> 2] = $38; //@line 979
     $202 = $ReallocAsyncCtx3 + 92 | 0; //@line 980
     HEAP32[$202 >> 2] = $$1202$in$i; //@line 981
     $203 = $ReallocAsyncCtx3 + 96 | 0; //@line 982
     HEAP32[$203 >> 2] = $42; //@line 983
     $204 = $ReallocAsyncCtx3 + 100 | 0; //@line 984
     HEAP32[$204 >> 2] = $36; //@line 985
     $205 = $ReallocAsyncCtx3 + 104 | 0; //@line 986
     HEAP32[$205 >> 2] = $44; //@line 987
     $206 = $ReallocAsyncCtx3 + 108 | 0; //@line 988
     HEAP32[$206 >> 2] = $46; //@line 989
     $207 = $ReallocAsyncCtx3 + 112 | 0; //@line 990
     HEAP32[$207 >> 2] = $48; //@line 991
     $208 = $ReallocAsyncCtx3 + 116 | 0; //@line 992
     HEAP32[$208 >> 2] = $50; //@line 993
     $209 = $ReallocAsyncCtx3 + 120 | 0; //@line 994
     HEAP32[$209 >> 2] = $52; //@line 995
     $210 = $ReallocAsyncCtx3 + 124 | 0; //@line 996
     HEAP32[$210 >> 2] = $54; //@line 997
     $211 = $ReallocAsyncCtx3 + 128 | 0; //@line 998
     HEAP32[$211 >> 2] = $56; //@line 999
     $212 = $ReallocAsyncCtx3 + 132 | 0; //@line 1000
     HEAP32[$212 >> 2] = $58; //@line 1001
     $213 = $ReallocAsyncCtx3 + 136 | 0; //@line 1002
     HEAP32[$213 >> 2] = $60; //@line 1003
     $214 = $ReallocAsyncCtx3 + 140 | 0; //@line 1004
     HEAP32[$214 >> 2] = $215; //@line 1005
     $216 = $ReallocAsyncCtx3 + 144 | 0; //@line 1006
     HEAP32[$216 >> 2] = $62; //@line 1007
     $217 = $ReallocAsyncCtx3 + 148 | 0; //@line 1008
     HEAP32[$217 >> 2] = $64; //@line 1009
     $218 = $ReallocAsyncCtx3 + 152 | 0; //@line 1010
     HEAP32[$218 >> 2] = $66; //@line 1011
     $219 = $ReallocAsyncCtx3 + 156 | 0; //@line 1012
     HEAP32[$219 >> 2] = $68; //@line 1013
     $220 = $ReallocAsyncCtx3 + 160 | 0; //@line 1014
     HEAP32[$220 >> 2] = $70; //@line 1015
     $221 = $ReallocAsyncCtx3 + 164 | 0; //@line 1016
     HEAP32[$221 >> 2] = $72; //@line 1017
     $222 = $ReallocAsyncCtx3 + 168 | 0; //@line 1018
     HEAP32[$222 >> 2] = $74; //@line 1019
     $223 = $ReallocAsyncCtx3 + 172 | 0; //@line 1020
     HEAP32[$223 >> 2] = $76; //@line 1021
     $224 = $ReallocAsyncCtx3 + 176 | 0; //@line 1022
     HEAP32[$224 >> 2] = $78; //@line 1023
     $225 = $ReallocAsyncCtx3 + 180 | 0; //@line 1024
     HEAP32[$225 >> 2] = $80; //@line 1025
     $226 = $ReallocAsyncCtx3 + 184 | 0; //@line 1026
     HEAP32[$226 >> 2] = $82; //@line 1027
     $227 = $ReallocAsyncCtx3 + 188 | 0; //@line 1028
     HEAP32[$227 >> 2] = $84; //@line 1029
     $228 = $ReallocAsyncCtx3 + 192 | 0; //@line 1030
     HEAP32[$228 >> 2] = $86; //@line 1031
     $229 = $ReallocAsyncCtx3 + 196 | 0; //@line 1032
     HEAP32[$229 >> 2] = $88; //@line 1033
     $230 = $ReallocAsyncCtx3 + 200 | 0; //@line 1034
     HEAP32[$230 >> 2] = $90; //@line 1035
     $231 = $ReallocAsyncCtx3 + 204 | 0; //@line 1036
     HEAP32[$231 >> 2] = $92; //@line 1037
     $232 = $ReallocAsyncCtx3 + 208 | 0; //@line 1038
     HEAP32[$232 >> 2] = $94; //@line 1039
     $233 = $ReallocAsyncCtx3 + 212 | 0; //@line 1040
     HEAP32[$233 >> 2] = $96; //@line 1041
     $234 = $ReallocAsyncCtx3 + 216 | 0; //@line 1042
     HEAP32[$234 >> 2] = $98; //@line 1043
     $235 = $ReallocAsyncCtx3 + 220 | 0; //@line 1044
     HEAP32[$235 >> 2] = $100; //@line 1045
     $236 = $ReallocAsyncCtx3 + 224 | 0; //@line 1046
     HEAP32[$236 >> 2] = $102; //@line 1047
     $237 = $ReallocAsyncCtx3 + 228 | 0; //@line 1048
     HEAP32[$237 >> 2] = $104; //@line 1049
     $238 = $ReallocAsyncCtx3 + 232 | 0; //@line 1050
     HEAP32[$238 >> 2] = $106; //@line 1051
     $239 = $ReallocAsyncCtx3 + 236 | 0; //@line 1052
     HEAP16[$239 >> 1] = $trunc$i; //@line 1053
     $240 = $ReallocAsyncCtx3 + 240 | 0; //@line 1054
     HEAP32[$240 >> 2] = $108; //@line 1055
     $241 = $ReallocAsyncCtx3 + 244 | 0; //@line 1056
     HEAP32[$241 >> 2] = $110; //@line 1057
     $242 = $ReallocAsyncCtx3 + 248 | 0; //@line 1058
     HEAP32[$242 >> 2] = $112; //@line 1059
     $243 = $ReallocAsyncCtx3 + 252 | 0; //@line 1060
     HEAP32[$243 >> 2] = $114; //@line 1061
     $244 = $ReallocAsyncCtx3 + 256 | 0; //@line 1062
     HEAP32[$244 >> 2] = $116; //@line 1063
     $245 = $ReallocAsyncCtx3 + 260 | 0; //@line 1064
     HEAP32[$245 >> 2] = $118; //@line 1065
     $246 = $ReallocAsyncCtx3 + 264 | 0; //@line 1066
     HEAP32[$246 >> 2] = $120; //@line 1067
     $247 = $ReallocAsyncCtx3 + 268 | 0; //@line 1068
     HEAP32[$247 >> 2] = $122; //@line 1069
     $248 = $ReallocAsyncCtx3 + 272 | 0; //@line 1070
     HEAP32[$248 >> 2] = $126; //@line 1071
     $249 = $ReallocAsyncCtx3 + 276 | 0; //@line 1072
     HEAP32[$249 >> 2] = $128; //@line 1073
     $250 = $ReallocAsyncCtx3 + 280 | 0; //@line 1074
     HEAP32[$250 >> 2] = $130; //@line 1075
     $251 = $ReallocAsyncCtx3 + 284 | 0; //@line 1076
     HEAP32[$251 >> 2] = $132; //@line 1077
     sp = STACKTOP; //@line 1078
     return;
    }
   case 22:
    {
     _mbed_tracef(2, 3737, 4172, $118); //@line 1083
     break L2;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4241, $34); //@line 1088
     break L2;
     break;
    }
   case 31:
    {
     $281 = $$1202$in$i & 65535; //@line 1093
     if (($$1202$i + -1 & 65535) <= 1033) {
      $284 = HEAP32[$130 >> 2] | 0; //@line 1097
      if (!(HEAP32[$284 + 44 >> 2] | 0)) {
       HEAP16[$284 + 2 >> 1] = $$1202$i; //@line 1103
       $289 = $215 + 1 | 0; //@line 1104
       HEAP32[$82 >> 2] = $289; //@line 1105
       $290 = HEAP32[$120 >> 2] | 0; //@line 1106
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 1107
       $291 = FUNCTION_TABLE_ii[$290 & 15]($$1202$i) | 0; //@line 1108
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 1111
        $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 1112
        HEAP32[$292 >> 2] = $2; //@line 1113
        $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 1114
        HEAP32[$293 >> 2] = $4; //@line 1115
        $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 1116
        HEAP32[$294 >> 2] = $6; //@line 1117
        $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 1118
        HEAP32[$295 >> 2] = $8; //@line 1119
        $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 1120
        HEAP32[$296 >> 2] = $10; //@line 1121
        $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 1122
        HEAP32[$297 >> 2] = $12; //@line 1123
        $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 1124
        HEAP32[$298 >> 2] = $14; //@line 1125
        $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 1126
        HEAP32[$299 >> 2] = $16; //@line 1127
        $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 1128
        HEAP32[$300 >> 2] = $18; //@line 1129
        $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 1130
        HEAP32[$301 >> 2] = $20; //@line 1131
        $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 1132
        HEAP32[$302 >> 2] = $22; //@line 1133
        $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 1134
        HEAP32[$303 >> 2] = $24; //@line 1135
        $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 1136
        HEAP32[$304 >> 2] = $26; //@line 1137
        $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 1138
        HEAP32[$305 >> 2] = $28; //@line 1139
        $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 1140
        HEAP32[$306 >> 2] = $30; //@line 1141
        $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 1142
        HEAP32[$307 >> 2] = $32; //@line 1143
        $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 1144
        HEAP32[$308 >> 2] = $34; //@line 1145
        $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 1146
        HEAP32[$309 >> 2] = $36; //@line 1147
        $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 1148
        HEAP32[$310 >> 2] = $38; //@line 1149
        $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 1150
        HEAP32[$311 >> 2] = $157; //@line 1151
        $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 1152
        HEAP32[$312 >> 2] = $42; //@line 1153
        $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 1154
        HEAP32[$313 >> 2] = $44; //@line 1155
        $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 1156
        HEAP32[$314 >> 2] = $46; //@line 1157
        $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 1158
        HEAP32[$315 >> 2] = $48; //@line 1159
        $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 1160
        HEAP32[$316 >> 2] = $50; //@line 1161
        $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 1162
        HEAP32[$317 >> 2] = $52; //@line 1163
        $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 1164
        HEAP32[$318 >> 2] = $54; //@line 1165
        $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 1166
        HEAP32[$319 >> 2] = $56; //@line 1167
        $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 1168
        HEAP32[$320 >> 2] = $58; //@line 1169
        $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 1170
        HEAP32[$321 >> 2] = $60; //@line 1171
        $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 1172
        HEAP32[$322 >> 2] = $62; //@line 1173
        $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 1174
        HEAP32[$323 >> 2] = $64; //@line 1175
        $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 1176
        HEAP32[$324 >> 2] = $66; //@line 1177
        $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 1178
        HEAP32[$325 >> 2] = $68; //@line 1179
        $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 1180
        HEAP32[$326 >> 2] = $70; //@line 1181
        $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 1182
        HEAP32[$327 >> 2] = $72; //@line 1183
        $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 1184
        HEAP32[$328 >> 2] = $74; //@line 1185
        $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 1186
        HEAP32[$329 >> 2] = $76; //@line 1187
        $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 1188
        HEAP32[$330 >> 2] = $78; //@line 1189
        $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 1190
        HEAP32[$331 >> 2] = $80; //@line 1191
        $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 1192
        HEAP32[$332 >> 2] = $82; //@line 1193
        $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 1194
        HEAP32[$333 >> 2] = $84; //@line 1195
        $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 1196
        HEAP32[$334 >> 2] = $86; //@line 1197
        $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 1198
        HEAP32[$335 >> 2] = $88; //@line 1199
        $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 1200
        HEAP32[$336 >> 2] = $90; //@line 1201
        $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 1202
        HEAP32[$337 >> 2] = $92; //@line 1203
        $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 1204
        HEAP32[$338 >> 2] = $94; //@line 1205
        $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 1206
        HEAP32[$339 >> 2] = $96; //@line 1207
        $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 1208
        HEAP32[$340 >> 2] = $98; //@line 1209
        $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 1210
        HEAP32[$341 >> 2] = $100; //@line 1211
        $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 1212
        HEAP32[$342 >> 2] = $102; //@line 1213
        $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 1214
        HEAP32[$343 >> 2] = $104; //@line 1215
        $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 1216
        HEAP32[$344 >> 2] = $106; //@line 1217
        $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 1218
        HEAP32[$345 >> 2] = $108; //@line 1219
        $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 1220
        HEAP32[$346 >> 2] = $289; //@line 1221
        $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 1222
        HEAP32[$347 >> 2] = $110; //@line 1223
        $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 1224
        HEAP32[$348 >> 2] = $281; //@line 1225
        $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 1226
        HEAP32[$349 >> 2] = $112; //@line 1227
        $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 1228
        HEAP32[$350 >> 2] = $114; //@line 1229
        $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 1230
        HEAP32[$351 >> 2] = $116; //@line 1231
        $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 1232
        HEAP32[$352 >> 2] = $118; //@line 1233
        $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 1234
        HEAP32[$353 >> 2] = $120; //@line 1235
        $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 1236
        HEAP32[$354 >> 2] = $122; //@line 1237
        $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 1238
        HEAP32[$355 >> 2] = $124; //@line 1239
        $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 1240
        HEAP32[$356 >> 2] = $126; //@line 1241
        $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 1242
        HEAP32[$357 >> 2] = $128; //@line 1243
        $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 1244
        HEAP32[$358 >> 2] = $130; //@line 1245
        $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 1246
        HEAP32[$359 >> 2] = $132; //@line 1247
        sp = STACKTOP; //@line 1248
        return;
       }
       HEAP32[___async_retval >> 2] = $291; //@line 1252
       ___async_unwind = 0; //@line 1253
       HEAP32[$ReallocAsyncCtx4 >> 2] = 52; //@line 1254
       $292 = $ReallocAsyncCtx4 + 4 | 0; //@line 1255
       HEAP32[$292 >> 2] = $2; //@line 1256
       $293 = $ReallocAsyncCtx4 + 8 | 0; //@line 1257
       HEAP32[$293 >> 2] = $4; //@line 1258
       $294 = $ReallocAsyncCtx4 + 12 | 0; //@line 1259
       HEAP32[$294 >> 2] = $6; //@line 1260
       $295 = $ReallocAsyncCtx4 + 16 | 0; //@line 1261
       HEAP32[$295 >> 2] = $8; //@line 1262
       $296 = $ReallocAsyncCtx4 + 20 | 0; //@line 1263
       HEAP32[$296 >> 2] = $10; //@line 1264
       $297 = $ReallocAsyncCtx4 + 24 | 0; //@line 1265
       HEAP32[$297 >> 2] = $12; //@line 1266
       $298 = $ReallocAsyncCtx4 + 28 | 0; //@line 1267
       HEAP32[$298 >> 2] = $14; //@line 1268
       $299 = $ReallocAsyncCtx4 + 32 | 0; //@line 1269
       HEAP32[$299 >> 2] = $16; //@line 1270
       $300 = $ReallocAsyncCtx4 + 36 | 0; //@line 1271
       HEAP32[$300 >> 2] = $18; //@line 1272
       $301 = $ReallocAsyncCtx4 + 40 | 0; //@line 1273
       HEAP32[$301 >> 2] = $20; //@line 1274
       $302 = $ReallocAsyncCtx4 + 44 | 0; //@line 1275
       HEAP32[$302 >> 2] = $22; //@line 1276
       $303 = $ReallocAsyncCtx4 + 48 | 0; //@line 1277
       HEAP32[$303 >> 2] = $24; //@line 1278
       $304 = $ReallocAsyncCtx4 + 52 | 0; //@line 1279
       HEAP32[$304 >> 2] = $26; //@line 1280
       $305 = $ReallocAsyncCtx4 + 56 | 0; //@line 1281
       HEAP32[$305 >> 2] = $28; //@line 1282
       $306 = $ReallocAsyncCtx4 + 60 | 0; //@line 1283
       HEAP32[$306 >> 2] = $30; //@line 1284
       $307 = $ReallocAsyncCtx4 + 64 | 0; //@line 1285
       HEAP32[$307 >> 2] = $32; //@line 1286
       $308 = $ReallocAsyncCtx4 + 68 | 0; //@line 1287
       HEAP32[$308 >> 2] = $34; //@line 1288
       $309 = $ReallocAsyncCtx4 + 72 | 0; //@line 1289
       HEAP32[$309 >> 2] = $36; //@line 1290
       $310 = $ReallocAsyncCtx4 + 76 | 0; //@line 1291
       HEAP32[$310 >> 2] = $38; //@line 1292
       $311 = $ReallocAsyncCtx4 + 80 | 0; //@line 1293
       HEAP32[$311 >> 2] = $157; //@line 1294
       $312 = $ReallocAsyncCtx4 + 84 | 0; //@line 1295
       HEAP32[$312 >> 2] = $42; //@line 1296
       $313 = $ReallocAsyncCtx4 + 88 | 0; //@line 1297
       HEAP32[$313 >> 2] = $44; //@line 1298
       $314 = $ReallocAsyncCtx4 + 92 | 0; //@line 1299
       HEAP32[$314 >> 2] = $46; //@line 1300
       $315 = $ReallocAsyncCtx4 + 96 | 0; //@line 1301
       HEAP32[$315 >> 2] = $48; //@line 1302
       $316 = $ReallocAsyncCtx4 + 100 | 0; //@line 1303
       HEAP32[$316 >> 2] = $50; //@line 1304
       $317 = $ReallocAsyncCtx4 + 104 | 0; //@line 1305
       HEAP32[$317 >> 2] = $52; //@line 1306
       $318 = $ReallocAsyncCtx4 + 108 | 0; //@line 1307
       HEAP32[$318 >> 2] = $54; //@line 1308
       $319 = $ReallocAsyncCtx4 + 112 | 0; //@line 1309
       HEAP32[$319 >> 2] = $56; //@line 1310
       $320 = $ReallocAsyncCtx4 + 116 | 0; //@line 1311
       HEAP32[$320 >> 2] = $58; //@line 1312
       $321 = $ReallocAsyncCtx4 + 120 | 0; //@line 1313
       HEAP32[$321 >> 2] = $60; //@line 1314
       $322 = $ReallocAsyncCtx4 + 124 | 0; //@line 1315
       HEAP32[$322 >> 2] = $62; //@line 1316
       $323 = $ReallocAsyncCtx4 + 128 | 0; //@line 1317
       HEAP32[$323 >> 2] = $64; //@line 1318
       $324 = $ReallocAsyncCtx4 + 132 | 0; //@line 1319
       HEAP32[$324 >> 2] = $66; //@line 1320
       $325 = $ReallocAsyncCtx4 + 136 | 0; //@line 1321
       HEAP32[$325 >> 2] = $68; //@line 1322
       $326 = $ReallocAsyncCtx4 + 140 | 0; //@line 1323
       HEAP32[$326 >> 2] = $70; //@line 1324
       $327 = $ReallocAsyncCtx4 + 144 | 0; //@line 1325
       HEAP32[$327 >> 2] = $72; //@line 1326
       $328 = $ReallocAsyncCtx4 + 148 | 0; //@line 1327
       HEAP32[$328 >> 2] = $74; //@line 1328
       $329 = $ReallocAsyncCtx4 + 152 | 0; //@line 1329
       HEAP32[$329 >> 2] = $76; //@line 1330
       $330 = $ReallocAsyncCtx4 + 156 | 0; //@line 1331
       HEAP32[$330 >> 2] = $78; //@line 1332
       $331 = $ReallocAsyncCtx4 + 160 | 0; //@line 1333
       HEAP32[$331 >> 2] = $80; //@line 1334
       $332 = $ReallocAsyncCtx4 + 164 | 0; //@line 1335
       HEAP32[$332 >> 2] = $82; //@line 1336
       $333 = $ReallocAsyncCtx4 + 168 | 0; //@line 1337
       HEAP32[$333 >> 2] = $84; //@line 1338
       $334 = $ReallocAsyncCtx4 + 172 | 0; //@line 1339
       HEAP32[$334 >> 2] = $86; //@line 1340
       $335 = $ReallocAsyncCtx4 + 176 | 0; //@line 1341
       HEAP32[$335 >> 2] = $88; //@line 1342
       $336 = $ReallocAsyncCtx4 + 180 | 0; //@line 1343
       HEAP32[$336 >> 2] = $90; //@line 1344
       $337 = $ReallocAsyncCtx4 + 184 | 0; //@line 1345
       HEAP32[$337 >> 2] = $92; //@line 1346
       $338 = $ReallocAsyncCtx4 + 188 | 0; //@line 1347
       HEAP32[$338 >> 2] = $94; //@line 1348
       $339 = $ReallocAsyncCtx4 + 192 | 0; //@line 1349
       HEAP32[$339 >> 2] = $96; //@line 1350
       $340 = $ReallocAsyncCtx4 + 196 | 0; //@line 1351
       HEAP32[$340 >> 2] = $98; //@line 1352
       $341 = $ReallocAsyncCtx4 + 200 | 0; //@line 1353
       HEAP32[$341 >> 2] = $100; //@line 1354
       $342 = $ReallocAsyncCtx4 + 204 | 0; //@line 1355
       HEAP32[$342 >> 2] = $102; //@line 1356
       $343 = $ReallocAsyncCtx4 + 208 | 0; //@line 1357
       HEAP32[$343 >> 2] = $104; //@line 1358
       $344 = $ReallocAsyncCtx4 + 212 | 0; //@line 1359
       HEAP32[$344 >> 2] = $106; //@line 1360
       $345 = $ReallocAsyncCtx4 + 216 | 0; //@line 1361
       HEAP32[$345 >> 2] = $108; //@line 1362
       $346 = $ReallocAsyncCtx4 + 220 | 0; //@line 1363
       HEAP32[$346 >> 2] = $289; //@line 1364
       $347 = $ReallocAsyncCtx4 + 224 | 0; //@line 1365
       HEAP32[$347 >> 2] = $110; //@line 1366
       $348 = $ReallocAsyncCtx4 + 228 | 0; //@line 1367
       HEAP32[$348 >> 2] = $281; //@line 1368
       $349 = $ReallocAsyncCtx4 + 232 | 0; //@line 1369
       HEAP32[$349 >> 2] = $112; //@line 1370
       $350 = $ReallocAsyncCtx4 + 236 | 0; //@line 1371
       HEAP32[$350 >> 2] = $114; //@line 1372
       $351 = $ReallocAsyncCtx4 + 240 | 0; //@line 1373
       HEAP32[$351 >> 2] = $116; //@line 1374
       $352 = $ReallocAsyncCtx4 + 244 | 0; //@line 1375
       HEAP32[$352 >> 2] = $118; //@line 1376
       $353 = $ReallocAsyncCtx4 + 248 | 0; //@line 1377
       HEAP32[$353 >> 2] = $120; //@line 1378
       $354 = $ReallocAsyncCtx4 + 252 | 0; //@line 1379
       HEAP32[$354 >> 2] = $122; //@line 1380
       $355 = $ReallocAsyncCtx4 + 256 | 0; //@line 1381
       HEAP32[$355 >> 2] = $124; //@line 1382
       $356 = $ReallocAsyncCtx4 + 260 | 0; //@line 1383
       HEAP32[$356 >> 2] = $126; //@line 1384
       $357 = $ReallocAsyncCtx4 + 264 | 0; //@line 1385
       HEAP32[$357 >> 2] = $128; //@line 1386
       $358 = $ReallocAsyncCtx4 + 268 | 0; //@line 1387
       HEAP32[$358 >> 2] = $130; //@line 1388
       $359 = $ReallocAsyncCtx4 + 272 | 0; //@line 1389
       HEAP32[$359 >> 2] = $132; //@line 1390
       sp = STACKTOP; //@line 1391
       return;
      }
     }
     _mbed_tracef(2, 3737, 4303, $72); //@line 1395
     break L2;
     break;
    }
   case 37:
    {
     $361 = HEAP32[$130 >> 2] | 0; //@line 1400
     $ReallocAsyncCtx10 = _emscripten_realloc_async_context(268) | 0; //@line 1402
     $363 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $361 + 48 | 0, $361, 4, $$1202$i) | 0; //@line 1403
     if (___async) {
      HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 1406
      $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 1407
      HEAP32[$364 >> 2] = $2; //@line 1408
      $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 1409
      HEAP32[$365 >> 2] = $4; //@line 1410
      $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 1411
      HEAP32[$366 >> 2] = $6; //@line 1412
      $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 1413
      HEAP32[$367 >> 2] = $8; //@line 1414
      $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 1415
      HEAP32[$368 >> 2] = $10; //@line 1416
      $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 1417
      HEAP32[$369 >> 2] = $12; //@line 1418
      $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 1419
      HEAP32[$370 >> 2] = $14; //@line 1420
      $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 1421
      HEAP32[$371 >> 2] = $16; //@line 1422
      $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 1423
      HEAP32[$372 >> 2] = $18; //@line 1424
      $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 1425
      HEAP32[$373 >> 2] = $20; //@line 1426
      $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 1427
      HEAP32[$374 >> 2] = $22; //@line 1428
      $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 1429
      HEAP32[$375 >> 2] = $24; //@line 1430
      $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 1431
      HEAP32[$376 >> 2] = $26; //@line 1432
      $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 1433
      HEAP32[$377 >> 2] = $28; //@line 1434
      $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 1435
      HEAP32[$378 >> 2] = $30; //@line 1436
      $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 1437
      HEAP32[$379 >> 2] = $32; //@line 1438
      $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 1439
      HEAP32[$380 >> 2] = $34; //@line 1440
      $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 1441
      HEAP32[$381 >> 2] = $36; //@line 1442
      $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 1443
      HEAP32[$382 >> 2] = $38; //@line 1444
      $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 1445
      HEAP32[$383 >> 2] = $157; //@line 1446
      $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 1447
      HEAP32[$384 >> 2] = $42; //@line 1448
      $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 1449
      HEAP32[$385 >> 2] = $44; //@line 1450
      $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 1451
      HEAP32[$386 >> 2] = $46; //@line 1452
      $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 1453
      HEAP32[$387 >> 2] = $48; //@line 1454
      $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 1455
      HEAP32[$388 >> 2] = $50; //@line 1456
      $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 1457
      HEAP32[$389 >> 2] = $52; //@line 1458
      $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 1459
      HEAP32[$390 >> 2] = $54; //@line 1460
      $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 1461
      HEAP32[$391 >> 2] = $56; //@line 1462
      $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 1463
      HEAP32[$392 >> 2] = $58; //@line 1464
      $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 1465
      HEAP32[$393 >> 2] = $60; //@line 1466
      $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 1467
      HEAP32[$394 >> 2] = $62; //@line 1468
      $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 1469
      HEAP32[$395 >> 2] = $64; //@line 1470
      $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 1471
      HEAP32[$396 >> 2] = $66; //@line 1472
      $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 1473
      HEAP32[$397 >> 2] = $68; //@line 1474
      $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 1475
      HEAP32[$398 >> 2] = $70; //@line 1476
      $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 1477
      HEAP32[$399 >> 2] = $72; //@line 1478
      $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 1479
      HEAP32[$400 >> 2] = $74; //@line 1480
      $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 1481
      HEAP32[$401 >> 2] = $76; //@line 1482
      $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 1483
      HEAP32[$402 >> 2] = $78; //@line 1484
      $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 1485
      HEAP32[$403 >> 2] = $80; //@line 1486
      $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 1487
      HEAP32[$404 >> 2] = $82; //@line 1488
      $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 1489
      HEAP32[$405 >> 2] = $84; //@line 1490
      $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 1491
      HEAP32[$406 >> 2] = $86; //@line 1492
      $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 1493
      HEAP32[$407 >> 2] = $88; //@line 1494
      $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 1495
      HEAP32[$408 >> 2] = $90; //@line 1496
      $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 1497
      HEAP32[$409 >> 2] = $92; //@line 1498
      $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 1499
      HEAP32[$410 >> 2] = $94; //@line 1500
      $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 1501
      HEAP32[$411 >> 2] = $96; //@line 1502
      $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 1503
      HEAP32[$412 >> 2] = $98; //@line 1504
      $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 1505
      HEAP32[$413 >> 2] = $100; //@line 1506
      $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 1507
      HEAP32[$414 >> 2] = $102; //@line 1508
      $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 1509
      HEAP32[$415 >> 2] = $104; //@line 1510
      $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 1511
      HEAP32[$416 >> 2] = $106; //@line 1512
      $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 1513
      HEAP32[$417 >> 2] = $108; //@line 1514
      $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 1515
      HEAP32[$418 >> 2] = $110; //@line 1516
      $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 1517
      HEAP32[$419 >> 2] = $112; //@line 1518
      $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 1519
      HEAP32[$420 >> 2] = $114; //@line 1520
      $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 1521
      HEAP32[$421 >> 2] = $116; //@line 1522
      $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 1523
      HEAP32[$422 >> 2] = $118; //@line 1524
      $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 1525
      HEAP32[$423 >> 2] = $120; //@line 1526
      $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 1527
      HEAP32[$424 >> 2] = $122; //@line 1528
      $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 1529
      HEAP32[$425 >> 2] = $124; //@line 1530
      $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 1531
      HEAP32[$426 >> 2] = $126; //@line 1532
      $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 1533
      HEAP32[$427 >> 2] = $128; //@line 1534
      $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 1535
      HEAP32[$428 >> 2] = $130; //@line 1536
      $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 1537
      HEAP32[$429 >> 2] = $132; //@line 1538
      sp = STACKTOP; //@line 1539
      return;
     }
     HEAP8[___async_retval >> 0] = $363; //@line 1543
     ___async_unwind = 0; //@line 1544
     HEAP32[$ReallocAsyncCtx10 >> 2] = 53; //@line 1545
     $364 = $ReallocAsyncCtx10 + 4 | 0; //@line 1546
     HEAP32[$364 >> 2] = $2; //@line 1547
     $365 = $ReallocAsyncCtx10 + 8 | 0; //@line 1548
     HEAP32[$365 >> 2] = $4; //@line 1549
     $366 = $ReallocAsyncCtx10 + 12 | 0; //@line 1550
     HEAP32[$366 >> 2] = $6; //@line 1551
     $367 = $ReallocAsyncCtx10 + 16 | 0; //@line 1552
     HEAP32[$367 >> 2] = $8; //@line 1553
     $368 = $ReallocAsyncCtx10 + 20 | 0; //@line 1554
     HEAP32[$368 >> 2] = $10; //@line 1555
     $369 = $ReallocAsyncCtx10 + 24 | 0; //@line 1556
     HEAP32[$369 >> 2] = $12; //@line 1557
     $370 = $ReallocAsyncCtx10 + 28 | 0; //@line 1558
     HEAP32[$370 >> 2] = $14; //@line 1559
     $371 = $ReallocAsyncCtx10 + 32 | 0; //@line 1560
     HEAP32[$371 >> 2] = $16; //@line 1561
     $372 = $ReallocAsyncCtx10 + 36 | 0; //@line 1562
     HEAP32[$372 >> 2] = $18; //@line 1563
     $373 = $ReallocAsyncCtx10 + 40 | 0; //@line 1564
     HEAP32[$373 >> 2] = $20; //@line 1565
     $374 = $ReallocAsyncCtx10 + 44 | 0; //@line 1566
     HEAP32[$374 >> 2] = $22; //@line 1567
     $375 = $ReallocAsyncCtx10 + 48 | 0; //@line 1568
     HEAP32[$375 >> 2] = $24; //@line 1569
     $376 = $ReallocAsyncCtx10 + 52 | 0; //@line 1570
     HEAP32[$376 >> 2] = $26; //@line 1571
     $377 = $ReallocAsyncCtx10 + 56 | 0; //@line 1572
     HEAP32[$377 >> 2] = $28; //@line 1573
     $378 = $ReallocAsyncCtx10 + 60 | 0; //@line 1574
     HEAP32[$378 >> 2] = $30; //@line 1575
     $379 = $ReallocAsyncCtx10 + 64 | 0; //@line 1576
     HEAP32[$379 >> 2] = $32; //@line 1577
     $380 = $ReallocAsyncCtx10 + 68 | 0; //@line 1578
     HEAP32[$380 >> 2] = $34; //@line 1579
     $381 = $ReallocAsyncCtx10 + 72 | 0; //@line 1580
     HEAP32[$381 >> 2] = $36; //@line 1581
     $382 = $ReallocAsyncCtx10 + 76 | 0; //@line 1582
     HEAP32[$382 >> 2] = $38; //@line 1583
     $383 = $ReallocAsyncCtx10 + 80 | 0; //@line 1584
     HEAP32[$383 >> 2] = $157; //@line 1585
     $384 = $ReallocAsyncCtx10 + 84 | 0; //@line 1586
     HEAP32[$384 >> 2] = $42; //@line 1587
     $385 = $ReallocAsyncCtx10 + 88 | 0; //@line 1588
     HEAP32[$385 >> 2] = $44; //@line 1589
     $386 = $ReallocAsyncCtx10 + 92 | 0; //@line 1590
     HEAP32[$386 >> 2] = $46; //@line 1591
     $387 = $ReallocAsyncCtx10 + 96 | 0; //@line 1592
     HEAP32[$387 >> 2] = $48; //@line 1593
     $388 = $ReallocAsyncCtx10 + 100 | 0; //@line 1594
     HEAP32[$388 >> 2] = $50; //@line 1595
     $389 = $ReallocAsyncCtx10 + 104 | 0; //@line 1596
     HEAP32[$389 >> 2] = $52; //@line 1597
     $390 = $ReallocAsyncCtx10 + 108 | 0; //@line 1598
     HEAP32[$390 >> 2] = $54; //@line 1599
     $391 = $ReallocAsyncCtx10 + 112 | 0; //@line 1600
     HEAP32[$391 >> 2] = $56; //@line 1601
     $392 = $ReallocAsyncCtx10 + 116 | 0; //@line 1602
     HEAP32[$392 >> 2] = $58; //@line 1603
     $393 = $ReallocAsyncCtx10 + 120 | 0; //@line 1604
     HEAP32[$393 >> 2] = $60; //@line 1605
     $394 = $ReallocAsyncCtx10 + 124 | 0; //@line 1606
     HEAP32[$394 >> 2] = $62; //@line 1607
     $395 = $ReallocAsyncCtx10 + 128 | 0; //@line 1608
     HEAP32[$395 >> 2] = $64; //@line 1609
     $396 = $ReallocAsyncCtx10 + 132 | 0; //@line 1610
     HEAP32[$396 >> 2] = $66; //@line 1611
     $397 = $ReallocAsyncCtx10 + 136 | 0; //@line 1612
     HEAP32[$397 >> 2] = $68; //@line 1613
     $398 = $ReallocAsyncCtx10 + 140 | 0; //@line 1614
     HEAP32[$398 >> 2] = $70; //@line 1615
     $399 = $ReallocAsyncCtx10 + 144 | 0; //@line 1616
     HEAP32[$399 >> 2] = $72; //@line 1617
     $400 = $ReallocAsyncCtx10 + 148 | 0; //@line 1618
     HEAP32[$400 >> 2] = $74; //@line 1619
     $401 = $ReallocAsyncCtx10 + 152 | 0; //@line 1620
     HEAP32[$401 >> 2] = $76; //@line 1621
     $402 = $ReallocAsyncCtx10 + 156 | 0; //@line 1622
     HEAP32[$402 >> 2] = $78; //@line 1623
     $403 = $ReallocAsyncCtx10 + 160 | 0; //@line 1624
     HEAP32[$403 >> 2] = $80; //@line 1625
     $404 = $ReallocAsyncCtx10 + 164 | 0; //@line 1626
     HEAP32[$404 >> 2] = $82; //@line 1627
     $405 = $ReallocAsyncCtx10 + 168 | 0; //@line 1628
     HEAP32[$405 >> 2] = $84; //@line 1629
     $406 = $ReallocAsyncCtx10 + 172 | 0; //@line 1630
     HEAP32[$406 >> 2] = $86; //@line 1631
     $407 = $ReallocAsyncCtx10 + 176 | 0; //@line 1632
     HEAP32[$407 >> 2] = $88; //@line 1633
     $408 = $ReallocAsyncCtx10 + 180 | 0; //@line 1634
     HEAP32[$408 >> 2] = $90; //@line 1635
     $409 = $ReallocAsyncCtx10 + 184 | 0; //@line 1636
     HEAP32[$409 >> 2] = $92; //@line 1637
     $410 = $ReallocAsyncCtx10 + 188 | 0; //@line 1638
     HEAP32[$410 >> 2] = $94; //@line 1639
     $411 = $ReallocAsyncCtx10 + 192 | 0; //@line 1640
     HEAP32[$411 >> 2] = $96; //@line 1641
     $412 = $ReallocAsyncCtx10 + 196 | 0; //@line 1642
     HEAP32[$412 >> 2] = $98; //@line 1643
     $413 = $ReallocAsyncCtx10 + 200 | 0; //@line 1644
     HEAP32[$413 >> 2] = $100; //@line 1645
     $414 = $ReallocAsyncCtx10 + 204 | 0; //@line 1646
     HEAP32[$414 >> 2] = $102; //@line 1647
     $415 = $ReallocAsyncCtx10 + 208 | 0; //@line 1648
     HEAP32[$415 >> 2] = $104; //@line 1649
     $416 = $ReallocAsyncCtx10 + 212 | 0; //@line 1650
     HEAP32[$416 >> 2] = $106; //@line 1651
     $417 = $ReallocAsyncCtx10 + 216 | 0; //@line 1652
     HEAP32[$417 >> 2] = $108; //@line 1653
     $418 = $ReallocAsyncCtx10 + 220 | 0; //@line 1654
     HEAP32[$418 >> 2] = $110; //@line 1655
     $419 = $ReallocAsyncCtx10 + 224 | 0; //@line 1656
     HEAP32[$419 >> 2] = $112; //@line 1657
     $420 = $ReallocAsyncCtx10 + 228 | 0; //@line 1658
     HEAP32[$420 >> 2] = $114; //@line 1659
     $421 = $ReallocAsyncCtx10 + 232 | 0; //@line 1660
     HEAP32[$421 >> 2] = $116; //@line 1661
     $422 = $ReallocAsyncCtx10 + 236 | 0; //@line 1662
     HEAP32[$422 >> 2] = $118; //@line 1663
     $423 = $ReallocAsyncCtx10 + 240 | 0; //@line 1664
     HEAP32[$423 >> 2] = $120; //@line 1665
     $424 = $ReallocAsyncCtx10 + 244 | 0; //@line 1666
     HEAP32[$424 >> 2] = $122; //@line 1667
     $425 = $ReallocAsyncCtx10 + 248 | 0; //@line 1668
     HEAP32[$425 >> 2] = $124; //@line 1669
     $426 = $ReallocAsyncCtx10 + 252 | 0; //@line 1670
     HEAP32[$426 >> 2] = $126; //@line 1671
     $427 = $ReallocAsyncCtx10 + 256 | 0; //@line 1672
     HEAP32[$427 >> 2] = $128; //@line 1673
     $428 = $ReallocAsyncCtx10 + 260 | 0; //@line 1674
     HEAP32[$428 >> 2] = $130; //@line 1675
     $429 = $ReallocAsyncCtx10 + 264 | 0; //@line 1676
     HEAP32[$429 >> 2] = $132; //@line 1677
     sp = STACKTOP; //@line 1678
     return;
    }
   case 42:
    {
     $432 = $$1202$in$i & 65535; //@line 1683
     if (($$1202$i + -1 & 65535) <= 254) {
      $435 = HEAP32[$130 >> 2] | 0; //@line 1687
      if (!(HEAP32[$435 + 52 >> 2] | 0)) {
       HEAP16[$435 + 4 >> 1] = $$1202$i; //@line 1693
       $440 = $215 + 1 | 0; //@line 1694
       HEAP32[$82 >> 2] = $440; //@line 1695
       $441 = HEAP32[$120 >> 2] | 0; //@line 1696
       $ReallocAsyncCtx5 = _emscripten_realloc_async_context(276) | 0; //@line 1697
       $442 = FUNCTION_TABLE_ii[$441 & 15]($$1202$i) | 0; //@line 1698
       if (___async) {
        HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 1701
        $443 = $ReallocAsyncCtx5 + 4 | 0; //@line 1702
        HEAP32[$443 >> 2] = $2; //@line 1703
        $444 = $ReallocAsyncCtx5 + 8 | 0; //@line 1704
        HEAP32[$444 >> 2] = $4; //@line 1705
        $445 = $ReallocAsyncCtx5 + 12 | 0; //@line 1706
        HEAP32[$445 >> 2] = $6; //@line 1707
        $446 = $ReallocAsyncCtx5 + 16 | 0; //@line 1708
        HEAP32[$446 >> 2] = $8; //@line 1709
        $447 = $ReallocAsyncCtx5 + 20 | 0; //@line 1710
        HEAP32[$447 >> 2] = $10; //@line 1711
        $448 = $ReallocAsyncCtx5 + 24 | 0; //@line 1712
        HEAP32[$448 >> 2] = $12; //@line 1713
        $449 = $ReallocAsyncCtx5 + 28 | 0; //@line 1714
        HEAP32[$449 >> 2] = $14; //@line 1715
        $450 = $ReallocAsyncCtx5 + 32 | 0; //@line 1716
        HEAP32[$450 >> 2] = $16; //@line 1717
        $451 = $ReallocAsyncCtx5 + 36 | 0; //@line 1718
        HEAP32[$451 >> 2] = $18; //@line 1719
        $452 = $ReallocAsyncCtx5 + 40 | 0; //@line 1720
        HEAP32[$452 >> 2] = $20; //@line 1721
        $453 = $ReallocAsyncCtx5 + 44 | 0; //@line 1722
        HEAP32[$453 >> 2] = $22; //@line 1723
        $454 = $ReallocAsyncCtx5 + 48 | 0; //@line 1724
        HEAP32[$454 >> 2] = $24; //@line 1725
        $455 = $ReallocAsyncCtx5 + 52 | 0; //@line 1726
        HEAP32[$455 >> 2] = $26; //@line 1727
        $456 = $ReallocAsyncCtx5 + 56 | 0; //@line 1728
        HEAP32[$456 >> 2] = $28; //@line 1729
        $457 = $ReallocAsyncCtx5 + 60 | 0; //@line 1730
        HEAP32[$457 >> 2] = $30; //@line 1731
        $458 = $ReallocAsyncCtx5 + 64 | 0; //@line 1732
        HEAP32[$458 >> 2] = $32; //@line 1733
        $459 = $ReallocAsyncCtx5 + 68 | 0; //@line 1734
        HEAP32[$459 >> 2] = $34; //@line 1735
        $460 = $ReallocAsyncCtx5 + 72 | 0; //@line 1736
        HEAP32[$460 >> 2] = $36; //@line 1737
        $461 = $ReallocAsyncCtx5 + 76 | 0; //@line 1738
        HEAP32[$461 >> 2] = $38; //@line 1739
        $462 = $ReallocAsyncCtx5 + 80 | 0; //@line 1740
        HEAP32[$462 >> 2] = $157; //@line 1741
        $463 = $ReallocAsyncCtx5 + 84 | 0; //@line 1742
        HEAP32[$463 >> 2] = $42; //@line 1743
        $464 = $ReallocAsyncCtx5 + 88 | 0; //@line 1744
        HEAP32[$464 >> 2] = $44; //@line 1745
        $465 = $ReallocAsyncCtx5 + 92 | 0; //@line 1746
        HEAP32[$465 >> 2] = $46; //@line 1747
        $466 = $ReallocAsyncCtx5 + 96 | 0; //@line 1748
        HEAP32[$466 >> 2] = $48; //@line 1749
        $467 = $ReallocAsyncCtx5 + 100 | 0; //@line 1750
        HEAP32[$467 >> 2] = $50; //@line 1751
        $468 = $ReallocAsyncCtx5 + 104 | 0; //@line 1752
        HEAP32[$468 >> 2] = $52; //@line 1753
        $469 = $ReallocAsyncCtx5 + 108 | 0; //@line 1754
        HEAP32[$469 >> 2] = $54; //@line 1755
        $470 = $ReallocAsyncCtx5 + 112 | 0; //@line 1756
        HEAP32[$470 >> 2] = $56; //@line 1757
        $471 = $ReallocAsyncCtx5 + 116 | 0; //@line 1758
        HEAP32[$471 >> 2] = $58; //@line 1759
        $472 = $ReallocAsyncCtx5 + 120 | 0; //@line 1760
        HEAP32[$472 >> 2] = $60; //@line 1761
        $473 = $ReallocAsyncCtx5 + 124 | 0; //@line 1762
        HEAP32[$473 >> 2] = $62; //@line 1763
        $474 = $ReallocAsyncCtx5 + 128 | 0; //@line 1764
        HEAP32[$474 >> 2] = $64; //@line 1765
        $475 = $ReallocAsyncCtx5 + 132 | 0; //@line 1766
        HEAP32[$475 >> 2] = $66; //@line 1767
        $476 = $ReallocAsyncCtx5 + 136 | 0; //@line 1768
        HEAP32[$476 >> 2] = $68; //@line 1769
        $477 = $ReallocAsyncCtx5 + 140 | 0; //@line 1770
        HEAP32[$477 >> 2] = $70; //@line 1771
        $478 = $ReallocAsyncCtx5 + 144 | 0; //@line 1772
        HEAP32[$478 >> 2] = $72; //@line 1773
        $479 = $ReallocAsyncCtx5 + 148 | 0; //@line 1774
        HEAP32[$479 >> 2] = $74; //@line 1775
        $480 = $ReallocAsyncCtx5 + 152 | 0; //@line 1776
        HEAP32[$480 >> 2] = $76; //@line 1777
        $481 = $ReallocAsyncCtx5 + 156 | 0; //@line 1778
        HEAP32[$481 >> 2] = $78; //@line 1779
        $482 = $ReallocAsyncCtx5 + 160 | 0; //@line 1780
        HEAP32[$482 >> 2] = $80; //@line 1781
        $483 = $ReallocAsyncCtx5 + 164 | 0; //@line 1782
        HEAP32[$483 >> 2] = $82; //@line 1783
        $484 = $ReallocAsyncCtx5 + 168 | 0; //@line 1784
        HEAP32[$484 >> 2] = $84; //@line 1785
        $485 = $ReallocAsyncCtx5 + 172 | 0; //@line 1786
        HEAP32[$485 >> 2] = $86; //@line 1787
        $486 = $ReallocAsyncCtx5 + 176 | 0; //@line 1788
        HEAP32[$486 >> 2] = $88; //@line 1789
        $487 = $ReallocAsyncCtx5 + 180 | 0; //@line 1790
        HEAP32[$487 >> 2] = $90; //@line 1791
        $488 = $ReallocAsyncCtx5 + 184 | 0; //@line 1792
        HEAP32[$488 >> 2] = $92; //@line 1793
        $489 = $ReallocAsyncCtx5 + 188 | 0; //@line 1794
        HEAP32[$489 >> 2] = $94; //@line 1795
        $490 = $ReallocAsyncCtx5 + 192 | 0; //@line 1796
        HEAP32[$490 >> 2] = $96; //@line 1797
        $491 = $ReallocAsyncCtx5 + 196 | 0; //@line 1798
        HEAP32[$491 >> 2] = $98; //@line 1799
        $492 = $ReallocAsyncCtx5 + 200 | 0; //@line 1800
        HEAP32[$492 >> 2] = $100; //@line 1801
        $493 = $ReallocAsyncCtx5 + 204 | 0; //@line 1802
        HEAP32[$493 >> 2] = $102; //@line 1803
        $494 = $ReallocAsyncCtx5 + 208 | 0; //@line 1804
        HEAP32[$494 >> 2] = $104; //@line 1805
        $495 = $ReallocAsyncCtx5 + 212 | 0; //@line 1806
        HEAP32[$495 >> 2] = $106; //@line 1807
        $496 = $ReallocAsyncCtx5 + 216 | 0; //@line 1808
        HEAP32[$496 >> 2] = $108; //@line 1809
        $497 = $ReallocAsyncCtx5 + 220 | 0; //@line 1810
        HEAP32[$497 >> 2] = $110; //@line 1811
        $498 = $ReallocAsyncCtx5 + 224 | 0; //@line 1812
        HEAP32[$498 >> 2] = $112; //@line 1813
        $499 = $ReallocAsyncCtx5 + 228 | 0; //@line 1814
        HEAP32[$499 >> 2] = $114; //@line 1815
        $500 = $ReallocAsyncCtx5 + 232 | 0; //@line 1816
        HEAP32[$500 >> 2] = $116; //@line 1817
        $501 = $ReallocAsyncCtx5 + 236 | 0; //@line 1818
        HEAP32[$501 >> 2] = $440; //@line 1819
        $502 = $ReallocAsyncCtx5 + 240 | 0; //@line 1820
        HEAP32[$502 >> 2] = $118; //@line 1821
        $503 = $ReallocAsyncCtx5 + 244 | 0; //@line 1822
        HEAP32[$503 >> 2] = $432; //@line 1823
        $504 = $ReallocAsyncCtx5 + 248 | 0; //@line 1824
        HEAP32[$504 >> 2] = $120; //@line 1825
        $505 = $ReallocAsyncCtx5 + 252 | 0; //@line 1826
        HEAP32[$505 >> 2] = $122; //@line 1827
        $506 = $ReallocAsyncCtx5 + 256 | 0; //@line 1828
        HEAP32[$506 >> 2] = $124; //@line 1829
        $507 = $ReallocAsyncCtx5 + 260 | 0; //@line 1830
        HEAP32[$507 >> 2] = $126; //@line 1831
        $508 = $ReallocAsyncCtx5 + 264 | 0; //@line 1832
        HEAP32[$508 >> 2] = $128; //@line 1833
        $509 = $ReallocAsyncCtx5 + 268 | 0; //@line 1834
        HEAP32[$509 >> 2] = $130; //@line 1835
        $510 = $ReallocAsyncCtx5 + 272 | 0; //@line 1836
        HEAP32[$510 >> 2] = $132; //@line 1837
        sp = STACKTOP; //@line 1838
        return;
       }
       HEAP32[___async_retval >> 2] = $442; //@line 1842
       ___async_unwind = 0; //@line 1843
       HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 1844
       $443 = $ReallocAsyncCtx5 + 4 | 0; //@line 1845
       HEAP32[$443 >> 2] = $2; //@line 1846
       $444 = $ReallocAsyncCtx5 + 8 | 0; //@line 1847
       HEAP32[$444 >> 2] = $4; //@line 1848
       $445 = $ReallocAsyncCtx5 + 12 | 0; //@line 1849
       HEAP32[$445 >> 2] = $6; //@line 1850
       $446 = $ReallocAsyncCtx5 + 16 | 0; //@line 1851
       HEAP32[$446 >> 2] = $8; //@line 1852
       $447 = $ReallocAsyncCtx5 + 20 | 0; //@line 1853
       HEAP32[$447 >> 2] = $10; //@line 1854
       $448 = $ReallocAsyncCtx5 + 24 | 0; //@line 1855
       HEAP32[$448 >> 2] = $12; //@line 1856
       $449 = $ReallocAsyncCtx5 + 28 | 0; //@line 1857
       HEAP32[$449 >> 2] = $14; //@line 1858
       $450 = $ReallocAsyncCtx5 + 32 | 0; //@line 1859
       HEAP32[$450 >> 2] = $16; //@line 1860
       $451 = $ReallocAsyncCtx5 + 36 | 0; //@line 1861
       HEAP32[$451 >> 2] = $18; //@line 1862
       $452 = $ReallocAsyncCtx5 + 40 | 0; //@line 1863
       HEAP32[$452 >> 2] = $20; //@line 1864
       $453 = $ReallocAsyncCtx5 + 44 | 0; //@line 1865
       HEAP32[$453 >> 2] = $22; //@line 1866
       $454 = $ReallocAsyncCtx5 + 48 | 0; //@line 1867
       HEAP32[$454 >> 2] = $24; //@line 1868
       $455 = $ReallocAsyncCtx5 + 52 | 0; //@line 1869
       HEAP32[$455 >> 2] = $26; //@line 1870
       $456 = $ReallocAsyncCtx5 + 56 | 0; //@line 1871
       HEAP32[$456 >> 2] = $28; //@line 1872
       $457 = $ReallocAsyncCtx5 + 60 | 0; //@line 1873
       HEAP32[$457 >> 2] = $30; //@line 1874
       $458 = $ReallocAsyncCtx5 + 64 | 0; //@line 1875
       HEAP32[$458 >> 2] = $32; //@line 1876
       $459 = $ReallocAsyncCtx5 + 68 | 0; //@line 1877
       HEAP32[$459 >> 2] = $34; //@line 1878
       $460 = $ReallocAsyncCtx5 + 72 | 0; //@line 1879
       HEAP32[$460 >> 2] = $36; //@line 1880
       $461 = $ReallocAsyncCtx5 + 76 | 0; //@line 1881
       HEAP32[$461 >> 2] = $38; //@line 1882
       $462 = $ReallocAsyncCtx5 + 80 | 0; //@line 1883
       HEAP32[$462 >> 2] = $157; //@line 1884
       $463 = $ReallocAsyncCtx5 + 84 | 0; //@line 1885
       HEAP32[$463 >> 2] = $42; //@line 1886
       $464 = $ReallocAsyncCtx5 + 88 | 0; //@line 1887
       HEAP32[$464 >> 2] = $44; //@line 1888
       $465 = $ReallocAsyncCtx5 + 92 | 0; //@line 1889
       HEAP32[$465 >> 2] = $46; //@line 1890
       $466 = $ReallocAsyncCtx5 + 96 | 0; //@line 1891
       HEAP32[$466 >> 2] = $48; //@line 1892
       $467 = $ReallocAsyncCtx5 + 100 | 0; //@line 1893
       HEAP32[$467 >> 2] = $50; //@line 1894
       $468 = $ReallocAsyncCtx5 + 104 | 0; //@line 1895
       HEAP32[$468 >> 2] = $52; //@line 1896
       $469 = $ReallocAsyncCtx5 + 108 | 0; //@line 1897
       HEAP32[$469 >> 2] = $54; //@line 1898
       $470 = $ReallocAsyncCtx5 + 112 | 0; //@line 1899
       HEAP32[$470 >> 2] = $56; //@line 1900
       $471 = $ReallocAsyncCtx5 + 116 | 0; //@line 1901
       HEAP32[$471 >> 2] = $58; //@line 1902
       $472 = $ReallocAsyncCtx5 + 120 | 0; //@line 1903
       HEAP32[$472 >> 2] = $60; //@line 1904
       $473 = $ReallocAsyncCtx5 + 124 | 0; //@line 1905
       HEAP32[$473 >> 2] = $62; //@line 1906
       $474 = $ReallocAsyncCtx5 + 128 | 0; //@line 1907
       HEAP32[$474 >> 2] = $64; //@line 1908
       $475 = $ReallocAsyncCtx5 + 132 | 0; //@line 1909
       HEAP32[$475 >> 2] = $66; //@line 1910
       $476 = $ReallocAsyncCtx5 + 136 | 0; //@line 1911
       HEAP32[$476 >> 2] = $68; //@line 1912
       $477 = $ReallocAsyncCtx5 + 140 | 0; //@line 1913
       HEAP32[$477 >> 2] = $70; //@line 1914
       $478 = $ReallocAsyncCtx5 + 144 | 0; //@line 1915
       HEAP32[$478 >> 2] = $72; //@line 1916
       $479 = $ReallocAsyncCtx5 + 148 | 0; //@line 1917
       HEAP32[$479 >> 2] = $74; //@line 1918
       $480 = $ReallocAsyncCtx5 + 152 | 0; //@line 1919
       HEAP32[$480 >> 2] = $76; //@line 1920
       $481 = $ReallocAsyncCtx5 + 156 | 0; //@line 1921
       HEAP32[$481 >> 2] = $78; //@line 1922
       $482 = $ReallocAsyncCtx5 + 160 | 0; //@line 1923
       HEAP32[$482 >> 2] = $80; //@line 1924
       $483 = $ReallocAsyncCtx5 + 164 | 0; //@line 1925
       HEAP32[$483 >> 2] = $82; //@line 1926
       $484 = $ReallocAsyncCtx5 + 168 | 0; //@line 1927
       HEAP32[$484 >> 2] = $84; //@line 1928
       $485 = $ReallocAsyncCtx5 + 172 | 0; //@line 1929
       HEAP32[$485 >> 2] = $86; //@line 1930
       $486 = $ReallocAsyncCtx5 + 176 | 0; //@line 1931
       HEAP32[$486 >> 2] = $88; //@line 1932
       $487 = $ReallocAsyncCtx5 + 180 | 0; //@line 1933
       HEAP32[$487 >> 2] = $90; //@line 1934
       $488 = $ReallocAsyncCtx5 + 184 | 0; //@line 1935
       HEAP32[$488 >> 2] = $92; //@line 1936
       $489 = $ReallocAsyncCtx5 + 188 | 0; //@line 1937
       HEAP32[$489 >> 2] = $94; //@line 1938
       $490 = $ReallocAsyncCtx5 + 192 | 0; //@line 1939
       HEAP32[$490 >> 2] = $96; //@line 1940
       $491 = $ReallocAsyncCtx5 + 196 | 0; //@line 1941
       HEAP32[$491 >> 2] = $98; //@line 1942
       $492 = $ReallocAsyncCtx5 + 200 | 0; //@line 1943
       HEAP32[$492 >> 2] = $100; //@line 1944
       $493 = $ReallocAsyncCtx5 + 204 | 0; //@line 1945
       HEAP32[$493 >> 2] = $102; //@line 1946
       $494 = $ReallocAsyncCtx5 + 208 | 0; //@line 1947
       HEAP32[$494 >> 2] = $104; //@line 1948
       $495 = $ReallocAsyncCtx5 + 212 | 0; //@line 1949
       HEAP32[$495 >> 2] = $106; //@line 1950
       $496 = $ReallocAsyncCtx5 + 216 | 0; //@line 1951
       HEAP32[$496 >> 2] = $108; //@line 1952
       $497 = $ReallocAsyncCtx5 + 220 | 0; //@line 1953
       HEAP32[$497 >> 2] = $110; //@line 1954
       $498 = $ReallocAsyncCtx5 + 224 | 0; //@line 1955
       HEAP32[$498 >> 2] = $112; //@line 1956
       $499 = $ReallocAsyncCtx5 + 228 | 0; //@line 1957
       HEAP32[$499 >> 2] = $114; //@line 1958
       $500 = $ReallocAsyncCtx5 + 232 | 0; //@line 1959
       HEAP32[$500 >> 2] = $116; //@line 1960
       $501 = $ReallocAsyncCtx5 + 236 | 0; //@line 1961
       HEAP32[$501 >> 2] = $440; //@line 1962
       $502 = $ReallocAsyncCtx5 + 240 | 0; //@line 1963
       HEAP32[$502 >> 2] = $118; //@line 1964
       $503 = $ReallocAsyncCtx5 + 244 | 0; //@line 1965
       HEAP32[$503 >> 2] = $432; //@line 1966
       $504 = $ReallocAsyncCtx5 + 248 | 0; //@line 1967
       HEAP32[$504 >> 2] = $120; //@line 1968
       $505 = $ReallocAsyncCtx5 + 252 | 0; //@line 1969
       HEAP32[$505 >> 2] = $122; //@line 1970
       $506 = $ReallocAsyncCtx5 + 256 | 0; //@line 1971
       HEAP32[$506 >> 2] = $124; //@line 1972
       $507 = $ReallocAsyncCtx5 + 260 | 0; //@line 1973
       HEAP32[$507 >> 2] = $126; //@line 1974
       $508 = $ReallocAsyncCtx5 + 264 | 0; //@line 1975
       HEAP32[$508 >> 2] = $128; //@line 1976
       $509 = $ReallocAsyncCtx5 + 268 | 0; //@line 1977
       HEAP32[$509 >> 2] = $130; //@line 1978
       $510 = $ReallocAsyncCtx5 + 272 | 0; //@line 1979
       HEAP32[$510 >> 2] = $132; //@line 1980
       sp = STACKTOP; //@line 1981
       return;
      }
     }
     _mbed_tracef(2, 3737, 4498, $94); //@line 1985
     break L2;
     break;
    }
   case 48:
    {
     $512 = HEAP32[$130 >> 2] | 0; //@line 1990
     $513 = $512 + 56 | 0; //@line 1991
     if (HEAP32[$513 >> 2] | 0) {
      _mbed_tracef(2, 3737, 4632, $60); //@line 1995
      break L2;
     }
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(268) | 0; //@line 1999
     $517 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $513, $512 + 6 | 0, 8, $$1202$i) | 0; //@line 2000
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 2003
      $518 = $ReallocAsyncCtx9 + 4 | 0; //@line 2004
      HEAP32[$518 >> 2] = $2; //@line 2005
      $519 = $ReallocAsyncCtx9 + 8 | 0; //@line 2006
      HEAP32[$519 >> 2] = $4; //@line 2007
      $520 = $ReallocAsyncCtx9 + 12 | 0; //@line 2008
      HEAP32[$520 >> 2] = $6; //@line 2009
      $521 = $ReallocAsyncCtx9 + 16 | 0; //@line 2010
      HEAP32[$521 >> 2] = $8; //@line 2011
      $522 = $ReallocAsyncCtx9 + 20 | 0; //@line 2012
      HEAP32[$522 >> 2] = $10; //@line 2013
      $523 = $ReallocAsyncCtx9 + 24 | 0; //@line 2014
      HEAP32[$523 >> 2] = $12; //@line 2015
      $524 = $ReallocAsyncCtx9 + 28 | 0; //@line 2016
      HEAP32[$524 >> 2] = $14; //@line 2017
      $525 = $ReallocAsyncCtx9 + 32 | 0; //@line 2018
      HEAP32[$525 >> 2] = $16; //@line 2019
      $526 = $ReallocAsyncCtx9 + 36 | 0; //@line 2020
      HEAP32[$526 >> 2] = $18; //@line 2021
      $527 = $ReallocAsyncCtx9 + 40 | 0; //@line 2022
      HEAP32[$527 >> 2] = $20; //@line 2023
      $528 = $ReallocAsyncCtx9 + 44 | 0; //@line 2024
      HEAP32[$528 >> 2] = $22; //@line 2025
      $529 = $ReallocAsyncCtx9 + 48 | 0; //@line 2026
      HEAP32[$529 >> 2] = $24; //@line 2027
      $530 = $ReallocAsyncCtx9 + 52 | 0; //@line 2028
      HEAP32[$530 >> 2] = $26; //@line 2029
      $531 = $ReallocAsyncCtx9 + 56 | 0; //@line 2030
      HEAP32[$531 >> 2] = $28; //@line 2031
      $532 = $ReallocAsyncCtx9 + 60 | 0; //@line 2032
      HEAP32[$532 >> 2] = $30; //@line 2033
      $533 = $ReallocAsyncCtx9 + 64 | 0; //@line 2034
      HEAP32[$533 >> 2] = $32; //@line 2035
      $534 = $ReallocAsyncCtx9 + 68 | 0; //@line 2036
      HEAP32[$534 >> 2] = $34; //@line 2037
      $535 = $ReallocAsyncCtx9 + 72 | 0; //@line 2038
      HEAP32[$535 >> 2] = $36; //@line 2039
      $536 = $ReallocAsyncCtx9 + 76 | 0; //@line 2040
      HEAP32[$536 >> 2] = $38; //@line 2041
      $537 = $ReallocAsyncCtx9 + 80 | 0; //@line 2042
      HEAP32[$537 >> 2] = $157; //@line 2043
      $538 = $ReallocAsyncCtx9 + 84 | 0; //@line 2044
      HEAP32[$538 >> 2] = $42; //@line 2045
      $539 = $ReallocAsyncCtx9 + 88 | 0; //@line 2046
      HEAP32[$539 >> 2] = $44; //@line 2047
      $540 = $ReallocAsyncCtx9 + 92 | 0; //@line 2048
      HEAP32[$540 >> 2] = $46; //@line 2049
      $541 = $ReallocAsyncCtx9 + 96 | 0; //@line 2050
      HEAP32[$541 >> 2] = $48; //@line 2051
      $542 = $ReallocAsyncCtx9 + 100 | 0; //@line 2052
      HEAP32[$542 >> 2] = $50; //@line 2053
      $543 = $ReallocAsyncCtx9 + 104 | 0; //@line 2054
      HEAP32[$543 >> 2] = $52; //@line 2055
      $544 = $ReallocAsyncCtx9 + 108 | 0; //@line 2056
      HEAP32[$544 >> 2] = $54; //@line 2057
      $545 = $ReallocAsyncCtx9 + 112 | 0; //@line 2058
      HEAP32[$545 >> 2] = $56; //@line 2059
      $546 = $ReallocAsyncCtx9 + 116 | 0; //@line 2060
      HEAP32[$546 >> 2] = $58; //@line 2061
      $547 = $ReallocAsyncCtx9 + 120 | 0; //@line 2062
      HEAP32[$547 >> 2] = $60; //@line 2063
      $548 = $ReallocAsyncCtx9 + 124 | 0; //@line 2064
      HEAP32[$548 >> 2] = $62; //@line 2065
      $549 = $ReallocAsyncCtx9 + 128 | 0; //@line 2066
      HEAP32[$549 >> 2] = $64; //@line 2067
      $550 = $ReallocAsyncCtx9 + 132 | 0; //@line 2068
      HEAP32[$550 >> 2] = $66; //@line 2069
      $551 = $ReallocAsyncCtx9 + 136 | 0; //@line 2070
      HEAP32[$551 >> 2] = $68; //@line 2071
      $552 = $ReallocAsyncCtx9 + 140 | 0; //@line 2072
      HEAP32[$552 >> 2] = $70; //@line 2073
      $553 = $ReallocAsyncCtx9 + 144 | 0; //@line 2074
      HEAP32[$553 >> 2] = $72; //@line 2075
      $554 = $ReallocAsyncCtx9 + 148 | 0; //@line 2076
      HEAP32[$554 >> 2] = $74; //@line 2077
      $555 = $ReallocAsyncCtx9 + 152 | 0; //@line 2078
      HEAP32[$555 >> 2] = $76; //@line 2079
      $556 = $ReallocAsyncCtx9 + 156 | 0; //@line 2080
      HEAP32[$556 >> 2] = $78; //@line 2081
      $557 = $ReallocAsyncCtx9 + 160 | 0; //@line 2082
      HEAP32[$557 >> 2] = $80; //@line 2083
      $558 = $ReallocAsyncCtx9 + 164 | 0; //@line 2084
      HEAP32[$558 >> 2] = $82; //@line 2085
      $559 = $ReallocAsyncCtx9 + 168 | 0; //@line 2086
      HEAP32[$559 >> 2] = $84; //@line 2087
      $560 = $ReallocAsyncCtx9 + 172 | 0; //@line 2088
      HEAP32[$560 >> 2] = $86; //@line 2089
      $561 = $ReallocAsyncCtx9 + 176 | 0; //@line 2090
      HEAP32[$561 >> 2] = $88; //@line 2091
      $562 = $ReallocAsyncCtx9 + 180 | 0; //@line 2092
      HEAP32[$562 >> 2] = $90; //@line 2093
      $563 = $ReallocAsyncCtx9 + 184 | 0; //@line 2094
      HEAP32[$563 >> 2] = $92; //@line 2095
      $564 = $ReallocAsyncCtx9 + 188 | 0; //@line 2096
      HEAP32[$564 >> 2] = $94; //@line 2097
      $565 = $ReallocAsyncCtx9 + 192 | 0; //@line 2098
      HEAP32[$565 >> 2] = $96; //@line 2099
      $566 = $ReallocAsyncCtx9 + 196 | 0; //@line 2100
      HEAP32[$566 >> 2] = $98; //@line 2101
      $567 = $ReallocAsyncCtx9 + 200 | 0; //@line 2102
      HEAP32[$567 >> 2] = $100; //@line 2103
      $568 = $ReallocAsyncCtx9 + 204 | 0; //@line 2104
      HEAP32[$568 >> 2] = $102; //@line 2105
      $569 = $ReallocAsyncCtx9 + 208 | 0; //@line 2106
      HEAP32[$569 >> 2] = $104; //@line 2107
      $570 = $ReallocAsyncCtx9 + 212 | 0; //@line 2108
      HEAP32[$570 >> 2] = $106; //@line 2109
      $571 = $ReallocAsyncCtx9 + 216 | 0; //@line 2110
      HEAP32[$571 >> 2] = $108; //@line 2111
      $572 = $ReallocAsyncCtx9 + 220 | 0; //@line 2112
      HEAP32[$572 >> 2] = $110; //@line 2113
      $573 = $ReallocAsyncCtx9 + 224 | 0; //@line 2114
      HEAP32[$573 >> 2] = $112; //@line 2115
      $574 = $ReallocAsyncCtx9 + 228 | 0; //@line 2116
      HEAP32[$574 >> 2] = $114; //@line 2117
      $575 = $ReallocAsyncCtx9 + 232 | 0; //@line 2118
      HEAP32[$575 >> 2] = $116; //@line 2119
      $576 = $ReallocAsyncCtx9 + 236 | 0; //@line 2120
      HEAP32[$576 >> 2] = $118; //@line 2121
      $577 = $ReallocAsyncCtx9 + 240 | 0; //@line 2122
      HEAP32[$577 >> 2] = $120; //@line 2123
      $578 = $ReallocAsyncCtx9 + 244 | 0; //@line 2124
      HEAP32[$578 >> 2] = $122; //@line 2125
      $579 = $ReallocAsyncCtx9 + 248 | 0; //@line 2126
      HEAP32[$579 >> 2] = $124; //@line 2127
      $580 = $ReallocAsyncCtx9 + 252 | 0; //@line 2128
      HEAP32[$580 >> 2] = $126; //@line 2129
      $581 = $ReallocAsyncCtx9 + 256 | 0; //@line 2130
      HEAP32[$581 >> 2] = $128; //@line 2131
      $582 = $ReallocAsyncCtx9 + 260 | 0; //@line 2132
      HEAP32[$582 >> 2] = $130; //@line 2133
      $583 = $ReallocAsyncCtx9 + 264 | 0; //@line 2134
      HEAP32[$583 >> 2] = $132; //@line 2135
      sp = STACKTOP; //@line 2136
      return;
     }
     HEAP8[___async_retval >> 0] = $517; //@line 2140
     ___async_unwind = 0; //@line 2141
     HEAP32[$ReallocAsyncCtx9 >> 2] = 55; //@line 2142
     $518 = $ReallocAsyncCtx9 + 4 | 0; //@line 2143
     HEAP32[$518 >> 2] = $2; //@line 2144
     $519 = $ReallocAsyncCtx9 + 8 | 0; //@line 2145
     HEAP32[$519 >> 2] = $4; //@line 2146
     $520 = $ReallocAsyncCtx9 + 12 | 0; //@line 2147
     HEAP32[$520 >> 2] = $6; //@line 2148
     $521 = $ReallocAsyncCtx9 + 16 | 0; //@line 2149
     HEAP32[$521 >> 2] = $8; //@line 2150
     $522 = $ReallocAsyncCtx9 + 20 | 0; //@line 2151
     HEAP32[$522 >> 2] = $10; //@line 2152
     $523 = $ReallocAsyncCtx9 + 24 | 0; //@line 2153
     HEAP32[$523 >> 2] = $12; //@line 2154
     $524 = $ReallocAsyncCtx9 + 28 | 0; //@line 2155
     HEAP32[$524 >> 2] = $14; //@line 2156
     $525 = $ReallocAsyncCtx9 + 32 | 0; //@line 2157
     HEAP32[$525 >> 2] = $16; //@line 2158
     $526 = $ReallocAsyncCtx9 + 36 | 0; //@line 2159
     HEAP32[$526 >> 2] = $18; //@line 2160
     $527 = $ReallocAsyncCtx9 + 40 | 0; //@line 2161
     HEAP32[$527 >> 2] = $20; //@line 2162
     $528 = $ReallocAsyncCtx9 + 44 | 0; //@line 2163
     HEAP32[$528 >> 2] = $22; //@line 2164
     $529 = $ReallocAsyncCtx9 + 48 | 0; //@line 2165
     HEAP32[$529 >> 2] = $24; //@line 2166
     $530 = $ReallocAsyncCtx9 + 52 | 0; //@line 2167
     HEAP32[$530 >> 2] = $26; //@line 2168
     $531 = $ReallocAsyncCtx9 + 56 | 0; //@line 2169
     HEAP32[$531 >> 2] = $28; //@line 2170
     $532 = $ReallocAsyncCtx9 + 60 | 0; //@line 2171
     HEAP32[$532 >> 2] = $30; //@line 2172
     $533 = $ReallocAsyncCtx9 + 64 | 0; //@line 2173
     HEAP32[$533 >> 2] = $32; //@line 2174
     $534 = $ReallocAsyncCtx9 + 68 | 0; //@line 2175
     HEAP32[$534 >> 2] = $34; //@line 2176
     $535 = $ReallocAsyncCtx9 + 72 | 0; //@line 2177
     HEAP32[$535 >> 2] = $36; //@line 2178
     $536 = $ReallocAsyncCtx9 + 76 | 0; //@line 2179
     HEAP32[$536 >> 2] = $38; //@line 2180
     $537 = $ReallocAsyncCtx9 + 80 | 0; //@line 2181
     HEAP32[$537 >> 2] = $157; //@line 2182
     $538 = $ReallocAsyncCtx9 + 84 | 0; //@line 2183
     HEAP32[$538 >> 2] = $42; //@line 2184
     $539 = $ReallocAsyncCtx9 + 88 | 0; //@line 2185
     HEAP32[$539 >> 2] = $44; //@line 2186
     $540 = $ReallocAsyncCtx9 + 92 | 0; //@line 2187
     HEAP32[$540 >> 2] = $46; //@line 2188
     $541 = $ReallocAsyncCtx9 + 96 | 0; //@line 2189
     HEAP32[$541 >> 2] = $48; //@line 2190
     $542 = $ReallocAsyncCtx9 + 100 | 0; //@line 2191
     HEAP32[$542 >> 2] = $50; //@line 2192
     $543 = $ReallocAsyncCtx9 + 104 | 0; //@line 2193
     HEAP32[$543 >> 2] = $52; //@line 2194
     $544 = $ReallocAsyncCtx9 + 108 | 0; //@line 2195
     HEAP32[$544 >> 2] = $54; //@line 2196
     $545 = $ReallocAsyncCtx9 + 112 | 0; //@line 2197
     HEAP32[$545 >> 2] = $56; //@line 2198
     $546 = $ReallocAsyncCtx9 + 116 | 0; //@line 2199
     HEAP32[$546 >> 2] = $58; //@line 2200
     $547 = $ReallocAsyncCtx9 + 120 | 0; //@line 2201
     HEAP32[$547 >> 2] = $60; //@line 2202
     $548 = $ReallocAsyncCtx9 + 124 | 0; //@line 2203
     HEAP32[$548 >> 2] = $62; //@line 2204
     $549 = $ReallocAsyncCtx9 + 128 | 0; //@line 2205
     HEAP32[$549 >> 2] = $64; //@line 2206
     $550 = $ReallocAsyncCtx9 + 132 | 0; //@line 2207
     HEAP32[$550 >> 2] = $66; //@line 2208
     $551 = $ReallocAsyncCtx9 + 136 | 0; //@line 2209
     HEAP32[$551 >> 2] = $68; //@line 2210
     $552 = $ReallocAsyncCtx9 + 140 | 0; //@line 2211
     HEAP32[$552 >> 2] = $70; //@line 2212
     $553 = $ReallocAsyncCtx9 + 144 | 0; //@line 2213
     HEAP32[$553 >> 2] = $72; //@line 2214
     $554 = $ReallocAsyncCtx9 + 148 | 0; //@line 2215
     HEAP32[$554 >> 2] = $74; //@line 2216
     $555 = $ReallocAsyncCtx9 + 152 | 0; //@line 2217
     HEAP32[$555 >> 2] = $76; //@line 2218
     $556 = $ReallocAsyncCtx9 + 156 | 0; //@line 2219
     HEAP32[$556 >> 2] = $78; //@line 2220
     $557 = $ReallocAsyncCtx9 + 160 | 0; //@line 2221
     HEAP32[$557 >> 2] = $80; //@line 2222
     $558 = $ReallocAsyncCtx9 + 164 | 0; //@line 2223
     HEAP32[$558 >> 2] = $82; //@line 2224
     $559 = $ReallocAsyncCtx9 + 168 | 0; //@line 2225
     HEAP32[$559 >> 2] = $84; //@line 2226
     $560 = $ReallocAsyncCtx9 + 172 | 0; //@line 2227
     HEAP32[$560 >> 2] = $86; //@line 2228
     $561 = $ReallocAsyncCtx9 + 176 | 0; //@line 2229
     HEAP32[$561 >> 2] = $88; //@line 2230
     $562 = $ReallocAsyncCtx9 + 180 | 0; //@line 2231
     HEAP32[$562 >> 2] = $90; //@line 2232
     $563 = $ReallocAsyncCtx9 + 184 | 0; //@line 2233
     HEAP32[$563 >> 2] = $92; //@line 2234
     $564 = $ReallocAsyncCtx9 + 188 | 0; //@line 2235
     HEAP32[$564 >> 2] = $94; //@line 2236
     $565 = $ReallocAsyncCtx9 + 192 | 0; //@line 2237
     HEAP32[$565 >> 2] = $96; //@line 2238
     $566 = $ReallocAsyncCtx9 + 196 | 0; //@line 2239
     HEAP32[$566 >> 2] = $98; //@line 2240
     $567 = $ReallocAsyncCtx9 + 200 | 0; //@line 2241
     HEAP32[$567 >> 2] = $100; //@line 2242
     $568 = $ReallocAsyncCtx9 + 204 | 0; //@line 2243
     HEAP32[$568 >> 2] = $102; //@line 2244
     $569 = $ReallocAsyncCtx9 + 208 | 0; //@line 2245
     HEAP32[$569 >> 2] = $104; //@line 2246
     $570 = $ReallocAsyncCtx9 + 212 | 0; //@line 2247
     HEAP32[$570 >> 2] = $106; //@line 2248
     $571 = $ReallocAsyncCtx9 + 216 | 0; //@line 2249
     HEAP32[$571 >> 2] = $108; //@line 2250
     $572 = $ReallocAsyncCtx9 + 220 | 0; //@line 2251
     HEAP32[$572 >> 2] = $110; //@line 2252
     $573 = $ReallocAsyncCtx9 + 224 | 0; //@line 2253
     HEAP32[$573 >> 2] = $112; //@line 2254
     $574 = $ReallocAsyncCtx9 + 228 | 0; //@line 2255
     HEAP32[$574 >> 2] = $114; //@line 2256
     $575 = $ReallocAsyncCtx9 + 232 | 0; //@line 2257
     HEAP32[$575 >> 2] = $116; //@line 2258
     $576 = $ReallocAsyncCtx9 + 236 | 0; //@line 2259
     HEAP32[$576 >> 2] = $118; //@line 2260
     $577 = $ReallocAsyncCtx9 + 240 | 0; //@line 2261
     HEAP32[$577 >> 2] = $120; //@line 2262
     $578 = $ReallocAsyncCtx9 + 244 | 0; //@line 2263
     HEAP32[$578 >> 2] = $122; //@line 2264
     $579 = $ReallocAsyncCtx9 + 248 | 0; //@line 2265
     HEAP32[$579 >> 2] = $124; //@line 2266
     $580 = $ReallocAsyncCtx9 + 252 | 0; //@line 2267
     HEAP32[$580 >> 2] = $126; //@line 2268
     $581 = $ReallocAsyncCtx9 + 256 | 0; //@line 2269
     HEAP32[$581 >> 2] = $128; //@line 2270
     $582 = $ReallocAsyncCtx9 + 260 | 0; //@line 2271
     HEAP32[$582 >> 2] = $130; //@line 2272
     $583 = $ReallocAsyncCtx9 + 264 | 0; //@line 2273
     HEAP32[$583 >> 2] = $132; //@line 2274
     sp = STACKTOP; //@line 2275
     return;
    }
   case 55:
    {
     _mbed_tracef(2, 3737, 4765, $6); //@line 2280
     break L2;
     break;
    }
   case 59:
    {
     $601 = HEAP32[$130 >> 2] | 0; //@line 2285
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(268) | 0; //@line 2288
     $604 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $601 + 60 | 0, $601 + 8 | 0, 20, $$1202$i) | 0; //@line 2289
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 2292
      $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 2293
      HEAP32[$605 >> 2] = $2; //@line 2294
      $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 2295
      HEAP32[$606 >> 2] = $4; //@line 2296
      $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 2297
      HEAP32[$607 >> 2] = $6; //@line 2298
      $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 2299
      HEAP32[$608 >> 2] = $8; //@line 2300
      $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 2301
      HEAP32[$609 >> 2] = $10; //@line 2302
      $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 2303
      HEAP32[$610 >> 2] = $12; //@line 2304
      $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 2305
      HEAP32[$611 >> 2] = $14; //@line 2306
      $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 2307
      HEAP32[$612 >> 2] = $16; //@line 2308
      $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 2309
      HEAP32[$613 >> 2] = $18; //@line 2310
      $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 2311
      HEAP32[$614 >> 2] = $20; //@line 2312
      $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 2313
      HEAP32[$615 >> 2] = $22; //@line 2314
      $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 2315
      HEAP32[$616 >> 2] = $24; //@line 2316
      $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 2317
      HEAP32[$617 >> 2] = $26; //@line 2318
      $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 2319
      HEAP32[$618 >> 2] = $28; //@line 2320
      $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 2321
      HEAP32[$619 >> 2] = $30; //@line 2322
      $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 2323
      HEAP32[$620 >> 2] = $32; //@line 2324
      $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 2325
      HEAP32[$621 >> 2] = $34; //@line 2326
      $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 2327
      HEAP32[$622 >> 2] = $36; //@line 2328
      $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 2329
      HEAP32[$623 >> 2] = $38; //@line 2330
      $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 2331
      HEAP32[$624 >> 2] = $157; //@line 2332
      $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 2333
      HEAP32[$625 >> 2] = $42; //@line 2334
      $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 2335
      HEAP32[$626 >> 2] = $44; //@line 2336
      $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 2337
      HEAP32[$627 >> 2] = $46; //@line 2338
      $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 2339
      HEAP32[$628 >> 2] = $48; //@line 2340
      $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 2341
      HEAP32[$629 >> 2] = $50; //@line 2342
      $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 2343
      HEAP32[$630 >> 2] = $52; //@line 2344
      $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 2345
      HEAP32[$631 >> 2] = $54; //@line 2346
      $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 2347
      HEAP32[$632 >> 2] = $56; //@line 2348
      $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 2349
      HEAP32[$633 >> 2] = $58; //@line 2350
      $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 2351
      HEAP32[$634 >> 2] = $60; //@line 2352
      $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 2353
      HEAP32[$635 >> 2] = $62; //@line 2354
      $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 2355
      HEAP32[$636 >> 2] = $64; //@line 2356
      $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 2357
      HEAP32[$637 >> 2] = $66; //@line 2358
      $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 2359
      HEAP32[$638 >> 2] = $68; //@line 2360
      $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 2361
      HEAP32[$639 >> 2] = $70; //@line 2362
      $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 2363
      HEAP32[$640 >> 2] = $72; //@line 2364
      $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 2365
      HEAP32[$641 >> 2] = $74; //@line 2366
      $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 2367
      HEAP32[$642 >> 2] = $76; //@line 2368
      $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 2369
      HEAP32[$643 >> 2] = $78; //@line 2370
      $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 2371
      HEAP32[$644 >> 2] = $80; //@line 2372
      $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 2373
      HEAP32[$645 >> 2] = $82; //@line 2374
      $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 2375
      HEAP32[$646 >> 2] = $84; //@line 2376
      $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 2377
      HEAP32[$647 >> 2] = $86; //@line 2378
      $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 2379
      HEAP32[$648 >> 2] = $88; //@line 2380
      $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 2381
      HEAP32[$649 >> 2] = $90; //@line 2382
      $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 2383
      HEAP32[$650 >> 2] = $92; //@line 2384
      $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 2385
      HEAP32[$651 >> 2] = $94; //@line 2386
      $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 2387
      HEAP32[$652 >> 2] = $96; //@line 2388
      $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 2389
      HEAP32[$653 >> 2] = $98; //@line 2390
      $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 2391
      HEAP32[$654 >> 2] = $100; //@line 2392
      $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 2393
      HEAP32[$655 >> 2] = $102; //@line 2394
      $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 2395
      HEAP32[$656 >> 2] = $104; //@line 2396
      $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 2397
      HEAP32[$657 >> 2] = $106; //@line 2398
      $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 2399
      HEAP32[$658 >> 2] = $108; //@line 2400
      $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 2401
      HEAP32[$659 >> 2] = $110; //@line 2402
      $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 2403
      HEAP32[$660 >> 2] = $112; //@line 2404
      $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 2405
      HEAP32[$661 >> 2] = $114; //@line 2406
      $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 2407
      HEAP32[$662 >> 2] = $116; //@line 2408
      $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 2409
      HEAP32[$663 >> 2] = $118; //@line 2410
      $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 2411
      HEAP32[$664 >> 2] = $120; //@line 2412
      $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 2413
      HEAP32[$665 >> 2] = $122; //@line 2414
      $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 2415
      HEAP32[$666 >> 2] = $124; //@line 2416
      $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 2417
      HEAP32[$667 >> 2] = $126; //@line 2418
      $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 2419
      HEAP32[$668 >> 2] = $128; //@line 2420
      $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 2421
      HEAP32[$669 >> 2] = $130; //@line 2422
      $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 2423
      HEAP32[$670 >> 2] = $132; //@line 2424
      sp = STACKTOP; //@line 2425
      return;
     }
     HEAP8[___async_retval >> 0] = $604; //@line 2429
     ___async_unwind = 0; //@line 2430
     HEAP32[$ReallocAsyncCtx8 >> 2] = 56; //@line 2431
     $605 = $ReallocAsyncCtx8 + 4 | 0; //@line 2432
     HEAP32[$605 >> 2] = $2; //@line 2433
     $606 = $ReallocAsyncCtx8 + 8 | 0; //@line 2434
     HEAP32[$606 >> 2] = $4; //@line 2435
     $607 = $ReallocAsyncCtx8 + 12 | 0; //@line 2436
     HEAP32[$607 >> 2] = $6; //@line 2437
     $608 = $ReallocAsyncCtx8 + 16 | 0; //@line 2438
     HEAP32[$608 >> 2] = $8; //@line 2439
     $609 = $ReallocAsyncCtx8 + 20 | 0; //@line 2440
     HEAP32[$609 >> 2] = $10; //@line 2441
     $610 = $ReallocAsyncCtx8 + 24 | 0; //@line 2442
     HEAP32[$610 >> 2] = $12; //@line 2443
     $611 = $ReallocAsyncCtx8 + 28 | 0; //@line 2444
     HEAP32[$611 >> 2] = $14; //@line 2445
     $612 = $ReallocAsyncCtx8 + 32 | 0; //@line 2446
     HEAP32[$612 >> 2] = $16; //@line 2447
     $613 = $ReallocAsyncCtx8 + 36 | 0; //@line 2448
     HEAP32[$613 >> 2] = $18; //@line 2449
     $614 = $ReallocAsyncCtx8 + 40 | 0; //@line 2450
     HEAP32[$614 >> 2] = $20; //@line 2451
     $615 = $ReallocAsyncCtx8 + 44 | 0; //@line 2452
     HEAP32[$615 >> 2] = $22; //@line 2453
     $616 = $ReallocAsyncCtx8 + 48 | 0; //@line 2454
     HEAP32[$616 >> 2] = $24; //@line 2455
     $617 = $ReallocAsyncCtx8 + 52 | 0; //@line 2456
     HEAP32[$617 >> 2] = $26; //@line 2457
     $618 = $ReallocAsyncCtx8 + 56 | 0; //@line 2458
     HEAP32[$618 >> 2] = $28; //@line 2459
     $619 = $ReallocAsyncCtx8 + 60 | 0; //@line 2460
     HEAP32[$619 >> 2] = $30; //@line 2461
     $620 = $ReallocAsyncCtx8 + 64 | 0; //@line 2462
     HEAP32[$620 >> 2] = $32; //@line 2463
     $621 = $ReallocAsyncCtx8 + 68 | 0; //@line 2464
     HEAP32[$621 >> 2] = $34; //@line 2465
     $622 = $ReallocAsyncCtx8 + 72 | 0; //@line 2466
     HEAP32[$622 >> 2] = $36; //@line 2467
     $623 = $ReallocAsyncCtx8 + 76 | 0; //@line 2468
     HEAP32[$623 >> 2] = $38; //@line 2469
     $624 = $ReallocAsyncCtx8 + 80 | 0; //@line 2470
     HEAP32[$624 >> 2] = $157; //@line 2471
     $625 = $ReallocAsyncCtx8 + 84 | 0; //@line 2472
     HEAP32[$625 >> 2] = $42; //@line 2473
     $626 = $ReallocAsyncCtx8 + 88 | 0; //@line 2474
     HEAP32[$626 >> 2] = $44; //@line 2475
     $627 = $ReallocAsyncCtx8 + 92 | 0; //@line 2476
     HEAP32[$627 >> 2] = $46; //@line 2477
     $628 = $ReallocAsyncCtx8 + 96 | 0; //@line 2478
     HEAP32[$628 >> 2] = $48; //@line 2479
     $629 = $ReallocAsyncCtx8 + 100 | 0; //@line 2480
     HEAP32[$629 >> 2] = $50; //@line 2481
     $630 = $ReallocAsyncCtx8 + 104 | 0; //@line 2482
     HEAP32[$630 >> 2] = $52; //@line 2483
     $631 = $ReallocAsyncCtx8 + 108 | 0; //@line 2484
     HEAP32[$631 >> 2] = $54; //@line 2485
     $632 = $ReallocAsyncCtx8 + 112 | 0; //@line 2486
     HEAP32[$632 >> 2] = $56; //@line 2487
     $633 = $ReallocAsyncCtx8 + 116 | 0; //@line 2488
     HEAP32[$633 >> 2] = $58; //@line 2489
     $634 = $ReallocAsyncCtx8 + 120 | 0; //@line 2490
     HEAP32[$634 >> 2] = $60; //@line 2491
     $635 = $ReallocAsyncCtx8 + 124 | 0; //@line 2492
     HEAP32[$635 >> 2] = $62; //@line 2493
     $636 = $ReallocAsyncCtx8 + 128 | 0; //@line 2494
     HEAP32[$636 >> 2] = $64; //@line 2495
     $637 = $ReallocAsyncCtx8 + 132 | 0; //@line 2496
     HEAP32[$637 >> 2] = $66; //@line 2497
     $638 = $ReallocAsyncCtx8 + 136 | 0; //@line 2498
     HEAP32[$638 >> 2] = $68; //@line 2499
     $639 = $ReallocAsyncCtx8 + 140 | 0; //@line 2500
     HEAP32[$639 >> 2] = $70; //@line 2501
     $640 = $ReallocAsyncCtx8 + 144 | 0; //@line 2502
     HEAP32[$640 >> 2] = $72; //@line 2503
     $641 = $ReallocAsyncCtx8 + 148 | 0; //@line 2504
     HEAP32[$641 >> 2] = $74; //@line 2505
     $642 = $ReallocAsyncCtx8 + 152 | 0; //@line 2506
     HEAP32[$642 >> 2] = $76; //@line 2507
     $643 = $ReallocAsyncCtx8 + 156 | 0; //@line 2508
     HEAP32[$643 >> 2] = $78; //@line 2509
     $644 = $ReallocAsyncCtx8 + 160 | 0; //@line 2510
     HEAP32[$644 >> 2] = $80; //@line 2511
     $645 = $ReallocAsyncCtx8 + 164 | 0; //@line 2512
     HEAP32[$645 >> 2] = $82; //@line 2513
     $646 = $ReallocAsyncCtx8 + 168 | 0; //@line 2514
     HEAP32[$646 >> 2] = $84; //@line 2515
     $647 = $ReallocAsyncCtx8 + 172 | 0; //@line 2516
     HEAP32[$647 >> 2] = $86; //@line 2517
     $648 = $ReallocAsyncCtx8 + 176 | 0; //@line 2518
     HEAP32[$648 >> 2] = $88; //@line 2519
     $649 = $ReallocAsyncCtx8 + 180 | 0; //@line 2520
     HEAP32[$649 >> 2] = $90; //@line 2521
     $650 = $ReallocAsyncCtx8 + 184 | 0; //@line 2522
     HEAP32[$650 >> 2] = $92; //@line 2523
     $651 = $ReallocAsyncCtx8 + 188 | 0; //@line 2524
     HEAP32[$651 >> 2] = $94; //@line 2525
     $652 = $ReallocAsyncCtx8 + 192 | 0; //@line 2526
     HEAP32[$652 >> 2] = $96; //@line 2527
     $653 = $ReallocAsyncCtx8 + 196 | 0; //@line 2528
     HEAP32[$653 >> 2] = $98; //@line 2529
     $654 = $ReallocAsyncCtx8 + 200 | 0; //@line 2530
     HEAP32[$654 >> 2] = $100; //@line 2531
     $655 = $ReallocAsyncCtx8 + 204 | 0; //@line 2532
     HEAP32[$655 >> 2] = $102; //@line 2533
     $656 = $ReallocAsyncCtx8 + 208 | 0; //@line 2534
     HEAP32[$656 >> 2] = $104; //@line 2535
     $657 = $ReallocAsyncCtx8 + 212 | 0; //@line 2536
     HEAP32[$657 >> 2] = $106; //@line 2537
     $658 = $ReallocAsyncCtx8 + 216 | 0; //@line 2538
     HEAP32[$658 >> 2] = $108; //@line 2539
     $659 = $ReallocAsyncCtx8 + 220 | 0; //@line 2540
     HEAP32[$659 >> 2] = $110; //@line 2541
     $660 = $ReallocAsyncCtx8 + 224 | 0; //@line 2542
     HEAP32[$660 >> 2] = $112; //@line 2543
     $661 = $ReallocAsyncCtx8 + 228 | 0; //@line 2544
     HEAP32[$661 >> 2] = $114; //@line 2545
     $662 = $ReallocAsyncCtx8 + 232 | 0; //@line 2546
     HEAP32[$662 >> 2] = $116; //@line 2547
     $663 = $ReallocAsyncCtx8 + 236 | 0; //@line 2548
     HEAP32[$663 >> 2] = $118; //@line 2549
     $664 = $ReallocAsyncCtx8 + 240 | 0; //@line 2550
     HEAP32[$664 >> 2] = $120; //@line 2551
     $665 = $ReallocAsyncCtx8 + 244 | 0; //@line 2552
     HEAP32[$665 >> 2] = $122; //@line 2553
     $666 = $ReallocAsyncCtx8 + 248 | 0; //@line 2554
     HEAP32[$666 >> 2] = $124; //@line 2555
     $667 = $ReallocAsyncCtx8 + 252 | 0; //@line 2556
     HEAP32[$667 >> 2] = $126; //@line 2557
     $668 = $ReallocAsyncCtx8 + 256 | 0; //@line 2558
     HEAP32[$668 >> 2] = $128; //@line 2559
     $669 = $ReallocAsyncCtx8 + 260 | 0; //@line 2560
     HEAP32[$669 >> 2] = $130; //@line 2561
     $670 = $ReallocAsyncCtx8 + 264 | 0; //@line 2562
     HEAP32[$670 >> 2] = $132; //@line 2563
     sp = STACKTOP; //@line 2564
     return;
    }
   case 62:
    {
     $ReallocAsyncCtx7 = _emscripten_realloc_async_context(268) | 0; //@line 2569
     $672 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $84, $88, 11, $$1202$i) | 0; //@line 2570
     if (___async) {
      HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 2573
      $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 2574
      HEAP32[$673 >> 2] = $2; //@line 2575
      $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 2576
      HEAP32[$674 >> 2] = $4; //@line 2577
      $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 2578
      HEAP32[$675 >> 2] = $6; //@line 2579
      $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 2580
      HEAP32[$676 >> 2] = $8; //@line 2581
      $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 2582
      HEAP32[$677 >> 2] = $10; //@line 2583
      $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 2584
      HEAP32[$678 >> 2] = $12; //@line 2585
      $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 2586
      HEAP32[$679 >> 2] = $14; //@line 2587
      $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 2588
      HEAP32[$680 >> 2] = $16; //@line 2589
      $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 2590
      HEAP32[$681 >> 2] = $18; //@line 2591
      $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 2592
      HEAP32[$682 >> 2] = $20; //@line 2593
      $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 2594
      HEAP32[$683 >> 2] = $22; //@line 2595
      $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 2596
      HEAP32[$684 >> 2] = $24; //@line 2597
      $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 2598
      HEAP32[$685 >> 2] = $26; //@line 2599
      $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 2600
      HEAP32[$686 >> 2] = $28; //@line 2601
      $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 2602
      HEAP32[$687 >> 2] = $30; //@line 2603
      $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 2604
      HEAP32[$688 >> 2] = $32; //@line 2605
      $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 2606
      HEAP32[$689 >> 2] = $34; //@line 2607
      $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 2608
      HEAP32[$690 >> 2] = $36; //@line 2609
      $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 2610
      HEAP32[$691 >> 2] = $38; //@line 2611
      $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 2612
      HEAP32[$692 >> 2] = $157; //@line 2613
      $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 2614
      HEAP32[$693 >> 2] = $42; //@line 2615
      $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 2616
      HEAP32[$694 >> 2] = $44; //@line 2617
      $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 2618
      HEAP32[$695 >> 2] = $46; //@line 2619
      $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 2620
      HEAP32[$696 >> 2] = $48; //@line 2621
      $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 2622
      HEAP32[$697 >> 2] = $50; //@line 2623
      $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 2624
      HEAP32[$698 >> 2] = $52; //@line 2625
      $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 2626
      HEAP32[$699 >> 2] = $54; //@line 2627
      $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 2628
      HEAP32[$700 >> 2] = $56; //@line 2629
      $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 2630
      HEAP32[$701 >> 2] = $58; //@line 2631
      $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 2632
      HEAP32[$702 >> 2] = $60; //@line 2633
      $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 2634
      HEAP32[$703 >> 2] = $62; //@line 2635
      $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 2636
      HEAP32[$704 >> 2] = $64; //@line 2637
      $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 2638
      HEAP32[$705 >> 2] = $66; //@line 2639
      $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 2640
      HEAP32[$706 >> 2] = $68; //@line 2641
      $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 2642
      HEAP32[$707 >> 2] = $70; //@line 2643
      $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 2644
      HEAP32[$708 >> 2] = $72; //@line 2645
      $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 2646
      HEAP32[$709 >> 2] = $74; //@line 2647
      $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 2648
      HEAP32[$710 >> 2] = $76; //@line 2649
      $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 2650
      HEAP32[$711 >> 2] = $78; //@line 2651
      $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 2652
      HEAP32[$712 >> 2] = $80; //@line 2653
      $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 2654
      HEAP32[$713 >> 2] = $82; //@line 2655
      $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 2656
      HEAP32[$714 >> 2] = $84; //@line 2657
      $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 2658
      HEAP32[$715 >> 2] = $86; //@line 2659
      $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 2660
      HEAP32[$716 >> 2] = $88; //@line 2661
      $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 2662
      HEAP32[$717 >> 2] = $90; //@line 2663
      $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 2664
      HEAP32[$718 >> 2] = $92; //@line 2665
      $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 2666
      HEAP32[$719 >> 2] = $94; //@line 2667
      $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 2668
      HEAP32[$720 >> 2] = $96; //@line 2669
      $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 2670
      HEAP32[$721 >> 2] = $98; //@line 2671
      $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 2672
      HEAP32[$722 >> 2] = $100; //@line 2673
      $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 2674
      HEAP32[$723 >> 2] = $102; //@line 2675
      $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 2676
      HEAP32[$724 >> 2] = $104; //@line 2677
      $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 2678
      HEAP32[$725 >> 2] = $106; //@line 2679
      $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 2680
      HEAP32[$726 >> 2] = $108; //@line 2681
      $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 2682
      HEAP32[$727 >> 2] = $110; //@line 2683
      $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 2684
      HEAP32[$728 >> 2] = $112; //@line 2685
      $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 2686
      HEAP32[$729 >> 2] = $114; //@line 2687
      $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 2688
      HEAP32[$730 >> 2] = $116; //@line 2689
      $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 2690
      HEAP32[$731 >> 2] = $118; //@line 2691
      $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 2692
      HEAP32[$732 >> 2] = $120; //@line 2693
      $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 2694
      HEAP32[$733 >> 2] = $122; //@line 2695
      $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 2696
      HEAP32[$734 >> 2] = $124; //@line 2697
      $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 2698
      HEAP32[$735 >> 2] = $126; //@line 2699
      $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 2700
      HEAP32[$736 >> 2] = $128; //@line 2701
      $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 2702
      HEAP32[$737 >> 2] = $130; //@line 2703
      $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 2704
      HEAP32[$738 >> 2] = $132; //@line 2705
      sp = STACKTOP; //@line 2706
      return;
     }
     HEAP8[___async_retval >> 0] = $672; //@line 2710
     ___async_unwind = 0; //@line 2711
     HEAP32[$ReallocAsyncCtx7 >> 2] = 57; //@line 2712
     $673 = $ReallocAsyncCtx7 + 4 | 0; //@line 2713
     HEAP32[$673 >> 2] = $2; //@line 2714
     $674 = $ReallocAsyncCtx7 + 8 | 0; //@line 2715
     HEAP32[$674 >> 2] = $4; //@line 2716
     $675 = $ReallocAsyncCtx7 + 12 | 0; //@line 2717
     HEAP32[$675 >> 2] = $6; //@line 2718
     $676 = $ReallocAsyncCtx7 + 16 | 0; //@line 2719
     HEAP32[$676 >> 2] = $8; //@line 2720
     $677 = $ReallocAsyncCtx7 + 20 | 0; //@line 2721
     HEAP32[$677 >> 2] = $10; //@line 2722
     $678 = $ReallocAsyncCtx7 + 24 | 0; //@line 2723
     HEAP32[$678 >> 2] = $12; //@line 2724
     $679 = $ReallocAsyncCtx7 + 28 | 0; //@line 2725
     HEAP32[$679 >> 2] = $14; //@line 2726
     $680 = $ReallocAsyncCtx7 + 32 | 0; //@line 2727
     HEAP32[$680 >> 2] = $16; //@line 2728
     $681 = $ReallocAsyncCtx7 + 36 | 0; //@line 2729
     HEAP32[$681 >> 2] = $18; //@line 2730
     $682 = $ReallocAsyncCtx7 + 40 | 0; //@line 2731
     HEAP32[$682 >> 2] = $20; //@line 2732
     $683 = $ReallocAsyncCtx7 + 44 | 0; //@line 2733
     HEAP32[$683 >> 2] = $22; //@line 2734
     $684 = $ReallocAsyncCtx7 + 48 | 0; //@line 2735
     HEAP32[$684 >> 2] = $24; //@line 2736
     $685 = $ReallocAsyncCtx7 + 52 | 0; //@line 2737
     HEAP32[$685 >> 2] = $26; //@line 2738
     $686 = $ReallocAsyncCtx7 + 56 | 0; //@line 2739
     HEAP32[$686 >> 2] = $28; //@line 2740
     $687 = $ReallocAsyncCtx7 + 60 | 0; //@line 2741
     HEAP32[$687 >> 2] = $30; //@line 2742
     $688 = $ReallocAsyncCtx7 + 64 | 0; //@line 2743
     HEAP32[$688 >> 2] = $32; //@line 2744
     $689 = $ReallocAsyncCtx7 + 68 | 0; //@line 2745
     HEAP32[$689 >> 2] = $34; //@line 2746
     $690 = $ReallocAsyncCtx7 + 72 | 0; //@line 2747
     HEAP32[$690 >> 2] = $36; //@line 2748
     $691 = $ReallocAsyncCtx7 + 76 | 0; //@line 2749
     HEAP32[$691 >> 2] = $38; //@line 2750
     $692 = $ReallocAsyncCtx7 + 80 | 0; //@line 2751
     HEAP32[$692 >> 2] = $157; //@line 2752
     $693 = $ReallocAsyncCtx7 + 84 | 0; //@line 2753
     HEAP32[$693 >> 2] = $42; //@line 2754
     $694 = $ReallocAsyncCtx7 + 88 | 0; //@line 2755
     HEAP32[$694 >> 2] = $44; //@line 2756
     $695 = $ReallocAsyncCtx7 + 92 | 0; //@line 2757
     HEAP32[$695 >> 2] = $46; //@line 2758
     $696 = $ReallocAsyncCtx7 + 96 | 0; //@line 2759
     HEAP32[$696 >> 2] = $48; //@line 2760
     $697 = $ReallocAsyncCtx7 + 100 | 0; //@line 2761
     HEAP32[$697 >> 2] = $50; //@line 2762
     $698 = $ReallocAsyncCtx7 + 104 | 0; //@line 2763
     HEAP32[$698 >> 2] = $52; //@line 2764
     $699 = $ReallocAsyncCtx7 + 108 | 0; //@line 2765
     HEAP32[$699 >> 2] = $54; //@line 2766
     $700 = $ReallocAsyncCtx7 + 112 | 0; //@line 2767
     HEAP32[$700 >> 2] = $56; //@line 2768
     $701 = $ReallocAsyncCtx7 + 116 | 0; //@line 2769
     HEAP32[$701 >> 2] = $58; //@line 2770
     $702 = $ReallocAsyncCtx7 + 120 | 0; //@line 2771
     HEAP32[$702 >> 2] = $60; //@line 2772
     $703 = $ReallocAsyncCtx7 + 124 | 0; //@line 2773
     HEAP32[$703 >> 2] = $62; //@line 2774
     $704 = $ReallocAsyncCtx7 + 128 | 0; //@line 2775
     HEAP32[$704 >> 2] = $64; //@line 2776
     $705 = $ReallocAsyncCtx7 + 132 | 0; //@line 2777
     HEAP32[$705 >> 2] = $66; //@line 2778
     $706 = $ReallocAsyncCtx7 + 136 | 0; //@line 2779
     HEAP32[$706 >> 2] = $68; //@line 2780
     $707 = $ReallocAsyncCtx7 + 140 | 0; //@line 2781
     HEAP32[$707 >> 2] = $70; //@line 2782
     $708 = $ReallocAsyncCtx7 + 144 | 0; //@line 2783
     HEAP32[$708 >> 2] = $72; //@line 2784
     $709 = $ReallocAsyncCtx7 + 148 | 0; //@line 2785
     HEAP32[$709 >> 2] = $74; //@line 2786
     $710 = $ReallocAsyncCtx7 + 152 | 0; //@line 2787
     HEAP32[$710 >> 2] = $76; //@line 2788
     $711 = $ReallocAsyncCtx7 + 156 | 0; //@line 2789
     HEAP32[$711 >> 2] = $78; //@line 2790
     $712 = $ReallocAsyncCtx7 + 160 | 0; //@line 2791
     HEAP32[$712 >> 2] = $80; //@line 2792
     $713 = $ReallocAsyncCtx7 + 164 | 0; //@line 2793
     HEAP32[$713 >> 2] = $82; //@line 2794
     $714 = $ReallocAsyncCtx7 + 168 | 0; //@line 2795
     HEAP32[$714 >> 2] = $84; //@line 2796
     $715 = $ReallocAsyncCtx7 + 172 | 0; //@line 2797
     HEAP32[$715 >> 2] = $86; //@line 2798
     $716 = $ReallocAsyncCtx7 + 176 | 0; //@line 2799
     HEAP32[$716 >> 2] = $88; //@line 2800
     $717 = $ReallocAsyncCtx7 + 180 | 0; //@line 2801
     HEAP32[$717 >> 2] = $90; //@line 2802
     $718 = $ReallocAsyncCtx7 + 184 | 0; //@line 2803
     HEAP32[$718 >> 2] = $92; //@line 2804
     $719 = $ReallocAsyncCtx7 + 188 | 0; //@line 2805
     HEAP32[$719 >> 2] = $94; //@line 2806
     $720 = $ReallocAsyncCtx7 + 192 | 0; //@line 2807
     HEAP32[$720 >> 2] = $96; //@line 2808
     $721 = $ReallocAsyncCtx7 + 196 | 0; //@line 2809
     HEAP32[$721 >> 2] = $98; //@line 2810
     $722 = $ReallocAsyncCtx7 + 200 | 0; //@line 2811
     HEAP32[$722 >> 2] = $100; //@line 2812
     $723 = $ReallocAsyncCtx7 + 204 | 0; //@line 2813
     HEAP32[$723 >> 2] = $102; //@line 2814
     $724 = $ReallocAsyncCtx7 + 208 | 0; //@line 2815
     HEAP32[$724 >> 2] = $104; //@line 2816
     $725 = $ReallocAsyncCtx7 + 212 | 0; //@line 2817
     HEAP32[$725 >> 2] = $106; //@line 2818
     $726 = $ReallocAsyncCtx7 + 216 | 0; //@line 2819
     HEAP32[$726 >> 2] = $108; //@line 2820
     $727 = $ReallocAsyncCtx7 + 220 | 0; //@line 2821
     HEAP32[$727 >> 2] = $110; //@line 2822
     $728 = $ReallocAsyncCtx7 + 224 | 0; //@line 2823
     HEAP32[$728 >> 2] = $112; //@line 2824
     $729 = $ReallocAsyncCtx7 + 228 | 0; //@line 2825
     HEAP32[$729 >> 2] = $114; //@line 2826
     $730 = $ReallocAsyncCtx7 + 232 | 0; //@line 2827
     HEAP32[$730 >> 2] = $116; //@line 2828
     $731 = $ReallocAsyncCtx7 + 236 | 0; //@line 2829
     HEAP32[$731 >> 2] = $118; //@line 2830
     $732 = $ReallocAsyncCtx7 + 240 | 0; //@line 2831
     HEAP32[$732 >> 2] = $120; //@line 2832
     $733 = $ReallocAsyncCtx7 + 244 | 0; //@line 2833
     HEAP32[$733 >> 2] = $122; //@line 2834
     $734 = $ReallocAsyncCtx7 + 248 | 0; //@line 2835
     HEAP32[$734 >> 2] = $124; //@line 2836
     $735 = $ReallocAsyncCtx7 + 252 | 0; //@line 2837
     HEAP32[$735 >> 2] = $126; //@line 2838
     $736 = $ReallocAsyncCtx7 + 256 | 0; //@line 2839
     HEAP32[$736 >> 2] = $128; //@line 2840
     $737 = $ReallocAsyncCtx7 + 260 | 0; //@line 2841
     HEAP32[$737 >> 2] = $130; //@line 2842
     $738 = $ReallocAsyncCtx7 + 264 | 0; //@line 2843
     HEAP32[$738 >> 2] = $132; //@line 2844
     sp = STACKTOP; //@line 2845
     return;
    }
   case 67:
    {
     _mbed_tracef(2, 3737, 4960, $14); //@line 2850
     break L2;
     break;
    }
   case 71:
    {
     $756 = HEAP32[$130 >> 2] | 0; //@line 2855
     $ReallocAsyncCtx6 = _emscripten_realloc_async_context(268) | 0; //@line 2858
     $759 = _sn_coap_parser_options_parse_multiple_options($56, $82, $175, $756 + 64 | 0, $756 + 10 | 0, 15, $$1202$i) | 0; //@line 2859
     if (___async) {
      HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 2862
      $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 2863
      HEAP32[$760 >> 2] = $2; //@line 2864
      $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 2865
      HEAP32[$761 >> 2] = $4; //@line 2866
      $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 2867
      HEAP32[$762 >> 2] = $6; //@line 2868
      $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 2869
      HEAP32[$763 >> 2] = $8; //@line 2870
      $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 2871
      HEAP32[$764 >> 2] = $10; //@line 2872
      $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 2873
      HEAP32[$765 >> 2] = $12; //@line 2874
      $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 2875
      HEAP32[$766 >> 2] = $14; //@line 2876
      $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 2877
      HEAP32[$767 >> 2] = $16; //@line 2878
      $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 2879
      HEAP32[$768 >> 2] = $18; //@line 2880
      $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 2881
      HEAP32[$769 >> 2] = $20; //@line 2882
      $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 2883
      HEAP32[$770 >> 2] = $22; //@line 2884
      $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 2885
      HEAP32[$771 >> 2] = $24; //@line 2886
      $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 2887
      HEAP32[$772 >> 2] = $26; //@line 2888
      $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 2889
      HEAP32[$773 >> 2] = $28; //@line 2890
      $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 2891
      HEAP32[$774 >> 2] = $30; //@line 2892
      $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 2893
      HEAP32[$775 >> 2] = $32; //@line 2894
      $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 2895
      HEAP32[$776 >> 2] = $34; //@line 2896
      $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 2897
      HEAP32[$777 >> 2] = $36; //@line 2898
      $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 2899
      HEAP32[$778 >> 2] = $38; //@line 2900
      $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 2901
      HEAP32[$779 >> 2] = $157; //@line 2902
      $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 2903
      HEAP32[$780 >> 2] = $42; //@line 2904
      $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 2905
      HEAP32[$781 >> 2] = $44; //@line 2906
      $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 2907
      HEAP32[$782 >> 2] = $46; //@line 2908
      $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 2909
      HEAP32[$783 >> 2] = $48; //@line 2910
      $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 2911
      HEAP32[$784 >> 2] = $50; //@line 2912
      $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 2913
      HEAP32[$785 >> 2] = $52; //@line 2914
      $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 2915
      HEAP32[$786 >> 2] = $54; //@line 2916
      $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 2917
      HEAP32[$787 >> 2] = $56; //@line 2918
      $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 2919
      HEAP32[$788 >> 2] = $58; //@line 2920
      $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 2921
      HEAP32[$789 >> 2] = $60; //@line 2922
      $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 2923
      HEAP32[$790 >> 2] = $62; //@line 2924
      $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 2925
      HEAP32[$791 >> 2] = $64; //@line 2926
      $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 2927
      HEAP32[$792 >> 2] = $66; //@line 2928
      $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 2929
      HEAP32[$793 >> 2] = $68; //@line 2930
      $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 2931
      HEAP32[$794 >> 2] = $70; //@line 2932
      $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 2933
      HEAP32[$795 >> 2] = $72; //@line 2934
      $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 2935
      HEAP32[$796 >> 2] = $74; //@line 2936
      $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 2937
      HEAP32[$797 >> 2] = $76; //@line 2938
      $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 2939
      HEAP32[$798 >> 2] = $78; //@line 2940
      $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 2941
      HEAP32[$799 >> 2] = $80; //@line 2942
      $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 2943
      HEAP32[$800 >> 2] = $82; //@line 2944
      $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 2945
      HEAP32[$801 >> 2] = $84; //@line 2946
      $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 2947
      HEAP32[$802 >> 2] = $86; //@line 2948
      $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 2949
      HEAP32[$803 >> 2] = $88; //@line 2950
      $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 2951
      HEAP32[$804 >> 2] = $90; //@line 2952
      $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 2953
      HEAP32[$805 >> 2] = $92; //@line 2954
      $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 2955
      HEAP32[$806 >> 2] = $94; //@line 2956
      $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 2957
      HEAP32[$807 >> 2] = $96; //@line 2958
      $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 2959
      HEAP32[$808 >> 2] = $98; //@line 2960
      $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 2961
      HEAP32[$809 >> 2] = $100; //@line 2962
      $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 2963
      HEAP32[$810 >> 2] = $102; //@line 2964
      $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 2965
      HEAP32[$811 >> 2] = $104; //@line 2966
      $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 2967
      HEAP32[$812 >> 2] = $106; //@line 2968
      $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 2969
      HEAP32[$813 >> 2] = $108; //@line 2970
      $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 2971
      HEAP32[$814 >> 2] = $110; //@line 2972
      $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 2973
      HEAP32[$815 >> 2] = $112; //@line 2974
      $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 2975
      HEAP32[$816 >> 2] = $114; //@line 2976
      $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 2977
      HEAP32[$817 >> 2] = $116; //@line 2978
      $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 2979
      HEAP32[$818 >> 2] = $118; //@line 2980
      $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 2981
      HEAP32[$819 >> 2] = $120; //@line 2982
      $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 2983
      HEAP32[$820 >> 2] = $122; //@line 2984
      $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 2985
      HEAP32[$821 >> 2] = $124; //@line 2986
      $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 2987
      HEAP32[$822 >> 2] = $126; //@line 2988
      $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 2989
      HEAP32[$823 >> 2] = $128; //@line 2990
      $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 2991
      HEAP32[$824 >> 2] = $130; //@line 2992
      $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 2993
      HEAP32[$825 >> 2] = $132; //@line 2994
      sp = STACKTOP; //@line 2995
      return;
     }
     HEAP8[___async_retval >> 0] = $759; //@line 2999
     ___async_unwind = 0; //@line 3000
     HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 3001
     $760 = $ReallocAsyncCtx6 + 4 | 0; //@line 3002
     HEAP32[$760 >> 2] = $2; //@line 3003
     $761 = $ReallocAsyncCtx6 + 8 | 0; //@line 3004
     HEAP32[$761 >> 2] = $4; //@line 3005
     $762 = $ReallocAsyncCtx6 + 12 | 0; //@line 3006
     HEAP32[$762 >> 2] = $6; //@line 3007
     $763 = $ReallocAsyncCtx6 + 16 | 0; //@line 3008
     HEAP32[$763 >> 2] = $8; //@line 3009
     $764 = $ReallocAsyncCtx6 + 20 | 0; //@line 3010
     HEAP32[$764 >> 2] = $10; //@line 3011
     $765 = $ReallocAsyncCtx6 + 24 | 0; //@line 3012
     HEAP32[$765 >> 2] = $12; //@line 3013
     $766 = $ReallocAsyncCtx6 + 28 | 0; //@line 3014
     HEAP32[$766 >> 2] = $14; //@line 3015
     $767 = $ReallocAsyncCtx6 + 32 | 0; //@line 3016
     HEAP32[$767 >> 2] = $16; //@line 3017
     $768 = $ReallocAsyncCtx6 + 36 | 0; //@line 3018
     HEAP32[$768 >> 2] = $18; //@line 3019
     $769 = $ReallocAsyncCtx6 + 40 | 0; //@line 3020
     HEAP32[$769 >> 2] = $20; //@line 3021
     $770 = $ReallocAsyncCtx6 + 44 | 0; //@line 3022
     HEAP32[$770 >> 2] = $22; //@line 3023
     $771 = $ReallocAsyncCtx6 + 48 | 0; //@line 3024
     HEAP32[$771 >> 2] = $24; //@line 3025
     $772 = $ReallocAsyncCtx6 + 52 | 0; //@line 3026
     HEAP32[$772 >> 2] = $26; //@line 3027
     $773 = $ReallocAsyncCtx6 + 56 | 0; //@line 3028
     HEAP32[$773 >> 2] = $28; //@line 3029
     $774 = $ReallocAsyncCtx6 + 60 | 0; //@line 3030
     HEAP32[$774 >> 2] = $30; //@line 3031
     $775 = $ReallocAsyncCtx6 + 64 | 0; //@line 3032
     HEAP32[$775 >> 2] = $32; //@line 3033
     $776 = $ReallocAsyncCtx6 + 68 | 0; //@line 3034
     HEAP32[$776 >> 2] = $34; //@line 3035
     $777 = $ReallocAsyncCtx6 + 72 | 0; //@line 3036
     HEAP32[$777 >> 2] = $36; //@line 3037
     $778 = $ReallocAsyncCtx6 + 76 | 0; //@line 3038
     HEAP32[$778 >> 2] = $38; //@line 3039
     $779 = $ReallocAsyncCtx6 + 80 | 0; //@line 3040
     HEAP32[$779 >> 2] = $157; //@line 3041
     $780 = $ReallocAsyncCtx6 + 84 | 0; //@line 3042
     HEAP32[$780 >> 2] = $42; //@line 3043
     $781 = $ReallocAsyncCtx6 + 88 | 0; //@line 3044
     HEAP32[$781 >> 2] = $44; //@line 3045
     $782 = $ReallocAsyncCtx6 + 92 | 0; //@line 3046
     HEAP32[$782 >> 2] = $46; //@line 3047
     $783 = $ReallocAsyncCtx6 + 96 | 0; //@line 3048
     HEAP32[$783 >> 2] = $48; //@line 3049
     $784 = $ReallocAsyncCtx6 + 100 | 0; //@line 3050
     HEAP32[$784 >> 2] = $50; //@line 3051
     $785 = $ReallocAsyncCtx6 + 104 | 0; //@line 3052
     HEAP32[$785 >> 2] = $52; //@line 3053
     $786 = $ReallocAsyncCtx6 + 108 | 0; //@line 3054
     HEAP32[$786 >> 2] = $54; //@line 3055
     $787 = $ReallocAsyncCtx6 + 112 | 0; //@line 3056
     HEAP32[$787 >> 2] = $56; //@line 3057
     $788 = $ReallocAsyncCtx6 + 116 | 0; //@line 3058
     HEAP32[$788 >> 2] = $58; //@line 3059
     $789 = $ReallocAsyncCtx6 + 120 | 0; //@line 3060
     HEAP32[$789 >> 2] = $60; //@line 3061
     $790 = $ReallocAsyncCtx6 + 124 | 0; //@line 3062
     HEAP32[$790 >> 2] = $62; //@line 3063
     $791 = $ReallocAsyncCtx6 + 128 | 0; //@line 3064
     HEAP32[$791 >> 2] = $64; //@line 3065
     $792 = $ReallocAsyncCtx6 + 132 | 0; //@line 3066
     HEAP32[$792 >> 2] = $66; //@line 3067
     $793 = $ReallocAsyncCtx6 + 136 | 0; //@line 3068
     HEAP32[$793 >> 2] = $68; //@line 3069
     $794 = $ReallocAsyncCtx6 + 140 | 0; //@line 3070
     HEAP32[$794 >> 2] = $70; //@line 3071
     $795 = $ReallocAsyncCtx6 + 144 | 0; //@line 3072
     HEAP32[$795 >> 2] = $72; //@line 3073
     $796 = $ReallocAsyncCtx6 + 148 | 0; //@line 3074
     HEAP32[$796 >> 2] = $74; //@line 3075
     $797 = $ReallocAsyncCtx6 + 152 | 0; //@line 3076
     HEAP32[$797 >> 2] = $76; //@line 3077
     $798 = $ReallocAsyncCtx6 + 156 | 0; //@line 3078
     HEAP32[$798 >> 2] = $78; //@line 3079
     $799 = $ReallocAsyncCtx6 + 160 | 0; //@line 3080
     HEAP32[$799 >> 2] = $80; //@line 3081
     $800 = $ReallocAsyncCtx6 + 164 | 0; //@line 3082
     HEAP32[$800 >> 2] = $82; //@line 3083
     $801 = $ReallocAsyncCtx6 + 168 | 0; //@line 3084
     HEAP32[$801 >> 2] = $84; //@line 3085
     $802 = $ReallocAsyncCtx6 + 172 | 0; //@line 3086
     HEAP32[$802 >> 2] = $86; //@line 3087
     $803 = $ReallocAsyncCtx6 + 176 | 0; //@line 3088
     HEAP32[$803 >> 2] = $88; //@line 3089
     $804 = $ReallocAsyncCtx6 + 180 | 0; //@line 3090
     HEAP32[$804 >> 2] = $90; //@line 3091
     $805 = $ReallocAsyncCtx6 + 184 | 0; //@line 3092
     HEAP32[$805 >> 2] = $92; //@line 3093
     $806 = $ReallocAsyncCtx6 + 188 | 0; //@line 3094
     HEAP32[$806 >> 2] = $94; //@line 3095
     $807 = $ReallocAsyncCtx6 + 192 | 0; //@line 3096
     HEAP32[$807 >> 2] = $96; //@line 3097
     $808 = $ReallocAsyncCtx6 + 196 | 0; //@line 3098
     HEAP32[$808 >> 2] = $98; //@line 3099
     $809 = $ReallocAsyncCtx6 + 200 | 0; //@line 3100
     HEAP32[$809 >> 2] = $100; //@line 3101
     $810 = $ReallocAsyncCtx6 + 204 | 0; //@line 3102
     HEAP32[$810 >> 2] = $102; //@line 3103
     $811 = $ReallocAsyncCtx6 + 208 | 0; //@line 3104
     HEAP32[$811 >> 2] = $104; //@line 3105
     $812 = $ReallocAsyncCtx6 + 212 | 0; //@line 3106
     HEAP32[$812 >> 2] = $106; //@line 3107
     $813 = $ReallocAsyncCtx6 + 216 | 0; //@line 3108
     HEAP32[$813 >> 2] = $108; //@line 3109
     $814 = $ReallocAsyncCtx6 + 220 | 0; //@line 3110
     HEAP32[$814 >> 2] = $110; //@line 3111
     $815 = $ReallocAsyncCtx6 + 224 | 0; //@line 3112
     HEAP32[$815 >> 2] = $112; //@line 3113
     $816 = $ReallocAsyncCtx6 + 228 | 0; //@line 3114
     HEAP32[$816 >> 2] = $114; //@line 3115
     $817 = $ReallocAsyncCtx6 + 232 | 0; //@line 3116
     HEAP32[$817 >> 2] = $116; //@line 3117
     $818 = $ReallocAsyncCtx6 + 236 | 0; //@line 3118
     HEAP32[$818 >> 2] = $118; //@line 3119
     $819 = $ReallocAsyncCtx6 + 240 | 0; //@line 3120
     HEAP32[$819 >> 2] = $120; //@line 3121
     $820 = $ReallocAsyncCtx6 + 244 | 0; //@line 3122
     HEAP32[$820 >> 2] = $122; //@line 3123
     $821 = $ReallocAsyncCtx6 + 248 | 0; //@line 3124
     HEAP32[$821 >> 2] = $124; //@line 3125
     $822 = $ReallocAsyncCtx6 + 252 | 0; //@line 3126
     HEAP32[$822 >> 2] = $126; //@line 3127
     $823 = $ReallocAsyncCtx6 + 256 | 0; //@line 3128
     HEAP32[$823 >> 2] = $128; //@line 3129
     $824 = $ReallocAsyncCtx6 + 260 | 0; //@line 3130
     HEAP32[$824 >> 2] = $130; //@line 3131
     $825 = $ReallocAsyncCtx6 + 264 | 0; //@line 3132
     HEAP32[$825 >> 2] = $132; //@line 3133
     sp = STACKTOP; //@line 3134
     return;
    }
   case 76:
    {
     _mbed_tracef(2, 3737, 5086, $110); //@line 3139
     break L2;
     break;
    }
   case 82:
    {
     _mbed_tracef(2, 3737, 5147, $62); //@line 3144
     break L2;
     break;
    }
   case 88:
    {
     _mbed_tracef(2, 3737, 5208, $86); //@line 3149
     break L2;
     break;
    }
   case 94:
    {
     _mbed_tracef(2, 3737, 5269, $26); //@line 3154
     break L2;
     break;
    }
   case 100:
    {
     _mbed_tracef(2, 3737, 5329, $48); //@line 3159
     break L2;
     break;
    }
   case 104:
    {
     _mbed_tracef(2, 3737, 5389, $128); //@line 3164
     break L2;
     break;
    }
   case 107:
    {
     if (($137 - $18 | 0) >= ($10 | 0)) {
      $936 = ___async_retval; //@line 3173
      HEAP32[$936 >> 2] = $32; //@line 3174
      return;
     }
     if ((HEAP8[$137 >> 0] | 0) == -1) {
      $926 = $137 + 1 | 0; //@line 3180
      HEAP32[$82 >> 2] = $926; //@line 3181
      $927 = $926; //@line 3182
      $929 = $18 - $927 + $10 | 0; //@line 3184
      HEAP16[$100 + 24 >> 1] = $929; //@line 3187
      if ($929 & 65535 | 0) {
       HEAP32[$100 + 36 >> 2] = $927; //@line 3192
       $936 = ___async_retval; //@line 3193
       HEAP32[$936 >> 2] = $32; //@line 3194
       return;
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $36); //@line 3198
     }
     HEAP32[$100 + 4 >> 2] = 1; //@line 3201
     $936 = ___async_retval; //@line 3202
     HEAP32[$936 >> 2] = $32; //@line 3203
     return;
    }
   }
  } else {
   _mbed_tracef(2, 3737, 4439, $28); //@line 3209
  }
 } while (0);
 HEAP32[$100 + 4 >> 2] = 1; //@line 3213
 $936 = ___async_retval; //@line 3214
 HEAP32[$936 >> 2] = $32; //@line 3215
 return;
}
function _sn_coap_parser($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i223$i = 0, $$0$lcssa$i230$i = 0, $$0$lcssa$i237$i = 0, $$0$lcssa$i244$i = 0, $$0$lcssa$i251$i = 0, $$0$lcssa$i258$i = 0, $$0$lcssa$i265$i = 0, $$0$lcssa$i272$i = 0, $$0208$i = 0, $$045$i$i = 0, $$045$i221$i = 0, $$045$i228$i = 0, $$045$i235$i = 0, $$045$i242$i = 0, $$045$i249$i = 0, $$045$i256$i = 0, $$045$i263$i = 0, $$045$i270$i = 0, $$06$i$i = 0, $$06$i220$i = 0, $$06$i227$i = 0, $$06$i234$i = 0, $$06$i241$i = 0, $$06$i248$i = 0, $$06$i255$i = 0, $$06$i262$i = 0, $$06$i269$i = 0, $$1$i = 0, $$1202$i = 0, $$1202$in$i = 0, $$in = 0, $$sink$i = 0, $$sink214$i = 0, $$sink215$i = 0, $$sink216$i = 0, $$sink275$i = 0, $$sink3$i = 0, $$sink8$i = 0, $1000 = 0, $1001 = 0, $101 = 0, $104 = 0, $107 = 0, $109 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $192 = 0, $206 = 0, $211 = 0, $223 = 0, $226 = 0, $227 = 0, $230 = 0, $231 = 0, $267 = 0, $305 = 0, $307 = 0, $313 = 0, $314 = 0, $319 = 0, $322 = 0, $325 = 0, $326 = 0, $331 = 0, $334 = 0, $338 = 0, $341 = 0, $346 = 0, $347 = 0, $348 = 0, $4 = 0, $421 = 0, $423 = 0, $491 = 0, $494 = 0, $499 = 0, $500 = 0, $501 = 0, $574 = 0, $575 = 0, $579 = 0, $649 = 0, $652 = 0, $653 = 0, $658 = 0, $661 = 0, $663 = 0, $666 = 0, $734 = 0, $76 = 0, $8 = 0, $804 = 0, $807 = 0, $808 = 0, $813 = 0, $816 = 0, $818 = 0, $821 = 0, $891 = 0, $894 = 0, $895 = 0, $9 = 0, $90 = 0, $900 = 0, $903 = 0, $907 = 0, $910 = 0, $911 = 0, $916 = 0, $919 = 0, $92 = 0, $923 = 0, $926 = 0, $927 = 0, $932 = 0, $935 = 0, $939 = 0, $940 = 0, $945 = 0, $946 = 0, $951 = 0, $954 = 0, $960 = 0, $961 = 0, $966 = 0, $967 = 0, $972 = 0, $975 = 0, $979 = 0, $980 = 0, $99 = 0, $990 = 0, $991 = 0, $993 = 0, $AsyncCtx = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0, $AsyncCtx75 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $trunc$i = 0, $trunc276$i = 0, $trunc277$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0, $331$looptemp = 0, $658$looptemp = 0, $813$looptemp = 0, $900$looptemp = 0, $916$looptemp = 0, $932$looptemp = 0, $951$looptemp = 0, $972$looptemp = 0, $319$looptemp = 0;
 sp = STACKTOP; //@line 4802
 STACKTOP = STACKTOP + 240 | 0; //@line 4803
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240); //@line 4803
 $vararg_buffer55 = sp + 224 | 0; //@line 4804
 $vararg_buffer53 = sp + 216 | 0; //@line 4805
 $vararg_buffer51 = sp + 208 | 0; //@line 4806
 $vararg_buffer49 = sp + 200 | 0; //@line 4807
 $vararg_buffer47 = sp + 192 | 0; //@line 4808
 $vararg_buffer45 = sp + 184 | 0; //@line 4809
 $vararg_buffer43 = sp + 176 | 0; //@line 4810
 $vararg_buffer41 = sp + 168 | 0; //@line 4811
 $vararg_buffer39 = sp + 160 | 0; //@line 4812
 $vararg_buffer37 = sp + 152 | 0; //@line 4813
 $vararg_buffer35 = sp + 144 | 0; //@line 4814
 $vararg_buffer33 = sp + 136 | 0; //@line 4815
 $vararg_buffer31 = sp + 128 | 0; //@line 4816
 $vararg_buffer29 = sp + 120 | 0; //@line 4817
 $vararg_buffer27 = sp + 112 | 0; //@line 4818
 $vararg_buffer25 = sp + 104 | 0; //@line 4819
 $vararg_buffer23 = sp + 96 | 0; //@line 4820
 $vararg_buffer21 = sp + 88 | 0; //@line 4821
 $vararg_buffer19 = sp + 80 | 0; //@line 4822
 $vararg_buffer17 = sp + 72 | 0; //@line 4823
 $vararg_buffer15 = sp + 64 | 0; //@line 4824
 $vararg_buffer13 = sp + 56 | 0; //@line 4825
 $vararg_buffer11 = sp + 48 | 0; //@line 4826
 $vararg_buffer9 = sp + 40 | 0; //@line 4827
 $vararg_buffer7 = sp + 32 | 0; //@line 4828
 $vararg_buffer5 = sp + 24 | 0; //@line 4829
 $vararg_buffer3 = sp + 16 | 0; //@line 4830
 $vararg_buffer1 = sp + 8 | 0; //@line 4831
 $vararg_buffer = sp; //@line 4832
 $4 = sp + 228 | 0; //@line 4833
 HEAP32[$4 >> 2] = $2; //@line 4834
 if (!$2) {
  $$0 = 0; //@line 4837
  STACKTOP = sp; //@line 4838
  return $$0 | 0; //@line 4838
 }
 if (($0 | 0) == 0 | ($1 & 65535) < 4) {
  $$0 = 0; //@line 4844
  STACKTOP = sp; //@line 4845
  return $$0 | 0; //@line 4845
 }
 $8 = HEAP32[$0 >> 2] | 0; //@line 4847
 $AsyncCtx = _emscripten_alloc_async_context(264, sp) | 0; //@line 4848
 $9 = FUNCTION_TABLE_ii[$8 & 15](44) | 0; //@line 4849
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 4852
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer27; //@line 4854
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer33; //@line 4856
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer27; //@line 4858
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer33; //@line 4860
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer39; //@line 4862
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer21; //@line 4864
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer11; //@line 4866
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer49; //@line 4868
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 4870
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer11; //@line 4872
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer49; //@line 4874
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer23; //@line 4876
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer3; //@line 4878
  HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 4880
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer17; //@line 4882
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer55; //@line 4884
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer51; //@line 4886
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer35; //@line 4888
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer17; //@line 4890
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer55; //@line 4892
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer51; //@line 4894
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer29; //@line 4896
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer39; //@line 4898
  HEAP32[$AsyncCtx + 96 >> 2] = $2; //@line 4900
  HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer45; //@line 4902
  HEAP32[$AsyncCtx + 104 >> 2] = $0; //@line 4904
  HEAP32[$AsyncCtx + 108 >> 2] = $vararg_buffer23; //@line 4906
  HEAP16[$AsyncCtx + 112 >> 1] = $1; //@line 4908
  HEAP32[$AsyncCtx + 116 >> 2] = $vararg_buffer29; //@line 4910
  HEAP32[$AsyncCtx + 120 >> 2] = $3; //@line 4912
  HEAP32[$AsyncCtx + 124 >> 2] = $vararg_buffer45; //@line 4914
  HEAP32[$AsyncCtx + 128 >> 2] = $vararg_buffer13; //@line 4916
  HEAP32[$AsyncCtx + 132 >> 2] = $vararg_buffer7; //@line 4918
  HEAP32[$AsyncCtx + 136 >> 2] = $vararg_buffer1; //@line 4920
  HEAP32[$AsyncCtx + 140 >> 2] = $vararg_buffer53; //@line 4922
  HEAP32[$AsyncCtx + 144 >> 2] = $vararg_buffer19; //@line 4924
  HEAP32[$AsyncCtx + 148 >> 2] = $vararg_buffer47; //@line 4926
  HEAP32[$AsyncCtx + 152 >> 2] = $vararg_buffer7; //@line 4928
  HEAP32[$AsyncCtx + 156 >> 2] = $vararg_buffer13; //@line 4930
  HEAP32[$AsyncCtx + 160 >> 2] = $vararg_buffer41; //@line 4932
  HEAP32[$AsyncCtx + 164 >> 2] = $4; //@line 4934
  HEAP32[$AsyncCtx + 168 >> 2] = $vararg_buffer47; //@line 4936
  HEAP32[$AsyncCtx + 172 >> 2] = $vararg_buffer41; //@line 4938
  HEAP32[$AsyncCtx + 176 >> 2] = $vararg_buffer1; //@line 4940
  HEAP32[$AsyncCtx + 180 >> 2] = $vararg_buffer35; //@line 4942
  HEAP32[$AsyncCtx + 184 >> 2] = $vararg_buffer25; //@line 4944
  HEAP32[$AsyncCtx + 188 >> 2] = $vararg_buffer19; //@line 4946
  HEAP32[$AsyncCtx + 192 >> 2] = $vararg_buffer37; //@line 4948
  HEAP32[$AsyncCtx + 196 >> 2] = $vararg_buffer43; //@line 4950
  HEAP32[$AsyncCtx + 200 >> 2] = $vararg_buffer9; //@line 4952
  HEAP32[$AsyncCtx + 204 >> 2] = $vararg_buffer5; //@line 4954
  HEAP32[$AsyncCtx + 208 >> 2] = $vararg_buffer25; //@line 4956
  HEAP32[$AsyncCtx + 212 >> 2] = $vararg_buffer43; //@line 4958
  HEAP32[$AsyncCtx + 216 >> 2] = $vararg_buffer; //@line 4960
  HEAP32[$AsyncCtx + 220 >> 2] = $vararg_buffer9; //@line 4962
  HEAP32[$AsyncCtx + 224 >> 2] = $vararg_buffer5; //@line 4964
  HEAP32[$AsyncCtx + 228 >> 2] = $vararg_buffer31; //@line 4966
  HEAP32[$AsyncCtx + 232 >> 2] = $vararg_buffer21; //@line 4968
  HEAP32[$AsyncCtx + 236 >> 2] = $vararg_buffer15; //@line 4970
  HEAP32[$AsyncCtx + 240 >> 2] = $vararg_buffer; //@line 4972
  HEAP32[$AsyncCtx + 244 >> 2] = $0; //@line 4974
  HEAP32[$AsyncCtx + 248 >> 2] = $vararg_buffer37; //@line 4976
  HEAP32[$AsyncCtx + 252 >> 2] = $vararg_buffer31; //@line 4978
  HEAP32[$AsyncCtx + 256 >> 2] = $vararg_buffer53; //@line 4980
  HEAP32[$AsyncCtx + 260 >> 2] = $vararg_buffer15; //@line 4982
  sp = STACKTOP; //@line 4983
  STACKTOP = sp; //@line 4984
  return 0; //@line 4984
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4986
 if (!$9) {
  _mbed_tracef(2, 3737, 3742, $vararg_buffer); //@line 4989
  _mbed_tracef(2, 3737, 3850, $vararg_buffer1); //@line 4990
  $$0 = 0; //@line 4991
  STACKTOP = sp; //@line 4992
  return $$0 | 0; //@line 4992
 }
 dest = $9; //@line 4994
 stop = dest + 44 | 0; //@line 4994
 do {
  HEAP32[dest >> 2] = 0; //@line 4994
  dest = dest + 4 | 0; //@line 4994
 } while ((dest | 0) < (stop | 0));
 $76 = $9 + 16 | 0; //@line 4995
 HEAP32[$76 >> 2] = -1; //@line 4996
 HEAP32[$3 >> 2] = HEAP8[$2 >> 0] & -64 & 255; //@line 5000
 HEAP32[$9 + 12 >> 2] = HEAP8[$2 >> 0] & 48; //@line 5005
 HEAP32[$9 + 8 >> 2] = HEAPU8[$2 + 1 >> 0]; //@line 5010
 $90 = HEAP8[$2 + 3 >> 0] | 0; //@line 5013
 $92 = $9 + 20 | 0; //@line 5015
 HEAP16[$92 >> 1] = $90 & 255; //@line 5016
 HEAP16[$92 >> 1] = HEAPU8[$2 + 2 >> 0] << 8 | $90 & 255; //@line 5023
 $99 = $2 + 4 | 0; //@line 5024
 HEAP32[$4 >> 2] = $99; //@line 5025
 $101 = HEAP8[$2 >> 0] & 15; //@line 5027
 HEAP8[$9 >> 0] = $101; //@line 5028
 do {
  if (!($101 << 24 >> 24)) {
   $$in = $99; //@line 5032
   label = 16; //@line 5033
  } else {
   if (($101 & 255) <= 8) {
    $104 = $9 + 28 | 0; //@line 5037
    if (!(HEAP32[$104 >> 2] | 0)) {
     $107 = HEAP32[$0 >> 2] | 0; //@line 5041
     $AsyncCtx59 = _emscripten_alloc_async_context(256, sp) | 0; //@line 5043
     $109 = FUNCTION_TABLE_ii[$107 & 15]($101 & 255) | 0; //@line 5044
     if (___async) {
      HEAP32[$AsyncCtx59 >> 2] = 50; //@line 5047
      HEAP32[$AsyncCtx59 + 4 >> 2] = $vararg_buffer27; //@line 5049
      HEAP32[$AsyncCtx59 + 8 >> 2] = $vararg_buffer33; //@line 5051
      HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer27; //@line 5053
      HEAP32[$AsyncCtx59 + 16 >> 2] = $vararg_buffer33; //@line 5055
      HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer39; //@line 5057
      HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer21; //@line 5059
      HEAP32[$AsyncCtx59 + 28 >> 2] = $vararg_buffer11; //@line 5061
      HEAP32[$AsyncCtx59 + 32 >> 2] = $vararg_buffer49; //@line 5063
      HEAP32[$AsyncCtx59 + 36 >> 2] = $vararg_buffer11; //@line 5065
      HEAP32[$AsyncCtx59 + 40 >> 2] = $vararg_buffer49; //@line 5067
      HEAP32[$AsyncCtx59 + 44 >> 2] = $vararg_buffer23; //@line 5069
      HEAP32[$AsyncCtx59 + 48 >> 2] = $4; //@line 5071
      HEAP32[$AsyncCtx59 + 52 >> 2] = $9; //@line 5073
      HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer17; //@line 5075
      HEAP32[$AsyncCtx59 + 60 >> 2] = $vararg_buffer55; //@line 5077
      HEAP32[$AsyncCtx59 + 64 >> 2] = $vararg_buffer51; //@line 5079
      HEAP32[$AsyncCtx59 + 68 >> 2] = $vararg_buffer35; //@line 5081
      HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer17; //@line 5083
      HEAP32[$AsyncCtx59 + 76 >> 2] = $vararg_buffer55; //@line 5085
      HEAP32[$AsyncCtx59 + 80 >> 2] = $vararg_buffer51; //@line 5087
      HEAP32[$AsyncCtx59 + 84 >> 2] = $vararg_buffer29; //@line 5089
      HEAP32[$AsyncCtx59 + 88 >> 2] = $vararg_buffer39; //@line 5091
      HEAP32[$AsyncCtx59 + 92 >> 2] = $2; //@line 5093
      HEAP32[$AsyncCtx59 + 96 >> 2] = $vararg_buffer45; //@line 5095
      HEAP32[$AsyncCtx59 + 100 >> 2] = $0; //@line 5097
      HEAP32[$AsyncCtx59 + 104 >> 2] = $vararg_buffer23; //@line 5099
      HEAP16[$AsyncCtx59 + 108 >> 1] = $1; //@line 5101
      HEAP32[$AsyncCtx59 + 112 >> 2] = $99; //@line 5103
      HEAP32[$AsyncCtx59 + 116 >> 2] = $vararg_buffer29; //@line 5105
      HEAP32[$AsyncCtx59 + 120 >> 2] = $vararg_buffer45; //@line 5107
      HEAP32[$AsyncCtx59 + 124 >> 2] = $76; //@line 5109
      HEAP32[$AsyncCtx59 + 128 >> 2] = $vararg_buffer13; //@line 5111
      HEAP32[$AsyncCtx59 + 132 >> 2] = $vararg_buffer7; //@line 5113
      HEAP32[$AsyncCtx59 + 136 >> 2] = $vararg_buffer53; //@line 5115
      HEAP32[$AsyncCtx59 + 140 >> 2] = $vararg_buffer19; //@line 5117
      HEAP32[$AsyncCtx59 + 144 >> 2] = $vararg_buffer47; //@line 5119
      HEAP32[$AsyncCtx59 + 148 >> 2] = $vararg_buffer7; //@line 5121
      HEAP32[$AsyncCtx59 + 152 >> 2] = $vararg_buffer13; //@line 5123
      HEAP32[$AsyncCtx59 + 156 >> 2] = $vararg_buffer41; //@line 5125
      HEAP32[$AsyncCtx59 + 160 >> 2] = $4; //@line 5127
      HEAP32[$AsyncCtx59 + 164 >> 2] = $vararg_buffer47; //@line 5129
      HEAP32[$AsyncCtx59 + 168 >> 2] = $vararg_buffer41; //@line 5131
      HEAP32[$AsyncCtx59 + 172 >> 2] = $vararg_buffer35; //@line 5133
      HEAP32[$AsyncCtx59 + 176 >> 2] = $vararg_buffer25; //@line 5135
      HEAP32[$AsyncCtx59 + 180 >> 2] = $104; //@line 5137
      HEAP32[$AsyncCtx59 + 184 >> 2] = $vararg_buffer19; //@line 5139
      HEAP32[$AsyncCtx59 + 188 >> 2] = $vararg_buffer37; //@line 5141
      HEAP32[$AsyncCtx59 + 192 >> 2] = $9; //@line 5143
      HEAP32[$AsyncCtx59 + 196 >> 2] = $vararg_buffer43; //@line 5145
      HEAP32[$AsyncCtx59 + 200 >> 2] = $vararg_buffer9; //@line 5147
      HEAP32[$AsyncCtx59 + 204 >> 2] = $vararg_buffer5; //@line 5149
      HEAP32[$AsyncCtx59 + 208 >> 2] = $vararg_buffer25; //@line 5151
      HEAP32[$AsyncCtx59 + 212 >> 2] = $vararg_buffer43; //@line 5153
      HEAP32[$AsyncCtx59 + 216 >> 2] = $vararg_buffer9; //@line 5155
      HEAP32[$AsyncCtx59 + 220 >> 2] = $vararg_buffer5; //@line 5157
      HEAP32[$AsyncCtx59 + 224 >> 2] = $vararg_buffer31; //@line 5159
      HEAP32[$AsyncCtx59 + 228 >> 2] = $vararg_buffer21; //@line 5161
      HEAP32[$AsyncCtx59 + 232 >> 2] = $vararg_buffer15; //@line 5163
      HEAP32[$AsyncCtx59 + 236 >> 2] = $0; //@line 5165
      HEAP32[$AsyncCtx59 + 240 >> 2] = $vararg_buffer37; //@line 5167
      HEAP32[$AsyncCtx59 + 244 >> 2] = $vararg_buffer31; //@line 5169
      HEAP32[$AsyncCtx59 + 248 >> 2] = $vararg_buffer53; //@line 5171
      HEAP32[$AsyncCtx59 + 252 >> 2] = $vararg_buffer15; //@line 5173
      sp = STACKTOP; //@line 5174
      STACKTOP = sp; //@line 5175
      return 0; //@line 5175
     }
     _emscripten_free_async_context($AsyncCtx59 | 0); //@line 5177
     HEAP32[$104 >> 2] = $109; //@line 5178
     if (!$109) {
      _mbed_tracef(2, 3737, 3943, $vararg_buffer5); //@line 5181
      break;
     } else {
      _memcpy($109 | 0, $99 | 0, HEAPU8[$9 >> 0] | 0) | 0; //@line 5186
      $178 = $99 + (HEAPU8[$9 >> 0] | 0) | 0; //@line 5189
      HEAP32[$4 >> 2] = $178; //@line 5190
      $$in = $178; //@line 5191
      label = 16; //@line 5192
      break;
     }
    }
   }
   _mbed_tracef(2, 3737, 3895, $vararg_buffer3); //@line 5197
  }
 } while (0);
 L26 : do {
  if ((label | 0) == 16) {
   $179 = $$in; //@line 5202
   $180 = $1 & 65535; //@line 5203
   $181 = $2; //@line 5204
   $182 = $181 + $180 | 0; //@line 5205
   $184 = $9 + 40 | 0; //@line 5207
   $185 = $9 + 32 | 0; //@line 5208
   $186 = $9 + 22 | 0; //@line 5209
   $$0208$i = 0; //@line 5210
   $$sink275$i = $182 - $179 | 0; //@line 5210
   $1000 = $179; //@line 5210
   $189 = $$in; //@line 5210
   L28 : while (1) {
    if (!(($$sink275$i & 65535) << 16 >> 16)) {
     label = 132; //@line 5215
     break;
    }
    $trunc277$i = HEAP8[$189 >> 0] | 0; //@line 5218
    if ($trunc277$i << 24 >> 24 == -1) {
     label = 132; //@line 5221
     break;
    }
    $192 = $trunc277$i & 15; //@line 5225
    $trunc276$i = ($trunc277$i & 255) >>> 4; //@line 5226
    switch ($trunc276$i & 15) {
    case 15:
     {
      label = 22; //@line 5231
      break L28;
      break;
     }
    case 13:
     {
      $$sink$i = HEAPU8[$189 + 1 >> 0] | 0; //@line 5239
      $$sink214$i = 13; //@line 5239
      $$sink3$i = 1; //@line 5239
      label = 23; //@line 5240
      break;
     }
    case 14:
     {
      $$sink$i = (HEAPU8[$189 + 1 >> 0] << 8) + 269 | 0; //@line 5252
      $$sink214$i = HEAPU8[$189 + 2 >> 0] | 0; //@line 5252
      $$sink3$i = 2; //@line 5252
      label = 23; //@line 5253
      break;
     }
    default:
     {
      $$1$i = $trunc276$i & 255; //@line 5257
      $1001 = $1000; //@line 5257
      $211 = $189; //@line 5257
     }
    }
    if ((label | 0) == 23) {
     label = 0; //@line 5261
     $206 = $189 + $$sink3$i | 0; //@line 5263
     HEAP32[$4 >> 2] = $206; //@line 5264
     $$1$i = $$sink$i + $$sink214$i | 0; //@line 5266
     $1001 = $206; //@line 5266
     $211 = $206; //@line 5266
    }
    $$0208$i = $$1$i + ($$0208$i & 255) | 0; //@line 5269
    switch ($trunc277$i & 15) {
    case 15:
     {
      label = 27; //@line 5273
      break L28;
      break;
     }
    case 13:
     {
      $$sink215$i = HEAPU8[$211 + 1 >> 0] | 0; //@line 5281
      $$sink216$i = 13; //@line 5281
      $$sink8$i = 1; //@line 5281
      label = 28; //@line 5282
      break;
     }
    case 14:
     {
      $$sink215$i = (HEAPU8[$211 + 1 >> 0] << 8) + 269 | 0; //@line 5294
      $$sink216$i = HEAPU8[$211 + 2 >> 0] | 0; //@line 5294
      $$sink8$i = 2; //@line 5294
      label = 28; //@line 5295
      break;
     }
    default:
     {
      $$1202$in$i = $192; //@line 5299
      $226 = $1001; //@line 5299
      $267 = $211; //@line 5299
     }
    }
    if ((label | 0) == 28) {
     label = 0; //@line 5303
     $223 = $211 + $$sink8$i | 0; //@line 5305
     HEAP32[$4 >> 2] = $223; //@line 5306
     $$1202$in$i = $$sink215$i + $$sink216$i | 0; //@line 5308
     $226 = $223; //@line 5308
     $267 = $223; //@line 5308
    }
    $$1202$i = $$1202$in$i & 65535; //@line 5310
    $227 = $182 - $226 & 65535; //@line 5312
    $trunc$i = $$0208$i & 65535; //@line 5313
    L44 : do {
     switch ($trunc$i << 16 >> 16) {
     case 28:
     case 60:
     case 17:
     case 27:
     case 23:
     case 15:
     case 6:
     case 20:
     case 7:
     case 8:
     case 3:
     case 4:
     case 35:
     case 14:
      {
       if (!(HEAP32[$184 >> 2] | 0)) {
        $230 = HEAP32[$0 >> 2] | 0; //@line 5320
        $AsyncCtx63 = _emscripten_alloc_async_context(288, sp) | 0; //@line 5321
        $231 = FUNCTION_TABLE_ii[$230 & 15](68) | 0; //@line 5322
        if (___async) {
         label = 32; //@line 5325
         break L28;
        }
        _emscripten_free_async_context($AsyncCtx63 | 0); //@line 5328
        HEAP32[$184 >> 2] = $231; //@line 5329
        if (!$231) {
         label = 34; //@line 5332
         break L28;
        }
        dest = $231; //@line 5335
        stop = dest + 68 | 0; //@line 5335
        do {
         HEAP32[dest >> 2] = 0; //@line 5335
         dest = dest + 4 | 0; //@line 5335
        } while ((dest | 0) < (stop | 0));
        $305 = HEAP32[$184 >> 2] | 0; //@line 5336
        HEAP32[$305 + 16 >> 2] = 60; //@line 5338
        $307 = $305 + 28 | 0; //@line 5339
        HEAP32[$305 + 12 >> 2] = -1; //@line 5341
        HEAP32[$307 >> 2] = -1; //@line 5342
        HEAP32[$307 + 4 >> 2] = -1; //@line 5342
        HEAP32[$307 + 8 >> 2] = -1; //@line 5342
        HEAP32[$307 + 12 >> 2] = -1; //@line 5342
        if (!$305) {
         break L28;
        }
       }
       do {
        switch ($trunc$i << 16 >> 16) {
        case 12:
         {
          label = 38; //@line 5351
          break L44;
          break;
         }
        case 11:
         {
          label = 85; //@line 5356
          break L44;
          break;
         }
        case 14:
         {
          if (($$1202$i & 65535) > 4) {
           label = 45; //@line 5363
           break L28;
          }
          $325 = $267 + 1 | 0; //@line 5366
          HEAP32[$4 >> 2] = $325; //@line 5367
          $326 = $$1202$in$i & 255; //@line 5368
          if (!($326 << 24 >> 24)) {
           $$0$lcssa$i223$i = 0; //@line 5371
          } else {
           $$045$i221$i = $326; //@line 5373
           $$06$i220$i = 0; //@line 5373
           $331 = $325; //@line 5373
           while (1) {
            $$045$i221$i = $$045$i221$i + -1 << 24 >> 24; //@line 5375
            $331$looptemp = $331;
            $331 = $331 + 1 | 0; //@line 5377
            HEAP32[$4 >> 2] = $331; //@line 5378
            $334 = $$06$i220$i << 8 | HEAPU8[$331$looptemp >> 0]; //@line 5381
            if (!($$045$i221$i << 24 >> 24)) {
             $$0$lcssa$i223$i = $334; //@line 5384
             break;
            } else {
             $$06$i220$i = $334; //@line 5387
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 16 >> 2] = $$0$lcssa$i223$i; //@line 5393
          break L44;
          break;
         }
        case 35:
         {
          $338 = $$1202$in$i & 65535; //@line 5398
          if (($$1202$i + -1 & 65535) > 1033) {
           label = 51; //@line 5402
           break L28;
          }
          $341 = HEAP32[$184 >> 2] | 0; //@line 5405
          if (HEAP32[$341 + 44 >> 2] | 0) {
           label = 51; //@line 5410
           break L28;
          }
          HEAP16[$341 + 2 >> 1] = $$1202$i; //@line 5414
          $346 = $267 + 1 | 0; //@line 5415
          HEAP32[$4 >> 2] = $346; //@line 5416
          $347 = HEAP32[$0 >> 2] | 0; //@line 5417
          $AsyncCtx67 = _emscripten_alloc_async_context(276, sp) | 0; //@line 5418
          $348 = FUNCTION_TABLE_ii[$347 & 15]($$1202$i) | 0; //@line 5419
          if (___async) {
           label = 53; //@line 5422
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx67 | 0); //@line 5425
          HEAP32[(HEAP32[$184 >> 2] | 0) + 44 >> 2] = $348; //@line 5428
          if (!$348) {
           label = 55; //@line 5431
           break L28;
          }
          _memcpy($348 | 0, $346 | 0, $338 | 0) | 0; //@line 5434
          HEAP32[$4 >> 2] = $346 + $338; //@line 5436
          break L44;
          break;
         }
        case 4:
         {
          $421 = HEAP32[$184 >> 2] | 0; //@line 5441
          $AsyncCtx91 = _emscripten_alloc_async_context(268, sp) | 0; //@line 5443
          $423 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $421 + 48 | 0, $421, 4, $$1202$i) | 0; //@line 5444
          if (___async) {
           label = 58; //@line 5447
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx91 | 0); //@line 5450
          if ($423 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 60; //@line 5455
           break L28;
          }
          break;
         }
        case 3:
         {
          $491 = $$1202$in$i & 65535; //@line 5461
          if (($$1202$i + -1 & 65535) > 254) {
           label = 63; //@line 5465
           break L28;
          }
          $494 = HEAP32[$184 >> 2] | 0; //@line 5468
          if (HEAP32[$494 + 52 >> 2] | 0) {
           label = 63; //@line 5473
           break L28;
          }
          HEAP16[$494 + 4 >> 1] = $$1202$i; //@line 5477
          $499 = $267 + 1 | 0; //@line 5478
          HEAP32[$4 >> 2] = $499; //@line 5479
          $500 = HEAP32[$0 >> 2] | 0; //@line 5480
          $AsyncCtx71 = _emscripten_alloc_async_context(276, sp) | 0; //@line 5481
          $501 = FUNCTION_TABLE_ii[$500 & 15]($$1202$i) | 0; //@line 5482
          if (___async) {
           label = 65; //@line 5485
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx71 | 0); //@line 5488
          HEAP32[(HEAP32[$184 >> 2] | 0) + 52 >> 2] = $501; //@line 5491
          if (!$501) {
           label = 67; //@line 5494
           break L28;
          }
          _memcpy($501 | 0, $499 | 0, $491 | 0) | 0; //@line 5497
          HEAP32[$4 >> 2] = $499 + $491; //@line 5499
          break L44;
          break;
         }
        case 8:
         {
          $574 = HEAP32[$184 >> 2] | 0; //@line 5504
          $575 = $574 + 56 | 0; //@line 5505
          if (HEAP32[$575 >> 2] | 0) {
           label = 70; //@line 5509
           break L28;
          }
          $AsyncCtx87 = _emscripten_alloc_async_context(268, sp) | 0; //@line 5513
          $579 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $575, $574 + 6 | 0, 8, $$1202$i) | 0; //@line 5514
          if (___async) {
           label = 72; //@line 5517
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx87 | 0); //@line 5520
          if ($579 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 74; //@line 5525
           break L28;
          }
          break;
         }
        case 7:
         {
          if (($$1202$i & 65535) > 2) {
           label = 77; //@line 5533
           break L28;
          }
          $649 = (HEAP32[$184 >> 2] | 0) + 28 | 0; //@line 5537
          if ((HEAP32[$649 >> 2] | 0) != -1) {
           label = 77; //@line 5541
           break L28;
          }
          $652 = $267 + 1 | 0; //@line 5544
          HEAP32[$4 >> 2] = $652; //@line 5545
          $653 = $$1202$in$i & 255; //@line 5546
          if (!($653 << 24 >> 24)) {
           $$0$lcssa$i265$i = 0; //@line 5549
          } else {
           $$045$i263$i = $653; //@line 5551
           $$06$i262$i = 0; //@line 5551
           $658 = $652; //@line 5551
           while (1) {
            $$045$i263$i = $$045$i263$i + -1 << 24 >> 24; //@line 5553
            $658$looptemp = $658;
            $658 = $658 + 1 | 0; //@line 5555
            HEAP32[$4 >> 2] = $658; //@line 5556
            $661 = $$06$i262$i << 8 | HEAPU8[$658$looptemp >> 0]; //@line 5559
            if (!($$045$i263$i << 24 >> 24)) {
             $$0$lcssa$i265$i = $661; //@line 5562
             break;
            } else {
             $$06$i262$i = $661; //@line 5565
            }
           }
          }
          HEAP32[$649 >> 2] = $$0$lcssa$i265$i; //@line 5569
          break L44;
          break;
         }
        case 20:
         {
          $663 = HEAP32[$184 >> 2] | 0; //@line 5574
          $AsyncCtx83 = _emscripten_alloc_async_context(268, sp) | 0; //@line 5577
          $666 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $663 + 60 | 0, $663 + 8 | 0, 20, $$1202$i) | 0; //@line 5578
          if (___async) {
           label = 82; //@line 5581
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx83 | 0); //@line 5584
          if ($666 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 84; //@line 5589
           break L28;
          }
          break;
         }
        case 6:
         {
          if (($$1202$i & 65535) > 2) {
           label = 91; //@line 5597
           break L28;
          }
          $804 = (HEAP32[$184 >> 2] | 0) + 32 | 0; //@line 5601
          if ((HEAP32[$804 >> 2] | 0) != -1) {
           label = 91; //@line 5605
           break L28;
          }
          $807 = $267 + 1 | 0; //@line 5608
          HEAP32[$4 >> 2] = $807; //@line 5609
          $808 = $$1202$in$i & 255; //@line 5610
          if (!($808 << 24 >> 24)) {
           $$0$lcssa$i272$i = 0; //@line 5613
          } else {
           $$045$i270$i = $808; //@line 5615
           $$06$i269$i = 0; //@line 5615
           $813 = $807; //@line 5615
           while (1) {
            $$045$i270$i = $$045$i270$i + -1 << 24 >> 24; //@line 5617
            $813$looptemp = $813;
            $813 = $813 + 1 | 0; //@line 5619
            HEAP32[$4 >> 2] = $813; //@line 5620
            $816 = $$06$i269$i << 8 | HEAPU8[$813$looptemp >> 0]; //@line 5623
            if (!($$045$i270$i << 24 >> 24)) {
             $$0$lcssa$i272$i = $816; //@line 5626
             break;
            } else {
             $$06$i269$i = $816; //@line 5629
            }
           }
          }
          HEAP32[$804 >> 2] = $$0$lcssa$i272$i; //@line 5633
          break L44;
          break;
         }
        case 15:
         {
          $818 = HEAP32[$184 >> 2] | 0; //@line 5638
          $AsyncCtx75 = _emscripten_alloc_async_context(268, sp) | 0; //@line 5641
          $821 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $818 + 64 | 0, $818 + 10 | 0, 15, $$1202$i) | 0; //@line 5642
          if (___async) {
           label = 96; //@line 5645
           break L28;
          }
          _emscripten_free_async_context($AsyncCtx75 | 0); //@line 5648
          if ($821 << 24 >> 24 > -1) {
           break L44;
          } else {
           label = 98; //@line 5653
           break L28;
          }
          break;
         }
        case 23:
         {
          if (($$1202$i & 65535) > 3) {
           label = 101; //@line 5661
           break L28;
          }
          $891 = (HEAP32[$184 >> 2] | 0) + 40 | 0; //@line 5665
          if ((HEAP32[$891 >> 2] | 0) != -1) {
           label = 101; //@line 5669
           break L28;
          }
          $894 = $267 + 1 | 0; //@line 5672
          HEAP32[$4 >> 2] = $894; //@line 5673
          $895 = $$1202$in$i & 255; //@line 5674
          if (!($895 << 24 >> 24)) {
           $$0$lcssa$i258$i = 0; //@line 5677
          } else {
           $$045$i256$i = $895; //@line 5679
           $$06$i255$i = 0; //@line 5679
           $900 = $894; //@line 5679
           while (1) {
            $$045$i256$i = $$045$i256$i + -1 << 24 >> 24; //@line 5681
            $900$looptemp = $900;
            $900 = $900 + 1 | 0; //@line 5683
            HEAP32[$4 >> 2] = $900; //@line 5684
            $903 = $$06$i255$i << 8 | HEAPU8[$900$looptemp >> 0]; //@line 5687
            if (!($$045$i256$i << 24 >> 24)) {
             $$0$lcssa$i258$i = $903; //@line 5690
             break;
            } else {
             $$06$i255$i = $903; //@line 5693
            }
           }
          }
          HEAP32[$891 >> 2] = $$0$lcssa$i258$i; //@line 5697
          break L44;
          break;
         }
        case 27:
         {
          if (($$1202$i & 65535) > 3) {
           label = 107; //@line 5704
           break L28;
          }
          $907 = (HEAP32[$184 >> 2] | 0) + 36 | 0; //@line 5708
          if ((HEAP32[$907 >> 2] | 0) != -1) {
           label = 107; //@line 5712
           break L28;
          }
          $910 = $267 + 1 | 0; //@line 5715
          HEAP32[$4 >> 2] = $910; //@line 5716
          $911 = $$1202$in$i & 255; //@line 5717
          if (!($911 << 24 >> 24)) {
           $$0$lcssa$i251$i = 0; //@line 5720
          } else {
           $$045$i249$i = $911; //@line 5722
           $$06$i248$i = 0; //@line 5722
           $916 = $910; //@line 5722
           while (1) {
            $$045$i249$i = $$045$i249$i + -1 << 24 >> 24; //@line 5724
            $916$looptemp = $916;
            $916 = $916 + 1 | 0; //@line 5726
            HEAP32[$4 >> 2] = $916; //@line 5727
            $919 = $$06$i248$i << 8 | HEAPU8[$916$looptemp >> 0]; //@line 5730
            if (!($$045$i249$i << 24 >> 24)) {
             $$0$lcssa$i251$i = $919; //@line 5733
             break;
            } else {
             $$06$i248$i = $919; //@line 5736
            }
           }
          }
          HEAP32[$907 >> 2] = $$0$lcssa$i251$i; //@line 5740
          break L44;
          break;
         }
        case 17:
         {
          if (($$1202$i & 65535) > 2) {
           label = 113; //@line 5747
           break L28;
          }
          $923 = (HEAP32[$184 >> 2] | 0) + 12 | 0; //@line 5751
          if ((HEAP32[$923 >> 2] | 0) != -1) {
           label = 113; //@line 5755
           break L28;
          }
          $926 = $267 + 1 | 0; //@line 5758
          HEAP32[$4 >> 2] = $926; //@line 5759
          $927 = $$1202$in$i & 255; //@line 5760
          if (!($927 << 24 >> 24)) {
           $$0$lcssa$i244$i = 0; //@line 5763
          } else {
           $$045$i242$i = $927; //@line 5765
           $$06$i241$i = 0; //@line 5765
           $932 = $926; //@line 5765
           while (1) {
            $$045$i242$i = $$045$i242$i + -1 << 24 >> 24; //@line 5767
            $932$looptemp = $932;
            $932 = $932 + 1 | 0; //@line 5769
            HEAP32[$4 >> 2] = $932; //@line 5770
            $935 = $$06$i241$i << 8 | HEAPU8[$932$looptemp >> 0]; //@line 5773
            if (!($$045$i242$i << 24 >> 24)) {
             $$0$lcssa$i244$i = $935; //@line 5776
             break;
            } else {
             $$06$i241$i = $935; //@line 5779
            }
           }
          }
          HEAP32[$923 >> 2] = $$0$lcssa$i244$i; //@line 5783
          break L44;
          break;
         }
        case 60:
         {
          if (($$1202$i & 65535) > 4) {
           label = 119; //@line 5790
           break L28;
          }
          $939 = (HEAP32[$184 >> 2] | 0) + 1 | 0; //@line 5794
          $940 = HEAP8[$939 >> 0] | 0; //@line 5795
          if ($940 & 1) {
           label = 119; //@line 5799
           break L28;
          }
          HEAP8[$939 >> 0] = $940 | 1; //@line 5803
          $945 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5805
          HEAP32[$4 >> 2] = $945; //@line 5806
          $946 = $$1202$in$i & 255; //@line 5807
          if (!($946 << 24 >> 24)) {
           $$0$lcssa$i237$i = 0; //@line 5810
          } else {
           $$045$i235$i = $946; //@line 5812
           $$06$i234$i = 0; //@line 5812
           $951 = $945; //@line 5812
           while (1) {
            $$045$i235$i = $$045$i235$i + -1 << 24 >> 24; //@line 5814
            $951$looptemp = $951;
            $951 = $951 + 1 | 0; //@line 5816
            HEAP32[$4 >> 2] = $951; //@line 5817
            $954 = $$06$i234$i << 8 | HEAPU8[$951$looptemp >> 0]; //@line 5820
            if (!($$045$i235$i << 24 >> 24)) {
             $$0$lcssa$i237$i = $954; //@line 5823
             break;
            } else {
             $$06$i234$i = $954; //@line 5826
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 20 >> 2] = $$0$lcssa$i237$i; //@line 5832
          break L44;
          break;
         }
        case 28:
         {
          if (($$1202$i & 65535) > 4) {
           label = 125; //@line 5839
           break L28;
          }
          $960 = (HEAP32[$184 >> 2] | 0) + 1 | 0; //@line 5843
          $961 = HEAP8[$960 >> 0] | 0; //@line 5844
          if ($961 & 2) {
           label = 125; //@line 5848
           break L28;
          }
          HEAP8[$960 >> 0] = $961 | 2; //@line 5852
          $966 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 5854
          HEAP32[$4 >> 2] = $966; //@line 5855
          $967 = $$1202$in$i & 255; //@line 5856
          if (!($967 << 24 >> 24)) {
           $$0$lcssa$i230$i = 0; //@line 5859
          } else {
           $$045$i228$i = $967; //@line 5861
           $$06$i227$i = 0; //@line 5861
           $972 = $966; //@line 5861
           while (1) {
            $$045$i228$i = $$045$i228$i + -1 << 24 >> 24; //@line 5863
            $972$looptemp = $972;
            $972 = $972 + 1 | 0; //@line 5865
            HEAP32[$4 >> 2] = $972; //@line 5866
            $975 = $$06$i227$i << 8 | HEAPU8[$972$looptemp >> 0]; //@line 5869
            if (!($$045$i228$i << 24 >> 24)) {
             $$0$lcssa$i230$i = $975; //@line 5872
             break;
            } else {
             $$06$i227$i = $975; //@line 5875
            }
           }
          }
          HEAP32[(HEAP32[$184 >> 2] | 0) + 24 >> 2] = $$0$lcssa$i230$i; //@line 5881
          break L44;
          break;
         }
        default:
         {
          label = 129; //@line 5886
          break L28;
         }
        }
       } while (0);
       break;
      }
     case 12:
      {
       label = 38; //@line 5894
       break;
      }
     case 11:
      {
       label = 85; //@line 5898
       break;
      }
     default:
      {
       label = 129; //@line 5902
       break L28;
      }
     }
    } while (0);
    if ((label | 0) == 38) {
     label = 0; //@line 5908
     if (($$1202$i & 65535) > 2) {
      label = 40; //@line 5911
      break;
     }
     if ((HEAP32[$76 >> 2] | 0) != -1) {
      label = 40; //@line 5917
      break;
     }
     $313 = $267 + 1 | 0; //@line 5920
     HEAP32[$4 >> 2] = $313; //@line 5921
     $314 = $$1202$in$i & 255; //@line 5922
     if (!($314 << 24 >> 24)) {
      $$0$lcssa$i$i = 0; //@line 5925
     } else {
      $$045$i$i = $314; //@line 5927
      $$06$i$i = 0; //@line 5927
      $319 = $313; //@line 5927
      while (1) {
       $$045$i$i = $$045$i$i + -1 << 24 >> 24; //@line 5929
       $319$looptemp = $319;
       $319 = $319 + 1 | 0; //@line 5931
       HEAP32[$4 >> 2] = $319; //@line 5932
       $322 = $$06$i$i << 8 | HEAPU8[$319$looptemp >> 0]; //@line 5935
       if (!($$045$i$i << 24 >> 24)) {
        $$0$lcssa$i$i = $322; //@line 5938
        break;
       } else {
        $$06$i$i = $322; //@line 5941
       }
      }
     }
     HEAP32[$76 >> 2] = $$0$lcssa$i$i; //@line 5945
    } else if ((label | 0) == 85) {
     label = 0; //@line 5948
     $AsyncCtx79 = _emscripten_alloc_async_context(268, sp) | 0; //@line 5949
     $734 = _sn_coap_parser_options_parse_multiple_options($0, $4, $227, $185, $186, 11, $$1202$i) | 0; //@line 5950
     if (___async) {
      label = 86; //@line 5953
      break;
     }
     _emscripten_free_async_context($AsyncCtx79 | 0); //@line 5956
     if ($734 << 24 >> 24 <= -1) {
      label = 88; //@line 5959
      break;
     }
    }
    $979 = HEAP32[$4 >> 2] | 0; //@line 5963
    $980 = $979 - $181 | 0; //@line 5964
    if (($980 | 0) > ($180 | 0)) {
     break L26;
    } else {
     $$sink275$i = $180 - $980 | 0; //@line 5971
     $1000 = $979; //@line 5971
     $189 = $979; //@line 5971
    }
   }
   switch (label | 0) {
   case 22:
    {
     _mbed_tracef(2, 3737, 4e3, $vararg_buffer7); //@line 5976
     break L26;
     break;
    }
   case 27:
    {
     _mbed_tracef(2, 3737, 4058, $vararg_buffer9); //@line 5981
     break L26;
     break;
    }
   case 32:
    {
     HEAP32[$AsyncCtx63 >> 2] = 51; //@line 5986
     HEAP16[$AsyncCtx63 + 4 >> 1] = $227; //@line 5988
     HEAP32[$AsyncCtx63 + 8 >> 2] = $vararg_buffer27; //@line 5990
     HEAP32[$AsyncCtx63 + 12 >> 2] = $4; //@line 5992
     HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer33; //@line 5994
     HEAP32[$AsyncCtx63 + 20 >> 2] = $vararg_buffer31; //@line 5996
     HEAP32[$AsyncCtx63 + 24 >> 2] = $vararg_buffer27; //@line 5998
     HEAP32[$AsyncCtx63 + 28 >> 2] = $180; //@line 6000
     HEAP32[$AsyncCtx63 + 32 >> 2] = $vararg_buffer33; //@line 6002
     HEAP32[$AsyncCtx63 + 36 >> 2] = $vararg_buffer39; //@line 6004
     HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer21; //@line 6006
     HEAP32[$AsyncCtx63 + 44 >> 2] = $181; //@line 6008
     HEAP32[$AsyncCtx63 + 48 >> 2] = $vararg_buffer11; //@line 6010
     HEAP32[$AsyncCtx63 + 52 >> 2] = $vararg_buffer49; //@line 6012
     HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer11; //@line 6014
     HEAP32[$AsyncCtx63 + 60 >> 2] = $vararg_buffer49; //@line 6016
     HEAP16[$AsyncCtx63 + 64 >> 1] = $$1202$i; //@line 6018
     HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer23; //@line 6020
     HEAP32[$AsyncCtx63 + 72 >> 2] = $4; //@line 6022
     HEAP32[$AsyncCtx63 + 76 >> 2] = $9; //@line 6024
     HEAP32[$AsyncCtx63 + 80 >> 2] = $vararg_buffer17; //@line 6026
     HEAP32[$AsyncCtx63 + 84 >> 2] = $$0208$i; //@line 6028
     HEAP32[$AsyncCtx63 + 88 >> 2] = $vararg_buffer51; //@line 6030
     HEAP32[$AsyncCtx63 + 92 >> 2] = $$1202$in$i; //@line 6032
     HEAP32[$AsyncCtx63 + 96 >> 2] = $vararg_buffer35; //@line 6034
     HEAP32[$AsyncCtx63 + 100 >> 2] = $vararg_buffer55; //@line 6036
     HEAP32[$AsyncCtx63 + 104 >> 2] = $vararg_buffer17; //@line 6038
     HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer55; //@line 6040
     HEAP32[$AsyncCtx63 + 112 >> 2] = $vararg_buffer51; //@line 6042
     HEAP32[$AsyncCtx63 + 116 >> 2] = $vararg_buffer29; //@line 6044
     HEAP32[$AsyncCtx63 + 120 >> 2] = $vararg_buffer39; //@line 6046
     HEAP32[$AsyncCtx63 + 124 >> 2] = $vararg_buffer45; //@line 6048
     HEAP32[$AsyncCtx63 + 128 >> 2] = $0; //@line 6050
     HEAP32[$AsyncCtx63 + 132 >> 2] = $vararg_buffer23; //@line 6052
     HEAP32[$AsyncCtx63 + 136 >> 2] = $vararg_buffer29; //@line 6054
     HEAP32[$AsyncCtx63 + 140 >> 2] = $267; //@line 6056
     HEAP32[$AsyncCtx63 + 144 >> 2] = $vararg_buffer45; //@line 6058
     HEAP32[$AsyncCtx63 + 148 >> 2] = $76; //@line 6060
     HEAP32[$AsyncCtx63 + 152 >> 2] = $vararg_buffer13; //@line 6062
     HEAP32[$AsyncCtx63 + 156 >> 2] = $vararg_buffer7; //@line 6064
     HEAP32[$AsyncCtx63 + 160 >> 2] = $vararg_buffer53; //@line 6066
     HEAP32[$AsyncCtx63 + 164 >> 2] = $vararg_buffer19; //@line 6068
     HEAP32[$AsyncCtx63 + 168 >> 2] = $vararg_buffer47; //@line 6070
     HEAP32[$AsyncCtx63 + 172 >> 2] = $vararg_buffer7; //@line 6072
     HEAP32[$AsyncCtx63 + 176 >> 2] = $vararg_buffer13; //@line 6074
     HEAP32[$AsyncCtx63 + 180 >> 2] = $vararg_buffer41; //@line 6076
     HEAP32[$AsyncCtx63 + 184 >> 2] = $4; //@line 6078
     HEAP32[$AsyncCtx63 + 188 >> 2] = $185; //@line 6080
     HEAP32[$AsyncCtx63 + 192 >> 2] = $vararg_buffer47; //@line 6082
     HEAP32[$AsyncCtx63 + 196 >> 2] = $186; //@line 6084
     HEAP32[$AsyncCtx63 + 200 >> 2] = $vararg_buffer41; //@line 6086
     HEAP32[$AsyncCtx63 + 204 >> 2] = $vararg_buffer35; //@line 6088
     HEAP32[$AsyncCtx63 + 208 >> 2] = $vararg_buffer25; //@line 6090
     HEAP32[$AsyncCtx63 + 212 >> 2] = $vararg_buffer19; //@line 6092
     HEAP32[$AsyncCtx63 + 216 >> 2] = $vararg_buffer37; //@line 6094
     HEAP32[$AsyncCtx63 + 220 >> 2] = $9; //@line 6096
     HEAP32[$AsyncCtx63 + 224 >> 2] = $vararg_buffer43; //@line 6098
     HEAP32[$AsyncCtx63 + 228 >> 2] = $182; //@line 6100
     HEAP32[$AsyncCtx63 + 232 >> 2] = $vararg_buffer9; //@line 6102
     HEAP16[$AsyncCtx63 + 236 >> 1] = $trunc$i; //@line 6104
     HEAP32[$AsyncCtx63 + 240 >> 2] = $vararg_buffer25; //@line 6106
     HEAP32[$AsyncCtx63 + 244 >> 2] = $vararg_buffer43; //@line 6108
     HEAP32[$AsyncCtx63 + 248 >> 2] = $vararg_buffer9; //@line 6110
     HEAP32[$AsyncCtx63 + 252 >> 2] = $vararg_buffer31; //@line 6112
     HEAP32[$AsyncCtx63 + 256 >> 2] = $vararg_buffer21; //@line 6114
     HEAP32[$AsyncCtx63 + 260 >> 2] = $vararg_buffer15; //@line 6116
     HEAP32[$AsyncCtx63 + 264 >> 2] = $0; //@line 6118
     HEAP32[$AsyncCtx63 + 268 >> 2] = $vararg_buffer37; //@line 6120
     HEAP32[$AsyncCtx63 + 272 >> 2] = $184; //@line 6122
     HEAP32[$AsyncCtx63 + 276 >> 2] = $vararg_buffer53; //@line 6124
     HEAP32[$AsyncCtx63 + 280 >> 2] = $184; //@line 6126
     HEAP32[$AsyncCtx63 + 284 >> 2] = $vararg_buffer15; //@line 6128
     sp = STACKTOP; //@line 6129
     STACKTOP = sp; //@line 6130
     return 0; //@line 6130
    }
   case 34:
    {
     _mbed_tracef(2, 3737, 3786, $vararg_buffer11); //@line 6134
     break;
    }
   case 40:
    {
     _mbed_tracef(2, 3737, 4172, $vararg_buffer15); //@line 6138
     break L26;
     break;
    }
   case 45:
    {
     _mbed_tracef(2, 3737, 4241, $vararg_buffer17); //@line 6143
     break L26;
     break;
    }
   case 51:
    {
     _mbed_tracef(2, 3737, 4303, $vararg_buffer19); //@line 6148
     break L26;
     break;
    }
   case 53:
    {
     HEAP32[$AsyncCtx67 >> 2] = 52; //@line 6153
     HEAP32[$AsyncCtx67 + 4 >> 2] = $vararg_buffer27; //@line 6155
     HEAP32[$AsyncCtx67 + 8 >> 2] = $4; //@line 6157
     HEAP32[$AsyncCtx67 + 12 >> 2] = $vararg_buffer33; //@line 6159
     HEAP32[$AsyncCtx67 + 16 >> 2] = $vararg_buffer27; //@line 6161
     HEAP32[$AsyncCtx67 + 20 >> 2] = $180; //@line 6163
     HEAP32[$AsyncCtx67 + 24 >> 2] = $vararg_buffer33; //@line 6165
     HEAP32[$AsyncCtx67 + 28 >> 2] = $vararg_buffer39; //@line 6167
     HEAP32[$AsyncCtx67 + 32 >> 2] = $vararg_buffer21; //@line 6169
     HEAP32[$AsyncCtx67 + 36 >> 2] = $181; //@line 6171
     HEAP32[$AsyncCtx67 + 40 >> 2] = $vararg_buffer11; //@line 6173
     HEAP32[$AsyncCtx67 + 44 >> 2] = $vararg_buffer49; //@line 6175
     HEAP32[$AsyncCtx67 + 48 >> 2] = $vararg_buffer11; //@line 6177
     HEAP32[$AsyncCtx67 + 52 >> 2] = $vararg_buffer49; //@line 6179
     HEAP32[$AsyncCtx67 + 56 >> 2] = $vararg_buffer23; //@line 6181
     HEAP32[$AsyncCtx67 + 60 >> 2] = $4; //@line 6183
     HEAP32[$AsyncCtx67 + 64 >> 2] = $9; //@line 6185
     HEAP32[$AsyncCtx67 + 68 >> 2] = $vararg_buffer17; //@line 6187
     HEAP32[$AsyncCtx67 + 72 >> 2] = $vararg_buffer55; //@line 6189
     HEAP32[$AsyncCtx67 + 76 >> 2] = $vararg_buffer51; //@line 6191
     HEAP32[$AsyncCtx67 + 80 >> 2] = $$0208$i; //@line 6193
     HEAP32[$AsyncCtx67 + 84 >> 2] = $vararg_buffer35; //@line 6195
     HEAP32[$AsyncCtx67 + 88 >> 2] = $vararg_buffer17; //@line 6197
     HEAP32[$AsyncCtx67 + 92 >> 2] = $vararg_buffer55; //@line 6199
     HEAP32[$AsyncCtx67 + 96 >> 2] = $vararg_buffer51; //@line 6201
     HEAP32[$AsyncCtx67 + 100 >> 2] = $vararg_buffer29; //@line 6203
     HEAP32[$AsyncCtx67 + 104 >> 2] = $vararg_buffer39; //@line 6205
     HEAP32[$AsyncCtx67 + 108 >> 2] = $vararg_buffer45; //@line 6207
     HEAP32[$AsyncCtx67 + 112 >> 2] = $0; //@line 6209
     HEAP32[$AsyncCtx67 + 116 >> 2] = $vararg_buffer23; //@line 6211
     HEAP32[$AsyncCtx67 + 120 >> 2] = $vararg_buffer29; //@line 6213
     HEAP32[$AsyncCtx67 + 124 >> 2] = $vararg_buffer45; //@line 6215
     HEAP32[$AsyncCtx67 + 128 >> 2] = $76; //@line 6217
     HEAP32[$AsyncCtx67 + 132 >> 2] = $vararg_buffer13; //@line 6219
     HEAP32[$AsyncCtx67 + 136 >> 2] = $vararg_buffer7; //@line 6221
     HEAP32[$AsyncCtx67 + 140 >> 2] = $vararg_buffer53; //@line 6223
     HEAP32[$AsyncCtx67 + 144 >> 2] = $vararg_buffer19; //@line 6225
     HEAP32[$AsyncCtx67 + 148 >> 2] = $vararg_buffer47; //@line 6227
     HEAP32[$AsyncCtx67 + 152 >> 2] = $vararg_buffer7; //@line 6229
     HEAP32[$AsyncCtx67 + 156 >> 2] = $vararg_buffer13; //@line 6231
     HEAP32[$AsyncCtx67 + 160 >> 2] = $vararg_buffer41; //@line 6233
     HEAP32[$AsyncCtx67 + 164 >> 2] = $4; //@line 6235
     HEAP32[$AsyncCtx67 + 168 >> 2] = $185; //@line 6237
     HEAP32[$AsyncCtx67 + 172 >> 2] = $vararg_buffer47; //@line 6239
     HEAP32[$AsyncCtx67 + 176 >> 2] = $186; //@line 6241
     HEAP32[$AsyncCtx67 + 180 >> 2] = $vararg_buffer41; //@line 6243
     HEAP32[$AsyncCtx67 + 184 >> 2] = $vararg_buffer35; //@line 6245
     HEAP32[$AsyncCtx67 + 188 >> 2] = $vararg_buffer25; //@line 6247
     HEAP32[$AsyncCtx67 + 192 >> 2] = $vararg_buffer19; //@line 6249
     HEAP32[$AsyncCtx67 + 196 >> 2] = $vararg_buffer37; //@line 6251
     HEAP32[$AsyncCtx67 + 200 >> 2] = $9; //@line 6253
     HEAP32[$AsyncCtx67 + 204 >> 2] = $vararg_buffer43; //@line 6255
     HEAP32[$AsyncCtx67 + 208 >> 2] = $182; //@line 6257
     HEAP32[$AsyncCtx67 + 212 >> 2] = $vararg_buffer9; //@line 6259
     HEAP32[$AsyncCtx67 + 216 >> 2] = $vararg_buffer25; //@line 6261
     HEAP32[$AsyncCtx67 + 220 >> 2] = $346; //@line 6263
     HEAP32[$AsyncCtx67 + 224 >> 2] = $vararg_buffer43; //@line 6265
     HEAP32[$AsyncCtx67 + 228 >> 2] = $338; //@line 6267
     HEAP32[$AsyncCtx67 + 232 >> 2] = $vararg_buffer9; //@line 6269
     HEAP32[$AsyncCtx67 + 236 >> 2] = $vararg_buffer31; //@line 6271
     HEAP32[$AsyncCtx67 + 240 >> 2] = $vararg_buffer21; //@line 6273
     HEAP32[$AsyncCtx67 + 244 >> 2] = $vararg_buffer15; //@line 6275
     HEAP32[$AsyncCtx67 + 248 >> 2] = $0; //@line 6277
     HEAP32[$AsyncCtx67 + 252 >> 2] = $vararg_buffer37; //@line 6279
     HEAP32[$AsyncCtx67 + 256 >> 2] = $vararg_buffer31; //@line 6281
     HEAP32[$AsyncCtx67 + 260 >> 2] = $184; //@line 6283
     HEAP32[$AsyncCtx67 + 264 >> 2] = $vararg_buffer53; //@line 6285
     HEAP32[$AsyncCtx67 + 268 >> 2] = $184; //@line 6287
     HEAP32[$AsyncCtx67 + 272 >> 2] = $vararg_buffer15; //@line 6289
     sp = STACKTOP; //@line 6290
     STACKTOP = sp; //@line 6291
     return 0; //@line 6291
    }
   case 55:
    {
     _mbed_tracef(2, 3737, 4367, $vararg_buffer21); //@line 6295
     break L26;
     break;
    }
   case 58:
    {
     HEAP32[$AsyncCtx91 >> 2] = 53; //@line 6300
     HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer27; //@line 6302
     HEAP32[$AsyncCtx91 + 8 >> 2] = $4; //@line 6304
     HEAP32[$AsyncCtx91 + 12 >> 2] = $vararg_buffer33; //@line 6306
     HEAP32[$AsyncCtx91 + 16 >> 2] = $vararg_buffer27; //@line 6308
     HEAP32[$AsyncCtx91 + 20 >> 2] = $180; //@line 6310
     HEAP32[$AsyncCtx91 + 24 >> 2] = $vararg_buffer33; //@line 6312
     HEAP32[$AsyncCtx91 + 28 >> 2] = $vararg_buffer39; //@line 6314
     HEAP32[$AsyncCtx91 + 32 >> 2] = $vararg_buffer21; //@line 6316
     HEAP32[$AsyncCtx91 + 36 >> 2] = $181; //@line 6318
     HEAP32[$AsyncCtx91 + 40 >> 2] = $vararg_buffer11; //@line 6320
     HEAP32[$AsyncCtx91 + 44 >> 2] = $vararg_buffer49; //@line 6322
     HEAP32[$AsyncCtx91 + 48 >> 2] = $vararg_buffer11; //@line 6324
     HEAP32[$AsyncCtx91 + 52 >> 2] = $vararg_buffer49; //@line 6326
     HEAP32[$AsyncCtx91 + 56 >> 2] = $vararg_buffer23; //@line 6328
     HEAP32[$AsyncCtx91 + 60 >> 2] = $4; //@line 6330
     HEAP32[$AsyncCtx91 + 64 >> 2] = $9; //@line 6332
     HEAP32[$AsyncCtx91 + 68 >> 2] = $vararg_buffer17; //@line 6334
     HEAP32[$AsyncCtx91 + 72 >> 2] = $vararg_buffer55; //@line 6336
     HEAP32[$AsyncCtx91 + 76 >> 2] = $vararg_buffer51; //@line 6338
     HEAP32[$AsyncCtx91 + 80 >> 2] = $$0208$i; //@line 6340
     HEAP32[$AsyncCtx91 + 84 >> 2] = $vararg_buffer35; //@line 6342
     HEAP32[$AsyncCtx91 + 88 >> 2] = $vararg_buffer17; //@line 6344
     HEAP32[$AsyncCtx91 + 92 >> 2] = $vararg_buffer55; //@line 6346
     HEAP32[$AsyncCtx91 + 96 >> 2] = $vararg_buffer51; //@line 6348
     HEAP32[$AsyncCtx91 + 100 >> 2] = $vararg_buffer29; //@line 6350
     HEAP32[$AsyncCtx91 + 104 >> 2] = $vararg_buffer39; //@line 6352
     HEAP32[$AsyncCtx91 + 108 >> 2] = $vararg_buffer45; //@line 6354
     HEAP32[$AsyncCtx91 + 112 >> 2] = $0; //@line 6356
     HEAP32[$AsyncCtx91 + 116 >> 2] = $vararg_buffer23; //@line 6358
     HEAP32[$AsyncCtx91 + 120 >> 2] = $vararg_buffer29; //@line 6360
     HEAP32[$AsyncCtx91 + 124 >> 2] = $vararg_buffer45; //@line 6362
     HEAP32[$AsyncCtx91 + 128 >> 2] = $76; //@line 6364
     HEAP32[$AsyncCtx91 + 132 >> 2] = $vararg_buffer13; //@line 6366
     HEAP32[$AsyncCtx91 + 136 >> 2] = $vararg_buffer7; //@line 6368
     HEAP32[$AsyncCtx91 + 140 >> 2] = $vararg_buffer53; //@line 6370
     HEAP32[$AsyncCtx91 + 144 >> 2] = $vararg_buffer19; //@line 6372
     HEAP32[$AsyncCtx91 + 148 >> 2] = $vararg_buffer47; //@line 6374
     HEAP32[$AsyncCtx91 + 152 >> 2] = $vararg_buffer7; //@line 6376
     HEAP32[$AsyncCtx91 + 156 >> 2] = $vararg_buffer13; //@line 6378
     HEAP32[$AsyncCtx91 + 160 >> 2] = $vararg_buffer41; //@line 6380
     HEAP32[$AsyncCtx91 + 164 >> 2] = $4; //@line 6382
     HEAP32[$AsyncCtx91 + 168 >> 2] = $185; //@line 6384
     HEAP32[$AsyncCtx91 + 172 >> 2] = $vararg_buffer47; //@line 6386
     HEAP32[$AsyncCtx91 + 176 >> 2] = $186; //@line 6388
     HEAP32[$AsyncCtx91 + 180 >> 2] = $vararg_buffer41; //@line 6390
     HEAP32[$AsyncCtx91 + 184 >> 2] = $vararg_buffer35; //@line 6392
     HEAP32[$AsyncCtx91 + 188 >> 2] = $vararg_buffer25; //@line 6394
     HEAP32[$AsyncCtx91 + 192 >> 2] = $vararg_buffer19; //@line 6396
     HEAP32[$AsyncCtx91 + 196 >> 2] = $vararg_buffer37; //@line 6398
     HEAP32[$AsyncCtx91 + 200 >> 2] = $9; //@line 6400
     HEAP32[$AsyncCtx91 + 204 >> 2] = $vararg_buffer43; //@line 6402
     HEAP32[$AsyncCtx91 + 208 >> 2] = $182; //@line 6404
     HEAP32[$AsyncCtx91 + 212 >> 2] = $vararg_buffer9; //@line 6406
     HEAP32[$AsyncCtx91 + 216 >> 2] = $vararg_buffer25; //@line 6408
     HEAP32[$AsyncCtx91 + 220 >> 2] = $vararg_buffer43; //@line 6410
     HEAP32[$AsyncCtx91 + 224 >> 2] = $vararg_buffer9; //@line 6412
     HEAP32[$AsyncCtx91 + 228 >> 2] = $vararg_buffer31; //@line 6414
     HEAP32[$AsyncCtx91 + 232 >> 2] = $vararg_buffer21; //@line 6416
     HEAP32[$AsyncCtx91 + 236 >> 2] = $vararg_buffer15; //@line 6418
     HEAP32[$AsyncCtx91 + 240 >> 2] = $0; //@line 6420
     HEAP32[$AsyncCtx91 + 244 >> 2] = $vararg_buffer37; //@line 6422
     HEAP32[$AsyncCtx91 + 248 >> 2] = $vararg_buffer31; //@line 6424
     HEAP32[$AsyncCtx91 + 252 >> 2] = $184; //@line 6426
     HEAP32[$AsyncCtx91 + 256 >> 2] = $vararg_buffer53; //@line 6428
     HEAP32[$AsyncCtx91 + 260 >> 2] = $184; //@line 6430
     HEAP32[$AsyncCtx91 + 264 >> 2] = $vararg_buffer15; //@line 6432
     sp = STACKTOP; //@line 6433
     STACKTOP = sp; //@line 6434
     return 0; //@line 6434
    }
   case 60:
    {
     _mbed_tracef(2, 3737, 4439, $vararg_buffer23); //@line 6438
     break L26;
     break;
    }
   case 63:
    {
     _mbed_tracef(2, 3737, 4498, $vararg_buffer25); //@line 6443
     break L26;
     break;
    }
   case 65:
    {
     HEAP32[$AsyncCtx71 >> 2] = 54; //@line 6448
     HEAP32[$AsyncCtx71 + 4 >> 2] = $vararg_buffer27; //@line 6450
     HEAP32[$AsyncCtx71 + 8 >> 2] = $4; //@line 6452
     HEAP32[$AsyncCtx71 + 12 >> 2] = $vararg_buffer33; //@line 6454
     HEAP32[$AsyncCtx71 + 16 >> 2] = $vararg_buffer27; //@line 6456
     HEAP32[$AsyncCtx71 + 20 >> 2] = $180; //@line 6458
     HEAP32[$AsyncCtx71 + 24 >> 2] = $vararg_buffer33; //@line 6460
     HEAP32[$AsyncCtx71 + 28 >> 2] = $vararg_buffer39; //@line 6462
     HEAP32[$AsyncCtx71 + 32 >> 2] = $vararg_buffer21; //@line 6464
     HEAP32[$AsyncCtx71 + 36 >> 2] = $181; //@line 6466
     HEAP32[$AsyncCtx71 + 40 >> 2] = $vararg_buffer11; //@line 6468
     HEAP32[$AsyncCtx71 + 44 >> 2] = $vararg_buffer49; //@line 6470
     HEAP32[$AsyncCtx71 + 48 >> 2] = $vararg_buffer11; //@line 6472
     HEAP32[$AsyncCtx71 + 52 >> 2] = $vararg_buffer49; //@line 6474
     HEAP32[$AsyncCtx71 + 56 >> 2] = $vararg_buffer23; //@line 6476
     HEAP32[$AsyncCtx71 + 60 >> 2] = $4; //@line 6478
     HEAP32[$AsyncCtx71 + 64 >> 2] = $9; //@line 6480
     HEAP32[$AsyncCtx71 + 68 >> 2] = $vararg_buffer17; //@line 6482
     HEAP32[$AsyncCtx71 + 72 >> 2] = $vararg_buffer55; //@line 6484
     HEAP32[$AsyncCtx71 + 76 >> 2] = $vararg_buffer51; //@line 6486
     HEAP32[$AsyncCtx71 + 80 >> 2] = $$0208$i; //@line 6488
     HEAP32[$AsyncCtx71 + 84 >> 2] = $vararg_buffer35; //@line 6490
     HEAP32[$AsyncCtx71 + 88 >> 2] = $vararg_buffer17; //@line 6492
     HEAP32[$AsyncCtx71 + 92 >> 2] = $vararg_buffer55; //@line 6494
     HEAP32[$AsyncCtx71 + 96 >> 2] = $vararg_buffer51; //@line 6496
     HEAP32[$AsyncCtx71 + 100 >> 2] = $vararg_buffer29; //@line 6498
     HEAP32[$AsyncCtx71 + 104 >> 2] = $vararg_buffer39; //@line 6500
     HEAP32[$AsyncCtx71 + 108 >> 2] = $vararg_buffer45; //@line 6502
     HEAP32[$AsyncCtx71 + 112 >> 2] = $0; //@line 6504
     HEAP32[$AsyncCtx71 + 116 >> 2] = $vararg_buffer23; //@line 6506
     HEAP32[$AsyncCtx71 + 120 >> 2] = $vararg_buffer29; //@line 6508
     HEAP32[$AsyncCtx71 + 124 >> 2] = $vararg_buffer45; //@line 6510
     HEAP32[$AsyncCtx71 + 128 >> 2] = $76; //@line 6512
     HEAP32[$AsyncCtx71 + 132 >> 2] = $vararg_buffer13; //@line 6514
     HEAP32[$AsyncCtx71 + 136 >> 2] = $vararg_buffer7; //@line 6516
     HEAP32[$AsyncCtx71 + 140 >> 2] = $vararg_buffer53; //@line 6518
     HEAP32[$AsyncCtx71 + 144 >> 2] = $vararg_buffer19; //@line 6520
     HEAP32[$AsyncCtx71 + 148 >> 2] = $vararg_buffer47; //@line 6522
     HEAP32[$AsyncCtx71 + 152 >> 2] = $vararg_buffer7; //@line 6524
     HEAP32[$AsyncCtx71 + 156 >> 2] = $vararg_buffer13; //@line 6526
     HEAP32[$AsyncCtx71 + 160 >> 2] = $vararg_buffer41; //@line 6528
     HEAP32[$AsyncCtx71 + 164 >> 2] = $4; //@line 6530
     HEAP32[$AsyncCtx71 + 168 >> 2] = $185; //@line 6532
     HEAP32[$AsyncCtx71 + 172 >> 2] = $vararg_buffer47; //@line 6534
     HEAP32[$AsyncCtx71 + 176 >> 2] = $186; //@line 6536
     HEAP32[$AsyncCtx71 + 180 >> 2] = $vararg_buffer41; //@line 6538
     HEAP32[$AsyncCtx71 + 184 >> 2] = $vararg_buffer35; //@line 6540
     HEAP32[$AsyncCtx71 + 188 >> 2] = $vararg_buffer25; //@line 6542
     HEAP32[$AsyncCtx71 + 192 >> 2] = $vararg_buffer19; //@line 6544
     HEAP32[$AsyncCtx71 + 196 >> 2] = $vararg_buffer37; //@line 6546
     HEAP32[$AsyncCtx71 + 200 >> 2] = $9; //@line 6548
     HEAP32[$AsyncCtx71 + 204 >> 2] = $vararg_buffer43; //@line 6550
     HEAP32[$AsyncCtx71 + 208 >> 2] = $182; //@line 6552
     HEAP32[$AsyncCtx71 + 212 >> 2] = $vararg_buffer9; //@line 6554
     HEAP32[$AsyncCtx71 + 216 >> 2] = $vararg_buffer25; //@line 6556
     HEAP32[$AsyncCtx71 + 220 >> 2] = $vararg_buffer43; //@line 6558
     HEAP32[$AsyncCtx71 + 224 >> 2] = $vararg_buffer9; //@line 6560
     HEAP32[$AsyncCtx71 + 228 >> 2] = $vararg_buffer31; //@line 6562
     HEAP32[$AsyncCtx71 + 232 >> 2] = $vararg_buffer21; //@line 6564
     HEAP32[$AsyncCtx71 + 236 >> 2] = $499; //@line 6566
     HEAP32[$AsyncCtx71 + 240 >> 2] = $vararg_buffer15; //@line 6568
     HEAP32[$AsyncCtx71 + 244 >> 2] = $491; //@line 6570
     HEAP32[$AsyncCtx71 + 248 >> 2] = $0; //@line 6572
     HEAP32[$AsyncCtx71 + 252 >> 2] = $vararg_buffer37; //@line 6574
     HEAP32[$AsyncCtx71 + 256 >> 2] = $vararg_buffer31; //@line 6576
     HEAP32[$AsyncCtx71 + 260 >> 2] = $184; //@line 6578
     HEAP32[$AsyncCtx71 + 264 >> 2] = $vararg_buffer53; //@line 6580
     HEAP32[$AsyncCtx71 + 268 >> 2] = $184; //@line 6582
     HEAP32[$AsyncCtx71 + 272 >> 2] = $vararg_buffer15; //@line 6584
     sp = STACKTOP; //@line 6585
     STACKTOP = sp; //@line 6586
     return 0; //@line 6586
    }
   case 67:
    {
     _mbed_tracef(2, 3737, 4561, $vararg_buffer27); //@line 6590
     break L26;
     break;
    }
   case 70:
    {
     _mbed_tracef(2, 3737, 4632, $vararg_buffer29); //@line 6595
     break L26;
     break;
    }
   case 72:
    {
     HEAP32[$AsyncCtx87 >> 2] = 55; //@line 6600
     HEAP32[$AsyncCtx87 + 4 >> 2] = $vararg_buffer27; //@line 6602
     HEAP32[$AsyncCtx87 + 8 >> 2] = $4; //@line 6604
     HEAP32[$AsyncCtx87 + 12 >> 2] = $vararg_buffer33; //@line 6606
     HEAP32[$AsyncCtx87 + 16 >> 2] = $vararg_buffer27; //@line 6608
     HEAP32[$AsyncCtx87 + 20 >> 2] = $180; //@line 6610
     HEAP32[$AsyncCtx87 + 24 >> 2] = $vararg_buffer33; //@line 6612
     HEAP32[$AsyncCtx87 + 28 >> 2] = $vararg_buffer39; //@line 6614
     HEAP32[$AsyncCtx87 + 32 >> 2] = $vararg_buffer21; //@line 6616
     HEAP32[$AsyncCtx87 + 36 >> 2] = $181; //@line 6618
     HEAP32[$AsyncCtx87 + 40 >> 2] = $vararg_buffer11; //@line 6620
     HEAP32[$AsyncCtx87 + 44 >> 2] = $vararg_buffer49; //@line 6622
     HEAP32[$AsyncCtx87 + 48 >> 2] = $vararg_buffer11; //@line 6624
     HEAP32[$AsyncCtx87 + 52 >> 2] = $vararg_buffer49; //@line 6626
     HEAP32[$AsyncCtx87 + 56 >> 2] = $vararg_buffer23; //@line 6628
     HEAP32[$AsyncCtx87 + 60 >> 2] = $4; //@line 6630
     HEAP32[$AsyncCtx87 + 64 >> 2] = $9; //@line 6632
     HEAP32[$AsyncCtx87 + 68 >> 2] = $vararg_buffer17; //@line 6634
     HEAP32[$AsyncCtx87 + 72 >> 2] = $vararg_buffer55; //@line 6636
     HEAP32[$AsyncCtx87 + 76 >> 2] = $vararg_buffer51; //@line 6638
     HEAP32[$AsyncCtx87 + 80 >> 2] = $$0208$i; //@line 6640
     HEAP32[$AsyncCtx87 + 84 >> 2] = $vararg_buffer35; //@line 6642
     HEAP32[$AsyncCtx87 + 88 >> 2] = $vararg_buffer17; //@line 6644
     HEAP32[$AsyncCtx87 + 92 >> 2] = $vararg_buffer55; //@line 6646
     HEAP32[$AsyncCtx87 + 96 >> 2] = $vararg_buffer51; //@line 6648
     HEAP32[$AsyncCtx87 + 100 >> 2] = $vararg_buffer29; //@line 6650
     HEAP32[$AsyncCtx87 + 104 >> 2] = $vararg_buffer39; //@line 6652
     HEAP32[$AsyncCtx87 + 108 >> 2] = $vararg_buffer45; //@line 6654
     HEAP32[$AsyncCtx87 + 112 >> 2] = $0; //@line 6656
     HEAP32[$AsyncCtx87 + 116 >> 2] = $vararg_buffer23; //@line 6658
     HEAP32[$AsyncCtx87 + 120 >> 2] = $vararg_buffer29; //@line 6660
     HEAP32[$AsyncCtx87 + 124 >> 2] = $vararg_buffer45; //@line 6662
     HEAP32[$AsyncCtx87 + 128 >> 2] = $76; //@line 6664
     HEAP32[$AsyncCtx87 + 132 >> 2] = $vararg_buffer13; //@line 6666
     HEAP32[$AsyncCtx87 + 136 >> 2] = $vararg_buffer7; //@line 6668
     HEAP32[$AsyncCtx87 + 140 >> 2] = $vararg_buffer53; //@line 6670
     HEAP32[$AsyncCtx87 + 144 >> 2] = $vararg_buffer19; //@line 6672
     HEAP32[$AsyncCtx87 + 148 >> 2] = $vararg_buffer47; //@line 6674
     HEAP32[$AsyncCtx87 + 152 >> 2] = $vararg_buffer7; //@line 6676
     HEAP32[$AsyncCtx87 + 156 >> 2] = $vararg_buffer13; //@line 6678
     HEAP32[$AsyncCtx87 + 160 >> 2] = $vararg_buffer41; //@line 6680
     HEAP32[$AsyncCtx87 + 164 >> 2] = $4; //@line 6682
     HEAP32[$AsyncCtx87 + 168 >> 2] = $185; //@line 6684
     HEAP32[$AsyncCtx87 + 172 >> 2] = $vararg_buffer47; //@line 6686
     HEAP32[$AsyncCtx87 + 176 >> 2] = $186; //@line 6688
     HEAP32[$AsyncCtx87 + 180 >> 2] = $vararg_buffer41; //@line 6690
     HEAP32[$AsyncCtx87 + 184 >> 2] = $vararg_buffer35; //@line 6692
     HEAP32[$AsyncCtx87 + 188 >> 2] = $vararg_buffer25; //@line 6694
     HEAP32[$AsyncCtx87 + 192 >> 2] = $vararg_buffer19; //@line 6696
     HEAP32[$AsyncCtx87 + 196 >> 2] = $vararg_buffer37; //@line 6698
     HEAP32[$AsyncCtx87 + 200 >> 2] = $9; //@line 6700
     HEAP32[$AsyncCtx87 + 204 >> 2] = $vararg_buffer43; //@line 6702
     HEAP32[$AsyncCtx87 + 208 >> 2] = $182; //@line 6704
     HEAP32[$AsyncCtx87 + 212 >> 2] = $vararg_buffer9; //@line 6706
     HEAP32[$AsyncCtx87 + 216 >> 2] = $vararg_buffer25; //@line 6708
     HEAP32[$AsyncCtx87 + 220 >> 2] = $vararg_buffer43; //@line 6710
     HEAP32[$AsyncCtx87 + 224 >> 2] = $vararg_buffer9; //@line 6712
     HEAP32[$AsyncCtx87 + 228 >> 2] = $vararg_buffer31; //@line 6714
     HEAP32[$AsyncCtx87 + 232 >> 2] = $vararg_buffer21; //@line 6716
     HEAP32[$AsyncCtx87 + 236 >> 2] = $vararg_buffer15; //@line 6718
     HEAP32[$AsyncCtx87 + 240 >> 2] = $0; //@line 6720
     HEAP32[$AsyncCtx87 + 244 >> 2] = $vararg_buffer37; //@line 6722
     HEAP32[$AsyncCtx87 + 248 >> 2] = $vararg_buffer31; //@line 6724
     HEAP32[$AsyncCtx87 + 252 >> 2] = $184; //@line 6726
     HEAP32[$AsyncCtx87 + 256 >> 2] = $vararg_buffer53; //@line 6728
     HEAP32[$AsyncCtx87 + 260 >> 2] = $184; //@line 6730
     HEAP32[$AsyncCtx87 + 264 >> 2] = $vararg_buffer15; //@line 6732
     sp = STACKTOP; //@line 6733
     STACKTOP = sp; //@line 6734
     return 0; //@line 6734
    }
   case 74:
    {
     _mbed_tracef(2, 3737, 4697, $vararg_buffer31); //@line 6738
     break L26;
     break;
    }
   case 77:
    {
     _mbed_tracef(2, 3737, 4765, $vararg_buffer33); //@line 6743
     break L26;
     break;
    }
   case 82:
    {
     HEAP32[$AsyncCtx83 >> 2] = 56; //@line 6748
     HEAP32[$AsyncCtx83 + 4 >> 2] = $vararg_buffer27; //@line 6750
     HEAP32[$AsyncCtx83 + 8 >> 2] = $4; //@line 6752
     HEAP32[$AsyncCtx83 + 12 >> 2] = $vararg_buffer33; //@line 6754
     HEAP32[$AsyncCtx83 + 16 >> 2] = $vararg_buffer27; //@line 6756
     HEAP32[$AsyncCtx83 + 20 >> 2] = $180; //@line 6758
     HEAP32[$AsyncCtx83 + 24 >> 2] = $vararg_buffer33; //@line 6760
     HEAP32[$AsyncCtx83 + 28 >> 2] = $vararg_buffer39; //@line 6762
     HEAP32[$AsyncCtx83 + 32 >> 2] = $vararg_buffer21; //@line 6764
     HEAP32[$AsyncCtx83 + 36 >> 2] = $181; //@line 6766
     HEAP32[$AsyncCtx83 + 40 >> 2] = $vararg_buffer11; //@line 6768
     HEAP32[$AsyncCtx83 + 44 >> 2] = $vararg_buffer49; //@line 6770
     HEAP32[$AsyncCtx83 + 48 >> 2] = $vararg_buffer11; //@line 6772
     HEAP32[$AsyncCtx83 + 52 >> 2] = $vararg_buffer49; //@line 6774
     HEAP32[$AsyncCtx83 + 56 >> 2] = $vararg_buffer23; //@line 6776
     HEAP32[$AsyncCtx83 + 60 >> 2] = $4; //@line 6778
     HEAP32[$AsyncCtx83 + 64 >> 2] = $9; //@line 6780
     HEAP32[$AsyncCtx83 + 68 >> 2] = $vararg_buffer17; //@line 6782
     HEAP32[$AsyncCtx83 + 72 >> 2] = $vararg_buffer55; //@line 6784
     HEAP32[$AsyncCtx83 + 76 >> 2] = $vararg_buffer51; //@line 6786
     HEAP32[$AsyncCtx83 + 80 >> 2] = $$0208$i; //@line 6788
     HEAP32[$AsyncCtx83 + 84 >> 2] = $vararg_buffer35; //@line 6790
     HEAP32[$AsyncCtx83 + 88 >> 2] = $vararg_buffer17; //@line 6792
     HEAP32[$AsyncCtx83 + 92 >> 2] = $vararg_buffer55; //@line 6794
     HEAP32[$AsyncCtx83 + 96 >> 2] = $vararg_buffer51; //@line 6796
     HEAP32[$AsyncCtx83 + 100 >> 2] = $vararg_buffer29; //@line 6798
     HEAP32[$AsyncCtx83 + 104 >> 2] = $vararg_buffer39; //@line 6800
     HEAP32[$AsyncCtx83 + 108 >> 2] = $vararg_buffer45; //@line 6802
     HEAP32[$AsyncCtx83 + 112 >> 2] = $0; //@line 6804
     HEAP32[$AsyncCtx83 + 116 >> 2] = $vararg_buffer23; //@line 6806
     HEAP32[$AsyncCtx83 + 120 >> 2] = $vararg_buffer29; //@line 6808
     HEAP32[$AsyncCtx83 + 124 >> 2] = $vararg_buffer45; //@line 6810
     HEAP32[$AsyncCtx83 + 128 >> 2] = $76; //@line 6812
     HEAP32[$AsyncCtx83 + 132 >> 2] = $vararg_buffer13; //@line 6814
     HEAP32[$AsyncCtx83 + 136 >> 2] = $vararg_buffer7; //@line 6816
     HEAP32[$AsyncCtx83 + 140 >> 2] = $vararg_buffer53; //@line 6818
     HEAP32[$AsyncCtx83 + 144 >> 2] = $vararg_buffer19; //@line 6820
     HEAP32[$AsyncCtx83 + 148 >> 2] = $vararg_buffer47; //@line 6822
     HEAP32[$AsyncCtx83 + 152 >> 2] = $vararg_buffer7; //@line 6824
     HEAP32[$AsyncCtx83 + 156 >> 2] = $vararg_buffer13; //@line 6826
     HEAP32[$AsyncCtx83 + 160 >> 2] = $vararg_buffer41; //@line 6828
     HEAP32[$AsyncCtx83 + 164 >> 2] = $4; //@line 6830
     HEAP32[$AsyncCtx83 + 168 >> 2] = $185; //@line 6832
     HEAP32[$AsyncCtx83 + 172 >> 2] = $vararg_buffer47; //@line 6834
     HEAP32[$AsyncCtx83 + 176 >> 2] = $186; //@line 6836
     HEAP32[$AsyncCtx83 + 180 >> 2] = $vararg_buffer41; //@line 6838
     HEAP32[$AsyncCtx83 + 184 >> 2] = $vararg_buffer35; //@line 6840
     HEAP32[$AsyncCtx83 + 188 >> 2] = $vararg_buffer25; //@line 6842
     HEAP32[$AsyncCtx83 + 192 >> 2] = $vararg_buffer19; //@line 6844
     HEAP32[$AsyncCtx83 + 196 >> 2] = $vararg_buffer37; //@line 6846
     HEAP32[$AsyncCtx83 + 200 >> 2] = $9; //@line 6848
     HEAP32[$AsyncCtx83 + 204 >> 2] = $vararg_buffer43; //@line 6850
     HEAP32[$AsyncCtx83 + 208 >> 2] = $182; //@line 6852
     HEAP32[$AsyncCtx83 + 212 >> 2] = $vararg_buffer9; //@line 6854
     HEAP32[$AsyncCtx83 + 216 >> 2] = $vararg_buffer25; //@line 6856
     HEAP32[$AsyncCtx83 + 220 >> 2] = $vararg_buffer43; //@line 6858
     HEAP32[$AsyncCtx83 + 224 >> 2] = $vararg_buffer9; //@line 6860
     HEAP32[$AsyncCtx83 + 228 >> 2] = $vararg_buffer31; //@line 6862
     HEAP32[$AsyncCtx83 + 232 >> 2] = $vararg_buffer21; //@line 6864
     HEAP32[$AsyncCtx83 + 236 >> 2] = $vararg_buffer15; //@line 6866
     HEAP32[$AsyncCtx83 + 240 >> 2] = $0; //@line 6868
     HEAP32[$AsyncCtx83 + 244 >> 2] = $vararg_buffer37; //@line 6870
     HEAP32[$AsyncCtx83 + 248 >> 2] = $vararg_buffer31; //@line 6872
     HEAP32[$AsyncCtx83 + 252 >> 2] = $184; //@line 6874
     HEAP32[$AsyncCtx83 + 256 >> 2] = $vararg_buffer53; //@line 6876
     HEAP32[$AsyncCtx83 + 260 >> 2] = $184; //@line 6878
     HEAP32[$AsyncCtx83 + 264 >> 2] = $vararg_buffer15; //@line 6880
     sp = STACKTOP; //@line 6881
     STACKTOP = sp; //@line 6882
     return 0; //@line 6882
    }
   case 84:
    {
     _mbed_tracef(2, 3737, 4828, $vararg_buffer35); //@line 6886
     break L26;
     break;
    }
   case 86:
    {
     HEAP32[$AsyncCtx79 >> 2] = 57; //@line 6891
     HEAP32[$AsyncCtx79 + 4 >> 2] = $vararg_buffer27; //@line 6893
     HEAP32[$AsyncCtx79 + 8 >> 2] = $4; //@line 6895
     HEAP32[$AsyncCtx79 + 12 >> 2] = $vararg_buffer33; //@line 6897
     HEAP32[$AsyncCtx79 + 16 >> 2] = $vararg_buffer27; //@line 6899
     HEAP32[$AsyncCtx79 + 20 >> 2] = $180; //@line 6901
     HEAP32[$AsyncCtx79 + 24 >> 2] = $vararg_buffer33; //@line 6903
     HEAP32[$AsyncCtx79 + 28 >> 2] = $vararg_buffer39; //@line 6905
     HEAP32[$AsyncCtx79 + 32 >> 2] = $vararg_buffer21; //@line 6907
     HEAP32[$AsyncCtx79 + 36 >> 2] = $181; //@line 6909
     HEAP32[$AsyncCtx79 + 40 >> 2] = $vararg_buffer11; //@line 6911
     HEAP32[$AsyncCtx79 + 44 >> 2] = $vararg_buffer49; //@line 6913
     HEAP32[$AsyncCtx79 + 48 >> 2] = $vararg_buffer11; //@line 6915
     HEAP32[$AsyncCtx79 + 52 >> 2] = $vararg_buffer49; //@line 6917
     HEAP32[$AsyncCtx79 + 56 >> 2] = $vararg_buffer23; //@line 6919
     HEAP32[$AsyncCtx79 + 60 >> 2] = $4; //@line 6921
     HEAP32[$AsyncCtx79 + 64 >> 2] = $9; //@line 6923
     HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer17; //@line 6925
     HEAP32[$AsyncCtx79 + 72 >> 2] = $vararg_buffer55; //@line 6927
     HEAP32[$AsyncCtx79 + 76 >> 2] = $vararg_buffer51; //@line 6929
     HEAP32[$AsyncCtx79 + 80 >> 2] = $$0208$i; //@line 6931
     HEAP32[$AsyncCtx79 + 84 >> 2] = $vararg_buffer35; //@line 6933
     HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer17; //@line 6935
     HEAP32[$AsyncCtx79 + 92 >> 2] = $vararg_buffer55; //@line 6937
     HEAP32[$AsyncCtx79 + 96 >> 2] = $vararg_buffer51; //@line 6939
     HEAP32[$AsyncCtx79 + 100 >> 2] = $vararg_buffer29; //@line 6941
     HEAP32[$AsyncCtx79 + 104 >> 2] = $vararg_buffer39; //@line 6943
     HEAP32[$AsyncCtx79 + 108 >> 2] = $vararg_buffer45; //@line 6945
     HEAP32[$AsyncCtx79 + 112 >> 2] = $0; //@line 6947
     HEAP32[$AsyncCtx79 + 116 >> 2] = $vararg_buffer23; //@line 6949
     HEAP32[$AsyncCtx79 + 120 >> 2] = $vararg_buffer29; //@line 6951
     HEAP32[$AsyncCtx79 + 124 >> 2] = $vararg_buffer45; //@line 6953
     HEAP32[$AsyncCtx79 + 128 >> 2] = $76; //@line 6955
     HEAP32[$AsyncCtx79 + 132 >> 2] = $vararg_buffer13; //@line 6957
     HEAP32[$AsyncCtx79 + 136 >> 2] = $vararg_buffer7; //@line 6959
     HEAP32[$AsyncCtx79 + 140 >> 2] = $vararg_buffer53; //@line 6961
     HEAP32[$AsyncCtx79 + 144 >> 2] = $vararg_buffer19; //@line 6963
     HEAP32[$AsyncCtx79 + 148 >> 2] = $vararg_buffer47; //@line 6965
     HEAP32[$AsyncCtx79 + 152 >> 2] = $vararg_buffer7; //@line 6967
     HEAP32[$AsyncCtx79 + 156 >> 2] = $vararg_buffer13; //@line 6969
     HEAP32[$AsyncCtx79 + 160 >> 2] = $vararg_buffer41; //@line 6971
     HEAP32[$AsyncCtx79 + 164 >> 2] = $4; //@line 6973
     HEAP32[$AsyncCtx79 + 168 >> 2] = $185; //@line 6975
     HEAP32[$AsyncCtx79 + 172 >> 2] = $vararg_buffer47; //@line 6977
     HEAP32[$AsyncCtx79 + 176 >> 2] = $186; //@line 6979
     HEAP32[$AsyncCtx79 + 180 >> 2] = $vararg_buffer41; //@line 6981
     HEAP32[$AsyncCtx79 + 184 >> 2] = $vararg_buffer35; //@line 6983
     HEAP32[$AsyncCtx79 + 188 >> 2] = $vararg_buffer25; //@line 6985
     HEAP32[$AsyncCtx79 + 192 >> 2] = $vararg_buffer19; //@line 6987
     HEAP32[$AsyncCtx79 + 196 >> 2] = $vararg_buffer37; //@line 6989
     HEAP32[$AsyncCtx79 + 200 >> 2] = $9; //@line 6991
     HEAP32[$AsyncCtx79 + 204 >> 2] = $vararg_buffer43; //@line 6993
     HEAP32[$AsyncCtx79 + 208 >> 2] = $182; //@line 6995
     HEAP32[$AsyncCtx79 + 212 >> 2] = $vararg_buffer9; //@line 6997
     HEAP32[$AsyncCtx79 + 216 >> 2] = $vararg_buffer25; //@line 6999
     HEAP32[$AsyncCtx79 + 220 >> 2] = $vararg_buffer43; //@line 7001
     HEAP32[$AsyncCtx79 + 224 >> 2] = $vararg_buffer9; //@line 7003
     HEAP32[$AsyncCtx79 + 228 >> 2] = $vararg_buffer31; //@line 7005
     HEAP32[$AsyncCtx79 + 232 >> 2] = $vararg_buffer21; //@line 7007
     HEAP32[$AsyncCtx79 + 236 >> 2] = $vararg_buffer15; //@line 7009
     HEAP32[$AsyncCtx79 + 240 >> 2] = $0; //@line 7011
     HEAP32[$AsyncCtx79 + 244 >> 2] = $vararg_buffer37; //@line 7013
     HEAP32[$AsyncCtx79 + 248 >> 2] = $vararg_buffer31; //@line 7015
     HEAP32[$AsyncCtx79 + 252 >> 2] = $184; //@line 7017
     HEAP32[$AsyncCtx79 + 256 >> 2] = $vararg_buffer53; //@line 7019
     HEAP32[$AsyncCtx79 + 260 >> 2] = $184; //@line 7021
     HEAP32[$AsyncCtx79 + 264 >> 2] = $vararg_buffer15; //@line 7023
     sp = STACKTOP; //@line 7024
     STACKTOP = sp; //@line 7025
     return 0; //@line 7025
    }
   case 88:
    {
     _mbed_tracef(2, 3737, 4897, $vararg_buffer37); //@line 7029
     break L26;
     break;
    }
   case 91:
    {
     _mbed_tracef(2, 3737, 4960, $vararg_buffer39); //@line 7034
     break L26;
     break;
    }
   case 96:
    {
     HEAP32[$AsyncCtx75 >> 2] = 58; //@line 7039
     HEAP32[$AsyncCtx75 + 4 >> 2] = $vararg_buffer27; //@line 7041
     HEAP32[$AsyncCtx75 + 8 >> 2] = $4; //@line 7043
     HEAP32[$AsyncCtx75 + 12 >> 2] = $vararg_buffer33; //@line 7045
     HEAP32[$AsyncCtx75 + 16 >> 2] = $vararg_buffer27; //@line 7047
     HEAP32[$AsyncCtx75 + 20 >> 2] = $180; //@line 7049
     HEAP32[$AsyncCtx75 + 24 >> 2] = $vararg_buffer33; //@line 7051
     HEAP32[$AsyncCtx75 + 28 >> 2] = $vararg_buffer39; //@line 7053
     HEAP32[$AsyncCtx75 + 32 >> 2] = $vararg_buffer21; //@line 7055
     HEAP32[$AsyncCtx75 + 36 >> 2] = $181; //@line 7057
     HEAP32[$AsyncCtx75 + 40 >> 2] = $vararg_buffer11; //@line 7059
     HEAP32[$AsyncCtx75 + 44 >> 2] = $vararg_buffer49; //@line 7061
     HEAP32[$AsyncCtx75 + 48 >> 2] = $vararg_buffer11; //@line 7063
     HEAP32[$AsyncCtx75 + 52 >> 2] = $vararg_buffer49; //@line 7065
     HEAP32[$AsyncCtx75 + 56 >> 2] = $vararg_buffer23; //@line 7067
     HEAP32[$AsyncCtx75 + 60 >> 2] = $4; //@line 7069
     HEAP32[$AsyncCtx75 + 64 >> 2] = $9; //@line 7071
     HEAP32[$AsyncCtx75 + 68 >> 2] = $vararg_buffer17; //@line 7073
     HEAP32[$AsyncCtx75 + 72 >> 2] = $vararg_buffer55; //@line 7075
     HEAP32[$AsyncCtx75 + 76 >> 2] = $vararg_buffer51; //@line 7077
     HEAP32[$AsyncCtx75 + 80 >> 2] = $$0208$i; //@line 7079
     HEAP32[$AsyncCtx75 + 84 >> 2] = $vararg_buffer35; //@line 7081
     HEAP32[$AsyncCtx75 + 88 >> 2] = $vararg_buffer17; //@line 7083
     HEAP32[$AsyncCtx75 + 92 >> 2] = $vararg_buffer55; //@line 7085
     HEAP32[$AsyncCtx75 + 96 >> 2] = $vararg_buffer51; //@line 7087
     HEAP32[$AsyncCtx75 + 100 >> 2] = $vararg_buffer29; //@line 7089
     HEAP32[$AsyncCtx75 + 104 >> 2] = $vararg_buffer39; //@line 7091
     HEAP32[$AsyncCtx75 + 108 >> 2] = $vararg_buffer45; //@line 7093
     HEAP32[$AsyncCtx75 + 112 >> 2] = $0; //@line 7095
     HEAP32[$AsyncCtx75 + 116 >> 2] = $vararg_buffer23; //@line 7097
     HEAP32[$AsyncCtx75 + 120 >> 2] = $vararg_buffer29; //@line 7099
     HEAP32[$AsyncCtx75 + 124 >> 2] = $vararg_buffer45; //@line 7101
     HEAP32[$AsyncCtx75 + 128 >> 2] = $76; //@line 7103
     HEAP32[$AsyncCtx75 + 132 >> 2] = $vararg_buffer13; //@line 7105
     HEAP32[$AsyncCtx75 + 136 >> 2] = $vararg_buffer7; //@line 7107
     HEAP32[$AsyncCtx75 + 140 >> 2] = $vararg_buffer53; //@line 7109
     HEAP32[$AsyncCtx75 + 144 >> 2] = $vararg_buffer19; //@line 7111
     HEAP32[$AsyncCtx75 + 148 >> 2] = $vararg_buffer47; //@line 7113
     HEAP32[$AsyncCtx75 + 152 >> 2] = $vararg_buffer7; //@line 7115
     HEAP32[$AsyncCtx75 + 156 >> 2] = $vararg_buffer13; //@line 7117
     HEAP32[$AsyncCtx75 + 160 >> 2] = $vararg_buffer41; //@line 7119
     HEAP32[$AsyncCtx75 + 164 >> 2] = $4; //@line 7121
     HEAP32[$AsyncCtx75 + 168 >> 2] = $185; //@line 7123
     HEAP32[$AsyncCtx75 + 172 >> 2] = $vararg_buffer47; //@line 7125
     HEAP32[$AsyncCtx75 + 176 >> 2] = $186; //@line 7127
     HEAP32[$AsyncCtx75 + 180 >> 2] = $vararg_buffer41; //@line 7129
     HEAP32[$AsyncCtx75 + 184 >> 2] = $vararg_buffer35; //@line 7131
     HEAP32[$AsyncCtx75 + 188 >> 2] = $vararg_buffer25; //@line 7133
     HEAP32[$AsyncCtx75 + 192 >> 2] = $vararg_buffer19; //@line 7135
     HEAP32[$AsyncCtx75 + 196 >> 2] = $vararg_buffer37; //@line 7137
     HEAP32[$AsyncCtx75 + 200 >> 2] = $9; //@line 7139
     HEAP32[$AsyncCtx75 + 204 >> 2] = $vararg_buffer43; //@line 7141
     HEAP32[$AsyncCtx75 + 208 >> 2] = $182; //@line 7143
     HEAP32[$AsyncCtx75 + 212 >> 2] = $vararg_buffer9; //@line 7145
     HEAP32[$AsyncCtx75 + 216 >> 2] = $vararg_buffer25; //@line 7147
     HEAP32[$AsyncCtx75 + 220 >> 2] = $vararg_buffer43; //@line 7149
     HEAP32[$AsyncCtx75 + 224 >> 2] = $vararg_buffer9; //@line 7151
     HEAP32[$AsyncCtx75 + 228 >> 2] = $vararg_buffer31; //@line 7153
     HEAP32[$AsyncCtx75 + 232 >> 2] = $vararg_buffer21; //@line 7155
     HEAP32[$AsyncCtx75 + 236 >> 2] = $vararg_buffer15; //@line 7157
     HEAP32[$AsyncCtx75 + 240 >> 2] = $0; //@line 7159
     HEAP32[$AsyncCtx75 + 244 >> 2] = $vararg_buffer37; //@line 7161
     HEAP32[$AsyncCtx75 + 248 >> 2] = $vararg_buffer31; //@line 7163
     HEAP32[$AsyncCtx75 + 252 >> 2] = $184; //@line 7165
     HEAP32[$AsyncCtx75 + 256 >> 2] = $vararg_buffer53; //@line 7167
     HEAP32[$AsyncCtx75 + 260 >> 2] = $184; //@line 7169
     HEAP32[$AsyncCtx75 + 264 >> 2] = $vararg_buffer15; //@line 7171
     sp = STACKTOP; //@line 7172
     STACKTOP = sp; //@line 7173
     return 0; //@line 7173
    }
   case 98:
    {
     _mbed_tracef(2, 3737, 5022, $vararg_buffer41); //@line 7177
     break L26;
     break;
    }
   case 101:
    {
     _mbed_tracef(2, 3737, 5086, $vararg_buffer43); //@line 7182
     break L26;
     break;
    }
   case 107:
    {
     _mbed_tracef(2, 3737, 5147, $vararg_buffer45); //@line 7187
     break L26;
     break;
    }
   case 113:
    {
     _mbed_tracef(2, 3737, 5208, $vararg_buffer47); //@line 7192
     break L26;
     break;
    }
   case 119:
    {
     _mbed_tracef(2, 3737, 5269, $vararg_buffer49); //@line 7197
     break L26;
     break;
    }
   case 125:
    {
     _mbed_tracef(2, 3737, 5329, $vararg_buffer51); //@line 7202
     break L26;
     break;
    }
   case 129:
    {
     _mbed_tracef(2, 3737, 5389, $vararg_buffer53); //@line 7207
     break L26;
     break;
    }
   case 132:
    {
     if (($189 - $181 | 0) >= ($180 | 0)) {
      $$0 = $9; //@line 7216
      STACKTOP = sp; //@line 7217
      return $$0 | 0; //@line 7217
     }
     if ((HEAP8[$189 >> 0] | 0) == -1) {
      $990 = $189 + 1 | 0; //@line 7222
      HEAP32[$4 >> 2] = $990; //@line 7223
      $991 = $990; //@line 7224
      $993 = $181 - $991 + $180 | 0; //@line 7226
      HEAP16[$9 + 24 >> 1] = $993; //@line 7229
      if ($993 & 65535 | 0) {
       HEAP32[$9 + 36 >> 2] = $991; //@line 7234
       $$0 = $9; //@line 7235
       STACKTOP = sp; //@line 7236
       return $$0 | 0; //@line 7236
      }
     } else {
      _mbed_tracef(2, 3737, 5436, $vararg_buffer55); //@line 7239
     }
     HEAP32[$9 + 4 >> 2] = 1; //@line 7242
     $$0 = $9; //@line 7243
     STACKTOP = sp; //@line 7244
     return $$0 | 0; //@line 7244
    }
   }
   _mbed_tracef(2, 3737, 4113, $vararg_buffer13); //@line 7248
  }
 } while (0);
 HEAP32[$9 + 4 >> 2] = 1; //@line 7252
 $$0 = $9; //@line 7253
 STACKTOP = sp; //@line 7254
 return $$0 | 0; //@line 7254
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 13165
 STACKTOP = STACKTOP + 16 | 0; //@line 13166
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13166
 $1 = sp; //@line 13167
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 13174
   $7 = $6 >>> 3; //@line 13175
   $8 = HEAP32[2444] | 0; //@line 13176
   $9 = $8 >>> $7; //@line 13177
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 13183
    $16 = 9816 + ($14 << 1 << 2) | 0; //@line 13185
    $17 = $16 + 8 | 0; //@line 13186
    $18 = HEAP32[$17 >> 2] | 0; //@line 13187
    $19 = $18 + 8 | 0; //@line 13188
    $20 = HEAP32[$19 >> 2] | 0; //@line 13189
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[2444] = $8 & ~(1 << $14); //@line 13196
     } else {
      if ((HEAP32[2448] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 13201
      }
      $27 = $20 + 12 | 0; //@line 13204
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 13208
       HEAP32[$17 >> 2] = $20; //@line 13209
       break;
      } else {
       _abort(); //@line 13212
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 13217
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 13220
    $34 = $18 + $30 + 4 | 0; //@line 13222
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 13225
    $$0 = $19; //@line 13226
    STACKTOP = sp; //@line 13227
    return $$0 | 0; //@line 13227
   }
   $37 = HEAP32[2446] | 0; //@line 13229
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 13235
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 13238
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 13241
     $49 = $47 >>> 12 & 16; //@line 13243
     $50 = $47 >>> $49; //@line 13244
     $52 = $50 >>> 5 & 8; //@line 13246
     $54 = $50 >>> $52; //@line 13248
     $56 = $54 >>> 2 & 4; //@line 13250
     $58 = $54 >>> $56; //@line 13252
     $60 = $58 >>> 1 & 2; //@line 13254
     $62 = $58 >>> $60; //@line 13256
     $64 = $62 >>> 1 & 1; //@line 13258
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 13261
     $69 = 9816 + ($67 << 1 << 2) | 0; //@line 13263
     $70 = $69 + 8 | 0; //@line 13264
     $71 = HEAP32[$70 >> 2] | 0; //@line 13265
     $72 = $71 + 8 | 0; //@line 13266
     $73 = HEAP32[$72 >> 2] | 0; //@line 13267
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 13273
       HEAP32[2444] = $77; //@line 13274
       $98 = $77; //@line 13275
      } else {
       if ((HEAP32[2448] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 13280
       }
       $80 = $73 + 12 | 0; //@line 13283
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 13287
        HEAP32[$70 >> 2] = $73; //@line 13288
        $98 = $8; //@line 13289
        break;
       } else {
        _abort(); //@line 13292
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 13297
     $84 = $83 - $6 | 0; //@line 13298
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 13301
     $87 = $71 + $6 | 0; //@line 13302
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 13305
     HEAP32[$71 + $83 >> 2] = $84; //@line 13307
     if ($37 | 0) {
      $92 = HEAP32[2449] | 0; //@line 13310
      $93 = $37 >>> 3; //@line 13311
      $95 = 9816 + ($93 << 1 << 2) | 0; //@line 13313
      $96 = 1 << $93; //@line 13314
      if (!($98 & $96)) {
       HEAP32[2444] = $98 | $96; //@line 13319
       $$0199 = $95; //@line 13321
       $$pre$phiZ2D = $95 + 8 | 0; //@line 13321
      } else {
       $101 = $95 + 8 | 0; //@line 13323
       $102 = HEAP32[$101 >> 2] | 0; //@line 13324
       if ((HEAP32[2448] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 13328
       } else {
        $$0199 = $102; //@line 13331
        $$pre$phiZ2D = $101; //@line 13331
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 13334
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 13336
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 13338
      HEAP32[$92 + 12 >> 2] = $95; //@line 13340
     }
     HEAP32[2446] = $84; //@line 13342
     HEAP32[2449] = $87; //@line 13343
     $$0 = $72; //@line 13344
     STACKTOP = sp; //@line 13345
     return $$0 | 0; //@line 13345
    }
    $108 = HEAP32[2445] | 0; //@line 13347
    if (!$108) {
     $$0197 = $6; //@line 13350
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 13354
     $114 = $112 >>> 12 & 16; //@line 13356
     $115 = $112 >>> $114; //@line 13357
     $117 = $115 >>> 5 & 8; //@line 13359
     $119 = $115 >>> $117; //@line 13361
     $121 = $119 >>> 2 & 4; //@line 13363
     $123 = $119 >>> $121; //@line 13365
     $125 = $123 >>> 1 & 2; //@line 13367
     $127 = $123 >>> $125; //@line 13369
     $129 = $127 >>> 1 & 1; //@line 13371
     $134 = HEAP32[10080 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 13376
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 13380
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 13386
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 13389
      $$0193$lcssa$i = $138; //@line 13389
     } else {
      $$01926$i = $134; //@line 13391
      $$01935$i = $138; //@line 13391
      $146 = $143; //@line 13391
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 13396
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 13397
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 13398
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 13399
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 13405
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 13408
        $$0193$lcssa$i = $$$0193$i; //@line 13408
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 13411
        $$01935$i = $$$0193$i; //@line 13411
       }
      }
     }
     $157 = HEAP32[2448] | 0; //@line 13415
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 13418
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 13421
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 13424
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 13428
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 13430
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 13434
       $176 = HEAP32[$175 >> 2] | 0; //@line 13435
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 13438
        $179 = HEAP32[$178 >> 2] | 0; //@line 13439
        if (!$179) {
         $$3$i = 0; //@line 13442
         break;
        } else {
         $$1196$i = $179; //@line 13445
         $$1198$i = $178; //@line 13445
        }
       } else {
        $$1196$i = $176; //@line 13448
        $$1198$i = $175; //@line 13448
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 13451
        $182 = HEAP32[$181 >> 2] | 0; //@line 13452
        if ($182 | 0) {
         $$1196$i = $182; //@line 13455
         $$1198$i = $181; //@line 13455
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 13458
        $185 = HEAP32[$184 >> 2] | 0; //@line 13459
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 13464
         $$1198$i = $184; //@line 13464
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 13469
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 13472
        $$3$i = $$1196$i; //@line 13473
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 13478
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 13481
       }
       $169 = $167 + 12 | 0; //@line 13484
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 13488
       }
       $172 = $164 + 8 | 0; //@line 13491
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 13495
        HEAP32[$172 >> 2] = $167; //@line 13496
        $$3$i = $164; //@line 13497
        break;
       } else {
        _abort(); //@line 13500
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 13509
       $191 = 10080 + ($190 << 2) | 0; //@line 13510
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 13515
         if (!$$3$i) {
          HEAP32[2445] = $108 & ~(1 << $190); //@line 13521
          break L73;
         }
        } else {
         if ((HEAP32[2448] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 13528
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 13536
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[2448] | 0; //@line 13546
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 13549
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 13553
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 13555
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 13561
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 13565
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 13567
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 13573
       if ($214 | 0) {
        if ((HEAP32[2448] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 13579
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 13583
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 13585
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 13593
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 13596
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 13598
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 13601
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 13605
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 13608
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 13610
      if ($37 | 0) {
       $234 = HEAP32[2449] | 0; //@line 13613
       $235 = $37 >>> 3; //@line 13614
       $237 = 9816 + ($235 << 1 << 2) | 0; //@line 13616
       $238 = 1 << $235; //@line 13617
       if (!($8 & $238)) {
        HEAP32[2444] = $8 | $238; //@line 13622
        $$0189$i = $237; //@line 13624
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 13624
       } else {
        $242 = $237 + 8 | 0; //@line 13626
        $243 = HEAP32[$242 >> 2] | 0; //@line 13627
        if ((HEAP32[2448] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 13631
        } else {
         $$0189$i = $243; //@line 13634
         $$pre$phi$iZ2D = $242; //@line 13634
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 13637
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 13639
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 13641
       HEAP32[$234 + 12 >> 2] = $237; //@line 13643
      }
      HEAP32[2446] = $$0193$lcssa$i; //@line 13645
      HEAP32[2449] = $159; //@line 13646
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 13649
     STACKTOP = sp; //@line 13650
     return $$0 | 0; //@line 13650
    }
   } else {
    $$0197 = $6; //@line 13653
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 13658
   } else {
    $251 = $0 + 11 | 0; //@line 13660
    $252 = $251 & -8; //@line 13661
    $253 = HEAP32[2445] | 0; //@line 13662
    if (!$253) {
     $$0197 = $252; //@line 13665
    } else {
     $255 = 0 - $252 | 0; //@line 13667
     $256 = $251 >>> 8; //@line 13668
     if (!$256) {
      $$0358$i = 0; //@line 13671
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 13675
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 13679
       $262 = $256 << $261; //@line 13680
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 13683
       $267 = $262 << $265; //@line 13685
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 13688
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 13693
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 13699
      }
     }
     $282 = HEAP32[10080 + ($$0358$i << 2) >> 2] | 0; //@line 13703
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 13707
       $$3$i203 = 0; //@line 13707
       $$3350$i = $255; //@line 13707
       label = 81; //@line 13708
      } else {
       $$0342$i = 0; //@line 13715
       $$0347$i = $255; //@line 13715
       $$0353$i = $282; //@line 13715
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 13715
       $$0362$i = 0; //@line 13715
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 13720
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 13725
          $$435113$i = 0; //@line 13725
          $$435712$i = $$0353$i; //@line 13725
          label = 85; //@line 13726
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 13729
          $$1348$i = $292; //@line 13729
         }
        } else {
         $$1343$i = $$0342$i; //@line 13732
         $$1348$i = $$0347$i; //@line 13732
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 13735
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 13738
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 13742
        $302 = ($$0353$i | 0) == 0; //@line 13743
        if ($302) {
         $$2355$i = $$1363$i; //@line 13748
         $$3$i203 = $$1343$i; //@line 13748
         $$3350$i = $$1348$i; //@line 13748
         label = 81; //@line 13749
         break;
        } else {
         $$0342$i = $$1343$i; //@line 13752
         $$0347$i = $$1348$i; //@line 13752
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 13752
         $$0362$i = $$1363$i; //@line 13752
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 13762
       $309 = $253 & ($306 | 0 - $306); //@line 13765
       if (!$309) {
        $$0197 = $252; //@line 13768
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 13773
       $315 = $313 >>> 12 & 16; //@line 13775
       $316 = $313 >>> $315; //@line 13776
       $318 = $316 >>> 5 & 8; //@line 13778
       $320 = $316 >>> $318; //@line 13780
       $322 = $320 >>> 2 & 4; //@line 13782
       $324 = $320 >>> $322; //@line 13784
       $326 = $324 >>> 1 & 2; //@line 13786
       $328 = $324 >>> $326; //@line 13788
       $330 = $328 >>> 1 & 1; //@line 13790
       $$4$ph$i = 0; //@line 13796
       $$4357$ph$i = HEAP32[10080 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 13796
      } else {
       $$4$ph$i = $$3$i203; //@line 13798
       $$4357$ph$i = $$2355$i; //@line 13798
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 13802
       $$4351$lcssa$i = $$3350$i; //@line 13802
      } else {
       $$414$i = $$4$ph$i; //@line 13804
       $$435113$i = $$3350$i; //@line 13804
       $$435712$i = $$4357$ph$i; //@line 13804
       label = 85; //@line 13805
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 13810
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 13814
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 13815
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 13816
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 13817
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 13823
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 13826
        $$4351$lcssa$i = $$$4351$i; //@line 13826
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 13829
        $$435113$i = $$$4351$i; //@line 13829
        label = 85; //@line 13830
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 13836
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[2446] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[2448] | 0; //@line 13842
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 13845
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 13848
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 13851
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 13855
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 13857
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 13861
         $371 = HEAP32[$370 >> 2] | 0; //@line 13862
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 13865
          $374 = HEAP32[$373 >> 2] | 0; //@line 13866
          if (!$374) {
           $$3372$i = 0; //@line 13869
           break;
          } else {
           $$1370$i = $374; //@line 13872
           $$1374$i = $373; //@line 13872
          }
         } else {
          $$1370$i = $371; //@line 13875
          $$1374$i = $370; //@line 13875
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 13878
          $377 = HEAP32[$376 >> 2] | 0; //@line 13879
          if ($377 | 0) {
           $$1370$i = $377; //@line 13882
           $$1374$i = $376; //@line 13882
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 13885
          $380 = HEAP32[$379 >> 2] | 0; //@line 13886
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 13891
           $$1374$i = $379; //@line 13891
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 13896
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 13899
          $$3372$i = $$1370$i; //@line 13900
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 13905
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 13908
         }
         $364 = $362 + 12 | 0; //@line 13911
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 13915
         }
         $367 = $359 + 8 | 0; //@line 13918
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 13922
          HEAP32[$367 >> 2] = $362; //@line 13923
          $$3372$i = $359; //@line 13924
          break;
         } else {
          _abort(); //@line 13927
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 13935
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 13938
         $386 = 10080 + ($385 << 2) | 0; //@line 13939
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 13944
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 13949
            HEAP32[2445] = $391; //@line 13950
            $475 = $391; //@line 13951
            break L164;
           }
          } else {
           if ((HEAP32[2448] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 13958
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 13966
            if (!$$3372$i) {
             $475 = $253; //@line 13969
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[2448] | 0; //@line 13977
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 13980
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 13984
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 13986
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 13992
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 13996
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 13998
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 14004
         if (!$409) {
          $475 = $253; //@line 14007
         } else {
          if ((HEAP32[2448] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 14012
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 14016
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 14018
           $475 = $253; //@line 14019
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 14028
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 14031
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 14033
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 14036
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 14040
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 14043
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 14045
         $428 = $$4351$lcssa$i >>> 3; //@line 14046
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 9816 + ($428 << 1 << 2) | 0; //@line 14050
          $432 = HEAP32[2444] | 0; //@line 14051
          $433 = 1 << $428; //@line 14052
          if (!($432 & $433)) {
           HEAP32[2444] = $432 | $433; //@line 14057
           $$0368$i = $431; //@line 14059
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 14059
          } else {
           $437 = $431 + 8 | 0; //@line 14061
           $438 = HEAP32[$437 >> 2] | 0; //@line 14062
           if ((HEAP32[2448] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 14066
           } else {
            $$0368$i = $438; //@line 14069
            $$pre$phi$i211Z2D = $437; //@line 14069
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 14072
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 14074
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 14076
          HEAP32[$354 + 12 >> 2] = $431; //@line 14078
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 14081
         if (!$444) {
          $$0361$i = 0; //@line 14084
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 14088
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 14092
           $450 = $444 << $449; //@line 14093
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 14096
           $455 = $450 << $453; //@line 14098
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 14101
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 14106
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 14112
          }
         }
         $469 = 10080 + ($$0361$i << 2) | 0; //@line 14115
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 14117
         $471 = $354 + 16 | 0; //@line 14118
         HEAP32[$471 + 4 >> 2] = 0; //@line 14120
         HEAP32[$471 >> 2] = 0; //@line 14121
         $473 = 1 << $$0361$i; //@line 14122
         if (!($475 & $473)) {
          HEAP32[2445] = $475 | $473; //@line 14127
          HEAP32[$469 >> 2] = $354; //@line 14128
          HEAP32[$354 + 24 >> 2] = $469; //@line 14130
          HEAP32[$354 + 12 >> 2] = $354; //@line 14132
          HEAP32[$354 + 8 >> 2] = $354; //@line 14134
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 14143
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 14143
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 14150
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 14154
          $494 = HEAP32[$492 >> 2] | 0; //@line 14156
          if (!$494) {
           label = 136; //@line 14159
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 14162
           $$0345$i = $494; //@line 14162
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[2448] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 14169
          } else {
           HEAP32[$492 >> 2] = $354; //@line 14172
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 14174
           HEAP32[$354 + 12 >> 2] = $354; //@line 14176
           HEAP32[$354 + 8 >> 2] = $354; //@line 14178
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 14183
          $502 = HEAP32[$501 >> 2] | 0; //@line 14184
          $503 = HEAP32[2448] | 0; //@line 14185
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 14191
           HEAP32[$501 >> 2] = $354; //@line 14192
           HEAP32[$354 + 8 >> 2] = $502; //@line 14194
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 14196
           HEAP32[$354 + 24 >> 2] = 0; //@line 14198
           break;
          } else {
           _abort(); //@line 14201
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 14208
       STACKTOP = sp; //@line 14209
       return $$0 | 0; //@line 14209
      } else {
       $$0197 = $252; //@line 14211
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[2446] | 0; //@line 14218
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 14221
  $515 = HEAP32[2449] | 0; //@line 14222
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 14225
   HEAP32[2449] = $517; //@line 14226
   HEAP32[2446] = $514; //@line 14227
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 14230
   HEAP32[$515 + $512 >> 2] = $514; //@line 14232
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 14235
  } else {
   HEAP32[2446] = 0; //@line 14237
   HEAP32[2449] = 0; //@line 14238
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 14241
   $526 = $515 + $512 + 4 | 0; //@line 14243
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 14246
  }
  $$0 = $515 + 8 | 0; //@line 14249
  STACKTOP = sp; //@line 14250
  return $$0 | 0; //@line 14250
 }
 $530 = HEAP32[2447] | 0; //@line 14252
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 14255
  HEAP32[2447] = $532; //@line 14256
  $533 = HEAP32[2450] | 0; //@line 14257
  $534 = $533 + $$0197 | 0; //@line 14258
  HEAP32[2450] = $534; //@line 14259
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 14262
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 14265
  $$0 = $533 + 8 | 0; //@line 14267
  STACKTOP = sp; //@line 14268
  return $$0 | 0; //@line 14268
 }
 if (!(HEAP32[2562] | 0)) {
  HEAP32[2564] = 4096; //@line 14273
  HEAP32[2563] = 4096; //@line 14274
  HEAP32[2565] = -1; //@line 14275
  HEAP32[2566] = -1; //@line 14276
  HEAP32[2567] = 0; //@line 14277
  HEAP32[2555] = 0; //@line 14278
  HEAP32[2562] = $1 & -16 ^ 1431655768; //@line 14282
  $548 = 4096; //@line 14283
 } else {
  $548 = HEAP32[2564] | 0; //@line 14286
 }
 $545 = $$0197 + 48 | 0; //@line 14288
 $546 = $$0197 + 47 | 0; //@line 14289
 $547 = $548 + $546 | 0; //@line 14290
 $549 = 0 - $548 | 0; //@line 14291
 $550 = $547 & $549; //@line 14292
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 14295
  STACKTOP = sp; //@line 14296
  return $$0 | 0; //@line 14296
 }
 $552 = HEAP32[2554] | 0; //@line 14298
 if ($552 | 0) {
  $554 = HEAP32[2552] | 0; //@line 14301
  $555 = $554 + $550 | 0; //@line 14302
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 14307
   STACKTOP = sp; //@line 14308
   return $$0 | 0; //@line 14308
  }
 }
 L244 : do {
  if (!(HEAP32[2555] & 4)) {
   $561 = HEAP32[2450] | 0; //@line 14316
   L246 : do {
    if (!$561) {
     label = 163; //@line 14320
    } else {
     $$0$i$i = 10224; //@line 14322
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 14324
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 14327
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 14336
      if (!$570) {
       label = 163; //@line 14339
       break L246;
      } else {
       $$0$i$i = $570; //@line 14342
      }
     }
     $595 = $547 - $530 & $549; //@line 14346
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 14349
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 14357
       } else {
        $$723947$i = $595; //@line 14359
        $$748$i = $597; //@line 14359
        label = 180; //@line 14360
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 14364
       $$2253$ph$i = $595; //@line 14364
       label = 171; //@line 14365
      }
     } else {
      $$2234243136$i = 0; //@line 14368
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 14374
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 14377
     } else {
      $574 = $572; //@line 14379
      $575 = HEAP32[2563] | 0; //@line 14380
      $576 = $575 + -1 | 0; //@line 14381
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 14389
      $584 = HEAP32[2552] | 0; //@line 14390
      $585 = $$$i + $584 | 0; //@line 14391
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[2554] | 0; //@line 14396
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 14403
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 14407
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 14410
        $$748$i = $572; //@line 14410
        label = 180; //@line 14411
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 14414
        $$2253$ph$i = $$$i; //@line 14414
        label = 171; //@line 14415
       }
      } else {
       $$2234243136$i = 0; //@line 14418
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 14425
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 14434
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 14437
       $$748$i = $$2247$ph$i; //@line 14437
       label = 180; //@line 14438
       break L244;
      }
     }
     $607 = HEAP32[2564] | 0; //@line 14442
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 14446
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 14449
      $$748$i = $$2247$ph$i; //@line 14449
      label = 180; //@line 14450
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 14456
      $$2234243136$i = 0; //@line 14457
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 14461
      $$748$i = $$2247$ph$i; //@line 14461
      label = 180; //@line 14462
      break L244;
     }
    }
   } while (0);
   HEAP32[2555] = HEAP32[2555] | 4; //@line 14469
   $$4236$i = $$2234243136$i; //@line 14470
   label = 178; //@line 14471
  } else {
   $$4236$i = 0; //@line 14473
   label = 178; //@line 14474
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 14480
   $621 = _sbrk(0) | 0; //@line 14481
   $627 = $621 - $620 | 0; //@line 14489
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 14491
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 14499
    $$748$i = $620; //@line 14499
    label = 180; //@line 14500
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[2552] | 0) + $$723947$i | 0; //@line 14506
  HEAP32[2552] = $633; //@line 14507
  if ($633 >>> 0 > (HEAP32[2553] | 0) >>> 0) {
   HEAP32[2553] = $633; //@line 14511
  }
  $636 = HEAP32[2450] | 0; //@line 14513
  do {
   if (!$636) {
    $638 = HEAP32[2448] | 0; //@line 14517
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[2448] = $$748$i; //@line 14522
    }
    HEAP32[2556] = $$748$i; //@line 14524
    HEAP32[2557] = $$723947$i; //@line 14525
    HEAP32[2559] = 0; //@line 14526
    HEAP32[2453] = HEAP32[2562]; //@line 14528
    HEAP32[2452] = -1; //@line 14529
    HEAP32[2457] = 9816; //@line 14530
    HEAP32[2456] = 9816; //@line 14531
    HEAP32[2459] = 9824; //@line 14532
    HEAP32[2458] = 9824; //@line 14533
    HEAP32[2461] = 9832; //@line 14534
    HEAP32[2460] = 9832; //@line 14535
    HEAP32[2463] = 9840; //@line 14536
    HEAP32[2462] = 9840; //@line 14537
    HEAP32[2465] = 9848; //@line 14538
    HEAP32[2464] = 9848; //@line 14539
    HEAP32[2467] = 9856; //@line 14540
    HEAP32[2466] = 9856; //@line 14541
    HEAP32[2469] = 9864; //@line 14542
    HEAP32[2468] = 9864; //@line 14543
    HEAP32[2471] = 9872; //@line 14544
    HEAP32[2470] = 9872; //@line 14545
    HEAP32[2473] = 9880; //@line 14546
    HEAP32[2472] = 9880; //@line 14547
    HEAP32[2475] = 9888; //@line 14548
    HEAP32[2474] = 9888; //@line 14549
    HEAP32[2477] = 9896; //@line 14550
    HEAP32[2476] = 9896; //@line 14551
    HEAP32[2479] = 9904; //@line 14552
    HEAP32[2478] = 9904; //@line 14553
    HEAP32[2481] = 9912; //@line 14554
    HEAP32[2480] = 9912; //@line 14555
    HEAP32[2483] = 9920; //@line 14556
    HEAP32[2482] = 9920; //@line 14557
    HEAP32[2485] = 9928; //@line 14558
    HEAP32[2484] = 9928; //@line 14559
    HEAP32[2487] = 9936; //@line 14560
    HEAP32[2486] = 9936; //@line 14561
    HEAP32[2489] = 9944; //@line 14562
    HEAP32[2488] = 9944; //@line 14563
    HEAP32[2491] = 9952; //@line 14564
    HEAP32[2490] = 9952; //@line 14565
    HEAP32[2493] = 9960; //@line 14566
    HEAP32[2492] = 9960; //@line 14567
    HEAP32[2495] = 9968; //@line 14568
    HEAP32[2494] = 9968; //@line 14569
    HEAP32[2497] = 9976; //@line 14570
    HEAP32[2496] = 9976; //@line 14571
    HEAP32[2499] = 9984; //@line 14572
    HEAP32[2498] = 9984; //@line 14573
    HEAP32[2501] = 9992; //@line 14574
    HEAP32[2500] = 9992; //@line 14575
    HEAP32[2503] = 1e4; //@line 14576
    HEAP32[2502] = 1e4; //@line 14577
    HEAP32[2505] = 10008; //@line 14578
    HEAP32[2504] = 10008; //@line 14579
    HEAP32[2507] = 10016; //@line 14580
    HEAP32[2506] = 10016; //@line 14581
    HEAP32[2509] = 10024; //@line 14582
    HEAP32[2508] = 10024; //@line 14583
    HEAP32[2511] = 10032; //@line 14584
    HEAP32[2510] = 10032; //@line 14585
    HEAP32[2513] = 10040; //@line 14586
    HEAP32[2512] = 10040; //@line 14587
    HEAP32[2515] = 10048; //@line 14588
    HEAP32[2514] = 10048; //@line 14589
    HEAP32[2517] = 10056; //@line 14590
    HEAP32[2516] = 10056; //@line 14591
    HEAP32[2519] = 10064; //@line 14592
    HEAP32[2518] = 10064; //@line 14593
    $642 = $$723947$i + -40 | 0; //@line 14594
    $644 = $$748$i + 8 | 0; //@line 14596
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 14601
    $650 = $$748$i + $649 | 0; //@line 14602
    $651 = $642 - $649 | 0; //@line 14603
    HEAP32[2450] = $650; //@line 14604
    HEAP32[2447] = $651; //@line 14605
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 14608
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 14611
    HEAP32[2451] = HEAP32[2566]; //@line 14613
   } else {
    $$024367$i = 10224; //@line 14615
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 14617
     $658 = $$024367$i + 4 | 0; //@line 14618
     $659 = HEAP32[$658 >> 2] | 0; //@line 14619
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 14623
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 14627
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 14632
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 14646
       $673 = (HEAP32[2447] | 0) + $$723947$i | 0; //@line 14648
       $675 = $636 + 8 | 0; //@line 14650
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 14655
       $681 = $636 + $680 | 0; //@line 14656
       $682 = $673 - $680 | 0; //@line 14657
       HEAP32[2450] = $681; //@line 14658
       HEAP32[2447] = $682; //@line 14659
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 14662
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 14665
       HEAP32[2451] = HEAP32[2566]; //@line 14667
       break;
      }
     }
    }
    $688 = HEAP32[2448] | 0; //@line 14672
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[2448] = $$748$i; //@line 14675
     $753 = $$748$i; //@line 14676
    } else {
     $753 = $688; //@line 14678
    }
    $690 = $$748$i + $$723947$i | 0; //@line 14680
    $$124466$i = 10224; //@line 14681
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 14686
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 14690
     if (!$694) {
      $$0$i$i$i = 10224; //@line 14693
      break;
     } else {
      $$124466$i = $694; //@line 14696
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 14705
      $700 = $$124466$i + 4 | 0; //@line 14706
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 14709
      $704 = $$748$i + 8 | 0; //@line 14711
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 14717
      $712 = $690 + 8 | 0; //@line 14719
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 14725
      $722 = $710 + $$0197 | 0; //@line 14729
      $723 = $718 - $710 - $$0197 | 0; //@line 14730
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 14733
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[2447] | 0) + $723 | 0; //@line 14738
        HEAP32[2447] = $728; //@line 14739
        HEAP32[2450] = $722; //@line 14740
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 14743
       } else {
        if ((HEAP32[2449] | 0) == ($718 | 0)) {
         $734 = (HEAP32[2446] | 0) + $723 | 0; //@line 14749
         HEAP32[2446] = $734; //@line 14750
         HEAP32[2449] = $722; //@line 14751
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 14754
         HEAP32[$722 + $734 >> 2] = $734; //@line 14756
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 14760
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 14764
         $743 = $739 >>> 3; //@line 14765
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 14770
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 14772
           $750 = 9816 + ($743 << 1 << 2) | 0; //@line 14774
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 14780
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 14789
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[2444] = HEAP32[2444] & ~(1 << $743); //@line 14799
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 14806
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 14810
             }
             $764 = $748 + 8 | 0; //@line 14813
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 14817
              break;
             }
             _abort(); //@line 14820
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 14825
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 14826
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 14829
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 14831
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 14835
             $783 = $782 + 4 | 0; //@line 14836
             $784 = HEAP32[$783 >> 2] | 0; //@line 14837
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 14840
              if (!$786) {
               $$3$i$i = 0; //@line 14843
               break;
              } else {
               $$1291$i$i = $786; //@line 14846
               $$1293$i$i = $782; //@line 14846
              }
             } else {
              $$1291$i$i = $784; //@line 14849
              $$1293$i$i = $783; //@line 14849
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 14852
              $789 = HEAP32[$788 >> 2] | 0; //@line 14853
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 14856
               $$1293$i$i = $788; //@line 14856
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 14859
              $792 = HEAP32[$791 >> 2] | 0; //@line 14860
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 14865
               $$1293$i$i = $791; //@line 14865
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 14870
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 14873
              $$3$i$i = $$1291$i$i; //@line 14874
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 14879
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 14882
             }
             $776 = $774 + 12 | 0; //@line 14885
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 14889
             }
             $779 = $771 + 8 | 0; //@line 14892
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 14896
              HEAP32[$779 >> 2] = $774; //@line 14897
              $$3$i$i = $771; //@line 14898
              break;
             } else {
              _abort(); //@line 14901
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 14911
           $798 = 10080 + ($797 << 2) | 0; //@line 14912
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 14917
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[2445] = HEAP32[2445] & ~(1 << $797); //@line 14926
             break L311;
            } else {
             if ((HEAP32[2448] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 14932
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 14940
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[2448] | 0; //@line 14950
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 14953
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 14957
           $815 = $718 + 16 | 0; //@line 14958
           $816 = HEAP32[$815 >> 2] | 0; //@line 14959
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 14965
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 14969
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 14971
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 14977
           if (!$822) {
            break;
           }
           if ((HEAP32[2448] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 14985
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 14989
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 14991
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 14998
         $$0287$i$i = $742 + $723 | 0; //@line 14998
        } else {
         $$0$i17$i = $718; //@line 15000
         $$0287$i$i = $723; //@line 15000
        }
        $830 = $$0$i17$i + 4 | 0; //@line 15002
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 15005
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 15008
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 15010
        $836 = $$0287$i$i >>> 3; //@line 15011
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 9816 + ($836 << 1 << 2) | 0; //@line 15015
         $840 = HEAP32[2444] | 0; //@line 15016
         $841 = 1 << $836; //@line 15017
         do {
          if (!($840 & $841)) {
           HEAP32[2444] = $840 | $841; //@line 15023
           $$0295$i$i = $839; //@line 15025
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 15025
          } else {
           $845 = $839 + 8 | 0; //@line 15027
           $846 = HEAP32[$845 >> 2] | 0; //@line 15028
           if ((HEAP32[2448] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 15032
            $$pre$phi$i19$iZ2D = $845; //@line 15032
            break;
           }
           _abort(); //@line 15035
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 15039
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 15041
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 15043
         HEAP32[$722 + 12 >> 2] = $839; //@line 15045
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 15048
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 15052
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 15056
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 15061
          $858 = $852 << $857; //@line 15062
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 15065
          $863 = $858 << $861; //@line 15067
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 15070
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 15075
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 15081
         }
        } while (0);
        $877 = 10080 + ($$0296$i$i << 2) | 0; //@line 15084
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 15086
        $879 = $722 + 16 | 0; //@line 15087
        HEAP32[$879 + 4 >> 2] = 0; //@line 15089
        HEAP32[$879 >> 2] = 0; //@line 15090
        $881 = HEAP32[2445] | 0; //@line 15091
        $882 = 1 << $$0296$i$i; //@line 15092
        if (!($881 & $882)) {
         HEAP32[2445] = $881 | $882; //@line 15097
         HEAP32[$877 >> 2] = $722; //@line 15098
         HEAP32[$722 + 24 >> 2] = $877; //@line 15100
         HEAP32[$722 + 12 >> 2] = $722; //@line 15102
         HEAP32[$722 + 8 >> 2] = $722; //@line 15104
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 15113
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 15113
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 15120
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 15124
         $902 = HEAP32[$900 >> 2] | 0; //@line 15126
         if (!$902) {
          label = 260; //@line 15129
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 15132
          $$0289$i$i = $902; //@line 15132
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[2448] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 15139
         } else {
          HEAP32[$900 >> 2] = $722; //@line 15142
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 15144
          HEAP32[$722 + 12 >> 2] = $722; //@line 15146
          HEAP32[$722 + 8 >> 2] = $722; //@line 15148
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 15153
         $910 = HEAP32[$909 >> 2] | 0; //@line 15154
         $911 = HEAP32[2448] | 0; //@line 15155
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 15161
          HEAP32[$909 >> 2] = $722; //@line 15162
          HEAP32[$722 + 8 >> 2] = $910; //@line 15164
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 15166
          HEAP32[$722 + 24 >> 2] = 0; //@line 15168
          break;
         } else {
          _abort(); //@line 15171
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 15178
      STACKTOP = sp; //@line 15179
      return $$0 | 0; //@line 15179
     } else {
      $$0$i$i$i = 10224; //@line 15181
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 15185
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 15190
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 15198
    }
    $927 = $923 + -47 | 0; //@line 15200
    $929 = $927 + 8 | 0; //@line 15202
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 15208
    $936 = $636 + 16 | 0; //@line 15209
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 15211
    $939 = $938 + 8 | 0; //@line 15212
    $940 = $938 + 24 | 0; //@line 15213
    $941 = $$723947$i + -40 | 0; //@line 15214
    $943 = $$748$i + 8 | 0; //@line 15216
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 15221
    $949 = $$748$i + $948 | 0; //@line 15222
    $950 = $941 - $948 | 0; //@line 15223
    HEAP32[2450] = $949; //@line 15224
    HEAP32[2447] = $950; //@line 15225
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 15228
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 15231
    HEAP32[2451] = HEAP32[2566]; //@line 15233
    $956 = $938 + 4 | 0; //@line 15234
    HEAP32[$956 >> 2] = 27; //@line 15235
    HEAP32[$939 >> 2] = HEAP32[2556]; //@line 15236
    HEAP32[$939 + 4 >> 2] = HEAP32[2557]; //@line 15236
    HEAP32[$939 + 8 >> 2] = HEAP32[2558]; //@line 15236
    HEAP32[$939 + 12 >> 2] = HEAP32[2559]; //@line 15236
    HEAP32[2556] = $$748$i; //@line 15237
    HEAP32[2557] = $$723947$i; //@line 15238
    HEAP32[2559] = 0; //@line 15239
    HEAP32[2558] = $939; //@line 15240
    $958 = $940; //@line 15241
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 15243
     HEAP32[$958 >> 2] = 7; //@line 15244
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 15257
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 15260
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 15263
     HEAP32[$938 >> 2] = $964; //@line 15264
     $969 = $964 >>> 3; //@line 15265
     if ($964 >>> 0 < 256) {
      $972 = 9816 + ($969 << 1 << 2) | 0; //@line 15269
      $973 = HEAP32[2444] | 0; //@line 15270
      $974 = 1 << $969; //@line 15271
      if (!($973 & $974)) {
       HEAP32[2444] = $973 | $974; //@line 15276
       $$0211$i$i = $972; //@line 15278
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 15278
      } else {
       $978 = $972 + 8 | 0; //@line 15280
       $979 = HEAP32[$978 >> 2] | 0; //@line 15281
       if ((HEAP32[2448] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 15285
       } else {
        $$0211$i$i = $979; //@line 15288
        $$pre$phi$i$iZ2D = $978; //@line 15288
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 15291
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 15293
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 15295
      HEAP32[$636 + 12 >> 2] = $972; //@line 15297
      break;
     }
     $985 = $964 >>> 8; //@line 15300
     if (!$985) {
      $$0212$i$i = 0; //@line 15303
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 15307
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 15311
       $991 = $985 << $990; //@line 15312
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 15315
       $996 = $991 << $994; //@line 15317
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 15320
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 15325
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 15331
      }
     }
     $1010 = 10080 + ($$0212$i$i << 2) | 0; //@line 15334
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 15336
     HEAP32[$636 + 20 >> 2] = 0; //@line 15338
     HEAP32[$936 >> 2] = 0; //@line 15339
     $1013 = HEAP32[2445] | 0; //@line 15340
     $1014 = 1 << $$0212$i$i; //@line 15341
     if (!($1013 & $1014)) {
      HEAP32[2445] = $1013 | $1014; //@line 15346
      HEAP32[$1010 >> 2] = $636; //@line 15347
      HEAP32[$636 + 24 >> 2] = $1010; //@line 15349
      HEAP32[$636 + 12 >> 2] = $636; //@line 15351
      HEAP32[$636 + 8 >> 2] = $636; //@line 15353
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 15362
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 15362
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 15369
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 15373
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 15375
      if (!$1034) {
       label = 286; //@line 15378
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 15381
       $$0207$i$i = $1034; //@line 15381
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[2448] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 15388
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 15391
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 15393
       HEAP32[$636 + 12 >> 2] = $636; //@line 15395
       HEAP32[$636 + 8 >> 2] = $636; //@line 15397
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 15402
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 15403
      $1043 = HEAP32[2448] | 0; //@line 15404
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 15410
       HEAP32[$1041 >> 2] = $636; //@line 15411
       HEAP32[$636 + 8 >> 2] = $1042; //@line 15413
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 15415
       HEAP32[$636 + 24 >> 2] = 0; //@line 15417
       break;
      } else {
       _abort(); //@line 15420
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[2447] | 0; //@line 15427
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 15430
   HEAP32[2447] = $1054; //@line 15431
   $1055 = HEAP32[2450] | 0; //@line 15432
   $1056 = $1055 + $$0197 | 0; //@line 15433
   HEAP32[2450] = $1056; //@line 15434
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 15437
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 15440
   $$0 = $1055 + 8 | 0; //@line 15442
   STACKTOP = sp; //@line 15443
   return $$0 | 0; //@line 15443
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 15447
 $$0 = 0; //@line 15448
 STACKTOP = sp; //@line 15449
 return $$0 | 0; //@line 15449
}
function _sn_coap_builder_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$120$129$i$i = 0, $$120$129$i14$i = 0, $$120$129$i23$i = 0, $$120$129$i32$i = 0, $$120$129$i41$i = 0, $$120$129$i5$i = 0, $$120$129$i50$i = 0, $$120$129$i59$i = 0, $$120$129$i68$i = 0, $$120$232$i$i = 0, $$120$232$i16$i = 0, $$120$232$i25$i = 0, $$120$232$i34$i = 0, $$120$232$i43$i = 0, $$120$232$i52$i = 0, $$120$232$i61$i = 0, $$120$232$i7$i = 0, $$120$232$i70$i = 0, $$120$3$i$i = 0, $$120$3$i17$i = 0, $$120$3$i26$i = 0, $$120$3$i35$i = 0, $$120$3$i44$i = 0, $$120$3$i53$i = 0, $$120$3$i62$i = 0, $$120$3$i71$i = 0, $$120$3$i8$i = 0, $$12026$i$i = 0, $$12026$i12$i = 0, $$12026$i21$i = 0, $$12026$i3$i = 0, $$12026$i30$i = 0, $$12026$i39$i = 0, $$12026$i48$i = 0, $$12026$i57$i = 0, $$12026$i66$i = 0, $$cast = 0, $$sink13$i = 0, $$sink13$i70 = 0, $$sink63$i = 0, $$sink63$i69 = 0, $$sink7$i = 0, $$sink7$i106 = 0, $$sink7$i16 = 0, $$sink7$i24 = 0, $$sink7$i34 = 0, $$sink7$i44 = 0, $$sink7$i54 = 0, $$sink7$i76 = 0, $$sink7$i86 = 0, $$sink7$i96 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $107 = 0, $111 = 0, $117 = 0, $119 = 0, $128 = 0, $13 = 0, $137 = 0, $142 = 0, $143 = 0, $165 = 0, $166 = 0, $17 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $180 = 0, $184 = 0, $190 = 0, $192 = 0, $201 = 0, $21 = 0, $210 = 0, $215 = 0, $216 = 0, $238 = 0, $242 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $256 = 0, $260 = 0, $266 = 0, $268 = 0, $277 = 0, $286 = 0, $291 = 0, $292 = 0, $3 = 0, $313 = 0, $316 = 0, $32 = 0, $323 = 0, $324 = 0, $326 = 0, $327 = 0, $330 = 0, $334 = 0, $340 = 0, $342 = 0, $351 = 0, $360 = 0, $365 = 0, $366 = 0, $388 = 0, $39 = 0, $390 = 0, $392 = 0, $399 = 0, $4 = 0, $400 = 0, $402 = 0, $403 = 0, $406 = 0, $410 = 0, $416 = 0, $418 = 0, $42 = 0, $427 = 0, $436 = 0, $441 = 0, $442 = 0, $464 = 0, $467 = 0, $469 = 0, $476 = 0, $477 = 0, $479 = 0, $480 = 0, $483 = 0, $487 = 0, $493 = 0, $495 = 0, $5 = 0, $504 = 0, $513 = 0, $518 = 0, $519 = 0, $54 = 0, $541 = 0, $542 = 0, $549 = 0, $55 = 0, $551 = 0, $552 = 0, $556 = 0, $560 = 0, $566 = 0, $568 = 0, $577 = 0, $58 = 0, $586 = 0, $591 = 0, $592 = 0, $61 = 0, $614 = 0, $619 = 0, $62 = 0, $625 = 0, $627 = 0, $628 = 0, $63 = 0, $632 = 0, $636 = 0, $64 = 0, $642 = 0, $644 = 0, $653 = 0, $662 = 0, $667 = 0, $668 = 0, $67 = 0, $69 = 0, $690 = 0, $691 = 0, $693 = 0, $695 = 0, $697 = 0, $698 = 0, $703 = 0, $707 = 0, $71 = 0, $713 = 0, $715 = 0, $724 = 0, $733 = 0, $737 = 0, $742 = 0, $744 = 0, $745 = 0, $748 = 0, $753 = 0, $759 = 0, $761 = 0, $762 = 0, $766 = 0, $77 = 0, $770 = 0, $776 = 0, $778 = 0, $787 = 0, $796 = 0, $8 = 0, $801 = 0, $802 = 0, $81 = 0, $823 = 0, $826 = 0, $831 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1293
 STACKTOP = STACKTOP + 48 | 0; //@line 1294
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1294
 $vararg_buffer5 = sp + 24 | 0; //@line 1295
 $3 = sp + 36 | 0; //@line 1299
 $4 = sp + 32 | 0; //@line 1300
 $5 = sp + 28 | 0; //@line 1301
 HEAP32[$5 >> 2] = $0; //@line 1302
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$1 = -2; //@line 1307
  STACKTOP = sp; //@line 1308
  return $$1 | 0; //@line 1308
 }
 $8 = _sn_coap_builder_calc_needed_packet_data_size_2($1, 0) | 0; //@line 1310
 if (!($8 << 16 >> 16)) {
  _mbed_tracef(2, 3737, 2532, sp); //@line 1313
  $$1 = -1; //@line 1314
  STACKTOP = sp; //@line 1315
  return $$1 | 0; //@line 1315
 }
 _memset($0 | 0, 0, $8 & 65535 | 0) | 0; //@line 1318
 $$cast = $0; //@line 1319
 if ((_sn_coap_header_validity_check($1, 64) | 0) << 24 >> 24) {
  _mbed_tracef(2, 3737, 2580, sp + 8 | 0); //@line 1323
  _mbed_tracef(2, 3737, 2632, sp + 16 | 0); //@line 1324
  $$1 = -1; //@line 1325
  STACKTOP = sp; //@line 1326
  return $$1 | 0; //@line 1326
 }
 $13 = HEAP8[$0 >> 0] | 0; //@line 1328
 HEAP8[$0 >> 0] = ($13 & 255) + 64; //@line 1332
 $17 = $1 + 12 | 0; //@line 1333
 $21 = (HEAP32[$17 >> 2] | 0) + ($13 + 64 & 255) | 0; //@line 1337
 HEAP8[$0 >> 0] = $21; //@line 1339
 HEAP8[$0 >> 0] = $21 + (HEAPU8[$1 >> 0] | 0); //@line 1344
 HEAP8[$0 + 1 >> 0] = HEAP32[$1 + 8 >> 2]; //@line 1349
 $32 = $1 + 20 | 0; //@line 1351
 HEAP8[$0 + 2 >> 0] = (HEAPU16[$32 >> 1] | 0) >>> 8; //@line 1355
 HEAP8[$0 + 3 >> 0] = HEAP16[$32 >> 1]; //@line 1359
 $39 = $0 + 4 | 0; //@line 1360
 HEAP32[$5 >> 2] = $39; //@line 1361
 if ((HEAP32[$17 >> 2] | 0) != 48) {
  $42 = $1 + 32 | 0; //@line 1365
  if (!(HEAP32[$42 >> 2] | 0)) {
   if (!(HEAP32[$1 + 28 >> 2] | 0)) {
    if ((HEAP32[$1 + 16 >> 2] | 0) == -1) {
     if (!(HEAP32[$1 + 40 >> 2] | 0)) {
      _mbed_tracef(2, 3737, 2676, $vararg_buffer5); //@line 1381
     } else {
      label = 12; //@line 1383
     }
    } else {
     label = 12; //@line 1386
    }
   } else {
    label = 12; //@line 1389
   }
  } else {
   label = 12; //@line 1392
  }
  if ((label | 0) == 12) {
   $54 = HEAP8[$1 >> 0] | 0; //@line 1395
   $55 = $54 & 255; //@line 1396
   if (!($54 << 24 >> 24)) {
    $61 = 0; //@line 1399
   } else {
    $58 = HEAP32[$1 + 28 >> 2] | 0; //@line 1402
    if (!$58) {
     $61 = $54; //@line 1405
    } else {
     _memcpy($39 | 0, $58 | 0, $55 | 0) | 0; //@line 1407
     $61 = HEAP8[$1 >> 0] | 0; //@line 1409
    }
   }
   $62 = $39 + ($61 & 255) | 0; //@line 1413
   HEAP32[$5 >> 2] = $62; //@line 1414
   HEAP16[$4 >> 1] = 0; //@line 1415
   $63 = $1 + 40 | 0; //@line 1416
   $64 = HEAP32[$63 >> 2] | 0; //@line 1417
   if ($64 | 0) {
    $67 = HEAP16[$64 + 4 >> 1] | 0; //@line 1421
    $69 = HEAP32[$64 + 52 >> 2] | 0; //@line 1423
    if (!$69) {
     $90 = $64; //@line 1426
    } else {
     $71 = $67 & 65535; //@line 1428
     HEAP8[$62 >> 0] = (($67 & 65535) < 13 ? $67 & 65535 : ($67 & 65535) < 269 ? 13 : 14) + 48; //@line 1436
     $77 = $62 + 1 | 0; //@line 1437
     HEAP32[$5 >> 2] = $77; //@line 1438
     if (($67 + -13 & 65535) < 256) {
      $$sink13$i70 = 1; //@line 1443
      $$sink63$i69 = $71 + 243 | 0; //@line 1443
      label = 21; //@line 1444
     } else {
      if (($67 & 65535) > 268) {
       $81 = $71 + -269 | 0; //@line 1448
       HEAP8[$62 + 2 >> 0] = $81; //@line 1451
       $$sink13$i70 = 2; //@line 1453
       $$sink63$i69 = $81 >>> 8; //@line 1453
       label = 21; //@line 1454
      } else {
       $87 = $77; //@line 1456
      }
     }
     if ((label | 0) == 21) {
      HEAP8[$77 >> 0] = $$sink63$i69; //@line 1461
      $86 = $77 + $$sink13$i70 | 0; //@line 1462
      HEAP32[$5 >> 2] = $86; //@line 1463
      $87 = $86; //@line 1464
     }
     HEAP16[$4 >> 1] = 3; //@line 1466
     _memcpy($87 | 0, $69 | 0, $71 | 0) | 0; //@line 1467
     HEAP32[$5 >> 2] = $87 + $71; //@line 1469
     $90 = HEAP32[$63 >> 2] | 0; //@line 1471
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $90 + 48 | 0, $90, 4, $4); //@line 1474
    $91 = HEAP32[$63 >> 2] | 0; //@line 1475
    $93 = HEAP32[$91 + 32 >> 2] | 0; //@line 1477
    if (($93 | 0) == -1) {
     $165 = $91; //@line 1480
    } else {
     if ($93 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $93 >>> 24; //@line 1486
      $$12026$i$i = 1; //@line 1487
      label = 35; //@line 1488
     } else {
      if ($93 << 8 >>> 0 > 16777215) {
       $$12026$i$i = 0; //@line 1493
       label = 35; //@line 1494
      } else {
       if ($93 << 16 >>> 0 > 16777215) {
        $$120$129$i$i = 0; //@line 1499
        label = 37; //@line 1500
       } else {
        if ($93 << 24 >>> 0 > 16777215) {
         $$120$232$i$i = 0; //@line 1505
         label = 39; //@line 1506
        } else {
         $$120$3$i$i = 0; //@line 1508
        }
       }
      }
     }
     if ((label | 0) == 35) {
      HEAP8[$3 + ($$12026$i$i & 255) >> 0] = $93 >>> 16; //@line 1519
      $$120$129$i$i = $$12026$i$i + 1 << 24 >> 24; //@line 1520
      label = 37; //@line 1521
     }
     if ((label | 0) == 37) {
      HEAP8[$3 + ($$120$129$i$i & 255) >> 0] = $93 >>> 8; //@line 1529
      $$120$232$i$i = $$120$129$i$i + 1 << 24 >> 24; //@line 1530
      label = 39; //@line 1531
     }
     if ((label | 0) == 39) {
      HEAP8[$3 + ($$120$232$i$i & 255) >> 0] = $93; //@line 1538
      $$120$3$i$i = $$120$232$i$i + 1 << 24 >> 24; //@line 1539
     }
     $100 = $$120$3$i$i & 255; //@line 1541
     $101 = HEAP16[$4 >> 1] | 0; //@line 1542
     $103 = 6 - ($101 & 65535) | 0; //@line 1544
     $104 = $$120$3$i$i & 255; //@line 1545
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i$i & 255) < 13 ? $$120$3$i$i : 13; //@line 1549
     $107 = 6 - $101 << 16 >> 16; //@line 1550
     do {
      if (($107 & 65535) < 13) {
       $111 = HEAP32[$5 >> 2] | 0; //@line 1556
       HEAP8[$111 >> 0] = (($107 & 65535) << 4) + (HEAPU8[$111 >> 0] | 0); //@line 1561
       $$sink7$i96 = 1; //@line 1562
      } else {
       $117 = HEAP32[$5 >> 2] | 0; //@line 1565
       $119 = HEAPU8[$117 >> 0] | 0; //@line 1567
       if (($107 & 65535) < 269) {
        HEAP8[$117 >> 0] = $119 + 208; //@line 1571
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $103 + 243; //@line 1576
        $$sink7$i96 = 2; //@line 1577
        break;
       } else {
        HEAP8[$117 >> 0] = $119 + 224; //@line 1582
        $128 = $103 + 65267 | 0; //@line 1583
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $128; //@line 1587
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $128 >>> 8; //@line 1592
        $$sink7$i96 = 3; //@line 1593
        break;
       }
      }
     } while (0);
     $137 = (HEAP32[$5 >> 2] | 0) + $$sink7$i96 | 0; //@line 1599
     HEAP32[$5 >> 2] = $137; //@line 1600
     if (($100 + -13 & 65535) < 256) {
      HEAP8[$137 >> 0] = $104 + 243; //@line 1606
      $142 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1608
      HEAP32[$5 >> 2] = $142; //@line 1609
      $143 = $142; //@line 1610
     } else {
      $143 = $137; //@line 1612
     }
     HEAP16[$4 >> 1] = 6; //@line 1614
     _memcpy($143 | 0, $3 | 0, $104 | 0) | 0; //@line 1615
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $104; //@line 1618
     $165 = HEAP32[$63 >> 2] | 0; //@line 1620
    }
    $166 = HEAP32[$165 + 28 >> 2] | 0; //@line 1623
    if (($166 | 0) == -1) {
     $238 = $165; //@line 1626
    } else {
     if ($166 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $166 >>> 24; //@line 1632
      $$12026$i3$i = 1; //@line 1633
      label = 52; //@line 1634
     } else {
      if ($166 << 8 >>> 0 > 16777215) {
       $$12026$i3$i = 0; //@line 1639
       label = 52; //@line 1640
      } else {
       if ($166 << 16 >>> 0 > 16777215) {
        $$120$129$i5$i = 0; //@line 1645
        label = 54; //@line 1646
       } else {
        if ($166 << 24 >>> 0 > 16777215) {
         $$120$232$i7$i = 0; //@line 1651
         label = 56; //@line 1652
        } else {
         $$120$3$i8$i = 0; //@line 1654
        }
       }
      }
     }
     if ((label | 0) == 52) {
      HEAP8[$3 + ($$12026$i3$i & 255) >> 0] = $166 >>> 16; //@line 1665
      $$120$129$i5$i = $$12026$i3$i + 1 << 24 >> 24; //@line 1666
      label = 54; //@line 1667
     }
     if ((label | 0) == 54) {
      HEAP8[$3 + ($$120$129$i5$i & 255) >> 0] = $166 >>> 8; //@line 1675
      $$120$232$i7$i = $$120$129$i5$i + 1 << 24 >> 24; //@line 1676
      label = 56; //@line 1677
     }
     if ((label | 0) == 56) {
      HEAP8[$3 + ($$120$232$i7$i & 255) >> 0] = $166; //@line 1684
      $$120$3$i8$i = $$120$232$i7$i + 1 << 24 >> 24; //@line 1685
     }
     $173 = $$120$3$i8$i & 255; //@line 1687
     $174 = HEAP16[$4 >> 1] | 0; //@line 1688
     $176 = 7 - ($174 & 65535) | 0; //@line 1690
     $177 = $$120$3$i8$i & 255; //@line 1691
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i8$i & 255) < 13 ? $$120$3$i8$i : 13; //@line 1695
     $180 = 7 - $174 << 16 >> 16; //@line 1696
     do {
      if (($180 & 65535) < 13) {
       $184 = HEAP32[$5 >> 2] | 0; //@line 1702
       HEAP8[$184 >> 0] = (($180 & 65535) << 4) + (HEAPU8[$184 >> 0] | 0); //@line 1707
       $$sink7$i106 = 1; //@line 1708
      } else {
       $190 = HEAP32[$5 >> 2] | 0; //@line 1711
       $192 = HEAPU8[$190 >> 0] | 0; //@line 1713
       if (($180 & 65535) < 269) {
        HEAP8[$190 >> 0] = $192 + 208; //@line 1717
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $176 + 243; //@line 1722
        $$sink7$i106 = 2; //@line 1723
        break;
       } else {
        HEAP8[$190 >> 0] = $192 + 224; //@line 1728
        $201 = $176 + 65267 | 0; //@line 1729
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $201; //@line 1733
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $201 >>> 8; //@line 1738
        $$sink7$i106 = 3; //@line 1739
        break;
       }
      }
     } while (0);
     $210 = (HEAP32[$5 >> 2] | 0) + $$sink7$i106 | 0; //@line 1745
     HEAP32[$5 >> 2] = $210; //@line 1746
     if (($173 + -13 & 65535) < 256) {
      HEAP8[$210 >> 0] = $177 + 243; //@line 1752
      $215 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1754
      HEAP32[$5 >> 2] = $215; //@line 1755
      $216 = $215; //@line 1756
     } else {
      $216 = $210; //@line 1758
     }
     HEAP16[$4 >> 1] = 7; //@line 1760
     _memcpy($216 | 0, $3 | 0, $177 | 0) | 0; //@line 1761
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $177; //@line 1764
     $238 = HEAP32[$63 >> 2] | 0; //@line 1766
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $238 + 56 | 0, $238 + 6 | 0, 8, $4); //@line 1770
   }
   _sn_coap_builder_options_build_add_multiple_option($5, $42, $1 + 22 | 0, 11, $4); //@line 1773
   $242 = HEAP32[$1 + 16 >> 2] | 0; //@line 1775
   if (($242 | 0) != -1) {
    if ($242 >>> 0 > 16777215) {
     HEAP8[$3 >> 0] = $242 >>> 24; //@line 1782
     $$12026$i12$i = 1; //@line 1783
     label = 70; //@line 1784
    } else {
     if ($242 << 8 >>> 0 > 16777215) {
      $$12026$i12$i = 0; //@line 1789
      label = 70; //@line 1790
     } else {
      if ($242 << 16 >>> 0 > 16777215) {
       $$120$129$i14$i = 0; //@line 1795
       label = 72; //@line 1796
      } else {
       if ($242 << 24 >>> 0 > 16777215) {
        $$120$232$i16$i = 0; //@line 1801
        label = 74; //@line 1802
       } else {
        $$120$3$i17$i = 0; //@line 1804
       }
      }
     }
    }
    if ((label | 0) == 70) {
     HEAP8[$3 + ($$12026$i12$i & 255) >> 0] = $242 >>> 16; //@line 1815
     $$120$129$i14$i = $$12026$i12$i + 1 << 24 >> 24; //@line 1816
     label = 72; //@line 1817
    }
    if ((label | 0) == 72) {
     HEAP8[$3 + ($$120$129$i14$i & 255) >> 0] = $242 >>> 8; //@line 1825
     $$120$232$i16$i = $$120$129$i14$i + 1 << 24 >> 24; //@line 1826
     label = 74; //@line 1827
    }
    if ((label | 0) == 74) {
     HEAP8[$3 + ($$120$232$i16$i & 255) >> 0] = $242; //@line 1834
     $$120$3$i17$i = $$120$232$i16$i + 1 << 24 >> 24; //@line 1835
    }
    $249 = $$120$3$i17$i & 255; //@line 1837
    $250 = HEAP16[$4 >> 1] | 0; //@line 1838
    $252 = 12 - ($250 & 65535) | 0; //@line 1840
    $253 = $$120$3$i17$i & 255; //@line 1841
    HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i17$i & 255) < 13 ? $$120$3$i17$i : 13; //@line 1845
    $256 = 12 - $250 << 16 >> 16; //@line 1846
    do {
     if (($256 & 65535) < 13) {
      $260 = HEAP32[$5 >> 2] | 0; //@line 1852
      HEAP8[$260 >> 0] = (($256 & 65535) << 4) + (HEAPU8[$260 >> 0] | 0); //@line 1857
      $$sink7$i86 = 1; //@line 1858
     } else {
      $266 = HEAP32[$5 >> 2] | 0; //@line 1861
      $268 = HEAPU8[$266 >> 0] | 0; //@line 1863
      if (($256 & 65535) < 269) {
       HEAP8[$266 >> 0] = $268 + 208; //@line 1867
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $252 + 243; //@line 1872
       $$sink7$i86 = 2; //@line 1873
       break;
      } else {
       HEAP8[$266 >> 0] = $268 + 224; //@line 1878
       $277 = $252 + 65267 | 0; //@line 1879
       HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $277; //@line 1883
       HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $277 >>> 8; //@line 1888
       $$sink7$i86 = 3; //@line 1889
       break;
      }
     }
    } while (0);
    $286 = (HEAP32[$5 >> 2] | 0) + $$sink7$i86 | 0; //@line 1895
    HEAP32[$5 >> 2] = $286; //@line 1896
    if (($249 + -13 & 65535) < 256) {
     HEAP8[$286 >> 0] = $253 + 243; //@line 1902
     $291 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 1904
     HEAP32[$5 >> 2] = $291; //@line 1905
     $292 = $291; //@line 1906
    } else {
     $292 = $286; //@line 1908
    }
    HEAP16[$4 >> 1] = 12; //@line 1910
    _memcpy($292 | 0, $3 | 0, $253 | 0) | 0; //@line 1911
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $253; //@line 1914
   }
   $313 = HEAP32[$63 >> 2] | 0; //@line 1916
   if ($313 | 0) {
    $316 = HEAP32[$313 + 16 >> 2] | 0; //@line 1920
    if (($316 | 0) == 60) {
     $388 = $313; //@line 1923
    } else {
     if ($316 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $316 >>> 24; //@line 1929
      $$12026$i21$i = 1; //@line 1930
      label = 88; //@line 1931
     } else {
      if ($316 << 8 >>> 0 > 16777215) {
       $$12026$i21$i = 0; //@line 1936
       label = 88; //@line 1937
      } else {
       if ($316 << 16 >>> 0 > 16777215) {
        $$120$129$i23$i = 0; //@line 1942
        label = 90; //@line 1943
       } else {
        if ($316 << 24 >>> 0 > 16777215) {
         $$120$232$i25$i = 0; //@line 1948
         label = 92; //@line 1949
        } else {
         $$120$3$i26$i = 0; //@line 1951
        }
       }
      }
     }
     if ((label | 0) == 88) {
      HEAP8[$3 + ($$12026$i21$i & 255) >> 0] = $316 >>> 16; //@line 1962
      $$120$129$i23$i = $$12026$i21$i + 1 << 24 >> 24; //@line 1963
      label = 90; //@line 1964
     }
     if ((label | 0) == 90) {
      HEAP8[$3 + ($$120$129$i23$i & 255) >> 0] = $316 >>> 8; //@line 1972
      $$120$232$i25$i = $$120$129$i23$i + 1 << 24 >> 24; //@line 1973
      label = 92; //@line 1974
     }
     if ((label | 0) == 92) {
      HEAP8[$3 + ($$120$232$i25$i & 255) >> 0] = $316; //@line 1981
      $$120$3$i26$i = $$120$232$i25$i + 1 << 24 >> 24; //@line 1982
     }
     $323 = $$120$3$i26$i & 255; //@line 1984
     $324 = HEAP16[$4 >> 1] | 0; //@line 1985
     $326 = 14 - ($324 & 65535) | 0; //@line 1987
     $327 = $$120$3$i26$i & 255; //@line 1988
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i26$i & 255) < 13 ? $$120$3$i26$i : 13; //@line 1992
     $330 = 14 - $324 << 16 >> 16; //@line 1993
     do {
      if (($330 & 65535) < 13) {
       $334 = HEAP32[$5 >> 2] | 0; //@line 1999
       HEAP8[$334 >> 0] = (($330 & 65535) << 4) + (HEAPU8[$334 >> 0] | 0); //@line 2004
       $$sink7$i76 = 1; //@line 2005
      } else {
       $340 = HEAP32[$5 >> 2] | 0; //@line 2008
       $342 = HEAPU8[$340 >> 0] | 0; //@line 2010
       if (($330 & 65535) < 269) {
        HEAP8[$340 >> 0] = $342 + 208; //@line 2014
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $326 + 243; //@line 2019
        $$sink7$i76 = 2; //@line 2020
        break;
       } else {
        HEAP8[$340 >> 0] = $342 + 224; //@line 2025
        $351 = $326 + 65267 | 0; //@line 2026
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $351; //@line 2030
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $351 >>> 8; //@line 2035
        $$sink7$i76 = 3; //@line 2036
        break;
       }
      }
     } while (0);
     $360 = (HEAP32[$5 >> 2] | 0) + $$sink7$i76 | 0; //@line 2042
     HEAP32[$5 >> 2] = $360; //@line 2043
     if (($323 + -13 & 65535) < 256) {
      HEAP8[$360 >> 0] = $327 + 243; //@line 2049
      $365 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2051
      HEAP32[$5 >> 2] = $365; //@line 2052
      $366 = $365; //@line 2053
     } else {
      $366 = $360; //@line 2055
     }
     HEAP16[$4 >> 1] = 14; //@line 2057
     _memcpy($366 | 0, $3 | 0, $327 | 0) | 0; //@line 2058
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $327; //@line 2061
     $388 = HEAP32[$63 >> 2] | 0; //@line 2063
    }
    _sn_coap_builder_options_build_add_multiple_option($5, $388 + 64 | 0, $388 + 10 | 0, 15, $4); //@line 2067
    $390 = HEAP32[$63 >> 2] | 0; //@line 2068
    $392 = HEAP32[$390 + 12 >> 2] | 0; //@line 2070
    if (($392 | 0) == -1) {
     $464 = $390; //@line 2073
    } else {
     if ($392 >>> 0 > 16777215) {
      HEAP8[$3 >> 0] = $392 >>> 24; //@line 2079
      $$12026$i30$i = 1; //@line 2080
      label = 105; //@line 2081
     } else {
      if ($392 << 8 >>> 0 > 16777215) {
       $$12026$i30$i = 0; //@line 2086
       label = 105; //@line 2087
      } else {
       if ($392 << 16 >>> 0 > 16777215) {
        $$120$129$i32$i = 0; //@line 2092
        label = 107; //@line 2093
       } else {
        if ($392 << 24 >>> 0 > 16777215) {
         $$120$232$i34$i = 0; //@line 2098
         label = 109; //@line 2099
        } else {
         $$120$3$i35$i = 0; //@line 2101
        }
       }
      }
     }
     if ((label | 0) == 105) {
      HEAP8[$3 + ($$12026$i30$i & 255) >> 0] = $392 >>> 16; //@line 2112
      $$120$129$i32$i = $$12026$i30$i + 1 << 24 >> 24; //@line 2113
      label = 107; //@line 2114
     }
     if ((label | 0) == 107) {
      HEAP8[$3 + ($$120$129$i32$i & 255) >> 0] = $392 >>> 8; //@line 2122
      $$120$232$i34$i = $$120$129$i32$i + 1 << 24 >> 24; //@line 2123
      label = 109; //@line 2124
     }
     if ((label | 0) == 109) {
      HEAP8[$3 + ($$120$232$i34$i & 255) >> 0] = $392; //@line 2131
      $$120$3$i35$i = $$120$232$i34$i + 1 << 24 >> 24; //@line 2132
     }
     $399 = $$120$3$i35$i & 255; //@line 2134
     $400 = HEAP16[$4 >> 1] | 0; //@line 2135
     $402 = 17 - ($400 & 65535) | 0; //@line 2137
     $403 = $$120$3$i35$i & 255; //@line 2138
     HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i35$i & 255) < 13 ? $$120$3$i35$i : 13; //@line 2142
     $406 = 17 - $400 << 16 >> 16; //@line 2143
     do {
      if (($406 & 65535) < 13) {
       $410 = HEAP32[$5 >> 2] | 0; //@line 2149
       HEAP8[$410 >> 0] = (($406 & 65535) << 4) + (HEAPU8[$410 >> 0] | 0); //@line 2154
       $$sink7$i54 = 1; //@line 2155
      } else {
       $416 = HEAP32[$5 >> 2] | 0; //@line 2158
       $418 = HEAPU8[$416 >> 0] | 0; //@line 2160
       if (($406 & 65535) < 269) {
        HEAP8[$416 >> 0] = $418 + 208; //@line 2164
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $402 + 243; //@line 2169
        $$sink7$i54 = 2; //@line 2170
        break;
       } else {
        HEAP8[$416 >> 0] = $418 + 224; //@line 2175
        $427 = $402 + 65267 | 0; //@line 2176
        HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $427; //@line 2180
        HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $427 >>> 8; //@line 2185
        $$sink7$i54 = 3; //@line 2186
        break;
       }
      }
     } while (0);
     $436 = (HEAP32[$5 >> 2] | 0) + $$sink7$i54 | 0; //@line 2192
     HEAP32[$5 >> 2] = $436; //@line 2193
     if (($399 + -13 & 65535) < 256) {
      HEAP8[$436 >> 0] = $403 + 243; //@line 2199
      $441 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2201
      HEAP32[$5 >> 2] = $441; //@line 2202
      $442 = $441; //@line 2203
     } else {
      $442 = $436; //@line 2205
     }
     HEAP16[$4 >> 1] = 17; //@line 2207
     _memcpy($442 | 0, $3 | 0, $403 | 0) | 0; //@line 2208
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $403; //@line 2211
     $464 = HEAP32[$63 >> 2] | 0; //@line 2213
    }
    if ($464 | 0) {
     _sn_coap_builder_options_build_add_multiple_option($5, $464 + 60 | 0, $464 + 8 | 0, 20, $4); //@line 2219
     $467 = HEAP32[$63 >> 2] | 0; //@line 2220
     $469 = HEAP32[$467 + 40 >> 2] | 0; //@line 2222
     if (($469 | 0) == -1) {
      $541 = $467; //@line 2225
     } else {
      do {
       if ($469 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $469 >>> 24; //@line 2232
        $$12026$i39$i = 1; //@line 2233
        label = 123; //@line 2234
       } else {
        if ($469 << 8 >>> 0 > 16777215) {
         $$12026$i39$i = 0; //@line 2239
         label = 123; //@line 2240
        } else {
         if ($469 << 16 >>> 0 > 16777215) {
          $$120$129$i41$i = 0; //@line 2245
          label = 125; //@line 2246
          break;
         }
         if ($469 << 24 >>> 0 > 16777215) {
          $$120$232$i43$i = 0; //@line 2252
          label = 127; //@line 2253
         } else {
          $$120$3$i44$i = 0; //@line 2255
         }
        }
       }
      } while (0);
      if ((label | 0) == 123) {
       HEAP8[$3 + ($$12026$i39$i & 255) >> 0] = $469 >>> 16; //@line 2266
       $$120$129$i41$i = $$12026$i39$i + 1 << 24 >> 24; //@line 2267
       label = 125; //@line 2268
      }
      if ((label | 0) == 125) {
       HEAP8[$3 + ($$120$129$i41$i & 255) >> 0] = $469 >>> 8; //@line 2276
       $$120$232$i43$i = $$120$129$i41$i + 1 << 24 >> 24; //@line 2277
       label = 127; //@line 2278
      }
      if ((label | 0) == 127) {
       HEAP8[$3 + ($$120$232$i43$i & 255) >> 0] = $469; //@line 2285
       $$120$3$i44$i = $$120$232$i43$i + 1 << 24 >> 24; //@line 2286
      }
      $476 = $$120$3$i44$i & 255; //@line 2288
      $477 = HEAP16[$4 >> 1] | 0; //@line 2289
      $479 = 23 - ($477 & 65535) | 0; //@line 2291
      $480 = $$120$3$i44$i & 255; //@line 2292
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i44$i & 255) < 13 ? $$120$3$i44$i : 13; //@line 2296
      $483 = 23 - $477 << 16 >> 16; //@line 2297
      do {
       if (($483 & 65535) < 13) {
        $487 = HEAP32[$5 >> 2] | 0; //@line 2303
        HEAP8[$487 >> 0] = (($483 & 65535) << 4) + (HEAPU8[$487 >> 0] | 0); //@line 2308
        $$sink7$i44 = 1; //@line 2309
       } else {
        $493 = HEAP32[$5 >> 2] | 0; //@line 2312
        $495 = HEAPU8[$493 >> 0] | 0; //@line 2314
        if (($483 & 65535) < 269) {
         HEAP8[$493 >> 0] = $495 + 208; //@line 2318
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $479 + 243; //@line 2323
         $$sink7$i44 = 2; //@line 2324
         break;
        } else {
         HEAP8[$493 >> 0] = $495 + 224; //@line 2329
         $504 = $479 + 65267 | 0; //@line 2330
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $504; //@line 2334
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $504 >>> 8; //@line 2339
         $$sink7$i44 = 3; //@line 2340
         break;
        }
       }
      } while (0);
      $513 = (HEAP32[$5 >> 2] | 0) + $$sink7$i44 | 0; //@line 2346
      HEAP32[$5 >> 2] = $513; //@line 2347
      if (($476 + -13 & 65535) < 256) {
       HEAP8[$513 >> 0] = $480 + 243; //@line 2353
       $518 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2355
       HEAP32[$5 >> 2] = $518; //@line 2356
       $519 = $518; //@line 2357
      } else {
       $519 = $513; //@line 2359
      }
      HEAP16[$4 >> 1] = 23; //@line 2361
      _memcpy($519 | 0, $3 | 0, $480 | 0) | 0; //@line 2362
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $480; //@line 2365
      $541 = HEAP32[$63 >> 2] | 0; //@line 2367
     }
     $542 = HEAP32[$541 + 36 >> 2] | 0; //@line 2370
     if (($542 | 0) == -1) {
      $614 = $541; //@line 2373
     } else {
      do {
       if ($542 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $542 >>> 24; //@line 2380
        $$12026$i48$i = 1; //@line 2381
        label = 140; //@line 2382
       } else {
        if ($542 << 8 >>> 0 > 16777215) {
         $$12026$i48$i = 0; //@line 2387
         label = 140; //@line 2388
         break;
        }
        if ($542 << 16 >>> 0 > 16777215) {
         $$120$129$i50$i = 0; //@line 2394
         label = 142; //@line 2395
         break;
        }
        if ($542 << 24 >>> 0 > 16777215) {
         $$120$232$i52$i = 0; //@line 2401
         label = 144; //@line 2402
        } else {
         $$120$3$i53$i = 0; //@line 2404
        }
       }
      } while (0);
      if ((label | 0) == 140) {
       HEAP8[$3 + ($$12026$i48$i & 255) >> 0] = $542 >>> 16; //@line 2414
       $$120$129$i50$i = $$12026$i48$i + 1 << 24 >> 24; //@line 2415
       label = 142; //@line 2416
      }
      if ((label | 0) == 142) {
       HEAP8[$3 + ($$120$129$i50$i & 255) >> 0] = $542 >>> 8; //@line 2424
       $$120$232$i52$i = $$120$129$i50$i + 1 << 24 >> 24; //@line 2425
       label = 144; //@line 2426
      }
      if ((label | 0) == 144) {
       HEAP8[$3 + ($$120$232$i52$i & 255) >> 0] = $542; //@line 2433
       $$120$3$i53$i = $$120$232$i52$i + 1 & 255; //@line 2435
      }
      $549 = HEAP16[$4 >> 1] | 0; //@line 2437
      $551 = 27 - ($549 & 65535) | 0; //@line 2439
      $552 = $$120$3$i53$i & 65535; //@line 2440
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i53$i & 65535) < 13 ? $$120$3$i53$i : 13; //@line 2445
      $556 = 27 - $549 << 16 >> 16; //@line 2446
      do {
       if (($556 & 65535) < 13) {
        $560 = HEAP32[$5 >> 2] | 0; //@line 2452
        HEAP8[$560 >> 0] = (($556 & 65535) << 4) + (HEAPU8[$560 >> 0] | 0); //@line 2457
        $$sink7$i34 = 1; //@line 2458
       } else {
        $566 = HEAP32[$5 >> 2] | 0; //@line 2461
        $568 = HEAPU8[$566 >> 0] | 0; //@line 2463
        if (($556 & 65535) < 269) {
         HEAP8[$566 >> 0] = $568 + 208; //@line 2467
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $551 + 243; //@line 2472
         $$sink7$i34 = 2; //@line 2473
         break;
        } else {
         HEAP8[$566 >> 0] = $568 + 224; //@line 2478
         $577 = $551 + 65267 | 0; //@line 2479
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $577; //@line 2483
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $577 >>> 8; //@line 2488
         $$sink7$i34 = 3; //@line 2489
         break;
        }
       }
      } while (0);
      $586 = (HEAP32[$5 >> 2] | 0) + $$sink7$i34 | 0; //@line 2495
      HEAP32[$5 >> 2] = $586; //@line 2496
      if (($$120$3$i53$i + -13 & 65535) < 256) {
       HEAP8[$586 >> 0] = $552 + 243; //@line 2502
       $591 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2504
       HEAP32[$5 >> 2] = $591; //@line 2505
       $592 = $591; //@line 2506
      } else {
       $592 = $586; //@line 2508
      }
      HEAP16[$4 >> 1] = 27; //@line 2510
      _memcpy($592 | 0, $3 | 0, $552 | 0) | 0; //@line 2511
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $552; //@line 2514
      $614 = HEAP32[$63 >> 2] | 0; //@line 2516
     }
     if (!(HEAP8[$614 + 1 >> 0] & 2)) {
      $690 = $614; //@line 2523
     } else {
      $619 = HEAP32[$614 + 24 >> 2] | 0; //@line 2526
      do {
       if ($619 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $619 >>> 24; //@line 2532
        $$12026$i57$i = 1; //@line 2533
        label = 157; //@line 2534
       } else {
        if ($619 << 8 >>> 0 > 16777215) {
         $$12026$i57$i = 0; //@line 2539
         label = 157; //@line 2540
         break;
        }
        if ($619 << 16 >>> 0 > 16777215) {
         $$120$129$i59$i = 0; //@line 2546
         label = 159; //@line 2547
         break;
        }
        if ($619 << 24 >>> 0 > 16777215) {
         $$120$232$i61$i = 0; //@line 2553
         label = 161; //@line 2554
        } else {
         $$120$3$i62$i = 0; //@line 2556
        }
       }
      } while (0);
      if ((label | 0) == 157) {
       HEAP8[$3 + ($$12026$i57$i & 255) >> 0] = $619 >>> 16; //@line 2566
       $$120$129$i59$i = $$12026$i57$i + 1 << 24 >> 24; //@line 2567
       label = 159; //@line 2568
      }
      if ((label | 0) == 159) {
       HEAP8[$3 + ($$120$129$i59$i & 255) >> 0] = $619 >>> 8; //@line 2576
       $$120$232$i61$i = $$120$129$i59$i + 1 << 24 >> 24; //@line 2577
       label = 161; //@line 2578
      }
      if ((label | 0) == 161) {
       HEAP8[$3 + ($$120$232$i61$i & 255) >> 0] = $619; //@line 2585
       $$120$3$i62$i = $$120$232$i61$i + 1 & 255; //@line 2587
      }
      $625 = HEAP16[$4 >> 1] | 0; //@line 2589
      $627 = 28 - ($625 & 65535) | 0; //@line 2591
      $628 = $$120$3$i62$i & 65535; //@line 2592
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i62$i & 65535) < 13 ? $$120$3$i62$i : 13; //@line 2597
      $632 = 28 - $625 << 16 >> 16; //@line 2598
      do {
       if (($632 & 65535) < 13) {
        $636 = HEAP32[$5 >> 2] | 0; //@line 2604
        HEAP8[$636 >> 0] = (($632 & 65535) << 4) + (HEAPU8[$636 >> 0] | 0); //@line 2609
        $$sink7$i24 = 1; //@line 2610
       } else {
        $642 = HEAP32[$5 >> 2] | 0; //@line 2613
        $644 = HEAPU8[$642 >> 0] | 0; //@line 2615
        if (($632 & 65535) < 269) {
         HEAP8[$642 >> 0] = $644 + 208; //@line 2619
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $627 + 243; //@line 2624
         $$sink7$i24 = 2; //@line 2625
         break;
        } else {
         HEAP8[$642 >> 0] = $644 + 224; //@line 2630
         $653 = $627 + 65267 | 0; //@line 2631
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $653; //@line 2635
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $653 >>> 8; //@line 2640
         $$sink7$i24 = 3; //@line 2641
         break;
        }
       }
      } while (0);
      $662 = (HEAP32[$5 >> 2] | 0) + $$sink7$i24 | 0; //@line 2647
      HEAP32[$5 >> 2] = $662; //@line 2648
      if (($$120$3$i62$i + -13 & 65535) < 256) {
       HEAP8[$662 >> 0] = $628 + 243; //@line 2654
       $667 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2656
       HEAP32[$5 >> 2] = $667; //@line 2657
       $668 = $667; //@line 2658
      } else {
       $668 = $662; //@line 2660
      }
      HEAP16[$4 >> 1] = 28; //@line 2662
      _memcpy($668 | 0, $3 | 0, $628 | 0) | 0; //@line 2663
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $628; //@line 2666
      $690 = HEAP32[$63 >> 2] | 0; //@line 2668
     }
     $691 = HEAP16[$690 + 2 >> 1] | 0; //@line 2671
     $693 = HEAP32[$690 + 44 >> 2] | 0; //@line 2673
     if (!$693) {
      $748 = $690; //@line 2676
     } else {
      $695 = HEAP16[$4 >> 1] | 0; //@line 2678
      $697 = 35 - ($695 & 65535) | 0; //@line 2680
      $698 = $691 & 65535; //@line 2681
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($691 & 65535) < 13 ? $691 & 255 : ($691 & 65535) < 269 ? 13 : 14; //@line 2688
      $703 = 35 - $695 << 16 >> 16; //@line 2689
      do {
       if (($703 & 65535) < 13) {
        $707 = HEAP32[$5 >> 2] | 0; //@line 2695
        HEAP8[$707 >> 0] = (($703 & 65535) << 4) + (HEAPU8[$707 >> 0] | 0); //@line 2700
        $$sink7$i16 = 1; //@line 2701
       } else {
        $713 = HEAP32[$5 >> 2] | 0; //@line 2704
        $715 = HEAPU8[$713 >> 0] | 0; //@line 2706
        if (($703 & 65535) < 269) {
         HEAP8[$713 >> 0] = $715 + 208; //@line 2710
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $697 + 243; //@line 2715
         $$sink7$i16 = 2; //@line 2716
         break;
        } else {
         HEAP8[$713 >> 0] = $715 + 224; //@line 2721
         $724 = $697 + 65267 | 0; //@line 2722
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $724; //@line 2726
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $724 >>> 8; //@line 2731
         $$sink7$i16 = 3; //@line 2732
         break;
        }
       }
      } while (0);
      $733 = (HEAP32[$5 >> 2] | 0) + $$sink7$i16 | 0; //@line 2738
      HEAP32[$5 >> 2] = $733; //@line 2739
      do {
       if (($691 + -13 & 65535) < 256) {
        $$sink13$i = 1; //@line 2745
        $$sink63$i = $698 + 243 | 0; //@line 2745
        $742 = $733; //@line 2745
        label = 172; //@line 2746
       } else {
        if (($691 & 65535) <= 268) {
         $745 = $733; //@line 2750
         break;
        }
        $737 = $698 + -269 | 0; //@line 2753
        HEAP8[$733 + 1 >> 0] = $737; //@line 2756
        $$sink13$i = 2; //@line 2759
        $$sink63$i = $737 >>> 8; //@line 2759
        $742 = HEAP32[$5 >> 2] | 0; //@line 2759
        label = 172; //@line 2760
       }
      } while (0);
      if ((label | 0) == 172) {
       HEAP8[$742 >> 0] = $$sink63$i; //@line 2765
       $744 = (HEAP32[$5 >> 2] | 0) + $$sink13$i | 0; //@line 2767
       HEAP32[$5 >> 2] = $744; //@line 2768
       $745 = $744; //@line 2769
      }
      HEAP16[$4 >> 1] = 35; //@line 2771
      _memcpy($745 | 0, $693 | 0, $698 | 0) | 0; //@line 2772
      HEAP32[$5 >> 2] = $745 + $698; //@line 2774
      $748 = HEAP32[$63 >> 2] | 0; //@line 2776
     }
     if (HEAP8[$748 + 1 >> 0] & 1) {
      $753 = HEAP32[$748 + 20 >> 2] | 0; //@line 2784
      do {
       if ($753 >>> 0 > 16777215) {
        HEAP8[$3 >> 0] = $753 >>> 24; //@line 2790
        $$12026$i66$i = 1; //@line 2791
        label = 186; //@line 2792
       } else {
        if ($753 << 8 >>> 0 > 16777215) {
         $$12026$i66$i = 0; //@line 2797
         label = 186; //@line 2798
         break;
        }
        if ($753 << 16 >>> 0 > 16777215) {
         $$120$129$i68$i = 0; //@line 2804
         label = 188; //@line 2805
         break;
        }
        if ($753 << 24 >>> 0 > 16777215) {
         $$120$232$i70$i = 0; //@line 2811
         label = 190; //@line 2812
        } else {
         $$120$3$i71$i = 0; //@line 2814
        }
       }
      } while (0);
      if ((label | 0) == 186) {
       HEAP8[$3 + ($$12026$i66$i & 255) >> 0] = $753 >>> 16; //@line 2824
       $$120$129$i68$i = $$12026$i66$i + 1 << 24 >> 24; //@line 2825
       label = 188; //@line 2826
      }
      if ((label | 0) == 188) {
       HEAP8[$3 + ($$120$129$i68$i & 255) >> 0] = $753 >>> 8; //@line 2834
       $$120$232$i70$i = $$120$129$i68$i + 1 << 24 >> 24; //@line 2835
       label = 190; //@line 2836
      }
      if ((label | 0) == 190) {
       HEAP8[$3 + ($$120$232$i70$i & 255) >> 0] = $753; //@line 2843
       $$120$3$i71$i = $$120$232$i70$i + 1 & 255; //@line 2845
      }
      $759 = HEAP16[$4 >> 1] | 0; //@line 2847
      $761 = 60 - ($759 & 65535) | 0; //@line 2849
      $762 = $$120$3$i71$i & 65535; //@line 2850
      HEAP8[HEAP32[$5 >> 2] >> 0] = ($$120$3$i71$i & 65535) < 13 ? $$120$3$i71$i : 13; //@line 2855
      $766 = 60 - $759 << 16 >> 16; //@line 2856
      do {
       if (($766 & 65535) < 13) {
        $770 = HEAP32[$5 >> 2] | 0; //@line 2862
        HEAP8[$770 >> 0] = (($766 & 65535) << 4) + (HEAPU8[$770 >> 0] | 0); //@line 2867
        $$sink7$i = 1; //@line 2868
       } else {
        $776 = HEAP32[$5 >> 2] | 0; //@line 2871
        $778 = HEAPU8[$776 >> 0] | 0; //@line 2873
        if (($766 & 65535) < 269) {
         HEAP8[$776 >> 0] = $778 + 208; //@line 2877
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $761 + 243; //@line 2882
         $$sink7$i = 2; //@line 2883
         break;
        } else {
         HEAP8[$776 >> 0] = $778 + 224; //@line 2888
         $787 = $761 + 65267 | 0; //@line 2889
         HEAP8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] = $787; //@line 2893
         HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] = $787 >>> 8; //@line 2898
         $$sink7$i = 3; //@line 2899
         break;
        }
       }
      } while (0);
      $796 = (HEAP32[$5 >> 2] | 0) + $$sink7$i | 0; //@line 2905
      HEAP32[$5 >> 2] = $796; //@line 2906
      if (($$120$3$i71$i + -13 & 65535) < 256) {
       HEAP8[$796 >> 0] = $762 + 243; //@line 2912
       $801 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2914
       HEAP32[$5 >> 2] = $801; //@line 2915
       $802 = $801; //@line 2916
      } else {
       $802 = $796; //@line 2918
      }
      HEAP16[$4 >> 1] = 60; //@line 2920
      _memcpy($802 | 0, $3 | 0, $762 | 0) | 0; //@line 2921
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $762; //@line 2924
     }
    }
   }
  }
  $823 = $1 + 24 | 0; //@line 2929
  if (HEAP16[$823 >> 1] | 0) {
   $826 = $1 + 36 | 0; //@line 2933
   if (HEAP32[$826 >> 2] | 0) {
    HEAP8[HEAP32[$5 >> 2] >> 0] = -1; //@line 2938
    $831 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2940
    _memcpy($831 | 0, HEAP32[$826 >> 2] | 0, HEAPU16[$823 >> 1] | 0) | 0; //@line 2944
    HEAP32[$5 >> 2] = $831 + (HEAPU16[$823 >> 1] | 0); //@line 2948
   }
  }
 }
 $$1 = (HEAP32[$5 >> 2] | 0) - $$cast & 65535; //@line 2955
 STACKTOP = sp; //@line 2956
 return $$1 | 0; //@line 2956
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$019$i = 0, $$019$i$1 = 0, $$019$i$2 = 0, $$019$i$3 = 0, $$019$i$4 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$2 = 0, $$3 = 0, $$355 = 0, $$byval_copy58 = 0, $$lcssa$i = 0, $$lcssa127 = 0, $$sink$i = 0, $11 = 0, $114 = 0, $120 = 0, $127 = 0, $128 = 0, $133 = 0, $135 = 0, $136 = 0, $139 = 0, $143 = 0, $144 = 0, $148 = 0, $151 = 0, $153 = 0, $154 = 0, $159 = 0, $167 = 0, $178 = 0, $183 = 0, $184 = 0, $186 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $261 = 0, $268 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $283 = 0, $29 = 0, $290 = 0, $30 = 0, $31 = 0, $311 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $349 = 0, $35 = 0, $356 = 0, $37 = 0, $377 = 0, $38 = 0, $39 = 0, $40 = 0, $400 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $415 = 0, $422 = 0, $443 = 0, $466 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $481 = 0, $488 = 0, $5 = 0, $50 = 0, $505 = 0, $521 = 0, $57 = 0, $6 = 0, $78 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10778
 STACKTOP = STACKTOP + 144 | 0; //@line 10779
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 10779
 $$byval_copy58 = sp + 120 | 0; //@line 10780
 $5 = sp + 64 | 0; //@line 10781
 $6 = sp; //@line 10782
 if (!$1) {
  $$3 = -3003; //@line 10785
  STACKTOP = sp; //@line 10786
  return $$3 | 0; //@line 10786
 }
 $8 = _strlen($1) | 0; //@line 10788
 if (($8 | 0) > 128 | ($8 | 0) == 0) {
  $$3 = -3003; //@line 10793
  STACKTOP = sp; //@line 10794
  return $$3 | 0; //@line 10794
 }
 __ZN9UDPSocketC2Ev($5); //@line 10796
 $AsyncCtx41 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10797
 $11 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 10798
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 105; //@line 10801
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 10803
  HEAP32[$AsyncCtx41 + 8 >> 2] = $6; //@line 10805
  HEAP32[$AsyncCtx41 + 12 >> 2] = $5; //@line 10807
  HEAP32[$AsyncCtx41 + 16 >> 2] = $5; //@line 10809
  HEAP32[$AsyncCtx41 + 20 >> 2] = $3; //@line 10811
  HEAP32[$AsyncCtx41 + 24 >> 2] = $5; //@line 10813
  HEAP32[$AsyncCtx41 + 28 >> 2] = $2; //@line 10815
  HEAP32[$AsyncCtx41 + 32 >> 2] = $4; //@line 10817
  sp = STACKTOP; //@line 10818
  STACKTOP = sp; //@line 10819
  return 0; //@line 10819
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 10821
 do {
  if (!$11) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 10825
   $21 = _malloc(512) | 0; //@line 10826
   if (!$21) {
    $$2 = -3007; //@line 10829
   } else {
    $23 = $21; //@line 10831
    $24 = $21 + 1 | 0; //@line 10832
    $25 = $21 + 2 | 0; //@line 10833
    $26 = $21 + 3 | 0; //@line 10834
    $27 = $21 + 4 | 0; //@line 10835
    $28 = $21 + 5 | 0; //@line 10836
    $29 = $21 + 6 | 0; //@line 10837
    $30 = $21 + 7 | 0; //@line 10838
    $31 = $21 + 12 | 0; //@line 10839
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 10841
    HEAP8[$21 >> 0] = 0; //@line 10842
    HEAP8[$24 >> 0] = 1; //@line 10843
    HEAP8[$25 >> 0] = 1; //@line 10844
    HEAP8[$26 >> 0] = 0; //@line 10845
    HEAP8[$27 >> 0] = 0; //@line 10846
    HEAP8[$28 >> 0] = 1; //@line 10847
    HEAP8[$29 >> 0] = 0; //@line 10848
    HEAP8[$29 + 1 >> 0] = 0; //@line 10848
    HEAP8[$29 + 2 >> 0] = 0; //@line 10848
    HEAP8[$29 + 3 >> 0] = 0; //@line 10848
    HEAP8[$29 + 4 >> 0] = 0; //@line 10848
    HEAP8[$29 + 5 >> 0] = 0; //@line 10848
    if (!(HEAP8[$1 >> 0] | 0)) {
     $50 = $31; //@line 10852
    } else {
     $$019$i = $1; //@line 10854
     $38 = $31; //@line 10854
     while (1) {
      $35 = _strcspn($$019$i, 7214) | 0; //@line 10856
      $37 = $38 + 1 | 0; //@line 10858
      HEAP8[$38 >> 0] = $35; //@line 10859
      $39 = $35 & 255; //@line 10860
      _memcpy($37 | 0, $$019$i | 0, $39 | 0) | 0; //@line 10861
      $40 = $37 + $39 | 0; //@line 10862
      $$019$i = $$019$i + ($35 + ((HEAP8[$$019$i + $35 >> 0] | 0) == 46 & 1)) | 0; //@line 10868
      if (!(HEAP8[$$019$i >> 0] | 0)) {
       $50 = $40; //@line 10872
       break;
      } else {
       $38 = $40; //@line 10875
      }
     }
    }
    HEAP8[$50 >> 0] = 0; //@line 10880
    HEAP8[$50 + 1 >> 0] = 0; //@line 10882
    HEAP8[$50 + 2 >> 0] = $$sink$i; //@line 10884
    HEAP8[$50 + 3 >> 0] = 0; //@line 10886
    HEAP8[$50 + 4 >> 0] = 1; //@line 10887
    HEAP32[$$byval_copy58 >> 2] = HEAP32[130]; //@line 10888
    HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[131]; //@line 10888
    HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[132]; //@line 10888
    HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[133]; //@line 10888
    HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[134]; //@line 10888
    __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 10889
    $AsyncCtx30 = _emscripten_alloc_async_context(80, sp) | 0; //@line 10893
    $57 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $50 + 5 - $23 | 0) | 0; //@line 10894
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 106; //@line 10897
     HEAP32[$AsyncCtx30 + 4 >> 2] = $31; //@line 10899
     HEAP32[$AsyncCtx30 + 8 >> 2] = $1; //@line 10901
     HEAP8[$AsyncCtx30 + 12 >> 0] = $$sink$i; //@line 10903
     HEAP32[$AsyncCtx30 + 16 >> 2] = $6; //@line 10905
     HEAP32[$AsyncCtx30 + 20 >> 2] = $6; //@line 10907
     HEAP32[$AsyncCtx30 + 24 >> 2] = $23; //@line 10909
     HEAP32[$AsyncCtx30 + 28 >> 2] = $5; //@line 10911
     HEAP32[$AsyncCtx30 + 32 >> 2] = $21; //@line 10913
     HEAP32[$AsyncCtx30 + 36 >> 2] = $24; //@line 10915
     HEAP32[$AsyncCtx30 + 40 >> 2] = $25; //@line 10917
     HEAP32[$AsyncCtx30 + 44 >> 2] = $26; //@line 10919
     HEAP32[$AsyncCtx30 + 48 >> 2] = $27; //@line 10921
     HEAP32[$AsyncCtx30 + 52 >> 2] = $28; //@line 10923
     HEAP32[$AsyncCtx30 + 56 >> 2] = $29; //@line 10925
     HEAP32[$AsyncCtx30 + 60 >> 2] = $30; //@line 10927
     HEAP32[$AsyncCtx30 + 64 >> 2] = $5; //@line 10929
     HEAP32[$AsyncCtx30 + 68 >> 2] = $3; //@line 10931
     HEAP32[$AsyncCtx30 + 72 >> 2] = $5; //@line 10933
     HEAP32[$AsyncCtx30 + 76 >> 2] = $2; //@line 10935
     sp = STACKTOP; //@line 10936
     STACKTOP = sp; //@line 10937
     return 0; //@line 10937
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 10939
    do {
     if (($57 | 0) < 0) {
      label = 35; //@line 10943
     } else {
      $AsyncCtx15 = _emscripten_alloc_async_context(80, sp) | 0; //@line 10945
      $78 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 10946
      if (___async) {
       HEAP32[$AsyncCtx15 >> 2] = 107; //@line 10949
       HEAP32[$AsyncCtx15 + 4 >> 2] = $31; //@line 10951
       HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 10953
       HEAP8[$AsyncCtx15 + 12 >> 0] = $$sink$i; //@line 10955
       HEAP32[$AsyncCtx15 + 16 >> 2] = $6; //@line 10957
       HEAP32[$AsyncCtx15 + 20 >> 2] = $6; //@line 10959
       HEAP32[$AsyncCtx15 + 24 >> 2] = $23; //@line 10961
       HEAP32[$AsyncCtx15 + 28 >> 2] = $5; //@line 10963
       HEAP32[$AsyncCtx15 + 32 >> 2] = $21; //@line 10965
       HEAP32[$AsyncCtx15 + 36 >> 2] = $24; //@line 10967
       HEAP32[$AsyncCtx15 + 40 >> 2] = $25; //@line 10969
       HEAP32[$AsyncCtx15 + 44 >> 2] = $26; //@line 10971
       HEAP32[$AsyncCtx15 + 48 >> 2] = $27; //@line 10973
       HEAP32[$AsyncCtx15 + 52 >> 2] = $28; //@line 10975
       HEAP32[$AsyncCtx15 + 56 >> 2] = $29; //@line 10977
       HEAP32[$AsyncCtx15 + 60 >> 2] = $30; //@line 10979
       HEAP32[$AsyncCtx15 + 64 >> 2] = $5; //@line 10981
       HEAP32[$AsyncCtx15 + 68 >> 2] = $3; //@line 10983
       HEAP32[$AsyncCtx15 + 72 >> 2] = $5; //@line 10985
       HEAP32[$AsyncCtx15 + 76 >> 2] = $2; //@line 10987
       sp = STACKTOP; //@line 10988
       STACKTOP = sp; //@line 10989
       return 0; //@line 10989
      } else {
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10991
       if (($78 | 0) == -3001) {
        label = 35; //@line 10994
        break;
       } else {
        $$lcssa127 = $78; //@line 10997
        label = 15; //@line 10998
        break;
       }
      }
     }
    } while (0);
    L25 : do {
     if ((label | 0) == 35) {
      HEAP8[$21 >> 0] = 0; //@line 11006
      HEAP8[$24 >> 0] = 1; //@line 11007
      HEAP8[$25 >> 0] = 1; //@line 11008
      HEAP8[$26 >> 0] = 0; //@line 11009
      HEAP8[$27 >> 0] = 0; //@line 11010
      HEAP8[$28 >> 0] = 1; //@line 11011
      HEAP8[$29 >> 0] = 0; //@line 11012
      HEAP8[$29 + 1 >> 0] = 0; //@line 11012
      HEAP8[$29 + 2 >> 0] = 0; //@line 11012
      HEAP8[$29 + 3 >> 0] = 0; //@line 11012
      HEAP8[$29 + 4 >> 0] = 0; //@line 11012
      HEAP8[$29 + 5 >> 0] = 0; //@line 11012
      if (!(HEAP8[$1 >> 0] | 0)) {
       $283 = $31; //@line 11016
      } else {
       $$019$i$1 = $1; //@line 11018
       $271 = $31; //@line 11018
       while (1) {
        $268 = _strcspn($$019$i$1, 7214) | 0; //@line 11020
        $270 = $271 + 1 | 0; //@line 11022
        HEAP8[$271 >> 0] = $268; //@line 11023
        $272 = $268 & 255; //@line 11024
        _memcpy($270 | 0, $$019$i$1 | 0, $272 | 0) | 0; //@line 11025
        $273 = $270 + $272 | 0; //@line 11026
        $$019$i$1 = $$019$i$1 + ($268 + ((HEAP8[$$019$i$1 + $268 >> 0] | 0) == 46 & 1)) | 0; //@line 11032
        if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
         $283 = $273; //@line 11036
         break;
        } else {
         $271 = $273; //@line 11039
        }
       }
      }
      HEAP8[$283 >> 0] = 0; //@line 11044
      HEAP8[$283 + 1 >> 0] = 0; //@line 11046
      HEAP8[$283 + 2 >> 0] = $$sink$i; //@line 11048
      HEAP8[$283 + 3 >> 0] = 0; //@line 11050
      HEAP8[$283 + 4 >> 0] = 1; //@line 11051
      HEAP32[$$byval_copy58 >> 2] = HEAP32[135]; //@line 11052
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[136]; //@line 11052
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[137]; //@line 11052
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[138]; //@line 11052
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[139]; //@line 11052
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 11053
      $AsyncCtx27 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11057
      $290 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $283 + 5 - $23 | 0) | 0; //@line 11058
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 110; //@line 11061
       HEAP32[$AsyncCtx27 + 4 >> 2] = $6; //@line 11063
       HEAP32[$AsyncCtx27 + 8 >> 2] = $21; //@line 11065
       HEAP32[$AsyncCtx27 + 12 >> 2] = $24; //@line 11067
       HEAP32[$AsyncCtx27 + 16 >> 2] = $25; //@line 11069
       HEAP32[$AsyncCtx27 + 20 >> 2] = $26; //@line 11071
       HEAP32[$AsyncCtx27 + 24 >> 2] = $27; //@line 11073
       HEAP32[$AsyncCtx27 + 28 >> 2] = $28; //@line 11075
       HEAP32[$AsyncCtx27 + 32 >> 2] = $29; //@line 11077
       HEAP32[$AsyncCtx27 + 36 >> 2] = $30; //@line 11079
       HEAP32[$AsyncCtx27 + 40 >> 2] = $5; //@line 11081
       HEAP32[$AsyncCtx27 + 44 >> 2] = $5; //@line 11083
       HEAP32[$AsyncCtx27 + 48 >> 2] = $31; //@line 11085
       HEAP8[$AsyncCtx27 + 52 >> 0] = $$sink$i; //@line 11087
       HEAP32[$AsyncCtx27 + 56 >> 2] = $6; //@line 11089
       HEAP32[$AsyncCtx27 + 60 >> 2] = $23; //@line 11091
       HEAP32[$AsyncCtx27 + 64 >> 2] = $1; //@line 11093
       HEAP32[$AsyncCtx27 + 68 >> 2] = $3; //@line 11095
       HEAP32[$AsyncCtx27 + 72 >> 2] = $5; //@line 11097
       HEAP32[$AsyncCtx27 + 76 >> 2] = $2; //@line 11099
       sp = STACKTOP; //@line 11100
       STACKTOP = sp; //@line 11101
       return 0; //@line 11101
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 11103
      do {
       if (($290 | 0) >= 0) {
        $AsyncCtx11 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11107
        $311 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 11108
        if (___async) {
         HEAP32[$AsyncCtx11 >> 2] = 111; //@line 11111
         HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 11113
         HEAP32[$AsyncCtx11 + 8 >> 2] = $21; //@line 11115
         HEAP32[$AsyncCtx11 + 12 >> 2] = $24; //@line 11117
         HEAP32[$AsyncCtx11 + 16 >> 2] = $25; //@line 11119
         HEAP32[$AsyncCtx11 + 20 >> 2] = $26; //@line 11121
         HEAP32[$AsyncCtx11 + 24 >> 2] = $27; //@line 11123
         HEAP32[$AsyncCtx11 + 28 >> 2] = $28; //@line 11125
         HEAP32[$AsyncCtx11 + 32 >> 2] = $29; //@line 11127
         HEAP32[$AsyncCtx11 + 36 >> 2] = $30; //@line 11129
         HEAP32[$AsyncCtx11 + 40 >> 2] = $5; //@line 11131
         HEAP32[$AsyncCtx11 + 44 >> 2] = $5; //@line 11133
         HEAP32[$AsyncCtx11 + 48 >> 2] = $31; //@line 11135
         HEAP8[$AsyncCtx11 + 52 >> 0] = $$sink$i; //@line 11137
         HEAP32[$AsyncCtx11 + 56 >> 2] = $6; //@line 11139
         HEAP32[$AsyncCtx11 + 60 >> 2] = $23; //@line 11141
         HEAP32[$AsyncCtx11 + 64 >> 2] = $1; //@line 11143
         HEAP32[$AsyncCtx11 + 68 >> 2] = $3; //@line 11145
         HEAP32[$AsyncCtx11 + 72 >> 2] = $5; //@line 11147
         HEAP32[$AsyncCtx11 + 76 >> 2] = $2; //@line 11149
         sp = STACKTOP; //@line 11150
         STACKTOP = sp; //@line 11151
         return 0; //@line 11151
        } else {
         _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11153
         if (($311 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $311; //@line 11158
          label = 15; //@line 11159
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 11165
      HEAP8[$24 >> 0] = 1; //@line 11166
      HEAP8[$25 >> 0] = 1; //@line 11167
      HEAP8[$26 >> 0] = 0; //@line 11168
      HEAP8[$27 >> 0] = 0; //@line 11169
      HEAP8[$28 >> 0] = 1; //@line 11170
      HEAP8[$29 >> 0] = 0; //@line 11171
      HEAP8[$29 + 1 >> 0] = 0; //@line 11171
      HEAP8[$29 + 2 >> 0] = 0; //@line 11171
      HEAP8[$29 + 3 >> 0] = 0; //@line 11171
      HEAP8[$29 + 4 >> 0] = 0; //@line 11171
      HEAP8[$29 + 5 >> 0] = 0; //@line 11171
      if (!(HEAP8[$1 >> 0] | 0)) {
       $349 = $31; //@line 11175
      } else {
       $$019$i$2 = $1; //@line 11177
       $337 = $31; //@line 11177
       while (1) {
        $334 = _strcspn($$019$i$2, 7214) | 0; //@line 11179
        $336 = $337 + 1 | 0; //@line 11181
        HEAP8[$337 >> 0] = $334; //@line 11182
        $338 = $334 & 255; //@line 11183
        _memcpy($336 | 0, $$019$i$2 | 0, $338 | 0) | 0; //@line 11184
        $339 = $336 + $338 | 0; //@line 11185
        $$019$i$2 = $$019$i$2 + ($334 + ((HEAP8[$$019$i$2 + $334 >> 0] | 0) == 46 & 1)) | 0; //@line 11191
        if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
         $349 = $339; //@line 11195
         break;
        } else {
         $337 = $339; //@line 11198
        }
       }
      }
      HEAP8[$349 >> 0] = 0; //@line 11203
      HEAP8[$349 + 1 >> 0] = 0; //@line 11205
      HEAP8[$349 + 2 >> 0] = $$sink$i; //@line 11207
      HEAP8[$349 + 3 >> 0] = 0; //@line 11209
      HEAP8[$349 + 4 >> 0] = 1; //@line 11210
      HEAP32[$$byval_copy58 >> 2] = HEAP32[140]; //@line 11211
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[141]; //@line 11211
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[142]; //@line 11211
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[143]; //@line 11211
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[144]; //@line 11211
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 11212
      $AsyncCtx24 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11216
      $356 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $349 + 5 - $23 | 0) | 0; //@line 11217
      if (___async) {
       HEAP32[$AsyncCtx24 >> 2] = 112; //@line 11220
       HEAP32[$AsyncCtx24 + 4 >> 2] = $21; //@line 11222
       HEAP32[$AsyncCtx24 + 8 >> 2] = $24; //@line 11224
       HEAP32[$AsyncCtx24 + 12 >> 2] = $25; //@line 11226
       HEAP32[$AsyncCtx24 + 16 >> 2] = $26; //@line 11228
       HEAP32[$AsyncCtx24 + 20 >> 2] = $27; //@line 11230
       HEAP32[$AsyncCtx24 + 24 >> 2] = $28; //@line 11232
       HEAP32[$AsyncCtx24 + 28 >> 2] = $29; //@line 11234
       HEAP32[$AsyncCtx24 + 32 >> 2] = $30; //@line 11236
       HEAP32[$AsyncCtx24 + 36 >> 2] = $5; //@line 11238
       HEAP32[$AsyncCtx24 + 40 >> 2] = $5; //@line 11240
       HEAP32[$AsyncCtx24 + 44 >> 2] = $31; //@line 11242
       HEAP8[$AsyncCtx24 + 48 >> 0] = $$sink$i; //@line 11244
       HEAP32[$AsyncCtx24 + 52 >> 2] = $6; //@line 11246
       HEAP32[$AsyncCtx24 + 56 >> 2] = $6; //@line 11248
       HEAP32[$AsyncCtx24 + 60 >> 2] = $23; //@line 11250
       HEAP32[$AsyncCtx24 + 64 >> 2] = $1; //@line 11252
       HEAP32[$AsyncCtx24 + 68 >> 2] = $3; //@line 11254
       HEAP32[$AsyncCtx24 + 72 >> 2] = $5; //@line 11256
       HEAP32[$AsyncCtx24 + 76 >> 2] = $2; //@line 11258
       sp = STACKTOP; //@line 11259
       STACKTOP = sp; //@line 11260
       return 0; //@line 11260
      }
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11262
      do {
       if (($356 | 0) >= 0) {
        $AsyncCtx7 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11266
        $377 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 11267
        if (___async) {
         HEAP32[$AsyncCtx7 >> 2] = 113; //@line 11270
         HEAP32[$AsyncCtx7 + 4 >> 2] = $21; //@line 11272
         HEAP32[$AsyncCtx7 + 8 >> 2] = $24; //@line 11274
         HEAP32[$AsyncCtx7 + 12 >> 2] = $25; //@line 11276
         HEAP32[$AsyncCtx7 + 16 >> 2] = $26; //@line 11278
         HEAP32[$AsyncCtx7 + 20 >> 2] = $27; //@line 11280
         HEAP32[$AsyncCtx7 + 24 >> 2] = $28; //@line 11282
         HEAP32[$AsyncCtx7 + 28 >> 2] = $29; //@line 11284
         HEAP32[$AsyncCtx7 + 32 >> 2] = $30; //@line 11286
         HEAP32[$AsyncCtx7 + 36 >> 2] = $5; //@line 11288
         HEAP32[$AsyncCtx7 + 40 >> 2] = $5; //@line 11290
         HEAP32[$AsyncCtx7 + 44 >> 2] = $31; //@line 11292
         HEAP8[$AsyncCtx7 + 48 >> 0] = $$sink$i; //@line 11294
         HEAP32[$AsyncCtx7 + 52 >> 2] = $6; //@line 11296
         HEAP32[$AsyncCtx7 + 56 >> 2] = $6; //@line 11298
         HEAP32[$AsyncCtx7 + 60 >> 2] = $23; //@line 11300
         HEAP32[$AsyncCtx7 + 64 >> 2] = $1; //@line 11302
         HEAP32[$AsyncCtx7 + 68 >> 2] = $3; //@line 11304
         HEAP32[$AsyncCtx7 + 72 >> 2] = $5; //@line 11306
         HEAP32[$AsyncCtx7 + 76 >> 2] = $2; //@line 11308
         sp = STACKTOP; //@line 11309
         STACKTOP = sp; //@line 11310
         return 0; //@line 11310
        } else {
         _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11312
         if (($377 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $377; //@line 11317
          label = 15; //@line 11318
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 11324
      HEAP8[$24 >> 0] = 1; //@line 11325
      HEAP8[$25 >> 0] = 1; //@line 11326
      HEAP8[$26 >> 0] = 0; //@line 11327
      HEAP8[$27 >> 0] = 0; //@line 11328
      HEAP8[$28 >> 0] = 1; //@line 11329
      HEAP8[$29 >> 0] = 0; //@line 11330
      HEAP8[$29 + 1 >> 0] = 0; //@line 11330
      HEAP8[$29 + 2 >> 0] = 0; //@line 11330
      HEAP8[$29 + 3 >> 0] = 0; //@line 11330
      HEAP8[$29 + 4 >> 0] = 0; //@line 11330
      HEAP8[$29 + 5 >> 0] = 0; //@line 11330
      if (!(HEAP8[$1 >> 0] | 0)) {
       $415 = $31; //@line 11334
      } else {
       $$019$i$3 = $1; //@line 11336
       $403 = $31; //@line 11336
       while (1) {
        $400 = _strcspn($$019$i$3, 7214) | 0; //@line 11338
        $402 = $403 + 1 | 0; //@line 11340
        HEAP8[$403 >> 0] = $400; //@line 11341
        $404 = $400 & 255; //@line 11342
        _memcpy($402 | 0, $$019$i$3 | 0, $404 | 0) | 0; //@line 11343
        $405 = $402 + $404 | 0; //@line 11344
        $$019$i$3 = $$019$i$3 + ($400 + ((HEAP8[$$019$i$3 + $400 >> 0] | 0) == 46 & 1)) | 0; //@line 11350
        if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
         $415 = $405; //@line 11354
         break;
        } else {
         $403 = $405; //@line 11357
        }
       }
      }
      HEAP8[$415 >> 0] = 0; //@line 11362
      HEAP8[$415 + 1 >> 0] = 0; //@line 11364
      HEAP8[$415 + 2 >> 0] = $$sink$i; //@line 11366
      HEAP8[$415 + 3 >> 0] = 0; //@line 11368
      HEAP8[$415 + 4 >> 0] = 1; //@line 11369
      HEAP32[$$byval_copy58 >> 2] = HEAP32[145]; //@line 11370
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[146]; //@line 11370
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[147]; //@line 11370
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[148]; //@line 11370
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[149]; //@line 11370
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 11371
      $AsyncCtx21 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11375
      $422 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $415 + 5 - $23 | 0) | 0; //@line 11376
      if (___async) {
       HEAP32[$AsyncCtx21 >> 2] = 114; //@line 11379
       HEAP32[$AsyncCtx21 + 4 >> 2] = $21; //@line 11381
       HEAP32[$AsyncCtx21 + 8 >> 2] = $24; //@line 11383
       HEAP32[$AsyncCtx21 + 12 >> 2] = $25; //@line 11385
       HEAP32[$AsyncCtx21 + 16 >> 2] = $26; //@line 11387
       HEAP32[$AsyncCtx21 + 20 >> 2] = $27; //@line 11389
       HEAP32[$AsyncCtx21 + 24 >> 2] = $28; //@line 11391
       HEAP32[$AsyncCtx21 + 28 >> 2] = $29; //@line 11393
       HEAP32[$AsyncCtx21 + 32 >> 2] = $30; //@line 11395
       HEAP32[$AsyncCtx21 + 36 >> 2] = $5; //@line 11397
       HEAP32[$AsyncCtx21 + 40 >> 2] = $5; //@line 11399
       HEAP32[$AsyncCtx21 + 44 >> 2] = $31; //@line 11401
       HEAP8[$AsyncCtx21 + 48 >> 0] = $$sink$i; //@line 11403
       HEAP32[$AsyncCtx21 + 52 >> 2] = $6; //@line 11405
       HEAP32[$AsyncCtx21 + 56 >> 2] = $6; //@line 11407
       HEAP32[$AsyncCtx21 + 60 >> 2] = $23; //@line 11409
       HEAP32[$AsyncCtx21 + 64 >> 2] = $1; //@line 11411
       HEAP32[$AsyncCtx21 + 68 >> 2] = $3; //@line 11413
       HEAP32[$AsyncCtx21 + 72 >> 2] = $5; //@line 11415
       HEAP32[$AsyncCtx21 + 76 >> 2] = $2; //@line 11417
       sp = STACKTOP; //@line 11418
       STACKTOP = sp; //@line 11419
       return 0; //@line 11419
      }
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11421
      do {
       if (($422 | 0) >= 0) {
        $AsyncCtx3 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11425
        $443 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 11426
        if (___async) {
         HEAP32[$AsyncCtx3 >> 2] = 115; //@line 11429
         HEAP32[$AsyncCtx3 + 4 >> 2] = $21; //@line 11431
         HEAP32[$AsyncCtx3 + 8 >> 2] = $24; //@line 11433
         HEAP32[$AsyncCtx3 + 12 >> 2] = $25; //@line 11435
         HEAP32[$AsyncCtx3 + 16 >> 2] = $26; //@line 11437
         HEAP32[$AsyncCtx3 + 20 >> 2] = $27; //@line 11439
         HEAP32[$AsyncCtx3 + 24 >> 2] = $28; //@line 11441
         HEAP32[$AsyncCtx3 + 28 >> 2] = $29; //@line 11443
         HEAP32[$AsyncCtx3 + 32 >> 2] = $30; //@line 11445
         HEAP32[$AsyncCtx3 + 36 >> 2] = $5; //@line 11447
         HEAP32[$AsyncCtx3 + 40 >> 2] = $5; //@line 11449
         HEAP32[$AsyncCtx3 + 44 >> 2] = $31; //@line 11451
         HEAP8[$AsyncCtx3 + 48 >> 0] = $$sink$i; //@line 11453
         HEAP32[$AsyncCtx3 + 52 >> 2] = $6; //@line 11455
         HEAP32[$AsyncCtx3 + 56 >> 2] = $6; //@line 11457
         HEAP32[$AsyncCtx3 + 60 >> 2] = $23; //@line 11459
         HEAP32[$AsyncCtx3 + 64 >> 2] = $1; //@line 11461
         HEAP32[$AsyncCtx3 + 68 >> 2] = $3; //@line 11463
         HEAP32[$AsyncCtx3 + 72 >> 2] = $5; //@line 11465
         HEAP32[$AsyncCtx3 + 76 >> 2] = $2; //@line 11467
         sp = STACKTOP; //@line 11468
         STACKTOP = sp; //@line 11469
         return 0; //@line 11469
        } else {
         _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11471
         if (($443 | 0) == -3001) {
          break;
         } else {
          $$lcssa127 = $443; //@line 11476
          label = 15; //@line 11477
          break L25;
         }
        }
       }
      } while (0);
      HEAP8[$21 >> 0] = 0; //@line 11483
      HEAP8[$24 >> 0] = 1; //@line 11484
      HEAP8[$25 >> 0] = 1; //@line 11485
      HEAP8[$26 >> 0] = 0; //@line 11486
      HEAP8[$27 >> 0] = 0; //@line 11487
      HEAP8[$28 >> 0] = 1; //@line 11488
      HEAP8[$29 >> 0] = 0; //@line 11489
      HEAP8[$29 + 1 >> 0] = 0; //@line 11489
      HEAP8[$29 + 2 >> 0] = 0; //@line 11489
      HEAP8[$29 + 3 >> 0] = 0; //@line 11489
      HEAP8[$29 + 4 >> 0] = 0; //@line 11489
      HEAP8[$29 + 5 >> 0] = 0; //@line 11489
      if (!(HEAP8[$1 >> 0] | 0)) {
       $481 = $31; //@line 11493
      } else {
       $$019$i$4 = $1; //@line 11495
       $469 = $31; //@line 11495
       while (1) {
        $466 = _strcspn($$019$i$4, 7214) | 0; //@line 11497
        $468 = $469 + 1 | 0; //@line 11499
        HEAP8[$469 >> 0] = $466; //@line 11500
        $470 = $466 & 255; //@line 11501
        _memcpy($468 | 0, $$019$i$4 | 0, $470 | 0) | 0; //@line 11502
        $471 = $468 + $470 | 0; //@line 11503
        $$019$i$4 = $$019$i$4 + ($466 + ((HEAP8[$$019$i$4 + $466 >> 0] | 0) == 46 & 1)) | 0; //@line 11509
        if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
         $481 = $471; //@line 11513
         break;
        } else {
         $469 = $471; //@line 11516
        }
       }
      }
      HEAP8[$481 >> 0] = 0; //@line 11521
      HEAP8[$481 + 1 >> 0] = 0; //@line 11523
      HEAP8[$481 + 2 >> 0] = $$sink$i; //@line 11525
      HEAP8[$481 + 3 >> 0] = 0; //@line 11527
      HEAP8[$481 + 4 >> 0] = 1; //@line 11528
      HEAP32[$$byval_copy58 >> 2] = HEAP32[150]; //@line 11529
      HEAP32[$$byval_copy58 + 4 >> 2] = HEAP32[151]; //@line 11529
      HEAP32[$$byval_copy58 + 8 >> 2] = HEAP32[152]; //@line 11529
      HEAP32[$$byval_copy58 + 12 >> 2] = HEAP32[153]; //@line 11529
      HEAP32[$$byval_copy58 + 16 >> 2] = HEAP32[154]; //@line 11529
      __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy58, 53); //@line 11530
      $AsyncCtx18 = _emscripten_alloc_async_context(64, sp) | 0; //@line 11534
      $488 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $21, $481 + 5 - $23 | 0) | 0; //@line 11535
      if (___async) {
       HEAP32[$AsyncCtx18 >> 2] = 116; //@line 11538
       HEAP32[$AsyncCtx18 + 4 >> 2] = $21; //@line 11540
       HEAP32[$AsyncCtx18 + 8 >> 2] = $24; //@line 11542
       HEAP32[$AsyncCtx18 + 12 >> 2] = $25; //@line 11544
       HEAP32[$AsyncCtx18 + 16 >> 2] = $26; //@line 11546
       HEAP32[$AsyncCtx18 + 20 >> 2] = $27; //@line 11548
       HEAP32[$AsyncCtx18 + 24 >> 2] = $28; //@line 11550
       HEAP32[$AsyncCtx18 + 28 >> 2] = $29; //@line 11552
       HEAP32[$AsyncCtx18 + 32 >> 2] = $30; //@line 11554
       HEAP32[$AsyncCtx18 + 36 >> 2] = $5; //@line 11556
       HEAP32[$AsyncCtx18 + 40 >> 2] = $5; //@line 11558
       HEAP32[$AsyncCtx18 + 44 >> 2] = $3; //@line 11560
       HEAP32[$AsyncCtx18 + 48 >> 2] = $5; //@line 11562
       HEAP32[$AsyncCtx18 + 52 >> 2] = $31; //@line 11564
       HEAP32[$AsyncCtx18 + 56 >> 2] = $2; //@line 11566
       HEAP32[$AsyncCtx18 + 60 >> 2] = $6; //@line 11568
       sp = STACKTOP; //@line 11569
       STACKTOP = sp; //@line 11570
       return 0; //@line 11570
      }
      _emscripten_free_async_context($AsyncCtx18 | 0); //@line 11572
      if (($488 | 0) < 0) {
       $$355 = -3009; //@line 11575
       break;
      }
      $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 11578
      $505 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $21, 512) | 0; //@line 11579
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 117; //@line 11582
       HEAP32[$AsyncCtx + 4 >> 2] = $21; //@line 11584
       HEAP32[$AsyncCtx + 8 >> 2] = $24; //@line 11586
       HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 11588
       HEAP32[$AsyncCtx + 16 >> 2] = $26; //@line 11590
       HEAP32[$AsyncCtx + 20 >> 2] = $27; //@line 11592
       HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 11594
       HEAP32[$AsyncCtx + 28 >> 2] = $29; //@line 11596
       HEAP32[$AsyncCtx + 32 >> 2] = $30; //@line 11598
       HEAP32[$AsyncCtx + 36 >> 2] = $5; //@line 11600
       HEAP32[$AsyncCtx + 40 >> 2] = $5; //@line 11602
       HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 11604
       HEAP32[$AsyncCtx + 48 >> 2] = $5; //@line 11606
       HEAP32[$AsyncCtx + 52 >> 2] = $31; //@line 11608
       HEAP32[$AsyncCtx + 56 >> 2] = $2; //@line 11610
       sp = STACKTOP; //@line 11611
       STACKTOP = sp; //@line 11612
       return 0; //@line 11612
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11614
       if (($505 | 0) == -3001) {
        $$355 = -3009; //@line 11617
        break;
       } else {
        $$lcssa127 = $505; //@line 11620
        label = 15; //@line 11621
        break;
       }
      }
     }
    } while (0);
    if ((label | 0) == 15) {
     if (($$lcssa127 | 0) < 0) {
      $$355 = $$lcssa127; //@line 11630
     } else {
      $114 = HEAPU8[$27 >> 0] << 8 | HEAPU8[$28 >> 0]; //@line 11646
      $120 = HEAPU8[$29 >> 0] << 8 | HEAPU8[$30 >> 0]; //@line 11652
      if (((HEAP8[$25 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$21 >> 0] << 8 | HEAPU8[$24 >> 0] | 0) == 1 : 0) & (HEAP8[$26 >> 0] & 15) == 0) {
       if (!$114) {
        $521 = $31; //@line 11662
       } else {
        $$093119$i = 0; //@line 11664
        $128 = $31; //@line 11664
        while (1) {
         $127 = HEAP8[$128 >> 0] | 0; //@line 11666
         if (!($127 << 24 >> 24)) {
          $$lcssa$i = $128; //@line 11669
         } else {
          $133 = $128; //@line 11671
          $135 = $127; //@line 11671
          while (1) {
           $136 = $133 + 1 + ($135 & 255) | 0; //@line 11675
           $135 = HEAP8[$136 >> 0] | 0; //@line 11676
           if (!($135 << 24 >> 24)) {
            $$lcssa$i = $136; //@line 11679
            break;
           } else {
            $133 = $136; //@line 11682
           }
          }
         }
         $139 = $$lcssa$i + 5 | 0; //@line 11686
         $$093119$i = $$093119$i + 1 | 0; //@line 11687
         if (($$093119$i | 0) >= ($114 | 0)) {
          $521 = $139; //@line 11692
          break;
         } else {
          $128 = $139; //@line 11690
         }
        }
       }
       if (($3 | 0) != 0 & ($120 | 0) != 0) {
        $$090117$i = $2; //@line 11701
        $$094116$i = 0; //@line 11701
        $$095115$i = 0; //@line 11701
        $143 = $521; //@line 11701
        while (1) {
         $144 = HEAP8[$143 >> 0] | 0; //@line 11704
         do {
          if (!($144 << 24 >> 24)) {
           $159 = $143 + 1 | 0; //@line 11708
          } else {
           $148 = $144 & 255; //@line 11711
           $151 = $143; //@line 11711
           while (1) {
            if ($148 & 192 | 0) {
             label = 25; //@line 11716
             break;
            }
            $153 = $151 + 1 + $148 | 0; //@line 11720
            $154 = HEAP8[$153 >> 0] | 0; //@line 11721
            if (!($154 << 24 >> 24)) {
             label = 27; //@line 11725
             break;
            } else {
             $148 = $154 & 255; //@line 11728
             $151 = $153; //@line 11728
            }
           }
           if ((label | 0) == 25) {
            label = 0; //@line 11732
            $159 = $151 + 2 | 0; //@line 11734
            break;
           } else if ((label | 0) == 27) {
            label = 0; //@line 11738
            $159 = $153 + 1 | 0; //@line 11740
            break;
           }
          }
         } while (0);
         $167 = (HEAPU8[$159 >> 0] << 8 | HEAPU8[$159 + 1 >> 0]) & 65535; //@line 11753
         $178 = $159 + 10 | 0; //@line 11764
         $183 = HEAPU8[$159 + 8 >> 0] << 8 | HEAPU8[$159 + 9 >> 0]; //@line 11769
         $184 = $183 & 65535; //@line 11770
         $186 = (HEAPU8[$159 + 2 >> 0] << 8 | HEAPU8[$159 + 3 >> 0] | 0) == 1; //@line 11772
         do {
          if ($167 << 16 >> 16 == 1 & $186 & $184 << 16 >> 16 == 4) {
           HEAP32[$$090117$i >> 2] = 1; //@line 11778
           HEAP8[$$090117$i + 4 >> 0] = HEAP8[$178 >> 0] | 0; //@line 11782
           HEAP8[$$090117$i + 5 >> 0] = HEAP8[$159 + 11 >> 0] | 0; //@line 11786
           HEAP8[$$090117$i + 6 >> 0] = HEAP8[$159 + 12 >> 0] | 0; //@line 11790
           HEAP8[$$090117$i + 7 >> 0] = HEAP8[$159 + 13 >> 0] | 0; //@line 11794
           $$0 = $159 + 14 | 0; //@line 11797
           $$1$i = $$090117$i + 20 | 0; //@line 11797
           $$196$i = $$095115$i + 1 | 0; //@line 11797
          } else {
           if ($167 << 16 >> 16 == 28 & $186 & $184 << 16 >> 16 == 16) {
            HEAP32[$$090117$i >> 2] = 2; //@line 11804
            HEAP8[$$090117$i + 4 >> 0] = HEAP8[$178 >> 0] | 0; //@line 11808
            HEAP8[$$090117$i + 5 >> 0] = HEAP8[$159 + 11 >> 0] | 0; //@line 11812
            HEAP8[$$090117$i + 6 >> 0] = HEAP8[$159 + 12 >> 0] | 0; //@line 11816
            HEAP8[$$090117$i + 7 >> 0] = HEAP8[$159 + 13 >> 0] | 0; //@line 11820
            HEAP8[$$090117$i + 8 >> 0] = HEAP8[$159 + 14 >> 0] | 0; //@line 11824
            HEAP8[$$090117$i + 9 >> 0] = HEAP8[$159 + 15 >> 0] | 0; //@line 11828
            HEAP8[$$090117$i + 10 >> 0] = HEAP8[$159 + 16 >> 0] | 0; //@line 11832
            HEAP8[$$090117$i + 11 >> 0] = HEAP8[$159 + 17 >> 0] | 0; //@line 11836
            HEAP8[$$090117$i + 12 >> 0] = HEAP8[$159 + 18 >> 0] | 0; //@line 11840
            HEAP8[$$090117$i + 13 >> 0] = HEAP8[$159 + 19 >> 0] | 0; //@line 11844
            HEAP8[$$090117$i + 14 >> 0] = HEAP8[$159 + 20 >> 0] | 0; //@line 11848
            HEAP8[$$090117$i + 15 >> 0] = HEAP8[$159 + 21 >> 0] | 0; //@line 11852
            HEAP8[$$090117$i + 16 >> 0] = HEAP8[$159 + 22 >> 0] | 0; //@line 11856
            HEAP8[$$090117$i + 17 >> 0] = HEAP8[$159 + 23 >> 0] | 0; //@line 11860
            HEAP8[$$090117$i + 18 >> 0] = HEAP8[$159 + 24 >> 0] | 0; //@line 11864
            HEAP8[$$090117$i + 19 >> 0] = HEAP8[$159 + 25 >> 0] | 0; //@line 11868
            $$0 = $159 + 26 | 0; //@line 11871
            $$1$i = $$090117$i + 20 | 0; //@line 11871
            $$196$i = $$095115$i + 1 | 0; //@line 11871
            break;
           } else {
            $$0 = $178 + $183 | 0; //@line 11875
            $$1$i = $$090117$i; //@line 11875
            $$196$i = $$095115$i; //@line 11875
            break;
           }
          }
         } while (0);
         $$094116$i = $$094116$i + 1 | 0; //@line 11880
         if (!(($$094116$i | 0) < ($120 | 0) & $$196$i >>> 0 < $3 >>> 0)) {
          $$089$i = $$196$i; //@line 11887
          break;
         } else {
          $$090117$i = $$1$i; //@line 11885
          $$095115$i = $$196$i; //@line 11885
          $143 = $$0; //@line 11885
         }
        }
       } else {
        $$089$i = 0; //@line 11892
       }
      } else {
       $$089$i = 0; //@line 11895
      }
      $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 11899
     }
    }
    _free($21); //@line 11902
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11903
    $261 = __ZN6Socket5closeEv($5) | 0; //@line 11904
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 108; //@line 11907
     HEAP32[$AsyncCtx37 + 4 >> 2] = $$355; //@line 11909
     HEAP32[$AsyncCtx37 + 8 >> 2] = $5; //@line 11911
     HEAP32[$AsyncCtx37 + 12 >> 2] = $5; //@line 11913
     sp = STACKTOP; //@line 11914
     STACKTOP = sp; //@line 11915
     return 0; //@line 11915
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 11917
     $$2 = ($261 | 0) == 0 ? $$355 : $261; //@line 11920
     break;
    }
   }
  } else {
   $$2 = $11; //@line 11925
  }
 } while (0);
 $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11928
 __ZN9UDPSocketD2Ev($5); //@line 11929
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 109; //@line 11932
  HEAP32[$AsyncCtx34 + 4 >> 2] = $5; //@line 11934
  HEAP32[$AsyncCtx34 + 8 >> 2] = $$2; //@line 11936
  sp = STACKTOP; //@line 11937
  STACKTOP = sp; //@line 11938
  return 0; //@line 11938
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 11940
 $$3 = $$2; //@line 11941
 STACKTOP = sp; //@line 11942
 return $$3 | 0; //@line 11942
}
function _sn_coap_builder_calc_needed_packet_data_size_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$$65$i = 0, $$0104 = 0, $$012$lcssa$i54$i = 0, $$012$lcssa$i54$i146 = 0, $$012$lcssa$i54$i181 = 0, $$012$lcssa$i54$i216 = 0, $$012$lcssa$i54$i238 = 0, $$01213$i$i = 0, $$01213$i$i142 = 0, $$01213$i$i177 = 0, $$01213$i$i212 = 0, $$01213$i$i234 = 0, $$014$i$i = 0, $$014$i$i141 = 0, $$014$i$i176 = 0, $$014$i$i211 = 0, $$014$i$i233 = 0, $$02441$i = 0, $$02441$i157 = 0, $$02441$i192 = 0, $$02441$i222 = 0, $$02441$i244 = 0, $$02540$i = 0, $$02540$i158 = 0, $$02540$i193 = 0, $$02540$i223 = 0, $$02540$i245 = 0, $$028$lcssa$i = 0, $$028$lcssa$i165 = 0, $$028$lcssa$i200 = 0, $$028$lcssa$i230 = 0, $$028$lcssa$i252 = 0, $$02839$i = 0, $$02839$i159 = 0, $$02839$i194 = 0, $$02839$i224 = 0, $$02839$i246 = 0, $$03138$i = 0, $$03138$i160 = 0, $$03138$i195 = 0, $$03138$i225 = 0, $$03138$i247 = 0, $$03239$i = 0, $$03239$i$us = 0, $$03239$i148 = 0, $$03239$i183 = 0, $$03239$i183$us = 0, $$03239$us$i = 0, $$03239$us46$i = 0, $$03239$us46$i$us = 0, $$03538$i = 0, $$03538$i$us = 0, $$03538$i149 = 0, $$03538$i184 = 0, $$03538$i184$us = 0, $$03538$us$i = 0, $$03538$us47$i = 0, $$03538$us47$i$us = 0, $$10 = 0, $$1058$i = 0, $$11 = 0, $$11$i = 0, $$1105 = 0, $$1159$i = 0, $$12 = 0, $$120$232$i = 0, $$120$232$i121 = 0, $$120$232$i129 = 0, $$120$232$i137 = 0, $$120$232$i172 = 0, $$120$232$i207 = 0, $$120$232$i259 = 0, $$120$232$i267 = 0, $$120$232$i275 = 0, $$120$3$i = 0, $$120$3$i122 = 0, $$120$3$i130 = 0, $$120$3$i138 = 0, $$120$3$i173 = 0, $$120$3$i208 = 0, $$120$3$i260 = 0, $$120$3$i268 = 0, $$120$3$i276 = 0, $$126$i = 0, $$126$i164 = 0, $$126$i199 = 0, $$126$i229 = 0, $$126$i251 = 0, $$1260$i = 0, $$129$i = 0, $$129$i163 = 0, $$129$i198 = 0, $$129$i228 = 0, $$129$i250 = 0, $$13 = 0, $$13$i = 0, $$133$i = 0, $$133$i152 = 0, $$133$i187 = 0, $$133$us49$i = 0, $$1361$i = 0, $$14 = 0, $$1462$i = 0, $$15 = 0, $$16 = 0, $$16$i = 0, $$17 = 0, $$18 = 0, $$2 = 0, $$2108 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$5$i = 0, $$553$$$i = 0, $$553$$$i$ = 0, $$553$$i = 0, $$6 = 0, $$7 = 0, $$7$i = 0, $$8 = 0, $$9 = 0, $$9$i = 0, $$957$i = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa294 = 0, $$lcssa295 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $115 = 0, $131 = 0, $133 = 0, $134 = 0, $136 = 0, $139 = 0, $149 = 0, $16 = 0, $17 = 0, $174 = 0, $186 = 0, $189 = 0, $19 = 0, $191 = 0, $194 = 0, $203 = 0, $208 = 0, $21 = 0, $224 = 0, $225 = 0, $234 = 0, $24 = 0, $249 = 0, $252 = 0, $254 = 0, $257 = 0, $266 = 0, $271 = 0, $287 = 0, $288 = 0, $297 = 0, $312 = 0, $315 = 0, $317 = 0, $320 = 0, $33 = 0, $330 = 0, $347 = 0, $356 = 0, $371 = 0, $375 = 0, $38 = 0, $389 = 0, $406 = 0, $418 = 0, $426 = 0, $428 = 0, $466 = 0, $474 = 0, $475 = 0, $504 = 0, $517 = 0, $54 = 0, $55 = 0, $64 = 0, $65 = 0, $79 = 0, $80 = 0, $82 = 0, $9 = 0, $97 = 0, $merge$i = 0, $narrow$i = 0, $phitmp$i$i = 0, $phitmp$i$i144 = 0, $phitmp$i$i179 = 0, $phitmp$i$i214 = 0, $phitmp$i$i236 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2998
 STACKTOP = STACKTOP + 112 | 0; //@line 2999
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 2999
 $vararg_buffer23 = sp + 96 | 0; //@line 3000
 $vararg_buffer21 = sp + 88 | 0; //@line 3001
 $vararg_buffer19 = sp + 80 | 0; //@line 3002
 $vararg_buffer17 = sp + 72 | 0; //@line 3003
 $vararg_buffer15 = sp + 64 | 0; //@line 3004
 $vararg_buffer13 = sp + 56 | 0; //@line 3005
 $vararg_buffer11 = sp + 48 | 0; //@line 3006
 $vararg_buffer9 = sp + 40 | 0; //@line 3007
 $vararg_buffer7 = sp + 32 | 0; //@line 3008
 $vararg_buffer5 = sp + 24 | 0; //@line 3009
 $vararg_buffer3 = sp + 16 | 0; //@line 3010
 $vararg_buffer1 = sp + 8 | 0; //@line 3011
 $vararg_buffer = sp; //@line 3012
 if (!$0) {
  $$2108 = 0; //@line 3015
  STACKTOP = sp; //@line 3016
  return $$2108 | 0; //@line 3016
 }
 if ((HEAP32[$0 + 12 >> 2] | 0) == 48) {
  $$2108 = 4; //@line 3022
  STACKTOP = sp; //@line 3023
  return $$2108 | 0; //@line 3023
 }
 do {
  if (!(HEAP32[$0 + 28 >> 2] | 0)) {
   $$0104 = 4; //@line 3030
  } else {
   $9 = HEAP8[$0 >> 0] | 0; //@line 3032
   if (($9 + -1 & 255) <= 7) {
    $$0104 = ($9 & 255) + 4 & 65535; //@line 3039
    break;
   }
   _mbed_tracef(2, 3737, 2726, $vararg_buffer); //@line 3042
   $$2108 = 0; //@line 3043
   STACKTOP = sp; //@line 3044
   return $$2108 | 0; //@line 3044
  }
 } while (0);
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3048
 $17 = ($16 | 0) == 0; //@line 3049
 L14 : do {
  if ($17) {
   $$1105 = $$0104; //@line 3052
  } else {
   $19 = HEAP16[$0 + 22 >> 1] | 0; //@line 3055
   $21 = ($19 & 65535) + -1 | 0; //@line 3057
   if (($19 & 65535) > 2) {
    $$01213$i$i = 0; //@line 3060
    $$014$i$i = 1; //@line 3060
    $24 = 1; //@line 3060
    do {
     $$01213$i$i = $$01213$i$i + ((HEAP8[$16 + $24 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 3066
     $$014$i$i = $$014$i$i + 1 << 16 >> 16; //@line 3067
     $24 = $$014$i$i & 65535; //@line 3068
    } while (($21 | 0) > ($24 | 0));
    $phitmp$i$i = $$01213$i$i + 1 << 24 >> 24; //@line 3076
    if ($phitmp$i$i << 24 >> 24) {
     $$012$lcssa$i54$i = $phitmp$i$i; //@line 3079
     label = 11; //@line 3080
    }
   } else {
    $$012$lcssa$i54$i = 1; //@line 3083
    label = 11; //@line 3084
   }
   L20 : do {
    if ((label | 0) == 11) {
     if (!($19 << 16 >> 16)) {
      $$03239$i$us = 0; //@line 3090
      $$03538$i$us = 0; //@line 3090
      do {
       $33 = $$03239$i$us + 1 | 0; //@line 3092
       $$03239$i$us = $33 & 65535; //@line 3093
       $$03538$i$us = $$03538$i$us + 1 << 24 >> 24; //@line 3094
      } while (($$03538$i$us & 255) < ($$012$lcssa$i54$i & 255));
      $$lcssa297 = $33 & 65535; //@line 3103
      $$lcssa298 = $$03239$i$us; //@line 3103
     } else {
      $$03239$i = 0; //@line 3105
      $$03538$i = 0; //@line 3105
      while (1) {
       $$02441$i = 0; //@line 3107
       $$02540$i = 0; //@line 3107
       $$02839$i = 0; //@line 3107
       $$03138$i = $16; //@line 3107
       while (1) {
        $38 = (HEAP8[$$03138$i >> 0] | 0) != 47; //@line 3110
        if ($$02839$i << 16 >> 16 == 0 | $38) {
         $$126$i = $$02540$i; //@line 3116
         $$129$i = $$02839$i + ($38 & 1) << 16 >> 16; //@line 3116
        } else {
         if ($$02540$i << 24 >> 24 == $$03538$i << 24 >> 24) {
          $$028$lcssa$i = $$02839$i; //@line 3120
          break;
         }
         $$126$i = $$02540$i + 1 << 24 >> 24; //@line 3124
         $$129$i = 0; //@line 3124
        }
        $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 3127
        if (($$02441$i & 65535) >= ($19 & 65535)) {
         $$028$lcssa$i = $$129$i; //@line 3132
         break;
        } else {
         $$02540$i = $$126$i; //@line 3130
         $$02839$i = $$129$i; //@line 3130
         $$03138$i = $$03138$i + 1 | 0; //@line 3130
        }
       }
       if (($$028$lcssa$i & 65535) > 255) {
        break L20;
       }
       if (($$028$lcssa$i & 65535) < 13) {
        $$133$i = $$03239$i + 1 << 16 >> 16; //@line 3144
       } else {
        $$133$i = ($$03239$i & 65535) + 2 & 65535; //@line 3149
       }
       $54 = ($$133$i & 65535) + ($$028$lcssa$i & 65535) | 0; //@line 3152
       $55 = $54 & 65535; //@line 3153
       $$03538$i = $$03538$i + 1 << 24 >> 24; //@line 3154
       if (($$03538$i & 255) >= ($$012$lcssa$i54$i & 255)) {
        $$lcssa297 = $55; //@line 3159
        $$lcssa298 = $54; //@line 3159
        break;
       } else {
        $$03239$i = $55; //@line 3157
       }
      }
     }
     if ($$lcssa297 << 16 >> 16) {
      $$1105 = $$lcssa298 + ($$0104 & 65535) & 65535; //@line 3169
      break L14;
     }
    }
   } while (0);
   _mbed_tracef(2, 3737, 2792, $vararg_buffer1); //@line 3174
   $$2108 = 0; //@line 3175
   STACKTOP = sp; //@line 3176
   return $$2108 | 0; //@line 3176
  }
 } while (0);
 $64 = HEAP32[$0 + 16 >> 2] | 0; //@line 3180
 $65 = ($64 | 0) == -1; //@line 3181
 if ($65) {
  $$2 = $$1105; //@line 3183
 } else {
  if ($64 >>> 0 > 65535) {
   _mbed_tracef(2, 3737, 2863, $vararg_buffer3); //@line 3187
   $$2108 = 0; //@line 3188
   STACKTOP = sp; //@line 3189
   return $$2108 | 0; //@line 3189
  }
  if ($64 << 8 >>> 0 > 16777215) {
   $$120$232$i275 = 3; //@line 3194
   label = 34; //@line 3195
  } else {
   if ($64 << 16 >>> 0 > 16777215) {
    $$120$232$i275 = 2; //@line 3200
    label = 34; //@line 3201
   } else {
    if ($64 << 24 >>> 0 > 16777215) {
     $$120$232$i275 = 1; //@line 3206
     label = 34; //@line 3207
    } else {
     $$120$3$i276 = 0; //@line 3209
    }
   }
  }
  if ((label | 0) == 34) {
   $$120$3$i276 = $$120$232$i275; //@line 3214
  }
  $$2 = ($$120$3$i276 + 1 & 255) + ($$1105 & 65535) & 65535; //@line 3221
 }
 $79 = HEAP32[$0 + 40 >> 2] | 0; //@line 3224
 $80 = ($79 | 0) == 0; //@line 3225
 do {
  if ($80) {
   $$18 = $$2; //@line 3228
  } else {
   $82 = HEAP32[$79 + 12 >> 2] | 0; //@line 3231
   if (($82 | 0) == -1) {
    $$3 = $$2; //@line 3234
   } else {
    if ($82 >>> 0 > 65535) {
     _mbed_tracef(2, 3737, 2938, $vararg_buffer5); //@line 3238
     $$2108 = 0; //@line 3239
     STACKTOP = sp; //@line 3240
     return $$2108 | 0; //@line 3240
    }
    if ($82 << 8 >>> 0 > 16777215) {
     $$120$232$i267 = 3; //@line 3245
     label = 43; //@line 3246
    } else {
     if ($82 << 16 >>> 0 > 16777215) {
      $$120$232$i267 = 2; //@line 3251
      label = 43; //@line 3252
     } else {
      if ($82 << 24 >>> 0 > 16777215) {
       $$120$232$i267 = 1; //@line 3257
       label = 43; //@line 3258
      } else {
       $$120$3$i268 = 0; //@line 3260
      }
     }
    }
    if ((label | 0) == 43) {
     $$120$3$i268 = $$120$232$i267; //@line 3265
    }
    $$3 = ($$120$3$i268 + 1 & 255) + ($$2 & 65535) & 65535; //@line 3272
   }
   $97 = HEAP32[$79 + 16 >> 2] | 0; //@line 3275
   if (($97 | 0) == 60) {
    $$4 = $$3; //@line 3278
   } else {
    if ($97 >>> 0 > 16777215) {
     $$120$232$i259 = 4; //@line 3282
     label = 50; //@line 3283
    } else {
     if ($97 << 8 >>> 0 > 16777215) {
      $$120$232$i259 = 3; //@line 3288
      label = 50; //@line 3289
     } else {
      if ($97 << 16 >>> 0 > 16777215) {
       $$120$232$i259 = 2; //@line 3294
       label = 50; //@line 3295
      } else {
       if ($97 << 24 >>> 0 > 16777215) {
        $$120$232$i259 = 1; //@line 3300
        label = 50; //@line 3301
       } else {
        $$120$3$i260 = 0; //@line 3303
       }
      }
     }
    }
    if ((label | 0) == 50) {
     $$120$3$i260 = $$120$232$i259; //@line 3309
    }
    $$4 = ($$120$3$i260 + 1 & 255) + ($$3 & 65535) & 65535; //@line 3316
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$6 = $$4; //@line 3322
   } else {
    $115 = HEAP16[$79 + 2 >> 1] | 0; //@line 3325
    do {
     if (($115 + -1 & 65535) < 12) {
      $$5 = $$4 + 1 << 16 >> 16; //@line 3331
     } else {
      if (($115 + -13 & 65535) < 257) {
       $$5 = ($$4 & 65535) + 2 & 65535; //@line 3339
       break;
      }
      if (($115 + -270 & 65535) < 765) {
       $$5 = ($$4 & 65535) + 3 & 65535; //@line 3348
       break;
      }
      _mbed_tracef(2, 3737, 3005, $vararg_buffer7); //@line 3351
      $$2108 = 0; //@line 3352
      STACKTOP = sp; //@line 3353
      return $$2108 | 0; //@line 3353
     }
    } while (0);
    $$6 = ($115 & 65535) + ($$5 & 65535) & 65535; //@line 3360
   }
   $131 = HEAP32[$79 + 48 >> 2] | 0; //@line 3363
   L98 : do {
    if (!$131) {
     $$7 = $$6; //@line 3367
    } else {
     $133 = HEAP8[$79 >> 0] | 0; //@line 3369
     $134 = $133 & 255; //@line 3370
     $136 = ($133 & 255) + -1 | 0; //@line 3372
     if (($133 & 255) > 2) {
      $$01213$i$i234 = 0; //@line 3375
      $$014$i$i233 = 1; //@line 3375
      $139 = 1; //@line 3375
      do {
       $$01213$i$i234 = $$01213$i$i234 + ((HEAP8[$131 + $139 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3381
       $$014$i$i233 = $$014$i$i233 + 1 << 16 >> 16; //@line 3382
       $139 = $$014$i$i233 & 65535; //@line 3383
      } while (($136 | 0) > ($139 | 0));
      $phitmp$i$i236 = $$01213$i$i234 + 1 << 24 >> 24; //@line 3391
      if ($phitmp$i$i236 << 24 >> 24) {
       $$012$lcssa$i54$i238 = $phitmp$i$i236; //@line 3394
       label = 65; //@line 3395
      }
     } else {
      $$012$lcssa$i54$i238 = 1; //@line 3398
      label = 65; //@line 3399
     }
     L104 : do {
      if ((label | 0) == 65) {
       if ($133 << 24 >> 24) {
        $$03239$us$i = 0; //@line 3405
        $$03538$us$i = 0; //@line 3405
        do {
         $$02441$i244 = 0; //@line 3407
         $$02540$i245 = 0; //@line 3407
         $$02839$i246 = 0; //@line 3407
         $$03138$i247 = $131; //@line 3407
         while (1) {
          $149 = (HEAP8[$$03138$i247 >> 0] | 0) != 38; //@line 3410
          if ($$02839$i246 << 16 >> 16 == 0 | $149) {
           $$126$i251 = $$02540$i245; //@line 3416
           $$129$i250 = $$02839$i246 + ($149 & 1) << 16 >> 16; //@line 3416
          } else {
           if ($$02540$i245 << 24 >> 24 == $$03538$us$i << 24 >> 24) {
            $$028$lcssa$i252 = $$02839$i246; //@line 3420
            break;
           }
           $$126$i251 = $$02540$i245 + 1 << 24 >> 24; //@line 3424
           $$129$i250 = 0; //@line 3424
          }
          $$02441$i244 = $$02441$i244 + 1 << 16 >> 16; //@line 3427
          if (($$02441$i244 & 65535) >= ($134 & 65535)) {
           $$028$lcssa$i252 = $$129$i250; //@line 3432
           break;
          } else {
           $$02540$i245 = $$126$i251; //@line 3430
           $$02839$i246 = $$129$i250; //@line 3430
           $$03138$i247 = $$03138$i247 + 1 | 0; //@line 3430
          }
         }
         if (($$028$lcssa$i252 + -1 & 65535) > 7) {
          break L104;
         }
         $$03239$us$i = ($$03239$us$i + 1 & 65535) + ($$028$lcssa$i252 & 65535) | 0; //@line 3444
         $$03538$us$i = $$03538$us$i + 1 << 24 >> 24; //@line 3445
        } while (($$03538$us$i & 255) < ($$012$lcssa$i54$i238 & 255));
        if (($$03239$us$i & 65535) << 16 >> 16) {
         $$7 = $$03239$us$i + ($$6 & 65535) & 65535; //@line 3459
         break L98;
        }
       }
      }
     } while (0);
     _mbed_tracef(2, 3737, 3075, $vararg_buffer9); //@line 3465
     $$2108 = 0; //@line 3466
     STACKTOP = sp; //@line 3467
     return $$2108 | 0; //@line 3467
    }
   } while (0);
   if (!(HEAP32[$79 + 52 >> 2] | 0)) {
    $$9 = $$7; //@line 3474
   } else {
    $174 = HEAP16[$79 + 4 >> 1] | 0; //@line 3477
    do {
     if (($174 + -1 & 65535) < 12) {
      $$8 = $$7 + 1 << 16 >> 16; //@line 3483
     } else {
      if (($174 + -13 & 65535) < 243) {
       $$8 = ($$7 & 65535) + 2 & 65535; //@line 3491
       break;
      }
      _mbed_tracef(2, 3737, 3140, $vararg_buffer11); //@line 3494
      $$2108 = 0; //@line 3495
      STACKTOP = sp; //@line 3496
      return $$2108 | 0; //@line 3496
     }
    } while (0);
    $$9 = ($174 & 65535) + ($$8 & 65535) & 65535; //@line 3503
   }
   $186 = HEAP32[$79 + 56 >> 2] | 0; //@line 3506
   L133 : do {
    if (!$186) {
     $$10 = $$9; //@line 3510
    } else {
     $189 = HEAP16[$79 + 6 >> 1] | 0; //@line 3513
     $191 = ($189 & 65535) + -1 | 0; //@line 3515
     if (($189 & 65535) > 2) {
      $$01213$i$i212 = 0; //@line 3518
      $$014$i$i211 = 1; //@line 3518
      $194 = 1; //@line 3518
      do {
       $$01213$i$i212 = $$01213$i$i212 + ((HEAP8[$186 + $194 >> 0] | 0) == 47 & 1) << 24 >> 24; //@line 3524
       $$014$i$i211 = $$014$i$i211 + 1 << 16 >> 16; //@line 3525
       $194 = $$014$i$i211 & 65535; //@line 3526
      } while (($191 | 0) > ($194 | 0));
      $phitmp$i$i214 = $$01213$i$i212 + 1 << 24 >> 24; //@line 3534
      if ($phitmp$i$i214 << 24 >> 24) {
       $$012$lcssa$i54$i216 = $phitmp$i$i214; //@line 3537
       label = 88; //@line 3538
      }
     } else {
      $$012$lcssa$i54$i216 = 1; //@line 3541
      label = 88; //@line 3542
     }
     L139 : do {
      if ((label | 0) == 88) {
       if (!($189 << 16 >> 16)) {
        $$03239$us46$i$us = 0; //@line 3548
        $$03538$us47$i$us = 0; //@line 3548
        do {
         $203 = $$03239$us46$i$us + 1 | 0; //@line 3550
         $$03239$us46$i$us = $203 & 65535; //@line 3551
         $$03538$us47$i$us = $$03538$us47$i$us + 1 << 24 >> 24; //@line 3552
        } while (($$03538$us47$i$us & 255) < ($$012$lcssa$i54$i216 & 255));
        $$lcssa294 = $203 & 65535; //@line 3561
        $$lcssa295 = $$03239$us46$i$us; //@line 3561
       } else {
        $$03239$us46$i = 0; //@line 3563
        $$03538$us47$i = 0; //@line 3563
        while (1) {
         $$02441$i222 = 0; //@line 3565
         $$02540$i223 = 0; //@line 3565
         $$02839$i224 = 0; //@line 3565
         $$03138$i225 = $186; //@line 3565
         while (1) {
          $208 = (HEAP8[$$03138$i225 >> 0] | 0) != 47; //@line 3568
          if ($$02839$i224 << 16 >> 16 == 0 | $208) {
           $$126$i229 = $$02540$i223; //@line 3574
           $$129$i228 = $$02839$i224 + ($208 & 1) << 16 >> 16; //@line 3574
          } else {
           if ($$02540$i223 << 24 >> 24 == $$03538$us47$i << 24 >> 24) {
            $$028$lcssa$i230 = $$02839$i224; //@line 3578
            break;
           }
           $$126$i229 = $$02540$i223 + 1 << 24 >> 24; //@line 3582
           $$129$i228 = 0; //@line 3582
          }
          $$02441$i222 = $$02441$i222 + 1 << 16 >> 16; //@line 3585
          if (($$02441$i222 & 65535) >= ($189 & 65535)) {
           $$028$lcssa$i230 = $$129$i228; //@line 3590
           break;
          } else {
           $$02540$i223 = $$126$i229; //@line 3588
           $$02839$i224 = $$129$i228; //@line 3588
           $$03138$i225 = $$03138$i225 + 1 | 0; //@line 3588
          }
         }
         if (($$028$lcssa$i230 & 65535) > 255) {
          break L139;
         }
         if (($$028$lcssa$i230 & 65535) < 13) {
          $$133$us49$i = $$03239$us46$i + 1 << 16 >> 16; //@line 3602
         } else {
          $$133$us49$i = ($$03239$us46$i & 65535) + 2 & 65535; //@line 3607
         }
         $224 = ($$133$us49$i & 65535) + ($$028$lcssa$i230 & 65535) | 0; //@line 3610
         $225 = $224 & 65535; //@line 3611
         $$03538$us47$i = $$03538$us47$i + 1 << 24 >> 24; //@line 3612
         if (($$03538$us47$i & 255) >= ($$012$lcssa$i54$i216 & 255)) {
          $$lcssa294 = $225; //@line 3617
          $$lcssa295 = $224; //@line 3617
          break;
         } else {
          $$03239$us46$i = $225; //@line 3615
         }
        }
       }
       if ($$lcssa294 << 16 >> 16) {
        $$10 = $$lcssa295 + ($$9 & 65535) & 65535; //@line 3627
        break L133;
       }
      }
     } while (0);
     _mbed_tracef(2, 3737, 3209, $vararg_buffer13); //@line 3632
     $$2108 = 0; //@line 3633
     STACKTOP = sp; //@line 3634
     return $$2108 | 0; //@line 3634
    }
   } while (0);
   $234 = HEAP32[$79 + 28 >> 2] | 0; //@line 3638
   if (($234 | 0) == -1) {
    $$11 = $$10; //@line 3641
   } else {
    if ($234 >>> 0 > 65535) {
     _mbed_tracef(2, 3737, 3283, $vararg_buffer15); //@line 3645
     $$2108 = 0; //@line 3646
     STACKTOP = sp; //@line 3647
     return $$2108 | 0; //@line 3647
    }
    if ($234 << 8 >>> 0 > 16777215) {
     $$120$232$i207 = 3; //@line 3652
     label = 111; //@line 3653
    } else {
     if ($234 << 16 >>> 0 > 16777215) {
      $$120$232$i207 = 2; //@line 3658
      label = 111; //@line 3659
     } else {
      if ($234 << 24 >>> 0 > 16777215) {
       $$120$232$i207 = 1; //@line 3664
       label = 111; //@line 3665
      } else {
       $$120$3$i208 = 0; //@line 3667
      }
     }
    }
    if ((label | 0) == 111) {
     $$120$3$i208 = $$120$232$i207; //@line 3672
    }
    $$11 = ($$120$3$i208 + 1 & 255) + ($$10 & 65535) & 65535; //@line 3679
   }
   $249 = HEAP32[$79 + 60 >> 2] | 0; //@line 3682
   L178 : do {
    if (!$249) {
     $$12 = $$11; //@line 3686
    } else {
     $252 = HEAP16[$79 + 8 >> 1] | 0; //@line 3689
     $254 = ($252 & 65535) + -1 | 0; //@line 3691
     if (($252 & 65535) > 2) {
      $$01213$i$i177 = 0; //@line 3694
      $$014$i$i176 = 1; //@line 3694
      $257 = 1; //@line 3694
      do {
       $$01213$i$i177 = $$01213$i$i177 + ((HEAP8[$249 + $257 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3700
       $$014$i$i176 = $$014$i$i176 + 1 << 16 >> 16; //@line 3701
       $257 = $$014$i$i176 & 65535; //@line 3702
      } while (($254 | 0) > ($257 | 0));
      $phitmp$i$i179 = $$01213$i$i177 + 1 << 24 >> 24; //@line 3710
      if ($phitmp$i$i179 << 24 >> 24) {
       $$012$lcssa$i54$i181 = $phitmp$i$i179; //@line 3713
       label = 117; //@line 3714
      }
     } else {
      $$012$lcssa$i54$i181 = 1; //@line 3717
      label = 117; //@line 3718
     }
     L184 : do {
      if ((label | 0) == 117) {
       if (!($252 << 16 >> 16)) {
        $$03239$i183$us = 0; //@line 3724
        $$03538$i184$us = 0; //@line 3724
        do {
         $266 = $$03239$i183$us + 1 | 0; //@line 3726
         $$03239$i183$us = $266 & 65535; //@line 3727
         $$03538$i184$us = $$03538$i184$us + 1 << 24 >> 24; //@line 3728
        } while (($$03538$i184$us & 255) < ($$012$lcssa$i54$i181 & 255));
        $$lcssa292 = $266 & 65535; //@line 3737
        $$lcssa293 = $$03239$i183$us; //@line 3737
       } else {
        $$03239$i183 = 0; //@line 3739
        $$03538$i184 = 0; //@line 3739
        while (1) {
         $$02441$i192 = 0; //@line 3741
         $$02540$i193 = 0; //@line 3741
         $$02839$i194 = 0; //@line 3741
         $$03138$i195 = $249; //@line 3741
         while (1) {
          $271 = (HEAP8[$$03138$i195 >> 0] | 0) != 38; //@line 3744
          if ($$02839$i194 << 16 >> 16 == 0 | $271) {
           $$126$i199 = $$02540$i193; //@line 3750
           $$129$i198 = $$02839$i194 + ($271 & 1) << 16 >> 16; //@line 3750
          } else {
           if ($$02540$i193 << 24 >> 24 == $$03538$i184 << 24 >> 24) {
            $$028$lcssa$i200 = $$02839$i194; //@line 3754
            break;
           }
           $$126$i199 = $$02540$i193 + 1 << 24 >> 24; //@line 3758
           $$129$i198 = 0; //@line 3758
          }
          $$02441$i192 = $$02441$i192 + 1 << 16 >> 16; //@line 3761
          if (($$02441$i192 & 65535) >= ($252 & 65535)) {
           $$028$lcssa$i200 = $$129$i198; //@line 3766
           break;
          } else {
           $$02540$i193 = $$126$i199; //@line 3764
           $$02839$i194 = $$129$i198; //@line 3764
           $$03138$i195 = $$03138$i195 + 1 | 0; //@line 3764
          }
         }
         if (($$028$lcssa$i200 & 65535) > 255) {
          break L184;
         }
         if (($$028$lcssa$i200 & 65535) < 13) {
          $$133$i187 = $$03239$i183 + 1 << 16 >> 16; //@line 3778
         } else {
          $$133$i187 = ($$03239$i183 & 65535) + 2 & 65535; //@line 3783
         }
         $287 = ($$133$i187 & 65535) + ($$028$lcssa$i200 & 65535) | 0; //@line 3786
         $288 = $287 & 65535; //@line 3787
         $$03538$i184 = $$03538$i184 + 1 << 24 >> 24; //@line 3788
         if (($$03538$i184 & 255) >= ($$012$lcssa$i54$i181 & 255)) {
          $$lcssa292 = $288; //@line 3793
          $$lcssa293 = $287; //@line 3793
          break;
         } else {
          $$03239$i183 = $288; //@line 3791
         }
        }
       }
       if ($$lcssa292 << 16 >> 16) {
        $$12 = $$lcssa293 + ($$11 & 65535) & 65535; //@line 3803
        break L178;
       }
      }
     } while (0);
     _mbed_tracef(2, 3737, 3352, $vararg_buffer17); //@line 3808
     $$2108 = 0; //@line 3809
     STACKTOP = sp; //@line 3810
     return $$2108 | 0; //@line 3810
    }
   } while (0);
   $297 = HEAP32[$79 + 32 >> 2] | 0; //@line 3814
   if (($297 | 0) == -1) {
    $$13 = $$12; //@line 3817
   } else {
    if ($297 >>> 0 > 16777215) {
     $$2108 = 0; //@line 3821
     STACKTOP = sp; //@line 3822
     return $$2108 | 0; //@line 3822
    }
    do {
     if ($297 << 8 >>> 0 > 16777215) {
      $$120$232$i172 = 3; //@line 3828
      label = 139; //@line 3829
     } else {
      if ($297 << 16 >>> 0 > 16777215) {
       $$120$232$i172 = 2; //@line 3834
       label = 139; //@line 3835
       break;
      }
      if ($297 << 24 >>> 0 > 16777215) {
       $$120$232$i172 = 1; //@line 3841
       label = 139; //@line 3842
      } else {
       $$120$3$i173 = 0; //@line 3844
      }
     }
    } while (0);
    if ((label | 0) == 139) {
     $$120$3$i173 = $$120$232$i172; //@line 3849
    }
    $$13 = ($$120$3$i173 + 1 & 255) + ($$12 & 65535) & 65535; //@line 3856
   }
   $312 = HEAP32[$79 + 64 >> 2] | 0; //@line 3859
   L222 : do {
    if (!$312) {
     $$14 = $$13; //@line 3863
    } else {
     $315 = HEAP16[$79 + 10 >> 1] | 0; //@line 3866
     $317 = ($315 & 65535) + -1 | 0; //@line 3868
     if (($315 & 65535) > 2) {
      $$01213$i$i142 = 0; //@line 3871
      $$014$i$i141 = 1; //@line 3871
      $320 = 1; //@line 3871
      do {
       $$01213$i$i142 = $$01213$i$i142 + ((HEAP8[$312 + $320 >> 0] | 0) == 38 & 1) << 24 >> 24; //@line 3877
       $$014$i$i141 = $$014$i$i141 + 1 << 16 >> 16; //@line 3878
       $320 = $$014$i$i141 & 65535; //@line 3879
      } while (($317 | 0) > ($320 | 0));
      $phitmp$i$i144 = $$01213$i$i142 + 1 << 24 >> 24; //@line 3887
      if ($phitmp$i$i144 << 24 >> 24) {
       $$012$lcssa$i54$i146 = $phitmp$i$i144; //@line 3890
       label = 145; //@line 3891
      }
     } else {
      $$012$lcssa$i54$i146 = 1; //@line 3894
      label = 145; //@line 3895
     }
     L228 : do {
      if ((label | 0) == 145) {
       if (!($315 << 16 >> 16)) {
        break;
       } else {
        $$03239$i148 = 0; //@line 3903
        $$03538$i149 = 0; //@line 3903
       }
       do {
        $$02441$i157 = 0; //@line 3906
        $$02540$i158 = 0; //@line 3906
        $$02839$i159 = 0; //@line 3906
        $$03138$i160 = $312; //@line 3906
        while (1) {
         $330 = (HEAP8[$$03138$i160 >> 0] | 0) != 38; //@line 3909
         if ($$02839$i159 << 16 >> 16 == 0 | $330) {
          $$126$i164 = $$02540$i158; //@line 3915
          $$129$i163 = $$02839$i159 + ($330 & 1) << 16 >> 16; //@line 3915
         } else {
          if ($$02540$i158 << 24 >> 24 == $$03538$i149 << 24 >> 24) {
           $$028$lcssa$i165 = $$02839$i159; //@line 3919
           break;
          }
          $$126$i164 = $$02540$i158 + 1 << 24 >> 24; //@line 3923
          $$129$i163 = 0; //@line 3923
         }
         $$02441$i157 = $$02441$i157 + 1 << 16 >> 16; //@line 3926
         if (($$02441$i157 & 65535) >= ($315 & 65535)) {
          $$028$lcssa$i165 = $$129$i163; //@line 3931
          break;
         } else {
          $$02540$i158 = $$126$i164; //@line 3929
          $$02839$i159 = $$129$i163; //@line 3929
          $$03138$i160 = $$03138$i160 + 1 | 0; //@line 3929
         }
        }
        if (($$028$lcssa$i165 + -1 & 65535) > 254) {
         break L228;
        }
        if (($$028$lcssa$i165 & 65535) < 13) {
         $$133$i152 = $$03239$i148 + 1 << 16 >> 16; //@line 3944
        } else {
         $$133$i152 = ($$03239$i148 & 65535) + 2 & 65535; //@line 3949
        }
        $347 = ($$133$i152 & 65535) + ($$028$lcssa$i165 & 65535) | 0; //@line 3952
        $$03239$i148 = $347 & 65535; //@line 3953
        $$03538$i149 = $$03538$i149 + 1 << 24 >> 24; //@line 3954
       } while (($$03538$i149 & 255) < ($$012$lcssa$i54$i146 & 255));
       if (!($$03239$i148 << 16 >> 16)) {
        break;
       }
       $$14 = $347 + ($$13 & 65535) & 65535; //@line 3969
       break L222;
      }
     } while (0);
     _mbed_tracef(2, 3737, 3427, $vararg_buffer19); //@line 3973
     $$2108 = 0; //@line 3974
     STACKTOP = sp; //@line 3975
     return $$2108 | 0; //@line 3975
    }
   } while (0);
   $356 = HEAP32[$79 + 36 >> 2] | 0; //@line 3979
   if (($356 | 0) == -1) {
    $$15 = $$14; //@line 3982
   } else {
    if ($356 >>> 0 > 16777215) {
     _mbed_tracef(2, 3737, 3495, $vararg_buffer21); //@line 3986
     $$2108 = 0; //@line 3987
     STACKTOP = sp; //@line 3988
     return $$2108 | 0; //@line 3988
    }
    do {
     if ($356 << 8 >>> 0 > 16777215) {
      $$120$232$i137 = 3; //@line 3994
      label = 166; //@line 3995
     } else {
      if ($356 << 16 >>> 0 > 16777215) {
       $$120$232$i137 = 2; //@line 4000
       label = 166; //@line 4001
       break;
      }
      if ($356 << 24 >>> 0 > 16777215) {
       $$120$232$i137 = 1; //@line 4007
       label = 166; //@line 4008
      } else {
       $$120$3$i138 = 0; //@line 4010
      }
     }
    } while (0);
    if ((label | 0) == 166) {
     $$120$3$i138 = $$120$232$i137; //@line 4015
    }
    $$15 = ($$120$3$i138 + 1 & 255) + ($$14 & 65535) & 65535; //@line 4022
   }
   $371 = HEAP8[$79 + 1 >> 0] | 0; //@line 4025
   if (!($371 & 1)) {
    $$16 = $$15; //@line 4029
   } else {
    $375 = HEAP32[$79 + 20 >> 2] | 0; //@line 4032
    do {
     if ($375 >>> 0 > 16777215) {
      $$120$232$i129 = 4; //@line 4036
      label = 173; //@line 4037
     } else {
      if ($375 << 8 >>> 0 > 16777215) {
       $$120$232$i129 = 3; //@line 4042
       label = 173; //@line 4043
       break;
      }
      if ($375 << 16 >>> 0 > 16777215) {
       $$120$232$i129 = 2; //@line 4049
       label = 173; //@line 4050
       break;
      }
      if ($375 << 24 >>> 0 > 16777215) {
       $$120$232$i129 = 1; //@line 4056
       label = 173; //@line 4057
      } else {
       $$120$3$i130 = 0; //@line 4059
      }
     }
    } while (0);
    if ((label | 0) == 173) {
     $$120$3$i130 = $$120$232$i129; //@line 4064
    }
    $$16 = ($$120$3$i130 + 1 & 255) + ($$15 & 65535) & 65535; //@line 4071
   }
   $389 = HEAP32[$79 + 40 >> 2] | 0; //@line 4074
   if (($389 | 0) == -1) {
    $$17 = $$16; //@line 4077
   } else {
    if ($389 >>> 0 > 16777215) {
     _mbed_tracef(2, 3737, 3562, $vararg_buffer23); //@line 4081
     $$2108 = 0; //@line 4082
     STACKTOP = sp; //@line 4083
     return $$2108 | 0; //@line 4083
    }
    do {
     if ($389 << 8 >>> 0 > 16777215) {
      $$120$232$i121 = 3; //@line 4089
      label = 181; //@line 4090
     } else {
      if ($389 << 16 >>> 0 > 16777215) {
       $$120$232$i121 = 2; //@line 4095
       label = 181; //@line 4096
       break;
      }
      if ($389 << 24 >>> 0 > 16777215) {
       $$120$232$i121 = 1; //@line 4102
       label = 181; //@line 4103
      } else {
       $$120$3$i122 = 0; //@line 4105
      }
     }
    } while (0);
    if ((label | 0) == 181) {
     $$120$3$i122 = $$120$232$i121; //@line 4110
    }
    $$17 = ($$120$3$i122 + 1 & 255) + ($$16 & 65535) & 65535; //@line 4117
   }
   if (!($371 & 2)) {
    $$18 = $$17; //@line 4122
    break;
   }
   $406 = HEAP32[$79 + 24 >> 2] | 0; //@line 4126
   do {
    if ($406 >>> 0 > 16777215) {
     $$120$232$i = 5; //@line 4130
     label = 188; //@line 4131
    } else {
     if ($406 << 8 >>> 0 > 16777215) {
      $$120$232$i = 4; //@line 4136
      label = 188; //@line 4137
      break;
     }
     if ($406 << 16 >>> 0 > 16777215) {
      $$120$232$i = 3; //@line 4143
      label = 188; //@line 4144
      break;
     }
     if ($406 << 24 >>> 0 > 16777215) {
      $$120$232$i = 2; //@line 4150
      label = 188; //@line 4151
     } else {
      $$120$3$i = 1; //@line 4153
     }
    }
   } while (0);
   if ((label | 0) == 188) {
    $$120$3$i = $$120$232$i; //@line 4158
   }
   $$18 = $$120$3$i + ($$17 & 65535) & 65535; //@line 4163
  }
 } while (0);
 $418 = HEAP16[$0 + 24 >> 1] | 0; //@line 4167
 $$ = ($418 & 65535) + ($$18 & 65535) + ($418 << 16 >> 16 != 0 & 1) | 0; //@line 4173
 do {
  if ($80) {
   $merge$i = 0; //@line 4176
  } else {
   $426 = (HEAP32[$79 + 64 >> 2] | 0) == 0; //@line 4180
   $428 = HEAP32[$79 + 12 >> 2] | 0; //@line 4182
   if ($426 & ($428 | 0) == -1) {
    if (!(HEAP32[$79 + 60 >> 2] | 0)) {
     if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
      if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
       if (!(HEAP32[$79 + 44 >> 2] | 0)) {
        if ((HEAP32[$79 + 16 >> 2] | 0) == 60) {
         if (!(HEAP8[$79 + 1 >> 0] & 3)) {
          $merge$i = 0; //@line 4211
          break;
         } else {
          $475 = -1; //@line 4214
         }
        } else {
         $475 = -1; //@line 4217
        }
       } else {
        $475 = -1; //@line 4220
       }
      } else {
       $475 = -1; //@line 4223
      }
     } else {
      $475 = -1; //@line 4226
     }
    } else {
     $475 = -1; //@line 4229
    }
   } else {
    $475 = $428; //@line 4232
   }
   $$553$$i = $65 ? $17 ? (HEAP32[$79 + 56 >> 2] | 0) == 0 ? (HEAP32[$79 + 28 >> 2] | 0) == -1 ? (HEAP32[$79 + 32 >> 2] | 0) == -1 ? (HEAP32[$79 + 48 >> 2] | 0) == 0 ? (HEAP32[$79 + 52 >> 2] | 0) == 0 ? 0 : 3 : 4 : 6 : 7 : 8 : 11 : 12; //@line 4255
   $466 = (HEAP32[$79 + 16 >> 2] | 0) == 60; //@line 4258
   $$553$$$i = $466 ? $$553$$i : 14; //@line 4262
   $narrow$i = (14 - ($$553$$i & 255) | 0) > 12 & ($466 ^ 1); //@line 4264
   $$$65$i = $narrow$i & 1; //@line 4265
   $$553$$$i$ = $426 ? $$553$$$i : 15; //@line 4271
   $474 = ($475 | 0) == -1; //@line 4273
   $$957$i = $474 ? $$553$$$i$ : 17; //@line 4277
   $$5$i = ($426 ? $$$65$i : (15 - ($$553$$$i & 255) | 0) > 12 ? $narrow$i ? 2 : 1 : $$$65$i) + ((17 - ($$553$$$i$ & 255) | 0) > 12 & ($474 ^ 1) & 1) << 24 >> 24; //@line 4281
   if (!(HEAP32[$79 + 60 >> 2] | 0)) {
    $$1058$i = $$957$i; //@line 4286
    $$7$i = $$5$i; //@line 4286
   } else {
    $$1058$i = 20; //@line 4293
    $$7$i = $$5$i + ((20 - ($$957$i & 255) | 0) > 12 & 1) << 24 >> 24; //@line 4293
   }
   if ((HEAP32[$79 + 40 >> 2] | 0) == -1) {
    $$1159$i = $$1058$i; //@line 4299
    $$9$i = $$7$i; //@line 4299
   } else {
    if ((23 - ($$1058$i & 255) | 0) > 12) {
     $$1159$i = 23; //@line 4308
     $$9$i = ($$7$i & 255) + 1 & 255; //@line 4308
    } else {
     $$1159$i = 23; //@line 4310
     $$9$i = $$7$i; //@line 4310
    }
   }
   if ((HEAP32[$79 + 36 >> 2] | 0) == -1) {
    $$11$i = $$9$i; //@line 4317
    $$1260$i = $$1159$i; //@line 4317
   } else {
    if ((27 - ($$1159$i & 255) | 0) > 12) {
     $$11$i = ($$9$i & 255) + 1 & 255; //@line 4326
     $$1260$i = 27; //@line 4326
    } else {
     $$11$i = $$9$i; //@line 4328
     $$1260$i = 27; //@line 4328
    }
   }
   $504 = HEAP8[$79 + 1 >> 0] | 0; //@line 4332
   if (!($504 & 2)) {
    $$13$i = $$11$i; //@line 4336
    $$1361$i = $$1260$i; //@line 4336
   } else {
    if ((28 - ($$1260$i & 255) | 0) > 12) {
     $$13$i = ($$11$i & 255) + 1 & 255; //@line 4345
     $$1361$i = 28; //@line 4345
    } else {
     $$13$i = $$11$i; //@line 4347
     $$1361$i = 28; //@line 4347
    }
   }
   if (!(HEAP32[$79 + 44 >> 2] | 0)) {
    $$1462$i = $$1361$i; //@line 4354
    $$16$i = $$13$i; //@line 4354
   } else {
    $517 = 35 - ($$1361$i & 255) | 0; //@line 4357
    if (($517 | 0) > 12) {
     if (($517 | 0) > 269) {
      $$1462$i = 35; //@line 4369
      $$16$i = ($$13$i + 1 & 255) + 1 & 255; //@line 4369
     } else {
      $$1462$i = 35; //@line 4371
      $$16$i = ($$13$i & 255) + 1 & 255; //@line 4371
     }
    } else {
     $$1462$i = 35; //@line 4374
     $$16$i = $$13$i; //@line 4374
    }
   }
   if (!($504 & 1)) {
    $merge$i = $$16$i; //@line 4380
   } else {
    if ((60 - ($$1462$i & 255) | 0) > 12) {
     $merge$i = ($$16$i & 255) + 1 & 255; //@line 4389
    } else {
     $merge$i = $$16$i; //@line 4391
    }
   }
  }
 } while (0);
 $$2108 = $$ + ($merge$i & 255) & 65535; //@line 4399
 STACKTOP = sp; //@line 4400
 return $$2108 | 0; //@line 4400
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18785
 STACKTOP = STACKTOP + 288 | 0; //@line 18786
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 18786
 $3 = sp + 8 | 0; //@line 18787
 $4 = sp + 17 | 0; //@line 18788
 $5 = sp; //@line 18789
 $6 = sp + 16 | 0; //@line 18790
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 18796
 } else {
  $314 = 0; //@line 18798
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 18800
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 18804
  } else {
   $13 = $0 + 4 | 0; //@line 18806
   $14 = $0 + 100 | 0; //@line 18807
   $15 = $0 + 108 | 0; //@line 18808
   $16 = $0 + 8 | 0; //@line 18809
   $17 = $4 + 10 | 0; //@line 18810
   $18 = $4 + 33 | 0; //@line 18811
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 18812
   $$0273408 = $1; //@line 18813
   $$0283407 = 0; //@line 18813
   $$0288404 = 0; //@line 18813
   $$0305402 = 0; //@line 18813
   $20 = $11; //@line 18813
   $315 = 0; //@line 18813
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 18821
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 18824
        $52 = HEAP8[$51 >> 0] | 0; //@line 18825
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 18834
           $$2275 = $$0273408 + 2 | 0; //@line 18834
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 18851
             $$2275 = $$0273408 + 3 | 0; //@line 18851
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 18866
           $91 = HEAP32[$90 >> 2] | 0; //@line 18867
           HEAP32[$2 >> 2] = $90 + 4; //@line 18869
           $$0293 = $91; //@line 18870
           $$2275 = $51; //@line 18870
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 18879
         $$3$lcssa = $$2275; //@line 18879
        } else {
         $$0266397 = 0; //@line 18881
         $$3396 = $$2275; //@line 18881
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 18887
          $101 = $$3396 + 1 | 0; //@line 18888
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 18894
           $$3$lcssa = $101; //@line 18894
           break;
          } else {
           $$0266397 = $100; //@line 18897
           $$3396 = $101; //@line 18897
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 18901
        $108 = $$3$lcssa + 1 | 0; //@line 18903
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 18908
         $$1306 = 0; //@line 18908
         $$4 = $108; //@line 18908
         $112 = HEAP8[$108 >> 0] | 0; //@line 18908
         $318 = 0; //@line 18908
        } else {
         $$0270 = 0; //@line 18910
         $$1306 = $$0305402; //@line 18910
         $$4 = $$3$lcssa; //@line 18910
         $112 = $106; //@line 18910
         $318 = $315; //@line 18910
        }
        $111 = $$4 + 1 | 0; //@line 18912
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 18916
          $$0268 = $114 ? -2 : -1; //@line 18920
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 18920
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 18925
          $$0268 = $117 ? 3 : 1; //@line 18929
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 18929
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 18933
          $$5 = $111; //@line 18933
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 18937
          $$5 = $111; //@line 18937
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 18941
          $$5 = $111; //@line 18941
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 18945
          $$5 = $$4; //@line 18945
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 18949
          $319 = $318; //@line 18949
          label = 136; //@line 18950
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 18955
        $122 = ($120 & 47 | 0) == 3; //@line 18957
        $$ = $122 ? $120 | 32 : $120; //@line 18959
        $$$0268 = $122 ? 1 : $$0268; //@line 18960
        $trunc = $$ & 255; //@line 18961
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 18966
          $$1284 = $$0283407; //@line 18966
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 18970
          $$1284 = $$0283407; //@line 18970
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 18976
          $$11 = $$5; //@line 18977
          $$1289 = $$0288404; //@line 18977
          $$2285 = $$0283407; //@line 18977
          $$6311 = $$1306; //@line 18977
          $316 = $318; //@line 18977
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 18982
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 18984
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 18989
            $134 = HEAPU8[$127 >> 0] | 0; //@line 18992
           } else {
            $134 = ___shgetc($0) | 0; //@line 18995
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 19007
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 19010
           HEAP32[$13 >> 2] = $140; //@line 19011
           $146 = $140; //@line 19013
          }
          $$1267 = $$0266$lcssa; //@line 19020
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 19020
         }
        }
        ___shlim($0, $$1267); //@line 19023
        $148 = HEAP32[$13 >> 2] | 0; //@line 19024
        $149 = HEAP32[$14 >> 2] | 0; //@line 19025
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 19029
         $155 = $149; //@line 19030
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 19035
          $319 = $318; //@line 19035
          label = 136; //@line 19036
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 19040
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 19046
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 19051
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 19057
             HEAP8[$4 >> 0] = 0; //@line 19058
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 19060
              HEAP8[$17 >> 0] = 0; //@line 19061
              HEAP8[$17 + 1 >> 0] = 0; //@line 19061
              HEAP8[$17 + 2 >> 0] = 0; //@line 19061
              HEAP8[$17 + 3 >> 0] = 0; //@line 19061
              HEAP8[$17 + 4 >> 0] = 0; //@line 19061
              $$9 = $$5; //@line 19062
             } else {
              $$9 = $$5; //@line 19064
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 19067
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 19069
             $$0292 = $164 & 1; //@line 19071
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 19072
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 19073
             HEAP8[$4 >> 0] = 0; //@line 19074
             $166 = HEAP8[$$6 >> 0] | 0; //@line 19075
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 19078
               $$sink330 = 46; //@line 19078
               label = 65; //@line 19079
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 19083
               $$sink330 = 94; //@line 19083
               label = 65; //@line 19084
               break;
              }
             default:
              {
               $$7 = $$6; //@line 19088
               $168 = $166; //@line 19088
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 19093
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 19097
               $$7$ph = $$6$pn + 1 | 0; //@line 19098
               $$7 = $$7$ph; //@line 19100
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 19100
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 19105
                 $319 = $318; //@line 19105
                 label = 136; //@line 19106
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 19111
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 19116
                 $170 = HEAP8[$169 >> 0] | 0; //@line 19117
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 19120
                   $183 = 45; //@line 19120
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 19128
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 19133
                  $$0286399 = $172 & 255; //@line 19134
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 19136
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 19138
                   $179 = HEAP8[$169 >> 0] | 0; //@line 19139
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 19145
                  $183 = $179; //@line 19145
                 } else {
                  $$8 = $169; //@line 19150
                  $183 = $170; //@line 19150
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 19155
                 $183 = $168; //@line 19155
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 19161
              $$sink330 = ($183 & 255) + 1 | 0; //@line 19161
              label = 65; //@line 19162
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 19167
           $187 = ($$$0268 | 0) == 1; //@line 19168
           $188 = ($$0270 | 0) != 0; //@line 19169
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 19174
              if (!$190) {
               $$7312 = 0; //@line 19177
               $319 = 0; //@line 19177
               label = 136; //@line 19178
               break L6;
              } else {
               $321 = $190; //@line 19181
              }
             } else {
              $321 = $$0293; //@line 19184
             }
             HEAP32[$3 >> 2] = 0; //@line 19186
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 19187
             $$0276$ph = $186; //@line 19188
             $$0278$ph = 0; //@line 19188
             $$ph = $321; //@line 19188
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 19190
              $$0278$ph336 = $$0278$ph; //@line 19191
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 19194
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 19199
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 19202
                } else {
                 $201 = ___shgetc($0) | 0; //@line 19205
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 19215
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 19219
                  $319 = $$ph; //@line 19219
                  label = 136; //@line 19220
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 19233
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 19238
                $$1279 = $$0278$ph336 + 1 | 0; //@line 19239
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 19246
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 19250
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 19252
              if (!$213) {
               $$7312 = 0; //@line 19255
               $319 = $$ph; //@line 19255
               label = 136; //@line 19256
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 19259
               $$0276$ph = $211; //@line 19259
               $$ph = $213; //@line 19259
               $$0278$ph = $$0278$ph$phi; //@line 19259
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 19265
              $319 = $$ph; //@line 19265
              label = 136; //@line 19266
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 19269
              $$4309 = 0; //@line 19269
              $$5299 = $$ph; //@line 19269
              $322 = $$ph; //@line 19269
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 19273
              if (!$217) {
               $$7312 = 0; //@line 19276
               $319 = 0; //@line 19276
               label = 136; //@line 19277
               break L6;
              } else {
               $$1277$ph = $186; //@line 19280
               $$2280$ph = 0; //@line 19280
               $$2307$ph = $217; //@line 19280
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 19283
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 19285
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 19290
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 19293
                } else {
                 $227 = ___shgetc($0) | 0; //@line 19296
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 19303
                 $$4309 = $$2307$ph; //@line 19303
                 $$5299 = 0; //@line 19303
                 $322 = 0; //@line 19303
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 19309
                $$2280 = $$2280 + 1 | 0; //@line 19307
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 19318
               $236 = _realloc($$2307$ph, $235) | 0; //@line 19319
               if (!$236) {
                $$7312 = $$2307$ph; //@line 19322
                $319 = 0; //@line 19322
                label = 136; //@line 19323
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 19326
                $$1277$ph = $235; //@line 19326
                $$2307$ph = $236; //@line 19326
                $$2280$ph = $$2280$ph$phi; //@line 19326
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 19333
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 19338
                $262 = HEAPU8[$254 >> 0] | 0; //@line 19341
               } else {
                $262 = ___shgetc($0) | 0; //@line 19344
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 19351
                $$4309 = 0; //@line 19351
                $$5299 = 0; //@line 19351
                $322 = 0; //@line 19351
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 19356
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 19359
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 19364
               $247 = HEAPU8[$239 >> 0] | 0; //@line 19367
              } else {
               $247 = ___shgetc($0) | 0; //@line 19370
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 19377
               $$4309 = $$0293; //@line 19377
               $$5299 = 0; //@line 19377
               $322 = 0; //@line 19377
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 19383
              $$3281 = $$3281 + 1 | 0; //@line 19384
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 19392
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 19395
            HEAP32[$13 >> 2] = $269; //@line 19396
            $274 = $269; //@line 19398
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 19403
           if (!$275) {
            $$2 = $$0270; //@line 19406
            $$2290 = $$0288404; //@line 19406
            $$9314 = $$4309; //@line 19406
            $312 = $322; //@line 19406
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 19413
            $$2290 = $$0288404; //@line 19413
            $$9314 = $$4309; //@line 19413
            $312 = $322; //@line 19413
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 19419
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 19422
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 19428
            $$5310 = $$4309; //@line 19428
            $320 = $322; //@line 19428
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 19433
            }
            if (!$$4309) {
             $$10 = $$9; //@line 19437
             $$5310 = 0; //@line 19437
             $320 = $322; //@line 19437
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 19441
            $$10 = $$9; //@line 19442
            $$5310 = $$4309; //@line 19442
            $320 = $322; //@line 19442
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 19447
           label = 124; //@line 19448
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 19452
           label = 124; //@line 19453
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 19457
           label = 124; //@line 19458
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 19462
           label = 124; //@line 19463
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 19467
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 19474
            $$2290 = $$0288404; //@line 19474
            $$9314 = $$1306; //@line 19474
            $312 = $318; //@line 19474
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 19479
            $$5310 = $$1306; //@line 19479
            $320 = $318; //@line 19479
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 19484
              $$10 = $$5; //@line 19485
              $$5310 = $$1306; //@line 19485
              $320 = $318; //@line 19485
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 19490
              $$10 = $$5; //@line 19491
              $$5310 = $$1306; //@line 19491
              $320 = $318; //@line 19491
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 19496
              $$10 = $$5; //@line 19497
              $$5310 = $$1306; //@line 19497
              $320 = $318; //@line 19497
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 19502
              $$5310 = $$1306; //@line 19502
              $320 = $318; //@line 19502
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 19510
           $$5310 = $$1306; //@line 19510
           $320 = $318; //@line 19510
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 19516
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 19517
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 19525
           $$2290 = $$0288404; //@line 19525
           $$9314 = $$1306; //@line 19525
           $312 = $318; //@line 19525
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 19533
           $$10 = $$5; //@line 19534
           $$5310 = $$1306; //@line 19534
           $320 = $318; //@line 19534
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 19537
           $$10 = $$5; //@line 19538
           $$5310 = $$1306; //@line 19538
           $320 = $318; //@line 19538
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 19552
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 19552
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 19552
        $$6311 = $$5310; //@line 19552
        $316 = $320; //@line 19552
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 19557
      ___shlim($0, 0); //@line 19558
      $55 = HEAP32[$13 >> 2] | 0; //@line 19559
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 19564
       $65 = HEAPU8[$55 >> 0] | 0; //@line 19567
      } else {
       $65 = ___shgetc($0) | 0; //@line 19570
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 19576
       break L6;
      }
      $$11 = $54; //@line 19580
      $$1289 = $$0288404; //@line 19580
      $$2285 = $$0283407 + 1 | 0; //@line 19580
      $$6311 = $$0305402; //@line 19580
      $316 = $315; //@line 19580
     } else {
      $$1274 = $$0273408; //@line 19582
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 19584
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 19592
       }
      }
      ___shlim($0, 0); //@line 19595
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 19597
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 19602
        $35 = HEAPU8[$28 >> 0] | 0; //@line 19605
       } else {
        $35 = ___shgetc($0) | 0; //@line 19608
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 19620
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 19623
       HEAP32[$13 >> 2] = $41; //@line 19624
       $47 = $41; //@line 19626
      }
      $$11 = $$1274; //@line 19633
      $$1289 = $$0288404; //@line 19633
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 19633
      $$6311 = $$0305402; //@line 19633
      $316 = $315; //@line 19633
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 19636
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 19637
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 19640
     break L4;
    } else {
     $$0283407 = $$2285; //@line 19643
     $$0288404 = $$1289; //@line 19643
     $$0305402 = $$6311; //@line 19643
     $315 = $316; //@line 19643
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 19652
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 19658
     break;
    } else {
     $$1271 = 0; //@line 19661
     $$8313 = $$0305402; //@line 19661
     $317 = $315; //@line 19661
     label = 137; //@line 19662
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 19668
     $$8313 = $$7312; //@line 19668
     $317 = $319; //@line 19668
     label = 137; //@line 19669
    } else {
     $$2 = $$0270; //@line 19671
     $$2290 = $$0288404; //@line 19671
     $$9314 = $$7312; //@line 19671
     $312 = $319; //@line 19671
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 19675
    $$2290 = -1; //@line 19675
    $$9314 = $$8313; //@line 19675
    $312 = $317; //@line 19675
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 19679
   } else {
    _free($$9314); //@line 19681
    _free($312); //@line 19682
    $$3291 = $$2290; //@line 19683
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 19689
 }
 STACKTOP = sp; //@line 19691
 return $$3291 | 0; //@line 19691
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 33
 STACKTOP = STACKTOP + 512 | 0; //@line 34
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 34
 $6 = sp; //@line 35
 $sum = $3 + $2 | 0; //@line 36
 $7 = 0 - $sum | 0; //@line 37
 $8 = $0 + 4 | 0; //@line 38
 $9 = $0 + 100 | 0; //@line 39
 $$0329 = $1; //@line 40
 $$0396 = 0; //@line 40
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 44
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 52
    $$2 = $$0329; //@line 52
    $$2398 = $$0396; //@line 52
    $368 = 0; //@line 52
    $369 = 0; //@line 52
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 56
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 61
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 64
   $$0396 = 1; //@line 64
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 68
   $$0396 = 1; //@line 68
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 73
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 78
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 81
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 84
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 88
   $26 = 0; //@line 88
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 90
    $28 = tempRet0; //@line 91
    $29 = HEAP32[$8 >> 2] | 0; //@line 92
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 97
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 100
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 103
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 107
     $26 = $28; //@line 107
    } else {
     $$0393 = 1; //@line 109
     $$2 = $$1330$be; //@line 109
     $$2398 = 1; //@line 109
     $368 = $27; //@line 109
     $369 = $28; //@line 109
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 114
   $$2 = $$1330$ph; //@line 114
   $$2398 = $$0396; //@line 114
   $368 = 0; //@line 114
   $369 = 0; //@line 114
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 117
 $37 = $$2 + -48 | 0; //@line 118
 $39 = ($$2 | 0) == 46; //@line 120
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 124
   $$0341511 = 0; //@line 125
   $$0345510 = 0; //@line 125
   $$0401507 = 0; //@line 125
   $$1394509 = $$0393; //@line 125
   $$3399508 = $$2398; //@line 125
   $$3512 = $$2; //@line 125
   $370 = $39; //@line 125
   $371 = $37; //@line 125
   $372 = $368; //@line 125
   $373 = $369; //@line 125
   $44 = 0; //@line 125
   $45 = 0; //@line 125
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 131
       $$2347 = $$0345510; //@line 131
       $$2395 = 1; //@line 131
       $$2403 = $$0401507; //@line 131
       $$4400 = $$3399508; //@line 131
       $374 = $44; //@line 131
       $375 = $45; //@line 131
       $376 = $44; //@line 131
       $377 = $45; //@line 131
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 137
      $47 = tempRet0; //@line 138
      $48 = ($$3512 | 0) != 48; //@line 139
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 142
        $$2347 = $$0345510; //@line 142
        $$2395 = $$1394509; //@line 142
        $$2403 = $$0401507; //@line 142
        $$4400 = $$3399508; //@line 142
        $374 = $372; //@line 142
        $375 = $373; //@line 142
        $376 = $46; //@line 142
        $377 = $47; //@line 142
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 147
       $$2343 = $$0341511; //@line 148
       $$2347 = $$0345510; //@line 148
       $$2395 = $$1394509; //@line 148
       $$2403 = $$0401507; //@line 148
       $$4400 = $$3399508; //@line 148
       $374 = $372; //@line 148
       $375 = $373; //@line 148
       $376 = $46; //@line 148
       $377 = $47; //@line 148
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 153
      if (!$$0341511) {
       $$sink = $371; //@line 155
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 161
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 163
      $54 = $$0341511 + 1 | 0; //@line 164
      $55 = ($54 | 0) == 9; //@line 165
      $$2343 = $55 ? 0 : $54; //@line 169
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 169
      $$2395 = $$1394509; //@line 169
      $$2403 = $48 ? $46 : $$0401507; //@line 169
      $$4400 = 1; //@line 169
      $374 = $372; //@line 169
      $375 = $373; //@line 169
      $376 = $46; //@line 169
      $377 = $47; //@line 169
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 172
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 177
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 180
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 183
    }
    $371 = $$3$be + -48 | 0; //@line 185
    $370 = ($$3$be | 0) == 46; //@line 187
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 192
     $$0345$lcssa = $$2347; //@line 192
     $$0401$lcssa = $$2403; //@line 192
     $$1394$lcssa = $$2395; //@line 192
     $$3$lcssa = $$3$be; //@line 192
     $$3399$lcssa = $$4400; //@line 192
     $72 = $376; //@line 192
     $73 = $374; //@line 192
     $75 = $377; //@line 192
     $76 = $375; //@line 192
     label = 29; //@line 193
     break L20;
    } else {
     $$0341511 = $$2343; //@line 190
     $$0345510 = $$2347; //@line 190
     $$0401507 = $$2403; //@line 190
     $$1394509 = $$2395; //@line 190
     $$3399508 = $$4400; //@line 190
     $$3512 = $$3$be; //@line 190
     $372 = $374; //@line 190
     $373 = $375; //@line 190
     $44 = $376; //@line 190
     $45 = $377; //@line 190
    }
   }
   $$0341463 = $$0341511; //@line 198
   $$0345467 = $$0345510; //@line 198
   $$0401473 = $$0401507; //@line 198
   $378 = $44; //@line 198
   $379 = $45; //@line 198
   $380 = $372; //@line 198
   $381 = $373; //@line 198
   $382 = ($$3399508 | 0) != 0; //@line 198
   label = 37; //@line 199
  } else {
   $$0341$lcssa = 0; //@line 201
   $$0345$lcssa = 0; //@line 201
   $$0401$lcssa = 0; //@line 201
   $$1394$lcssa = $$0393; //@line 201
   $$3$lcssa = $$2; //@line 201
   $$3399$lcssa = $$2398; //@line 201
   $72 = 0; //@line 201
   $73 = $368; //@line 201
   $75 = 0; //@line 201
   $76 = $369; //@line 201
   label = 29; //@line 202
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 207
   $71 = $70 ? $72 : $73; //@line 208
   $74 = $70 ? $75 : $76; //@line 209
   $77 = ($$3399$lcssa | 0) != 0; //@line 210
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 217
     $$0345467 = $$0345$lcssa; //@line 217
     $$0401473 = $$0401$lcssa; //@line 217
     $378 = $72; //@line 217
     $379 = $75; //@line 217
     $380 = $71; //@line 217
     $381 = $74; //@line 217
     $382 = $77; //@line 217
     label = 37; //@line 218
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 221
     $$0345466 = $$0345$lcssa; //@line 221
     $$0401472 = $$0401$lcssa; //@line 221
     $383 = $72; //@line 221
     $384 = $75; //@line 221
     $385 = $77; //@line 221
     $386 = $71; //@line 221
     $387 = $74; //@line 221
     label = 39; //@line 222
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 226
   $81 = tempRet0; //@line 227
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 234
     $$1 = 0.0; //@line 235
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 241
     $91 = 0; //@line 241
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 245
     $90 = 0; //@line 246
     $91 = 0; //@line 246
    }
   } else {
    $90 = $80; //@line 249
    $91 = $81; //@line 249
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 251
   $$0341461 = $$0341$lcssa; //@line 253
   $$0345465 = $$0345$lcssa; //@line 253
   $$0401471 = $$0401$lcssa; //@line 253
   $105 = $92; //@line 253
   $106 = $72; //@line 253
   $108 = tempRet0; //@line 253
   $109 = $75; //@line 253
   label = 41; //@line 254
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 261
   $$0345466 = $$0345467; //@line 261
   $$0401472 = $$0401473; //@line 261
   $383 = $378; //@line 261
   $384 = $379; //@line 261
   $385 = $382; //@line 261
   $386 = $380; //@line 261
   $387 = $381; //@line 261
   label = 39; //@line 262
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 266
   if ($382) {
    $$0341461 = $$0341463; //@line 268
    $$0345465 = $$0345467; //@line 268
    $$0401471 = $$0401473; //@line 268
    $105 = $380; //@line 268
    $106 = $378; //@line 268
    $108 = $381; //@line 268
    $109 = $379; //@line 268
    label = 41; //@line 269
   } else {
    label = 40; //@line 271
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 277
   $$0345465 = $$0345466; //@line 277
   $$0401471 = $$0401472; //@line 277
   $105 = $386; //@line 277
   $106 = $383; //@line 277
   $108 = $387; //@line 277
   $109 = $384; //@line 277
   label = 41; //@line 278
  } else {
   label = 40; //@line 280
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 286
   ___shlim($0, 0); //@line 287
   $$1 = 0.0; //@line 288
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 291
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 296
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 317
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 321
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 323
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 331
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 335
    break;
   }
   $134 = $3 + -106 | 0; //@line 338
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 340
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 348
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 352
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 357
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 361
     $$3344501 = $$0341461; //@line 363
     $150 = HEAP32[$148 >> 2] | 0; //@line 363
     while (1) {
      $150 = $150 * 10 | 0; //@line 365
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 369
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 374
    }
    $$3348 = $$0345465 + 1 | 0; //@line 377
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 391
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[1332 + (8 - $105 << 2) >> 2] | 0); //@line 405
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 410
     $$pre = HEAP32[$6 >> 2] | 0; //@line 412
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[1332 + ($105 + -10 << 2) >> 2] | 0); //@line 425
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 430
   if (!$184) {
    $$0380$ph = 0; //@line 433
    $$1373$ph446 = $$3348; //@line 433
    $$2352$ph447 = 0; //@line 433
    $$2387$ph445 = $105; //@line 433
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 437
    $191 = HEAP32[1332 + (8 - $188 << 2) >> 2] | 0; //@line 440
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 443
     $$0372 = 0; //@line 443
     $$0385$lcssa552 = $105; //@line 443
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 445
     $$0340494 = 0; //@line 446
     $$0350492 = 0; //@line 446
     $$0385491 = $105; //@line 446
     $$4349493 = 0; //@line 446
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 448
      $195 = HEAP32[$194 >> 2] | 0; //@line 449
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 452
      HEAP32[$194 >> 2] = $198; //@line 453
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 454
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 457
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 461
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 462
      $$4349493 = $$4349493 + 1 | 0; //@line 463
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 473
      $$0372 = $$3348; //@line 473
      $$0385$lcssa552 = $$0385491; //@line 473
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 477
      $$0350$lcssa553 = $$0350492; //@line 478
      $$0372 = $$3348 + 1 | 0; //@line 478
      $$0385$lcssa552 = $$0385491; //@line 478
     }
    }
    $$0380$ph = 0; //@line 483
    $$1373$ph446 = $$0372; //@line 483
    $$2352$ph447 = $$0350$lcssa553; //@line 483
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 483
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 486
    $213 = ($$2387$ph445 | 0) == 18; //@line 487
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 488
    $$0380 = $$0380$ph; //@line 489
    $$1373 = $$1373$ph446; //@line 489
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 493
       $$4354$ph = $$2352$ph447; //@line 493
       $$4389$ph443 = $$2387$ph445; //@line 493
       $$6378$ph = $$1373; //@line 493
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 499
       $$4354$ph = $$2352$ph447; //@line 499
       $$4389$ph443 = 18; //@line 499
       $$6378$ph = $$1373; //@line 499
       break L101;
      }
     }
     $$0334 = 0; //@line 504
     $$2374 = $$1373; //@line 504
     $$5$in = $$1373 + 127 | 0; //@line 504
     while (1) {
      $$5 = $$5$in & 127; //@line 506
      $218 = $6 + ($$5 << 2) | 0; //@line 507
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 509
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 511
      $223 = tempRet0; //@line 512
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 519
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 521
       $$1335 = $229; //@line 523
       $$sink419$off0 = $231; //@line 523
      } else {
       $$1335 = 0; //@line 525
       $$sink419$off0 = $222; //@line 525
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 527
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 531
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 536
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 541
       $$5$in = $$5 + -1 | 0; //@line 541
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 544
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 547
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 554
    $246 = $$2374 + 127 & 127; //@line 557
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 560
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 566
     $$4376 = $246; //@line 567
    } else {
     $$4376 = $$2374; //@line 569
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 572
    $$0380$ph = $$0380; //@line 573
    $$1373$ph446 = $$4376; //@line 573
    $$2352$ph447 = $243; //@line 573
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 573
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 577
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 580
    $$1381$ph557 = $$1381$ph; //@line 581
    $$4354$ph558 = $$4354$ph; //@line 581
    $$4389$ph = $$4389$ph443; //@line 581
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 583
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 585
     $$1381 = $$1381$ph557; //@line 586
     $$4354 = $$4354$ph558; //@line 586
     while (1) {
      $$0336484 = 0; //@line 588
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 591
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 594
        label = 88; //@line 595
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 599
       $261 = HEAP32[1364 + ($$0336484 << 2) >> 2] | 0; //@line 601
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 604
        label = 88; //@line 605
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 612
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 615
       } else {
        $$1337 = $264; //@line 617
        label = 88; //@line 618
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 623
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 627
        $$4483 = 0; //@line 627
        $$9481 = $$6378$ph; //@line 627
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 631
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 634
       $$4354 = $$6378$ph; //@line 634
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 640
     $272 = 1e9 >>> $$423; //@line 641
     $$0332488 = 0; //@line 642
     $$5355486 = $$4354; //@line 642
     $$5390485 = $$4389$ph; //@line 642
     $$6487 = $$4354; //@line 642
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 644
      $274 = HEAP32[$273 >> 2] | 0; //@line 645
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 648
      HEAP32[$273 >> 2] = $277; //@line 649
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 650
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 653
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 657
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 658
      $$6487 = $$6487 + 1 & 127; //@line 660
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 670
      $$4354$ph558 = $$5355486; //@line 670
      $$4389$ph = $$5390485; //@line 670
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 679
     $$1381$ph557 = $268; //@line 680
     $$4354$ph558 = $$5355486; //@line 680
     $$4389$ph = $$5390485; //@line 680
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 683
    $$1381$ph = $268; //@line 684
    $$4354$ph = $$5355486; //@line 684
    $$4389$ph443 = $$5390485; //@line 684
    $$6378$ph = $289; //@line 684
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 688
    $302 = $$9481 + 1 & 127; //@line 691
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 695
     $$10 = $302; //@line 696
    } else {
     $$10 = $$9481; //@line 698
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 704
    $$4483 = $$4483 + 1 | 0; //@line 705
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 710
    }
   }
   $311 = +($4 | 0); //@line 713
   $312 = $$0365482 * $311; //@line 714
   $313 = $$1381 + 53 | 0; //@line 715
   $314 = $313 - $3 | 0; //@line 716
   $315 = ($314 | 0) < ($2 | 0); //@line 717
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 720
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 725
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 728
    $$0360 = $320; //@line 731
    $$0361 = $323; //@line 731
    $$1366 = $320 + ($312 - $323); //@line 731
   } else {
    $$0360 = 0.0; //@line 733
    $$0361 = 0.0; //@line 733
    $$1366 = $312; //@line 733
   }
   $327 = $$4354 + 2 & 127; //@line 736
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 739
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 742
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 752
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 758
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 764
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 773
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 778
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 789
     } else {
      $$3364 = $$1362 + 1.0; //@line 792
     }
    } else {
     $$3364 = $$1362; //@line 795
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 799
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 806
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 810
     $$2367 = $359 ? $354 : $354 * .5; //@line 811
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 821
       $$4384 = $$3383; //@line 821
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 826
     $$3368 = $$2367; //@line 827
     $$4384 = $$3383; //@line 827
    } else {
     $$3368 = $354; //@line 829
     $$4384 = $$1381; //@line 829
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 833
  }
 } while (0);
 STACKTOP = sp; //@line 836
 return +$$1;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3205
 STACKTOP = STACKTOP + 560 | 0; //@line 3206
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 3206
 $6 = sp + 8 | 0; //@line 3207
 $7 = sp; //@line 3208
 $8 = sp + 524 | 0; //@line 3209
 $9 = $8; //@line 3210
 $10 = sp + 512 | 0; //@line 3211
 HEAP32[$7 >> 2] = 0; //@line 3212
 $11 = $10 + 12 | 0; //@line 3213
 ___DOUBLE_BITS_677($1) | 0; //@line 3214
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 3219
  $$0520 = 1; //@line 3219
  $$0521 = 7163; //@line 3219
 } else {
  $$0471 = $1; //@line 3230
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 3230
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 7164 : 7169 : 7166; //@line 3230
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 3232
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 3241
   $31 = $$0520 + 3 | 0; //@line 3246
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 3248
   _out_670($0, $$0521, $$0520); //@line 3249
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 7190 : 7194 : $27 ? 7182 : 7186, 3); //@line 3250
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 3252
   $$sink560 = $31; //@line 3253
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 3256
   $36 = $35 != 0.0; //@line 3257
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 3261
   }
   $39 = $5 | 32; //@line 3263
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 3266
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 3269
    $44 = $$0520 | 2; //@line 3270
    $46 = 12 - $3 | 0; //@line 3272
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 3277
     } else {
      $$0509585 = 8.0; //@line 3279
      $$1508586 = $46; //@line 3279
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 3281
       $$0509585 = $$0509585 * 16.0; //@line 3282
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 3297
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 3302
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 3307
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 3310
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 3313
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 3316
     HEAP8[$68 >> 0] = 48; //@line 3317
     $$0511 = $68; //@line 3318
    } else {
     $$0511 = $66; //@line 3320
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 3327
    $76 = $$0511 + -2 | 0; //@line 3330
    HEAP8[$76 >> 0] = $5 + 15; //@line 3331
    $77 = ($3 | 0) < 1; //@line 3332
    $79 = ($4 & 8 | 0) == 0; //@line 3334
    $$0523 = $8; //@line 3335
    $$2473 = $$1472; //@line 3335
    while (1) {
     $80 = ~~$$2473; //@line 3337
     $86 = $$0523 + 1 | 0; //@line 3343
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[7198 + $80 >> 0]; //@line 3344
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 3347
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 3356
      } else {
       HEAP8[$86 >> 0] = 46; //@line 3359
       $$1524 = $$0523 + 2 | 0; //@line 3360
      }
     } else {
      $$1524 = $86; //@line 3363
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 3367
     }
    }
    $$pre693 = $$1524; //@line 3373
    if (!$3) {
     label = 24; //@line 3375
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 3383
      $$sink = $3 + 2 | 0; //@line 3383
     } else {
      label = 24; //@line 3385
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 3389
     $$pre$phi691Z2D = $101; //@line 3390
     $$sink = $101; //@line 3390
    }
    $104 = $11 - $76 | 0; //@line 3394
    $106 = $104 + $44 + $$sink | 0; //@line 3396
    _pad_676($0, 32, $2, $106, $4); //@line 3397
    _out_670($0, $$0521$, $44); //@line 3398
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 3400
    _out_670($0, $8, $$pre$phi691Z2D); //@line 3401
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 3403
    _out_670($0, $76, $104); //@line 3404
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 3406
    $$sink560 = $106; //@line 3407
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 3411
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 3415
    HEAP32[$7 >> 2] = $113; //@line 3416
    $$3 = $35 * 268435456.0; //@line 3417
    $$pr = $113; //@line 3417
   } else {
    $$3 = $35; //@line 3420
    $$pr = HEAP32[$7 >> 2] | 0; //@line 3420
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 3424
   $$0498 = $$561; //@line 3425
   $$4 = $$3; //@line 3425
   do {
    $116 = ~~$$4 >>> 0; //@line 3427
    HEAP32[$$0498 >> 2] = $116; //@line 3428
    $$0498 = $$0498 + 4 | 0; //@line 3429
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 3432
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 3442
    $$1499662 = $$0498; //@line 3442
    $124 = $$pr; //@line 3442
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 3445
     $$0488655 = $$1499662 + -4 | 0; //@line 3446
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 3449
     } else {
      $$0488657 = $$0488655; //@line 3451
      $$0497656 = 0; //@line 3451
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 3454
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 3456
       $131 = tempRet0; //@line 3457
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 3458
       HEAP32[$$0488657 >> 2] = $132; //@line 3460
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 3461
       $$0488657 = $$0488657 + -4 | 0; //@line 3463
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 3473
      } else {
       $138 = $$1482663 + -4 | 0; //@line 3475
       HEAP32[$138 >> 2] = $$0497656; //@line 3476
       $$2483$ph = $138; //@line 3477
      }
     }
     $$2500 = $$1499662; //@line 3480
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 3486
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 3490
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 3496
     HEAP32[$7 >> 2] = $144; //@line 3497
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 3500
      $$1499662 = $$2500; //@line 3500
      $124 = $144; //@line 3500
     } else {
      $$1482$lcssa = $$2483$ph; //@line 3502
      $$1499$lcssa = $$2500; //@line 3502
      $$pr566 = $144; //@line 3502
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 3507
    $$1499$lcssa = $$0498; //@line 3507
    $$pr566 = $$pr; //@line 3507
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 3513
    $150 = ($39 | 0) == 102; //@line 3514
    $$3484650 = $$1482$lcssa; //@line 3515
    $$3501649 = $$1499$lcssa; //@line 3515
    $152 = $$pr566; //@line 3515
    while (1) {
     $151 = 0 - $152 | 0; //@line 3517
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 3519
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 3523
      $161 = 1e9 >>> $154; //@line 3524
      $$0487644 = 0; //@line 3525
      $$1489643 = $$3484650; //@line 3525
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 3527
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 3531
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 3532
       $$1489643 = $$1489643 + 4 | 0; //@line 3533
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 3544
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 3547
       $$4502 = $$3501649; //@line 3547
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 3550
       $$$3484700 = $$$3484; //@line 3551
       $$4502 = $$3501649 + 4 | 0; //@line 3551
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 3558
      $$4502 = $$3501649; //@line 3558
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 3560
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 3567
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 3569
     HEAP32[$7 >> 2] = $152; //@line 3570
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 3575
      $$3501$lcssa = $$$4502; //@line 3575
      break;
     } else {
      $$3484650 = $$$3484700; //@line 3573
      $$3501649 = $$$4502; //@line 3573
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 3580
    $$3501$lcssa = $$1499$lcssa; //@line 3580
   }
   $185 = $$561; //@line 3583
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 3588
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 3589
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 3592
    } else {
     $$0514639 = $189; //@line 3594
     $$0530638 = 10; //@line 3594
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 3596
      $193 = $$0514639 + 1 | 0; //@line 3597
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 3600
       break;
      } else {
       $$0514639 = $193; //@line 3603
      }
     }
    }
   } else {
    $$1515 = 0; //@line 3608
   }
   $198 = ($39 | 0) == 103; //@line 3613
   $199 = ($$540 | 0) != 0; //@line 3614
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 3617
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 3626
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 3629
    $213 = ($209 | 0) % 9 | 0; //@line 3630
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 3633
     $$1531632 = 10; //@line 3633
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 3636
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 3639
       $$1531632 = $215; //@line 3639
      } else {
       $$1531$lcssa = $215; //@line 3641
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 3646
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 3648
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 3649
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 3652
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 3655
     $$4518 = $$1515; //@line 3655
     $$8 = $$3484$lcssa; //@line 3655
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 3660
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 3661
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 3666
     if (!$$0520) {
      $$1467 = $$$564; //@line 3669
      $$1469 = $$543; //@line 3669
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 3672
      $$1467 = $230 ? -$$$564 : $$$564; //@line 3677
      $$1469 = $230 ? -$$543 : $$543; //@line 3677
     }
     $233 = $217 - $218 | 0; //@line 3679
     HEAP32[$212 >> 2] = $233; //@line 3680
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 3684
      HEAP32[$212 >> 2] = $236; //@line 3685
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 3688
       $$sink547625 = $212; //@line 3688
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 3690
        HEAP32[$$sink547625 >> 2] = 0; //@line 3691
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 3694
         HEAP32[$240 >> 2] = 0; //@line 3695
         $$6 = $240; //@line 3696
        } else {
         $$6 = $$5486626; //@line 3698
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 3701
        HEAP32[$238 >> 2] = $242; //@line 3702
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 3705
         $$sink547625 = $238; //@line 3705
        } else {
         $$5486$lcssa = $$6; //@line 3707
         $$sink547$lcssa = $238; //@line 3707
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 3712
       $$sink547$lcssa = $212; //@line 3712
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 3717
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 3718
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 3721
       $$4518 = $247; //@line 3721
       $$8 = $$5486$lcssa; //@line 3721
      } else {
       $$2516621 = $247; //@line 3723
       $$2532620 = 10; //@line 3723
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 3725
        $251 = $$2516621 + 1 | 0; //@line 3726
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 3729
         $$4518 = $251; //@line 3729
         $$8 = $$5486$lcssa; //@line 3729
         break;
        } else {
         $$2516621 = $251; //@line 3732
        }
       }
      }
     } else {
      $$4492 = $212; //@line 3737
      $$4518 = $$1515; //@line 3737
      $$8 = $$3484$lcssa; //@line 3737
     }
    }
    $253 = $$4492 + 4 | 0; //@line 3740
    $$5519$ph = $$4518; //@line 3743
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 3743
    $$9$ph = $$8; //@line 3743
   } else {
    $$5519$ph = $$1515; //@line 3745
    $$7505$ph = $$3501$lcssa; //@line 3745
    $$9$ph = $$3484$lcssa; //@line 3745
   }
   $$7505 = $$7505$ph; //@line 3747
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 3751
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 3754
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 3758
    } else {
     $$lcssa675 = 1; //@line 3760
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 3764
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 3769
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 3777
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 3777
     } else {
      $$0479 = $5 + -2 | 0; //@line 3781
      $$2476 = $$540$ + -1 | 0; //@line 3781
     }
     $267 = $4 & 8; //@line 3783
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 3788
       if (!$270) {
        $$2529 = 9; //@line 3791
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 3796
         $$3533616 = 10; //@line 3796
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 3798
          $275 = $$1528617 + 1 | 0; //@line 3799
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 3805
           break;
          } else {
           $$1528617 = $275; //@line 3803
          }
         }
        } else {
         $$2529 = 0; //@line 3810
        }
       }
      } else {
       $$2529 = 9; //@line 3814
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 3822
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 3824
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 3826
       $$1480 = $$0479; //@line 3829
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 3829
       $$pre$phi698Z2D = 0; //@line 3829
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 3833
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 3835
       $$1480 = $$0479; //@line 3838
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 3838
       $$pre$phi698Z2D = 0; //@line 3838
       break;
      }
     } else {
      $$1480 = $$0479; //@line 3842
      $$3477 = $$2476; //@line 3842
      $$pre$phi698Z2D = $267; //@line 3842
     }
    } else {
     $$1480 = $5; //@line 3846
     $$3477 = $$540; //@line 3846
     $$pre$phi698Z2D = $4 & 8; //@line 3846
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 3849
   $294 = ($292 | 0) != 0 & 1; //@line 3851
   $296 = ($$1480 | 32 | 0) == 102; //@line 3853
   if ($296) {
    $$2513 = 0; //@line 3857
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 3857
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 3860
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 3863
    $304 = $11; //@line 3864
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 3869
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 3871
      HEAP8[$308 >> 0] = 48; //@line 3872
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 3877
      } else {
       $$1512$lcssa = $308; //@line 3879
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 3884
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 3891
    $318 = $$1512$lcssa + -2 | 0; //@line 3893
    HEAP8[$318 >> 0] = $$1480; //@line 3894
    $$2513 = $318; //@line 3897
    $$pn = $304 - $318 | 0; //@line 3897
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 3902
   _pad_676($0, 32, $2, $323, $4); //@line 3903
   _out_670($0, $$0521, $$0520); //@line 3904
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 3906
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 3909
    $326 = $8 + 9 | 0; //@line 3910
    $327 = $326; //@line 3911
    $328 = $8 + 8 | 0; //@line 3912
    $$5493600 = $$0496$$9; //@line 3913
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 3916
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 3921
       $$1465 = $328; //@line 3922
      } else {
       $$1465 = $330; //@line 3924
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 3931
       $$0464597 = $330; //@line 3932
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 3934
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 3937
        } else {
         $$1465 = $335; //@line 3939
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 3944
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 3949
     $$5493600 = $$5493600 + 4 | 0; //@line 3950
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 7214, 1); //@line 3960
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 3966
     $$6494592 = $$5493600; //@line 3966
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 3969
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 3974
       $$0463587 = $347; //@line 3975
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 3977
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 3980
        } else {
         $$0463$lcssa = $351; //@line 3982
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 3987
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 3991
      $$6494592 = $$6494592 + 4 | 0; //@line 3992
      $356 = $$4478593 + -9 | 0; //@line 3993
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 4000
       break;
      } else {
       $$4478593 = $356; //@line 3998
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 4005
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 4008
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 4011
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 4014
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 4015
     $365 = $363; //@line 4016
     $366 = 0 - $9 | 0; //@line 4017
     $367 = $8 + 8 | 0; //@line 4018
     $$5605 = $$3477; //@line 4019
     $$7495604 = $$9$ph; //@line 4019
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 4022
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 4025
       $$0 = $367; //@line 4026
      } else {
       $$0 = $369; //@line 4028
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 4033
        _out_670($0, $$0, 1); //@line 4034
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 4038
         break;
        }
        _out_670($0, 7214, 1); //@line 4041
        $$2 = $375; //@line 4042
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 4046
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 4051
        $$1601 = $$0; //@line 4052
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 4054
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 4057
         } else {
          $$2 = $373; //@line 4059
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 4066
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 4069
      $381 = $$5605 - $378 | 0; //@line 4070
      $$7495604 = $$7495604 + 4 | 0; //@line 4071
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 4078
       break;
      } else {
       $$5605 = $381; //@line 4076
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 4083
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 4086
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 4090
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 4093
   $$sink560 = $323; //@line 4094
  }
 } while (0);
 STACKTOP = sp; //@line 4099
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 4099
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 1777
 STACKTOP = STACKTOP + 64 | 0; //@line 1778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 1778
 $5 = sp + 16 | 0; //@line 1779
 $6 = sp; //@line 1780
 $7 = sp + 24 | 0; //@line 1781
 $8 = sp + 8 | 0; //@line 1782
 $9 = sp + 20 | 0; //@line 1783
 HEAP32[$5 >> 2] = $1; //@line 1784
 $10 = ($0 | 0) != 0; //@line 1785
 $11 = $7 + 40 | 0; //@line 1786
 $12 = $11; //@line 1787
 $13 = $7 + 39 | 0; //@line 1788
 $14 = $8 + 4 | 0; //@line 1789
 $$0243 = 0; //@line 1790
 $$0247 = 0; //@line 1790
 $$0269 = 0; //@line 1790
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 1799
     $$1248 = -1; //@line 1800
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 1804
     break;
    }
   } else {
    $$1248 = $$0247; //@line 1808
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 1811
  $21 = HEAP8[$20 >> 0] | 0; //@line 1812
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 1815
   break;
  } else {
   $23 = $21; //@line 1818
   $25 = $20; //@line 1818
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 1823
     $27 = $25; //@line 1823
     label = 9; //@line 1824
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 1829
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 1836
   HEAP32[$5 >> 2] = $24; //@line 1837
   $23 = HEAP8[$24 >> 0] | 0; //@line 1839
   $25 = $24; //@line 1839
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 1844
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 1849
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 1852
     $27 = $27 + 2 | 0; //@line 1853
     HEAP32[$5 >> 2] = $27; //@line 1854
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 1861
      break;
     } else {
      $$0249303 = $30; //@line 1858
      label = 9; //@line 1859
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 1869
  if ($10) {
   _out_670($0, $20, $36); //@line 1871
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 1875
   $$0247 = $$1248; //@line 1875
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 1883
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 1884
  if ($43) {
   $$0253 = -1; //@line 1886
   $$1270 = $$0269; //@line 1886
   $$sink = 1; //@line 1886
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 1896
    $$1270 = 1; //@line 1896
    $$sink = 3; //@line 1896
   } else {
    $$0253 = -1; //@line 1898
    $$1270 = $$0269; //@line 1898
    $$sink = 1; //@line 1898
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 1901
  HEAP32[$5 >> 2] = $51; //@line 1902
  $52 = HEAP8[$51 >> 0] | 0; //@line 1903
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 1905
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 1912
   $$lcssa291 = $52; //@line 1912
   $$lcssa292 = $51; //@line 1912
  } else {
   $$0262309 = 0; //@line 1914
   $60 = $52; //@line 1914
   $65 = $51; //@line 1914
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 1919
    $64 = $65 + 1 | 0; //@line 1920
    HEAP32[$5 >> 2] = $64; //@line 1921
    $66 = HEAP8[$64 >> 0] | 0; //@line 1922
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 1924
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 1931
     $$lcssa291 = $66; //@line 1931
     $$lcssa292 = $64; //@line 1931
     break;
    } else {
     $$0262309 = $63; //@line 1934
     $60 = $66; //@line 1934
     $65 = $64; //@line 1934
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 1946
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 1948
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 1953
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 1958
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 1970
     $$2271 = 1; //@line 1970
     $storemerge274 = $79 + 3 | 0; //@line 1970
    } else {
     label = 23; //@line 1972
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 1976
    if ($$1270 | 0) {
     $$0 = -1; //@line 1979
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 1994
     $106 = HEAP32[$105 >> 2] | 0; //@line 1995
     HEAP32[$2 >> 2] = $105 + 4; //@line 1997
     $363 = $106; //@line 1998
    } else {
     $363 = 0; //@line 2000
    }
    $$0259 = $363; //@line 2004
    $$2271 = 0; //@line 2004
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 2004
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 2006
   $109 = ($$0259 | 0) < 0; //@line 2007
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 2012
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 2012
   $$3272 = $$2271; //@line 2012
   $115 = $storemerge274; //@line 2012
  } else {
   $112 = _getint_671($5) | 0; //@line 2014
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 2017
    break;
   }
   $$1260 = $112; //@line 2021
   $$1263 = $$0262$lcssa; //@line 2021
   $$3272 = $$1270; //@line 2021
   $115 = HEAP32[$5 >> 2] | 0; //@line 2021
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 2032
     $156 = _getint_671($5) | 0; //@line 2033
     $$0254 = $156; //@line 2035
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 2035
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 2044
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 2049
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 2054
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 2061
      $144 = $125 + 4 | 0; //@line 2065
      HEAP32[$5 >> 2] = $144; //@line 2066
      $$0254 = $140; //@line 2067
      $$pre345 = $144; //@line 2067
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 2073
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2088
     $152 = HEAP32[$151 >> 2] | 0; //@line 2089
     HEAP32[$2 >> 2] = $151 + 4; //@line 2091
     $364 = $152; //@line 2092
    } else {
     $364 = 0; //@line 2094
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 2097
    HEAP32[$5 >> 2] = $154; //@line 2098
    $$0254 = $364; //@line 2099
    $$pre345 = $154; //@line 2099
   } else {
    $$0254 = -1; //@line 2101
    $$pre345 = $115; //@line 2101
   }
  } while (0);
  $$0252 = 0; //@line 2104
  $158 = $$pre345; //@line 2104
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 2111
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 2114
   HEAP32[$5 >> 2] = $158; //@line 2115
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (6682 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 2120
   $168 = $167 & 255; //@line 2121
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 2125
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 2132
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 2136
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 2140
     break L1;
    } else {
     label = 50; //@line 2143
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 2148
     $176 = $3 + ($$0253 << 3) | 0; //@line 2150
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 2155
     $182 = $6; //@line 2156
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 2158
     HEAP32[$182 + 4 >> 2] = $181; //@line 2161
     label = 50; //@line 2162
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 2166
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 2169
    $187 = HEAP32[$5 >> 2] | 0; //@line 2171
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 2175
   if ($10) {
    $187 = $158; //@line 2177
   } else {
    $$0243 = 0; //@line 2179
    $$0247 = $$1248; //@line 2179
    $$0269 = $$3272; //@line 2179
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 2185
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 2191
  $196 = $$1263 & -65537; //@line 2194
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 2195
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 2203
       $$0243 = 0; //@line 2204
       $$0247 = $$1248; //@line 2204
       $$0269 = $$3272; //@line 2204
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 2210
       $$0243 = 0; //@line 2211
       $$0247 = $$1248; //@line 2211
       $$0269 = $$3272; //@line 2211
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 2219
       HEAP32[$208 >> 2] = $$1248; //@line 2221
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 2224
       $$0243 = 0; //@line 2225
       $$0247 = $$1248; //@line 2225
       $$0269 = $$3272; //@line 2225
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 2232
       $$0243 = 0; //@line 2233
       $$0247 = $$1248; //@line 2233
       $$0269 = $$3272; //@line 2233
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 2240
       $$0243 = 0; //@line 2241
       $$0247 = $$1248; //@line 2241
       $$0269 = $$3272; //@line 2241
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 2247
       $$0243 = 0; //@line 2248
       $$0247 = $$1248; //@line 2248
       $$0269 = $$3272; //@line 2248
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 2256
       HEAP32[$220 >> 2] = $$1248; //@line 2258
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 2261
       $$0243 = 0; //@line 2262
       $$0247 = $$1248; //@line 2262
       $$0269 = $$3272; //@line 2262
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 2267
       $$0247 = $$1248; //@line 2267
       $$0269 = $$3272; //@line 2267
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 2277
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 2277
     $$3265 = $$1263$ | 8; //@line 2277
     label = 62; //@line 2278
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 2282
     $$1255 = $$0254; //@line 2282
     $$3265 = $$1263$; //@line 2282
     label = 62; //@line 2283
     break;
    }
   case 111:
    {
     $242 = $6; //@line 2287
     $244 = HEAP32[$242 >> 2] | 0; //@line 2289
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 2292
     $248 = _fmt_o($244, $247, $11) | 0; //@line 2293
     $252 = $12 - $248 | 0; //@line 2297
     $$0228 = $248; //@line 2302
     $$1233 = 0; //@line 2302
     $$1238 = 7146; //@line 2302
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 2302
     $$4266 = $$1263$; //@line 2302
     $281 = $244; //@line 2302
     $283 = $247; //@line 2302
     label = 68; //@line 2303
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 2307
     $258 = HEAP32[$256 >> 2] | 0; //@line 2309
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 2312
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 2315
      $264 = tempRet0; //@line 2316
      $265 = $6; //@line 2317
      HEAP32[$265 >> 2] = $263; //@line 2319
      HEAP32[$265 + 4 >> 2] = $264; //@line 2322
      $$0232 = 1; //@line 2323
      $$0237 = 7146; //@line 2323
      $275 = $263; //@line 2323
      $276 = $264; //@line 2323
      label = 67; //@line 2324
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 2336
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 7146 : 7148 : 7147; //@line 2336
      $275 = $258; //@line 2336
      $276 = $261; //@line 2336
      label = 67; //@line 2337
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 2343
     $$0232 = 0; //@line 2349
     $$0237 = 7146; //@line 2349
     $275 = HEAP32[$197 >> 2] | 0; //@line 2349
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 2349
     label = 67; //@line 2350
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 2361
     $$2 = $13; //@line 2362
     $$2234 = 0; //@line 2362
     $$2239 = 7146; //@line 2362
     $$2251 = $11; //@line 2362
     $$5 = 1; //@line 2362
     $$6268 = $196; //@line 2362
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 2369
     label = 72; //@line 2370
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 2374
     $$1 = $302 | 0 ? $302 : 7156; //@line 2377
     label = 72; //@line 2378
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 2388
     HEAP32[$14 >> 2] = 0; //@line 2389
     HEAP32[$6 >> 2] = $8; //@line 2390
     $$4258354 = -1; //@line 2391
     $365 = $8; //@line 2391
     label = 76; //@line 2392
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 2396
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 2399
      $$0240$lcssa356 = 0; //@line 2400
      label = 85; //@line 2401
     } else {
      $$4258354 = $$0254; //@line 2403
      $365 = $$pre348; //@line 2403
      label = 76; //@line 2404
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 2411
     $$0247 = $$1248; //@line 2411
     $$0269 = $$3272; //@line 2411
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 2416
     $$2234 = 0; //@line 2416
     $$2239 = 7146; //@line 2416
     $$2251 = $11; //@line 2416
     $$5 = $$0254; //@line 2416
     $$6268 = $$1263$; //@line 2416
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 2422
    $227 = $6; //@line 2423
    $229 = HEAP32[$227 >> 2] | 0; //@line 2425
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 2428
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 2430
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 2436
    $$0228 = $234; //@line 2441
    $$1233 = $or$cond278 ? 0 : 2; //@line 2441
    $$1238 = $or$cond278 ? 7146 : 7146 + ($$1236 >> 4) | 0; //@line 2441
    $$2256 = $$1255; //@line 2441
    $$4266 = $$3265; //@line 2441
    $281 = $229; //@line 2441
    $283 = $232; //@line 2441
    label = 68; //@line 2442
   } else if ((label | 0) == 67) {
    label = 0; //@line 2445
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 2447
    $$1233 = $$0232; //@line 2447
    $$1238 = $$0237; //@line 2447
    $$2256 = $$0254; //@line 2447
    $$4266 = $$1263$; //@line 2447
    $281 = $275; //@line 2447
    $283 = $276; //@line 2447
    label = 68; //@line 2448
   } else if ((label | 0) == 72) {
    label = 0; //@line 2451
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 2452
    $306 = ($305 | 0) == 0; //@line 2453
    $$2 = $$1; //@line 2460
    $$2234 = 0; //@line 2460
    $$2239 = 7146; //@line 2460
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 2460
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 2460
    $$6268 = $196; //@line 2460
   } else if ((label | 0) == 76) {
    label = 0; //@line 2463
    $$0229316 = $365; //@line 2464
    $$0240315 = 0; //@line 2464
    $$1244314 = 0; //@line 2464
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 2466
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 2469
      $$2245 = $$1244314; //@line 2469
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 2472
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 2478
      $$2245 = $320; //@line 2478
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 2482
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 2485
      $$0240315 = $325; //@line 2485
      $$1244314 = $320; //@line 2485
     } else {
      $$0240$lcssa = $325; //@line 2487
      $$2245 = $320; //@line 2487
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 2493
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 2496
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 2499
     label = 85; //@line 2500
    } else {
     $$1230327 = $365; //@line 2502
     $$1241326 = 0; //@line 2502
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 2504
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 2507
       label = 85; //@line 2508
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 2511
      $$1241326 = $331 + $$1241326 | 0; //@line 2512
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 2515
       label = 85; //@line 2516
       break L97;
      }
      _out_670($0, $9, $331); //@line 2520
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 2525
       label = 85; //@line 2526
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 2523
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 2534
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 2540
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 2542
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 2547
   $$2 = $or$cond ? $$0228 : $11; //@line 2552
   $$2234 = $$1233; //@line 2552
   $$2239 = $$1238; //@line 2552
   $$2251 = $11; //@line 2552
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 2552
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 2552
  } else if ((label | 0) == 85) {
   label = 0; //@line 2555
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 2557
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 2560
   $$0247 = $$1248; //@line 2560
   $$0269 = $$3272; //@line 2560
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 2565
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 2567
  $345 = $$$5 + $$2234 | 0; //@line 2568
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 2570
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 2571
  _out_670($0, $$2239, $$2234); //@line 2572
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 2574
  _pad_676($0, 48, $$$5, $343, 0); //@line 2575
  _out_670($0, $$2, $343); //@line 2576
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 2578
  $$0243 = $$2261; //@line 2579
  $$0247 = $$1248; //@line 2579
  $$0269 = $$3272; //@line 2579
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 2587
    } else {
     $$2242302 = 1; //@line 2589
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 2592
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 2595
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 2599
      $356 = $$2242302 + 1 | 0; //@line 2600
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 2603
      } else {
       $$2242$lcssa = $356; //@line 2605
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 2611
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 2617
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 2623
       } else {
        $$0 = 1; //@line 2625
        break;
       }
      }
     } else {
      $$0 = 1; //@line 2630
     }
    }
   } else {
    $$0 = $$1248; //@line 2634
   }
  }
 } while (0);
 STACKTOP = sp; //@line 2638
 return $$0 | 0; //@line 2638
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7932
 STACKTOP = STACKTOP + 96 | 0; //@line 7933
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7933
 $vararg_buffer23 = sp + 72 | 0; //@line 7934
 $vararg_buffer20 = sp + 64 | 0; //@line 7935
 $vararg_buffer18 = sp + 56 | 0; //@line 7936
 $vararg_buffer15 = sp + 48 | 0; //@line 7937
 $vararg_buffer12 = sp + 40 | 0; //@line 7938
 $vararg_buffer9 = sp + 32 | 0; //@line 7939
 $vararg_buffer6 = sp + 24 | 0; //@line 7940
 $vararg_buffer3 = sp + 16 | 0; //@line 7941
 $vararg_buffer1 = sp + 8 | 0; //@line 7942
 $vararg_buffer = sp; //@line 7943
 $4 = sp + 80 | 0; //@line 7944
 $5 = HEAP32[112] | 0; //@line 7945
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 7949
   FUNCTION_TABLE_v[$5 & 3](); //@line 7950
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 63; //@line 7953
    HEAP8[$AsyncCtx + 4 >> 0] = $0; //@line 7955
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7957
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7959
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7961
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 7963
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer20; //@line 7965
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer20; //@line 7967
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer3; //@line 7969
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 7971
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer1; //@line 7973
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer1; //@line 7975
    HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 7977
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer6; //@line 7979
    HEAP32[$AsyncCtx + 56 >> 2] = $1; //@line 7981
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer6; //@line 7983
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer12; //@line 7985
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer12; //@line 7987
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer9; //@line 7989
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer9; //@line 7991
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer18; //@line 7993
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer18; //@line 7995
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer15; //@line 7997
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer15; //@line 7999
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer23; //@line 8001
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer23; //@line 8003
    sp = STACKTOP; //@line 8004
    STACKTOP = sp; //@line 8005
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8007
    HEAP32[114] = (HEAP32[114] | 0) + 1; //@line 8010
    break;
   }
  }
 } while (0);
 $34 = HEAP32[103] | 0; //@line 8015
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 8019
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[100] | 0; //@line 8025
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 8032
       break;
      }
     }
     $43 = HEAP32[101] | 0; //@line 8036
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 8040
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 8045
      } else {
       label = 11; //@line 8047
      }
     }
    } else {
     label = 11; //@line 8051
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 8055
   }
   if (!((HEAP32[110] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[107] = HEAP32[105]; //@line 8067
    break;
   }
   $54 = HEAPU8[396] | 0; //@line 8071
   $55 = $0 & 255; //@line 8072
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 8077
    $$lobit = $59 >>> 6; //@line 8078
    $60 = $$lobit & 255; //@line 8079
    $64 = ($54 & 32 | 0) == 0; //@line 8083
    $65 = HEAP32[104] | 0; //@line 8084
    $66 = HEAP32[103] | 0; //@line 8085
    $67 = $0 << 24 >> 24 == 1; //@line 8086
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8090
      _vsnprintf($66, $65, $2, $3) | 0; //@line 8091
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 64; //@line 8094
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 8097
       sp = STACKTOP; //@line 8098
       STACKTOP = sp; //@line 8099
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 8101
      $69 = HEAP32[111] | 0; //@line 8102
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[110] | 0; //@line 8106
       $74 = HEAP32[103] | 0; //@line 8107
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8108
       FUNCTION_TABLE_vi[$73 & 255]($74); //@line 8109
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 67; //@line 8112
        sp = STACKTOP; //@line 8113
        STACKTOP = sp; //@line 8114
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8116
        break;
       }
      }
      $71 = HEAP32[103] | 0; //@line 8120
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8121
      FUNCTION_TABLE_vi[$69 & 255]($71); //@line 8122
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 65; //@line 8125
       sp = STACKTOP; //@line 8126
       STACKTOP = sp; //@line 8127
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8129
      $72 = HEAP32[111] | 0; //@line 8130
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8131
      FUNCTION_TABLE_vi[$72 & 255](5569); //@line 8132
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 66; //@line 8135
       sp = STACKTOP; //@line 8136
       STACKTOP = sp; //@line 8137
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8139
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 8146
       $$1143 = $66; //@line 8146
       $$1145 = $65; //@line 8146
       $$3154 = 0; //@line 8146
       label = 38; //@line 8147
      } else {
       if ($64) {
        $$0142 = $66; //@line 8150
        $$0144 = $65; //@line 8150
       } else {
        $76 = _snprintf($66, $65, 5571, $vararg_buffer) | 0; //@line 8152
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 8154
        $78 = ($$ | 0) > 0; //@line 8155
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 8160
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 8160
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 8164
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 5589; //@line 8170
          label = 35; //@line 8171
          break;
         }
        case 1:
         {
          $$sink = 5595; //@line 8175
          label = 35; //@line 8176
          break;
         }
        case 3:
         {
          $$sink = 5583; //@line 8180
          label = 35; //@line 8181
          break;
         }
        case 7:
         {
          $$sink = 5577; //@line 8185
          label = 35; //@line 8186
          break;
         }
        default:
         {
          $$0141 = 0; //@line 8190
          $$1152 = 0; //@line 8190
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 8194
         $$0141 = $60 & 1; //@line 8197
         $$1152 = _snprintf($$0142, $$0144, 5601, $vararg_buffer1) | 0; //@line 8197
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 8200
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 8202
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 8204
         $$1$off0 = $extract$t159; //@line 8209
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 8209
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 8209
         $$3154 = $$1152; //@line 8209
         label = 38; //@line 8210
        } else {
         $$1$off0 = $extract$t159; //@line 8212
         $$1143 = $$0142; //@line 8212
         $$1145 = $$0144; //@line 8212
         $$3154 = $$1152$; //@line 8212
         label = 38; //@line 8213
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[108] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 8226
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8227
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 8228
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 68; //@line 8231
           HEAP32[$AsyncCtx60 + 4 >> 2] = $$3154; //@line 8233
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer20; //@line 8235
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer20; //@line 8237
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer23; //@line 8239
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer23; //@line 8241
           HEAP8[$AsyncCtx60 + 24 >> 0] = $$1$off0 & 1; //@line 8244
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer3; //@line 8246
           HEAP32[$AsyncCtx60 + 32 >> 2] = $$1143; //@line 8248
           HEAP32[$AsyncCtx60 + 36 >> 2] = $$1145; //@line 8250
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer3; //@line 8252
           HEAP32[$AsyncCtx60 + 44 >> 2] = $4; //@line 8254
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer6; //@line 8256
           HEAP32[$AsyncCtx60 + 52 >> 2] = $1; //@line 8258
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer6; //@line 8260
           HEAP32[$AsyncCtx60 + 60 >> 2] = $55; //@line 8262
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer12; //@line 8264
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer12; //@line 8266
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer9; //@line 8268
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer9; //@line 8270
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer18; //@line 8272
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer18; //@line 8274
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer15; //@line 8276
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer15; //@line 8278
           HEAP32[$AsyncCtx60 + 96 >> 2] = $2; //@line 8280
           HEAP32[$AsyncCtx60 + 100 >> 2] = $3; //@line 8282
           sp = STACKTOP; //@line 8283
           STACKTOP = sp; //@line 8284
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 8286
          $125 = HEAP32[108] | 0; //@line 8291
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8292
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 8293
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 69; //@line 8296
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer20; //@line 8298
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer20; //@line 8300
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer3; //@line 8302
           HEAP32[$AsyncCtx38 + 16 >> 2] = $$1143; //@line 8304
           HEAP32[$AsyncCtx38 + 20 >> 2] = $$1145; //@line 8306
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer3; //@line 8308
           HEAP32[$AsyncCtx38 + 28 >> 2] = $4; //@line 8310
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer6; //@line 8312
           HEAP32[$AsyncCtx38 + 36 >> 2] = $1; //@line 8314
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer6; //@line 8316
           HEAP32[$AsyncCtx38 + 44 >> 2] = $55; //@line 8318
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer12; //@line 8320
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer12; //@line 8322
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer9; //@line 8324
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer9; //@line 8326
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer18; //@line 8328
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer18; //@line 8330
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer15; //@line 8332
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer15; //@line 8334
           HEAP32[$AsyncCtx38 + 80 >> 2] = $2; //@line 8336
           HEAP32[$AsyncCtx38 + 84 >> 2] = $3; //@line 8338
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer23; //@line 8340
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer23; //@line 8342
           HEAP8[$AsyncCtx38 + 96 >> 0] = $$1$off0 & 1; //@line 8345
           sp = STACKTOP; //@line 8346
           STACKTOP = sp; //@line 8347
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8349
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 8350
           $151 = _snprintf($$1143, $$1145, 5601, $vararg_buffer3) | 0; //@line 8351
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 8353
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 8358
            $$3147 = $$1145 - $$10 | 0; //@line 8358
            label = 44; //@line 8359
            break;
           } else {
            $$3147168 = $$1145; //@line 8362
            $$3169 = $$1143; //@line 8362
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 8367
          $$3147 = $$1145; //@line 8367
          label = 44; //@line 8368
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 8374
          $$3169 = $$3; //@line 8374
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 8379
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 8385
          $$5156 = _snprintf($$3169, $$3147168, 5604, $vararg_buffer6) | 0; //@line 8387
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 8391
          $$5156 = _snprintf($$3169, $$3147168, 5619, $vararg_buffer9) | 0; //@line 8393
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 8397
          $$5156 = _snprintf($$3169, $$3147168, 5634, $vararg_buffer12) | 0; //@line 8399
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 8403
          $$5156 = _snprintf($$3169, $$3147168, 5649, $vararg_buffer15) | 0; //@line 8405
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 5664, $vararg_buffer18) | 0; //@line 8410
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 8414
        $168 = $$3169 + $$5156$ | 0; //@line 8416
        $169 = $$3147168 - $$5156$ | 0; //@line 8417
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8421
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 8422
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 70; //@line 8425
          HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer20; //@line 8427
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer20; //@line 8429
          HEAP32[$AsyncCtx56 + 12 >> 2] = $169; //@line 8431
          HEAP32[$AsyncCtx56 + 16 >> 2] = $168; //@line 8433
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer23; //@line 8435
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer23; //@line 8437
          HEAP8[$AsyncCtx56 + 28 >> 0] = $$1$off0 & 1; //@line 8440
          sp = STACKTOP; //@line 8441
          STACKTOP = sp; //@line 8442
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 8444
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 8446
         $181 = $168 + $$13 | 0; //@line 8448
         $182 = $169 - $$13 | 0; //@line 8449
         if (($$13 | 0) > 0) {
          $184 = HEAP32[109] | 0; //@line 8452
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8457
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 8458
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 71; //@line 8461
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 8463
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 8465
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 8467
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 8469
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 8472
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 8474
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 8476
             sp = STACKTOP; //@line 8477
             STACKTOP = sp; //@line 8478
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 8480
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 8481
             $194 = _snprintf($181, $182, 5601, $vararg_buffer20) | 0; //@line 8482
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 8484
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 8489
              $$6150 = $182 - $$18 | 0; //@line 8489
              $$9 = $$18; //@line 8489
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 8496
            $$6150 = $182; //@line 8496
            $$9 = $$13; //@line 8496
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 5679, $vararg_buffer23) | 0; //@line 8505
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[110] | 0; //@line 8511
      $202 = HEAP32[103] | 0; //@line 8512
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8513
      FUNCTION_TABLE_vi[$201 & 255]($202); //@line 8514
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 72; //@line 8517
       sp = STACKTOP; //@line 8518
       STACKTOP = sp; //@line 8519
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 8521
       break;
      }
     }
    } while (0);
    HEAP32[107] = HEAP32[105]; //@line 8527
   }
  }
 } while (0);
 $204 = HEAP32[113] | 0; //@line 8531
 if (!$204) {
  STACKTOP = sp; //@line 8534
  return;
 }
 $206 = HEAP32[114] | 0; //@line 8536
 HEAP32[114] = 0; //@line 8537
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8538
 FUNCTION_TABLE_v[$204 & 3](); //@line 8539
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 73; //@line 8542
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 8544
  sp = STACKTOP; //@line 8545
  STACKTOP = sp; //@line 8546
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 8548
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 8551
 } else {
  STACKTOP = sp; //@line 8553
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 8556
  $$pre = HEAP32[113] | 0; //@line 8557
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8558
  FUNCTION_TABLE_v[$$pre & 3](); //@line 8559
  if (___async) {
   label = 70; //@line 8562
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 8565
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 8568
  } else {
   label = 72; //@line 8570
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 74; //@line 8575
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 8577
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 8579
  sp = STACKTOP; //@line 8580
  STACKTOP = sp; //@line 8581
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 8584
  return;
 }
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 15476
 $3 = HEAP32[2448] | 0; //@line 15477
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 15480
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 15484
 $7 = $6 & 3; //@line 15485
 if (($7 | 0) == 1) {
  _abort(); //@line 15488
 }
 $9 = $6 & -8; //@line 15491
 $10 = $2 + $9 | 0; //@line 15492
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 15497
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 15503
   $17 = $13 + $9 | 0; //@line 15504
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 15507
   }
   if ((HEAP32[2449] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 15513
    $106 = HEAP32[$105 >> 2] | 0; //@line 15514
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 15518
     $$1382 = $17; //@line 15518
     $114 = $16; //@line 15518
     break;
    }
    HEAP32[2446] = $17; //@line 15521
    HEAP32[$105 >> 2] = $106 & -2; //@line 15523
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 15526
    HEAP32[$16 + $17 >> 2] = $17; //@line 15528
    return;
   }
   $21 = $13 >>> 3; //@line 15531
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 15535
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 15537
    $28 = 9816 + ($21 << 1 << 2) | 0; //@line 15539
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 15544
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 15551
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[2444] = HEAP32[2444] & ~(1 << $21); //@line 15561
     $$1 = $16; //@line 15562
     $$1382 = $17; //@line 15562
     $114 = $16; //@line 15562
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 15568
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 15572
     }
     $41 = $26 + 8 | 0; //@line 15575
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 15579
     } else {
      _abort(); //@line 15581
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 15586
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 15587
    $$1 = $16; //@line 15588
    $$1382 = $17; //@line 15588
    $114 = $16; //@line 15588
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 15592
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 15594
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 15598
     $60 = $59 + 4 | 0; //@line 15599
     $61 = HEAP32[$60 >> 2] | 0; //@line 15600
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 15603
      if (!$63) {
       $$3 = 0; //@line 15606
       break;
      } else {
       $$1387 = $63; //@line 15609
       $$1390 = $59; //@line 15609
      }
     } else {
      $$1387 = $61; //@line 15612
      $$1390 = $60; //@line 15612
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 15615
      $66 = HEAP32[$65 >> 2] | 0; //@line 15616
      if ($66 | 0) {
       $$1387 = $66; //@line 15619
       $$1390 = $65; //@line 15619
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 15622
      $69 = HEAP32[$68 >> 2] | 0; //@line 15623
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 15628
       $$1390 = $68; //@line 15628
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 15633
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 15636
      $$3 = $$1387; //@line 15637
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 15642
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 15645
     }
     $53 = $51 + 12 | 0; //@line 15648
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 15652
     }
     $56 = $48 + 8 | 0; //@line 15655
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 15659
      HEAP32[$56 >> 2] = $51; //@line 15660
      $$3 = $48; //@line 15661
      break;
     } else {
      _abort(); //@line 15664
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 15671
    $$1382 = $17; //@line 15671
    $114 = $16; //@line 15671
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 15674
    $75 = 10080 + ($74 << 2) | 0; //@line 15675
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 15680
      if (!$$3) {
       HEAP32[2445] = HEAP32[2445] & ~(1 << $74); //@line 15687
       $$1 = $16; //@line 15688
       $$1382 = $17; //@line 15688
       $114 = $16; //@line 15688
       break L10;
      }
     } else {
      if ((HEAP32[2448] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 15695
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 15703
       if (!$$3) {
        $$1 = $16; //@line 15706
        $$1382 = $17; //@line 15706
        $114 = $16; //@line 15706
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[2448] | 0; //@line 15714
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 15717
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 15721
    $92 = $16 + 16 | 0; //@line 15722
    $93 = HEAP32[$92 >> 2] | 0; //@line 15723
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 15729
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 15733
       HEAP32[$93 + 24 >> 2] = $$3; //@line 15735
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 15741
    if (!$99) {
     $$1 = $16; //@line 15744
     $$1382 = $17; //@line 15744
     $114 = $16; //@line 15744
    } else {
     if ((HEAP32[2448] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 15749
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 15753
      HEAP32[$99 + 24 >> 2] = $$3; //@line 15755
      $$1 = $16; //@line 15756
      $$1382 = $17; //@line 15756
      $114 = $16; //@line 15756
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 15762
   $$1382 = $9; //@line 15762
   $114 = $2; //@line 15762
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 15767
 }
 $115 = $10 + 4 | 0; //@line 15770
 $116 = HEAP32[$115 >> 2] | 0; //@line 15771
 if (!($116 & 1)) {
  _abort(); //@line 15775
 }
 if (!($116 & 2)) {
  if ((HEAP32[2450] | 0) == ($10 | 0)) {
   $124 = (HEAP32[2447] | 0) + $$1382 | 0; //@line 15785
   HEAP32[2447] = $124; //@line 15786
   HEAP32[2450] = $$1; //@line 15787
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 15790
   if (($$1 | 0) != (HEAP32[2449] | 0)) {
    return;
   }
   HEAP32[2449] = 0; //@line 15796
   HEAP32[2446] = 0; //@line 15797
   return;
  }
  if ((HEAP32[2449] | 0) == ($10 | 0)) {
   $132 = (HEAP32[2446] | 0) + $$1382 | 0; //@line 15804
   HEAP32[2446] = $132; //@line 15805
   HEAP32[2449] = $114; //@line 15806
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 15809
   HEAP32[$114 + $132 >> 2] = $132; //@line 15811
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 15815
  $138 = $116 >>> 3; //@line 15816
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 15821
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 15823
    $145 = 9816 + ($138 << 1 << 2) | 0; //@line 15825
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[2448] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 15831
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 15838
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[2444] = HEAP32[2444] & ~(1 << $138); //@line 15848
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 15854
    } else {
     if ((HEAP32[2448] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 15859
     }
     $160 = $143 + 8 | 0; //@line 15862
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 15866
     } else {
      _abort(); //@line 15868
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 15873
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 15874
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 15877
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 15879
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 15883
      $180 = $179 + 4 | 0; //@line 15884
      $181 = HEAP32[$180 >> 2] | 0; //@line 15885
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 15888
       if (!$183) {
        $$3400 = 0; //@line 15891
        break;
       } else {
        $$1398 = $183; //@line 15894
        $$1402 = $179; //@line 15894
       }
      } else {
       $$1398 = $181; //@line 15897
       $$1402 = $180; //@line 15897
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 15900
       $186 = HEAP32[$185 >> 2] | 0; //@line 15901
       if ($186 | 0) {
        $$1398 = $186; //@line 15904
        $$1402 = $185; //@line 15904
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 15907
       $189 = HEAP32[$188 >> 2] | 0; //@line 15908
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 15913
        $$1402 = $188; //@line 15913
       }
      }
      if ((HEAP32[2448] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 15919
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 15922
       $$3400 = $$1398; //@line 15923
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 15928
      if ((HEAP32[2448] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 15932
      }
      $173 = $170 + 12 | 0; //@line 15935
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 15939
      }
      $176 = $167 + 8 | 0; //@line 15942
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 15946
       HEAP32[$176 >> 2] = $170; //@line 15947
       $$3400 = $167; //@line 15948
       break;
      } else {
       _abort(); //@line 15951
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 15959
     $196 = 10080 + ($195 << 2) | 0; //@line 15960
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 15965
       if (!$$3400) {
        HEAP32[2445] = HEAP32[2445] & ~(1 << $195); //@line 15972
        break L108;
       }
      } else {
       if ((HEAP32[2448] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 15979
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 15987
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[2448] | 0; //@line 15997
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 16000
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 16004
     $213 = $10 + 16 | 0; //@line 16005
     $214 = HEAP32[$213 >> 2] | 0; //@line 16006
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 16012
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 16016
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 16018
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 16024
     if ($220 | 0) {
      if ((HEAP32[2448] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 16030
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 16034
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 16036
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 16045
  HEAP32[$114 + $137 >> 2] = $137; //@line 16047
  if (($$1 | 0) == (HEAP32[2449] | 0)) {
   HEAP32[2446] = $137; //@line 16051
   return;
  } else {
   $$2 = $137; //@line 16054
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 16058
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 16061
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 16063
  $$2 = $$1382; //@line 16064
 }
 $235 = $$2 >>> 3; //@line 16066
 if ($$2 >>> 0 < 256) {
  $238 = 9816 + ($235 << 1 << 2) | 0; //@line 16070
  $239 = HEAP32[2444] | 0; //@line 16071
  $240 = 1 << $235; //@line 16072
  if (!($239 & $240)) {
   HEAP32[2444] = $239 | $240; //@line 16077
   $$0403 = $238; //@line 16079
   $$pre$phiZ2D = $238 + 8 | 0; //@line 16079
  } else {
   $244 = $238 + 8 | 0; //@line 16081
   $245 = HEAP32[$244 >> 2] | 0; //@line 16082
   if ((HEAP32[2448] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 16086
   } else {
    $$0403 = $245; //@line 16089
    $$pre$phiZ2D = $244; //@line 16089
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 16092
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 16094
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 16096
  HEAP32[$$1 + 12 >> 2] = $238; //@line 16098
  return;
 }
 $251 = $$2 >>> 8; //@line 16101
 if (!$251) {
  $$0396 = 0; //@line 16104
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 16108
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 16112
   $257 = $251 << $256; //@line 16113
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 16116
   $262 = $257 << $260; //@line 16118
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 16121
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 16126
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 16132
  }
 }
 $276 = 10080 + ($$0396 << 2) | 0; //@line 16135
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 16137
 HEAP32[$$1 + 20 >> 2] = 0; //@line 16140
 HEAP32[$$1 + 16 >> 2] = 0; //@line 16141
 $280 = HEAP32[2445] | 0; //@line 16142
 $281 = 1 << $$0396; //@line 16143
 do {
  if (!($280 & $281)) {
   HEAP32[2445] = $280 | $281; //@line 16149
   HEAP32[$276 >> 2] = $$1; //@line 16150
   HEAP32[$$1 + 24 >> 2] = $276; //@line 16152
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 16154
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 16156
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 16164
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 16164
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 16171
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 16175
    $301 = HEAP32[$299 >> 2] | 0; //@line 16177
    if (!$301) {
     label = 121; //@line 16180
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 16183
     $$0384 = $301; //@line 16183
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[2448] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 16190
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 16193
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 16195
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 16197
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 16199
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 16204
    $309 = HEAP32[$308 >> 2] | 0; //@line 16205
    $310 = HEAP32[2448] | 0; //@line 16206
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 16212
     HEAP32[$308 >> 2] = $$1; //@line 16213
     HEAP32[$$1 + 8 >> 2] = $309; //@line 16215
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 16217
     HEAP32[$$1 + 24 >> 2] = 0; //@line 16219
     break;
    } else {
     _abort(); //@line 16222
    }
   }
  }
 } while (0);
 $319 = (HEAP32[2452] | 0) + -1 | 0; //@line 16229
 HEAP32[2452] = $319; //@line 16230
 if (!$319) {
  $$0212$in$i = 10232; //@line 16233
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 16238
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 16244
  }
 }
 HEAP32[2452] = -1; //@line 16247
 return;
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8834
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 8836
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8838
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8840
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8842
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8846
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8848
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8850
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8852
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8854
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8858
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8860
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8862
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8864
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8866
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8868
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8870
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8872
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8874
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8876
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8878
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8880
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8882
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 8884
 HEAP32[114] = (HEAP32[114] | 0) + 1; //@line 8887
 $53 = HEAP32[103] | 0; //@line 8888
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 8892
   do {
    if ($2 << 24 >> 24 > -1 & ($28 | 0) != 0) {
     $57 = HEAP32[100] | 0; //@line 8898
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $28) | 0) {
       $$0$i = 1; //@line 8905
       break;
      }
     }
     $62 = HEAP32[101] | 0; //@line 8909
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 8913
     } else {
      if (!(_strstr($62, $28) | 0)) {
       $$0$i = 1; //@line 8918
      } else {
       label = 9; //@line 8920
      }
     }
    } else {
     label = 9; //@line 8924
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 8928
   }
   if (!((HEAP32[110] | 0) != 0 & ((($28 | 0) == 0 | (($4 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[107] = HEAP32[105]; //@line 8940
    break;
   }
   $73 = HEAPU8[396] | 0; //@line 8944
   $74 = $2 & 255; //@line 8945
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 8950
    $$lobit = $78 >>> 6; //@line 8951
    $79 = $$lobit & 255; //@line 8952
    $83 = ($73 & 32 | 0) == 0; //@line 8956
    $84 = HEAP32[104] | 0; //@line 8957
    $85 = HEAP32[103] | 0; //@line 8958
    $86 = $2 << 24 >> 24 == 1; //@line 8959
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 8962
     _vsnprintf($85, $84, $4, $6) | 0; //@line 8963
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 64; //@line 8966
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 8967
      $$expand_i1_val = $86 & 1; //@line 8968
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 8969
      sp = STACKTOP; //@line 8970
      return;
     }
     ___async_unwind = 0; //@line 8973
     HEAP32[$ReallocAsyncCtx12 >> 2] = 64; //@line 8974
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 8975
     $$expand_i1_val = $86 & 1; //@line 8976
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 8977
     sp = STACKTOP; //@line 8978
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 8984
     $$1143 = $85; //@line 8984
     $$1145 = $84; //@line 8984
     $$3154 = 0; //@line 8984
     label = 28; //@line 8985
    } else {
     if ($83) {
      $$0142 = $85; //@line 8988
      $$0144 = $84; //@line 8988
     } else {
      $89 = _snprintf($85, $84, 5571, $8) | 0; //@line 8990
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 8992
      $91 = ($$ | 0) > 0; //@line 8993
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 8998
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 8998
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 9002
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 5589; //@line 9008
        label = 25; //@line 9009
        break;
       }
      case 1:
       {
        $$sink = 5595; //@line 9013
        label = 25; //@line 9014
        break;
       }
      case 3:
       {
        $$sink = 5583; //@line 9018
        label = 25; //@line 9019
        break;
       }
      case 7:
       {
        $$sink = 5577; //@line 9023
        label = 25; //@line 9024
        break;
       }
      default:
       {
        $$0141 = 0; //@line 9028
        $$1152 = 0; //@line 9028
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$20 >> 2] = $$sink; //@line 9032
       $$0141 = $79 & 1; //@line 9035
       $$1152 = _snprintf($$0142, $$0144, 5601, $20) | 0; //@line 9035
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 9038
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 9040
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 9042
       $$1$off0 = $extract$t159; //@line 9047
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 9047
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 9047
       $$3154 = $$1152; //@line 9047
       label = 28; //@line 9048
      } else {
       $$1$off0 = $extract$t159; //@line 9050
       $$1143 = $$0142; //@line 9050
       $$1145 = $$0144; //@line 9050
       $$3154 = $$1152$; //@line 9050
       label = 28; //@line 9051
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[108] | 0) != 0) {
      HEAP32[$24 >> 2] = HEAP32[$6 >> 2]; //@line 9062
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 9063
      $108 = _vsnprintf(0, 0, $4, $24) | 0; //@line 9064
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 68; //@line 9067
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 9068
       HEAP32[$109 >> 2] = $$3154; //@line 9069
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 9070
       HEAP32[$110 >> 2] = $12; //@line 9071
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 9072
       HEAP32[$111 >> 2] = $14; //@line 9073
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 9074
       HEAP32[$112 >> 2] = $48; //@line 9075
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 9076
       HEAP32[$113 >> 2] = $50; //@line 9077
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 9078
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 9079
       HEAP8[$114 >> 0] = $$1$off0$expand_i1_val; //@line 9080
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 9081
       HEAP32[$115 >> 2] = $16; //@line 9082
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 9083
       HEAP32[$116 >> 2] = $$1143; //@line 9084
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 9085
       HEAP32[$117 >> 2] = $$1145; //@line 9086
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 9087
       HEAP32[$118 >> 2] = $18; //@line 9088
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 9089
       HEAP32[$119 >> 2] = $24; //@line 9090
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 9091
       HEAP32[$120 >> 2] = $26; //@line 9092
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 9093
       HEAP32[$121 >> 2] = $28; //@line 9094
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 9095
       HEAP32[$122 >> 2] = $30; //@line 9096
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 9097
       HEAP32[$123 >> 2] = $74; //@line 9098
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 9099
       HEAP32[$124 >> 2] = $32; //@line 9100
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 9101
       HEAP32[$125 >> 2] = $34; //@line 9102
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 9103
       HEAP32[$126 >> 2] = $36; //@line 9104
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 9105
       HEAP32[$127 >> 2] = $38; //@line 9106
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 9107
       HEAP32[$128 >> 2] = $40; //@line 9108
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 9109
       HEAP32[$129 >> 2] = $42; //@line 9110
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 9111
       HEAP32[$130 >> 2] = $44; //@line 9112
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 9113
       HEAP32[$131 >> 2] = $46; //@line 9114
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 9115
       HEAP32[$132 >> 2] = $4; //@line 9116
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 9117
       HEAP32[$133 >> 2] = $6; //@line 9118
       sp = STACKTOP; //@line 9119
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 9123
      ___async_unwind = 0; //@line 9124
      HEAP32[$ReallocAsyncCtx11 >> 2] = 68; //@line 9125
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 9126
      HEAP32[$109 >> 2] = $$3154; //@line 9127
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 9128
      HEAP32[$110 >> 2] = $12; //@line 9129
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 9130
      HEAP32[$111 >> 2] = $14; //@line 9131
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 9132
      HEAP32[$112 >> 2] = $48; //@line 9133
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 9134
      HEAP32[$113 >> 2] = $50; //@line 9135
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 9136
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 9137
      HEAP8[$114 >> 0] = $$1$off0$expand_i1_val; //@line 9138
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 9139
      HEAP32[$115 >> 2] = $16; //@line 9140
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 9141
      HEAP32[$116 >> 2] = $$1143; //@line 9142
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 9143
      HEAP32[$117 >> 2] = $$1145; //@line 9144
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 9145
      HEAP32[$118 >> 2] = $18; //@line 9146
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 9147
      HEAP32[$119 >> 2] = $24; //@line 9148
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 9149
      HEAP32[$120 >> 2] = $26; //@line 9150
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 9151
      HEAP32[$121 >> 2] = $28; //@line 9152
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 9153
      HEAP32[$122 >> 2] = $30; //@line 9154
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 9155
      HEAP32[$123 >> 2] = $74; //@line 9156
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 9157
      HEAP32[$124 >> 2] = $32; //@line 9158
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 9159
      HEAP32[$125 >> 2] = $34; //@line 9160
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 9161
      HEAP32[$126 >> 2] = $36; //@line 9162
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 9163
      HEAP32[$127 >> 2] = $38; //@line 9164
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 9165
      HEAP32[$128 >> 2] = $40; //@line 9166
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 9167
      HEAP32[$129 >> 2] = $42; //@line 9168
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 9169
      HEAP32[$130 >> 2] = $44; //@line 9170
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 9171
      HEAP32[$131 >> 2] = $46; //@line 9172
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 9173
      HEAP32[$132 >> 2] = $4; //@line 9174
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 9175
      HEAP32[$133 >> 2] = $6; //@line 9176
      sp = STACKTOP; //@line 9177
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 9182
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$26 >> 2] = $28; //@line 9188
        $$5156 = _snprintf($$1143, $$1145, 5604, $26) | 0; //@line 9190
        break;
       }
      case 1:
       {
        HEAP32[$36 >> 2] = $28; //@line 9194
        $$5156 = _snprintf($$1143, $$1145, 5619, $36) | 0; //@line 9196
        break;
       }
      case 3:
       {
        HEAP32[$32 >> 2] = $28; //@line 9200
        $$5156 = _snprintf($$1143, $$1145, 5634, $32) | 0; //@line 9202
        break;
       }
      case 7:
       {
        HEAP32[$44 >> 2] = $28; //@line 9206
        $$5156 = _snprintf($$1143, $$1145, 5649, $44) | 0; //@line 9208
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 5664, $40) | 0; //@line 9213
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 9217
      $147 = $$1143 + $$5156$ | 0; //@line 9219
      $148 = $$1145 - $$5156$ | 0; //@line 9220
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 9224
       $150 = _vsnprintf($147, $148, $4, $6) | 0; //@line 9225
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 70; //@line 9228
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 9229
        HEAP32[$151 >> 2] = $12; //@line 9230
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 9231
        HEAP32[$152 >> 2] = $14; //@line 9232
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 9233
        HEAP32[$153 >> 2] = $148; //@line 9234
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 9235
        HEAP32[$154 >> 2] = $147; //@line 9236
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 9237
        HEAP32[$155 >> 2] = $48; //@line 9238
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 9239
        HEAP32[$156 >> 2] = $50; //@line 9240
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 9241
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 9242
        HEAP8[$157 >> 0] = $$1$off0$expand_i1_val18; //@line 9243
        sp = STACKTOP; //@line 9244
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 9248
       ___async_unwind = 0; //@line 9249
       HEAP32[$ReallocAsyncCtx10 >> 2] = 70; //@line 9250
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 9251
       HEAP32[$151 >> 2] = $12; //@line 9252
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 9253
       HEAP32[$152 >> 2] = $14; //@line 9254
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 9255
       HEAP32[$153 >> 2] = $148; //@line 9256
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 9257
       HEAP32[$154 >> 2] = $147; //@line 9258
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 9259
       HEAP32[$155 >> 2] = $48; //@line 9260
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 9261
       HEAP32[$156 >> 2] = $50; //@line 9262
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 9263
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 9264
       HEAP8[$157 >> 0] = $$1$off0$expand_i1_val18; //@line 9265
       sp = STACKTOP; //@line 9266
       return;
      }
     }
    }
    $159 = HEAP32[110] | 0; //@line 9271
    $160 = HEAP32[103] | 0; //@line 9272
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 9273
    FUNCTION_TABLE_vi[$159 & 255]($160); //@line 9274
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9277
     sp = STACKTOP; //@line 9278
     return;
    }
    ___async_unwind = 0; //@line 9281
    HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9282
    sp = STACKTOP; //@line 9283
    return;
   }
  }
 } while (0);
 $161 = HEAP32[113] | 0; //@line 9288
 if (!$161) {
  return;
 }
 $163 = HEAP32[114] | 0; //@line 9293
 HEAP32[114] = 0; //@line 9294
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 9295
 FUNCTION_TABLE_v[$161 & 3](); //@line 9296
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9299
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 9300
  HEAP32[$164 >> 2] = $163; //@line 9301
  sp = STACKTOP; //@line 9302
  return;
 }
 ___async_unwind = 0; //@line 9305
 HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9306
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 9307
 HEAP32[$164 >> 2] = $163; //@line 9308
 sp = STACKTOP; //@line 9309
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 16779
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 16781
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 16786
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 16793
   $12 = $7 + $1 | 0; //@line 16794
   $13 = HEAP32[2448] | 0; //@line 16795
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 16798
   }
   if ((HEAP32[2449] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 16804
    $102 = HEAP32[$101 >> 2] | 0; //@line 16805
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 16809
     $$1418 = $12; //@line 16809
     break;
    }
    HEAP32[2446] = $12; //@line 16812
    HEAP32[$101 >> 2] = $102 & -2; //@line 16814
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 16817
    HEAP32[$2 >> 2] = $12; //@line 16818
    return;
   }
   $17 = $7 >>> 3; //@line 16821
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 16825
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 16827
    $24 = 9816 + ($17 << 1 << 2) | 0; //@line 16829
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 16834
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 16841
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[2444] = HEAP32[2444] & ~(1 << $17); //@line 16851
     $$1 = $11; //@line 16852
     $$1418 = $12; //@line 16852
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 16858
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 16862
     }
     $37 = $22 + 8 | 0; //@line 16865
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 16869
     } else {
      _abort(); //@line 16871
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 16876
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 16877
    $$1 = $11; //@line 16878
    $$1418 = $12; //@line 16878
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 16882
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 16884
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 16888
     $56 = $55 + 4 | 0; //@line 16889
     $57 = HEAP32[$56 >> 2] | 0; //@line 16890
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 16893
      if (!$59) {
       $$3 = 0; //@line 16896
       break;
      } else {
       $$1426 = $59; //@line 16899
       $$1429 = $55; //@line 16899
      }
     } else {
      $$1426 = $57; //@line 16902
      $$1429 = $56; //@line 16902
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 16905
      $62 = HEAP32[$61 >> 2] | 0; //@line 16906
      if ($62 | 0) {
       $$1426 = $62; //@line 16909
       $$1429 = $61; //@line 16909
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 16912
      $65 = HEAP32[$64 >> 2] | 0; //@line 16913
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 16918
       $$1429 = $64; //@line 16918
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 16923
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 16926
      $$3 = $$1426; //@line 16927
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 16932
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 16935
     }
     $49 = $47 + 12 | 0; //@line 16938
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 16942
     }
     $52 = $44 + 8 | 0; //@line 16945
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 16949
      HEAP32[$52 >> 2] = $47; //@line 16950
      $$3 = $44; //@line 16951
      break;
     } else {
      _abort(); //@line 16954
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 16961
    $$1418 = $12; //@line 16961
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 16964
    $71 = 10080 + ($70 << 2) | 0; //@line 16965
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 16970
      if (!$$3) {
       HEAP32[2445] = HEAP32[2445] & ~(1 << $70); //@line 16977
       $$1 = $11; //@line 16978
       $$1418 = $12; //@line 16978
       break L1;
      }
     } else {
      if ((HEAP32[2448] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 16985
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 16993
       if (!$$3) {
        $$1 = $11; //@line 16996
        $$1418 = $12; //@line 16996
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[2448] | 0; //@line 17004
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 17007
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 17011
    $88 = $11 + 16 | 0; //@line 17012
    $89 = HEAP32[$88 >> 2] | 0; //@line 17013
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 17019
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 17023
       HEAP32[$89 + 24 >> 2] = $$3; //@line 17025
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 17031
    if (!$95) {
     $$1 = $11; //@line 17034
     $$1418 = $12; //@line 17034
    } else {
     if ((HEAP32[2448] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 17039
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 17043
      HEAP32[$95 + 24 >> 2] = $$3; //@line 17045
      $$1 = $11; //@line 17046
      $$1418 = $12; //@line 17046
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 17052
   $$1418 = $1; //@line 17052
  }
 } while (0);
 $108 = HEAP32[2448] | 0; //@line 17055
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 17058
 }
 $110 = $2 + 4 | 0; //@line 17061
 $111 = HEAP32[$110 >> 2] | 0; //@line 17062
 if (!($111 & 2)) {
  if ((HEAP32[2450] | 0) == ($2 | 0)) {
   $117 = (HEAP32[2447] | 0) + $$1418 | 0; //@line 17070
   HEAP32[2447] = $117; //@line 17071
   HEAP32[2450] = $$1; //@line 17072
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 17075
   if (($$1 | 0) != (HEAP32[2449] | 0)) {
    return;
   }
   HEAP32[2449] = 0; //@line 17081
   HEAP32[2446] = 0; //@line 17082
   return;
  }
  if ((HEAP32[2449] | 0) == ($2 | 0)) {
   $125 = (HEAP32[2446] | 0) + $$1418 | 0; //@line 17089
   HEAP32[2446] = $125; //@line 17090
   HEAP32[2449] = $$1; //@line 17091
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 17094
   HEAP32[$$1 + $125 >> 2] = $125; //@line 17096
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 17100
  $131 = $111 >>> 3; //@line 17101
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 17106
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 17108
    $138 = 9816 + ($131 << 1 << 2) | 0; //@line 17110
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 17115
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 17122
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[2444] = HEAP32[2444] & ~(1 << $131); //@line 17132
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 17138
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 17142
     }
     $151 = $136 + 8 | 0; //@line 17145
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 17149
     } else {
      _abort(); //@line 17151
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 17156
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 17157
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 17160
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 17162
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 17166
      $170 = $169 + 4 | 0; //@line 17167
      $171 = HEAP32[$170 >> 2] | 0; //@line 17168
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 17171
       if (!$173) {
        $$3435 = 0; //@line 17174
        break;
       } else {
        $$1433 = $173; //@line 17177
        $$1437 = $169; //@line 17177
       }
      } else {
       $$1433 = $171; //@line 17180
       $$1437 = $170; //@line 17180
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 17183
       $176 = HEAP32[$175 >> 2] | 0; //@line 17184
       if ($176 | 0) {
        $$1433 = $176; //@line 17187
        $$1437 = $175; //@line 17187
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 17190
       $179 = HEAP32[$178 >> 2] | 0; //@line 17191
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 17196
        $$1437 = $178; //@line 17196
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 17201
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 17204
       $$3435 = $$1433; //@line 17205
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 17210
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 17213
      }
      $163 = $161 + 12 | 0; //@line 17216
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 17220
      }
      $166 = $158 + 8 | 0; //@line 17223
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 17227
       HEAP32[$166 >> 2] = $161; //@line 17228
       $$3435 = $158; //@line 17229
       break;
      } else {
       _abort(); //@line 17232
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 17240
     $185 = 10080 + ($184 << 2) | 0; //@line 17241
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 17246
       if (!$$3435) {
        HEAP32[2445] = HEAP32[2445] & ~(1 << $184); //@line 17253
        break L96;
       }
      } else {
       if ((HEAP32[2448] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 17260
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 17268
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[2448] | 0; //@line 17278
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 17281
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 17285
     $202 = $2 + 16 | 0; //@line 17286
     $203 = HEAP32[$202 >> 2] | 0; //@line 17287
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 17293
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 17297
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 17299
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 17305
     if ($209 | 0) {
      if ((HEAP32[2448] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 17311
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 17315
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 17317
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 17326
  HEAP32[$$1 + $130 >> 2] = $130; //@line 17328
  if (($$1 | 0) == (HEAP32[2449] | 0)) {
   HEAP32[2446] = $130; //@line 17332
   return;
  } else {
   $$2 = $130; //@line 17335
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 17339
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 17342
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 17344
  $$2 = $$1418; //@line 17345
 }
 $224 = $$2 >>> 3; //@line 17347
 if ($$2 >>> 0 < 256) {
  $227 = 9816 + ($224 << 1 << 2) | 0; //@line 17351
  $228 = HEAP32[2444] | 0; //@line 17352
  $229 = 1 << $224; //@line 17353
  if (!($228 & $229)) {
   HEAP32[2444] = $228 | $229; //@line 17358
   $$0438 = $227; //@line 17360
   $$pre$phiZ2D = $227 + 8 | 0; //@line 17360
  } else {
   $233 = $227 + 8 | 0; //@line 17362
   $234 = HEAP32[$233 >> 2] | 0; //@line 17363
   if ((HEAP32[2448] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 17367
   } else {
    $$0438 = $234; //@line 17370
    $$pre$phiZ2D = $233; //@line 17370
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 17373
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 17375
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 17377
  HEAP32[$$1 + 12 >> 2] = $227; //@line 17379
  return;
 }
 $240 = $$2 >>> 8; //@line 17382
 if (!$240) {
  $$0431 = 0; //@line 17385
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 17389
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 17393
   $246 = $240 << $245; //@line 17394
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 17397
   $251 = $246 << $249; //@line 17399
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 17402
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 17407
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 17413
  }
 }
 $265 = 10080 + ($$0431 << 2) | 0; //@line 17416
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 17418
 HEAP32[$$1 + 20 >> 2] = 0; //@line 17421
 HEAP32[$$1 + 16 >> 2] = 0; //@line 17422
 $269 = HEAP32[2445] | 0; //@line 17423
 $270 = 1 << $$0431; //@line 17424
 if (!($269 & $270)) {
  HEAP32[2445] = $269 | $270; //@line 17429
  HEAP32[$265 >> 2] = $$1; //@line 17430
  HEAP32[$$1 + 24 >> 2] = $265; //@line 17432
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 17434
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 17436
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 17445
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 17445
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 17452
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 17456
  $290 = HEAP32[$288 >> 2] | 0; //@line 17458
  if (!$290) {
   label = 118; //@line 17461
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 17464
   $$0420 = $290; //@line 17464
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[2448] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 17471
  }
  HEAP32[$288 >> 2] = $$1; //@line 17474
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 17476
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 17478
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 17480
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 17484
  $298 = HEAP32[$297 >> 2] | 0; //@line 17485
  $299 = HEAP32[2448] | 0; //@line 17486
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 17491
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 17495
  HEAP32[$297 >> 2] = $$1; //@line 17496
  HEAP32[$$1 + 8 >> 2] = $298; //@line 17498
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 17500
  HEAP32[$$1 + 24 >> 2] = 0; //@line 17502
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 20080
   $289 = 0; //@line 20081
   $290 = 0; //@line 20081
  } else {
   $6 = $0 + 4 | 0; //@line 20083
   $7 = $0 + 100 | 0; //@line 20084
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 20086
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 20091
     $16 = HEAPU8[$9 >> 0] | 0; //@line 20094
    } else {
     $16 = ___shgetc($0) | 0; //@line 20097
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 20109
      $21 = HEAP32[$6 >> 2] | 0; //@line 20110
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 20115
       $$0157 = $20; //@line 20118
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 20118
       break L11;
      } else {
       $$0157 = $20; //@line 20122
       $$0159 = ___shgetc($0) | 0; //@line 20122
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 20128
      $$0159 = $16; //@line 20128
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 20132
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 20139
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 20144
      $40 = HEAPU8[$32 >> 0] | 0; //@line 20147
     } else {
      $40 = ___shgetc($0) | 0; //@line 20150
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 20156
       $$1165167 = 8; //@line 20156
       label = 46; //@line 20157
       break;
      } else {
       $$1160 = $40; //@line 20160
       $$1165 = $1; //@line 20160
       label = 32; //@line 20161
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 20165
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 20170
      $50 = HEAPU8[$42 >> 0] | 0; //@line 20173
     } else {
      $50 = ___shgetc($0) | 0; //@line 20176
     }
     if ((HEAPU8[6417 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 20183
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 20187
      }
      if (!$2) {
       ___shlim($0, 0); //@line 20191
       $289 = 0; //@line 20192
       $290 = 0; //@line 20192
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 20196
       $290 = 0; //@line 20196
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 20201
      $289 = 0; //@line 20202
      $290 = 0; //@line 20202
      break L1;
     } else {
      $$1160169 = $50; //@line 20205
      $$1165167 = 16; //@line 20205
      label = 46; //@line 20206
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 20209
     if ($$166 >>> 0 > (HEAPU8[6417 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 20215
      $$1165 = $$166; //@line 20215
      label = 32; //@line 20216
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 20223
      }
      ___shlim($0, 0); //@line 20225
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 20227
      $289 = 0; //@line 20228
      $290 = 0; //@line 20228
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 20237
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 20240
       $74 = $70; //@line 20240
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 20243
        $75 = HEAP32[$6 >> 2] | 0; //@line 20244
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 20249
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 20252
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 20255
        }
        $74 = $$2161$be + -48 | 0; //@line 20257
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 20267
       $291 = $$0154222; //@line 20267
       $292 = 0; //@line 20267
      } else {
       $$2161$lcssa = $$1160; //@line 20269
       $291 = 0; //@line 20269
       $292 = 0; //@line 20269
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 20271
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 20274
       $88 = $291; //@line 20274
       $89 = $292; //@line 20274
       $93 = $86; //@line 20274
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 20276
        $91 = tempRet0; //@line 20277
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 20279
        $96 = ~$94; //@line 20281
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 20288
         $$8 = $$3162215; //@line 20288
         $293 = $88; //@line 20288
         $294 = $89; //@line 20288
         label = 72; //@line 20289
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 20292
        $89 = tempRet0; //@line 20293
        $104 = HEAP32[$6 >> 2] | 0; //@line 20294
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 20299
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 20302
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 20305
        }
        $93 = $$3162$be + -48 | 0; //@line 20307
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 20316
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 20323
        $263 = $89; //@line 20323
        $265 = $88; //@line 20323
       } else {
        $$1165168 = 10; //@line 20325
        $$8 = $$3162$be; //@line 20325
        $293 = $88; //@line 20325
        $294 = $89; //@line 20325
        label = 72; //@line 20326
       }
      } else {
       $$1158 = $$0157; //@line 20329
       $263 = $292; //@line 20329
       $265 = $291; //@line 20329
      }
     } else {
      $$1160169 = $$1160; //@line 20332
      $$1165167 = $$1165; //@line 20332
      label = 46; //@line 20333
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[6673 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 20348
      $133 = HEAP8[6417 + $$1160169 >> 0] | 0; //@line 20350
      $134 = $133 & 255; //@line 20351
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 20354
       $138 = $134; //@line 20354
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 20357
        $139 = HEAP32[$6 >> 2] | 0; //@line 20358
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 20363
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 20366
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 20369
        }
        $147 = HEAP8[6417 + $$4163$be >> 0] | 0; //@line 20372
        $138 = $147 & 255; //@line 20373
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 20383
       $155 = $147; //@line 20383
       $158 = 0; //@line 20383
       $160 = $$1155192; //@line 20383
      } else {
       $$4163$lcssa = $$1160169; //@line 20385
       $155 = $133; //@line 20385
       $158 = 0; //@line 20385
       $160 = 0; //@line 20385
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 20387
      $153 = tempRet0; //@line 20388
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 20398
       $$8 = $$4163$lcssa; //@line 20398
       $293 = $160; //@line 20398
       $294 = $158; //@line 20398
       label = 72; //@line 20399
       break;
      } else {
       $164 = $160; //@line 20402
       $165 = $158; //@line 20402
       $169 = $155; //@line 20402
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 20405
       $167 = tempRet0; //@line 20406
       $170 = $166 | $169 & 255; //@line 20408
       $171 = HEAP32[$6 >> 2] | 0; //@line 20409
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 20414
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 20417
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 20420
       }
       $169 = HEAP8[6417 + $$5$be >> 0] | 0; //@line 20423
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 20433
        $$8 = $$5$be; //@line 20433
        $293 = $170; //@line 20433
        $294 = $167; //@line 20433
        label = 72; //@line 20434
        break L63;
       } else {
        $164 = $170; //@line 20437
        $165 = $167; //@line 20437
       }
      }
     }
     $123 = HEAP8[6417 + $$1160169 >> 0] | 0; //@line 20442
     $124 = $123 & 255; //@line 20443
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 20446
      $189 = $124; //@line 20446
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 20449
       $190 = HEAP32[$6 >> 2] | 0; //@line 20450
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 20455
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 20458
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 20461
       }
       $198 = HEAP8[6417 + $$6$be >> 0] | 0; //@line 20464
       $189 = $198 & 255; //@line 20465
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 20475
      $204 = $198; //@line 20475
      $295 = $$2156210; //@line 20475
      $296 = 0; //@line 20475
     } else {
      $$6$lcssa = $$1160169; //@line 20477
      $204 = $123; //@line 20477
      $295 = 0; //@line 20477
      $296 = 0; //@line 20477
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 20482
      $207 = tempRet0; //@line 20483
      $$7198 = $$6$lcssa; //@line 20484
      $209 = $296; //@line 20484
      $211 = $295; //@line 20484
      $218 = $204; //@line 20484
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 20492
        $$8 = $$7198; //@line 20492
        $293 = $211; //@line 20492
        $294 = $209; //@line 20492
        label = 72; //@line 20493
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 20496
       $216 = tempRet0; //@line 20497
       $217 = $218 & 255; //@line 20498
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 20506
        $$8 = $$7198; //@line 20506
        $293 = $211; //@line 20506
        $294 = $209; //@line 20506
        label = 72; //@line 20507
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 20510
       $226 = tempRet0; //@line 20511
       $227 = HEAP32[$6 >> 2] | 0; //@line 20512
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 20517
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 20520
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 20523
       }
       $218 = HEAP8[6417 + $$7$be >> 0] | 0; //@line 20526
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 20532
        $$8 = $$7$be; //@line 20532
        $293 = $225; //@line 20532
        $294 = $226; //@line 20532
        label = 72; //@line 20533
        break;
       } else {
        $$7198 = $$7$be; //@line 20530
        $209 = $226; //@line 20530
        $211 = $225; //@line 20530
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 20538
      $$8 = $$6$lcssa; //@line 20538
      $293 = $295; //@line 20538
      $294 = $296; //@line 20538
      label = 72; //@line 20539
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[6417 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 20550
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 20555
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 20558
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 20561
      }
     } while ($$1165168 >>> 0 > (HEAPU8[6417 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 20572
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 20578
     $263 = $4; //@line 20578
     $265 = $3; //@line 20578
    } else {
     $$1158 = $$0157; //@line 20580
     $263 = $294; //@line 20580
     $265 = $293; //@line 20580
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 20588
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 20604
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 20605
     $289 = tempRet0; //@line 20607
     $290 = $275; //@line 20607
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 20617
     $289 = $4; //@line 20618
     $290 = $3; //@line 20618
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 20623
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 20626
   $289 = tempRet0; //@line 20628
   $290 = $287; //@line 20628
  }
 } while (0);
 tempRet0 = $289; //@line 20631
 return $290 | 0; //@line 20632
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_64($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$1 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $101 = 0, $109 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $56 = 0, $6 = 0, $62 = 0, $69 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $85 = 0, $86 = 0, $90 = 0, $93 = 0, $95 = 0, $96 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14170
 STACKTOP = STACKTOP + 32 | 0; //@line 14171
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14171
 $$byval_copy = sp; //@line 14172
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14176
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 14178
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14180
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14182
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14184
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14186
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14188
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14190
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14192
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14194
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14196
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14198
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14200
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14202
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14204
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14206
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14208
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14210
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14212
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$16 >> 0] = 0; //@line 14215
  HEAP8[$18 >> 0] = 1; //@line 14216
  HEAP8[$20 >> 0] = 1; //@line 14217
  HEAP8[$22 >> 0] = 0; //@line 14218
  HEAP8[$24 >> 0] = 0; //@line 14219
  HEAP8[$26 >> 0] = 1; //@line 14220
  HEAP8[$28 >> 0] = 0; //@line 14221
  HEAP8[$28 + 1 >> 0] = 0; //@line 14221
  HEAP8[$28 + 2 >> 0] = 0; //@line 14221
  HEAP8[$28 + 3 >> 0] = 0; //@line 14221
  HEAP8[$28 + 4 >> 0] = 0; //@line 14221
  HEAP8[$28 + 5 >> 0] = 0; //@line 14221
  if (!(HEAP8[$4 >> 0] | 0)) {
   $223 = $2; //@line 14225
  } else {
   $$019$i$1 = $4; //@line 14227
   $211 = $2; //@line 14227
   while (1) {
    $208 = _strcspn($$019$i$1, 7214) | 0; //@line 14229
    $210 = $211 + 1 | 0; //@line 14231
    HEAP8[$211 >> 0] = $208; //@line 14232
    $212 = $208 & 255; //@line 14233
    _memcpy($210 | 0, $$019$i$1 | 0, $212 | 0) | 0; //@line 14234
    $213 = $210 + $212 | 0; //@line 14235
    $$019$i$1 = $$019$i$1 + ($208 + ((HEAP8[$$019$i$1 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 14241
    if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
     $223 = $213; //@line 14245
     break;
    } else {
     $211 = $213; //@line 14248
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 14253
  HEAP8[$223 + 1 >> 0] = 0; //@line 14255
  HEAP8[$223 + 2 >> 0] = $6; //@line 14257
  HEAP8[$223 + 3 >> 0] = 0; //@line 14259
  HEAP8[$223 + 4 >> 0] = 1; //@line 14260
  HEAP32[$$byval_copy >> 2] = HEAP32[135]; //@line 14261
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[136]; //@line 14261
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[137]; //@line 14261
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[138]; //@line 14261
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[139]; //@line 14261
  __ZN13SocketAddressC2E10nsapi_addrt($10, $$byval_copy, 53); //@line 14262
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(80) | 0; //@line 14266
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($14, $10, $16, $223 + 5 - $12 | 0) | 0; //@line 14267
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 14270
   $231 = $ReallocAsyncCtx9 + 4 | 0; //@line 14271
   HEAP32[$231 >> 2] = $8; //@line 14272
   $232 = $ReallocAsyncCtx9 + 8 | 0; //@line 14273
   HEAP32[$232 >> 2] = $16; //@line 14274
   $233 = $ReallocAsyncCtx9 + 12 | 0; //@line 14275
   HEAP32[$233 >> 2] = $18; //@line 14276
   $234 = $ReallocAsyncCtx9 + 16 | 0; //@line 14277
   HEAP32[$234 >> 2] = $20; //@line 14278
   $235 = $ReallocAsyncCtx9 + 20 | 0; //@line 14279
   HEAP32[$235 >> 2] = $22; //@line 14280
   $236 = $ReallocAsyncCtx9 + 24 | 0; //@line 14281
   HEAP32[$236 >> 2] = $24; //@line 14282
   $237 = $ReallocAsyncCtx9 + 28 | 0; //@line 14283
   HEAP32[$237 >> 2] = $26; //@line 14284
   $238 = $ReallocAsyncCtx9 + 32 | 0; //@line 14285
   HEAP32[$238 >> 2] = $28; //@line 14286
   $239 = $ReallocAsyncCtx9 + 36 | 0; //@line 14287
   HEAP32[$239 >> 2] = $30; //@line 14288
   $240 = $ReallocAsyncCtx9 + 40 | 0; //@line 14289
   HEAP32[$240 >> 2] = $32; //@line 14290
   $241 = $ReallocAsyncCtx9 + 44 | 0; //@line 14291
   HEAP32[$241 >> 2] = $14; //@line 14292
   $242 = $ReallocAsyncCtx9 + 48 | 0; //@line 14293
   HEAP32[$242 >> 2] = $2; //@line 14294
   $243 = $ReallocAsyncCtx9 + 52 | 0; //@line 14295
   HEAP8[$243 >> 0] = $6; //@line 14296
   $244 = $ReallocAsyncCtx9 + 56 | 0; //@line 14297
   HEAP32[$244 >> 2] = $10; //@line 14298
   $245 = $ReallocAsyncCtx9 + 60 | 0; //@line 14299
   HEAP32[$245 >> 2] = $12; //@line 14300
   $246 = $ReallocAsyncCtx9 + 64 | 0; //@line 14301
   HEAP32[$246 >> 2] = $4; //@line 14302
   $247 = $ReallocAsyncCtx9 + 68 | 0; //@line 14303
   HEAP32[$247 >> 2] = $34; //@line 14304
   $248 = $ReallocAsyncCtx9 + 72 | 0; //@line 14305
   HEAP32[$248 >> 2] = $36; //@line 14306
   $249 = $ReallocAsyncCtx9 + 76 | 0; //@line 14307
   HEAP32[$249 >> 2] = $38; //@line 14308
   sp = STACKTOP; //@line 14309
   STACKTOP = sp; //@line 14310
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 14313
  ___async_unwind = 0; //@line 14314
  HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 14315
  $231 = $ReallocAsyncCtx9 + 4 | 0; //@line 14316
  HEAP32[$231 >> 2] = $8; //@line 14317
  $232 = $ReallocAsyncCtx9 + 8 | 0; //@line 14318
  HEAP32[$232 >> 2] = $16; //@line 14319
  $233 = $ReallocAsyncCtx9 + 12 | 0; //@line 14320
  HEAP32[$233 >> 2] = $18; //@line 14321
  $234 = $ReallocAsyncCtx9 + 16 | 0; //@line 14322
  HEAP32[$234 >> 2] = $20; //@line 14323
  $235 = $ReallocAsyncCtx9 + 20 | 0; //@line 14324
  HEAP32[$235 >> 2] = $22; //@line 14325
  $236 = $ReallocAsyncCtx9 + 24 | 0; //@line 14326
  HEAP32[$236 >> 2] = $24; //@line 14327
  $237 = $ReallocAsyncCtx9 + 28 | 0; //@line 14328
  HEAP32[$237 >> 2] = $26; //@line 14329
  $238 = $ReallocAsyncCtx9 + 32 | 0; //@line 14330
  HEAP32[$238 >> 2] = $28; //@line 14331
  $239 = $ReallocAsyncCtx9 + 36 | 0; //@line 14332
  HEAP32[$239 >> 2] = $30; //@line 14333
  $240 = $ReallocAsyncCtx9 + 40 | 0; //@line 14334
  HEAP32[$240 >> 2] = $32; //@line 14335
  $241 = $ReallocAsyncCtx9 + 44 | 0; //@line 14336
  HEAP32[$241 >> 2] = $14; //@line 14337
  $242 = $ReallocAsyncCtx9 + 48 | 0; //@line 14338
  HEAP32[$242 >> 2] = $2; //@line 14339
  $243 = $ReallocAsyncCtx9 + 52 | 0; //@line 14340
  HEAP8[$243 >> 0] = $6; //@line 14341
  $244 = $ReallocAsyncCtx9 + 56 | 0; //@line 14342
  HEAP32[$244 >> 2] = $10; //@line 14343
  $245 = $ReallocAsyncCtx9 + 60 | 0; //@line 14344
  HEAP32[$245 >> 2] = $12; //@line 14345
  $246 = $ReallocAsyncCtx9 + 64 | 0; //@line 14346
  HEAP32[$246 >> 2] = $4; //@line 14347
  $247 = $ReallocAsyncCtx9 + 68 | 0; //@line 14348
  HEAP32[$247 >> 2] = $34; //@line 14349
  $248 = $ReallocAsyncCtx9 + 72 | 0; //@line 14350
  HEAP32[$248 >> 2] = $36; //@line 14351
  $249 = $ReallocAsyncCtx9 + 76 | 0; //@line 14352
  HEAP32[$249 >> 2] = $38; //@line 14353
  sp = STACKTOP; //@line 14354
  STACKTOP = sp; //@line 14355
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 14359
 } else {
  $56 = HEAPU8[$24 >> 0] << 8 | HEAPU8[$26 >> 0]; //@line 14375
  $62 = HEAPU8[$28 >> 0] << 8 | HEAPU8[$30 >> 0]; //@line 14381
  if (((HEAP8[$20 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$16 >> 0] << 8 | HEAPU8[$18 >> 0] | 0) == 1 : 0) & (HEAP8[$22 >> 0] & 15) == 0) {
   if (!$56) {
    $251 = $2; //@line 14391
   } else {
    $$093119$i = 0; //@line 14393
    $70 = $2; //@line 14393
    while (1) {
     $69 = HEAP8[$70 >> 0] | 0; //@line 14395
     if (!($69 << 24 >> 24)) {
      $$lcssa$i = $70; //@line 14398
     } else {
      $75 = $70; //@line 14400
      $77 = $69; //@line 14400
      while (1) {
       $78 = $75 + 1 + ($77 & 255) | 0; //@line 14404
       $77 = HEAP8[$78 >> 0] | 0; //@line 14405
       if (!($77 << 24 >> 24)) {
        $$lcssa$i = $78; //@line 14408
        break;
       } else {
        $75 = $78; //@line 14411
       }
      }
     }
     $81 = $$lcssa$i + 5 | 0; //@line 14415
     $$093119$i = $$093119$i + 1 | 0; //@line 14416
     if (($$093119$i | 0) >= ($56 | 0)) {
      $251 = $81; //@line 14421
      break;
     } else {
      $70 = $81; //@line 14419
     }
    }
   }
   if (($34 | 0) != 0 & ($62 | 0) != 0) {
    $$090117$i = $38; //@line 14430
    $$094116$i = 0; //@line 14430
    $$095115$i = 0; //@line 14430
    $85 = $251; //@line 14430
    while (1) {
     $86 = HEAP8[$85 >> 0] | 0; //@line 14433
     do {
      if (!($86 << 24 >> 24)) {
       $101 = $85 + 1 | 0; //@line 14437
      } else {
       $90 = $86 & 255; //@line 14440
       $93 = $85; //@line 14440
       while (1) {
        if ($90 & 192 | 0) {
         label = 13; //@line 14445
         break;
        }
        $95 = $93 + 1 + $90 | 0; //@line 14449
        $96 = HEAP8[$95 >> 0] | 0; //@line 14450
        if (!($96 << 24 >> 24)) {
         label = 15; //@line 14454
         break;
        } else {
         $90 = $96 & 255; //@line 14457
         $93 = $95; //@line 14457
        }
       }
       if ((label | 0) == 13) {
        label = 0; //@line 14461
        $101 = $93 + 2 | 0; //@line 14463
        break;
       } else if ((label | 0) == 15) {
        label = 0; //@line 14467
        $101 = $95 + 1 | 0; //@line 14469
        break;
       }
      }
     } while (0);
     $109 = (HEAPU8[$101 >> 0] << 8 | HEAPU8[$101 + 1 >> 0]) & 65535; //@line 14482
     $120 = $101 + 10 | 0; //@line 14493
     $125 = HEAPU8[$101 + 8 >> 0] << 8 | HEAPU8[$101 + 9 >> 0]; //@line 14498
     $126 = $125 & 65535; //@line 14499
     $128 = (HEAPU8[$101 + 2 >> 0] << 8 | HEAPU8[$101 + 3 >> 0] | 0) == 1; //@line 14501
     do {
      if ($109 << 16 >> 16 == 1 & $128 & $126 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 14507
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$120 >> 0] | 0; //@line 14511
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$101 + 11 >> 0] | 0; //@line 14515
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$101 + 12 >> 0] | 0; //@line 14519
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$101 + 13 >> 0] | 0; //@line 14523
       $$0 = $101 + 14 | 0; //@line 14526
       $$1$i = $$090117$i + 20 | 0; //@line 14526
       $$196$i = $$095115$i + 1 | 0; //@line 14526
      } else {
       if ($109 << 16 >> 16 == 28 & $128 & $126 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 14533
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$120 >> 0] | 0; //@line 14537
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$101 + 11 >> 0] | 0; //@line 14541
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$101 + 12 >> 0] | 0; //@line 14545
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$101 + 13 >> 0] | 0; //@line 14549
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$101 + 14 >> 0] | 0; //@line 14553
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$101 + 15 >> 0] | 0; //@line 14557
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$101 + 16 >> 0] | 0; //@line 14561
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$101 + 17 >> 0] | 0; //@line 14565
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$101 + 18 >> 0] | 0; //@line 14569
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$101 + 19 >> 0] | 0; //@line 14573
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$101 + 20 >> 0] | 0; //@line 14577
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$101 + 21 >> 0] | 0; //@line 14581
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$101 + 22 >> 0] | 0; //@line 14585
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$101 + 23 >> 0] | 0; //@line 14589
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$101 + 24 >> 0] | 0; //@line 14593
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$101 + 25 >> 0] | 0; //@line 14597
        $$0 = $101 + 26 | 0; //@line 14600
        $$1$i = $$090117$i + 20 | 0; //@line 14600
        $$196$i = $$095115$i + 1 | 0; //@line 14600
        break;
       } else {
        $$0 = $120 + $125 | 0; //@line 14604
        $$1$i = $$090117$i; //@line 14604
        $$196$i = $$095115$i; //@line 14604
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 14609
     if (!(($$094116$i | 0) < ($62 | 0) & $$196$i >>> 0 < $34 >>> 0)) {
      $$089$i = $$196$i; //@line 14616
      break;
     } else {
      $$090117$i = $$1$i; //@line 14614
      $$095115$i = $$196$i; //@line 14614
      $85 = $$0; //@line 14614
     }
    }
   } else {
    $$089$i = 0; //@line 14621
   }
  } else {
   $$089$i = 0; //@line 14624
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 14628
 }
 _free($16); //@line 14630
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 14631
 $203 = __ZN6Socket5closeEv($32) | 0; //@line 14632
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 14635
  $204 = $ReallocAsyncCtx12 + 4 | 0; //@line 14636
  HEAP32[$204 >> 2] = $$355; //@line 14637
  $205 = $ReallocAsyncCtx12 + 8 | 0; //@line 14638
  HEAP32[$205 >> 2] = $14; //@line 14639
  $206 = $ReallocAsyncCtx12 + 12 | 0; //@line 14640
  HEAP32[$206 >> 2] = $36; //@line 14641
  sp = STACKTOP; //@line 14642
  STACKTOP = sp; //@line 14643
  return;
 }
 HEAP32[___async_retval >> 2] = $203; //@line 14646
 ___async_unwind = 0; //@line 14647
 HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 14648
 $204 = $ReallocAsyncCtx12 + 4 | 0; //@line 14649
 HEAP32[$204 >> 2] = $$355; //@line 14650
 $205 = $ReallocAsyncCtx12 + 8 | 0; //@line 14651
 HEAP32[$205 >> 2] = $14; //@line 14652
 $206 = $ReallocAsyncCtx12 + 12 | 0; //@line 14653
 HEAP32[$206 >> 2] = $36; //@line 14654
 sp = STACKTOP; //@line 14655
 STACKTOP = sp; //@line 14656
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_63($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$2 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13666
 STACKTOP = STACKTOP + 32 | 0; //@line 13667
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13667
 $$byval_copy = sp; //@line 13668
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13670
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13672
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13674
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13676
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13678
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13680
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13682
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13684
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13686
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13688
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13690
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13692
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 13694
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13696
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13698
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13700
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13702
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13704
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13706
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13708
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$4 >> 0] = 0; //@line 13711
  HEAP8[$6 >> 0] = 1; //@line 13712
  HEAP8[$8 >> 0] = 1; //@line 13713
  HEAP8[$10 >> 0] = 0; //@line 13714
  HEAP8[$12 >> 0] = 0; //@line 13715
  HEAP8[$14 >> 0] = 1; //@line 13716
  HEAP8[$16 >> 0] = 0; //@line 13717
  HEAP8[$16 + 1 >> 0] = 0; //@line 13717
  HEAP8[$16 + 2 >> 0] = 0; //@line 13717
  HEAP8[$16 + 3 >> 0] = 0; //@line 13717
  HEAP8[$16 + 4 >> 0] = 0; //@line 13717
  HEAP8[$16 + 5 >> 0] = 0; //@line 13717
  if (!(HEAP8[$32 >> 0] | 0)) {
   $223 = $24; //@line 13721
  } else {
   $$019$i$2 = $32; //@line 13723
   $211 = $24; //@line 13723
   while (1) {
    $208 = _strcspn($$019$i$2, 7214) | 0; //@line 13725
    $210 = $211 + 1 | 0; //@line 13727
    HEAP8[$211 >> 0] = $208; //@line 13728
    $212 = $208 & 255; //@line 13729
    _memcpy($210 | 0, $$019$i$2 | 0, $212 | 0) | 0; //@line 13730
    $213 = $210 + $212 | 0; //@line 13731
    $$019$i$2 = $$019$i$2 + ($208 + ((HEAP8[$$019$i$2 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 13737
    if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
     $223 = $213; //@line 13741
     break;
    } else {
     $211 = $213; //@line 13744
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 13749
  HEAP8[$223 + 1 >> 0] = 0; //@line 13751
  HEAP8[$223 + 2 >> 0] = $26; //@line 13753
  HEAP8[$223 + 3 >> 0] = 0; //@line 13755
  HEAP8[$223 + 4 >> 0] = 1; //@line 13756
  HEAP32[$$byval_copy >> 2] = HEAP32[140]; //@line 13757
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[141]; //@line 13757
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[142]; //@line 13757
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[143]; //@line 13757
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[144]; //@line 13757
  __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 53); //@line 13758
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(80) | 0; //@line 13762
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($22, $28, $4, $223 + 5 - $30 | 0) | 0; //@line 13763
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 112; //@line 13766
   $231 = $ReallocAsyncCtx8 + 4 | 0; //@line 13767
   HEAP32[$231 >> 2] = $4; //@line 13768
   $232 = $ReallocAsyncCtx8 + 8 | 0; //@line 13769
   HEAP32[$232 >> 2] = $6; //@line 13770
   $233 = $ReallocAsyncCtx8 + 12 | 0; //@line 13771
   HEAP32[$233 >> 2] = $8; //@line 13772
   $234 = $ReallocAsyncCtx8 + 16 | 0; //@line 13773
   HEAP32[$234 >> 2] = $10; //@line 13774
   $235 = $ReallocAsyncCtx8 + 20 | 0; //@line 13775
   HEAP32[$235 >> 2] = $12; //@line 13776
   $236 = $ReallocAsyncCtx8 + 24 | 0; //@line 13777
   HEAP32[$236 >> 2] = $14; //@line 13778
   $237 = $ReallocAsyncCtx8 + 28 | 0; //@line 13779
   HEAP32[$237 >> 2] = $16; //@line 13780
   $238 = $ReallocAsyncCtx8 + 32 | 0; //@line 13781
   HEAP32[$238 >> 2] = $18; //@line 13782
   $239 = $ReallocAsyncCtx8 + 36 | 0; //@line 13783
   HEAP32[$239 >> 2] = $20; //@line 13784
   $240 = $ReallocAsyncCtx8 + 40 | 0; //@line 13785
   HEAP32[$240 >> 2] = $22; //@line 13786
   $241 = $ReallocAsyncCtx8 + 44 | 0; //@line 13787
   HEAP32[$241 >> 2] = $24; //@line 13788
   $242 = $ReallocAsyncCtx8 + 48 | 0; //@line 13789
   HEAP8[$242 >> 0] = $26; //@line 13790
   $243 = $ReallocAsyncCtx8 + 52 | 0; //@line 13791
   HEAP32[$243 >> 2] = $2; //@line 13792
   $244 = $ReallocAsyncCtx8 + 56 | 0; //@line 13793
   HEAP32[$244 >> 2] = $28; //@line 13794
   $245 = $ReallocAsyncCtx8 + 60 | 0; //@line 13795
   HEAP32[$245 >> 2] = $30; //@line 13796
   $246 = $ReallocAsyncCtx8 + 64 | 0; //@line 13797
   HEAP32[$246 >> 2] = $32; //@line 13798
   $247 = $ReallocAsyncCtx8 + 68 | 0; //@line 13799
   HEAP32[$247 >> 2] = $34; //@line 13800
   $248 = $ReallocAsyncCtx8 + 72 | 0; //@line 13801
   HEAP32[$248 >> 2] = $36; //@line 13802
   $249 = $ReallocAsyncCtx8 + 76 | 0; //@line 13803
   HEAP32[$249 >> 2] = $38; //@line 13804
   sp = STACKTOP; //@line 13805
   STACKTOP = sp; //@line 13806
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 13809
  ___async_unwind = 0; //@line 13810
  HEAP32[$ReallocAsyncCtx8 >> 2] = 112; //@line 13811
  $231 = $ReallocAsyncCtx8 + 4 | 0; //@line 13812
  HEAP32[$231 >> 2] = $4; //@line 13813
  $232 = $ReallocAsyncCtx8 + 8 | 0; //@line 13814
  HEAP32[$232 >> 2] = $6; //@line 13815
  $233 = $ReallocAsyncCtx8 + 12 | 0; //@line 13816
  HEAP32[$233 >> 2] = $8; //@line 13817
  $234 = $ReallocAsyncCtx8 + 16 | 0; //@line 13818
  HEAP32[$234 >> 2] = $10; //@line 13819
  $235 = $ReallocAsyncCtx8 + 20 | 0; //@line 13820
  HEAP32[$235 >> 2] = $12; //@line 13821
  $236 = $ReallocAsyncCtx8 + 24 | 0; //@line 13822
  HEAP32[$236 >> 2] = $14; //@line 13823
  $237 = $ReallocAsyncCtx8 + 28 | 0; //@line 13824
  HEAP32[$237 >> 2] = $16; //@line 13825
  $238 = $ReallocAsyncCtx8 + 32 | 0; //@line 13826
  HEAP32[$238 >> 2] = $18; //@line 13827
  $239 = $ReallocAsyncCtx8 + 36 | 0; //@line 13828
  HEAP32[$239 >> 2] = $20; //@line 13829
  $240 = $ReallocAsyncCtx8 + 40 | 0; //@line 13830
  HEAP32[$240 >> 2] = $22; //@line 13831
  $241 = $ReallocAsyncCtx8 + 44 | 0; //@line 13832
  HEAP32[$241 >> 2] = $24; //@line 13833
  $242 = $ReallocAsyncCtx8 + 48 | 0; //@line 13834
  HEAP8[$242 >> 0] = $26; //@line 13835
  $243 = $ReallocAsyncCtx8 + 52 | 0; //@line 13836
  HEAP32[$243 >> 2] = $2; //@line 13837
  $244 = $ReallocAsyncCtx8 + 56 | 0; //@line 13838
  HEAP32[$244 >> 2] = $28; //@line 13839
  $245 = $ReallocAsyncCtx8 + 60 | 0; //@line 13840
  HEAP32[$245 >> 2] = $30; //@line 13841
  $246 = $ReallocAsyncCtx8 + 64 | 0; //@line 13842
  HEAP32[$246 >> 2] = $32; //@line 13843
  $247 = $ReallocAsyncCtx8 + 68 | 0; //@line 13844
  HEAP32[$247 >> 2] = $34; //@line 13845
  $248 = $ReallocAsyncCtx8 + 72 | 0; //@line 13846
  HEAP32[$248 >> 2] = $36; //@line 13847
  $249 = $ReallocAsyncCtx8 + 76 | 0; //@line 13848
  HEAP32[$249 >> 2] = $38; //@line 13849
  sp = STACKTOP; //@line 13850
  STACKTOP = sp; //@line 13851
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 13855
 } else {
  $55 = HEAPU8[$12 >> 0] << 8 | HEAPU8[$14 >> 0]; //@line 13871
  $61 = HEAPU8[$16 >> 0] << 8 | HEAPU8[$18 >> 0]; //@line 13877
  if (((HEAP8[$8 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$4 >> 0] << 8 | HEAPU8[$6 >> 0] | 0) == 1 : 0) & (HEAP8[$10 >> 0] & 15) == 0) {
   if (!$55) {
    $251 = $24; //@line 13887
   } else {
    $$093119$i = 0; //@line 13889
    $69 = $24; //@line 13889
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 13891
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 13894
     } else {
      $74 = $69; //@line 13896
      $76 = $68; //@line 13896
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 13900
       $76 = HEAP8[$77 >> 0] | 0; //@line 13901
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 13904
        break;
       } else {
        $74 = $77; //@line 13907
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 13911
     $$093119$i = $$093119$i + 1 | 0; //@line 13912
     if (($$093119$i | 0) >= ($55 | 0)) {
      $251 = $80; //@line 13917
      break;
     } else {
      $69 = $80; //@line 13915
     }
    }
   }
   if (($34 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $38; //@line 13926
    $$094116$i = 0; //@line 13926
    $$095115$i = 0; //@line 13926
    $84 = $251; //@line 13926
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 13929
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 13933
      } else {
       $89 = $85 & 255; //@line 13936
       $92 = $84; //@line 13936
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 13941
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 13945
        $95 = HEAP8[$94 >> 0] | 0; //@line 13946
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 13950
         break;
        } else {
         $89 = $95 & 255; //@line 13953
         $92 = $94; //@line 13953
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 13957
        $100 = $92 + 2 | 0; //@line 13959
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 13963
        $100 = $94 + 1 | 0; //@line 13965
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 13978
     $119 = $100 + 10 | 0; //@line 13989
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 13994
     $125 = $124 & 65535; //@line 13995
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 13997
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 14003
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 14007
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 14011
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 14015
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 14019
       $$0 = $100 + 14 | 0; //@line 14022
       $$1$i = $$090117$i + 20 | 0; //@line 14022
       $$196$i = $$095115$i + 1 | 0; //@line 14022
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 14029
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 14033
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 14037
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 14041
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 14045
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 14049
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 14053
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 14057
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 14061
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 14065
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 14069
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 14073
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 14077
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 14081
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 14085
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 14089
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 14093
        $$0 = $100 + 26 | 0; //@line 14096
        $$1$i = $$090117$i + 20 | 0; //@line 14096
        $$196$i = $$095115$i + 1 | 0; //@line 14096
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 14100
        $$1$i = $$090117$i; //@line 14100
        $$196$i = $$095115$i; //@line 14100
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 14105
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $34 >>> 0)) {
      $$089$i = $$196$i; //@line 14112
      break;
     } else {
      $$090117$i = $$1$i; //@line 14110
      $$095115$i = $$196$i; //@line 14110
      $84 = $$0; //@line 14110
     }
    }
   } else {
    $$089$i = 0; //@line 14117
   }
  } else {
   $$089$i = 0; //@line 14120
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 14124
 }
 _free($4); //@line 14126
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 14127
 $200 = __ZN6Socket5closeEv($20) | 0; //@line 14128
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 14131
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 14132
  HEAP32[$201 >> 2] = $$355; //@line 14133
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 14134
  HEAP32[$202 >> 2] = $22; //@line 14135
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 14136
  HEAP32[$203 >> 2] = $36; //@line 14137
  sp = STACKTOP; //@line 14138
  STACKTOP = sp; //@line 14139
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 14142
 ___async_unwind = 0; //@line 14143
 HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 14144
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 14145
 HEAP32[$201 >> 2] = $$355; //@line 14146
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 14147
 HEAP32[$202 >> 2] = $22; //@line 14148
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 14149
 HEAP32[$203 >> 2] = $36; //@line 14150
 sp = STACKTOP; //@line 14151
 STACKTOP = sp; //@line 14152
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_62($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$3 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13162
 STACKTOP = STACKTOP + 32 | 0; //@line 13163
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13163
 $$byval_copy = sp; //@line 13164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13166
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13172
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13174
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13176
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13178
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13180
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13182
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13184
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13186
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 13188
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13190
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13192
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13194
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13196
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13198
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13200
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13202
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13204
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$2 >> 0] = 0; //@line 13207
  HEAP8[$4 >> 0] = 1; //@line 13208
  HEAP8[$6 >> 0] = 1; //@line 13209
  HEAP8[$8 >> 0] = 0; //@line 13210
  HEAP8[$10 >> 0] = 0; //@line 13211
  HEAP8[$12 >> 0] = 1; //@line 13212
  HEAP8[$14 >> 0] = 0; //@line 13213
  HEAP8[$14 + 1 >> 0] = 0; //@line 13213
  HEAP8[$14 + 2 >> 0] = 0; //@line 13213
  HEAP8[$14 + 3 >> 0] = 0; //@line 13213
  HEAP8[$14 + 4 >> 0] = 0; //@line 13213
  HEAP8[$14 + 5 >> 0] = 0; //@line 13213
  if (!(HEAP8[$32 >> 0] | 0)) {
   $223 = $22; //@line 13217
  } else {
   $$019$i$3 = $32; //@line 13219
   $211 = $22; //@line 13219
   while (1) {
    $208 = _strcspn($$019$i$3, 7214) | 0; //@line 13221
    $210 = $211 + 1 | 0; //@line 13223
    HEAP8[$211 >> 0] = $208; //@line 13224
    $212 = $208 & 255; //@line 13225
    _memcpy($210 | 0, $$019$i$3 | 0, $212 | 0) | 0; //@line 13226
    $213 = $210 + $212 | 0; //@line 13227
    $$019$i$3 = $$019$i$3 + ($208 + ((HEAP8[$$019$i$3 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 13233
    if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
     $223 = $213; //@line 13237
     break;
    } else {
     $211 = $213; //@line 13240
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 13245
  HEAP8[$223 + 1 >> 0] = 0; //@line 13247
  HEAP8[$223 + 2 >> 0] = $24; //@line 13249
  HEAP8[$223 + 3 >> 0] = 0; //@line 13251
  HEAP8[$223 + 4 >> 0] = 1; //@line 13252
  HEAP32[$$byval_copy >> 2] = HEAP32[145]; //@line 13253
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[146]; //@line 13253
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[147]; //@line 13253
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[148]; //@line 13253
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[149]; //@line 13253
  __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 53); //@line 13254
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(80) | 0; //@line 13258
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $28, $2, $223 + 5 - $30 | 0) | 0; //@line 13259
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 13262
   $231 = $ReallocAsyncCtx7 + 4 | 0; //@line 13263
   HEAP32[$231 >> 2] = $2; //@line 13264
   $232 = $ReallocAsyncCtx7 + 8 | 0; //@line 13265
   HEAP32[$232 >> 2] = $4; //@line 13266
   $233 = $ReallocAsyncCtx7 + 12 | 0; //@line 13267
   HEAP32[$233 >> 2] = $6; //@line 13268
   $234 = $ReallocAsyncCtx7 + 16 | 0; //@line 13269
   HEAP32[$234 >> 2] = $8; //@line 13270
   $235 = $ReallocAsyncCtx7 + 20 | 0; //@line 13271
   HEAP32[$235 >> 2] = $10; //@line 13272
   $236 = $ReallocAsyncCtx7 + 24 | 0; //@line 13273
   HEAP32[$236 >> 2] = $12; //@line 13274
   $237 = $ReallocAsyncCtx7 + 28 | 0; //@line 13275
   HEAP32[$237 >> 2] = $14; //@line 13276
   $238 = $ReallocAsyncCtx7 + 32 | 0; //@line 13277
   HEAP32[$238 >> 2] = $16; //@line 13278
   $239 = $ReallocAsyncCtx7 + 36 | 0; //@line 13279
   HEAP32[$239 >> 2] = $18; //@line 13280
   $240 = $ReallocAsyncCtx7 + 40 | 0; //@line 13281
   HEAP32[$240 >> 2] = $20; //@line 13282
   $241 = $ReallocAsyncCtx7 + 44 | 0; //@line 13283
   HEAP32[$241 >> 2] = $22; //@line 13284
   $242 = $ReallocAsyncCtx7 + 48 | 0; //@line 13285
   HEAP8[$242 >> 0] = $24; //@line 13286
   $243 = $ReallocAsyncCtx7 + 52 | 0; //@line 13287
   HEAP32[$243 >> 2] = $26; //@line 13288
   $244 = $ReallocAsyncCtx7 + 56 | 0; //@line 13289
   HEAP32[$244 >> 2] = $28; //@line 13290
   $245 = $ReallocAsyncCtx7 + 60 | 0; //@line 13291
   HEAP32[$245 >> 2] = $30; //@line 13292
   $246 = $ReallocAsyncCtx7 + 64 | 0; //@line 13293
   HEAP32[$246 >> 2] = $32; //@line 13294
   $247 = $ReallocAsyncCtx7 + 68 | 0; //@line 13295
   HEAP32[$247 >> 2] = $34; //@line 13296
   $248 = $ReallocAsyncCtx7 + 72 | 0; //@line 13297
   HEAP32[$248 >> 2] = $36; //@line 13298
   $249 = $ReallocAsyncCtx7 + 76 | 0; //@line 13299
   HEAP32[$249 >> 2] = $38; //@line 13300
   sp = STACKTOP; //@line 13301
   STACKTOP = sp; //@line 13302
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 13305
  ___async_unwind = 0; //@line 13306
  HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 13307
  $231 = $ReallocAsyncCtx7 + 4 | 0; //@line 13308
  HEAP32[$231 >> 2] = $2; //@line 13309
  $232 = $ReallocAsyncCtx7 + 8 | 0; //@line 13310
  HEAP32[$232 >> 2] = $4; //@line 13311
  $233 = $ReallocAsyncCtx7 + 12 | 0; //@line 13312
  HEAP32[$233 >> 2] = $6; //@line 13313
  $234 = $ReallocAsyncCtx7 + 16 | 0; //@line 13314
  HEAP32[$234 >> 2] = $8; //@line 13315
  $235 = $ReallocAsyncCtx7 + 20 | 0; //@line 13316
  HEAP32[$235 >> 2] = $10; //@line 13317
  $236 = $ReallocAsyncCtx7 + 24 | 0; //@line 13318
  HEAP32[$236 >> 2] = $12; //@line 13319
  $237 = $ReallocAsyncCtx7 + 28 | 0; //@line 13320
  HEAP32[$237 >> 2] = $14; //@line 13321
  $238 = $ReallocAsyncCtx7 + 32 | 0; //@line 13322
  HEAP32[$238 >> 2] = $16; //@line 13323
  $239 = $ReallocAsyncCtx7 + 36 | 0; //@line 13324
  HEAP32[$239 >> 2] = $18; //@line 13325
  $240 = $ReallocAsyncCtx7 + 40 | 0; //@line 13326
  HEAP32[$240 >> 2] = $20; //@line 13327
  $241 = $ReallocAsyncCtx7 + 44 | 0; //@line 13328
  HEAP32[$241 >> 2] = $22; //@line 13329
  $242 = $ReallocAsyncCtx7 + 48 | 0; //@line 13330
  HEAP8[$242 >> 0] = $24; //@line 13331
  $243 = $ReallocAsyncCtx7 + 52 | 0; //@line 13332
  HEAP32[$243 >> 2] = $26; //@line 13333
  $244 = $ReallocAsyncCtx7 + 56 | 0; //@line 13334
  HEAP32[$244 >> 2] = $28; //@line 13335
  $245 = $ReallocAsyncCtx7 + 60 | 0; //@line 13336
  HEAP32[$245 >> 2] = $30; //@line 13337
  $246 = $ReallocAsyncCtx7 + 64 | 0; //@line 13338
  HEAP32[$246 >> 2] = $32; //@line 13339
  $247 = $ReallocAsyncCtx7 + 68 | 0; //@line 13340
  HEAP32[$247 >> 2] = $34; //@line 13341
  $248 = $ReallocAsyncCtx7 + 72 | 0; //@line 13342
  HEAP32[$248 >> 2] = $36; //@line 13343
  $249 = $ReallocAsyncCtx7 + 76 | 0; //@line 13344
  HEAP32[$249 >> 2] = $38; //@line 13345
  sp = STACKTOP; //@line 13346
  STACKTOP = sp; //@line 13347
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 13351
 } else {
  $55 = HEAPU8[$10 >> 0] << 8 | HEAPU8[$12 >> 0]; //@line 13367
  $61 = HEAPU8[$14 >> 0] << 8 | HEAPU8[$16 >> 0]; //@line 13373
  if (((HEAP8[$6 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$2 >> 0] << 8 | HEAPU8[$4 >> 0] | 0) == 1 : 0) & (HEAP8[$8 >> 0] & 15) == 0) {
   if (!$55) {
    $251 = $22; //@line 13383
   } else {
    $$093119$i = 0; //@line 13385
    $69 = $22; //@line 13385
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 13387
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 13390
     } else {
      $74 = $69; //@line 13392
      $76 = $68; //@line 13392
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 13396
       $76 = HEAP8[$77 >> 0] | 0; //@line 13397
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 13400
        break;
       } else {
        $74 = $77; //@line 13403
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 13407
     $$093119$i = $$093119$i + 1 | 0; //@line 13408
     if (($$093119$i | 0) >= ($55 | 0)) {
      $251 = $80; //@line 13413
      break;
     } else {
      $69 = $80; //@line 13411
     }
    }
   }
   if (($34 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $38; //@line 13422
    $$094116$i = 0; //@line 13422
    $$095115$i = 0; //@line 13422
    $84 = $251; //@line 13422
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 13425
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 13429
      } else {
       $89 = $85 & 255; //@line 13432
       $92 = $84; //@line 13432
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 13437
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 13441
        $95 = HEAP8[$94 >> 0] | 0; //@line 13442
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 13446
         break;
        } else {
         $89 = $95 & 255; //@line 13449
         $92 = $94; //@line 13449
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 13453
        $100 = $92 + 2 | 0; //@line 13455
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 13459
        $100 = $94 + 1 | 0; //@line 13461
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 13474
     $119 = $100 + 10 | 0; //@line 13485
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 13490
     $125 = $124 & 65535; //@line 13491
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 13493
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 13499
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 13503
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 13507
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 13511
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 13515
       $$0 = $100 + 14 | 0; //@line 13518
       $$1$i = $$090117$i + 20 | 0; //@line 13518
       $$196$i = $$095115$i + 1 | 0; //@line 13518
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 13525
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 13529
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 13533
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 13537
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 13541
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 13545
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 13549
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 13553
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 13557
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 13561
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 13565
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 13569
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 13573
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 13577
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 13581
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 13585
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 13589
        $$0 = $100 + 26 | 0; //@line 13592
        $$1$i = $$090117$i + 20 | 0; //@line 13592
        $$196$i = $$095115$i + 1 | 0; //@line 13592
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 13596
        $$1$i = $$090117$i; //@line 13596
        $$196$i = $$095115$i; //@line 13596
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 13601
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $34 >>> 0)) {
      $$089$i = $$196$i; //@line 13608
      break;
     } else {
      $$090117$i = $$1$i; //@line 13606
      $$095115$i = $$196$i; //@line 13606
      $84 = $$0; //@line 13606
     }
    }
   } else {
    $$089$i = 0; //@line 13613
   }
  } else {
   $$089$i = 0; //@line 13616
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 13620
 }
 _free($2); //@line 13622
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 13623
 $200 = __ZN6Socket5closeEv($18) | 0; //@line 13624
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 13627
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 13628
  HEAP32[$201 >> 2] = $$355; //@line 13629
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 13630
  HEAP32[$202 >> 2] = $20; //@line 13631
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 13632
  HEAP32[$203 >> 2] = $36; //@line 13633
  sp = STACKTOP; //@line 13634
  STACKTOP = sp; //@line 13635
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 13638
 ___async_unwind = 0; //@line 13639
 HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 13640
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 13641
 HEAP32[$201 >> 2] = $$355; //@line 13642
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 13643
 HEAP32[$202 >> 2] = $20; //@line 13644
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 13645
 HEAP32[$203 >> 2] = $36; //@line 13646
 sp = STACKTOP; //@line 13647
 STACKTOP = sp; //@line 13648
 return;
}
function _sn_coap_parser_options_parse_multiple_options($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$04966$i = 0, $$04966$us$i = 0, $$05165$i = 0, $$05165$us$i = 0, $$053$i68 = 0, $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$i = 0, $$1$us = 0, $$1$us$i = 0, $$152$in$i = 0, $$152$in$us$i = 0, $$lcssa94$sink$i = 0, $$sink = 0, $$sink69 = 0, $$sink69$in = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $108 = 0, $11 = 0, $113 = 0, $115 = 0, $118 = 0, $123 = 0, $125 = 0, $126 = 0, $129 = 0, $132 = 0, $141 = 0, $146 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $176 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $29 = 0, $43 = 0, $49 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $76 = 0, $8 = 0, $88 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $sext = 0, $trunc = 0, $trunc$i = 0, $trunc$us$i = 0, $trunc110 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7276
 STACKTOP = STACKTOP + 16 | 0; //@line 7277
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7277
 $vararg_buffer = sp; //@line 7278
 $7 = HEAP32[$1 >> 2] | 0; //@line 7279
 $8 = $2 & 65535; //@line 7280
 do {
  if ($2 << 16 >> 16) {
   $10 = ($5 | 0) == 17; //@line 7284
   $11 = ($5 | 0) == 4; //@line 7285
   L3 : do {
    switch ($5 | 0) {
    case 8:
    case 11:
    case 15:
    case 20:
     {
      $$04966$us$i = 0; //@line 7289
      $$05165$us$i = $6; //@line 7289
      $17 = 1; //@line 7289
      L22 : while (1) {
       if ($11 & ($$05165$us$i & 65535) > 8 | (($$05165$us$i & 65535) > 255 | $10 & ($$05165$us$i & 65535) > 2)) {
        $$064 = -1; //@line 7299
        label = 55; //@line 7300
        break;
       }
       $15 = $$05165$us$i & 65535; //@line 7303
       $16 = $17 + $15 | 0; //@line 7304
       $18 = $16 & 65535; //@line 7305
       $21 = ($$04966$us$i & 65535) + 1 + $15 | 0; //@line 7308
       $22 = $16 & 65535; //@line 7309
       if (($22 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $21; //@line 7312
        label = 23; //@line 7313
        break L3;
       }
       if ($22 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 7318
        label = 55; //@line 7319
        break;
       }
       $25 = $7 + $22 | 0; //@line 7322
       $trunc$us$i = HEAP8[$25 >> 0] | 0; //@line 7323
       $26 = $trunc$us$i & 255; //@line 7324
       if ($26 & 240 | 0) {
        $$sink69$in = $21; //@line 7328
        break L3;
       }
       switch ($trunc$us$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 7335
         label = 55; //@line 7336
         break L22;
         break;
        }
       case 13:
        {
         if (($22 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7344
          label = 55; //@line 7345
          break L22;
         }
         $43 = $18 + 1 << 16 >> 16; //@line 7348
         $$1$us$i = $43; //@line 7354
         $$152$in$us$i = (HEAPU8[$7 + ($43 & 65535) >> 0] | 0) + 13 | 0; //@line 7354
         break;
        }
       case 14:
        {
         $29 = $22 + 2 | 0; //@line 7358
         if ($29 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7361
          label = 55; //@line 7362
          break L22;
         }
         $$1$us$i = $29 & 65535; //@line 7375
         $$152$in$us$i = (HEAPU8[$25 + 2 >> 0] | 0) + 269 + ((HEAPU8[$25 + 1 >> 0] | 0) << 8) | 0; //@line 7375
         break;
        }
       default:
        {
         $$1$us$i = $18; //@line 7379
         $$152$in$us$i = $26 & 15; //@line 7379
        }
       }
       $49 = $$1$us$i + 1 << 16 >> 16; //@line 7383
       if (($49 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $21; //@line 7387
        label = 23; //@line 7388
        break L3;
       } else {
        $$04966$us$i = $21; //@line 7391
        $$05165$us$i = $$152$in$us$i & 65535; //@line 7391
        $17 = $49 & 65535; //@line 7391
       }
      }
      if ((label | 0) == 55) {
       STACKTOP = sp; //@line 7395
       return $$064 | 0; //@line 7395
      }
      break;
     }
    default:
     {
      $$04966$i = 0; //@line 7400
      $$05165$i = $6; //@line 7400
      $56 = 1; //@line 7400
      L4 : while (1) {
       if ($10 & ($$05165$i & 65535) > 2 | $11 & ($$05165$i & 65535) > 8) {
        $$064 = -1; //@line 7408
        label = 55; //@line 7409
        break;
       }
       $54 = $$05165$i & 65535; //@line 7412
       $55 = $56 + $54 | 0; //@line 7413
       $57 = $55 & 65535; //@line 7414
       $60 = ($$04966$i & 65535) + 1 + $54 | 0; //@line 7417
       $61 = $55 & 65535; //@line 7418
       if (($61 | 0) == ($8 | 0)) {
        $$lcssa94$sink$i = $60; //@line 7421
        label = 23; //@line 7422
        break L3;
       }
       if ($61 >>> 0 > $8 >>> 0) {
        $$064 = -1; //@line 7427
        label = 55; //@line 7428
        break;
       }
       $64 = $7 + $61 | 0; //@line 7431
       $trunc$i = HEAP8[$64 >> 0] | 0; //@line 7432
       $65 = $trunc$i & 255; //@line 7433
       if ($65 & 240 | 0) {
        $$sink69$in = $60; //@line 7437
        break L3;
       }
       switch ($trunc$i & 15) {
       case 15:
        {
         $$064 = -1; //@line 7444
         label = 55; //@line 7445
         break L4;
         break;
        }
       case 13:
        {
         if (($61 + 1 | 0) >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7453
          label = 55; //@line 7454
          break L4;
         }
         $70 = $57 + 1 << 16 >> 16; //@line 7457
         $$1$i = $70; //@line 7463
         $$152$in$i = (HEAPU8[$7 + ($70 & 65535) >> 0] | 0) + 13 | 0; //@line 7463
         break;
        }
       case 14:
        {
         $76 = $61 + 2 | 0; //@line 7467
         if ($76 >>> 0 >= $8 >>> 0) {
          $$064 = -1; //@line 7470
          label = 55; //@line 7471
          break L4;
         }
         $$1$i = $76 & 65535; //@line 7484
         $$152$in$i = (HEAPU8[$64 + 2 >> 0] | 0) + 269 + ((HEAPU8[$64 + 1 >> 0] | 0) << 8) | 0; //@line 7484
         break;
        }
       default:
        {
         $$1$i = $57; //@line 7488
         $$152$in$i = $65 & 15; //@line 7488
        }
       }
       $88 = $$1$i + 1 << 16 >> 16; //@line 7492
       if (($88 & 65535) > ($2 & 65535)) {
        $$lcssa94$sink$i = $60; //@line 7496
        label = 23; //@line 7497
        break L3;
       } else {
        $$04966$i = $60; //@line 7500
        $$05165$i = $$152$in$i & 65535; //@line 7500
        $56 = $88 & 65535; //@line 7500
       }
      }
      if ((label | 0) == 55) {
       STACKTOP = sp; //@line 7504
       return $$064 | 0; //@line 7504
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    if (!(($$lcssa94$sink$i & 65535) << 16 >> 16)) {
     break;
    } else {
     $$sink69$in = $$lcssa94$sink$i; //@line 7515
    }
   }
   $$sink69 = $$sink69$in + 65535 | 0; //@line 7518
   $93 = $$sink69 & 65535; //@line 7519
   $sext = $$sink69 << 16; //@line 7520
   $94 = $sext >> 16; //@line 7521
   switch ($93 << 16 >> 16) {
   case 0:
    {
     $$053$i68 = 0; //@line 7524
     break;
    }
   case -1:
    {
     $$064 = -1; //@line 7528
     STACKTOP = sp; //@line 7529
     return $$064 | 0; //@line 7529
    }
   default:
    {
     label = 25; //@line 7533
    }
   }
   if ((label | 0) == 25) {
    $95 = HEAP32[$0 >> 2] | 0; //@line 7537
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 7538
    $96 = FUNCTION_TABLE_ii[$95 & 15]($93) | 0; //@line 7539
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 59; //@line 7542
     HEAP32[$AsyncCtx + 4 >> 2] = $94; //@line 7544
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7546
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7548
     HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 7550
     HEAP16[$AsyncCtx + 20 >> 1] = $6; //@line 7552
     HEAP16[$AsyncCtx + 22 >> 1] = $93; //@line 7554
     HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 7556
     HEAP32[$AsyncCtx + 28 >> 2] = $sext; //@line 7558
     HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer; //@line 7560
     HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer; //@line 7562
     sp = STACKTOP; //@line 7563
     STACKTOP = sp; //@line 7564
     return 0; //@line 7564
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7566
    HEAP32[$3 >> 2] = $96; //@line 7567
    if (!$96) {
     _mbed_tracef(2, 3737, 5493, $vararg_buffer); //@line 7570
     $$064 = -1; //@line 7571
     STACKTOP = sp; //@line 7572
     return $$064 | 0; //@line 7572
    } else {
     $$053$i68 = $93; //@line 7574
    }
   }
   HEAP16[$4 >> 1] = $$053$i68; //@line 7577
   $108 = HEAP32[$3 >> 2] | 0; //@line 7578
   if (($sext | 0) <= 0) {
    $$064 = 0; //@line 7581
    STACKTOP = sp; //@line 7582
    return $$064 | 0; //@line 7582
   }
   if (($5 | 0) == 20) {
    $$06378$us = $108; //@line 7586
    $$06577$us = $6; //@line 7586
    $$080$us = 0; //@line 7586
    while (1) {
     if (!($$080$us << 24 >> 24)) {
      $$1$us = $$06378$us; //@line 7590
     } else {
      HEAP8[$$06378$us >> 0] = 38; //@line 7592
      $$1$us = $$06378$us + 1 | 0; //@line 7594
     }
     $113 = $$080$us + 1 << 24 >> 24; //@line 7596
     $115 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 7598
     HEAP32[$1 >> 2] = $115; //@line 7599
     $118 = $$06577$us & 65535; //@line 7602
     if (($$1$us + $118 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
      $$064 = -1; //@line 7607
      label = 55; //@line 7608
      break;
     }
     _memcpy($$1$us | 0, $115 | 0, $118 | 0) | 0; //@line 7611
     $123 = (HEAP32[$1 >> 2] | 0) + $118 | 0; //@line 7613
     HEAP32[$1 >> 2] = $123; //@line 7614
     $$06378$us = $$1$us + $118 | 0; //@line 7615
     $125 = HEAP32[$3 >> 2] | 0; //@line 7616
     $126 = $$06378$us; //@line 7617
     if (($126 - $125 | 0) >= ($94 | 0)) {
      $$064 = $113; //@line 7621
      label = 55; //@line 7622
      break;
     }
     $trunc110 = HEAP8[$123 >> 0] | 0; //@line 7625
     $129 = $trunc110 & 255; //@line 7626
     if ($129 & 240 | 0) {
      $$064 = $113; //@line 7630
      label = 55; //@line 7631
      break;
     }
     switch ($trunc110 & 15) {
     case 13:
      {
       $141 = $123 + 1 | 0; //@line 7638
       $$sink87 = $141; //@line 7642
       $$sink88 = (HEAPU8[$141 >> 0] | 0) + 13 | 0; //@line 7642
       label = 40; //@line 7643
       break;
      }
     case 14:
      {
       $132 = $123 + 2 | 0; //@line 7647
       $$sink87 = $132; //@line 7656
       $$sink88 = (HEAPU8[$132 >> 0] | 0) + 269 + ((HEAPU8[$123 + 1 >> 0] | 0) << 8) | 0; //@line 7656
       label = 40; //@line 7657
       break;
      }
     default:
      {
       $$065$be$us$in = $129 & 15; //@line 7661
       $146 = $125; //@line 7661
      }
     }
     if ((label | 0) == 40) {
      label = 0; //@line 7665
      HEAP32[$1 >> 2] = $$sink87; //@line 7666
      $$065$be$us$in = $$sink88; //@line 7668
      $146 = HEAP32[$3 >> 2] | 0; //@line 7668
     }
     if (($126 - $146 | 0) >= ($94 | 0)) {
      $$064 = $113; //@line 7676
      label = 55; //@line 7677
      break;
     } else {
      $$06577$us = $$065$be$us$in & 65535; //@line 7674
      $$080$us = $113; //@line 7674
     }
    }
    if ((label | 0) == 55) {
     STACKTOP = sp; //@line 7682
     return $$064 | 0; //@line 7682
    }
   } else {
    $$06378 = $108; //@line 7685
    $$06577 = $6; //@line 7685
    $$080 = 0; //@line 7685
   }
   while (1) {
    if (!($$080 << 24 >> 24)) {
     $$1 = $$06378; //@line 7690
    } else {
     switch ($5 | 0) {
     case 4:
     case 15:
     case 17:
     case 20:
      {
       $$sink = 38; //@line 7694
       label = 45; //@line 7695
       break;
      }
     case 8:
     case 11:
      {
       $$sink = 47; //@line 7699
       label = 45; //@line 7700
       break;
      }
     default:
      {}
     }
     if ((label | 0) == 45) {
      label = 0; //@line 7707
      HEAP8[$$06378 >> 0] = $$sink; //@line 7708
     }
     $$1 = $$06378 + 1 | 0; //@line 7711
    }
    $150 = $$080 + 1 << 24 >> 24; //@line 7713
    $152 = (HEAP32[$1 >> 2] | 0) + 1 | 0; //@line 7715
    HEAP32[$1 >> 2] = $152; //@line 7716
    $155 = $$06577 & 65535; //@line 7719
    if (($$1 + $155 - (HEAP32[$3 >> 2] | 0) | 0) > ($94 | 0)) {
     $$064 = -1; //@line 7724
     label = 55; //@line 7725
     break;
    }
    _memcpy($$1 | 0, $152 | 0, $155 | 0) | 0; //@line 7728
    $160 = (HEAP32[$1 >> 2] | 0) + $155 | 0; //@line 7730
    HEAP32[$1 >> 2] = $160; //@line 7731
    $$06378 = $$1 + $155 | 0; //@line 7732
    $162 = HEAP32[$3 >> 2] | 0; //@line 7733
    $163 = $$06378; //@line 7734
    if (($163 - $162 | 0) >= ($94 | 0)) {
     $$064 = $150; //@line 7738
     label = 55; //@line 7739
     break;
    }
    $trunc = HEAP8[$160 >> 0] | 0; //@line 7742
    $166 = $trunc & 255; //@line 7743
    if ($166 & 240 | 0) {
     $$064 = $150; //@line 7747
     label = 55; //@line 7748
     break;
    }
    switch ($trunc & 15) {
    case 13:
     {
      $169 = $160 + 1 | 0; //@line 7755
      $$sink89 = $169; //@line 7759
      $$sink90 = (HEAPU8[$169 >> 0] | 0) + 13 | 0; //@line 7759
      label = 52; //@line 7760
      break;
     }
    case 14:
     {
      $176 = $160 + 2 | 0; //@line 7764
      $$sink89 = $176; //@line 7773
      $$sink90 = (HEAPU8[$176 >> 0] | 0) + 269 + ((HEAPU8[$160 + 1 >> 0] | 0) << 8) | 0; //@line 7773
      label = 52; //@line 7774
      break;
     }
    default:
     {
      $$065$be$in = $166 & 15; //@line 7778
      $174 = $162; //@line 7778
     }
    }
    if ((label | 0) == 52) {
     label = 0; //@line 7782
     HEAP32[$1 >> 2] = $$sink89; //@line 7783
     $$065$be$in = $$sink90; //@line 7785
     $174 = HEAP32[$3 >> 2] | 0; //@line 7785
    }
    if (($163 - $174 | 0) >= ($94 | 0)) {
     $$064 = $150; //@line 7793
     label = 55; //@line 7794
     break;
    } else {
     $$06577 = $$065$be$in & 65535; //@line 7791
     $$080 = $150; //@line 7791
    }
   }
   if ((label | 0) == 55) {
    STACKTOP = sp; //@line 7799
    return $$064 | 0; //@line 7799
   }
  }
 } while (0);
 HEAP16[$4 >> 1] = 0; //@line 7803
 $$064 = 0; //@line 7804
 STACKTOP = sp; //@line 7805
 return $$064 | 0; //@line 7805
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_61($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$019$i$4 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$byval_copy = 0, $$lcssa$i = 0, $10 = 0, $100 = 0, $108 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $127 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $223 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $55 = 0, $6 = 0, $61 = 0, $68 = 0, $69 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12674
 STACKTOP = STACKTOP + 32 | 0; //@line 12675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12675
 $$byval_copy = sp; //@line 12676
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12678
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12680
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12682
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12684
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12686
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12688
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12690
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12692
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12694
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12696
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12698
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 12700
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12702
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12704
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12706
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12708
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12710
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12712
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12714
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12716
 if (($AsyncRetVal | 0) == -3001) {
  HEAP8[$2 >> 0] = 0; //@line 12719
  HEAP8[$4 >> 0] = 1; //@line 12720
  HEAP8[$6 >> 0] = 1; //@line 12721
  HEAP8[$8 >> 0] = 0; //@line 12722
  HEAP8[$10 >> 0] = 0; //@line 12723
  HEAP8[$12 >> 0] = 1; //@line 12724
  HEAP8[$14 >> 0] = 0; //@line 12725
  HEAP8[$14 + 1 >> 0] = 0; //@line 12725
  HEAP8[$14 + 2 >> 0] = 0; //@line 12725
  HEAP8[$14 + 3 >> 0] = 0; //@line 12725
  HEAP8[$14 + 4 >> 0] = 0; //@line 12725
  HEAP8[$14 + 5 >> 0] = 0; //@line 12725
  if (!(HEAP8[$32 >> 0] | 0)) {
   $223 = $22; //@line 12729
  } else {
   $$019$i$4 = $32; //@line 12731
   $211 = $22; //@line 12731
   while (1) {
    $208 = _strcspn($$019$i$4, 7214) | 0; //@line 12733
    $210 = $211 + 1 | 0; //@line 12735
    HEAP8[$211 >> 0] = $208; //@line 12736
    $212 = $208 & 255; //@line 12737
    _memcpy($210 | 0, $$019$i$4 | 0, $212 | 0) | 0; //@line 12738
    $213 = $210 + $212 | 0; //@line 12739
    $$019$i$4 = $$019$i$4 + ($208 + ((HEAP8[$$019$i$4 + $208 >> 0] | 0) == 46 & 1)) | 0; //@line 12745
    if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
     $223 = $213; //@line 12749
     break;
    } else {
     $211 = $213; //@line 12752
    }
   }
  }
  HEAP8[$223 >> 0] = 0; //@line 12757
  HEAP8[$223 + 1 >> 0] = 0; //@line 12759
  HEAP8[$223 + 2 >> 0] = $24; //@line 12761
  HEAP8[$223 + 3 >> 0] = 0; //@line 12763
  HEAP8[$223 + 4 >> 0] = 1; //@line 12764
  HEAP32[$$byval_copy >> 2] = HEAP32[150]; //@line 12765
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[151]; //@line 12765
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[152]; //@line 12765
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[153]; //@line 12765
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[154]; //@line 12765
  __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 53); //@line 12766
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 12770
  $230 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $28, $2, $223 + 5 - $30 | 0) | 0; //@line 12771
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 116; //@line 12774
   $231 = $ReallocAsyncCtx6 + 4 | 0; //@line 12775
   HEAP32[$231 >> 2] = $2; //@line 12776
   $232 = $ReallocAsyncCtx6 + 8 | 0; //@line 12777
   HEAP32[$232 >> 2] = $4; //@line 12778
   $233 = $ReallocAsyncCtx6 + 12 | 0; //@line 12779
   HEAP32[$233 >> 2] = $6; //@line 12780
   $234 = $ReallocAsyncCtx6 + 16 | 0; //@line 12781
   HEAP32[$234 >> 2] = $8; //@line 12782
   $235 = $ReallocAsyncCtx6 + 20 | 0; //@line 12783
   HEAP32[$235 >> 2] = $10; //@line 12784
   $236 = $ReallocAsyncCtx6 + 24 | 0; //@line 12785
   HEAP32[$236 >> 2] = $12; //@line 12786
   $237 = $ReallocAsyncCtx6 + 28 | 0; //@line 12787
   HEAP32[$237 >> 2] = $14; //@line 12788
   $238 = $ReallocAsyncCtx6 + 32 | 0; //@line 12789
   HEAP32[$238 >> 2] = $16; //@line 12790
   $239 = $ReallocAsyncCtx6 + 36 | 0; //@line 12791
   HEAP32[$239 >> 2] = $18; //@line 12792
   $240 = $ReallocAsyncCtx6 + 40 | 0; //@line 12793
   HEAP32[$240 >> 2] = $20; //@line 12794
   $241 = $ReallocAsyncCtx6 + 44 | 0; //@line 12795
   HEAP32[$241 >> 2] = $34; //@line 12796
   $242 = $ReallocAsyncCtx6 + 48 | 0; //@line 12797
   HEAP32[$242 >> 2] = $36; //@line 12798
   $243 = $ReallocAsyncCtx6 + 52 | 0; //@line 12799
   HEAP32[$243 >> 2] = $22; //@line 12800
   $244 = $ReallocAsyncCtx6 + 56 | 0; //@line 12801
   HEAP32[$244 >> 2] = $38; //@line 12802
   $245 = $ReallocAsyncCtx6 + 60 | 0; //@line 12803
   HEAP32[$245 >> 2] = $26; //@line 12804
   sp = STACKTOP; //@line 12805
   STACKTOP = sp; //@line 12806
   return;
  }
  HEAP32[___async_retval >> 2] = $230; //@line 12809
  ___async_unwind = 0; //@line 12810
  HEAP32[$ReallocAsyncCtx6 >> 2] = 116; //@line 12811
  $231 = $ReallocAsyncCtx6 + 4 | 0; //@line 12812
  HEAP32[$231 >> 2] = $2; //@line 12813
  $232 = $ReallocAsyncCtx6 + 8 | 0; //@line 12814
  HEAP32[$232 >> 2] = $4; //@line 12815
  $233 = $ReallocAsyncCtx6 + 12 | 0; //@line 12816
  HEAP32[$233 >> 2] = $6; //@line 12817
  $234 = $ReallocAsyncCtx6 + 16 | 0; //@line 12818
  HEAP32[$234 >> 2] = $8; //@line 12819
  $235 = $ReallocAsyncCtx6 + 20 | 0; //@line 12820
  HEAP32[$235 >> 2] = $10; //@line 12821
  $236 = $ReallocAsyncCtx6 + 24 | 0; //@line 12822
  HEAP32[$236 >> 2] = $12; //@line 12823
  $237 = $ReallocAsyncCtx6 + 28 | 0; //@line 12824
  HEAP32[$237 >> 2] = $14; //@line 12825
  $238 = $ReallocAsyncCtx6 + 32 | 0; //@line 12826
  HEAP32[$238 >> 2] = $16; //@line 12827
  $239 = $ReallocAsyncCtx6 + 36 | 0; //@line 12828
  HEAP32[$239 >> 2] = $18; //@line 12829
  $240 = $ReallocAsyncCtx6 + 40 | 0; //@line 12830
  HEAP32[$240 >> 2] = $20; //@line 12831
  $241 = $ReallocAsyncCtx6 + 44 | 0; //@line 12832
  HEAP32[$241 >> 2] = $34; //@line 12833
  $242 = $ReallocAsyncCtx6 + 48 | 0; //@line 12834
  HEAP32[$242 >> 2] = $36; //@line 12835
  $243 = $ReallocAsyncCtx6 + 52 | 0; //@line 12836
  HEAP32[$243 >> 2] = $22; //@line 12837
  $244 = $ReallocAsyncCtx6 + 56 | 0; //@line 12838
  HEAP32[$244 >> 2] = $38; //@line 12839
  $245 = $ReallocAsyncCtx6 + 60 | 0; //@line 12840
  HEAP32[$245 >> 2] = $26; //@line 12841
  sp = STACKTOP; //@line 12842
  STACKTOP = sp; //@line 12843
  return;
 }
 if (($AsyncRetVal | 0) < 0) {
  $$355 = $AsyncRetVal; //@line 12847
 } else {
  $55 = HEAPU8[$10 >> 0] << 8 | HEAPU8[$12 >> 0]; //@line 12863
  $61 = HEAPU8[$14 >> 0] << 8 | HEAPU8[$16 >> 0]; //@line 12869
  if (((HEAP8[$6 >> 0] & -8) << 24 >> 24 == -128 ? (HEAPU8[$2 >> 0] << 8 | HEAPU8[$4 >> 0] | 0) == 1 : 0) & (HEAP8[$8 >> 0] & 15) == 0) {
   if (!$55) {
    $247 = $22; //@line 12879
   } else {
    $$093119$i = 0; //@line 12881
    $69 = $22; //@line 12881
    while (1) {
     $68 = HEAP8[$69 >> 0] | 0; //@line 12883
     if (!($68 << 24 >> 24)) {
      $$lcssa$i = $69; //@line 12886
     } else {
      $74 = $69; //@line 12888
      $76 = $68; //@line 12888
      while (1) {
       $77 = $74 + 1 + ($76 & 255) | 0; //@line 12892
       $76 = HEAP8[$77 >> 0] | 0; //@line 12893
       if (!($76 << 24 >> 24)) {
        $$lcssa$i = $77; //@line 12896
        break;
       } else {
        $74 = $77; //@line 12899
       }
      }
     }
     $80 = $$lcssa$i + 5 | 0; //@line 12903
     $$093119$i = $$093119$i + 1 | 0; //@line 12904
     if (($$093119$i | 0) >= ($55 | 0)) {
      $247 = $80; //@line 12909
      break;
     } else {
      $69 = $80; //@line 12907
     }
    }
   }
   if (($34 | 0) != 0 & ($61 | 0) != 0) {
    $$090117$i = $38; //@line 12918
    $$094116$i = 0; //@line 12918
    $$095115$i = 0; //@line 12918
    $84 = $247; //@line 12918
    while (1) {
     $85 = HEAP8[$84 >> 0] | 0; //@line 12921
     do {
      if (!($85 << 24 >> 24)) {
       $100 = $84 + 1 | 0; //@line 12925
      } else {
       $89 = $85 & 255; //@line 12928
       $92 = $84; //@line 12928
       while (1) {
        if ($89 & 192 | 0) {
         label = 12; //@line 12933
         break;
        }
        $94 = $92 + 1 + $89 | 0; //@line 12937
        $95 = HEAP8[$94 >> 0] | 0; //@line 12938
        if (!($95 << 24 >> 24)) {
         label = 14; //@line 12942
         break;
        } else {
         $89 = $95 & 255; //@line 12945
         $92 = $94; //@line 12945
        }
       }
       if ((label | 0) == 12) {
        label = 0; //@line 12949
        $100 = $92 + 2 | 0; //@line 12951
        break;
       } else if ((label | 0) == 14) {
        label = 0; //@line 12955
        $100 = $94 + 1 | 0; //@line 12957
        break;
       }
      }
     } while (0);
     $108 = (HEAPU8[$100 >> 0] << 8 | HEAPU8[$100 + 1 >> 0]) & 65535; //@line 12970
     $119 = $100 + 10 | 0; //@line 12981
     $124 = HEAPU8[$100 + 8 >> 0] << 8 | HEAPU8[$100 + 9 >> 0]; //@line 12986
     $125 = $124 & 65535; //@line 12987
     $127 = (HEAPU8[$100 + 2 >> 0] << 8 | HEAPU8[$100 + 3 >> 0] | 0) == 1; //@line 12989
     do {
      if ($108 << 16 >> 16 == 1 & $127 & $125 << 16 >> 16 == 4) {
       HEAP32[$$090117$i >> 2] = 1; //@line 12995
       HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 12999
       HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 13003
       HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 13007
       HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 13011
       $$0 = $100 + 14 | 0; //@line 13014
       $$1$i = $$090117$i + 20 | 0; //@line 13014
       $$196$i = $$095115$i + 1 | 0; //@line 13014
      } else {
       if ($108 << 16 >> 16 == 28 & $127 & $125 << 16 >> 16 == 16) {
        HEAP32[$$090117$i >> 2] = 2; //@line 13021
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$119 >> 0] | 0; //@line 13025
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$100 + 11 >> 0] | 0; //@line 13029
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$100 + 12 >> 0] | 0; //@line 13033
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$100 + 13 >> 0] | 0; //@line 13037
        HEAP8[$$090117$i + 8 >> 0] = HEAP8[$100 + 14 >> 0] | 0; //@line 13041
        HEAP8[$$090117$i + 9 >> 0] = HEAP8[$100 + 15 >> 0] | 0; //@line 13045
        HEAP8[$$090117$i + 10 >> 0] = HEAP8[$100 + 16 >> 0] | 0; //@line 13049
        HEAP8[$$090117$i + 11 >> 0] = HEAP8[$100 + 17 >> 0] | 0; //@line 13053
        HEAP8[$$090117$i + 12 >> 0] = HEAP8[$100 + 18 >> 0] | 0; //@line 13057
        HEAP8[$$090117$i + 13 >> 0] = HEAP8[$100 + 19 >> 0] | 0; //@line 13061
        HEAP8[$$090117$i + 14 >> 0] = HEAP8[$100 + 20 >> 0] | 0; //@line 13065
        HEAP8[$$090117$i + 15 >> 0] = HEAP8[$100 + 21 >> 0] | 0; //@line 13069
        HEAP8[$$090117$i + 16 >> 0] = HEAP8[$100 + 22 >> 0] | 0; //@line 13073
        HEAP8[$$090117$i + 17 >> 0] = HEAP8[$100 + 23 >> 0] | 0; //@line 13077
        HEAP8[$$090117$i + 18 >> 0] = HEAP8[$100 + 24 >> 0] | 0; //@line 13081
        HEAP8[$$090117$i + 19 >> 0] = HEAP8[$100 + 25 >> 0] | 0; //@line 13085
        $$0 = $100 + 26 | 0; //@line 13088
        $$1$i = $$090117$i + 20 | 0; //@line 13088
        $$196$i = $$095115$i + 1 | 0; //@line 13088
        break;
       } else {
        $$0 = $119 + $124 | 0; //@line 13092
        $$1$i = $$090117$i; //@line 13092
        $$196$i = $$095115$i; //@line 13092
        break;
       }
      }
     } while (0);
     $$094116$i = $$094116$i + 1 | 0; //@line 13097
     if (!(($$094116$i | 0) < ($61 | 0) & $$196$i >>> 0 < $34 >>> 0)) {
      $$089$i = $$196$i; //@line 13104
      break;
     } else {
      $$090117$i = $$1$i; //@line 13102
      $$095115$i = $$196$i; //@line 13102
      $84 = $$0; //@line 13102
     }
    }
   } else {
    $$089$i = 0; //@line 13109
   }
  } else {
   $$089$i = 0; //@line 13112
  }
  $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 13116
 }
 _free($2); //@line 13118
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 13119
 $200 = __ZN6Socket5closeEv($18) | 0; //@line 13120
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 13123
  $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 13124
  HEAP32[$201 >> 2] = $$355; //@line 13125
  $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 13126
  HEAP32[$202 >> 2] = $20; //@line 13127
  $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 13128
  HEAP32[$203 >> 2] = $36; //@line 13129
  sp = STACKTOP; //@line 13130
  STACKTOP = sp; //@line 13131
  return;
 }
 HEAP32[___async_retval >> 2] = $200; //@line 13134
 ___async_unwind = 0; //@line 13135
 HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 13136
 $201 = $ReallocAsyncCtx12 + 4 | 0; //@line 13137
 HEAP32[$201 >> 2] = $$355; //@line 13138
 $202 = $ReallocAsyncCtx12 + 8 | 0; //@line 13139
 HEAP32[$202 >> 2] = $20; //@line 13140
 $203 = $ReallocAsyncCtx12 + 12 | 0; //@line 13141
 HEAP32[$203 >> 2] = $36; //@line 13142
 sp = STACKTOP; //@line 13143
 STACKTOP = sp; //@line 13144
 return;
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 21055
 $6 = HEAP32[$5 >> 2] | 0; //@line 21056
 $7 = $0 + 100 | 0; //@line 21057
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 21062
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 21065
  $$0142 = 0; //@line 21065
 } else {
  $$0 = ___shgetc($0) | 0; //@line 21068
  $$0142 = 0; //@line 21068
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 21073
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 21081
    $$0148 = 0; //@line 21081
    $$0152 = 1.0; //@line 21081
    $$0155 = 0.0; //@line 21081
    $$0159 = 0; //@line 21081
    $$2 = $$0; //@line 21081
    $$2144 = $$0142; //@line 21081
    $51 = 0; //@line 21081
    $53 = 0; //@line 21081
    $96 = 0; //@line 21081
    $98 = 0; //@line 21081
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 21085
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 21090
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 21093
   $$0142 = 1; //@line 21093
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 21097
   $$0142 = 1; //@line 21097
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 21102
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 21107
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 21110
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 21113
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 21117
   $37 = 0; //@line 21117
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 21119
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 21124
     $41 = HEAPU8[$29 >> 0] | 0; //@line 21127
    } else {
     $41 = ___shgetc($0) | 0; //@line 21130
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 21132
    $39 = tempRet0; //@line 21133
    if (($41 | 0) == 48) {
     $36 = $38; //@line 21136
     $37 = $39; //@line 21136
    } else {
     $$0146 = 1; //@line 21138
     $$0148 = 0; //@line 21138
     $$0152 = 1.0; //@line 21138
     $$0155 = 0.0; //@line 21138
     $$0159 = 0; //@line 21138
     $$2 = $41; //@line 21138
     $$2144 = 1; //@line 21138
     $51 = 0; //@line 21138
     $53 = 0; //@line 21138
     $96 = $38; //@line 21138
     $98 = $39; //@line 21138
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 21143
   $$0148 = 0; //@line 21143
   $$0152 = 1.0; //@line 21143
   $$0155 = 0.0; //@line 21143
   $$0159 = 0; //@line 21143
   $$2 = $$1$ph; //@line 21143
   $$2144 = $$0142; //@line 21143
   $51 = 0; //@line 21143
   $53 = 0; //@line 21143
   $96 = 0; //@line 21143
   $98 = 0; //@line 21143
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 21147
  $$pre = $$2 | 32; //@line 21149
  if ($42 >>> 0 < 10) {
   label = 20; //@line 21151
  } else {
   $46 = ($$2 | 0) == 46; //@line 21155
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 21158
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 21164
     $$2150 = $$0148; //@line 21164
     $$2154 = $$0152; //@line 21164
     $$2157 = $$0155; //@line 21164
     $$2161 = $$0159; //@line 21164
     $$3145 = $$2144; //@line 21164
     $211 = $53; //@line 21164
     $212 = $51; //@line 21164
     $213 = $53; //@line 21164
     $214 = $51; //@line 21164
    } else {
     $$2$lcssa = 46; //@line 21166
     break;
    }
   } else {
    label = 20; //@line 21170
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 21174
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 21177
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 21187
     $$1153 = $$0152; //@line 21187
     $$1156 = $$0155; //@line 21187
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 21187
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 21196
      $$1149 = $$0148; //@line 21199
      $$1153 = $65; //@line 21199
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 21199
      $$1160 = $$0159; //@line 21199
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 21204
      $$1149 = $or$cond ? $$0148 : 1; //@line 21209
      $$1153 = $$0152; //@line 21209
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 21209
      $$1160 = $$0159; //@line 21209
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 21214
   $$1147 = $$0146; //@line 21216
   $$2150 = $$1149; //@line 21216
   $$2154 = $$1153; //@line 21216
   $$2157 = $$1156; //@line 21216
   $$2161 = $$1160; //@line 21216
   $$3145 = 1; //@line 21216
   $211 = $96; //@line 21216
   $212 = $98; //@line 21216
   $213 = $72; //@line 21216
   $214 = tempRet0; //@line 21216
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 21218
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 21223
   $$0146 = $$1147; //@line 21226
   $$0148 = $$2150; //@line 21226
   $$0152 = $$2154; //@line 21226
   $$0155 = $$2157; //@line 21226
   $$0159 = $$2161; //@line 21226
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 21226
   $$2144 = $$3145; //@line 21226
   $51 = $214; //@line 21226
   $53 = $213; //@line 21226
   $96 = $211; //@line 21226
   $98 = $212; //@line 21226
   continue;
  } else {
   $$0146 = $$1147; //@line 21230
   $$0148 = $$2150; //@line 21230
   $$0152 = $$2154; //@line 21230
   $$0155 = $$2157; //@line 21230
   $$0159 = $$2161; //@line 21230
   $$2 = ___shgetc($0) | 0; //@line 21230
   $$2144 = $$3145; //@line 21230
   $51 = $214; //@line 21230
   $53 = $213; //@line 21230
   $96 = $211; //@line 21230
   $98 = $212; //@line 21230
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 21238
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 21242
   }
   if (!$4) {
    ___shlim($0, 0); //@line 21246
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 21251
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 21258
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 21263
  } else {
   $94 = ($$0146 | 0) == 0; //@line 21265
   $95 = $94 ? $53 : $96; //@line 21266
   $97 = $94 ? $51 : $98; //@line 21267
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 21274
    $105 = $53; //@line 21274
    $106 = $51; //@line 21274
    while (1) {
     $104 = $$3162183 << 4; //@line 21276
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 21277
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 21287
      break;
     } else {
      $$3162183 = $104; //@line 21285
      $106 = tempRet0; //@line 21285
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 21292
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 21297
    $117 = tempRet0; //@line 21298
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 21305
      $$0165 = 0.0; //@line 21306
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 21312
      $135 = 0; //@line 21312
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 21316
      $134 = 0; //@line 21317
      $135 = 0; //@line 21317
     }
    } else {
     $134 = $116; //@line 21320
     $135 = $117; //@line 21320
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 21326
     $135 = 0; //@line 21326
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 21330
     $134 = 0; //@line 21331
     $135 = 0; //@line 21331
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 21334
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 21336
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 21338
   $137 = tempRet0; //@line 21339
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 21344
    break;
   }
   $141 = 0 - $2 | 0; //@line 21347
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 21349
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 21357
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 21361
    break;
   }
   $153 = $2 + -106 | 0; //@line 21364
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 21366
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 21374
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 21378
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 21383
    $$4163178 = $$3162$lcssa; //@line 21383
    $170 = $136; //@line 21383
    $171 = $137; //@line 21383
    while (1) {
     $166 = !($$3158179 >= .5); //@line 21385
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 21390
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 21392
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 21393
     $173 = tempRet0; //@line 21394
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 21397
      $$4163178 = $$5164; //@line 21397
      $170 = $172; //@line 21397
      $171 = $173; //@line 21397
     } else {
      $$3158$lcssa = $$4; //@line 21399
      $$4163$lcssa = $$5164; //@line 21399
      $181 = $172; //@line 21399
      $182 = $173; //@line 21399
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 21404
    $$4163$lcssa = $$3162$lcssa; //@line 21404
    $181 = $136; //@line 21404
    $182 = $137; //@line 21404
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 21407
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 21410
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 21412
   $184 = tempRet0; //@line 21413
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 21422
     label = 59; //@line 21423
    } else {
     $$0166170 = 0; //@line 21425
     $194 = 84; //@line 21425
     label = 61; //@line 21426
    }
   } else {
    $$0166 = $1; //@line 21429
    label = 59; //@line 21430
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 21436
     $194 = 84 - $$0166 | 0; //@line 21436
     label = 61; //@line 21437
    } else {
     $$0151 = 0.0; //@line 21440
     $$0166169 = $$0166; //@line 21440
     $$pre$phi201Z2D = +($3 | 0); //@line 21440
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 21444
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 21447
    $$0166169 = $$0166170; //@line 21447
    $$pre$phi201Z2D = $193; //@line 21447
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 21454
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 21463
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 21467
   }
   $$0165 = +_scalbnl($207, $181); //@line 21470
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4621
 STACKTOP = STACKTOP + 1056 | 0; //@line 4622
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 4622
 $2 = sp + 1024 | 0; //@line 4623
 $3 = sp; //@line 4624
 HEAP32[$2 >> 2] = 0; //@line 4625
 HEAP32[$2 + 4 >> 2] = 0; //@line 4625
 HEAP32[$2 + 8 >> 2] = 0; //@line 4625
 HEAP32[$2 + 12 >> 2] = 0; //@line 4625
 HEAP32[$2 + 16 >> 2] = 0; //@line 4625
 HEAP32[$2 + 20 >> 2] = 0; //@line 4625
 HEAP32[$2 + 24 >> 2] = 0; //@line 4625
 HEAP32[$2 + 28 >> 2] = 0; //@line 4625
 $4 = HEAP8[$1 >> 0] | 0; //@line 4626
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 4630
   $$0185$ph$lcssa327 = -1; //@line 4630
   $$0187219$ph325326 = 0; //@line 4630
   $$1176$ph$ph$lcssa208 = 1; //@line 4630
   $$1186$ph$lcssa = -1; //@line 4630
   label = 26; //@line 4631
  } else {
   $$0187263 = 0; //@line 4633
   $10 = $4; //@line 4633
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 4639
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 4647
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 4650
    $$0187263 = $$0187263 + 1 | 0; //@line 4651
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 4654
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 4656
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 4664
   if ($23) {
    $$0183$ph260 = 0; //@line 4666
    $$0185$ph259 = -1; //@line 4666
    $130 = 1; //@line 4666
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 4668
     $$0183$ph197$ph253 = $$0183$ph260; //@line 4668
     $131 = $130; //@line 4668
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 4670
      $132 = $131; //@line 4670
      L10 : while (1) {
       $$0179242 = 1; //@line 4672
       $25 = $132; //@line 4672
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 4676
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 4678
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 4684
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 4688
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 4693
         $$0185$ph$lcssa = $$0185$ph259; //@line 4693
         break L6;
        } else {
         $25 = $27; //@line 4691
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 4697
       $132 = $37 + 1 | 0; //@line 4698
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 4703
        $$0185$ph$lcssa = $$0185$ph259; //@line 4703
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 4701
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 4708
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 4712
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 4717
       $$0185$ph$lcssa = $$0185$ph259; //@line 4717
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 4715
       $$0183$ph197$ph253 = $25; //@line 4715
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 4722
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 4727
      $$0185$ph$lcssa = $$0183$ph197248; //@line 4727
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 4725
      $$0185$ph259 = $$0183$ph197248; //@line 4725
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 4732
     $$1186$ph238 = -1; //@line 4732
     $133 = 1; //@line 4732
     while (1) {
      $$1176$ph$ph233 = 1; //@line 4734
      $$1184$ph193$ph232 = $$1184$ph239; //@line 4734
      $135 = $133; //@line 4734
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 4736
       $134 = $135; //@line 4736
       L25 : while (1) {
        $$1180222 = 1; //@line 4738
        $52 = $134; //@line 4738
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 4742
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 4744
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 4750
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 4754
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 4759
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 4759
          $$0187219$ph325326 = $$0187263; //@line 4759
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 4759
          $$1186$ph$lcssa = $$1186$ph238; //@line 4759
          label = 26; //@line 4760
          break L1;
         } else {
          $52 = $45; //@line 4757
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 4764
        $134 = $56 + 1 | 0; //@line 4765
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 4770
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 4770
         $$0187219$ph325326 = $$0187263; //@line 4770
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 4770
         $$1186$ph$lcssa = $$1186$ph238; //@line 4770
         label = 26; //@line 4771
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 4768
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 4776
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 4780
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 4785
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 4785
        $$0187219$ph325326 = $$0187263; //@line 4785
        $$1176$ph$ph$lcssa208 = $60; //@line 4785
        $$1186$ph$lcssa = $$1186$ph238; //@line 4785
        label = 26; //@line 4786
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 4783
        $$1184$ph193$ph232 = $52; //@line 4783
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 4791
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 4796
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 4796
       $$0187219$ph325326 = $$0187263; //@line 4796
       $$1176$ph$ph$lcssa208 = 1; //@line 4796
       $$1186$ph$lcssa = $$1184$ph193227; //@line 4796
       label = 26; //@line 4797
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 4794
       $$1186$ph238 = $$1184$ph193227; //@line 4794
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 4802
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 4802
     $$0187219$ph325326 = $$0187263; //@line 4802
     $$1176$ph$ph$lcssa208 = 1; //@line 4802
     $$1186$ph$lcssa = -1; //@line 4802
     label = 26; //@line 4803
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 4806
    $$0185$ph$lcssa327 = -1; //@line 4806
    $$0187219$ph325326 = $$0187263; //@line 4806
    $$1176$ph$ph$lcssa208 = 1; //@line 4806
    $$1186$ph$lcssa = -1; //@line 4806
    label = 26; //@line 4807
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 4815
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 4816
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 4817
   $70 = $$1186$$0185 + 1 | 0; //@line 4819
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 4824
    $$3178 = $$1176$$0175; //@line 4824
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 4827
    $$0168 = 0; //@line 4831
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 4831
   }
   $78 = $$0187219$ph325326 | 63; //@line 4833
   $79 = $$0187219$ph325326 + -1 | 0; //@line 4834
   $80 = ($$0168 | 0) != 0; //@line 4835
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 4836
   $$0166 = $0; //@line 4837
   $$0169 = 0; //@line 4837
   $$0170 = $0; //@line 4837
   while (1) {
    $83 = $$0166; //@line 4840
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 4845
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 4849
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 4856
        break L35;
       } else {
        $$3173 = $86; //@line 4859
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 4864
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 4868
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 4880
      $$2181$sink = $$0187219$ph325326; //@line 4880
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 4885
      if ($105 | 0) {
       $$0169$be = 0; //@line 4893
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 4893
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 4897
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 4899
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 4903
       } else {
        $$3182221 = $111; //@line 4905
        $$pr = $113; //@line 4905
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 4913
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 4915
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 4918
          break L54;
         } else {
          $$3182221 = $118; //@line 4921
         }
        }
        $$0169$be = 0; //@line 4925
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 4925
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 4932
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 4935
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 4944
        $$2181$sink = $$3178; //@line 4944
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 4951
    $$0169 = $$0169$be; //@line 4951
    $$0170 = $$3173; //@line 4951
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4955
 return $$3 | 0; //@line 4955
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_69($0) {
 $0 = $0 | 0;
 var $$019$i$1 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15616
 STACKTOP = STACKTOP + 32 | 0; //@line 15617
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15617
 $$byval_copy = sp; //@line 15618
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15622
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 15624
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15626
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15628
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15630
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15632
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15634
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15636
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15638
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15640
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15642
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15644
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15646
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15648
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15650
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15652
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15654
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15656
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(80) | 0; //@line 15661
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($14, 0, $16, 512) | 0; //@line 15662
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 107; //@line 15665
   $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 15666
   HEAP32[$42 >> 2] = $2; //@line 15667
   $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 15668
   HEAP32[$43 >> 2] = $4; //@line 15669
   $44 = $ReallocAsyncCtx5 + 12 | 0; //@line 15670
   HEAP8[$44 >> 0] = $6; //@line 15671
   $45 = $ReallocAsyncCtx5 + 16 | 0; //@line 15672
   HEAP32[$45 >> 2] = $8; //@line 15673
   $46 = $ReallocAsyncCtx5 + 20 | 0; //@line 15674
   HEAP32[$46 >> 2] = $10; //@line 15675
   $47 = $ReallocAsyncCtx5 + 24 | 0; //@line 15676
   HEAP32[$47 >> 2] = $12; //@line 15677
   $48 = $ReallocAsyncCtx5 + 28 | 0; //@line 15678
   HEAP32[$48 >> 2] = $14; //@line 15679
   $49 = $ReallocAsyncCtx5 + 32 | 0; //@line 15680
   HEAP32[$49 >> 2] = $16; //@line 15681
   $50 = $ReallocAsyncCtx5 + 36 | 0; //@line 15682
   HEAP32[$50 >> 2] = $18; //@line 15683
   $51 = $ReallocAsyncCtx5 + 40 | 0; //@line 15684
   HEAP32[$51 >> 2] = $20; //@line 15685
   $52 = $ReallocAsyncCtx5 + 44 | 0; //@line 15686
   HEAP32[$52 >> 2] = $22; //@line 15687
   $53 = $ReallocAsyncCtx5 + 48 | 0; //@line 15688
   HEAP32[$53 >> 2] = $24; //@line 15689
   $54 = $ReallocAsyncCtx5 + 52 | 0; //@line 15690
   HEAP32[$54 >> 2] = $26; //@line 15691
   $55 = $ReallocAsyncCtx5 + 56 | 0; //@line 15692
   HEAP32[$55 >> 2] = $28; //@line 15693
   $56 = $ReallocAsyncCtx5 + 60 | 0; //@line 15694
   HEAP32[$56 >> 2] = $30; //@line 15695
   $57 = $ReallocAsyncCtx5 + 64 | 0; //@line 15696
   HEAP32[$57 >> 2] = $32; //@line 15697
   $58 = $ReallocAsyncCtx5 + 68 | 0; //@line 15698
   HEAP32[$58 >> 2] = $34; //@line 15699
   $59 = $ReallocAsyncCtx5 + 72 | 0; //@line 15700
   HEAP32[$59 >> 2] = $36; //@line 15701
   $60 = $ReallocAsyncCtx5 + 76 | 0; //@line 15702
   HEAP32[$60 >> 2] = $38; //@line 15703
   sp = STACKTOP; //@line 15704
   STACKTOP = sp; //@line 15705
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 15708
  ___async_unwind = 0; //@line 15709
  HEAP32[$ReallocAsyncCtx5 >> 2] = 107; //@line 15710
  $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 15711
  HEAP32[$42 >> 2] = $2; //@line 15712
  $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 15713
  HEAP32[$43 >> 2] = $4; //@line 15714
  $44 = $ReallocAsyncCtx5 + 12 | 0; //@line 15715
  HEAP8[$44 >> 0] = $6; //@line 15716
  $45 = $ReallocAsyncCtx5 + 16 | 0; //@line 15717
  HEAP32[$45 >> 2] = $8; //@line 15718
  $46 = $ReallocAsyncCtx5 + 20 | 0; //@line 15719
  HEAP32[$46 >> 2] = $10; //@line 15720
  $47 = $ReallocAsyncCtx5 + 24 | 0; //@line 15721
  HEAP32[$47 >> 2] = $12; //@line 15722
  $48 = $ReallocAsyncCtx5 + 28 | 0; //@line 15723
  HEAP32[$48 >> 2] = $14; //@line 15724
  $49 = $ReallocAsyncCtx5 + 32 | 0; //@line 15725
  HEAP32[$49 >> 2] = $16; //@line 15726
  $50 = $ReallocAsyncCtx5 + 36 | 0; //@line 15727
  HEAP32[$50 >> 2] = $18; //@line 15728
  $51 = $ReallocAsyncCtx5 + 40 | 0; //@line 15729
  HEAP32[$51 >> 2] = $20; //@line 15730
  $52 = $ReallocAsyncCtx5 + 44 | 0; //@line 15731
  HEAP32[$52 >> 2] = $22; //@line 15732
  $53 = $ReallocAsyncCtx5 + 48 | 0; //@line 15733
  HEAP32[$53 >> 2] = $24; //@line 15734
  $54 = $ReallocAsyncCtx5 + 52 | 0; //@line 15735
  HEAP32[$54 >> 2] = $26; //@line 15736
  $55 = $ReallocAsyncCtx5 + 56 | 0; //@line 15737
  HEAP32[$55 >> 2] = $28; //@line 15738
  $56 = $ReallocAsyncCtx5 + 60 | 0; //@line 15739
  HEAP32[$56 >> 2] = $30; //@line 15740
  $57 = $ReallocAsyncCtx5 + 64 | 0; //@line 15741
  HEAP32[$57 >> 2] = $32; //@line 15742
  $58 = $ReallocAsyncCtx5 + 68 | 0; //@line 15743
  HEAP32[$58 >> 2] = $34; //@line 15744
  $59 = $ReallocAsyncCtx5 + 72 | 0; //@line 15745
  HEAP32[$59 >> 2] = $36; //@line 15746
  $60 = $ReallocAsyncCtx5 + 76 | 0; //@line 15747
  HEAP32[$60 >> 2] = $38; //@line 15748
  sp = STACKTOP; //@line 15749
  STACKTOP = sp; //@line 15750
  return;
 }
 HEAP8[$16 >> 0] = 0; //@line 15752
 HEAP8[$18 >> 0] = 1; //@line 15753
 HEAP8[$20 >> 0] = 1; //@line 15754
 HEAP8[$22 >> 0] = 0; //@line 15755
 HEAP8[$24 >> 0] = 0; //@line 15756
 HEAP8[$26 >> 0] = 1; //@line 15757
 HEAP8[$28 >> 0] = 0; //@line 15758
 HEAP8[$28 + 1 >> 0] = 0; //@line 15758
 HEAP8[$28 + 2 >> 0] = 0; //@line 15758
 HEAP8[$28 + 3 >> 0] = 0; //@line 15758
 HEAP8[$28 + 4 >> 0] = 0; //@line 15758
 HEAP8[$28 + 5 >> 0] = 0; //@line 15758
 if (!(HEAP8[$4 >> 0] | 0)) {
  $79 = $2; //@line 15762
 } else {
  $$019$i$1 = $4; //@line 15764
  $67 = $2; //@line 15764
  while (1) {
   $64 = _strcspn($$019$i$1, 7214) | 0; //@line 15766
   $66 = $67 + 1 | 0; //@line 15768
   HEAP8[$67 >> 0] = $64; //@line 15769
   $68 = $64 & 255; //@line 15770
   _memcpy($66 | 0, $$019$i$1 | 0, $68 | 0) | 0; //@line 15771
   $69 = $66 + $68 | 0; //@line 15772
   $$019$i$1 = $$019$i$1 + ($64 + ((HEAP8[$$019$i$1 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 15778
   if (!(HEAP8[$$019$i$1 >> 0] | 0)) {
    $79 = $69; //@line 15782
    break;
   } else {
    $67 = $69; //@line 15785
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 15790
 HEAP8[$79 + 1 >> 0] = 0; //@line 15792
 HEAP8[$79 + 2 >> 0] = $6; //@line 15794
 HEAP8[$79 + 3 >> 0] = 0; //@line 15796
 HEAP8[$79 + 4 >> 0] = 1; //@line 15797
 HEAP32[$$byval_copy >> 2] = HEAP32[135]; //@line 15798
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[136]; //@line 15798
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[137]; //@line 15798
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[138]; //@line 15798
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[139]; //@line 15798
 __ZN13SocketAddressC2E10nsapi_addrt($10, $$byval_copy, 53); //@line 15799
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(80) | 0; //@line 15803
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($14, $10, $16, $79 + 5 - $12 | 0) | 0; //@line 15804
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 15807
  $87 = $ReallocAsyncCtx9 + 4 | 0; //@line 15808
  HEAP32[$87 >> 2] = $8; //@line 15809
  $88 = $ReallocAsyncCtx9 + 8 | 0; //@line 15810
  HEAP32[$88 >> 2] = $16; //@line 15811
  $89 = $ReallocAsyncCtx9 + 12 | 0; //@line 15812
  HEAP32[$89 >> 2] = $18; //@line 15813
  $90 = $ReallocAsyncCtx9 + 16 | 0; //@line 15814
  HEAP32[$90 >> 2] = $20; //@line 15815
  $91 = $ReallocAsyncCtx9 + 20 | 0; //@line 15816
  HEAP32[$91 >> 2] = $22; //@line 15817
  $92 = $ReallocAsyncCtx9 + 24 | 0; //@line 15818
  HEAP32[$92 >> 2] = $24; //@line 15819
  $93 = $ReallocAsyncCtx9 + 28 | 0; //@line 15820
  HEAP32[$93 >> 2] = $26; //@line 15821
  $94 = $ReallocAsyncCtx9 + 32 | 0; //@line 15822
  HEAP32[$94 >> 2] = $28; //@line 15823
  $95 = $ReallocAsyncCtx9 + 36 | 0; //@line 15824
  HEAP32[$95 >> 2] = $30; //@line 15825
  $96 = $ReallocAsyncCtx9 + 40 | 0; //@line 15826
  HEAP32[$96 >> 2] = $32; //@line 15827
  $97 = $ReallocAsyncCtx9 + 44 | 0; //@line 15828
  HEAP32[$97 >> 2] = $14; //@line 15829
  $98 = $ReallocAsyncCtx9 + 48 | 0; //@line 15830
  HEAP32[$98 >> 2] = $2; //@line 15831
  $99 = $ReallocAsyncCtx9 + 52 | 0; //@line 15832
  HEAP8[$99 >> 0] = $6; //@line 15833
  $100 = $ReallocAsyncCtx9 + 56 | 0; //@line 15834
  HEAP32[$100 >> 2] = $10; //@line 15835
  $101 = $ReallocAsyncCtx9 + 60 | 0; //@line 15836
  HEAP32[$101 >> 2] = $12; //@line 15837
  $102 = $ReallocAsyncCtx9 + 64 | 0; //@line 15838
  HEAP32[$102 >> 2] = $4; //@line 15839
  $103 = $ReallocAsyncCtx9 + 68 | 0; //@line 15840
  HEAP32[$103 >> 2] = $34; //@line 15841
  $104 = $ReallocAsyncCtx9 + 72 | 0; //@line 15842
  HEAP32[$104 >> 2] = $36; //@line 15843
  $105 = $ReallocAsyncCtx9 + 76 | 0; //@line 15844
  HEAP32[$105 >> 2] = $38; //@line 15845
  sp = STACKTOP; //@line 15846
  STACKTOP = sp; //@line 15847
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 15850
 ___async_unwind = 0; //@line 15851
 HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 15852
 $87 = $ReallocAsyncCtx9 + 4 | 0; //@line 15853
 HEAP32[$87 >> 2] = $8; //@line 15854
 $88 = $ReallocAsyncCtx9 + 8 | 0; //@line 15855
 HEAP32[$88 >> 2] = $16; //@line 15856
 $89 = $ReallocAsyncCtx9 + 12 | 0; //@line 15857
 HEAP32[$89 >> 2] = $18; //@line 15858
 $90 = $ReallocAsyncCtx9 + 16 | 0; //@line 15859
 HEAP32[$90 >> 2] = $20; //@line 15860
 $91 = $ReallocAsyncCtx9 + 20 | 0; //@line 15861
 HEAP32[$91 >> 2] = $22; //@line 15862
 $92 = $ReallocAsyncCtx9 + 24 | 0; //@line 15863
 HEAP32[$92 >> 2] = $24; //@line 15864
 $93 = $ReallocAsyncCtx9 + 28 | 0; //@line 15865
 HEAP32[$93 >> 2] = $26; //@line 15866
 $94 = $ReallocAsyncCtx9 + 32 | 0; //@line 15867
 HEAP32[$94 >> 2] = $28; //@line 15868
 $95 = $ReallocAsyncCtx9 + 36 | 0; //@line 15869
 HEAP32[$95 >> 2] = $30; //@line 15870
 $96 = $ReallocAsyncCtx9 + 40 | 0; //@line 15871
 HEAP32[$96 >> 2] = $32; //@line 15872
 $97 = $ReallocAsyncCtx9 + 44 | 0; //@line 15873
 HEAP32[$97 >> 2] = $14; //@line 15874
 $98 = $ReallocAsyncCtx9 + 48 | 0; //@line 15875
 HEAP32[$98 >> 2] = $2; //@line 15876
 $99 = $ReallocAsyncCtx9 + 52 | 0; //@line 15877
 HEAP8[$99 >> 0] = $6; //@line 15878
 $100 = $ReallocAsyncCtx9 + 56 | 0; //@line 15879
 HEAP32[$100 >> 2] = $10; //@line 15880
 $101 = $ReallocAsyncCtx9 + 60 | 0; //@line 15881
 HEAP32[$101 >> 2] = $12; //@line 15882
 $102 = $ReallocAsyncCtx9 + 64 | 0; //@line 15883
 HEAP32[$102 >> 2] = $4; //@line 15884
 $103 = $ReallocAsyncCtx9 + 68 | 0; //@line 15885
 HEAP32[$103 >> 2] = $34; //@line 15886
 $104 = $ReallocAsyncCtx9 + 72 | 0; //@line 15887
 HEAP32[$104 >> 2] = $36; //@line 15888
 $105 = $ReallocAsyncCtx9 + 76 | 0; //@line 15889
 HEAP32[$105 >> 2] = $38; //@line 15890
 sp = STACKTOP; //@line 15891
 STACKTOP = sp; //@line 15892
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_68($0) {
 $0 = $0 | 0;
 var $$019$i$2 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 15330
 STACKTOP = STACKTOP + 32 | 0; //@line 15331
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15331
 $$byval_copy = sp; //@line 15332
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15336
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15338
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15340
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15342
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15344
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15346
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15348
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15350
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15352
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15354
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15356
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 15358
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15360
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15362
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15364
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15366
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15368
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15370
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 15375
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($22, 0, $4, 512) | 0; //@line 15376
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 111; //@line 15379
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15380
   HEAP32[$42 >> 2] = $2; //@line 15381
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15382
   HEAP32[$43 >> 2] = $4; //@line 15383
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15384
   HEAP32[$44 >> 2] = $6; //@line 15385
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 15386
   HEAP32[$45 >> 2] = $8; //@line 15387
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 15388
   HEAP32[$46 >> 2] = $10; //@line 15389
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 15390
   HEAP32[$47 >> 2] = $12; //@line 15391
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 15392
   HEAP32[$48 >> 2] = $14; //@line 15393
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 15394
   HEAP32[$49 >> 2] = $16; //@line 15395
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 15396
   HEAP32[$50 >> 2] = $18; //@line 15397
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 15398
   HEAP32[$51 >> 2] = $20; //@line 15399
   $52 = $ReallocAsyncCtx4 + 44 | 0; //@line 15400
   HEAP32[$52 >> 2] = $22; //@line 15401
   $53 = $ReallocAsyncCtx4 + 48 | 0; //@line 15402
   HEAP32[$53 >> 2] = $24; //@line 15403
   $54 = $ReallocAsyncCtx4 + 52 | 0; //@line 15404
   HEAP8[$54 >> 0] = $26; //@line 15405
   $55 = $ReallocAsyncCtx4 + 56 | 0; //@line 15406
   HEAP32[$55 >> 2] = $28; //@line 15407
   $56 = $ReallocAsyncCtx4 + 60 | 0; //@line 15408
   HEAP32[$56 >> 2] = $30; //@line 15409
   $57 = $ReallocAsyncCtx4 + 64 | 0; //@line 15410
   HEAP32[$57 >> 2] = $32; //@line 15411
   $58 = $ReallocAsyncCtx4 + 68 | 0; //@line 15412
   HEAP32[$58 >> 2] = $34; //@line 15413
   $59 = $ReallocAsyncCtx4 + 72 | 0; //@line 15414
   HEAP32[$59 >> 2] = $36; //@line 15415
   $60 = $ReallocAsyncCtx4 + 76 | 0; //@line 15416
   HEAP32[$60 >> 2] = $38; //@line 15417
   sp = STACKTOP; //@line 15418
   STACKTOP = sp; //@line 15419
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 15422
  ___async_unwind = 0; //@line 15423
  HEAP32[$ReallocAsyncCtx4 >> 2] = 111; //@line 15424
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15425
  HEAP32[$42 >> 2] = $2; //@line 15426
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15427
  HEAP32[$43 >> 2] = $4; //@line 15428
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15429
  HEAP32[$44 >> 2] = $6; //@line 15430
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 15431
  HEAP32[$45 >> 2] = $8; //@line 15432
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 15433
  HEAP32[$46 >> 2] = $10; //@line 15434
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 15435
  HEAP32[$47 >> 2] = $12; //@line 15436
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 15437
  HEAP32[$48 >> 2] = $14; //@line 15438
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 15439
  HEAP32[$49 >> 2] = $16; //@line 15440
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 15441
  HEAP32[$50 >> 2] = $18; //@line 15442
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 15443
  HEAP32[$51 >> 2] = $20; //@line 15444
  $52 = $ReallocAsyncCtx4 + 44 | 0; //@line 15445
  HEAP32[$52 >> 2] = $22; //@line 15446
  $53 = $ReallocAsyncCtx4 + 48 | 0; //@line 15447
  HEAP32[$53 >> 2] = $24; //@line 15448
  $54 = $ReallocAsyncCtx4 + 52 | 0; //@line 15449
  HEAP8[$54 >> 0] = $26; //@line 15450
  $55 = $ReallocAsyncCtx4 + 56 | 0; //@line 15451
  HEAP32[$55 >> 2] = $28; //@line 15452
  $56 = $ReallocAsyncCtx4 + 60 | 0; //@line 15453
  HEAP32[$56 >> 2] = $30; //@line 15454
  $57 = $ReallocAsyncCtx4 + 64 | 0; //@line 15455
  HEAP32[$57 >> 2] = $32; //@line 15456
  $58 = $ReallocAsyncCtx4 + 68 | 0; //@line 15457
  HEAP32[$58 >> 2] = $34; //@line 15458
  $59 = $ReallocAsyncCtx4 + 72 | 0; //@line 15459
  HEAP32[$59 >> 2] = $36; //@line 15460
  $60 = $ReallocAsyncCtx4 + 76 | 0; //@line 15461
  HEAP32[$60 >> 2] = $38; //@line 15462
  sp = STACKTOP; //@line 15463
  STACKTOP = sp; //@line 15464
  return;
 }
 HEAP8[$4 >> 0] = 0; //@line 15466
 HEAP8[$6 >> 0] = 1; //@line 15467
 HEAP8[$8 >> 0] = 1; //@line 15468
 HEAP8[$10 >> 0] = 0; //@line 15469
 HEAP8[$12 >> 0] = 0; //@line 15470
 HEAP8[$14 >> 0] = 1; //@line 15471
 HEAP8[$16 >> 0] = 0; //@line 15472
 HEAP8[$16 + 1 >> 0] = 0; //@line 15472
 HEAP8[$16 + 2 >> 0] = 0; //@line 15472
 HEAP8[$16 + 3 >> 0] = 0; //@line 15472
 HEAP8[$16 + 4 >> 0] = 0; //@line 15472
 HEAP8[$16 + 5 >> 0] = 0; //@line 15472
 if (!(HEAP8[$32 >> 0] | 0)) {
  $79 = $24; //@line 15476
 } else {
  $$019$i$2 = $32; //@line 15478
  $67 = $24; //@line 15478
  while (1) {
   $64 = _strcspn($$019$i$2, 7214) | 0; //@line 15480
   $66 = $67 + 1 | 0; //@line 15482
   HEAP8[$67 >> 0] = $64; //@line 15483
   $68 = $64 & 255; //@line 15484
   _memcpy($66 | 0, $$019$i$2 | 0, $68 | 0) | 0; //@line 15485
   $69 = $66 + $68 | 0; //@line 15486
   $$019$i$2 = $$019$i$2 + ($64 + ((HEAP8[$$019$i$2 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 15492
   if (!(HEAP8[$$019$i$2 >> 0] | 0)) {
    $79 = $69; //@line 15496
    break;
   } else {
    $67 = $69; //@line 15499
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 15504
 HEAP8[$79 + 1 >> 0] = 0; //@line 15506
 HEAP8[$79 + 2 >> 0] = $26; //@line 15508
 HEAP8[$79 + 3 >> 0] = 0; //@line 15510
 HEAP8[$79 + 4 >> 0] = 1; //@line 15511
 HEAP32[$$byval_copy >> 2] = HEAP32[140]; //@line 15512
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[141]; //@line 15512
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[142]; //@line 15512
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[143]; //@line 15512
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[144]; //@line 15512
 __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 53); //@line 15513
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(80) | 0; //@line 15517
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($22, $28, $4, $79 + 5 - $30 | 0) | 0; //@line 15518
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 112; //@line 15521
  $87 = $ReallocAsyncCtx8 + 4 | 0; //@line 15522
  HEAP32[$87 >> 2] = $4; //@line 15523
  $88 = $ReallocAsyncCtx8 + 8 | 0; //@line 15524
  HEAP32[$88 >> 2] = $6; //@line 15525
  $89 = $ReallocAsyncCtx8 + 12 | 0; //@line 15526
  HEAP32[$89 >> 2] = $8; //@line 15527
  $90 = $ReallocAsyncCtx8 + 16 | 0; //@line 15528
  HEAP32[$90 >> 2] = $10; //@line 15529
  $91 = $ReallocAsyncCtx8 + 20 | 0; //@line 15530
  HEAP32[$91 >> 2] = $12; //@line 15531
  $92 = $ReallocAsyncCtx8 + 24 | 0; //@line 15532
  HEAP32[$92 >> 2] = $14; //@line 15533
  $93 = $ReallocAsyncCtx8 + 28 | 0; //@line 15534
  HEAP32[$93 >> 2] = $16; //@line 15535
  $94 = $ReallocAsyncCtx8 + 32 | 0; //@line 15536
  HEAP32[$94 >> 2] = $18; //@line 15537
  $95 = $ReallocAsyncCtx8 + 36 | 0; //@line 15538
  HEAP32[$95 >> 2] = $20; //@line 15539
  $96 = $ReallocAsyncCtx8 + 40 | 0; //@line 15540
  HEAP32[$96 >> 2] = $22; //@line 15541
  $97 = $ReallocAsyncCtx8 + 44 | 0; //@line 15542
  HEAP32[$97 >> 2] = $24; //@line 15543
  $98 = $ReallocAsyncCtx8 + 48 | 0; //@line 15544
  HEAP8[$98 >> 0] = $26; //@line 15545
  $99 = $ReallocAsyncCtx8 + 52 | 0; //@line 15546
  HEAP32[$99 >> 2] = $2; //@line 15547
  $100 = $ReallocAsyncCtx8 + 56 | 0; //@line 15548
  HEAP32[$100 >> 2] = $28; //@line 15549
  $101 = $ReallocAsyncCtx8 + 60 | 0; //@line 15550
  HEAP32[$101 >> 2] = $30; //@line 15551
  $102 = $ReallocAsyncCtx8 + 64 | 0; //@line 15552
  HEAP32[$102 >> 2] = $32; //@line 15553
  $103 = $ReallocAsyncCtx8 + 68 | 0; //@line 15554
  HEAP32[$103 >> 2] = $34; //@line 15555
  $104 = $ReallocAsyncCtx8 + 72 | 0; //@line 15556
  HEAP32[$104 >> 2] = $36; //@line 15557
  $105 = $ReallocAsyncCtx8 + 76 | 0; //@line 15558
  HEAP32[$105 >> 2] = $38; //@line 15559
  sp = STACKTOP; //@line 15560
  STACKTOP = sp; //@line 15561
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 15564
 ___async_unwind = 0; //@line 15565
 HEAP32[$ReallocAsyncCtx8 >> 2] = 112; //@line 15566
 $87 = $ReallocAsyncCtx8 + 4 | 0; //@line 15567
 HEAP32[$87 >> 2] = $4; //@line 15568
 $88 = $ReallocAsyncCtx8 + 8 | 0; //@line 15569
 HEAP32[$88 >> 2] = $6; //@line 15570
 $89 = $ReallocAsyncCtx8 + 12 | 0; //@line 15571
 HEAP32[$89 >> 2] = $8; //@line 15572
 $90 = $ReallocAsyncCtx8 + 16 | 0; //@line 15573
 HEAP32[$90 >> 2] = $10; //@line 15574
 $91 = $ReallocAsyncCtx8 + 20 | 0; //@line 15575
 HEAP32[$91 >> 2] = $12; //@line 15576
 $92 = $ReallocAsyncCtx8 + 24 | 0; //@line 15577
 HEAP32[$92 >> 2] = $14; //@line 15578
 $93 = $ReallocAsyncCtx8 + 28 | 0; //@line 15579
 HEAP32[$93 >> 2] = $16; //@line 15580
 $94 = $ReallocAsyncCtx8 + 32 | 0; //@line 15581
 HEAP32[$94 >> 2] = $18; //@line 15582
 $95 = $ReallocAsyncCtx8 + 36 | 0; //@line 15583
 HEAP32[$95 >> 2] = $20; //@line 15584
 $96 = $ReallocAsyncCtx8 + 40 | 0; //@line 15585
 HEAP32[$96 >> 2] = $22; //@line 15586
 $97 = $ReallocAsyncCtx8 + 44 | 0; //@line 15587
 HEAP32[$97 >> 2] = $24; //@line 15588
 $98 = $ReallocAsyncCtx8 + 48 | 0; //@line 15589
 HEAP8[$98 >> 0] = $26; //@line 15590
 $99 = $ReallocAsyncCtx8 + 52 | 0; //@line 15591
 HEAP32[$99 >> 2] = $2; //@line 15592
 $100 = $ReallocAsyncCtx8 + 56 | 0; //@line 15593
 HEAP32[$100 >> 2] = $28; //@line 15594
 $101 = $ReallocAsyncCtx8 + 60 | 0; //@line 15595
 HEAP32[$101 >> 2] = $30; //@line 15596
 $102 = $ReallocAsyncCtx8 + 64 | 0; //@line 15597
 HEAP32[$102 >> 2] = $32; //@line 15598
 $103 = $ReallocAsyncCtx8 + 68 | 0; //@line 15599
 HEAP32[$103 >> 2] = $34; //@line 15600
 $104 = $ReallocAsyncCtx8 + 72 | 0; //@line 15601
 HEAP32[$104 >> 2] = $36; //@line 15602
 $105 = $ReallocAsyncCtx8 + 76 | 0; //@line 15603
 HEAP32[$105 >> 2] = $38; //@line 15604
 sp = STACKTOP; //@line 15605
 STACKTOP = sp; //@line 15606
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_67($0) {
 $0 = $0 | 0;
 var $$019$i$3 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15044
 STACKTOP = STACKTOP + 32 | 0; //@line 15045
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15045
 $$byval_copy = sp; //@line 15046
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15048
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15050
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15052
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15054
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15056
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15058
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15060
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15062
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15064
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15066
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15068
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 15070
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15072
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15074
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15076
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15078
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15080
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15082
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15084
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(80) | 0; //@line 15089
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $2, 512) | 0; //@line 15090
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 15093
   $42 = $ReallocAsyncCtx3 + 4 | 0; //@line 15094
   HEAP32[$42 >> 2] = $2; //@line 15095
   $43 = $ReallocAsyncCtx3 + 8 | 0; //@line 15096
   HEAP32[$43 >> 2] = $4; //@line 15097
   $44 = $ReallocAsyncCtx3 + 12 | 0; //@line 15098
   HEAP32[$44 >> 2] = $6; //@line 15099
   $45 = $ReallocAsyncCtx3 + 16 | 0; //@line 15100
   HEAP32[$45 >> 2] = $8; //@line 15101
   $46 = $ReallocAsyncCtx3 + 20 | 0; //@line 15102
   HEAP32[$46 >> 2] = $10; //@line 15103
   $47 = $ReallocAsyncCtx3 + 24 | 0; //@line 15104
   HEAP32[$47 >> 2] = $12; //@line 15105
   $48 = $ReallocAsyncCtx3 + 28 | 0; //@line 15106
   HEAP32[$48 >> 2] = $14; //@line 15107
   $49 = $ReallocAsyncCtx3 + 32 | 0; //@line 15108
   HEAP32[$49 >> 2] = $16; //@line 15109
   $50 = $ReallocAsyncCtx3 + 36 | 0; //@line 15110
   HEAP32[$50 >> 2] = $18; //@line 15111
   $51 = $ReallocAsyncCtx3 + 40 | 0; //@line 15112
   HEAP32[$51 >> 2] = $20; //@line 15113
   $52 = $ReallocAsyncCtx3 + 44 | 0; //@line 15114
   HEAP32[$52 >> 2] = $22; //@line 15115
   $53 = $ReallocAsyncCtx3 + 48 | 0; //@line 15116
   HEAP8[$53 >> 0] = $24; //@line 15117
   $54 = $ReallocAsyncCtx3 + 52 | 0; //@line 15118
   HEAP32[$54 >> 2] = $26; //@line 15119
   $55 = $ReallocAsyncCtx3 + 56 | 0; //@line 15120
   HEAP32[$55 >> 2] = $28; //@line 15121
   $56 = $ReallocAsyncCtx3 + 60 | 0; //@line 15122
   HEAP32[$56 >> 2] = $30; //@line 15123
   $57 = $ReallocAsyncCtx3 + 64 | 0; //@line 15124
   HEAP32[$57 >> 2] = $32; //@line 15125
   $58 = $ReallocAsyncCtx3 + 68 | 0; //@line 15126
   HEAP32[$58 >> 2] = $34; //@line 15127
   $59 = $ReallocAsyncCtx3 + 72 | 0; //@line 15128
   HEAP32[$59 >> 2] = $36; //@line 15129
   $60 = $ReallocAsyncCtx3 + 76 | 0; //@line 15130
   HEAP32[$60 >> 2] = $38; //@line 15131
   sp = STACKTOP; //@line 15132
   STACKTOP = sp; //@line 15133
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 15136
  ___async_unwind = 0; //@line 15137
  HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 15138
  $42 = $ReallocAsyncCtx3 + 4 | 0; //@line 15139
  HEAP32[$42 >> 2] = $2; //@line 15140
  $43 = $ReallocAsyncCtx3 + 8 | 0; //@line 15141
  HEAP32[$43 >> 2] = $4; //@line 15142
  $44 = $ReallocAsyncCtx3 + 12 | 0; //@line 15143
  HEAP32[$44 >> 2] = $6; //@line 15144
  $45 = $ReallocAsyncCtx3 + 16 | 0; //@line 15145
  HEAP32[$45 >> 2] = $8; //@line 15146
  $46 = $ReallocAsyncCtx3 + 20 | 0; //@line 15147
  HEAP32[$46 >> 2] = $10; //@line 15148
  $47 = $ReallocAsyncCtx3 + 24 | 0; //@line 15149
  HEAP32[$47 >> 2] = $12; //@line 15150
  $48 = $ReallocAsyncCtx3 + 28 | 0; //@line 15151
  HEAP32[$48 >> 2] = $14; //@line 15152
  $49 = $ReallocAsyncCtx3 + 32 | 0; //@line 15153
  HEAP32[$49 >> 2] = $16; //@line 15154
  $50 = $ReallocAsyncCtx3 + 36 | 0; //@line 15155
  HEAP32[$50 >> 2] = $18; //@line 15156
  $51 = $ReallocAsyncCtx3 + 40 | 0; //@line 15157
  HEAP32[$51 >> 2] = $20; //@line 15158
  $52 = $ReallocAsyncCtx3 + 44 | 0; //@line 15159
  HEAP32[$52 >> 2] = $22; //@line 15160
  $53 = $ReallocAsyncCtx3 + 48 | 0; //@line 15161
  HEAP8[$53 >> 0] = $24; //@line 15162
  $54 = $ReallocAsyncCtx3 + 52 | 0; //@line 15163
  HEAP32[$54 >> 2] = $26; //@line 15164
  $55 = $ReallocAsyncCtx3 + 56 | 0; //@line 15165
  HEAP32[$55 >> 2] = $28; //@line 15166
  $56 = $ReallocAsyncCtx3 + 60 | 0; //@line 15167
  HEAP32[$56 >> 2] = $30; //@line 15168
  $57 = $ReallocAsyncCtx3 + 64 | 0; //@line 15169
  HEAP32[$57 >> 2] = $32; //@line 15170
  $58 = $ReallocAsyncCtx3 + 68 | 0; //@line 15171
  HEAP32[$58 >> 2] = $34; //@line 15172
  $59 = $ReallocAsyncCtx3 + 72 | 0; //@line 15173
  HEAP32[$59 >> 2] = $36; //@line 15174
  $60 = $ReallocAsyncCtx3 + 76 | 0; //@line 15175
  HEAP32[$60 >> 2] = $38; //@line 15176
  sp = STACKTOP; //@line 15177
  STACKTOP = sp; //@line 15178
  return;
 }
 HEAP8[$2 >> 0] = 0; //@line 15180
 HEAP8[$4 >> 0] = 1; //@line 15181
 HEAP8[$6 >> 0] = 1; //@line 15182
 HEAP8[$8 >> 0] = 0; //@line 15183
 HEAP8[$10 >> 0] = 0; //@line 15184
 HEAP8[$12 >> 0] = 1; //@line 15185
 HEAP8[$14 >> 0] = 0; //@line 15186
 HEAP8[$14 + 1 >> 0] = 0; //@line 15186
 HEAP8[$14 + 2 >> 0] = 0; //@line 15186
 HEAP8[$14 + 3 >> 0] = 0; //@line 15186
 HEAP8[$14 + 4 >> 0] = 0; //@line 15186
 HEAP8[$14 + 5 >> 0] = 0; //@line 15186
 if (!(HEAP8[$32 >> 0] | 0)) {
  $79 = $22; //@line 15190
 } else {
  $$019$i$3 = $32; //@line 15192
  $67 = $22; //@line 15192
  while (1) {
   $64 = _strcspn($$019$i$3, 7214) | 0; //@line 15194
   $66 = $67 + 1 | 0; //@line 15196
   HEAP8[$67 >> 0] = $64; //@line 15197
   $68 = $64 & 255; //@line 15198
   _memcpy($66 | 0, $$019$i$3 | 0, $68 | 0) | 0; //@line 15199
   $69 = $66 + $68 | 0; //@line 15200
   $$019$i$3 = $$019$i$3 + ($64 + ((HEAP8[$$019$i$3 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 15206
   if (!(HEAP8[$$019$i$3 >> 0] | 0)) {
    $79 = $69; //@line 15210
    break;
   } else {
    $67 = $69; //@line 15213
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 15218
 HEAP8[$79 + 1 >> 0] = 0; //@line 15220
 HEAP8[$79 + 2 >> 0] = $24; //@line 15222
 HEAP8[$79 + 3 >> 0] = 0; //@line 15224
 HEAP8[$79 + 4 >> 0] = 1; //@line 15225
 HEAP32[$$byval_copy >> 2] = HEAP32[145]; //@line 15226
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[146]; //@line 15226
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[147]; //@line 15226
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[148]; //@line 15226
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[149]; //@line 15226
 __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 53); //@line 15227
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(80) | 0; //@line 15231
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $28, $2, $79 + 5 - $30 | 0) | 0; //@line 15232
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 15235
  $87 = $ReallocAsyncCtx7 + 4 | 0; //@line 15236
  HEAP32[$87 >> 2] = $2; //@line 15237
  $88 = $ReallocAsyncCtx7 + 8 | 0; //@line 15238
  HEAP32[$88 >> 2] = $4; //@line 15239
  $89 = $ReallocAsyncCtx7 + 12 | 0; //@line 15240
  HEAP32[$89 >> 2] = $6; //@line 15241
  $90 = $ReallocAsyncCtx7 + 16 | 0; //@line 15242
  HEAP32[$90 >> 2] = $8; //@line 15243
  $91 = $ReallocAsyncCtx7 + 20 | 0; //@line 15244
  HEAP32[$91 >> 2] = $10; //@line 15245
  $92 = $ReallocAsyncCtx7 + 24 | 0; //@line 15246
  HEAP32[$92 >> 2] = $12; //@line 15247
  $93 = $ReallocAsyncCtx7 + 28 | 0; //@line 15248
  HEAP32[$93 >> 2] = $14; //@line 15249
  $94 = $ReallocAsyncCtx7 + 32 | 0; //@line 15250
  HEAP32[$94 >> 2] = $16; //@line 15251
  $95 = $ReallocAsyncCtx7 + 36 | 0; //@line 15252
  HEAP32[$95 >> 2] = $18; //@line 15253
  $96 = $ReallocAsyncCtx7 + 40 | 0; //@line 15254
  HEAP32[$96 >> 2] = $20; //@line 15255
  $97 = $ReallocAsyncCtx7 + 44 | 0; //@line 15256
  HEAP32[$97 >> 2] = $22; //@line 15257
  $98 = $ReallocAsyncCtx7 + 48 | 0; //@line 15258
  HEAP8[$98 >> 0] = $24; //@line 15259
  $99 = $ReallocAsyncCtx7 + 52 | 0; //@line 15260
  HEAP32[$99 >> 2] = $26; //@line 15261
  $100 = $ReallocAsyncCtx7 + 56 | 0; //@line 15262
  HEAP32[$100 >> 2] = $28; //@line 15263
  $101 = $ReallocAsyncCtx7 + 60 | 0; //@line 15264
  HEAP32[$101 >> 2] = $30; //@line 15265
  $102 = $ReallocAsyncCtx7 + 64 | 0; //@line 15266
  HEAP32[$102 >> 2] = $32; //@line 15267
  $103 = $ReallocAsyncCtx7 + 68 | 0; //@line 15268
  HEAP32[$103 >> 2] = $34; //@line 15269
  $104 = $ReallocAsyncCtx7 + 72 | 0; //@line 15270
  HEAP32[$104 >> 2] = $36; //@line 15271
  $105 = $ReallocAsyncCtx7 + 76 | 0; //@line 15272
  HEAP32[$105 >> 2] = $38; //@line 15273
  sp = STACKTOP; //@line 15274
  STACKTOP = sp; //@line 15275
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 15278
 ___async_unwind = 0; //@line 15279
 HEAP32[$ReallocAsyncCtx7 >> 2] = 114; //@line 15280
 $87 = $ReallocAsyncCtx7 + 4 | 0; //@line 15281
 HEAP32[$87 >> 2] = $2; //@line 15282
 $88 = $ReallocAsyncCtx7 + 8 | 0; //@line 15283
 HEAP32[$88 >> 2] = $4; //@line 15284
 $89 = $ReallocAsyncCtx7 + 12 | 0; //@line 15285
 HEAP32[$89 >> 2] = $6; //@line 15286
 $90 = $ReallocAsyncCtx7 + 16 | 0; //@line 15287
 HEAP32[$90 >> 2] = $8; //@line 15288
 $91 = $ReallocAsyncCtx7 + 20 | 0; //@line 15289
 HEAP32[$91 >> 2] = $10; //@line 15290
 $92 = $ReallocAsyncCtx7 + 24 | 0; //@line 15291
 HEAP32[$92 >> 2] = $12; //@line 15292
 $93 = $ReallocAsyncCtx7 + 28 | 0; //@line 15293
 HEAP32[$93 >> 2] = $14; //@line 15294
 $94 = $ReallocAsyncCtx7 + 32 | 0; //@line 15295
 HEAP32[$94 >> 2] = $16; //@line 15296
 $95 = $ReallocAsyncCtx7 + 36 | 0; //@line 15297
 HEAP32[$95 >> 2] = $18; //@line 15298
 $96 = $ReallocAsyncCtx7 + 40 | 0; //@line 15299
 HEAP32[$96 >> 2] = $20; //@line 15300
 $97 = $ReallocAsyncCtx7 + 44 | 0; //@line 15301
 HEAP32[$97 >> 2] = $22; //@line 15302
 $98 = $ReallocAsyncCtx7 + 48 | 0; //@line 15303
 HEAP8[$98 >> 0] = $24; //@line 15304
 $99 = $ReallocAsyncCtx7 + 52 | 0; //@line 15305
 HEAP32[$99 >> 2] = $26; //@line 15306
 $100 = $ReallocAsyncCtx7 + 56 | 0; //@line 15307
 HEAP32[$100 >> 2] = $28; //@line 15308
 $101 = $ReallocAsyncCtx7 + 60 | 0; //@line 15309
 HEAP32[$101 >> 2] = $30; //@line 15310
 $102 = $ReallocAsyncCtx7 + 64 | 0; //@line 15311
 HEAP32[$102 >> 2] = $32; //@line 15312
 $103 = $ReallocAsyncCtx7 + 68 | 0; //@line 15313
 HEAP32[$103 >> 2] = $34; //@line 15314
 $104 = $ReallocAsyncCtx7 + 72 | 0; //@line 15315
 HEAP32[$104 >> 2] = $36; //@line 15316
 $105 = $ReallocAsyncCtx7 + 76 | 0; //@line 15317
 HEAP32[$105 >> 2] = $38; //@line 15318
 sp = STACKTOP; //@line 15319
 STACKTOP = sp; //@line 15320
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_66($0) {
 $0 = $0 | 0;
 var $$019$i$4 = 0, $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $79 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14774
 STACKTOP = STACKTOP + 32 | 0; //@line 14775
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14775
 $$byval_copy = sp; //@line 14776
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14778
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14780
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14782
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14784
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14786
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14788
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14790
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14792
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14794
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14796
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14798
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 14800
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14802
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14804
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14806
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14808
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14810
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14812
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14814
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(80) | 0; //@line 14819
  $41 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $2, 512) | 0; //@line 14820
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 14823
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 14824
   HEAP32[$42 >> 2] = $2; //@line 14825
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 14826
   HEAP32[$43 >> 2] = $4; //@line 14827
   $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 14828
   HEAP32[$44 >> 2] = $6; //@line 14829
   $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 14830
   HEAP32[$45 >> 2] = $8; //@line 14831
   $46 = $ReallocAsyncCtx2 + 20 | 0; //@line 14832
   HEAP32[$46 >> 2] = $10; //@line 14833
   $47 = $ReallocAsyncCtx2 + 24 | 0; //@line 14834
   HEAP32[$47 >> 2] = $12; //@line 14835
   $48 = $ReallocAsyncCtx2 + 28 | 0; //@line 14836
   HEAP32[$48 >> 2] = $14; //@line 14837
   $49 = $ReallocAsyncCtx2 + 32 | 0; //@line 14838
   HEAP32[$49 >> 2] = $16; //@line 14839
   $50 = $ReallocAsyncCtx2 + 36 | 0; //@line 14840
   HEAP32[$50 >> 2] = $18; //@line 14841
   $51 = $ReallocAsyncCtx2 + 40 | 0; //@line 14842
   HEAP32[$51 >> 2] = $20; //@line 14843
   $52 = $ReallocAsyncCtx2 + 44 | 0; //@line 14844
   HEAP32[$52 >> 2] = $22; //@line 14845
   $53 = $ReallocAsyncCtx2 + 48 | 0; //@line 14846
   HEAP8[$53 >> 0] = $24; //@line 14847
   $54 = $ReallocAsyncCtx2 + 52 | 0; //@line 14848
   HEAP32[$54 >> 2] = $26; //@line 14849
   $55 = $ReallocAsyncCtx2 + 56 | 0; //@line 14850
   HEAP32[$55 >> 2] = $28; //@line 14851
   $56 = $ReallocAsyncCtx2 + 60 | 0; //@line 14852
   HEAP32[$56 >> 2] = $30; //@line 14853
   $57 = $ReallocAsyncCtx2 + 64 | 0; //@line 14854
   HEAP32[$57 >> 2] = $32; //@line 14855
   $58 = $ReallocAsyncCtx2 + 68 | 0; //@line 14856
   HEAP32[$58 >> 2] = $34; //@line 14857
   $59 = $ReallocAsyncCtx2 + 72 | 0; //@line 14858
   HEAP32[$59 >> 2] = $36; //@line 14859
   $60 = $ReallocAsyncCtx2 + 76 | 0; //@line 14860
   HEAP32[$60 >> 2] = $38; //@line 14861
   sp = STACKTOP; //@line 14862
   STACKTOP = sp; //@line 14863
   return;
  }
  HEAP32[___async_retval >> 2] = $41; //@line 14866
  ___async_unwind = 0; //@line 14867
  HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 14868
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 14869
  HEAP32[$42 >> 2] = $2; //@line 14870
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 14871
  HEAP32[$43 >> 2] = $4; //@line 14872
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 14873
  HEAP32[$44 >> 2] = $6; //@line 14874
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 14875
  HEAP32[$45 >> 2] = $8; //@line 14876
  $46 = $ReallocAsyncCtx2 + 20 | 0; //@line 14877
  HEAP32[$46 >> 2] = $10; //@line 14878
  $47 = $ReallocAsyncCtx2 + 24 | 0; //@line 14879
  HEAP32[$47 >> 2] = $12; //@line 14880
  $48 = $ReallocAsyncCtx2 + 28 | 0; //@line 14881
  HEAP32[$48 >> 2] = $14; //@line 14882
  $49 = $ReallocAsyncCtx2 + 32 | 0; //@line 14883
  HEAP32[$49 >> 2] = $16; //@line 14884
  $50 = $ReallocAsyncCtx2 + 36 | 0; //@line 14885
  HEAP32[$50 >> 2] = $18; //@line 14886
  $51 = $ReallocAsyncCtx2 + 40 | 0; //@line 14887
  HEAP32[$51 >> 2] = $20; //@line 14888
  $52 = $ReallocAsyncCtx2 + 44 | 0; //@line 14889
  HEAP32[$52 >> 2] = $22; //@line 14890
  $53 = $ReallocAsyncCtx2 + 48 | 0; //@line 14891
  HEAP8[$53 >> 0] = $24; //@line 14892
  $54 = $ReallocAsyncCtx2 + 52 | 0; //@line 14893
  HEAP32[$54 >> 2] = $26; //@line 14894
  $55 = $ReallocAsyncCtx2 + 56 | 0; //@line 14895
  HEAP32[$55 >> 2] = $28; //@line 14896
  $56 = $ReallocAsyncCtx2 + 60 | 0; //@line 14897
  HEAP32[$56 >> 2] = $30; //@line 14898
  $57 = $ReallocAsyncCtx2 + 64 | 0; //@line 14899
  HEAP32[$57 >> 2] = $32; //@line 14900
  $58 = $ReallocAsyncCtx2 + 68 | 0; //@line 14901
  HEAP32[$58 >> 2] = $34; //@line 14902
  $59 = $ReallocAsyncCtx2 + 72 | 0; //@line 14903
  HEAP32[$59 >> 2] = $36; //@line 14904
  $60 = $ReallocAsyncCtx2 + 76 | 0; //@line 14905
  HEAP32[$60 >> 2] = $38; //@line 14906
  sp = STACKTOP; //@line 14907
  STACKTOP = sp; //@line 14908
  return;
 }
 HEAP8[$2 >> 0] = 0; //@line 14910
 HEAP8[$4 >> 0] = 1; //@line 14911
 HEAP8[$6 >> 0] = 1; //@line 14912
 HEAP8[$8 >> 0] = 0; //@line 14913
 HEAP8[$10 >> 0] = 0; //@line 14914
 HEAP8[$12 >> 0] = 1; //@line 14915
 HEAP8[$14 >> 0] = 0; //@line 14916
 HEAP8[$14 + 1 >> 0] = 0; //@line 14916
 HEAP8[$14 + 2 >> 0] = 0; //@line 14916
 HEAP8[$14 + 3 >> 0] = 0; //@line 14916
 HEAP8[$14 + 4 >> 0] = 0; //@line 14916
 HEAP8[$14 + 5 >> 0] = 0; //@line 14916
 if (!(HEAP8[$32 >> 0] | 0)) {
  $79 = $22; //@line 14920
 } else {
  $$019$i$4 = $32; //@line 14922
  $67 = $22; //@line 14922
  while (1) {
   $64 = _strcspn($$019$i$4, 7214) | 0; //@line 14924
   $66 = $67 + 1 | 0; //@line 14926
   HEAP8[$67 >> 0] = $64; //@line 14927
   $68 = $64 & 255; //@line 14928
   _memcpy($66 | 0, $$019$i$4 | 0, $68 | 0) | 0; //@line 14929
   $69 = $66 + $68 | 0; //@line 14930
   $$019$i$4 = $$019$i$4 + ($64 + ((HEAP8[$$019$i$4 + $64 >> 0] | 0) == 46 & 1)) | 0; //@line 14936
   if (!(HEAP8[$$019$i$4 >> 0] | 0)) {
    $79 = $69; //@line 14940
    break;
   } else {
    $67 = $69; //@line 14943
   }
  }
 }
 HEAP8[$79 >> 0] = 0; //@line 14948
 HEAP8[$79 + 1 >> 0] = 0; //@line 14950
 HEAP8[$79 + 2 >> 0] = $24; //@line 14952
 HEAP8[$79 + 3 >> 0] = 0; //@line 14954
 HEAP8[$79 + 4 >> 0] = 1; //@line 14955
 HEAP32[$$byval_copy >> 2] = HEAP32[150]; //@line 14956
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[151]; //@line 14956
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[152]; //@line 14956
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[153]; //@line 14956
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[154]; //@line 14956
 __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 53); //@line 14957
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 14961
 $86 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $28, $2, $79 + 5 - $30 | 0) | 0; //@line 14962
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 116; //@line 14965
  $87 = $ReallocAsyncCtx6 + 4 | 0; //@line 14966
  HEAP32[$87 >> 2] = $2; //@line 14967
  $88 = $ReallocAsyncCtx6 + 8 | 0; //@line 14968
  HEAP32[$88 >> 2] = $4; //@line 14969
  $89 = $ReallocAsyncCtx6 + 12 | 0; //@line 14970
  HEAP32[$89 >> 2] = $6; //@line 14971
  $90 = $ReallocAsyncCtx6 + 16 | 0; //@line 14972
  HEAP32[$90 >> 2] = $8; //@line 14973
  $91 = $ReallocAsyncCtx6 + 20 | 0; //@line 14974
  HEAP32[$91 >> 2] = $10; //@line 14975
  $92 = $ReallocAsyncCtx6 + 24 | 0; //@line 14976
  HEAP32[$92 >> 2] = $12; //@line 14977
  $93 = $ReallocAsyncCtx6 + 28 | 0; //@line 14978
  HEAP32[$93 >> 2] = $14; //@line 14979
  $94 = $ReallocAsyncCtx6 + 32 | 0; //@line 14980
  HEAP32[$94 >> 2] = $16; //@line 14981
  $95 = $ReallocAsyncCtx6 + 36 | 0; //@line 14982
  HEAP32[$95 >> 2] = $18; //@line 14983
  $96 = $ReallocAsyncCtx6 + 40 | 0; //@line 14984
  HEAP32[$96 >> 2] = $20; //@line 14985
  $97 = $ReallocAsyncCtx6 + 44 | 0; //@line 14986
  HEAP32[$97 >> 2] = $34; //@line 14987
  $98 = $ReallocAsyncCtx6 + 48 | 0; //@line 14988
  HEAP32[$98 >> 2] = $36; //@line 14989
  $99 = $ReallocAsyncCtx6 + 52 | 0; //@line 14990
  HEAP32[$99 >> 2] = $22; //@line 14991
  $100 = $ReallocAsyncCtx6 + 56 | 0; //@line 14992
  HEAP32[$100 >> 2] = $38; //@line 14993
  $101 = $ReallocAsyncCtx6 + 60 | 0; //@line 14994
  HEAP32[$101 >> 2] = $26; //@line 14995
  sp = STACKTOP; //@line 14996
  STACKTOP = sp; //@line 14997
  return;
 }
 HEAP32[___async_retval >> 2] = $86; //@line 15000
 ___async_unwind = 0; //@line 15001
 HEAP32[$ReallocAsyncCtx6 >> 2] = 116; //@line 15002
 $87 = $ReallocAsyncCtx6 + 4 | 0; //@line 15003
 HEAP32[$87 >> 2] = $2; //@line 15004
 $88 = $ReallocAsyncCtx6 + 8 | 0; //@line 15005
 HEAP32[$88 >> 2] = $4; //@line 15006
 $89 = $ReallocAsyncCtx6 + 12 | 0; //@line 15007
 HEAP32[$89 >> 2] = $6; //@line 15008
 $90 = $ReallocAsyncCtx6 + 16 | 0; //@line 15009
 HEAP32[$90 >> 2] = $8; //@line 15010
 $91 = $ReallocAsyncCtx6 + 20 | 0; //@line 15011
 HEAP32[$91 >> 2] = $10; //@line 15012
 $92 = $ReallocAsyncCtx6 + 24 | 0; //@line 15013
 HEAP32[$92 >> 2] = $12; //@line 15014
 $93 = $ReallocAsyncCtx6 + 28 | 0; //@line 15015
 HEAP32[$93 >> 2] = $14; //@line 15016
 $94 = $ReallocAsyncCtx6 + 32 | 0; //@line 15017
 HEAP32[$94 >> 2] = $16; //@line 15018
 $95 = $ReallocAsyncCtx6 + 36 | 0; //@line 15019
 HEAP32[$95 >> 2] = $18; //@line 15020
 $96 = $ReallocAsyncCtx6 + 40 | 0; //@line 15021
 HEAP32[$96 >> 2] = $20; //@line 15022
 $97 = $ReallocAsyncCtx6 + 44 | 0; //@line 15023
 HEAP32[$97 >> 2] = $34; //@line 15024
 $98 = $ReallocAsyncCtx6 + 48 | 0; //@line 15025
 HEAP32[$98 >> 2] = $36; //@line 15026
 $99 = $ReallocAsyncCtx6 + 52 | 0; //@line 15027
 HEAP32[$99 >> 2] = $22; //@line 15028
 $100 = $ReallocAsyncCtx6 + 56 | 0; //@line 15029
 HEAP32[$100 >> 2] = $38; //@line 15030
 $101 = $ReallocAsyncCtx6 + 60 | 0; //@line 15031
 HEAP32[$101 >> 2] = $26; //@line 15032
 sp = STACKTOP; //@line 15033
 STACKTOP = sp; //@line 15034
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 4091
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 4092
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 4093
 $d_sroa_0_0_extract_trunc = $b$0; //@line 4094
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 4095
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 4096
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 4098
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 4101
    HEAP32[$rem + 4 >> 2] = 0; //@line 4102
   }
   $_0$1 = 0; //@line 4104
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 4105
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4106
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 4109
    $_0$0 = 0; //@line 4110
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4111
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 4113
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 4114
   $_0$1 = 0; //@line 4115
   $_0$0 = 0; //@line 4116
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4117
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 4120
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 4125
     HEAP32[$rem + 4 >> 2] = 0; //@line 4126
    }
    $_0$1 = 0; //@line 4128
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 4129
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4130
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 4134
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 4135
    }
    $_0$1 = 0; //@line 4137
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 4138
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4139
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 4141
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 4144
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 4145
    }
    $_0$1 = 0; //@line 4147
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 4148
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4149
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 4152
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 4154
    $58 = 31 - $51 | 0; //@line 4155
    $sr_1_ph = $57; //@line 4156
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 4157
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 4158
    $q_sroa_0_1_ph = 0; //@line 4159
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 4160
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 4164
    $_0$0 = 0; //@line 4165
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4166
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 4168
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 4169
   $_0$1 = 0; //@line 4170
   $_0$0 = 0; //@line 4171
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4172
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 4176
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 4178
     $126 = 31 - $119 | 0; //@line 4179
     $130 = $119 - 31 >> 31; //@line 4180
     $sr_1_ph = $125; //@line 4181
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 4182
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 4183
     $q_sroa_0_1_ph = 0; //@line 4184
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 4185
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 4189
     $_0$0 = 0; //@line 4190
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4191
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 4193
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 4194
    $_0$1 = 0; //@line 4195
    $_0$0 = 0; //@line 4196
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4197
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 4199
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 4202
    $89 = 64 - $88 | 0; //@line 4203
    $91 = 32 - $88 | 0; //@line 4204
    $92 = $91 >> 31; //@line 4205
    $95 = $88 - 32 | 0; //@line 4206
    $105 = $95 >> 31; //@line 4207
    $sr_1_ph = $88; //@line 4208
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 4209
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 4210
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 4211
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 4212
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 4216
    HEAP32[$rem + 4 >> 2] = 0; //@line 4217
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 4220
    $_0$0 = $a$0 | 0 | 0; //@line 4221
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4222
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 4224
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 4225
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 4226
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4227
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 4232
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 4233
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 4234
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 4235
  $carry_0_lcssa$1 = 0; //@line 4236
  $carry_0_lcssa$0 = 0; //@line 4237
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 4239
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 4240
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 4241
  $137$1 = tempRet0; //@line 4242
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 4243
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 4244
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 4245
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 4246
  $sr_1202 = $sr_1_ph; //@line 4247
  $carry_0203 = 0; //@line 4248
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 4250
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 4251
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 4252
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 4253
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 4254
   $150$1 = tempRet0; //@line 4255
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 4256
   $carry_0203 = $151$0 & 1; //@line 4257
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 4259
   $r_sroa_1_1200 = tempRet0; //@line 4260
   $sr_1202 = $sr_1202 - 1 | 0; //@line 4261
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 4273
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 4274
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 4275
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 4276
  $carry_0_lcssa$1 = 0; //@line 4277
  $carry_0_lcssa$0 = $carry_0203; //@line 4278
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 4280
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 4281
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 4284
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 4285
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 4287
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 4288
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 4289
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6624
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 6630
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 6639
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 6644
      $19 = $1 + 44 | 0; //@line 6645
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 6654
      $26 = $1 + 52 | 0; //@line 6655
      $27 = $1 + 53 | 0; //@line 6656
      $28 = $1 + 54 | 0; //@line 6657
      $29 = $0 + 8 | 0; //@line 6658
      $30 = $1 + 24 | 0; //@line 6659
      $$081$off0 = 0; //@line 6660
      $$084 = $0 + 16 | 0; //@line 6660
      $$085$off0 = 0; //@line 6660
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 6664
        label = 20; //@line 6665
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 6668
       HEAP8[$27 >> 0] = 0; //@line 6669
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 6670
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 6671
       if (___async) {
        label = 12; //@line 6674
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6677
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 6681
        label = 20; //@line 6682
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 6689
         $$186$off0 = $$085$off0; //@line 6689
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 6698
           label = 20; //@line 6699
           break L10;
          } else {
           $$182$off0 = 1; //@line 6702
           $$186$off0 = $$085$off0; //@line 6702
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 6709
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 6716
          break L10;
         } else {
          $$182$off0 = 1; //@line 6719
          $$186$off0 = 1; //@line 6719
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 6724
       $$084 = $$084 + 8 | 0; //@line 6724
       $$085$off0 = $$186$off0; //@line 6724
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 196; //@line 6727
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 6729
       HEAP32[$AsyncCtx15 + 8 >> 2] = $26; //@line 6731
       HEAP32[$AsyncCtx15 + 12 >> 2] = $27; //@line 6733
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 6735
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 6737
       HEAP8[$AsyncCtx15 + 24 >> 0] = $4 & 1; //@line 6740
       HEAP32[$AsyncCtx15 + 28 >> 2] = $25; //@line 6742
       HEAP32[$AsyncCtx15 + 32 >> 2] = $29; //@line 6744
       HEAP32[$AsyncCtx15 + 36 >> 2] = $30; //@line 6746
       HEAP8[$AsyncCtx15 + 40 >> 0] = $$081$off0 & 1; //@line 6749
       HEAP8[$AsyncCtx15 + 41 >> 0] = $$085$off0 & 1; //@line 6752
       HEAP32[$AsyncCtx15 + 44 >> 2] = $13; //@line 6754
       HEAP32[$AsyncCtx15 + 48 >> 2] = $$084; //@line 6756
       HEAP32[$AsyncCtx15 + 52 >> 2] = $19; //@line 6758
       sp = STACKTOP; //@line 6759
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 6765
         $61 = $1 + 40 | 0; //@line 6766
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 6769
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 6777
           if ($$283$off0) {
            label = 25; //@line 6779
            break;
           } else {
            $69 = 4; //@line 6782
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 6789
        } else {
         $69 = 4; //@line 6791
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 6796
      }
      HEAP32[$19 >> 2] = $69; //@line 6798
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 6807
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 6812
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 6813
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6814
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 6815
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 197; //@line 6818
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 6820
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 6822
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 6824
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 6827
    HEAP32[$AsyncCtx11 + 20 >> 2] = $73; //@line 6829
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 6831
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 6833
    sp = STACKTOP; //@line 6834
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6837
   $81 = $0 + 24 | 0; //@line 6838
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 6842
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 6846
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 6853
       $$2 = $81; //@line 6854
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 6866
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 6867
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 6872
        $136 = $$2 + 8 | 0; //@line 6873
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 6876
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 200; //@line 6881
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 6883
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 6885
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 6887
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 6889
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6891
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6893
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 6895
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 6898
       sp = STACKTOP; //@line 6899
       return;
      }
      $104 = $1 + 24 | 0; //@line 6902
      $105 = $1 + 54 | 0; //@line 6903
      $$1 = $81; //@line 6904
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6920
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 6921
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6926
       $122 = $$1 + 8 | 0; //@line 6927
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 6930
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 199; //@line 6935
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 6937
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 6939
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 6941
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 6943
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 6945
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 6947
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 6949
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 6951
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 6954
      sp = STACKTOP; //@line 6955
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 6959
    $$0 = $81; //@line 6960
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6967
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 6968
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6973
     $100 = $$0 + 8 | 0; //@line 6974
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 6977
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 198; //@line 6982
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 6984
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 6986
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 6988
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 6990
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 6992
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 6994
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 6997
    sp = STACKTOP; //@line 6998
    return;
   }
  }
 } while (0);
 return;
}
function __Z17recv_coap_messagev() {
 var $$016$i$i = 0, $$017$i$i = 0, $$byval_copy = 0, $$pre$phi23Z2D = 0, $$pre22$pre$phiZZ2D = 0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $76 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12671
 STACKTOP = STACKTOP + 176 | 0; //@line 12672
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 12672
 $$byval_copy = sp + 144 | 0; //@line 12673
 $vararg_buffer19 = sp + 56 | 0; //@line 12674
 $vararg_buffer16 = sp + 48 | 0; //@line 12675
 $vararg_buffer13 = sp + 40 | 0; //@line 12676
 $vararg_buffer10 = sp + 32 | 0; //@line 12677
 $vararg_buffer7 = sp + 24 | 0; //@line 12678
 $vararg_buffer4 = sp + 16 | 0; //@line 12679
 $vararg_buffer1 = sp + 8 | 0; //@line 12680
 $vararg_buffer = sp; //@line 12681
 $0 = sp + 80 | 0; //@line 12682
 $1 = sp + 60 | 0; //@line 12683
 HEAP32[$1 >> 2] = 0; //@line 12684
 HEAP32[$1 + 4 >> 2] = 0; //@line 12684
 HEAP32[$1 + 8 >> 2] = 0; //@line 12684
 HEAP32[$1 + 12 >> 2] = 0; //@line 12684
 HEAP32[$1 + 16 >> 2] = 0; //@line 12684
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 12685
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12685
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 12685
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 12685
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 12685
 __ZN13SocketAddressC2E10nsapi_addrt($0, $$byval_copy, 0); //@line 12686
 $2 = _malloc(1280) | 0; //@line 12687
 $AsyncCtx23 = _emscripten_alloc_async_context(80, sp) | 0; //@line 12688
 $3 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj(9716, $0, $2, 1280) | 0; //@line 12689
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 148; //@line 12692
  HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 12694
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer; //@line 12696
  HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 12698
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer19; //@line 12700
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer19; //@line 12702
  HEAP32[$AsyncCtx23 + 24 >> 2] = $0; //@line 12704
  HEAP32[$AsyncCtx23 + 28 >> 2] = $$byval_copy; //@line 12706
  HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer1; //@line 12708
  HEAP32[$AsyncCtx23 + 36 >> 2] = $vararg_buffer1; //@line 12710
  HEAP32[$AsyncCtx23 + 40 >> 2] = $vararg_buffer4; //@line 12712
  HEAP32[$AsyncCtx23 + 44 >> 2] = $vararg_buffer4; //@line 12714
  HEAP32[$AsyncCtx23 + 48 >> 2] = $vararg_buffer7; //@line 12716
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer7; //@line 12718
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer10; //@line 12720
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 12722
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer13; //@line 12724
  HEAP32[$AsyncCtx23 + 68 >> 2] = $vararg_buffer13; //@line 12726
  HEAP32[$AsyncCtx23 + 72 >> 2] = $vararg_buffer16; //@line 12728
  HEAP32[$AsyncCtx23 + 76 >> 2] = $vararg_buffer16; //@line 12730
  sp = STACKTOP; //@line 12731
  STACKTOP = sp; //@line 12732
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12734
 if (($3 | 0) <= 0) {
  HEAP32[$vararg_buffer19 >> 2] = $3; //@line 12737
  _printf(6174, $vararg_buffer19) | 0; //@line 12738
  _free($2); //@line 12739
  STACKTOP = sp; //@line 12740
  return;
 }
 HEAP32[$vararg_buffer >> 2] = $3; //@line 12742
 _printf(6001, $vararg_buffer) | 0; //@line 12743
 $24 = HEAP32[2443] | 0; //@line 12744
 $AsyncCtx27 = _emscripten_alloc_async_context(64, sp) | 0; //@line 12746
 $26 = _sn_coap_parser($24, $3 & 65535, $2, 620) | 0; //@line 12747
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 149; //@line 12750
  HEAP32[$AsyncCtx27 + 4 >> 2] = $$byval_copy; //@line 12752
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 12754
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 12756
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer4; //@line 12758
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer4; //@line 12760
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer7; //@line 12762
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 12764
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer10; //@line 12766
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 12768
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer13; //@line 12770
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer13; //@line 12772
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer16; //@line 12774
  HEAP32[$AsyncCtx27 + 52 >> 2] = $vararg_buffer16; //@line 12776
  HEAP32[$AsyncCtx27 + 56 >> 2] = $2; //@line 12778
  HEAP32[$AsyncCtx27 + 60 >> 2] = $0; //@line 12780
  sp = STACKTOP; //@line 12781
  STACKTOP = sp; //@line 12782
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12784
 $43 = HEAP32[$26 + 36 >> 2] | 0; //@line 12786
 $44 = $26 + 24 | 0; //@line 12787
 $45 = HEAP16[$44 >> 1] | 0; //@line 12788
 $46 = $45 & 65535; //@line 12789
 HEAP32[$$byval_copy >> 2] = 0; //@line 12790
 HEAP32[$$byval_copy + 4 >> 2] = 0; //@line 12790
 HEAP32[$$byval_copy + 8 >> 2] = 0; //@line 12790
 do {
  if (($45 & 65535) < 11) {
   $76 = $$byval_copy + 11 | 0; //@line 12795
   HEAP8[$76 >> 0] = $45; //@line 12796
   if (!($45 << 16 >> 16)) {
    $$017$i$i = $$byval_copy; //@line 12799
    $$pre$phi23Z2D = $76; //@line 12799
   } else {
    $$016$i$i = $$byval_copy; //@line 12801
    $$pre22$pre$phiZZ2D = $76; //@line 12801
    label = 11; //@line 12802
   }
  } else {
   $49 = $46 + 16 & 131056; //@line 12806
   $AsyncCtx = _emscripten_alloc_async_context(88, sp) | 0; //@line 12807
   $50 = __Znwj($49) | 0; //@line 12808
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 150; //@line 12811
    HEAP32[$AsyncCtx + 4 >> 2] = $$byval_copy; //@line 12813
    HEAP32[$AsyncCtx + 8 >> 2] = $49; //@line 12815
    HEAP32[$AsyncCtx + 12 >> 2] = $46; //@line 12817
    HEAP32[$AsyncCtx + 16 >> 2] = $43; //@line 12819
    HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 12821
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 12823
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 12825
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer4; //@line 12827
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer4; //@line 12829
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer7; //@line 12831
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer7; //@line 12833
    HEAP32[$AsyncCtx + 48 >> 2] = $44; //@line 12835
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer10; //@line 12837
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer10; //@line 12839
    HEAP32[$AsyncCtx + 60 >> 2] = $$byval_copy; //@line 12841
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer13; //@line 12843
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer13; //@line 12845
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer16; //@line 12847
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer16; //@line 12849
    HEAP32[$AsyncCtx + 80 >> 2] = $2; //@line 12851
    HEAP32[$AsyncCtx + 84 >> 2] = $0; //@line 12853
    sp = STACKTOP; //@line 12854
    STACKTOP = sp; //@line 12855
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12857
    HEAP32[$$byval_copy >> 2] = $50; //@line 12858
    HEAP32[$$byval_copy + 8 >> 2] = $49 | -2147483648; //@line 12861
    HEAP32[$$byval_copy + 4 >> 2] = $46; //@line 12863
    $$016$i$i = $50; //@line 12865
    $$pre22$pre$phiZZ2D = $$byval_copy + 11 | 0; //@line 12865
    label = 11; //@line 12866
    break;
   }
  }
 } while (0);
 if ((label | 0) == 11) {
  _memcpy($$016$i$i | 0, $43 | 0, $46 | 0) | 0; //@line 12872
  $$017$i$i = $$016$i$i; //@line 12873
  $$pre$phi23Z2D = $$pre22$pre$phiZZ2D; //@line 12873
 }
 HEAP8[$$017$i$i + $46 >> 0] = 0; //@line 12876
 HEAP32[$vararg_buffer1 >> 2] = HEAPU16[$26 + 20 >> 1]; //@line 12880
 _printf(6036, $vararg_buffer1) | 0; //@line 12881
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 12884
 _printf(6059, $vararg_buffer4) | 0; //@line 12885
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 12888
 _printf(6082, $vararg_buffer7) | 0; //@line 12889
 HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$44 >> 1]; //@line 12892
 _printf(6105, $vararg_buffer10) | 0; //@line 12893
 HEAP32[$vararg_buffer13 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$$byval_copy >> 2] | 0 : $$byval_copy; //@line 12898
 _printf(6128, $vararg_buffer13) | 0; //@line 12899
 HEAP32[$vararg_buffer16 >> 2] = HEAP32[$26 + 40 >> 2]; //@line 12902
 _printf(6151, $vararg_buffer16) | 0; //@line 12903
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$$byval_copy >> 2] | 0); //@line 12908
 }
 _free($2); //@line 12910
 STACKTOP = sp; //@line 12911
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12009
 STACKTOP = STACKTOP + 32 | 0; //@line 12010
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12010
 $0 = sp; //@line 12011
 _gpio_init_out($0, 50); //@line 12012
 while (1) {
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12015
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12016
  _wait_ms(150); //@line 12017
  if (___async) {
   label = 3; //@line 12020
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12023
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12025
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12026
  _wait_ms(150); //@line 12027
  if (___async) {
   label = 5; //@line 12030
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12033
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12035
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12036
  _wait_ms(150); //@line 12037
  if (___async) {
   label = 7; //@line 12040
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12043
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12045
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12046
  _wait_ms(150); //@line 12047
  if (___async) {
   label = 9; //@line 12050
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12053
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12055
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12056
  _wait_ms(150); //@line 12057
  if (___async) {
   label = 11; //@line 12060
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12063
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12065
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12066
  _wait_ms(150); //@line 12067
  if (___async) {
   label = 13; //@line 12070
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12073
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12075
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12076
  _wait_ms(150); //@line 12077
  if (___async) {
   label = 15; //@line 12080
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 12083
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12085
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12086
  _wait_ms(150); //@line 12087
  if (___async) {
   label = 17; //@line 12090
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 12093
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12095
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12096
  _wait_ms(400); //@line 12097
  if (___async) {
   label = 19; //@line 12100
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12103
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12105
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12106
  _wait_ms(400); //@line 12107
  if (___async) {
   label = 21; //@line 12110
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12113
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12115
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12116
  _wait_ms(400); //@line 12117
  if (___async) {
   label = 23; //@line 12120
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12123
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12125
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12126
  _wait_ms(400); //@line 12127
  if (___async) {
   label = 25; //@line 12130
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12133
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12135
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12136
  _wait_ms(400); //@line 12137
  if (___async) {
   label = 27; //@line 12140
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12143
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12145
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12146
  _wait_ms(400); //@line 12147
  if (___async) {
   label = 29; //@line 12150
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12153
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12155
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12156
  _wait_ms(400); //@line 12157
  if (___async) {
   label = 31; //@line 12160
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12163
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12165
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12166
  _wait_ms(400); //@line 12167
  if (___async) {
   label = 33; //@line 12170
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12173
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 120; //@line 12177
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 12179
   sp = STACKTOP; //@line 12180
   STACKTOP = sp; //@line 12181
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 121; //@line 12185
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 12187
   sp = STACKTOP; //@line 12188
   STACKTOP = sp; //@line 12189
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 122; //@line 12193
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 12195
   sp = STACKTOP; //@line 12196
   STACKTOP = sp; //@line 12197
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 123; //@line 12201
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 12203
   sp = STACKTOP; //@line 12204
   STACKTOP = sp; //@line 12205
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 124; //@line 12209
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12211
   sp = STACKTOP; //@line 12212
   STACKTOP = sp; //@line 12213
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 125; //@line 12217
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 12219
   sp = STACKTOP; //@line 12220
   STACKTOP = sp; //@line 12221
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 126; //@line 12225
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 12227
   sp = STACKTOP; //@line 12228
   STACKTOP = sp; //@line 12229
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 127; //@line 12233
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 12235
   sp = STACKTOP; //@line 12236
   STACKTOP = sp; //@line 12237
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 128; //@line 12241
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 12243
   sp = STACKTOP; //@line 12244
   STACKTOP = sp; //@line 12245
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 129; //@line 12249
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12251
   sp = STACKTOP; //@line 12252
   STACKTOP = sp; //@line 12253
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 130; //@line 12257
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12259
   sp = STACKTOP; //@line 12260
   STACKTOP = sp; //@line 12261
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 131; //@line 12265
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12267
   sp = STACKTOP; //@line 12268
   STACKTOP = sp; //@line 12269
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 132; //@line 12273
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12275
   sp = STACKTOP; //@line 12276
   STACKTOP = sp; //@line 12277
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 133; //@line 12281
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12283
   sp = STACKTOP; //@line 12284
   STACKTOP = sp; //@line 12285
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 134; //@line 12289
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12291
   sp = STACKTOP; //@line 12292
   STACKTOP = sp; //@line 12293
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 135; //@line 12297
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12299
   sp = STACKTOP; //@line 12300
   STACKTOP = sp; //@line 12301
   return;
  }
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_72($0) {
 $0 = $0 | 0;
 var $$019$i = 0, $$2 = 0, $$byval_copy = 0, $$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $48 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 15941
 STACKTOP = STACKTOP + 32 | 0; //@line 15942
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15942
 $$byval_copy = sp; //@line 15943
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15945
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15947
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15949
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15951
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15953
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15955
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15957
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15959
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15961
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($8, 5e3); //@line 15964
  $19 = _malloc(512) | 0; //@line 15965
  if (!$19) {
   $$2 = -3007; //@line 15968
  } else {
   $21 = $19; //@line 15970
   $22 = $19 + 1 | 0; //@line 15971
   $23 = $19 + 2 | 0; //@line 15972
   $24 = $19 + 3 | 0; //@line 15973
   $25 = $19 + 4 | 0; //@line 15974
   $26 = $19 + 5 | 0; //@line 15975
   $27 = $19 + 6 | 0; //@line 15976
   $28 = $19 + 7 | 0; //@line 15977
   $29 = $19 + 12 | 0; //@line 15978
   $$sink$i = ($16 | 0) == 2 ? 28 : 1; //@line 15980
   HEAP8[$19 >> 0] = 0; //@line 15981
   HEAP8[$22 >> 0] = 1; //@line 15982
   HEAP8[$23 >> 0] = 1; //@line 15983
   HEAP8[$24 >> 0] = 0; //@line 15984
   HEAP8[$25 >> 0] = 0; //@line 15985
   HEAP8[$26 >> 0] = 1; //@line 15986
   HEAP8[$27 >> 0] = 0; //@line 15987
   HEAP8[$27 + 1 >> 0] = 0; //@line 15987
   HEAP8[$27 + 2 >> 0] = 0; //@line 15987
   HEAP8[$27 + 3 >> 0] = 0; //@line 15987
   HEAP8[$27 + 4 >> 0] = 0; //@line 15987
   HEAP8[$27 + 5 >> 0] = 0; //@line 15987
   if (!(HEAP8[$2 >> 0] | 0)) {
    $48 = $29; //@line 15991
   } else {
    $$019$i = $2; //@line 15993
    $36 = $29; //@line 15993
    while (1) {
     $33 = _strcspn($$019$i, 7214) | 0; //@line 15995
     $35 = $36 + 1 | 0; //@line 15997
     HEAP8[$36 >> 0] = $33; //@line 15998
     $37 = $33 & 255; //@line 15999
     _memcpy($35 | 0, $$019$i | 0, $37 | 0) | 0; //@line 16000
     $38 = $35 + $37 | 0; //@line 16001
     $$019$i = $$019$i + ($33 + ((HEAP8[$$019$i + $33 >> 0] | 0) == 46 & 1)) | 0; //@line 16007
     if (!(HEAP8[$$019$i >> 0] | 0)) {
      $48 = $38; //@line 16011
      break;
     } else {
      $36 = $38; //@line 16014
     }
    }
   }
   HEAP8[$48 >> 0] = 0; //@line 16019
   HEAP8[$48 + 1 >> 0] = 0; //@line 16021
   HEAP8[$48 + 2 >> 0] = $$sink$i; //@line 16023
   HEAP8[$48 + 3 >> 0] = 0; //@line 16025
   HEAP8[$48 + 4 >> 0] = 1; //@line 16026
   HEAP32[$$byval_copy >> 2] = HEAP32[130]; //@line 16027
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[131]; //@line 16027
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[132]; //@line 16027
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[133]; //@line 16027
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[134]; //@line 16027
   __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 53); //@line 16028
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(80) | 0; //@line 16032
   $55 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($6, $4, $19, $48 + 5 - $21 | 0) | 0; //@line 16033
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 106; //@line 16036
    $56 = $ReallocAsyncCtx10 + 4 | 0; //@line 16037
    HEAP32[$56 >> 2] = $29; //@line 16038
    $57 = $ReallocAsyncCtx10 + 8 | 0; //@line 16039
    HEAP32[$57 >> 2] = $2; //@line 16040
    $58 = $ReallocAsyncCtx10 + 12 | 0; //@line 16041
    HEAP8[$58 >> 0] = $$sink$i; //@line 16042
    $59 = $ReallocAsyncCtx10 + 16 | 0; //@line 16043
    HEAP32[$59 >> 2] = $4; //@line 16044
    $60 = $ReallocAsyncCtx10 + 20 | 0; //@line 16045
    HEAP32[$60 >> 2] = $4; //@line 16046
    $61 = $ReallocAsyncCtx10 + 24 | 0; //@line 16047
    HEAP32[$61 >> 2] = $21; //@line 16048
    $62 = $ReallocAsyncCtx10 + 28 | 0; //@line 16049
    HEAP32[$62 >> 2] = $6; //@line 16050
    $63 = $ReallocAsyncCtx10 + 32 | 0; //@line 16051
    HEAP32[$63 >> 2] = $19; //@line 16052
    $64 = $ReallocAsyncCtx10 + 36 | 0; //@line 16053
    HEAP32[$64 >> 2] = $22; //@line 16054
    $65 = $ReallocAsyncCtx10 + 40 | 0; //@line 16055
    HEAP32[$65 >> 2] = $23; //@line 16056
    $66 = $ReallocAsyncCtx10 + 44 | 0; //@line 16057
    HEAP32[$66 >> 2] = $24; //@line 16058
    $67 = $ReallocAsyncCtx10 + 48 | 0; //@line 16059
    HEAP32[$67 >> 2] = $25; //@line 16060
    $68 = $ReallocAsyncCtx10 + 52 | 0; //@line 16061
    HEAP32[$68 >> 2] = $26; //@line 16062
    $69 = $ReallocAsyncCtx10 + 56 | 0; //@line 16063
    HEAP32[$69 >> 2] = $27; //@line 16064
    $70 = $ReallocAsyncCtx10 + 60 | 0; //@line 16065
    HEAP32[$70 >> 2] = $28; //@line 16066
    $71 = $ReallocAsyncCtx10 + 64 | 0; //@line 16067
    HEAP32[$71 >> 2] = $8; //@line 16068
    $72 = $ReallocAsyncCtx10 + 68 | 0; //@line 16069
    HEAP32[$72 >> 2] = $10; //@line 16070
    $73 = $ReallocAsyncCtx10 + 72 | 0; //@line 16071
    HEAP32[$73 >> 2] = $12; //@line 16072
    $74 = $ReallocAsyncCtx10 + 76 | 0; //@line 16073
    HEAP32[$74 >> 2] = $14; //@line 16074
    sp = STACKTOP; //@line 16075
    STACKTOP = sp; //@line 16076
    return;
   }
   HEAP32[___async_retval >> 2] = $55; //@line 16079
   ___async_unwind = 0; //@line 16080
   HEAP32[$ReallocAsyncCtx10 >> 2] = 106; //@line 16081
   $56 = $ReallocAsyncCtx10 + 4 | 0; //@line 16082
   HEAP32[$56 >> 2] = $29; //@line 16083
   $57 = $ReallocAsyncCtx10 + 8 | 0; //@line 16084
   HEAP32[$57 >> 2] = $2; //@line 16085
   $58 = $ReallocAsyncCtx10 + 12 | 0; //@line 16086
   HEAP8[$58 >> 0] = $$sink$i; //@line 16087
   $59 = $ReallocAsyncCtx10 + 16 | 0; //@line 16088
   HEAP32[$59 >> 2] = $4; //@line 16089
   $60 = $ReallocAsyncCtx10 + 20 | 0; //@line 16090
   HEAP32[$60 >> 2] = $4; //@line 16091
   $61 = $ReallocAsyncCtx10 + 24 | 0; //@line 16092
   HEAP32[$61 >> 2] = $21; //@line 16093
   $62 = $ReallocAsyncCtx10 + 28 | 0; //@line 16094
   HEAP32[$62 >> 2] = $6; //@line 16095
   $63 = $ReallocAsyncCtx10 + 32 | 0; //@line 16096
   HEAP32[$63 >> 2] = $19; //@line 16097
   $64 = $ReallocAsyncCtx10 + 36 | 0; //@line 16098
   HEAP32[$64 >> 2] = $22; //@line 16099
   $65 = $ReallocAsyncCtx10 + 40 | 0; //@line 16100
   HEAP32[$65 >> 2] = $23; //@line 16101
   $66 = $ReallocAsyncCtx10 + 44 | 0; //@line 16102
   HEAP32[$66 >> 2] = $24; //@line 16103
   $67 = $ReallocAsyncCtx10 + 48 | 0; //@line 16104
   HEAP32[$67 >> 2] = $25; //@line 16105
   $68 = $ReallocAsyncCtx10 + 52 | 0; //@line 16106
   HEAP32[$68 >> 2] = $26; //@line 16107
   $69 = $ReallocAsyncCtx10 + 56 | 0; //@line 16108
   HEAP32[$69 >> 2] = $27; //@line 16109
   $70 = $ReallocAsyncCtx10 + 60 | 0; //@line 16110
   HEAP32[$70 >> 2] = $28; //@line 16111
   $71 = $ReallocAsyncCtx10 + 64 | 0; //@line 16112
   HEAP32[$71 >> 2] = $8; //@line 16113
   $72 = $ReallocAsyncCtx10 + 68 | 0; //@line 16114
   HEAP32[$72 >> 2] = $10; //@line 16115
   $73 = $ReallocAsyncCtx10 + 72 | 0; //@line 16116
   HEAP32[$73 >> 2] = $12; //@line 16117
   $74 = $ReallocAsyncCtx10 + 76 | 0; //@line 16118
   HEAP32[$74 >> 2] = $14; //@line 16119
   sp = STACKTOP; //@line 16120
   STACKTOP = sp; //@line 16121
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 16124
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 16126
 __ZN9UDPSocketD2Ev($6); //@line 16127
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 109; //@line 16130
  $76 = $ReallocAsyncCtx11 + 4 | 0; //@line 16131
  HEAP32[$76 >> 2] = $12; //@line 16132
  $77 = $ReallocAsyncCtx11 + 8 | 0; //@line 16133
  HEAP32[$77 >> 2] = $$2; //@line 16134
  sp = STACKTOP; //@line 16135
  STACKTOP = sp; //@line 16136
  return;
 }
 ___async_unwind = 0; //@line 16138
 HEAP32[$ReallocAsyncCtx11 >> 2] = 109; //@line 16139
 $76 = $ReallocAsyncCtx11 + 4 | 0; //@line 16140
 HEAP32[$76 >> 2] = $12; //@line 16141
 $77 = $ReallocAsyncCtx11 + 8 | 0; //@line 16142
 HEAP32[$77 >> 2] = $$2; //@line 16143
 sp = STACKTOP; //@line 16144
 STACKTOP = sp; //@line 16145
 return;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 16351
 $3 = HEAP32[$2 >> 2] | 0; //@line 16352
 $4 = $3 & -8; //@line 16353
 $5 = $0 + $4 | 0; //@line 16354
 $6 = HEAP32[2448] | 0; //@line 16355
 $8 = $3 & 3; //@line 16357
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 16363
 }
 $11 = $5 + 4 | 0; //@line 16366
 $12 = HEAP32[$11 >> 2] | 0; //@line 16367
 if (!($12 & 1)) {
  _abort(); //@line 16371
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 16378
   return $$2 | 0; //@line 16379
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[2564] << 1 >>> 0) {
    $$2 = $0; //@line 16389
    return $$2 | 0; //@line 16390
   }
  }
  $$2 = 0; //@line 16393
  return $$2 | 0; //@line 16394
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 16398
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 16401
   return $$2 | 0; //@line 16402
  }
  $26 = $0 + $1 | 0; //@line 16404
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 16408
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 16411
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 16414
  _dispose_chunk($26, $24); //@line 16415
  $$2 = $0; //@line 16416
  return $$2 | 0; //@line 16417
 }
 if ((HEAP32[2450] | 0) == ($5 | 0)) {
  $37 = (HEAP32[2447] | 0) + $4 | 0; //@line 16423
  $39 = $37 - $1 | 0; //@line 16425
  $40 = $0 + $1 | 0; //@line 16426
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 16428
   return $$2 | 0; //@line 16429
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 16436
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 16437
  HEAP32[2450] = $40; //@line 16438
  HEAP32[2447] = $39; //@line 16439
  $$2 = $0; //@line 16440
  return $$2 | 0; //@line 16441
 }
 if ((HEAP32[2449] | 0) == ($5 | 0)) {
  $49 = (HEAP32[2446] | 0) + $4 | 0; //@line 16447
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 16450
   return $$2 | 0; //@line 16451
  }
  $51 = $49 - $1 | 0; //@line 16453
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 16456
   $54 = $0 + $49 | 0; //@line 16457
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 16461
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 16464
   HEAP32[$54 >> 2] = $51; //@line 16465
   $60 = $54 + 4 | 0; //@line 16466
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 16469
   $storemerge = $53; //@line 16470
   $storemerge4 = $51; //@line 16470
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 16475
   $67 = $0 + $49 + 4 | 0; //@line 16477
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 16480
   $storemerge = 0; //@line 16481
   $storemerge4 = 0; //@line 16481
  }
  HEAP32[2446] = $storemerge4; //@line 16483
  HEAP32[2449] = $storemerge; //@line 16484
  $$2 = $0; //@line 16485
  return $$2 | 0; //@line 16486
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 16491
  return $$2 | 0; //@line 16492
 }
 $73 = ($12 & -8) + $4 | 0; //@line 16495
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 16498
  return $$2 | 0; //@line 16499
 }
 $75 = $73 - $1 | 0; //@line 16501
 $76 = $12 >>> 3; //@line 16502
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 16507
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 16509
   $83 = 9816 + ($76 << 1 << 2) | 0; //@line 16511
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 16516
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 16523
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[2444] = HEAP32[2444] & ~(1 << $76); //@line 16533
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 16539
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 16543
    }
    $96 = $81 + 8 | 0; //@line 16546
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 16550
    } else {
     _abort(); //@line 16552
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 16557
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 16558
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 16561
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 16563
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 16567
     $115 = $114 + 4 | 0; //@line 16568
     $116 = HEAP32[$115 >> 2] | 0; //@line 16569
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 16572
      if (!$118) {
       $$3 = 0; //@line 16575
       break;
      } else {
       $$1272 = $118; //@line 16578
       $$1275 = $114; //@line 16578
      }
     } else {
      $$1272 = $116; //@line 16581
      $$1275 = $115; //@line 16581
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 16584
      $121 = HEAP32[$120 >> 2] | 0; //@line 16585
      if ($121 | 0) {
       $$1272 = $121; //@line 16588
       $$1275 = $120; //@line 16588
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 16591
      $124 = HEAP32[$123 >> 2] | 0; //@line 16592
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 16597
       $$1275 = $123; //@line 16597
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 16602
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 16605
      $$3 = $$1272; //@line 16606
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 16611
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 16614
     }
     $108 = $106 + 12 | 0; //@line 16617
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 16621
     }
     $111 = $103 + 8 | 0; //@line 16624
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 16628
      HEAP32[$111 >> 2] = $106; //@line 16629
      $$3 = $103; //@line 16630
      break;
     } else {
      _abort(); //@line 16633
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 16641
    $130 = 10080 + ($129 << 2) | 0; //@line 16642
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 16647
      if (!$$3) {
       HEAP32[2445] = HEAP32[2445] & ~(1 << $129); //@line 16654
       break L49;
      }
     } else {
      if ((HEAP32[2448] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 16661
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 16669
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[2448] | 0; //@line 16679
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 16682
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 16686
    $147 = $5 + 16 | 0; //@line 16687
    $148 = HEAP32[$147 >> 2] | 0; //@line 16688
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 16694
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 16698
       HEAP32[$148 + 24 >> 2] = $$3; //@line 16700
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 16706
    if ($154 | 0) {
     if ((HEAP32[2448] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 16712
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 16716
      HEAP32[$154 + 24 >> 2] = $$3; //@line 16718
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 16730
  $165 = $0 + $73 + 4 | 0; //@line 16732
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 16735
  $$2 = $0; //@line 16736
  return $$2 | 0; //@line 16737
 } else {
  $168 = $0 + $1 | 0; //@line 16739
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 16743
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 16746
  $175 = $0 + $73 + 4 | 0; //@line 16748
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 16751
  _dispose_chunk($168, $75); //@line 16752
  $$2 = $0; //@line 16753
  return $$2 | 0; //@line 16754
 }
 return 0; //@line 16756
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 20649
   $$0106$ph = 24; //@line 20649
   label = 4; //@line 20650
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 20654
   $$0106$ph = 53; //@line 20654
   label = 4; //@line 20655
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 20659
   $$0106$ph = 53; //@line 20659
   label = 4; //@line 20660
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 20664
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 20669
   $4 = $0 + 100 | 0; //@line 20670
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 20672
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 20677
     $12 = HEAPU8[$5 >> 0] | 0; //@line 20680
    } else {
     $12 = ___shgetc($0) | 0; //@line 20683
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 20697
      $19 = HEAP32[$3 >> 2] | 0; //@line 20698
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 20703
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 20706
       $$0113 = $18; //@line 20706
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 20710
       $$0113 = $18; //@line 20710
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 20716
      $$0113 = 1; //@line 20716
     }
    }
   } while (0);
   $$0107127 = 0; //@line 20720
   $$1128 = $$0; //@line 20720
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[6407 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 20728
     $$1$lcssa = $$1128; //@line 20728
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 20734
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 20739
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 20742
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 20746
       break;
      }
     } else {
      $$2 = $$1128; //@line 20750
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 20753
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 20756
     $$1128 = $$2; //@line 20756
    } else {
     $$0107$lcssa = $39; //@line 20758
     $$1$lcssa = $$2; //@line 20758
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 20768
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 20773
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 20780
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 20787
        $$3126 = $$1$lcssa; //@line 20787
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[7190 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 20795
          $$5 = $$3126; //@line 20795
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 20801
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 20806
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 20809
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 20813
            break;
           }
          } else {
           $$4 = $$3126; //@line 20817
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 20820
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 20823
          $$3126 = $$4; //@line 20823
         } else {
          $$3110 = $70; //@line 20825
          $$5 = $$4; //@line 20825
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 20830
        $$5 = $$1$lcssa; //@line 20830
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 20835
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 20840
         $80 = HEAPU8[$72 >> 0] | 0; //@line 20843
        } else {
         $80 = ___shgetc($0) | 0; //@line 20846
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 20850
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 20855
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 20860
         $$0114 = nan; //@line 20861
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 20865
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 20870
          $93 = HEAPU8[$85 >> 0] | 0; //@line 20873
         } else {
          $93 = ___shgetc($0) | 0; //@line 20876
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 20893
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 20897
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 20901
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 20905
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 20909
         ___shlim($0, 0); //@line 20910
         $$0114 = 0.0; //@line 20911
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 20916
         break L4;
        } else {
         $$in = $$4111; //@line 20919
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 20922
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 20926
         }
         if (!$$in) {
          $$0114 = nan; //@line 20930
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 20941
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 20946
          $126 = HEAPU8[$118 >> 0] | 0; //@line 20949
         } else {
          $126 = ___shgetc($0) | 0; //@line 20952
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 20958
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 20964
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 20968
          $$6 = 48; //@line 20969
         }
        } else {
         $$6 = $$5; //@line 20972
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 20975
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 20985
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 20988
        ___shlim($0, 0); //@line 20989
        $$0114 = 0.0; //@line 20990
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 20999
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 21003
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 21009
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 21014
      }
      $$1108 = $$1108 + -1 | 0; //@line 21016
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 21029
  }
 } while (0);
 return +$$0114;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$089$i = 0, $$090117$i = 0, $$093119$i = 0, $$094116$i = 0, $$095115$i = 0, $$1$i = 0, $$196$i = 0, $$355 = 0, $$lcssa$i = 0, $10 = 0, $109 = 0, $114 = 0, $115 = 0, $117 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $196 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $45 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $79 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $90 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12321
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12323
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12325
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12327
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12329
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12331
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12333
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12335
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12337
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12339
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12341
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12343
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12345
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12347
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12349
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12351
 if (($AsyncRetVal | 0) == -3001) {
  $$355 = -3009; //@line 12354
 } else {
  if (($AsyncRetVal | 0) < 0) {
   $$355 = $AsyncRetVal; //@line 12358
  } else {
   $45 = (HEAPU8[$10 >> 0] | 0) << 8 | (HEAPU8[$12 >> 0] | 0); //@line 12374
   $51 = (HEAPU8[$14 >> 0] | 0) << 8 | (HEAPU8[$16 >> 0] | 0); //@line 12380
   if (((HEAP8[$6 >> 0] & -8) << 24 >> 24 == -128 ? ((HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$4 >> 0] | 0) | 0) == 1 : 0) & (HEAP8[$8 >> 0] & 15) == 0) {
    if (!$45) {
     $196 = $26; //@line 12390
    } else {
     $$093119$i = 0; //@line 12392
     $59 = $26; //@line 12392
     while (1) {
      $58 = HEAP8[$59 >> 0] | 0; //@line 12394
      if (!($58 << 24 >> 24)) {
       $$lcssa$i = $59; //@line 12397
      } else {
       $64 = $59; //@line 12399
       $66 = $58; //@line 12399
       while (1) {
        $67 = $64 + 1 + ($66 & 255) | 0; //@line 12403
        $66 = HEAP8[$67 >> 0] | 0; //@line 12404
        if (!($66 << 24 >> 24)) {
         $$lcssa$i = $67; //@line 12407
         break;
        } else {
         $64 = $67; //@line 12410
        }
       }
      }
      $70 = $$lcssa$i + 5 | 0; //@line 12414
      $$093119$i = $$093119$i + 1 | 0; //@line 12415
      if (($$093119$i | 0) >= ($45 | 0)) {
       $196 = $70; //@line 12420
       break;
      } else {
       $59 = $70; //@line 12418
      }
     }
    }
    if (($22 | 0) != 0 & ($51 | 0) != 0) {
     $$090117$i = $28; //@line 12429
     $$094116$i = 0; //@line 12429
     $$095115$i = 0; //@line 12429
     $74 = $196; //@line 12429
     while (1) {
      $75 = HEAP8[$74 >> 0] | 0; //@line 12432
      do {
       if (!($75 << 24 >> 24)) {
        $90 = $74 + 1 | 0; //@line 12436
       } else {
        $79 = $75 & 255; //@line 12439
        $82 = $74; //@line 12439
        while (1) {
         if ($79 & 192 | 0) {
          label = 12; //@line 12444
          break;
         }
         $84 = $82 + 1 + $79 | 0; //@line 12448
         $85 = HEAP8[$84 >> 0] | 0; //@line 12449
         if (!($85 << 24 >> 24)) {
          label = 14; //@line 12453
          break;
         } else {
          $79 = $85 & 255; //@line 12456
          $82 = $84; //@line 12456
         }
        }
        if ((label | 0) == 12) {
         label = 0; //@line 12460
         $90 = $82 + 2 | 0; //@line 12462
         break;
        } else if ((label | 0) == 14) {
         label = 0; //@line 12466
         $90 = $84 + 1 | 0; //@line 12468
         break;
        }
       }
      } while (0);
      $98 = ((HEAPU8[$90 >> 0] | 0) << 8 | (HEAPU8[$90 + 1 >> 0] | 0)) & 65535; //@line 12481
      $109 = $90 + 10 | 0; //@line 12492
      $114 = (HEAPU8[$90 + 8 >> 0] | 0) << 8 | (HEAPU8[$90 + 9 >> 0] | 0); //@line 12497
      $115 = $114 & 65535; //@line 12498
      $117 = ((HEAPU8[$90 + 2 >> 0] | 0) << 8 | (HEAPU8[$90 + 3 >> 0] | 0) | 0) == 1; //@line 12500
      do {
       if ($98 << 16 >> 16 == 1 & $117 & $115 << 16 >> 16 == 4) {
        HEAP32[$$090117$i >> 2] = 1; //@line 12506
        HEAP8[$$090117$i + 4 >> 0] = HEAP8[$109 >> 0] | 0; //@line 12510
        HEAP8[$$090117$i + 5 >> 0] = HEAP8[$90 + 11 >> 0] | 0; //@line 12514
        HEAP8[$$090117$i + 6 >> 0] = HEAP8[$90 + 12 >> 0] | 0; //@line 12518
        HEAP8[$$090117$i + 7 >> 0] = HEAP8[$90 + 13 >> 0] | 0; //@line 12522
        $$0 = $90 + 14 | 0; //@line 12525
        $$1$i = $$090117$i + 20 | 0; //@line 12525
        $$196$i = $$095115$i + 1 | 0; //@line 12525
       } else {
        if ($98 << 16 >> 16 == 28 & $117 & $115 << 16 >> 16 == 16) {
         HEAP32[$$090117$i >> 2] = 2; //@line 12532
         HEAP8[$$090117$i + 4 >> 0] = HEAP8[$109 >> 0] | 0; //@line 12536
         HEAP8[$$090117$i + 5 >> 0] = HEAP8[$90 + 11 >> 0] | 0; //@line 12540
         HEAP8[$$090117$i + 6 >> 0] = HEAP8[$90 + 12 >> 0] | 0; //@line 12544
         HEAP8[$$090117$i + 7 >> 0] = HEAP8[$90 + 13 >> 0] | 0; //@line 12548
         HEAP8[$$090117$i + 8 >> 0] = HEAP8[$90 + 14 >> 0] | 0; //@line 12552
         HEAP8[$$090117$i + 9 >> 0] = HEAP8[$90 + 15 >> 0] | 0; //@line 12556
         HEAP8[$$090117$i + 10 >> 0] = HEAP8[$90 + 16 >> 0] | 0; //@line 12560
         HEAP8[$$090117$i + 11 >> 0] = HEAP8[$90 + 17 >> 0] | 0; //@line 12564
         HEAP8[$$090117$i + 12 >> 0] = HEAP8[$90 + 18 >> 0] | 0; //@line 12568
         HEAP8[$$090117$i + 13 >> 0] = HEAP8[$90 + 19 >> 0] | 0; //@line 12572
         HEAP8[$$090117$i + 14 >> 0] = HEAP8[$90 + 20 >> 0] | 0; //@line 12576
         HEAP8[$$090117$i + 15 >> 0] = HEAP8[$90 + 21 >> 0] | 0; //@line 12580
         HEAP8[$$090117$i + 16 >> 0] = HEAP8[$90 + 22 >> 0] | 0; //@line 12584
         HEAP8[$$090117$i + 17 >> 0] = HEAP8[$90 + 23 >> 0] | 0; //@line 12588
         HEAP8[$$090117$i + 18 >> 0] = HEAP8[$90 + 24 >> 0] | 0; //@line 12592
         HEAP8[$$090117$i + 19 >> 0] = HEAP8[$90 + 25 >> 0] | 0; //@line 12596
         $$0 = $90 + 26 | 0; //@line 12599
         $$1$i = $$090117$i + 20 | 0; //@line 12599
         $$196$i = $$095115$i + 1 | 0; //@line 12599
         break;
        } else {
         $$0 = $109 + $114 | 0; //@line 12603
         $$1$i = $$090117$i; //@line 12603
         $$196$i = $$095115$i; //@line 12603
         break;
        }
       }
      } while (0);
      $$094116$i = $$094116$i + 1 | 0; //@line 12608
      if (!(($$094116$i | 0) < ($51 | 0) & $$196$i >>> 0 < $22 >>> 0)) {
       $$089$i = $$196$i; //@line 12615
       break;
      } else {
       $$090117$i = $$1$i; //@line 12613
       $$095115$i = $$196$i; //@line 12613
       $74 = $$0; //@line 12613
      }
     }
    } else {
     $$089$i = 0; //@line 12620
    }
   } else {
    $$089$i = 0; //@line 12623
   }
   $$355 = ($$089$i | 0) > 0 ? $$089$i : -3009; //@line 12627
  }
 }
 _free($2); //@line 12630
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 12631
 $190 = __ZN6Socket5closeEv($18) | 0; //@line 12632
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 12635
  $191 = $ReallocAsyncCtx12 + 4 | 0; //@line 12636
  HEAP32[$191 >> 2] = $$355; //@line 12637
  $192 = $ReallocAsyncCtx12 + 8 | 0; //@line 12638
  HEAP32[$192 >> 2] = $20; //@line 12639
  $193 = $ReallocAsyncCtx12 + 12 | 0; //@line 12640
  HEAP32[$193 >> 2] = $24; //@line 12641
  sp = STACKTOP; //@line 12642
  return;
 }
 HEAP32[___async_retval >> 2] = $190; //@line 12646
 ___async_unwind = 0; //@line 12647
 HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 12648
 $191 = $ReallocAsyncCtx12 + 4 | 0; //@line 12649
 HEAP32[$191 >> 2] = $$355; //@line 12650
 $192 = $ReallocAsyncCtx12 + 8 | 0; //@line 12651
 HEAP32[$192 >> 2] = $20; //@line 12652
 $193 = $ReallocAsyncCtx12 + 12 | 0; //@line 12653
 HEAP32[$193 >> 2] = $24; //@line 12654
 sp = STACKTOP; //@line 12655
 return;
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 1112
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 1112
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 1113
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 1114
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 1114
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 1115
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 1116
 $8 = $6 & 2047; //@line 1118
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 1119
 $11 = $9 & 2047; //@line 1121
 $12 = $3 & -2147483648; //@line 1122
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 1123
 $14 = tempRet0; //@line 1124
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 1130
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 1132
   $20 = tempRet0 & 2147483647; //@line 1134
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 1143
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 1145
    $30 = tempRet0; //@line 1146
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 1162
     $42 = tempRet0; //@line 1163
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 1170
      $49 = $41; //@line 1170
      $50 = $42; //@line 1170
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 1172
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 1173
       $50 = tempRet0; //@line 1174
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 1183
        break;
       } else {
        $$073100 = $48; //@line 1181
       }
      }
     } else {
      $$073$lcssa = 0; //@line 1188
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 1191
     $$174 = $$073$lcssa; //@line 1193
     $87 = $59; //@line 1193
     $88 = tempRet0; //@line 1193
    } else {
     $$174 = $8; //@line 1197
     $87 = $2; //@line 1197
     $88 = $3 & 1048575 | 1048576; //@line 1197
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 1201
     $65 = tempRet0; //@line 1202
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 1209
      $72 = $64; //@line 1209
      $73 = $65; //@line 1209
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 1211
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 1212
       $73 = tempRet0; //@line 1213
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 1222
        break;
       } else {
        $$07194 = $71; //@line 1220
       }
      }
     } else {
      $$071$lcssa = 0; //@line 1227
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 1230
     $$172$ph = $$071$lcssa; //@line 1232
     $89 = $82; //@line 1232
     $90 = tempRet0; //@line 1232
    } else {
     $$172$ph = $11; //@line 1236
     $89 = $4; //@line 1236
     $90 = $5 & 1048575 | 1048576; //@line 1236
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 1239
    $92 = tempRet0; //@line 1240
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 1245
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 1248
      $101 = $92; //@line 1248
      $156 = $97; //@line 1248
      $157 = $87; //@line 1248
      $158 = $88; //@line 1248
      $99 = $91; //@line 1248
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 1257
         $105 = $101; //@line 1257
        }
       } else {
        $104 = $157; //@line 1260
        $105 = $158; //@line 1260
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 1262
       $107 = tempRet0; //@line 1263
       $108 = $$27586 + -1 | 0; //@line 1264
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 1266
       $111 = tempRet0; //@line 1267
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 1272
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 1274
        $101 = $111; //@line 1274
        $156 = $116; //@line 1274
        $157 = $106; //@line 1274
        $158 = $107; //@line 1274
        $99 = $110; //@line 1274
       } else {
        $$275$lcssa = $108; //@line 1276
        $$lcssa = $116; //@line 1276
        $118 = $110; //@line 1276
        $120 = $111; //@line 1276
        $159 = $106; //@line 1276
        $160 = $107; //@line 1276
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 1281
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 1284
      $$lcssa = $97; //@line 1284
      $118 = $91; //@line 1284
      $120 = $92; //@line 1284
      $159 = $87; //@line 1284
      $160 = $88; //@line 1284
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 1293
      break;
     } else {
      $123 = $120; //@line 1296
      $125 = $118; //@line 1296
     }
    } else {
     $123 = $160; //@line 1299
     $125 = $159; //@line 1299
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 1307
     $130 = $125; //@line 1307
     $131 = $123; //@line 1307
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 1309
      $133 = tempRet0; //@line 1310
      $134 = $$37683 + -1 | 0; //@line 1311
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 1318
       $130 = $132; //@line 1318
       $131 = $133; //@line 1318
      } else {
       $$376$lcssa = $134; //@line 1320
       $141 = $132; //@line 1320
       $142 = $133; //@line 1320
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 1325
     $141 = $125; //@line 1325
     $142 = $123; //@line 1325
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 1329
     $144 = tempRet0; //@line 1330
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 1331
     $153 = $144 | tempRet0; //@line 1335
     $154 = $143 | $145; //@line 1335
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 1338
     $153 = tempRet0; //@line 1340
     $154 = $150; //@line 1340
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 1343
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 1343
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 1344
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 1349
  $$070 = $27 / $27; //@line 1351
 }
 return +$$070;
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$025$i = 0, $$02537$i = 0, $$026$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $$pre$phi$iZ2D = 0, $103 = 0, $110 = 0, $117 = 0, $124 = 0, $130 = 0, $2 = 0, $25 = 0, $33 = 0, $4 = 0, $42 = 0, $52 = 0, $6 = 0, $62 = 0, $65 = 0, $72 = 0, $76 = 0, $82 = 0, $89 = 0, $9 = 0, $96 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9342
 STACKTOP = STACKTOP + 48 | 0; //@line 9343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9343
 $vararg_buffer7 = sp + 24 | 0; //@line 9344
 $vararg_buffer4 = sp + 16 | 0; //@line 9345
 $vararg_buffer1 = sp + 8 | 0; //@line 9346
 $vararg_buffer = sp; //@line 9347
 $2 = sp + 32 | 0; //@line 9348
 HEAP8[$0 >> 0] = 0; //@line 9349
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 9353
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 9357
     $6 = $4; //@line 9357
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 9364
       $$02636$i = 0; //@line 9364
       $52 = $4; //@line 9364
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 9367
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 9369
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 9372
       break;
      } else {
       $$016$i = $9; //@line 9375
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 9387
       $$02636$i = 0; //@line 9387
       $52 = $4; //@line 9387
      } else {
       break;
      }
     }
     do {
      if (!(($52 + -48 & 255) < 10 | ($52 + -97 & 255) < 6)) {
       switch ($52 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($52 << 24 >> 24 == 58 & 1) | 0; //@line 9410
      $$02537$i = $$02537$i + 1 | 0; //@line 9411
      $52 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 9413
     } while ($52 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 9426
     $62 = $0 + 44 | 0; //@line 9427
     $$025$i = 0; //@line 9428
     L17 : while (1) {
      switch (HEAP8[$1 + $$025$i >> 0] | 0) {
      case 0:
       {
        label = 34; //@line 9434
        break L17;
        break;
       }
      case 58:
       {
        $65 = $$025$i + 1 | 0; //@line 9439
        if ((HEAP8[$1 + $65 >> 0] | 0) == 58) {
         label = 33; //@line 9444
         break L17;
        } else {
         $$025$i = $65; //@line 9447
         continue L17;
        }
        break;
       }
      default:
       {
        $$025$i = $$025$i + 1 | 0; //@line 9454
        continue L17;
       }
      }
     }
     if ((label | 0) == 33) {
      $$026$i = __ZL15ipv6_scan_chunkPtPKc($2, $1 + ($$025$i + 2) | 0) | 0; //@line 9463
      $$pre$phi$iZ2D = $2; //@line 9463
     } else if ((label | 0) == 34) {
      $$026$i = 0; //@line 9466
      $$pre$phi$iZ2D = $2; //@line 9466
     }
     $72 = 8 - $$026$i | 0; //@line 9468
     _memmove($2 + ($72 << 1) | 0, $2 | 0, $$026$i << 1 | 0) | 0; //@line 9471
     _memset($2 | 0, 0, $72 << 1 | 0) | 0; //@line 9473
     __ZL15ipv6_scan_chunkPtPKc($$pre$phi$iZ2D, $1) | 0; //@line 9474
     $76 = HEAP16[$$pre$phi$iZ2D >> 1] | 0; //@line 9475
     HEAP8[$62 >> 0] = ($76 & 65535) >>> 8; //@line 9478
     HEAP8[$0 + 45 >> 0] = $76; //@line 9481
     $82 = HEAP16[$2 + 2 >> 1] | 0; //@line 9483
     HEAP8[$0 + 46 >> 0] = ($82 & 65535) >>> 8; //@line 9487
     HEAP8[$0 + 47 >> 0] = $82; //@line 9490
     $89 = HEAP16[$2 + 4 >> 1] | 0; //@line 9492
     HEAP8[$0 + 48 >> 0] = ($89 & 65535) >>> 8; //@line 9496
     HEAP8[$0 + 49 >> 0] = $89; //@line 9499
     $96 = HEAP16[$2 + 6 >> 1] | 0; //@line 9501
     HEAP8[$0 + 50 >> 0] = ($96 & 65535) >>> 8; //@line 9505
     HEAP8[$0 + 51 >> 0] = $96; //@line 9508
     $103 = HEAP16[$2 + 8 >> 1] | 0; //@line 9510
     HEAP8[$0 + 52 >> 0] = ($103 & 65535) >>> 8; //@line 9514
     HEAP8[$0 + 53 >> 0] = $103; //@line 9517
     $110 = HEAP16[$2 + 10 >> 1] | 0; //@line 9519
     HEAP8[$0 + 54 >> 0] = ($110 & 65535) >>> 8; //@line 9523
     HEAP8[$0 + 55 >> 0] = $110; //@line 9526
     $117 = HEAP16[$2 + 12 >> 1] | 0; //@line 9528
     HEAP8[$0 + 56 >> 0] = ($117 & 65535) >>> 8; //@line 9532
     HEAP8[$0 + 57 >> 0] = $117; //@line 9535
     $124 = HEAP16[$2 + 14 >> 1] | 0; //@line 9537
     HEAP8[$0 + 58 >> 0] = ($124 & 65535) >>> 8; //@line 9541
     HEAP8[$0 + 59 >> 0] = $124; //@line 9544
     $$0 = 1; //@line 9545
     STACKTOP = sp; //@line 9546
     return $$0 | 0; //@line 9546
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 9550
   HEAP32[$vararg_buffer >> 2] = $2; //@line 9551
   L28 : do {
    if ((_sscanf($1, 5726, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP8[$2 >> 0] | 0; //@line 9558
     $$1$i = 0; //@line 9559
     L30 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L28;
        break;
       }
      case 46:
       {
        break L30;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 9576
     }
     $25 = $$1$i + 1 | 0; //@line 9578
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 9580
     if ((_sscanf($1 + $25 | 0, 5726, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP8[$2 >> 0] | 0; //@line 9586
      $$1$1$i = $25; //@line 9587
      L35 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L28;
         break;
        }
       case 46:
        {
         break L35;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 9604
      }
      $33 = $$1$1$i + 1 | 0; //@line 9606
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 9608
      if ((_sscanf($1 + $33 | 0, 5726, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP8[$2 >> 0] | 0; //@line 9614
       $$1$2$i = $33; //@line 9615
       L40 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L28;
          break;
         }
        case 46:
         {
          break L40;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 9632
       }
       $42 = $$1$2$i + 1 | 0; //@line 9634
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 9636
       if ((_sscanf($1 + $42 | 0, 5726, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP8[$2 >> 0] | 0; //@line 9642
        $$1$3$i = $42; //@line 9643
        L45 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L28;
           break;
          }
         case 46:
          {
           break L45;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 9660
        }
        $$0 = 1; //@line 9662
        STACKTOP = sp; //@line 9663
        return $$0 | 0; //@line 9663
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 9669
   STACKTOP = sp; //@line 9670
   return $$0 | 0; //@line 9670
  }
 } while (0);
 $130 = $0 + 40 | 0; //@line 9673
 HEAP32[$130 >> 2] = 0; //@line 9674
 HEAP32[$130 + 4 >> 2] = 0; //@line 9674
 HEAP32[$130 + 8 >> 2] = 0; //@line 9674
 HEAP32[$130 + 12 >> 2] = 0; //@line 9674
 HEAP32[$130 + 16 >> 2] = 0; //@line 9674
 $$0 = 0; //@line 9675
 STACKTOP = sp; //@line 9676
 return $$0 | 0; //@line 9676
}
function __Z17recv_coap_messagev__async_cb_23($0) {
 $0 = $0 | 0;
 var $$017$i$i = 0, $$pre$phi23Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8631
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8633
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8635
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8637
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8639
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8641
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8643
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8645
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8647
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8649
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8651
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8653
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8655
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8657
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8659
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8661
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8663
 $33 = HEAP32[$AsyncRetVal + 36 >> 2] | 0; //@line 8665
 $34 = $AsyncRetVal + 24 | 0; //@line 8666
 $35 = HEAP16[$34 >> 1] | 0; //@line 8667
 $36 = $35 & 65535; //@line 8668
 HEAP32[$2 >> 2] = 0; //@line 8669
 HEAP32[$2 + 4 >> 2] = 0; //@line 8669
 HEAP32[$2 + 8 >> 2] = 0; //@line 8669
 if (($35 & 65535) >= 11) {
  $39 = $36 + 16 & 131056; //@line 8673
  $ReallocAsyncCtx = _emscripten_realloc_async_context(88) | 0; //@line 8674
  $40 = __Znwj($39) | 0; //@line 8675
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 8678
   $41 = $ReallocAsyncCtx + 4 | 0; //@line 8679
   HEAP32[$41 >> 2] = $2; //@line 8680
   $42 = $ReallocAsyncCtx + 8 | 0; //@line 8681
   HEAP32[$42 >> 2] = $39; //@line 8682
   $43 = $ReallocAsyncCtx + 12 | 0; //@line 8683
   HEAP32[$43 >> 2] = $36; //@line 8684
   $44 = $ReallocAsyncCtx + 16 | 0; //@line 8685
   HEAP32[$44 >> 2] = $33; //@line 8686
   $45 = $ReallocAsyncCtx + 20 | 0; //@line 8687
   HEAP32[$45 >> 2] = $AsyncRetVal; //@line 8688
   $46 = $ReallocAsyncCtx + 24 | 0; //@line 8689
   HEAP32[$46 >> 2] = $4; //@line 8690
   $47 = $ReallocAsyncCtx + 28 | 0; //@line 8691
   HEAP32[$47 >> 2] = $6; //@line 8692
   $48 = $ReallocAsyncCtx + 32 | 0; //@line 8693
   HEAP32[$48 >> 2] = $8; //@line 8694
   $49 = $ReallocAsyncCtx + 36 | 0; //@line 8695
   HEAP32[$49 >> 2] = $10; //@line 8696
   $50 = $ReallocAsyncCtx + 40 | 0; //@line 8697
   HEAP32[$50 >> 2] = $12; //@line 8698
   $51 = $ReallocAsyncCtx + 44 | 0; //@line 8699
   HEAP32[$51 >> 2] = $14; //@line 8700
   $52 = $ReallocAsyncCtx + 48 | 0; //@line 8701
   HEAP32[$52 >> 2] = $34; //@line 8702
   $53 = $ReallocAsyncCtx + 52 | 0; //@line 8703
   HEAP32[$53 >> 2] = $16; //@line 8704
   $54 = $ReallocAsyncCtx + 56 | 0; //@line 8705
   HEAP32[$54 >> 2] = $18; //@line 8706
   $55 = $ReallocAsyncCtx + 60 | 0; //@line 8707
   HEAP32[$55 >> 2] = $2; //@line 8708
   $56 = $ReallocAsyncCtx + 64 | 0; //@line 8709
   HEAP32[$56 >> 2] = $20; //@line 8710
   $57 = $ReallocAsyncCtx + 68 | 0; //@line 8711
   HEAP32[$57 >> 2] = $22; //@line 8712
   $58 = $ReallocAsyncCtx + 72 | 0; //@line 8713
   HEAP32[$58 >> 2] = $24; //@line 8714
   $59 = $ReallocAsyncCtx + 76 | 0; //@line 8715
   HEAP32[$59 >> 2] = $26; //@line 8716
   $60 = $ReallocAsyncCtx + 80 | 0; //@line 8717
   HEAP32[$60 >> 2] = $28; //@line 8718
   $61 = $ReallocAsyncCtx + 84 | 0; //@line 8719
   HEAP32[$61 >> 2] = $30; //@line 8720
   sp = STACKTOP; //@line 8721
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 8725
  ___async_unwind = 0; //@line 8726
  HEAP32[$ReallocAsyncCtx >> 2] = 150; //@line 8727
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 8728
  HEAP32[$41 >> 2] = $2; //@line 8729
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 8730
  HEAP32[$42 >> 2] = $39; //@line 8731
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 8732
  HEAP32[$43 >> 2] = $36; //@line 8733
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 8734
  HEAP32[$44 >> 2] = $33; //@line 8735
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 8736
  HEAP32[$45 >> 2] = $AsyncRetVal; //@line 8737
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 8738
  HEAP32[$46 >> 2] = $4; //@line 8739
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 8740
  HEAP32[$47 >> 2] = $6; //@line 8741
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 8742
  HEAP32[$48 >> 2] = $8; //@line 8743
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 8744
  HEAP32[$49 >> 2] = $10; //@line 8745
  $50 = $ReallocAsyncCtx + 40 | 0; //@line 8746
  HEAP32[$50 >> 2] = $12; //@line 8747
  $51 = $ReallocAsyncCtx + 44 | 0; //@line 8748
  HEAP32[$51 >> 2] = $14; //@line 8749
  $52 = $ReallocAsyncCtx + 48 | 0; //@line 8750
  HEAP32[$52 >> 2] = $34; //@line 8751
  $53 = $ReallocAsyncCtx + 52 | 0; //@line 8752
  HEAP32[$53 >> 2] = $16; //@line 8753
  $54 = $ReallocAsyncCtx + 56 | 0; //@line 8754
  HEAP32[$54 >> 2] = $18; //@line 8755
  $55 = $ReallocAsyncCtx + 60 | 0; //@line 8756
  HEAP32[$55 >> 2] = $2; //@line 8757
  $56 = $ReallocAsyncCtx + 64 | 0; //@line 8758
  HEAP32[$56 >> 2] = $20; //@line 8759
  $57 = $ReallocAsyncCtx + 68 | 0; //@line 8760
  HEAP32[$57 >> 2] = $22; //@line 8761
  $58 = $ReallocAsyncCtx + 72 | 0; //@line 8762
  HEAP32[$58 >> 2] = $24; //@line 8763
  $59 = $ReallocAsyncCtx + 76 | 0; //@line 8764
  HEAP32[$59 >> 2] = $26; //@line 8765
  $60 = $ReallocAsyncCtx + 80 | 0; //@line 8766
  HEAP32[$60 >> 2] = $28; //@line 8767
  $61 = $ReallocAsyncCtx + 84 | 0; //@line 8768
  HEAP32[$61 >> 2] = $30; //@line 8769
  sp = STACKTOP; //@line 8770
  return;
 }
 $64 = $2 + 11 | 0; //@line 8774
 HEAP8[$64 >> 0] = $35; //@line 8775
 if (!($35 << 16 >> 16)) {
  $$017$i$i = $2; //@line 8778
  $$pre$phi23Z2D = $64; //@line 8778
 } else {
  _memcpy($2 | 0, $33 | 0, $36 | 0) | 0; //@line 8780
  $$017$i$i = $2; //@line 8781
  $$pre$phi23Z2D = $64; //@line 8781
 }
 HEAP8[$$017$i$i + $36 >> 0] = 0; //@line 8784
 HEAP32[$4 >> 2] = HEAPU16[$AsyncRetVal + 20 >> 1]; //@line 8788
 _printf(6036, $4) | 0; //@line 8789
 HEAP32[$8 >> 2] = HEAP32[$AsyncRetVal + 8 >> 2]; //@line 8792
 _printf(6059, $8) | 0; //@line 8793
 HEAP32[$12 >> 2] = HEAP32[$AsyncRetVal + 16 >> 2]; //@line 8796
 _printf(6082, $12) | 0; //@line 8797
 HEAP32[$16 >> 2] = HEAPU16[$34 >> 1]; //@line 8800
 _printf(6105, $16) | 0; //@line 8801
 HEAP32[$20 >> 2] = (HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2; //@line 8806
 _printf(6128, $20) | 0; //@line 8807
 HEAP32[$24 >> 2] = HEAP32[$AsyncRetVal + 40 >> 2]; //@line 8810
 _printf(6151, $24) | 0; //@line 8811
 if ((HEAP8[$$pre$phi23Z2D >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 8816
 }
 _free($28); //@line 8818
 return;
}
function _main() {
 var $$0 = 0, $0 = 0, $12 = 0, $13 = 0, $19 = 0, $25 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 12918
 STACKTOP = STACKTOP + 880 | 0; //@line 12919
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(880); //@line 12919
 $vararg_buffer1 = sp + 8 | 0; //@line 12920
 $vararg_buffer = sp; //@line 12921
 $0 = sp + 16 | 0; //@line 12922
 __ZN17EthernetInterfaceC2Ev($0); //@line 12923
 if (__ZN17EthernetInterface7connectEv($0) | 0) {
  $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12927
  _puts(6206) | 0; //@line 12928
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 151; //@line 12931
   HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 12933
   sp = STACKTOP; //@line 12934
   STACKTOP = sp; //@line 12935
   return 0; //@line 12935
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12937
  $$0 = 1; //@line 12938
  STACKTOP = sp; //@line 12939
  return $$0 | 0; //@line 12939
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(28, sp) | 0; //@line 12941
 _puts(6255) | 0; //@line 12942
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 152; //@line 12945
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 12947
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 12949
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 12951
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 12953
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 12955
  HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 12957
  sp = STACKTOP; //@line 12958
  STACKTOP = sp; //@line 12959
  return 0; //@line 12959
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12961
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 12964
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12965
 $13 = FUNCTION_TABLE_ii[$12 & 15]($0) | 0; //@line 12966
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 12969
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 12971
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 12973
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 12975
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 12977
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 12979
  sp = STACKTOP; //@line 12980
  STACKTOP = sp; //@line 12981
  return 0; //@line 12981
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12983
 $19 = __Z18nsapi_create_stackP12NetworkStack($13) | 0; //@line 12984
 $AsyncCtx24 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12985
 __ZN6Socket4openEP12NetworkStack(9716, $19) | 0; //@line 12986
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 154; //@line 12989
  HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 12991
  HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer; //@line 12993
  HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer1; //@line 12995
  HEAP32[$AsyncCtx24 + 16 >> 2] = $vararg_buffer1; //@line 12997
  HEAP32[$AsyncCtx24 + 20 >> 2] = $0; //@line 12999
  sp = STACKTOP; //@line 13000
  STACKTOP = sp; //@line 13001
  return 0; //@line 13001
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13003
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13004
 $25 = _sn_coap_protocol_init(12, 155, 10, 14) | 0; //@line 13005
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 156; //@line 13008
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 13010
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 13012
  HEAP32[$AsyncCtx27 + 12 >> 2] = $vararg_buffer1; //@line 13014
  HEAP32[$AsyncCtx27 + 16 >> 2] = $vararg_buffer1; //@line 13016
  HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 13018
  sp = STACKTOP; //@line 13019
  STACKTOP = sp; //@line 13020
  return 0; //@line 13020
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 13022
 HEAP32[2443] = $25; //@line 13023
 $31 = _calloc(44, 1) | 0; //@line 13024
 HEAP32[$31 + 32 >> 2] = 6301; //@line 13026
 HEAP16[$31 + 22 >> 1] = 6; //@line 13028
 HEAP32[$31 + 8 >> 2] = 1; //@line 13030
 HEAP16[$31 + 20 >> 1] = 7; //@line 13032
 $37 = (_sn_coap_builder_calc_needed_packet_data_size($31) | 0) & 65535; //@line 13034
 HEAP32[$vararg_buffer >> 2] = $37; //@line 13035
 _printf(6308, $vararg_buffer) | 0; //@line 13036
 $38 = _malloc($37) | 0; //@line 13037
 _sn_coap_builder($38, $31) | 0; //@line 13038
 $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13039
 $39 = __ZN9UDPSocket6sendtoEPKctPKvj(9716, 6345, 5683, $38, $37) | 0; //@line 13040
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 157; //@line 13043
  HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 13045
  HEAP32[$AsyncCtx20 + 8 >> 2] = $vararg_buffer1; //@line 13047
  HEAP32[$AsyncCtx20 + 12 >> 2] = $31; //@line 13049
  HEAP32[$AsyncCtx20 + 16 >> 2] = $38; //@line 13051
  HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 13053
  sp = STACKTOP; //@line 13054
  STACKTOP = sp; //@line 13055
  return 0; //@line 13055
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13057
 HEAP32[$vararg_buffer1 >> 2] = $39; //@line 13058
 HEAP32[$vararg_buffer1 + 4 >> 2] = 6301; //@line 13060
 _printf(6353, $vararg_buffer1) | 0; //@line 13061
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13062
 __Z17recv_coap_messagev(); //@line 13063
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 158; //@line 13066
  HEAP32[$AsyncCtx6 + 4 >> 2] = $31; //@line 13068
  HEAP32[$AsyncCtx6 + 8 >> 2] = $38; //@line 13070
  HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 13072
  sp = STACKTOP; //@line 13073
  STACKTOP = sp; //@line 13074
  return 0; //@line 13074
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13076
 _free($31); //@line 13077
 _free($38); //@line 13078
 $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13079
 _puts(6401) | 0; //@line 13080
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 159; //@line 13083
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13085
  sp = STACKTOP; //@line 13086
  STACKTOP = sp; //@line 13087
  return 0; //@line 13087
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13089
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13090
 _wait(4294967296.0); //@line 13091
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 160; //@line 13094
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 13096
  sp = STACKTOP; //@line 13097
  STACKTOP = sp; //@line 13098
  return 0; //@line 13098
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 13100
 $$0 = 0; //@line 13101
 STACKTOP = sp; //@line 13102
 return $$0 | 0; //@line 13102
}
function _sn_coap_parser_options_parse_multiple_options__async_cb($0) {
 $0 = $0 | 0;
 var $$06378 = 0, $$06378$us = 0, $$064 = 0, $$065$be$in = 0, $$065$be$us$in = 0, $$06577 = 0, $$06577$us = 0, $$080 = 0, $$080$us = 0, $$1 = 0, $$1$us = 0, $$sink = 0, $$sink87 = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $33 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $6 = 0, $61 = 0, $65 = 0, $67 = 0, $70 = 0, $75 = 0, $77 = 0, $78 = 0, $8 = 0, $81 = 0, $84 = 0, $89 = 0, $91 = 0, $AsyncRetVal = 0, $trunc = 0, $trunc110 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12035
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12037
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12039
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12041
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 12043
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 12045
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 12047
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 12049
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 12051
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12055
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 12056
 if (!$AsyncRetVal) {
  _mbed_tracef(2, 3737, 5493, $18); //@line 12059
  $$064 = -1; //@line 12060
  $100 = ___async_retval; //@line 12061
  HEAP8[$100 >> 0] = $$064; //@line 12062
  return;
 }
 HEAP16[$14 >> 1] = $12; //@line 12065
 $23 = HEAP32[$6 >> 2] | 0; //@line 12066
 if (($16 | 0) <= 0) {
  $$064 = 0; //@line 12069
  $100 = ___async_retval; //@line 12070
  HEAP8[$100 >> 0] = $$064; //@line 12071
  return;
 }
 if (($8 | 0) == 20) {
  $$06378$us = $23; //@line 12076
  $$06577$us = $10; //@line 12076
  $$080$us = 0; //@line 12076
  while (1) {
   if (!($$080$us << 24 >> 24)) {
    $$1$us = $$06378$us; //@line 12080
   } else {
    HEAP8[$$06378$us >> 0] = 38; //@line 12082
    $$1$us = $$06378$us + 1 | 0; //@line 12084
   }
   $28 = $$080$us + 1 << 24 >> 24; //@line 12086
   $30 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 12088
   HEAP32[$4 >> 2] = $30; //@line 12089
   $33 = $$06577$us & 65535; //@line 12092
   if (($$1$us + $33 - (HEAP32[$6 >> 2] | 0) | 0) > ($2 | 0)) {
    $$064 = -1; //@line 12097
    label = 29; //@line 12098
    break;
   }
   _memcpy($$1$us | 0, $30 | 0, $33 | 0) | 0; //@line 12101
   $38 = (HEAP32[$4 >> 2] | 0) + $33 | 0; //@line 12103
   HEAP32[$4 >> 2] = $38; //@line 12104
   $$06378$us = $$1$us + $33 | 0; //@line 12105
   $40 = HEAP32[$6 >> 2] | 0; //@line 12106
   $41 = $$06378$us; //@line 12107
   if (($41 - $40 | 0) >= ($2 | 0)) {
    $$064 = $28; //@line 12111
    label = 29; //@line 12112
    break;
   }
   $trunc110 = HEAP8[$38 >> 0] | 0; //@line 12115
   $44 = $trunc110 & 255; //@line 12116
   if ($44 & 240 | 0) {
    $$064 = $28; //@line 12120
    label = 29; //@line 12121
    break;
   }
   switch ($trunc110 & 15) {
   case 13:
    {
     $56 = $38 + 1 | 0; //@line 12128
     $$sink87 = $56; //@line 12132
     $$sink88 = (HEAPU8[$56 >> 0] | 0) + 13 | 0; //@line 12132
     label = 14; //@line 12133
     break;
    }
   case 14:
    {
     $47 = $38 + 2 | 0; //@line 12137
     $$sink87 = $47; //@line 12146
     $$sink88 = (HEAPU8[$47 >> 0] | 0) + 269 + ((HEAPU8[$38 + 1 >> 0] | 0) << 8) | 0; //@line 12146
     label = 14; //@line 12147
     break;
    }
   default:
    {
     $$065$be$us$in = $44 & 15; //@line 12151
     $61 = $40; //@line 12151
    }
   }
   if ((label | 0) == 14) {
    label = 0; //@line 12155
    HEAP32[$4 >> 2] = $$sink87; //@line 12156
    $$065$be$us$in = $$sink88; //@line 12158
    $61 = HEAP32[$6 >> 2] | 0; //@line 12158
   }
   if (($41 - $61 | 0) >= ($2 | 0)) {
    $$064 = $28; //@line 12166
    label = 29; //@line 12167
    break;
   } else {
    $$06577$us = $$065$be$us$in & 65535; //@line 12164
    $$080$us = $28; //@line 12164
   }
  }
  if ((label | 0) == 29) {
   $100 = ___async_retval; //@line 12172
   HEAP8[$100 >> 0] = $$064; //@line 12173
   return;
  }
 } else {
  $$06378 = $23; //@line 12177
  $$06577 = $10; //@line 12177
  $$080 = 0; //@line 12177
 }
 while (1) {
  if (!($$080 << 24 >> 24)) {
   $$1 = $$06378; //@line 12182
  } else {
   switch ($8 | 0) {
   case 4:
   case 15:
   case 17:
   case 20:
    {
     $$sink = 38; //@line 12186
     label = 19; //@line 12187
     break;
    }
   case 8:
   case 11:
    {
     $$sink = 47; //@line 12191
     label = 19; //@line 12192
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 19) {
    label = 0; //@line 12199
    HEAP8[$$06378 >> 0] = $$sink; //@line 12200
   }
   $$1 = $$06378 + 1 | 0; //@line 12203
  }
  $65 = $$080 + 1 << 24 >> 24; //@line 12205
  $67 = (HEAP32[$4 >> 2] | 0) + 1 | 0; //@line 12207
  HEAP32[$4 >> 2] = $67; //@line 12208
  $70 = $$06577 & 65535; //@line 12211
  if (($$1 + $70 - (HEAP32[$6 >> 2] | 0) | 0) > ($2 | 0)) {
   $$064 = -1; //@line 12216
   label = 29; //@line 12217
   break;
  }
  _memcpy($$1 | 0, $67 | 0, $70 | 0) | 0; //@line 12220
  $75 = (HEAP32[$4 >> 2] | 0) + $70 | 0; //@line 12222
  HEAP32[$4 >> 2] = $75; //@line 12223
  $$06378 = $$1 + $70 | 0; //@line 12224
  $77 = HEAP32[$6 >> 2] | 0; //@line 12225
  $78 = $$06378; //@line 12226
  if (($78 - $77 | 0) >= ($2 | 0)) {
   $$064 = $65; //@line 12230
   label = 29; //@line 12231
   break;
  }
  $trunc = HEAP8[$75 >> 0] | 0; //@line 12234
  $81 = $trunc & 255; //@line 12235
  if ($81 & 240 | 0) {
   $$064 = $65; //@line 12239
   label = 29; //@line 12240
   break;
  }
  switch ($trunc & 15) {
  case 13:
   {
    $84 = $75 + 1 | 0; //@line 12247
    $$sink89 = $84; //@line 12251
    $$sink90 = (HEAPU8[$84 >> 0] | 0) + 13 | 0; //@line 12251
    label = 26; //@line 12252
    break;
   }
  case 14:
   {
    $91 = $75 + 2 | 0; //@line 12256
    $$sink89 = $91; //@line 12265
    $$sink90 = (HEAPU8[$91 >> 0] | 0) + 269 + ((HEAPU8[$75 + 1 >> 0] | 0) << 8) | 0; //@line 12265
    label = 26; //@line 12266
    break;
   }
  default:
   {
    $$065$be$in = $81 & 15; //@line 12270
    $89 = $77; //@line 12270
   }
  }
  if ((label | 0) == 26) {
   label = 0; //@line 12274
   HEAP32[$4 >> 2] = $$sink89; //@line 12275
   $$065$be$in = $$sink90; //@line 12277
   $89 = HEAP32[$6 >> 2] | 0; //@line 12277
  }
  if (($78 - $89 | 0) >= ($2 | 0)) {
   $$064 = $65; //@line 12285
   label = 29; //@line 12286
   break;
  } else {
   $$06577 = $$065$be$in & 65535; //@line 12283
   $$080 = $65; //@line 12283
  }
 }
 if ((label | 0) == 29) {
  $100 = ___async_retval; //@line 12291
  HEAP8[$100 >> 0] = $$064; //@line 12292
  return;
 }
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8908
 STACKTOP = STACKTOP + 32 | 0; //@line 8909
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8909
 $2 = sp + 16 | 0; //@line 8910
 $3 = sp; //@line 8911
 $4 = $0 + 4 | 0; //@line 8912
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 8918
  STACKTOP = sp; //@line 8919
  return $$1 | 0; //@line 8919
 }
 HEAP32[$4 >> 2] = $1; //@line 8921
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] | 0; //@line 8924
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 8927
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8928
 $14 = FUNCTION_TABLE_ii[$13 & 15]($0) | 0; //@line 8929
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 8932
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8934
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 8936
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 8938
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8940
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 8942
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 8944
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8946
  sp = STACKTOP; //@line 8947
  STACKTOP = sp; //@line 8948
  return 0; //@line 8948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8950
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8951
 $22 = FUNCTION_TABLE_iiii[$10 & 15]($1, $2, $14) | 0; //@line 8952
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 84; //@line 8955
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 8957
  HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 8959
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 8961
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 8963
  HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 8965
  sp = STACKTOP; //@line 8966
  STACKTOP = sp; //@line 8967
  return 0; //@line 8967
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8969
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 8974
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 8975
   $31 = $3 + 12 | 0; //@line 8976
   HEAP32[$3 >> 2] = 12; //@line 8977
   HEAP32[$3 + 4 >> 2] = 1; //@line 8979
   HEAP32[$3 + 8 >> 2] = $0; //@line 8981
   HEAP32[$31 >> 2] = 484; //@line 8982
   $32 = $0 + 16 | 0; //@line 8983
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 484; //@line 8987
     label = 16; //@line 8988
    } else {
     $34 = $0 + 28 | 0; //@line 8990
     $35 = HEAP32[$34 >> 2] | 0; //@line 8991
     if (!$35) {
      $48 = 484; //@line 8994
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 8997
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8998
      FUNCTION_TABLE_vi[$38 & 255]($32); //@line 8999
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 85; //@line 9002
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 9004
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 9006
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 9008
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 9010
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 9012
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 9014
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 9016
       sp = STACKTOP; //@line 9017
       STACKTOP = sp; //@line 9018
       return 0; //@line 9018
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9020
      $$pre = HEAP32[$31 >> 2] | 0; //@line 9021
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 9024
       break;
      } else {
       $48 = $$pre; //@line 9027
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 9031
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9032
     FUNCTION_TABLE_vii[$49 & 3]($32, $3); //@line 9033
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 86; //@line 9036
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 9038
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 9040
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 9042
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 9044
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 9046
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 9048
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 9050
      sp = STACKTOP; //@line 9051
      STACKTOP = sp; //@line 9052
      return 0; //@line 9052
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9054
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 9055
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 9057
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 9062
       label = 16; //@line 9063
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 9072
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9073
     FUNCTION_TABLE_vi[$61 & 255]($3); //@line 9074
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 87; //@line 9077
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 9079
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 9081
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 9083
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 9085
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 9087
      sp = STACKTOP; //@line 9088
      STACKTOP = sp; //@line 9089
      return 0; //@line 9089
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9091
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 9096
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 68 >> 2] | 0; //@line 9099
   $71 = HEAP32[$30 >> 2] | 0; //@line 9100
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9101
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 88, $32); //@line 9102
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 89; //@line 9105
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 9107
    sp = STACKTOP; //@line 9108
    STACKTOP = sp; //@line 9109
    return 0; //@line 9109
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9111
    $$0 = 0; //@line 9112
    break;
   }
  } else {
   $$0 = $22; //@line 9116
  }
 } while (0);
 $$1 = $$0; //@line 9119
 STACKTOP = sp; //@line 9120
 return $$1 | 0; //@line 9120
}
function __ZL15ipv6_scan_chunkPtPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$ph = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$4 = 0, $$124$5 = 0, $$124$6 = 0, $$124$7 = 0, $$2 = 0, $17 = 0, $2 = 0, $26 = 0, $35 = 0, $44 = 0, $53 = 0, $62 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 9686
 STACKTOP = STACKTOP + 64 | 0; //@line 9687
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 9687
 $vararg_buffer19 = sp + 56 | 0; //@line 9688
 $vararg_buffer16 = sp + 48 | 0; //@line 9689
 $vararg_buffer13 = sp + 40 | 0; //@line 9690
 $vararg_buffer10 = sp + 32 | 0; //@line 9691
 $vararg_buffer7 = sp + 24 | 0; //@line 9692
 $vararg_buffer4 = sp + 16 | 0; //@line 9693
 $vararg_buffer1 = sp + 8 | 0; //@line 9694
 $vararg_buffer = sp; //@line 9695
 $2 = sp + 60 | 0; //@line 9696
 HEAP32[$vararg_buffer >> 2] = $2; //@line 9697
 L1 : do {
  if ((_sscanf($1, 5731, $vararg_buffer) | 0) < 1) {
   $$1$ph = 0; //@line 9702
  } else {
   HEAP16[$0 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9705
   $$124 = 0; //@line 9706
   L3 : while (1) {
    switch (HEAP8[$1 + $$124 >> 0] | 0) {
    case 0:
     {
      $$1$ph = 1; //@line 9712
      break L1;
      break;
     }
    case 58:
     {
      break L3;
      break;
     }
    default:
     {}
    }
    $$124 = $$124 + 1 | 0; //@line 9724
   }
   $9 = $$124 + 1 | 0; //@line 9726
   HEAP32[$vararg_buffer1 >> 2] = $2; //@line 9728
   if ((_sscanf($1 + $9 | 0, 5731, $vararg_buffer1) | 0) < 1) {
    $$1$ph = 1; //@line 9732
   } else {
    HEAP16[$0 + 2 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9736
    $$124$1 = $9; //@line 9737
    L8 : while (1) {
     switch (HEAP8[$1 + $$124$1 >> 0] | 0) {
     case 0:
      {
       $$1$ph = 2; //@line 9743
       break L1;
       break;
      }
     case 58:
      {
       break L8;
       break;
      }
     default:
      {}
     }
     $$124$1 = $$124$1 + 1 | 0; //@line 9755
    }
    $17 = $$124$1 + 1 | 0; //@line 9757
    HEAP32[$vararg_buffer4 >> 2] = $2; //@line 9759
    if ((_sscanf($1 + $17 | 0, 5731, $vararg_buffer4) | 0) < 1) {
     $$1$ph = 2; //@line 9763
    } else {
     HEAP16[$0 + 4 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9767
     $$124$2 = $17; //@line 9768
     L13 : while (1) {
      switch (HEAP8[$1 + $$124$2 >> 0] | 0) {
      case 0:
       {
        $$1$ph = 3; //@line 9774
        break L1;
        break;
       }
      case 58:
       {
        break L13;
        break;
       }
      default:
       {}
      }
      $$124$2 = $$124$2 + 1 | 0; //@line 9786
     }
     $26 = $$124$2 + 1 | 0; //@line 9788
     HEAP32[$vararg_buffer7 >> 2] = $2; //@line 9790
     if ((_sscanf($1 + $26 | 0, 5731, $vararg_buffer7) | 0) < 1) {
      $$1$ph = 3; //@line 9794
     } else {
      HEAP16[$0 + 6 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9798
      $$124$3 = $26; //@line 9799
      L18 : while (1) {
       switch (HEAP8[$1 + $$124$3 >> 0] | 0) {
       case 0:
        {
         $$1$ph = 4; //@line 9805
         break L1;
         break;
        }
       case 58:
        {
         break L18;
         break;
        }
       default:
        {}
       }
       $$124$3 = $$124$3 + 1 | 0; //@line 9817
      }
      $35 = $$124$3 + 1 | 0; //@line 9819
      HEAP32[$vararg_buffer10 >> 2] = $2; //@line 9821
      if ((_sscanf($1 + $35 | 0, 5731, $vararg_buffer10) | 0) < 1) {
       $$1$ph = 4; //@line 9825
      } else {
       HEAP16[$0 + 8 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9829
       $$124$4 = $35; //@line 9830
       L23 : while (1) {
        switch (HEAP8[$1 + $$124$4 >> 0] | 0) {
        case 0:
         {
          $$1$ph = 5; //@line 9836
          break L1;
          break;
         }
        case 58:
         {
          break L23;
          break;
         }
        default:
         {}
        }
        $$124$4 = $$124$4 + 1 | 0; //@line 9848
       }
       $44 = $$124$4 + 1 | 0; //@line 9850
       HEAP32[$vararg_buffer13 >> 2] = $2; //@line 9852
       if ((_sscanf($1 + $44 | 0, 5731, $vararg_buffer13) | 0) < 1) {
        $$1$ph = 5; //@line 9856
       } else {
        HEAP16[$0 + 10 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9860
        $$124$5 = $44; //@line 9861
        L28 : while (1) {
         switch (HEAP8[$1 + $$124$5 >> 0] | 0) {
         case 0:
          {
           $$1$ph = 6; //@line 9867
           break L1;
           break;
          }
         case 58:
          {
           break L28;
           break;
          }
         default:
          {}
         }
         $$124$5 = $$124$5 + 1 | 0; //@line 9879
        }
        $53 = $$124$5 + 1 | 0; //@line 9881
        HEAP32[$vararg_buffer16 >> 2] = $2; //@line 9883
        if ((_sscanf($1 + $53 | 0, 5731, $vararg_buffer16) | 0) < 1) {
         $$1$ph = 6; //@line 9887
        } else {
         HEAP16[$0 + 12 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9891
         $$124$6 = $53; //@line 9892
         L33 : while (1) {
          switch (HEAP8[$1 + $$124$6 >> 0] | 0) {
          case 0:
           {
            $$1$ph = 7; //@line 9898
            break L1;
            break;
           }
          case 58:
           {
            break L33;
            break;
           }
          default:
           {}
          }
          $$124$6 = $$124$6 + 1 | 0; //@line 9910
         }
         $62 = $$124$6 + 1 | 0; //@line 9912
         HEAP32[$vararg_buffer19 >> 2] = $2; //@line 9914
         if ((_sscanf($1 + $62 | 0, 5731, $vararg_buffer19) | 0) < 1) {
          $$1$ph = 7; //@line 9918
         } else {
          HEAP16[$0 + 14 >> 1] = HEAP16[$2 >> 1] | 0; //@line 9922
          $$124$7 = $62; //@line 9923
          L38 : while (1) {
           switch (HEAP8[$1 + $$124$7 >> 0] | 0) {
           case 0:
            {
             $$1$ph = 8; //@line 9929
             break L1;
             break;
            }
           case 58:
            {
             break L38;
             break;
            }
           default:
            {}
           }
           $$124$7 = $$124$7 + 1 | 0; //@line 9941
          }
          $$2 = 8; //@line 9943
          STACKTOP = sp; //@line 9944
          return $$2 | 0; //@line 9944
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $$2 = $$1$ph; //@line 9954
 STACKTOP = sp; //@line 9955
 return $$2 | 0; //@line 9955
}
function __ZN6Socket4openEP12NetworkStack__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11253
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11255
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11259
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11261
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11263
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11265
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11269
  return;
 }
 $14 = $6 + 8 | 0; //@line 11273
 HEAP32[$14 >> 2] = HEAP32[$8 >> 2]; //@line 11274
 $15 = $10 + 12 | 0; //@line 11275
 HEAP32[$10 >> 2] = 12; //@line 11276
 HEAP32[$10 + 4 >> 2] = 1; //@line 11278
 HEAP32[$10 + 8 >> 2] = $6; //@line 11280
 HEAP32[$15 >> 2] = 484; //@line 11281
 $16 = $6 + 16 | 0; //@line 11282
 if (($16 | 0) == ($10 | 0)) {
  $40 = HEAP32[123] | 0; //@line 11286
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 11287
  FUNCTION_TABLE_vi[$40 & 255]($10); //@line 11288
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 87; //@line 11291
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 11292
   HEAP32[$41 >> 2] = $10; //@line 11293
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 11294
   HEAP32[$42 >> 2] = $4; //@line 11295
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 11296
   HEAP32[$43 >> 2] = $14; //@line 11297
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 11298
   HEAP32[$44 >> 2] = $16; //@line 11299
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 11300
   HEAP32[$45 >> 2] = $2; //@line 11301
   sp = STACKTOP; //@line 11302
   return;
  }
  ___async_unwind = 0; //@line 11305
  HEAP32[$ReallocAsyncCtx5 >> 2] = 87; //@line 11306
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 11307
  HEAP32[$41 >> 2] = $10; //@line 11308
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 11309
  HEAP32[$42 >> 2] = $4; //@line 11310
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 11311
  HEAP32[$43 >> 2] = $14; //@line 11312
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 11313
  HEAP32[$44 >> 2] = $16; //@line 11314
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 11315
  HEAP32[$45 >> 2] = $2; //@line 11316
  sp = STACKTOP; //@line 11317
  return;
 }
 $18 = $6 + 28 | 0; //@line 11320
 $19 = HEAP32[$18 >> 2] | 0; //@line 11321
 if (!$19) {
  $31 = HEAP32[122] | 0; //@line 11325
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 11326
  FUNCTION_TABLE_vii[$31 & 3]($16, $10); //@line 11327
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 11330
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 11331
   HEAP32[$32 >> 2] = $15; //@line 11332
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 11333
   HEAP32[$33 >> 2] = $18; //@line 11334
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 11335
   HEAP32[$34 >> 2] = $10; //@line 11336
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 11337
   HEAP32[$35 >> 2] = $4; //@line 11338
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 11339
   HEAP32[$36 >> 2] = $14; //@line 11340
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 11341
   HEAP32[$37 >> 2] = $16; //@line 11342
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 11343
   HEAP32[$38 >> 2] = $2; //@line 11344
   sp = STACKTOP; //@line 11345
   return;
  }
  ___async_unwind = 0; //@line 11348
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 11349
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 11350
  HEAP32[$32 >> 2] = $15; //@line 11351
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 11352
  HEAP32[$33 >> 2] = $18; //@line 11353
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 11354
  HEAP32[$34 >> 2] = $10; //@line 11355
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 11356
  HEAP32[$35 >> 2] = $4; //@line 11357
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 11358
  HEAP32[$36 >> 2] = $14; //@line 11359
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 11360
  HEAP32[$37 >> 2] = $16; //@line 11361
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 11362
  HEAP32[$38 >> 2] = $2; //@line 11363
  sp = STACKTOP; //@line 11364
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 11368
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 11369
  FUNCTION_TABLE_vi[$22 & 255]($16); //@line 11370
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 11373
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 11374
   HEAP32[$23 >> 2] = $15; //@line 11375
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 11376
   HEAP32[$24 >> 2] = $18; //@line 11377
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 11378
   HEAP32[$25 >> 2] = $16; //@line 11379
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 11380
   HEAP32[$26 >> 2] = $10; //@line 11381
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 11382
   HEAP32[$27 >> 2] = $4; //@line 11383
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 11384
   HEAP32[$28 >> 2] = $14; //@line 11385
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 11386
   HEAP32[$29 >> 2] = $2; //@line 11387
   sp = STACKTOP; //@line 11388
   return;
  }
  ___async_unwind = 0; //@line 11391
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 11392
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 11393
  HEAP32[$23 >> 2] = $15; //@line 11394
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 11395
  HEAP32[$24 >> 2] = $18; //@line 11396
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 11397
  HEAP32[$25 >> 2] = $16; //@line 11398
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 11399
  HEAP32[$26 >> 2] = $10; //@line 11400
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 11401
  HEAP32[$27 >> 2] = $4; //@line 11402
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 11403
  HEAP32[$28 >> 2] = $14; //@line 11404
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 11405
  HEAP32[$29 >> 2] = $2; //@line 11406
  sp = STACKTOP; //@line 11407
  return;
 }
}
function _mbed_vtracef__async_cb_27($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9397
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9399
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9401
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9403
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9405
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9407
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9413
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9415
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9419
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9421
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9425
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9429
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9433
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9437
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9439
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9441
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9443
 $48 = HEAP8[$0 + 96 >> 0] & 1; //@line 9446
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 9449
 $50 = _snprintf($8, $10, 5601, $6) | 0; //@line 9450
 $$10 = ($50 | 0) >= ($10 | 0) ? 0 : $50; //@line 9452
 $53 = $8 + $$10 | 0; //@line 9454
 $54 = $10 - $$10 | 0; //@line 9455
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 9459
   $$3169 = $53; //@line 9459
   label = 4; //@line 9460
  }
 } else {
  $$3147168 = $10; //@line 9463
  $$3169 = $8; //@line 9463
  label = 4; //@line 9464
 }
 if ((label | 0) == 4) {
  $56 = $22 + -2 | 0; //@line 9467
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$16 >> 2] = $18; //@line 9473
    $$5156 = _snprintf($$3169, $$3147168, 5604, $16) | 0; //@line 9475
    break;
   }
  case 1:
   {
    HEAP32[$28 >> 2] = $18; //@line 9479
    $$5156 = _snprintf($$3169, $$3147168, 5619, $28) | 0; //@line 9481
    break;
   }
  case 3:
   {
    HEAP32[$24 >> 2] = $18; //@line 9485
    $$5156 = _snprintf($$3169, $$3147168, 5634, $24) | 0; //@line 9487
    break;
   }
  case 7:
   {
    HEAP32[$36 >> 2] = $18; //@line 9491
    $$5156 = _snprintf($$3169, $$3147168, 5649, $36) | 0; //@line 9493
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 5664, $32) | 0; //@line 9498
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 9502
  $67 = $$3169 + $$5156$ | 0; //@line 9504
  $68 = $$3147168 - $$5156$ | 0; //@line 9505
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 9509
   $70 = _vsnprintf($67, $68, $40, $42) | 0; //@line 9510
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 70; //@line 9513
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 9514
    HEAP32[$71 >> 2] = $2; //@line 9515
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 9516
    HEAP32[$72 >> 2] = $4; //@line 9517
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 9518
    HEAP32[$73 >> 2] = $68; //@line 9519
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 9520
    HEAP32[$74 >> 2] = $67; //@line 9521
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 9522
    HEAP32[$75 >> 2] = $44; //@line 9523
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 9524
    HEAP32[$76 >> 2] = $46; //@line 9525
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 9526
    $$expand_i1_val = $48 & 1; //@line 9527
    HEAP8[$77 >> 0] = $$expand_i1_val; //@line 9528
    sp = STACKTOP; //@line 9529
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 9533
   ___async_unwind = 0; //@line 9534
   HEAP32[$ReallocAsyncCtx10 >> 2] = 70; //@line 9535
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 9536
   HEAP32[$71 >> 2] = $2; //@line 9537
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 9538
   HEAP32[$72 >> 2] = $4; //@line 9539
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 9540
   HEAP32[$73 >> 2] = $68; //@line 9541
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 9542
   HEAP32[$74 >> 2] = $67; //@line 9543
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 9544
   HEAP32[$75 >> 2] = $44; //@line 9545
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 9546
   HEAP32[$76 >> 2] = $46; //@line 9547
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 9548
   $$expand_i1_val = $48 & 1; //@line 9549
   HEAP8[$77 >> 0] = $$expand_i1_val; //@line 9550
   sp = STACKTOP; //@line 9551
   return;
  }
 }
 $79 = HEAP32[110] | 0; //@line 9555
 $80 = HEAP32[103] | 0; //@line 9556
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 9557
 FUNCTION_TABLE_vi[$79 & 255]($80); //@line 9558
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9561
  sp = STACKTOP; //@line 9562
  return;
 }
 ___async_unwind = 0; //@line 9565
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9566
 sp = STACKTOP; //@line 9567
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $31 = 0, $39 = 0, $47 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 9982
 STACKTOP = STACKTOP + 80 | 0; //@line 9983
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 9983
 $vararg_buffer32 = sp + 72 | 0; //@line 9984
 $vararg_buffer28 = sp + 64 | 0; //@line 9985
 $vararg_buffer24 = sp + 56 | 0; //@line 9986
 $vararg_buffer20 = sp + 48 | 0; //@line 9987
 $vararg_buffer16 = sp + 40 | 0; //@line 9988
 $vararg_buffer12 = sp + 32 | 0; //@line 9989
 $vararg_buffer8 = sp + 24 | 0; //@line 9990
 $vararg_buffer4 = sp + 16 | 0; //@line 9991
 $vararg_buffer = sp; //@line 9992
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 9994
 if (!$2) {
  $$0 = 0; //@line 9997
  STACKTOP = sp; //@line 9998
  return $$0 | 0; //@line 9998
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 10003
  STACKTOP = sp; //@line 10004
  return $$0 | 0; //@line 10004
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 10013
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 10016
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 10019
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 10020
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 10022
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 10024
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 10026
   _sprintf($0, 5735, $vararg_buffer) | 0; //@line 10027
   $$0 = $0; //@line 10028
   STACKTOP = sp; //@line 10029
   return $$0 | 0; //@line 10029
  }
 case 2:
  {
   $23 = HEAPU8[$0 + 45 >> 0] | 0; //@line 10038
   HEAP32[$vararg_buffer4 >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 10039
   HEAP32[$vararg_buffer4 + 4 >> 2] = $23; //@line 10041
   _sprintf($0, 5747, $vararg_buffer4) | 0; //@line 10042
   HEAP8[$0 + 4 >> 0] = 58; //@line 10044
   $31 = HEAPU8[$0 + 47 >> 0] | 0; //@line 10051
   HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$0 + 46 >> 0]; //@line 10052
   HEAP32[$vararg_buffer8 + 4 >> 2] = $31; //@line 10054
   _sprintf($0 + 5 | 0, 5747, $vararg_buffer8) | 0; //@line 10055
   HEAP8[$0 + 9 >> 0] = 58; //@line 10057
   $39 = HEAPU8[$0 + 49 >> 0] | 0; //@line 10064
   HEAP32[$vararg_buffer12 >> 2] = HEAPU8[$0 + 48 >> 0]; //@line 10065
   HEAP32[$vararg_buffer12 + 4 >> 2] = $39; //@line 10067
   _sprintf($0 + 10 | 0, 5747, $vararg_buffer12) | 0; //@line 10068
   HEAP8[$0 + 14 >> 0] = 58; //@line 10070
   $47 = HEAPU8[$0 + 51 >> 0] | 0; //@line 10077
   HEAP32[$vararg_buffer16 >> 2] = HEAPU8[$0 + 50 >> 0]; //@line 10078
   HEAP32[$vararg_buffer16 + 4 >> 2] = $47; //@line 10080
   _sprintf($0 + 15 | 0, 5747, $vararg_buffer16) | 0; //@line 10081
   HEAP8[$0 + 19 >> 0] = 58; //@line 10083
   $55 = HEAPU8[$0 + 53 >> 0] | 0; //@line 10090
   HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$0 + 52 >> 0]; //@line 10091
   HEAP32[$vararg_buffer20 + 4 >> 2] = $55; //@line 10093
   _sprintf($0 + 20 | 0, 5747, $vararg_buffer20) | 0; //@line 10094
   HEAP8[$0 + 24 >> 0] = 58; //@line 10096
   $63 = HEAPU8[$0 + 55 >> 0] | 0; //@line 10103
   HEAP32[$vararg_buffer24 >> 2] = HEAPU8[$0 + 54 >> 0]; //@line 10104
   HEAP32[$vararg_buffer24 + 4 >> 2] = $63; //@line 10106
   _sprintf($0 + 25 | 0, 5747, $vararg_buffer24) | 0; //@line 10107
   HEAP8[$0 + 29 >> 0] = 58; //@line 10109
   $71 = HEAPU8[$0 + 57 >> 0] | 0; //@line 10116
   HEAP32[$vararg_buffer28 >> 2] = HEAPU8[$0 + 56 >> 0]; //@line 10117
   HEAP32[$vararg_buffer28 + 4 >> 2] = $71; //@line 10119
   _sprintf($0 + 30 | 0, 5747, $vararg_buffer28) | 0; //@line 10120
   HEAP8[$0 + 34 >> 0] = 58; //@line 10122
   $79 = HEAPU8[$0 + 59 >> 0] | 0; //@line 10129
   HEAP32[$vararg_buffer32 >> 2] = HEAPU8[$0 + 58 >> 0]; //@line 10130
   HEAP32[$vararg_buffer32 + 4 >> 2] = $79; //@line 10132
   _sprintf($0 + 35 | 0, 5747, $vararg_buffer32) | 0; //@line 10133
   HEAP8[$0 + 39 >> 0] = 0; //@line 10135
   $$0 = $0; //@line 10136
   STACKTOP = sp; //@line 10137
   return $$0 | 0; //@line 10137
  }
 default:
  {
   $$0 = $0; //@line 10141
   STACKTOP = sp; //@line 10142
   return $$0 | 0; //@line 10142
  }
 }
 return 0; //@line 10145
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_76($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16523
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16525
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16527
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16531
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16533
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 16536
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16538
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16540
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16542
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 16545
 $22 = HEAP8[$0 + 41 >> 0] & 1; //@line 16548
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 16550
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 16552
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 16554
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$6 >> 0] | 0)) {
     $$182$off0 = $20; //@line 16563
     $$186$off0 = $22; //@line 16563
    } else {
     if (!(HEAP8[$4 >> 0] | 0)) {
      if (!(HEAP32[$16 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $22; //@line 16572
       $$283$off0 = 1; //@line 16572
       label = 13; //@line 16573
       break L2;
      } else {
       $$182$off0 = 1; //@line 16576
       $$186$off0 = $22; //@line 16576
       break;
      }
     }
     if ((HEAP32[$18 >> 2] | 0) == 1) {
      label = 18; //@line 16583
      break L2;
     }
     if (!(HEAP32[$16 >> 2] & 2)) {
      label = 18; //@line 16590
      break L2;
     } else {
      $$182$off0 = 1; //@line 16593
      $$186$off0 = 1; //@line 16593
     }
    }
   } while (0);
   $30 = $26 + 8 | 0; //@line 16597
   if ($30 >>> 0 < $14 >>> 0) {
    HEAP8[$4 >> 0] = 0; //@line 16600
    HEAP8[$6 >> 0] = 0; //@line 16601
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 16602
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $10, $10, 1, $12); //@line 16603
    if (!___async) {
     ___async_unwind = 0; //@line 16606
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 196; //@line 16608
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 16610
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 16612
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 16614
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 16616
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 16618
    HEAP8[$ReallocAsyncCtx5 + 24 >> 0] = $12 & 1; //@line 16621
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 16623
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 16625
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 16627
    HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $$182$off0 & 1; //@line 16630
    HEAP8[$ReallocAsyncCtx5 + 41 >> 0] = $$186$off0 & 1; //@line 16633
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 16635
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $30; //@line 16637
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 16639
    sp = STACKTOP; //@line 16640
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 16643
    $$283$off0 = $$182$off0; //@line 16643
    label = 13; //@line 16644
   }
  } else {
   $$085$off0$reg2mem$0 = $22; //@line 16647
   $$283$off0 = $20; //@line 16647
   label = 13; //@line 16648
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$24 >> 2] = $10; //@line 16654
    $59 = $8 + 40 | 0; //@line 16655
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 16658
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$18 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 16666
      if ($$283$off0) {
       label = 18; //@line 16668
       break;
      } else {
       $67 = 4; //@line 16671
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 16678
   } else {
    $67 = 4; //@line 16680
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 16685
 }
 HEAP32[$28 >> 2] = $67; //@line 16687
 return;
}
function _sn_coap_builder_options_build_add_multiple_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$i = 0, $$012$lcssa$i10 = 0, $$01213$i = 0, $$014$i = 0, $$02441$i = 0, $$02540$i = 0, $$02542$i = 0, $$02641$i = 0, $$028$lcssa$i$ph = 0, $$02839$i = 0, $$03138$i = 0, $$03139$i = 0, $$07$us = 0, $$126$i = 0, $$127$i = 0, $$129$i = 0, $13 = 0, $15 = 0, $27 = 0, $29 = 0, $34 = 0, $39 = 0, $49 = 0, $5 = 0, $50 = 0, $61 = 0, $66 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $or$cond$i3 = 0, $phitmp$i = 0, $wide$trip$count = 0;
 $5 = HEAP32[$1 >> 2] | 0; //@line 4414
 if (!$5) {
  return;
 }
 $7 = HEAP16[$2 >> 1] | 0; //@line 4419
 $9 = ($7 & 65535) + -1 | 0; //@line 4421
 if (($7 & 65535) > 2) {
  $13 = ($3 | 0) == 11 | ($3 | 0) == 8 ? 47 : 38; //@line 4427
  $$01213$i = 0; //@line 4428
  $$014$i = 1; //@line 4428
  $15 = 1; //@line 4428
  do {
   $$01213$i = $$01213$i + (($13 | 0) == (HEAPU8[$5 + $15 >> 0] | 0) & 1) << 24 >> 24; //@line 4435
   $$014$i = $$014$i + 1 << 16 >> 16; //@line 4436
   $15 = $$014$i & 65535; //@line 4437
  } while (($9 | 0) > ($15 | 0));
  $phitmp$i = $$01213$i + 1 << 24 >> 24; //@line 4445
  if (!($phitmp$i << 24 >> 24)) {
   return;
  } else {
   $$012$lcssa$i10 = $phitmp$i; //@line 4450
  }
 } else {
  $$012$lcssa$i10 = 1; //@line 4453
 }
 $or$cond$i3 = ($3 | 0) == 11 | ($3 | 0) == 8; //@line 4458
 $$$i = $or$cond$i3 ? 47 : 38; //@line 4459
 $27 = $or$cond$i3 ? 47 : 38; //@line 4460
 if (!($7 << 16 >> 16)) {
  $$07$us = 0; //@line 4462
  do {
   if (!($$07$us << 24 >> 24)) {
    $29 = HEAP8[$5 >> 0] | 0; //@line 4466
    $34 = ($29 << 24 >> 24 == 0 ? 1 : $29 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 4471
   } else {
    $34 = 65535; //@line 4473
   }
   _sn_coap_builder_options_build_add_one_option($0, 0, (HEAP32[$1 >> 2] | 0) + $34 | 0, $3, $4) | 0; //@line 4477
   $$07$us = $$07$us + 1 << 24 >> 24; //@line 4478
  } while (($$07$us & 255) < ($$012$lcssa$i10 & 255));
  return;
 }
 $wide$trip$count = $$012$lcssa$i10 & 255; //@line 4488
 $indvars$iv = 0; //@line 4489
 do {
  $$02441$i = 0; //@line 4491
  $$02540$i = 0; //@line 4491
  $$02839$i = 0; //@line 4491
  $$03138$i = $5; //@line 4491
  while (1) {
   $39 = ($27 | 0) != (HEAPU8[$$03138$i >> 0] | 0); //@line 4495
   if ($$02839$i << 16 >> 16 == 0 | $39) {
    $$126$i = $$02540$i; //@line 4501
    $$129$i = $$02839$i + ($39 & 1) << 16 >> 16; //@line 4501
   } else {
    if (($indvars$iv | 0) == ($$02540$i & 255 | 0)) {
     $$028$lcssa$i$ph = $$02839$i; //@line 4506
     break;
    }
    $$126$i = $$02540$i + 1 << 24 >> 24; //@line 4510
    $$129$i = 0; //@line 4510
   }
   $$02441$i = $$02441$i + 1 << 16 >> 16; //@line 4513
   if (($$02441$i & 65535) >= ($7 & 65535)) {
    $$028$lcssa$i$ph = $$129$i; //@line 4518
    break;
   } else {
    $$02540$i = $$126$i; //@line 4516
    $$02839$i = $$129$i; //@line 4516
    $$03138$i = $$03138$i + 1 | 0; //@line 4516
   }
  }
  L29 : do {
   if (!$indvars$iv) {
    $50 = HEAP8[$5 >> 0] | 0; //@line 4525
    $66 = ($50 << 24 >> 24 == 0 ? 1 : $50 << 24 >> 24 == $$$i << 24 >> 24) & 1; //@line 4530
   } else {
    $49 = $indvars$iv + -1 | 0; //@line 4532
    $$02542$i = 0; //@line 4533
    $$02641$i = 0; //@line 4533
    $$03139$i = $5; //@line 4533
    while (1) {
     if ($$02542$i << 16 >> 16 == 0 ? 1 : (HEAP8[$$03139$i >> 0] | 0) != $$$i << 24 >> 24) {
      $$127$i = $$02641$i; //@line 4540
     } else {
      if (($49 | 0) == ($$02641$i & 255 | 0)) {
       break;
      }
      $$127$i = $$02641$i + 1 << 24 >> 24; //@line 4548
     }
     $61 = $$02542$i + 1 << 16 >> 16; //@line 4550
     if (($61 & 65535) < ($7 & 65535)) {
      $$02542$i = $61; //@line 4554
      $$02641$i = $$127$i; //@line 4554
      $$03139$i = $$03139$i + 1 | 0; //@line 4554
     } else {
      $66 = 65535; //@line 4556
      break L29;
     }
    }
    $66 = ($$02542$i & 65535) + 1 | 0; //@line 4562
   }
  } while (0);
  _sn_coap_builder_options_build_add_one_option($0, $$028$lcssa$i$ph, (HEAP32[$1 >> 2] | 0) + ($66 & 65535) | 0, $3, $4) | 0; //@line 4568
  $indvars$iv = $indvars$iv + 1 | 0; //@line 4569
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 848
 $3 = HEAP32[$2 >> 2] | 0; //@line 849
 $4 = $0 + 100 | 0; //@line 850
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 855
  $11 = HEAPU8[$3 >> 0] | 0; //@line 858
 } else {
  $11 = ___shgetc($0) | 0; //@line 861
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 866
   $14 = HEAP32[$2 >> 2] | 0; //@line 867
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 872
    $22 = HEAPU8[$14 >> 0] | 0; //@line 875
   } else {
    $22 = ___shgetc($0) | 0; //@line 878
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 888
     $$049 = $22; //@line 888
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 892
     $$0 = $13; //@line 893
     $$049 = $22; //@line 893
    }
   } else {
    $$0 = $13; //@line 896
    $$049 = $22; //@line 896
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 901
   $$049 = $11; //@line 901
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 910
   $101 = 0; //@line 910
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 914
   $100 = -2147483648; //@line 915
   $101 = 0; //@line 915
  }
 } else {
  $$04860 = 0; //@line 918
  $$159 = $$049; //@line 918
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 922
   $38 = HEAP32[$2 >> 2] | 0; //@line 923
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 928
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 931
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 934
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 941
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 947
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 951
   $55 = $$04860; //@line 951
   $56 = $50; //@line 951
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 953
    $58 = tempRet0; //@line 954
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 957
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 959
    $64 = tempRet0; //@line 960
    $65 = HEAP32[$2 >> 2] | 0; //@line 961
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 966
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 969
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 972
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 983
     $55 = $63; //@line 983
     $56 = $64; //@line 983
    } else {
     $$2$lcssa = $$2$be; //@line 985
     $94 = $63; //@line 985
     $95 = $64; //@line 985
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 990
   $94 = $$04860; //@line 990
   $95 = $50; //@line 990
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 996
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 1001
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 1004
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 1007
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 1021
  }
  $93 = ($$0 | 0) != 0; //@line 1023
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 1024
  $100 = $93 ? tempRet0 : $95; //@line 1028
  $101 = $93 ? $96 : $94; //@line 1028
 }
 tempRet0 = $100; //@line 1030
 return $101 | 0; //@line 1031
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16367
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16369
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16371
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16373
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 16376
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16378
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16380
 $15 = $12 + 24 | 0; //@line 16383
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 16388
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 16392
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 16399
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 16410
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 16411
      if (!___async) {
       ___async_unwind = 0; //@line 16414
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 200; //@line 16416
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 16418
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 16420
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 16422
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 16424
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 16426
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 16428
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 16430
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 16433
      sp = STACKTOP; //@line 16434
      return;
     }
     $36 = $2 + 24 | 0; //@line 16437
     $37 = $2 + 54 | 0; //@line 16438
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 16453
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 16454
     if (!___async) {
      ___async_unwind = 0; //@line 16457
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 199; //@line 16459
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 16461
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 16463
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 16465
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 16467
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 16469
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 16471
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 16473
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 16475
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 16478
     sp = STACKTOP; //@line 16479
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 16483
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 16487
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 16488
    if (!___async) {
     ___async_unwind = 0; //@line 16491
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 16493
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 16495
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $10; //@line 16497
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 16499
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 16501
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 16503
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 16505
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 16508
    sp = STACKTOP; //@line 16509
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6462
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 6467
 } else {
  $9 = $1 + 52 | 0; //@line 6469
  $10 = HEAP8[$9 >> 0] | 0; //@line 6470
  $11 = $1 + 53 | 0; //@line 6471
  $12 = HEAP8[$11 >> 0] | 0; //@line 6472
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 6475
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 6476
  HEAP8[$9 >> 0] = 0; //@line 6477
  HEAP8[$11 >> 0] = 0; //@line 6478
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 6479
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 6480
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 194; //@line 6483
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 6485
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6487
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 6489
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 6491
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 6493
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 6495
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 6497
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 6499
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 6501
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 6503
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 6506
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 6508
   sp = STACKTOP; //@line 6509
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6512
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 6517
    $32 = $0 + 8 | 0; //@line 6518
    $33 = $1 + 54 | 0; //@line 6519
    $$0 = $0 + 24 | 0; //@line 6520
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 6553
     HEAP8[$11 >> 0] = 0; //@line 6554
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 6555
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 6556
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 6561
     $62 = $$0 + 8 | 0; //@line 6562
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 6565
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 195; //@line 6570
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 6572
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 6574
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 6576
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 6578
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 6580
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 6582
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 6584
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 6586
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 6588
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 6590
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 6592
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 6594
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 6596
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 6599
    sp = STACKTOP; //@line 6600
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 6604
  HEAP8[$11 >> 0] = $12; //@line 6605
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2722
      $10 = HEAP32[$9 >> 2] | 0; //@line 2723
      HEAP32[$2 >> 2] = $9 + 4; //@line 2725
      HEAP32[$0 >> 2] = $10; //@line 2726
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2742
      $17 = HEAP32[$16 >> 2] | 0; //@line 2743
      HEAP32[$2 >> 2] = $16 + 4; //@line 2745
      $20 = $0; //@line 2748
      HEAP32[$20 >> 2] = $17; //@line 2750
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 2753
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2769
      $30 = HEAP32[$29 >> 2] | 0; //@line 2770
      HEAP32[$2 >> 2] = $29 + 4; //@line 2772
      $31 = $0; //@line 2773
      HEAP32[$31 >> 2] = $30; //@line 2775
      HEAP32[$31 + 4 >> 2] = 0; //@line 2778
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 2794
      $41 = $40; //@line 2795
      $43 = HEAP32[$41 >> 2] | 0; //@line 2797
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 2800
      HEAP32[$2 >> 2] = $40 + 8; //@line 2802
      $47 = $0; //@line 2803
      HEAP32[$47 >> 2] = $43; //@line 2805
      HEAP32[$47 + 4 >> 2] = $46; //@line 2808
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2824
      $57 = HEAP32[$56 >> 2] | 0; //@line 2825
      HEAP32[$2 >> 2] = $56 + 4; //@line 2827
      $59 = ($57 & 65535) << 16 >> 16; //@line 2829
      $62 = $0; //@line 2832
      HEAP32[$62 >> 2] = $59; //@line 2834
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 2837
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2853
      $72 = HEAP32[$71 >> 2] | 0; //@line 2854
      HEAP32[$2 >> 2] = $71 + 4; //@line 2856
      $73 = $0; //@line 2858
      HEAP32[$73 >> 2] = $72 & 65535; //@line 2860
      HEAP32[$73 + 4 >> 2] = 0; //@line 2863
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2879
      $83 = HEAP32[$82 >> 2] | 0; //@line 2880
      HEAP32[$2 >> 2] = $82 + 4; //@line 2882
      $85 = ($83 & 255) << 24 >> 24; //@line 2884
      $88 = $0; //@line 2887
      HEAP32[$88 >> 2] = $85; //@line 2889
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 2892
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 2908
      $98 = HEAP32[$97 >> 2] | 0; //@line 2909
      HEAP32[$2 >> 2] = $97 + 4; //@line 2911
      $99 = $0; //@line 2913
      HEAP32[$99 >> 2] = $98 & 255; //@line 2915
      HEAP32[$99 + 4 >> 2] = 0; //@line 2918
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 2934
      $109 = +HEAPF64[$108 >> 3]; //@line 2935
      HEAP32[$2 >> 2] = $108 + 8; //@line 2937
      HEAPF64[$0 >> 3] = $109; //@line 2938
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 2954
      $116 = +HEAPF64[$115 >> 3]; //@line 2955
      HEAP32[$2 >> 2] = $115 + 8; //@line 2957
      HEAPF64[$0 >> 3] = $116; //@line 2958
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$byval_copy = 0, $11 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10499
 STACKTOP = STACKTOP + 112 | 0; //@line 10500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 10500
 $$byval_copy = sp + 88 | 0; //@line 10501
 $5 = sp + 24 | 0; //@line 10502
 $6 = sp; //@line 10503
 HEAP32[$6 >> 2] = 0; //@line 10504
 HEAP32[$6 + 4 >> 2] = 0; //@line 10504
 HEAP32[$6 + 8 >> 2] = 0; //@line 10504
 HEAP32[$6 + 12 >> 2] = 0; //@line 10504
 HEAP32[$6 + 16 >> 2] = 0; //@line 10504
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 10505
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 10505
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 10505
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 10505
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 10505
 __ZN13SocketAddressC2E10nsapi_addrt($5, $$byval_copy, 0); //@line 10506
 $7 = $0 + 4 | 0; //@line 10507
 $8 = HEAP32[$7 >> 2] | 0; //@line 10508
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0; //@line 10511
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 10512
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($8, $1, $5, 0) | 0; //@line 10513
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 101; //@line 10516
  HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 10518
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 10520
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10522
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 10524
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 10526
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 10528
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 10530
  sp = STACKTOP; //@line 10531
  STACKTOP = sp; //@line 10532
  return 0; //@line 10532
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10534
 if ($12 | 0) {
  $$0 = -3009; //@line 10537
  STACKTOP = sp; //@line 10538
  return $$0 | 0; //@line 10538
 }
 __ZN13SocketAddress8set_portEt($5, $2); //@line 10540
 $21 = $0 + 8 | 0; //@line 10541
 $22 = $0 + 52 | 0; //@line 10542
 $23 = $0 + 12 | 0; //@line 10543
 while (1) {
  $24 = HEAP32[$21 >> 2] | 0; //@line 10545
  if (!$24) {
   $$0 = -3005; //@line 10548
   label = 9; //@line 10549
   break;
  }
  HEAP32[$22 >> 2] = 0; //@line 10552
  $26 = HEAP32[$7 >> 2] | 0; //@line 10553
  $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 10556
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10557
  $30 = FUNCTION_TABLE_iiiiii[$29 & 7]($26, $24, $5, $3, $4) | 0; //@line 10558
  if (___async) {
   label = 7; //@line 10561
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10564
  if (($30 | 0) != -3001 | (HEAP32[$23 >> 2] | 0) == 0) {
   $$0 = $30; //@line 10570
   label = 9; //@line 10571
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx3 >> 2] = 102; //@line 10576
  HEAP32[$AsyncCtx3 + 4 >> 2] = $23; //@line 10578
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 10580
  HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 10582
  HEAP32[$AsyncCtx3 + 16 >> 2] = $22; //@line 10584
  HEAP32[$AsyncCtx3 + 20 >> 2] = $7; //@line 10586
  HEAP32[$AsyncCtx3 + 24 >> 2] = $5; //@line 10588
  HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 10590
  HEAP32[$AsyncCtx3 + 32 >> 2] = $4; //@line 10592
  sp = STACKTOP; //@line 10593
  STACKTOP = sp; //@line 10594
  return 0; //@line 10594
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 10597
  return $$0 | 0; //@line 10597
 }
 return 0; //@line 10599
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 1622
 STACKTOP = STACKTOP + 224 | 0; //@line 1623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 1623
 $3 = sp + 120 | 0; //@line 1624
 $4 = sp + 80 | 0; //@line 1625
 $5 = sp; //@line 1626
 $6 = sp + 136 | 0; //@line 1627
 dest = $4; //@line 1628
 stop = dest + 40 | 0; //@line 1628
 do {
  HEAP32[dest >> 2] = 0; //@line 1628
  dest = dest + 4 | 0; //@line 1628
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 1630
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 1634
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 1641
  } else {
   $43 = 0; //@line 1643
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 1645
  $14 = $13 & 32; //@line 1646
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 1652
  }
  $19 = $0 + 48 | 0; //@line 1654
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 1659
    $24 = HEAP32[$23 >> 2] | 0; //@line 1660
    HEAP32[$23 >> 2] = $6; //@line 1661
    $25 = $0 + 28 | 0; //@line 1662
    HEAP32[$25 >> 2] = $6; //@line 1663
    $26 = $0 + 20 | 0; //@line 1664
    HEAP32[$26 >> 2] = $6; //@line 1665
    HEAP32[$19 >> 2] = 80; //@line 1666
    $28 = $0 + 16 | 0; //@line 1668
    HEAP32[$28 >> 2] = $6 + 80; //@line 1669
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 1670
    if (!$24) {
     $$1 = $29; //@line 1673
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 1676
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 1677
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 1678
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 170; //@line 1681
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 1683
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 1685
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 1687
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 1689
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 1691
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 1693
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 1695
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1697
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 1699
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 1701
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 1703
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 1705
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 1707
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 1709
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 1711
      sp = STACKTOP; //@line 1712
      STACKTOP = sp; //@line 1713
      return 0; //@line 1713
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 1715
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 1718
      HEAP32[$23 >> 2] = $24; //@line 1719
      HEAP32[$19 >> 2] = 0; //@line 1720
      HEAP32[$28 >> 2] = 0; //@line 1721
      HEAP32[$25 >> 2] = 0; //@line 1722
      HEAP32[$26 >> 2] = 0; //@line 1723
      $$1 = $$; //@line 1724
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 1730
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 1733
  HEAP32[$0 >> 2] = $51 | $14; //@line 1738
  if ($43 | 0) {
   ___unlockfile($0); //@line 1741
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 1743
 }
 STACKTOP = sp; //@line 1745
 return $$0 | 0; //@line 1745
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5997
 STACKTOP = STACKTOP + 64 | 0; //@line 5998
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 5998
 $4 = sp; //@line 5999
 $5 = HEAP32[$0 >> 2] | 0; //@line 6000
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 6003
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 6005
 HEAP32[$4 >> 2] = $2; //@line 6006
 HEAP32[$4 + 4 >> 2] = $0; //@line 6008
 HEAP32[$4 + 8 >> 2] = $1; //@line 6010
 HEAP32[$4 + 12 >> 2] = $3; //@line 6012
 $14 = $4 + 16 | 0; //@line 6013
 $15 = $4 + 20 | 0; //@line 6014
 $16 = $4 + 24 | 0; //@line 6015
 $17 = $4 + 28 | 0; //@line 6016
 $18 = $4 + 32 | 0; //@line 6017
 $19 = $4 + 40 | 0; //@line 6018
 dest = $14; //@line 6019
 stop = dest + 36 | 0; //@line 6019
 do {
  HEAP32[dest >> 2] = 0; //@line 6019
  dest = dest + 4 | 0; //@line 6019
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 6019
 HEAP8[$14 + 38 >> 0] = 0; //@line 6019
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 6024
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 6027
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6028
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 6029
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 186; //@line 6032
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 6034
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 6036
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 6038
    sp = STACKTOP; //@line 6039
    STACKTOP = sp; //@line 6040
    return 0; //@line 6040
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6042
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 6046
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 6050
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 6053
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6054
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 6055
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 187; //@line 6058
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 6060
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 6062
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 6064
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 6066
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 6068
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 6070
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 6072
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 6074
    sp = STACKTOP; //@line 6075
    STACKTOP = sp; //@line 6076
    return 0; //@line 6076
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6078
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 6092
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 6100
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 6116
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 6121
  }
 } while (0);
 STACKTOP = sp; //@line 6124
 return $$0 | 0; //@line 6124
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 18498
 do {
  if (!$0) {
   do {
    if (!(HEAP32[220] | 0)) {
     $34 = 0; //@line 18506
    } else {
     $12 = HEAP32[220] | 0; //@line 18508
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18509
     $13 = _fflush($12) | 0; //@line 18510
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 166; //@line 18513
      sp = STACKTOP; //@line 18514
      return 0; //@line 18515
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 18517
      $34 = $13; //@line 18518
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 18524
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 18528
    } else {
     $$02327 = $$02325; //@line 18530
     $$02426 = $34; //@line 18530
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 18537
      } else {
       $28 = 0; //@line 18539
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18547
       $25 = ___fflush_unlocked($$02327) | 0; //@line 18548
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 18553
       $$1 = $25 | $$02426; //@line 18555
      } else {
       $$1 = $$02426; //@line 18557
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 18561
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 18564
      if (!$$023) {
       $$024$lcssa = $$1; //@line 18567
       break L9;
      } else {
       $$02327 = $$023; //@line 18570
       $$02426 = $$1; //@line 18570
      }
     }
     HEAP32[$AsyncCtx >> 2] = 167; //@line 18573
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 18575
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 18577
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 18579
     sp = STACKTOP; //@line 18580
     return 0; //@line 18581
    }
   } while (0);
   ___ofl_unlock(); //@line 18584
   $$0 = $$024$lcssa; //@line 18585
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18591
    $5 = ___fflush_unlocked($0) | 0; //@line 18592
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 164; //@line 18595
     sp = STACKTOP; //@line 18596
     return 0; //@line 18597
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 18599
     $$0 = $5; //@line 18600
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 18605
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18606
   $7 = ___fflush_unlocked($0) | 0; //@line 18607
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 165; //@line 18610
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 18613
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 18615
    sp = STACKTOP; //@line 18616
    return 0; //@line 18617
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18619
   if ($phitmp) {
    $$0 = $7; //@line 18621
   } else {
    ___unlockfile($0); //@line 18623
    $$0 = $7; //@line 18624
   }
  }
 } while (0);
 return $$0 | 0; //@line 18628
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 1494
 $7 = ($2 | 0) != 0; //@line 1498
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 1502
   $$03555 = $0; //@line 1503
   $$03654 = $2; //@line 1503
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 1508
     $$036$lcssa64 = $$03654; //@line 1508
     label = 6; //@line 1509
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 1512
    $12 = $$03654 + -1 | 0; //@line 1513
    $16 = ($12 | 0) != 0; //@line 1517
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 1520
     $$03654 = $12; //@line 1520
    } else {
     $$035$lcssa = $11; //@line 1522
     $$036$lcssa = $12; //@line 1522
     $$lcssa = $16; //@line 1522
     label = 5; //@line 1523
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 1528
   $$036$lcssa = $2; //@line 1528
   $$lcssa = $7; //@line 1528
   label = 5; //@line 1529
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 1534
   $$036$lcssa64 = $$036$lcssa; //@line 1534
   label = 6; //@line 1535
  } else {
   $$2 = $$035$lcssa; //@line 1537
   $$3 = 0; //@line 1537
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 1543
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 1546
    $$3 = $$036$lcssa64; //@line 1546
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 1548
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 1552
      $$13745 = $$036$lcssa64; //@line 1552
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 1555
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 1564
       $30 = $$13745 + -4 | 0; //@line 1565
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 1568
        $$13745 = $30; //@line 1568
       } else {
        $$0$lcssa = $29; //@line 1570
        $$137$lcssa = $30; //@line 1570
        label = 11; //@line 1571
        break L11;
       }
      }
      $$140 = $$046; //@line 1575
      $$23839 = $$13745; //@line 1575
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 1577
      $$137$lcssa = $$036$lcssa64; //@line 1577
      label = 11; //@line 1578
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 1584
      $$3 = 0; //@line 1584
      break;
     } else {
      $$140 = $$0$lcssa; //@line 1587
      $$23839 = $$137$lcssa; //@line 1587
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 1594
      $$3 = $$23839; //@line 1594
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 1597
     $$23839 = $$23839 + -1 | 0; //@line 1598
     if (!$$23839) {
      $$2 = $35; //@line 1601
      $$3 = 0; //@line 1601
      break;
     } else {
      $$140 = $35; //@line 1604
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 1612
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6179
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 6185
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 6191
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 6194
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6195
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 6196
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 190; //@line 6199
     sp = STACKTOP; //@line 6200
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6203
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 6211
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 6216
     $19 = $1 + 44 | 0; //@line 6217
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 6223
     HEAP8[$22 >> 0] = 0; //@line 6224
     $23 = $1 + 53 | 0; //@line 6225
     HEAP8[$23 >> 0] = 0; //@line 6226
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 6228
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 6231
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 6232
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 6233
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 189; //@line 6236
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 6238
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6240
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 6242
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6244
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 6246
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 6248
      sp = STACKTOP; //@line 6249
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 6252
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 6256
      label = 13; //@line 6257
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 6262
       label = 13; //@line 6263
      } else {
       $$037$off039 = 3; //@line 6265
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 6269
      $39 = $1 + 40 | 0; //@line 6270
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 6273
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 6283
        $$037$off039 = $$037$off038; //@line 6284
       } else {
        $$037$off039 = $$037$off038; //@line 6286
       }
      } else {
       $$037$off039 = $$037$off038; //@line 6289
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 6292
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 6299
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_32($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9727
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9729
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9731
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9737
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9739
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 9742
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9744
 $$13 = ($AsyncRetVal | 0) >= ($6 | 0) ? 0 : $AsyncRetVal; //@line 9746
 $18 = (HEAP32[$0 + 16 >> 2] | 0) + $$13 | 0; //@line 9748
 $19 = $6 - $$13 | 0; //@line 9749
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[109] | 0; //@line 9753
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $14 ^ 1) {
     break;
    }
    _snprintf($18, $19, 5679, $10) | 0; //@line 9765
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 9768
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 9769
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 9772
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 9773
    HEAP32[$24 >> 2] = $2; //@line 9774
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 9775
    HEAP32[$25 >> 2] = $18; //@line 9776
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 9777
    HEAP32[$26 >> 2] = $19; //@line 9778
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 9779
    HEAP32[$27 >> 2] = $4; //@line 9780
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 9781
    $$expand_i1_val = $14 & 1; //@line 9782
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 9783
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 9784
    HEAP32[$29 >> 2] = $10; //@line 9785
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 9786
    HEAP32[$30 >> 2] = $12; //@line 9787
    sp = STACKTOP; //@line 9788
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 9792
   ___async_unwind = 0; //@line 9793
   HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 9794
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 9795
   HEAP32[$24 >> 2] = $2; //@line 9796
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 9797
   HEAP32[$25 >> 2] = $18; //@line 9798
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 9799
   HEAP32[$26 >> 2] = $19; //@line 9800
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 9801
   HEAP32[$27 >> 2] = $4; //@line 9802
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 9803
   $$expand_i1_val = $14 & 1; //@line 9804
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 9805
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 9806
   HEAP32[$29 >> 2] = $10; //@line 9807
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 9808
   HEAP32[$30 >> 2] = $12; //@line 9809
   sp = STACKTOP; //@line 9810
   return;
  }
 } while (0);
 $34 = HEAP32[110] | 0; //@line 9814
 $35 = HEAP32[103] | 0; //@line 9815
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 9816
 FUNCTION_TABLE_vi[$34 & 255]($35); //@line 9817
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9820
  sp = STACKTOP; //@line 9821
  return;
 }
 ___async_unwind = 0; //@line 9824
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9825
 sp = STACKTOP; //@line 9826
 return;
}
function _mbed_vtracef__async_cb_33($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9836
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9840
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9842
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9844
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9846
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 9849
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9851
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9853
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9855
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9857
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9859
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9861
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9863
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9865
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9867
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9869
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9871
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9873
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9875
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9877
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9879
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9881
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9883
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9885
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9887
 $55 = ($2 | 0 ? 4 : 0) + $2 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 9893
 $56 = HEAP32[108] | 0; //@line 9894
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 9895
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 9896
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 9900
  ___async_unwind = 0; //@line 9901
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 69; //@line 9903
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 9905
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 9907
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $14; //@line 9909
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $16; //@line 9911
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $18; //@line 9913
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $20; //@line 9915
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $22; //@line 9917
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $24; //@line 9919
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $26; //@line 9921
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $28; //@line 9923
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $30; //@line 9925
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $32; //@line 9927
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $34; //@line 9929
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $36; //@line 9931
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $38; //@line 9933
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $40; //@line 9935
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $42; //@line 9937
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $44; //@line 9939
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $46; //@line 9941
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $48; //@line 9943
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $50; //@line 9945
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $8; //@line 9947
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $10; //@line 9949
 HEAP8[$ReallocAsyncCtx5 + 96 >> 0] = $12 & 1; //@line 9952
 sp = STACKTOP; //@line 9953
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 5491
 STACKTOP = STACKTOP + 48 | 0; //@line 5492
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 5492
 $vararg_buffer10 = sp + 32 | 0; //@line 5493
 $vararg_buffer7 = sp + 24 | 0; //@line 5494
 $vararg_buffer3 = sp + 16 | 0; //@line 5495
 $vararg_buffer = sp; //@line 5496
 $0 = sp + 36 | 0; //@line 5497
 $1 = ___cxa_get_globals_fast() | 0; //@line 5498
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 5501
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 5506
   $9 = HEAP32[$7 >> 2] | 0; //@line 5508
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 5511
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 9244; //@line 5517
    _abort_message(9194, $vararg_buffer7); //@line 5518
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 5527
   } else {
    $22 = $3 + 80 | 0; //@line 5529
   }
   HEAP32[$0 >> 2] = $22; //@line 5531
   $23 = HEAP32[$3 >> 2] | 0; //@line 5532
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 5534
   $28 = HEAP32[(HEAP32[20] | 0) + 16 >> 2] | 0; //@line 5537
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 5538
   $29 = FUNCTION_TABLE_iiii[$28 & 15](80, $23, $0) | 0; //@line 5539
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 180; //@line 5542
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5544
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 5546
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 5548
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 5550
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 5552
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 5554
    sp = STACKTOP; //@line 5555
    STACKTOP = sp; //@line 5556
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 5558
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 9244; //@line 5560
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 5562
    _abort_message(9153, $vararg_buffer3); //@line 5563
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 5566
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 5569
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5570
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 5571
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 181; //@line 5574
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 5576
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 5578
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 5580
    sp = STACKTOP; //@line 5581
    STACKTOP = sp; //@line 5582
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5584
    HEAP32[$vararg_buffer >> 2] = 9244; //@line 5585
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 5587
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 5589
    _abort_message(9108, $vararg_buffer); //@line 5590
   }
  }
 }
 _abort_message(9232, $vararg_buffer10); //@line 5595
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 784
 $5 = $0 + -4 | 0; //@line 785
 $6 = $1 + 8 | 0; //@line 786
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 791
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 799
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 805
   _puts(1620) | 0; //@line 806
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 43; //@line 809
    sp = STACKTOP; //@line 810
    return 0; //@line 811
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 813
   $$1$i = -3012; //@line 814
   return $$1$i | 0; //@line 815
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] | 0; //@line 822
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 823
   $15 = FUNCTION_TABLE_iiii[$14 & 15]($5, $1, $2) | 0; //@line 824
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 44; //@line 827
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 829
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 831
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 833
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 835
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 837
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 839
    sp = STACKTOP; //@line 840
    return 0; //@line 841
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 843
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 846
    return $$1$i | 0; //@line 847
   } else {
    $23 = $1 + 12 | 0; //@line 849
    dest = $23; //@line 850
    src = $2; //@line 850
    stop = dest + 60 | 0; //@line 850
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 850
     dest = dest + 4 | 0; //@line 850
     src = src + 4 | 0; //@line 850
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 850
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 855
 _wait_ms(1); //@line 856
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 45; //@line 859
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 861
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 863
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 865
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 867
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 869
  sp = STACKTOP; //@line 870
  return 0; //@line 871
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 873
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2] | 0; //@line 876
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 877
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 878
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 46; //@line 881
  sp = STACKTOP; //@line 882
  return 0; //@line 883
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 885
 $$1$i = $32; //@line 886
 return $$1$i | 0; //@line 887
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_65($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 14663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14671
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14673
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14675
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14677
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14679
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14681
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14683
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14685
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14687
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14689
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14691
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 14698
  $38 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $2, 512) | 0; //@line 14699
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 14703
   ___async_unwind = 0; //@line 14704
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 117; //@line 14706
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14708
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 14710
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 14712
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 14714
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 14716
  HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 14718
  HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 14720
  HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 14722
  HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 14724
  HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 14726
  HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 14728
  HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 14730
  HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 14732
  HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 14734
  sp = STACKTOP; //@line 14735
  return;
 }
 _free($2); //@line 14738
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 14739
 $32 = __ZN6Socket5closeEv($18) | 0; //@line 14740
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 14743
  $33 = $ReallocAsyncCtx12 + 4 | 0; //@line 14744
  HEAP32[$33 >> 2] = -3009; //@line 14745
  $34 = $ReallocAsyncCtx12 + 8 | 0; //@line 14746
  HEAP32[$34 >> 2] = $20; //@line 14747
  $35 = $ReallocAsyncCtx12 + 12 | 0; //@line 14748
  HEAP32[$35 >> 2] = $24; //@line 14749
  sp = STACKTOP; //@line 14750
  return;
 }
 HEAP32[___async_retval >> 2] = $32; //@line 14754
 ___async_unwind = 0; //@line 14755
 HEAP32[$ReallocAsyncCtx12 >> 2] = 108; //@line 14756
 $33 = $ReallocAsyncCtx12 + 4 | 0; //@line 14757
 HEAP32[$33 >> 2] = -3009; //@line 14758
 $34 = $ReallocAsyncCtx12 + 8 | 0; //@line 14759
 HEAP32[$34 >> 2] = $20; //@line 14760
 $35 = $ReallocAsyncCtx12 + 12 | 0; //@line 14761
 HEAP32[$35 >> 2] = $24; //@line 14762
 sp = STACKTOP; //@line 14763
 return;
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19906
 STACKTOP = STACKTOP + 16 | 0; //@line 19907
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19907
 $4 = sp; //@line 19908
 $$ = ($3 | 0) == 0 ? 10352 : $3; //@line 19910
 $6 = HEAP32[$$ >> 2] | 0; //@line 19911
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 19917
   } else {
    label = 17; //@line 19919
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 19923
   if (!$2) {
    $$0 = -2; //@line 19926
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 19930
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 19934
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 19937
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 19944
     $22 = HEAP8[$1 >> 0] | 0; //@line 19945
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 19949
      $$0 = 1; //@line 19950
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 19954
     if ($26 >>> 0 > 50) {
      label = 17; //@line 19957
      break;
     }
     $30 = HEAP32[884 + ($26 << 2) >> 2] | 0; //@line 19962
     $31 = $2 + -1 | 0; //@line 19963
     if (!$31) {
      $$2 = $30; //@line 19966
     } else {
      $$03952 = $1 + 1 | 0; //@line 19968
      $$04051 = $30; //@line 19968
      $$04350 = $31; //@line 19968
      label = 11; //@line 19969
     }
    } else {
     $$03952 = $1; //@line 19972
     $$04051 = $6; //@line 19972
     $$04350 = $2; //@line 19972
     label = 11; //@line 19973
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 19977
      $35 = ($33 & 255) >>> 3; //@line 19979
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 19986
       break L1;
      } else {
       $$1 = $$03952; //@line 19989
       $$141 = $$04051; //@line 19989
       $$144 = $$04350; //@line 19989
       $44 = $33; //@line 19989
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 19993
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 19996
       $$144 = $$144 + -1 | 0; //@line 19997
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 20004
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 20007
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 20013
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 20017
      HEAP32[$$47 >> 2] = $$141; //@line 20018
      $$0 = $2 - $$144 | 0; //@line 20020
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 20024
    $$0 = -2; //@line 20025
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 20030
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 20032
  $$0 = -1; //@line 20033
 }
 STACKTOP = sp; //@line 20035
 return $$0 | 0; //@line 20035
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10398
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 10400
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10402
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10406
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10408
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10410
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 10415
  $36 = ___async_retval; //@line 10416
  HEAP32[$36 >> 2] = $$0; //@line 10417
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 10420
 $17 = $6 + 8 | 0; //@line 10421
 $18 = $6 + 52 | 0; //@line 10422
 $19 = $6 + 12 | 0; //@line 10423
 $20 = HEAP32[$17 >> 2] | 0; //@line 10424
 if (!$20) {
  $$0 = -3005; //@line 10427
  $36 = ___async_retval; //@line 10428
  HEAP32[$36 >> 2] = $$0; //@line 10429
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 10432
 $22 = HEAP32[$10 >> 2] | 0; //@line 10433
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 60 >> 2] | 0; //@line 10436
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 10437
 $26 = FUNCTION_TABLE_iiiiii[$25 & 7]($22, $20, $2, $12, $14) | 0; //@line 10438
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 10441
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 10442
  HEAP32[$27 >> 2] = $19; //@line 10443
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 10444
  HEAP32[$28 >> 2] = $8; //@line 10445
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 10446
  HEAP32[$29 >> 2] = $17; //@line 10447
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 10448
  HEAP32[$30 >> 2] = $18; //@line 10449
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 10450
  HEAP32[$31 >> 2] = $10; //@line 10451
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 10452
  HEAP32[$32 >> 2] = $2; //@line 10453
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 10454
  HEAP32[$33 >> 2] = $12; //@line 10455
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 10456
  HEAP32[$34 >> 2] = $14; //@line 10457
  sp = STACKTOP; //@line 10458
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 10462
 ___async_unwind = 0; //@line 10463
 HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 10464
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 10465
 HEAP32[$27 >> 2] = $19; //@line 10466
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 10467
 HEAP32[$28 >> 2] = $8; //@line 10468
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 10469
 HEAP32[$29 >> 2] = $17; //@line 10470
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 10471
 HEAP32[$30 >> 2] = $18; //@line 10472
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 10473
 HEAP32[$31 >> 2] = $10; //@line 10474
 $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 10475
 HEAP32[$32 >> 2] = $2; //@line 10476
 $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 10477
 HEAP32[$33 >> 2] = $12; //@line 10478
 $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 10479
 HEAP32[$34 >> 2] = $14; //@line 10480
 sp = STACKTOP; //@line 10481
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_52($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11415
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11417
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11419
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11423
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11425
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11427
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11429
 $$pre = HEAP32[$2 >> 2] | 0; //@line 11430
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 11434
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 11435
  FUNCTION_TABLE_vii[$17 & 3]($6, $8); //@line 11436
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 11439
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 11440
   HEAP32[$18 >> 2] = $2; //@line 11441
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 11442
   HEAP32[$19 >> 2] = $4; //@line 11443
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 11444
   HEAP32[$20 >> 2] = $8; //@line 11445
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 11446
   HEAP32[$21 >> 2] = $10; //@line 11447
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 11448
   HEAP32[$22 >> 2] = $12; //@line 11449
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 11450
   HEAP32[$23 >> 2] = $6; //@line 11451
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 11452
   HEAP32[$24 >> 2] = $14; //@line 11453
   sp = STACKTOP; //@line 11454
   return;
  }
  ___async_unwind = 0; //@line 11457
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 11458
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 11459
  HEAP32[$18 >> 2] = $2; //@line 11460
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 11461
  HEAP32[$19 >> 2] = $4; //@line 11462
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 11463
  HEAP32[$20 >> 2] = $8; //@line 11464
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 11465
  HEAP32[$21 >> 2] = $10; //@line 11466
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 11467
  HEAP32[$22 >> 2] = $12; //@line 11468
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 11469
  HEAP32[$23 >> 2] = $6; //@line 11470
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 11471
  HEAP32[$24 >> 2] = $14; //@line 11472
  sp = STACKTOP; //@line 11473
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 11476
 $25 = HEAP32[$10 >> 2] | 0; //@line 11477
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 68 >> 2] | 0; //@line 11480
 $29 = HEAP32[$12 >> 2] | 0; //@line 11481
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11482
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 88, $6); //@line 11483
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 89; //@line 11486
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 11487
  HEAP32[$30 >> 2] = $14; //@line 11488
  sp = STACKTOP; //@line 11489
  return;
 }
 ___async_unwind = 0; //@line 11492
 HEAP32[$ReallocAsyncCtx6 >> 2] = 89; //@line 11493
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 11494
 HEAP32[$30 >> 2] = $14; //@line 11495
 sp = STACKTOP; //@line 11496
 return;
}
function __ZN9UDPSocket6sendtoEPKctPKvj__async_cb_42($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10495
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10497
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10499
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10501
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10503
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10505
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10507
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 10513
  $37 = ___async_retval; //@line 10514
  HEAP32[$37 >> 2] = $$0; //@line 10515
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 10518
 if (!$18) {
  $$0 = -3005; //@line 10521
  $37 = ___async_retval; //@line 10522
  HEAP32[$37 >> 2] = $$0; //@line 10523
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 10526
 $20 = HEAP32[$10 >> 2] | 0; //@line 10527
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 10530
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 10531
 $24 = FUNCTION_TABLE_iiiiii[$23 & 7]($20, $18, $12, $14, $16) | 0; //@line 10532
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 10535
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 10536
  HEAP32[$25 >> 2] = $2; //@line 10537
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 10538
  HEAP32[$26 >> 2] = $4; //@line 10539
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 10540
  HEAP32[$27 >> 2] = $6; //@line 10541
  $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 10542
  HEAP32[$28 >> 2] = $8; //@line 10543
  $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 10544
  HEAP32[$29 >> 2] = $10; //@line 10545
  $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 10546
  HEAP32[$30 >> 2] = $12; //@line 10547
  $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 10548
  HEAP32[$31 >> 2] = $14; //@line 10549
  $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 10550
  HEAP32[$32 >> 2] = $16; //@line 10551
  sp = STACKTOP; //@line 10552
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 10556
 ___async_unwind = 0; //@line 10557
 HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 10558
 $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 10559
 HEAP32[$25 >> 2] = $2; //@line 10560
 $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 10561
 HEAP32[$26 >> 2] = $4; //@line 10562
 $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 10563
 HEAP32[$27 >> 2] = $6; //@line 10564
 $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 10565
 HEAP32[$28 >> 2] = $8; //@line 10566
 $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 10567
 HEAP32[$29 >> 2] = $10; //@line 10568
 $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 10569
 HEAP32[$30 >> 2] = $12; //@line 10570
 $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 10571
 HEAP32[$31 >> 2] = $14; //@line 10572
 $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 10573
 HEAP32[$32 >> 2] = $16; //@line 10574
 sp = STACKTOP; //@line 10575
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7354
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7356
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[2426] | 0)) {
  _serial_init(9708, 2, 3); //@line 7364
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 7366
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 7372
  _serial_putc(9708, $9 << 24 >> 24); //@line 7373
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 7376
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 7377
   HEAP32[$18 >> 2] = 0; //@line 7378
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 7379
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 7380
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 7381
   HEAP32[$20 >> 2] = $2; //@line 7382
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 7383
   HEAP8[$21 >> 0] = $9; //@line 7384
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 7385
   HEAP32[$22 >> 2] = $4; //@line 7386
   sp = STACKTOP; //@line 7387
   return;
  }
  ___async_unwind = 0; //@line 7390
  HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 7391
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 7392
  HEAP32[$18 >> 2] = 0; //@line 7393
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 7394
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 7395
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 7396
  HEAP32[$20 >> 2] = $2; //@line 7397
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 7398
  HEAP8[$21 >> 0] = $9; //@line 7399
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 7400
  HEAP32[$22 >> 2] = $4; //@line 7401
  sp = STACKTOP; //@line 7402
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 7405
  _serial_putc(9708, 13); //@line 7406
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 138; //@line 7409
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 7410
   HEAP8[$12 >> 0] = $9; //@line 7411
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 7412
   HEAP32[$13 >> 2] = 0; //@line 7413
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 7414
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 7415
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 7416
   HEAP32[$15 >> 2] = $2; //@line 7417
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 7418
   HEAP32[$16 >> 2] = $4; //@line 7419
   sp = STACKTOP; //@line 7420
   return;
  }
  ___async_unwind = 0; //@line 7423
  HEAP32[$ReallocAsyncCtx3 >> 2] = 138; //@line 7424
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 7425
  HEAP8[$12 >> 0] = $9; //@line 7426
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 7427
  HEAP32[$13 >> 2] = 0; //@line 7428
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 7429
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 7430
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 7431
  HEAP32[$15 >> 2] = $2; //@line 7432
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 7433
  HEAP32[$16 >> 2] = $4; //@line 7434
  sp = STACKTOP; //@line 7435
  return;
 }
}
function _mbed_error_vfprintf__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7443
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7447
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7449
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7453
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 7454
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 7460
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 7466
  _serial_putc(9708, $13 << 24 >> 24); //@line 7467
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 7470
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 7471
   HEAP32[$22 >> 2] = $12; //@line 7472
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 7473
   HEAP32[$23 >> 2] = $4; //@line 7474
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 7475
   HEAP32[$24 >> 2] = $6; //@line 7476
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 7477
   HEAP8[$25 >> 0] = $13; //@line 7478
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 7479
   HEAP32[$26 >> 2] = $10; //@line 7480
   sp = STACKTOP; //@line 7481
   return;
  }
  ___async_unwind = 0; //@line 7484
  HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 7485
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 7486
  HEAP32[$22 >> 2] = $12; //@line 7487
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 7488
  HEAP32[$23 >> 2] = $4; //@line 7489
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 7490
  HEAP32[$24 >> 2] = $6; //@line 7491
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 7492
  HEAP8[$25 >> 0] = $13; //@line 7493
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 7494
  HEAP32[$26 >> 2] = $10; //@line 7495
  sp = STACKTOP; //@line 7496
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 7499
  _serial_putc(9708, 13); //@line 7500
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 138; //@line 7503
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 7504
   HEAP8[$16 >> 0] = $13; //@line 7505
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 7506
   HEAP32[$17 >> 2] = $12; //@line 7507
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 7508
   HEAP32[$18 >> 2] = $4; //@line 7509
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 7510
   HEAP32[$19 >> 2] = $6; //@line 7511
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 7512
   HEAP32[$20 >> 2] = $10; //@line 7513
   sp = STACKTOP; //@line 7514
   return;
  }
  ___async_unwind = 0; //@line 7517
  HEAP32[$ReallocAsyncCtx3 >> 2] = 138; //@line 7518
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 7519
  HEAP8[$16 >> 0] = $13; //@line 7520
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 7521
  HEAP32[$17 >> 2] = $12; //@line 7522
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 7523
  HEAP32[$18 >> 2] = $4; //@line 7524
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 7525
  HEAP32[$19 >> 2] = $6; //@line 7526
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 7527
  HEAP32[$20 >> 2] = $10; //@line 7528
  sp = STACKTOP; //@line 7529
  return;
 }
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17528
 STACKTOP = STACKTOP + 48 | 0; //@line 17529
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 17529
 $vararg_buffer3 = sp + 16 | 0; //@line 17530
 $vararg_buffer = sp; //@line 17531
 $3 = sp + 32 | 0; //@line 17532
 $4 = $0 + 28 | 0; //@line 17533
 $5 = HEAP32[$4 >> 2] | 0; //@line 17534
 HEAP32[$3 >> 2] = $5; //@line 17535
 $7 = $0 + 20 | 0; //@line 17537
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 17539
 HEAP32[$3 + 4 >> 2] = $9; //@line 17540
 HEAP32[$3 + 8 >> 2] = $1; //@line 17542
 HEAP32[$3 + 12 >> 2] = $2; //@line 17544
 $12 = $9 + $2 | 0; //@line 17545
 $13 = $0 + 60 | 0; //@line 17546
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 17549
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 17551
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 17553
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 17555
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 17559
  } else {
   $$04756 = 2; //@line 17561
   $$04855 = $12; //@line 17561
   $$04954 = $3; //@line 17561
   $27 = $17; //@line 17561
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 17567
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 17569
    $38 = $27 >>> 0 > $37 >>> 0; //@line 17570
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 17572
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 17574
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 17576
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 17579
    $44 = $$150 + 4 | 0; //@line 17580
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 17583
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 17586
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 17588
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 17590
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 17592
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 17595
     break L1;
    } else {
     $$04756 = $$1; //@line 17598
     $$04954 = $$150; //@line 17598
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 17602
   HEAP32[$4 >> 2] = 0; //@line 17603
   HEAP32[$7 >> 2] = 0; //@line 17604
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 17607
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 17610
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 17615
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 17621
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 17626
  $25 = $20; //@line 17627
  HEAP32[$4 >> 2] = $25; //@line 17628
  HEAP32[$7 >> 2] = $25; //@line 17629
  $$051 = $2; //@line 17630
 }
 STACKTOP = sp; //@line 17632
 return $$051 | 0; //@line 17632
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 386
 $5 = $1 + 8 | 0; //@line 387
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 392
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 400
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 406
   _puts(1620) | 0; //@line 407
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 30; //@line 410
    sp = STACKTOP; //@line 411
    return 0; //@line 412
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 414
   $$1 = -3012; //@line 415
   return $$1 | 0; //@line 416
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 80 >> 2] | 0; //@line 423
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 424
   $14 = FUNCTION_TABLE_iiii[$13 & 15]($0, $1, $2) | 0; //@line 425
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 31; //@line 428
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 430
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 432
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 434
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 436
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 438
    sp = STACKTOP; //@line 439
    return 0; //@line 440
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 442
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 445
    return $$1 | 0; //@line 446
   } else {
    $21 = $1 + 12 | 0; //@line 448
    dest = $21; //@line 449
    src = $2; //@line 449
    stop = dest + 60 | 0; //@line 449
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 449
     dest = dest + 4 | 0; //@line 449
     src = src + 4 | 0; //@line 449
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 449
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 454
 _wait_ms(1); //@line 455
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 32; //@line 458
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 460
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 462
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 464
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 466
  sp = STACKTOP; //@line 467
  return 0; //@line 468
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 470
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 473
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 474
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 475
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 33; //@line 478
  sp = STACKTOP; //@line 479
  return 0; //@line 480
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 482
 $$1 = $29; //@line 483
 return $$1 | 0; //@line 484
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $$byval_copy = 0, $12 = 0, $13 = 0, $22 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8699
 STACKTOP = STACKTOP + 112 | 0; //@line 8700
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 8700
 $$byval_copy = sp + 88 | 0; //@line 8701
 $4 = sp + 24 | 0; //@line 8702
 $5 = sp; //@line 8703
 $7 = ($3 | 0) == 0; //@line 8705
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$7) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$09 = -3009; //@line 8711
    STACKTOP = sp; //@line 8712
    return $$09 | 0; //@line 8712
   }
  }
  $$09 = 0; //@line 8715
  STACKTOP = sp; //@line 8716
  return $$09 | 0; //@line 8716
 }
 if ($7) {
  HEAP32[$5 >> 2] = 0; //@line 8719
  HEAP32[$5 + 4 >> 2] = 0; //@line 8719
  HEAP32[$5 + 8 >> 2] = 0; //@line 8719
  HEAP32[$5 + 12 >> 2] = 0; //@line 8719
  HEAP32[$5 + 16 >> 2] = 0; //@line 8719
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 8720
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 8720
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 8720
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 8720
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 8720
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 8721
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 8724
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 8725
  $13 = FUNCTION_TABLE_ii[$12 & 15]($0) | 0; //@line 8726
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 79; //@line 8729
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8731
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 8733
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8735
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 8737
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8739
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 8741
   sp = STACKTOP; //@line 8742
   STACKTOP = sp; //@line 8743
   return 0; //@line 8743
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8745
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $13) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 8749
  } else {
   $$0 = 0; //@line 8751
  }
  $$1 = $$0; //@line 8753
 } else {
  $$1 = $3; //@line 8755
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8757
 $22 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 8758
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 80; //@line 8761
  sp = STACKTOP; //@line 8762
  STACKTOP = sp; //@line 8763
  return 0; //@line 8763
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8765
 $$09 = $22; //@line 8766
 STACKTOP = sp; //@line 8767
 return $$09 | 0; //@line 8767
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10922
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10924
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10926
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10928
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10930
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10932
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10934
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10936
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10938
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 10944
  $34 = ___async_retval; //@line 10945
  HEAP32[$34 >> 2] = $$2; //@line 10946
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 10949
 if (!$16) {
  $$2 = -3005; //@line 10952
  $34 = ___async_retval; //@line 10953
  HEAP32[$34 >> 2] = $$2; //@line 10954
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 10957
 $18 = HEAP32[$8 >> 2] | 0; //@line 10958
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 64 >> 2] | 0; //@line 10961
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 10962
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 10963
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 104; //@line 10966
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 10967
  HEAP32[$23 >> 2] = $2; //@line 10968
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 10969
  HEAP32[$24 >> 2] = $4; //@line 10970
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 10971
  HEAP32[$25 >> 2] = $6; //@line 10972
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 10973
  HEAP32[$26 >> 2] = $8; //@line 10974
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 10975
  HEAP32[$27 >> 2] = $10; //@line 10976
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 10977
  HEAP32[$28 >> 2] = $12; //@line 10978
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 10979
  HEAP32[$29 >> 2] = $14; //@line 10980
  sp = STACKTOP; //@line 10981
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 10985
 ___async_unwind = 0; //@line 10986
 HEAP32[$ReallocAsyncCtx >> 2] = 104; //@line 10987
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 10988
 HEAP32[$23 >> 2] = $2; //@line 10989
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 10990
 HEAP32[$24 >> 2] = $4; //@line 10991
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 10992
 HEAP32[$25 >> 2] = $6; //@line 10993
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 10994
 HEAP32[$26 >> 2] = $8; //@line 10995
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 10996
 HEAP32[$27 >> 2] = $10; //@line 10997
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 10998
 HEAP32[$28 >> 2] = $12; //@line 10999
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 11000
 HEAP32[$29 >> 2] = $14; //@line 11001
 sp = STACKTOP; //@line 11002
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11632
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11636
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11638
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11640
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11642
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11644
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11646
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11648
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 11654
  $34 = ___async_retval; //@line 11655
  HEAP32[$34 >> 2] = $$2; //@line 11656
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 11659
 if (!$16) {
  $$2 = -3005; //@line 11662
  $34 = ___async_retval; //@line 11663
  HEAP32[$34 >> 2] = $$2; //@line 11664
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 11667
 $18 = HEAP32[$8 >> 2] | 0; //@line 11668
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 60 >> 2] | 0; //@line 11671
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 11672
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 11673
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 103; //@line 11676
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 11677
  HEAP32[$23 >> 2] = $2; //@line 11678
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 11679
  HEAP32[$24 >> 2] = $4; //@line 11680
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 11681
  HEAP32[$25 >> 2] = $6; //@line 11682
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 11683
  HEAP32[$26 >> 2] = $8; //@line 11684
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 11685
  HEAP32[$27 >> 2] = $10; //@line 11686
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 11687
  HEAP32[$28 >> 2] = $12; //@line 11688
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 11689
  HEAP32[$29 >> 2] = $14; //@line 11690
  sp = STACKTOP; //@line 11691
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 11695
 ___async_unwind = 0; //@line 11696
 HEAP32[$ReallocAsyncCtx >> 2] = 103; //@line 11697
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 11698
 HEAP32[$23 >> 2] = $2; //@line 11699
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 11700
 HEAP32[$24 >> 2] = $4; //@line 11701
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 11702
 HEAP32[$25 >> 2] = $6; //@line 11703
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 11704
 HEAP32[$26 >> 2] = $8; //@line 11705
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 11706
 HEAP32[$27 >> 2] = $10; //@line 11707
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 11708
 HEAP32[$28 >> 2] = $12; //@line 11709
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 11710
 HEAP32[$29 >> 2] = $14; //@line 11711
 sp = STACKTOP; //@line 11712
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_53($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11503
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11509
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11511
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11513
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11515
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11517
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11518
 $15 = $$pre$i$i; //@line 11519
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 11520
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 11523
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 68 >> 2] | 0; //@line 11526
  $28 = HEAP32[$10 >> 2] | 0; //@line 11527
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11528
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 88, $12); //@line 11529
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 89; //@line 11532
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 11533
   HEAP32[$29 >> 2] = $14; //@line 11534
   sp = STACKTOP; //@line 11535
   return;
  }
  ___async_unwind = 0; //@line 11538
  HEAP32[$ReallocAsyncCtx6 >> 2] = 89; //@line 11539
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 11540
  HEAP32[$29 >> 2] = $14; //@line 11541
  sp = STACKTOP; //@line 11542
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 11546
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 11547
  FUNCTION_TABLE_vi[$18 & 255]($6); //@line 11548
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 87; //@line 11551
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 11552
   HEAP32[$19 >> 2] = $6; //@line 11553
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 11554
   HEAP32[$20 >> 2] = $8; //@line 11555
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 11556
   HEAP32[$21 >> 2] = $10; //@line 11557
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 11558
   HEAP32[$22 >> 2] = $12; //@line 11559
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 11560
   HEAP32[$23 >> 2] = $14; //@line 11561
   sp = STACKTOP; //@line 11562
   return;
  }
  ___async_unwind = 0; //@line 11565
  HEAP32[$ReallocAsyncCtx5 >> 2] = 87; //@line 11566
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 11567
  HEAP32[$19 >> 2] = $6; //@line 11568
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 11569
  HEAP32[$20 >> 2] = $8; //@line 11570
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 11571
  HEAP32[$21 >> 2] = $10; //@line 11572
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 11573
  HEAP32[$22 >> 2] = $12; //@line 11574
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 11575
  HEAP32[$23 >> 2] = $14; //@line 11576
  sp = STACKTOP; //@line 11577
  return;
 }
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 12333
 STACKTOP = STACKTOP + 128 | 0; //@line 12334
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 12334
 $2 = sp; //@line 12335
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12336
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 12337
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 12340
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 12342
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12344
  sp = STACKTOP; //@line 12345
  STACKTOP = sp; //@line 12346
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12348
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 12351
  return;
 }
 if (!(HEAP32[2426] | 0)) {
  _serial_init(9708, 2, 3); //@line 12356
  $$01213 = 0; //@line 12357
  $$014 = 0; //@line 12357
 } else {
  $$01213 = 0; //@line 12359
  $$014 = 0; //@line 12359
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 12363
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12368
   _serial_putc(9708, 13); //@line 12369
   if (___async) {
    label = 8; //@line 12372
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12375
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12378
  _serial_putc(9708, $$01213 << 24 >> 24); //@line 12379
  if (___async) {
   label = 11; //@line 12382
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12385
  $24 = $$014 + 1 | 0; //@line 12386
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 12389
   break;
  } else {
   $$014 = $24; //@line 12392
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 138; //@line 12396
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 12398
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 12400
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 12402
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 12404
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 12406
  sp = STACKTOP; //@line 12407
  STACKTOP = sp; //@line 12408
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 139; //@line 12411
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 12413
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12415
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 12417
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 12419
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 12421
  sp = STACKTOP; //@line 12422
  STACKTOP = sp; //@line 12423
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 12426
  return;
 }
}
function _randLIB_seed_random() {
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $44 = 0, $45 = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $74 = 0, $75 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0;
 $0 = _arm_random_seed_get() | 0; //@line 1066
 $1 = _arm_random_seed_get() | 0; //@line 1067
 $2 = 9688; //@line 1068
 $9 = $0 ^ HEAP32[$2 + 4 >> 2]; //@line 1075
 $10 = 9688; //@line 1076
 HEAP32[$10 >> 2] = $1 ^ HEAP32[$2 >> 2]; //@line 1078
 HEAP32[$10 + 4 >> 2] = $9; //@line 1081
 $14 = _arm_random_seed_get() | 0; //@line 1082
 $15 = _arm_random_seed_get() | 0; //@line 1083
 $16 = 9696; //@line 1084
 $22 = $15 ^ HEAP32[$16 >> 2]; //@line 1090
 $23 = $14 ^ HEAP32[$16 + 4 >> 2]; //@line 1091
 $24 = 9696; //@line 1092
 HEAP32[$24 >> 2] = $22; //@line 1094
 HEAP32[$24 + 4 >> 2] = $23; //@line 1097
 $28 = 9688; //@line 1098
 if (!((HEAP32[$28 >> 2] | 0) == ($22 | 0) ? (HEAP32[$28 + 4 >> 2] | 0) == ($23 | 0) : 0)) {
  return;
 }
 $37 = _i64Add($22 | 0, $23 | 0, 2135587861, -1640531527) | 0; //@line 1110
 $38 = tempRet0; //@line 1111
 $39 = _bitshift64Lshr($37 | 0, $38 | 0, 30) | 0; //@line 1112
 $43 = ___muldi3($39 ^ $37 | 0, tempRet0 ^ $38 | 0, 484763065, -1084733587) | 0; //@line 1116
 $44 = tempRet0; //@line 1117
 $45 = _bitshift64Lshr($43 | 0, $44 | 0, 27) | 0; //@line 1118
 $49 = ___muldi3($45 ^ $43 | 0, tempRet0 ^ $44 | 0, 321982955, -1798288965) | 0; //@line 1122
 $50 = tempRet0; //@line 1123
 $51 = _bitshift64Lshr($49 | 0, $50 | 0, 31) | 0; //@line 1124
 $55 = $49 ^ $22 ^ $51; //@line 1128
 $56 = $50 ^ $23 ^ tempRet0; //@line 1129
 $57 = 9688; //@line 1130
 HEAP32[$57 >> 2] = $55; //@line 1132
 HEAP32[$57 + 4 >> 2] = $56; //@line 1135
 $61 = _i64Add($22 | 0, $23 | 0, -23791574, 1013904242) | 0; //@line 1136
 $62 = tempRet0; //@line 1137
 $63 = _bitshift64Lshr($61 | 0, $62 | 0, 30) | 0; //@line 1138
 $67 = ___muldi3($63 ^ $61 | 0, tempRet0 ^ $62 | 0, 484763065, -1084733587) | 0; //@line 1142
 $68 = tempRet0; //@line 1143
 $69 = _bitshift64Lshr($67 | 0, $68 | 0, 27) | 0; //@line 1144
 $73 = ___muldi3($69 ^ $67 | 0, tempRet0 ^ $68 | 0, 321982955, -1798288965) | 0; //@line 1148
 $74 = tempRet0; //@line 1149
 $75 = _bitshift64Lshr($73 | 0, $74 | 0, 31) | 0; //@line 1150
 $79 = $75 ^ $73 ^ $22; //@line 1154
 $80 = tempRet0 ^ $74 ^ $23; //@line 1155
 $81 = 9696; //@line 1156
 HEAP32[$81 >> 2] = $79; //@line 1158
 HEAP32[$81 + 4 >> 2] = $80; //@line 1161
 if (!(($79 | $55 | 0) == 0 & ($80 | $56 | 0) == 0)) {
  return;
 }
 $90 = 9688; //@line 1170
 HEAP32[$90 >> 2] = 1; //@line 1172
 HEAP32[$90 + 4 >> 2] = 0; //@line 1175
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_4($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7734
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7738
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7740
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 7742
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7744
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 7746
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7748
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7750
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7752
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7754
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 7757
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7759
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 7763
   $27 = $6 + 24 | 0; //@line 7764
   $28 = $4 + 8 | 0; //@line 7765
   $29 = $6 + 54 | 0; //@line 7766
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 7796
    HEAP8[$14 >> 0] = 0; //@line 7797
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 7798
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 7799
    if (!___async) {
     ___async_unwind = 0; //@line 7802
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 195; //@line 7804
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 7806
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 7808
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 7810
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 7812
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 7814
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 7816
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 7818
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 7820
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 7822
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 7824
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 7826
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 7828
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 7830
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 7833
    sp = STACKTOP; //@line 7834
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 7839
 HEAP8[$14 >> 0] = $12; //@line 7840
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7618
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7622
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7624
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 7626
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7628
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 7630
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7632
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7634
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7636
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7638
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7640
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7642
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7644
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 7647
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 7648
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 7681
    HEAP8[$14 >> 0] = 0; //@line 7682
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 7683
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 7684
    if (!___async) {
     ___async_unwind = 0; //@line 7687
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 195; //@line 7689
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 7691
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 7693
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 7695
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 7697
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 7699
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 7701
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 7703
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 7705
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 7707
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 7709
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 7711
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 7713
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 7715
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 7718
    sp = STACKTOP; //@line 7719
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 7724
 HEAP8[$14 >> 0] = $12; //@line 7725
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 4398
 }
 ret = dest | 0; //@line 4401
 dest_end = dest + num | 0; //@line 4402
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 4406
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 4407
   dest = dest + 1 | 0; //@line 4408
   src = src + 1 | 0; //@line 4409
   num = num - 1 | 0; //@line 4410
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 4412
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 4413
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 4415
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 4416
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 4417
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 4418
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 4419
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 4420
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 4421
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 4422
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 4423
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 4424
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 4425
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 4426
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 4427
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 4428
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 4429
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 4430
   dest = dest + 64 | 0; //@line 4431
   src = src + 64 | 0; //@line 4432
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 4435
   dest = dest + 4 | 0; //@line 4436
   src = src + 4 | 0; //@line 4437
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 4441
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 4443
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 4444
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 4445
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 4446
   dest = dest + 4 | 0; //@line 4447
   src = src + 4 | 0; //@line 4448
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 4453
  dest = dest + 1 | 0; //@line 4454
  src = src + 1 | 0; //@line 4455
 }
 return ret | 0; //@line 4457
}
function __Z17recv_coap_messagev__async_cb_22($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $41 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8530
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8532
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8536
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8538
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8542
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8544
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8546
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8548
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8550
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8552
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8554
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8556
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8558
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8560
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8562
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8564
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8566
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8568
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8570
 if (($AsyncRetVal | 0) <= 0) {
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 8573
  _printf(6174, $8) | 0; //@line 8574
  _free($6); //@line 8575
  return;
 }
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 8578
 _printf(6001, $2) | 0; //@line 8579
 $41 = HEAP32[2443] | 0; //@line 8580
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 8582
 $43 = _sn_coap_parser($41, $AsyncRetVal & 65535, $6, 620) | 0; //@line 8583
 if (!___async) {
  HEAP32[___async_retval >> 2] = $43; //@line 8587
  ___async_unwind = 0; //@line 8588
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 149; //@line 8590
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 8592
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $16; //@line 8594
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $18; //@line 8596
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $20; //@line 8598
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $22; //@line 8600
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $24; //@line 8602
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $26; //@line 8604
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $28; //@line 8606
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 8608
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 8610
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 8612
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 8614
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 8616
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $6; //@line 8618
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $12; //@line 8620
 sp = STACKTOP; //@line 8621
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5680
 STACKTOP = STACKTOP + 64 | 0; //@line 5681
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 5681
 $3 = sp; //@line 5682
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 5685
 } else {
  if (!$1) {
   $$2 = 0; //@line 5689
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5691
   $6 = ___dynamic_cast($1, 104, 88, 0) | 0; //@line 5692
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 184; //@line 5695
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5697
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5699
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 5701
    sp = STACKTOP; //@line 5702
    STACKTOP = sp; //@line 5703
    return 0; //@line 5703
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5705
   if (!$6) {
    $$2 = 0; //@line 5708
   } else {
    dest = $3 + 4 | 0; //@line 5711
    stop = dest + 52 | 0; //@line 5711
    do {
     HEAP32[dest >> 2] = 0; //@line 5711
     dest = dest + 4 | 0; //@line 5711
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 5712
    HEAP32[$3 + 8 >> 2] = $0; //@line 5714
    HEAP32[$3 + 12 >> 2] = -1; //@line 5716
    HEAP32[$3 + 48 >> 2] = 1; //@line 5718
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 5721
    $18 = HEAP32[$2 >> 2] | 0; //@line 5722
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5723
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 5724
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 185; //@line 5727
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 5729
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5731
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5733
     sp = STACKTOP; //@line 5734
     STACKTOP = sp; //@line 5735
     return 0; //@line 5735
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5737
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 5744
     $$0 = 1; //@line 5745
    } else {
     $$0 = 0; //@line 5747
    }
    $$2 = $$0; //@line 5749
   }
  }
 }
 STACKTOP = sp; //@line 5753
 return $$2 | 0; //@line 5753
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 586
 STACKTOP = STACKTOP + 48 | 0; //@line 587
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 587
 $$byval_copy = sp + 20 | 0; //@line 588
 $3 = sp; //@line 589
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 590
 $4 = __Znwj(76) | 0; //@line 591
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 37; //@line 594
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 596
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 598
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 600
  sp = STACKTOP; //@line 601
  STACKTOP = sp; //@line 602
  return 0; //@line 602
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 604
 dest = $4; //@line 605
 stop = dest + 76 | 0; //@line 605
 do {
  HEAP32[dest >> 2] = 0; //@line 605
  dest = dest + 4 | 0; //@line 605
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 606
 HEAP32[$3 >> 2] = 0; //@line 607
 HEAP32[$3 + 4 >> 2] = 0; //@line 607
 HEAP32[$3 + 8 >> 2] = 0; //@line 607
 HEAP32[$3 + 12 >> 2] = 0; //@line 607
 HEAP32[$3 + 16 >> 2] = 0; //@line 607
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 608
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 608
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 608
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 608
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 608
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 609
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 610
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 613
  STACKTOP = sp; //@line 614
  return $$0$i | 0; //@line 614
 }
 HEAP32[$4 >> 2] = $9; //@line 616
 HEAP8[$4 + 8 >> 0] = 0; //@line 618
 HEAP32[$4 + 4 >> 2] = $2; //@line 620
 HEAP32[$1 >> 2] = $4; //@line 621
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 622
 _wait_ms(1); //@line 623
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 38; //@line 626
  sp = STACKTOP; //@line 627
  STACKTOP = sp; //@line 628
  return 0; //@line 628
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 630
 $$0$i = 0; //@line 631
 STACKTOP = sp; //@line 632
 return $$0$i | 0; //@line 632
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7012
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 7018
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 7022
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 7023
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7024
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 7025
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 201; //@line 7028
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 7030
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7032
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 7034
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 7036
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 7038
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 7040
    sp = STACKTOP; //@line 7041
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7044
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 7048
    $$0 = $0 + 24 | 0; //@line 7049
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 7051
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 7052
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 7057
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 7063
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 7066
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 202; //@line 7071
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 7073
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 7075
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 7077
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 7079
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 7081
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 7083
    sp = STACKTOP; //@line 7084
    return;
   }
  }
 } while (0);
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 189
 STACKTOP = STACKTOP + 48 | 0; //@line 190
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 190
 $$byval_copy = sp + 20 | 0; //@line 191
 $3 = sp; //@line 192
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 193
 $4 = __Znwj(76) | 0; //@line 194
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 24; //@line 197
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 199
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 201
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 203
  sp = STACKTOP; //@line 204
  STACKTOP = sp; //@line 205
  return 0; //@line 205
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 207
 dest = $4; //@line 208
 stop = dest + 76 | 0; //@line 208
 do {
  HEAP32[dest >> 2] = 0; //@line 208
  dest = dest + 4 | 0; //@line 208
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 209
 HEAP32[$3 >> 2] = 0; //@line 210
 HEAP32[$3 + 4 >> 2] = 0; //@line 210
 HEAP32[$3 + 8 >> 2] = 0; //@line 210
 HEAP32[$3 + 12 >> 2] = 0; //@line 210
 HEAP32[$3 + 16 >> 2] = 0; //@line 210
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 211
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 211
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 211
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 211
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 211
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 212
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 213
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 216
  STACKTOP = sp; //@line 217
  return $$0 | 0; //@line 217
 }
 HEAP32[$4 >> 2] = $9; //@line 219
 HEAP8[$4 + 8 >> 0] = 0; //@line 221
 HEAP32[$4 + 4 >> 2] = $2; //@line 223
 HEAP32[$1 >> 2] = $4; //@line 224
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 225
 _wait_ms(1); //@line 226
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 25; //@line 229
  sp = STACKTOP; //@line 230
  STACKTOP = sp; //@line 231
  return 0; //@line 231
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 233
 $$0 = 0; //@line 234
 STACKTOP = sp; //@line 235
 return $$0 | 0; //@line 235
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5027
 STACKTOP = STACKTOP + 128 | 0; //@line 5028
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5028
 $4 = sp + 124 | 0; //@line 5029
 $5 = sp; //@line 5030
 dest = $5; //@line 5031
 src = 1372; //@line 5031
 stop = dest + 124 | 0; //@line 5031
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5031
  dest = dest + 4 | 0; //@line 5031
  src = src + 4 | 0; //@line 5031
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 5037
   $$015 = 1; //@line 5037
   label = 4; //@line 5038
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 5041
   $$0 = -1; //@line 5042
  }
 } else {
  $$014 = $0; //@line 5045
  $$015 = $1; //@line 5045
  label = 4; //@line 5046
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 5050
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 5052
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 5054
  $14 = $5 + 20 | 0; //@line 5055
  HEAP32[$14 >> 2] = $$014; //@line 5056
  HEAP32[$5 + 44 >> 2] = $$014; //@line 5058
  $16 = $$014 + $$$015 | 0; //@line 5059
  $17 = $5 + 16 | 0; //@line 5060
  HEAP32[$17 >> 2] = $16; //@line 5061
  HEAP32[$5 + 28 >> 2] = $16; //@line 5063
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 5064
  $19 = _vfprintf($5, $2, $3) | 0; //@line 5065
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 172; //@line 5068
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 5070
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5072
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5074
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 5076
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 5078
   sp = STACKTOP; //@line 5079
   STACKTOP = sp; //@line 5080
   return 0; //@line 5080
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5082
  if (!$$$015) {
   $$0 = $19; //@line 5085
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 5087
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 5092
   $$0 = $19; //@line 5093
  }
 }
 STACKTOP = sp; //@line 5096
 return $$0 | 0; //@line 5096
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 18249
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 18252
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 18255
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 18258
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 18264
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 18273
     $24 = $13 >>> 2; //@line 18274
     $$090 = 0; //@line 18275
     $$094 = $7; //@line 18275
     while (1) {
      $25 = $$094 >>> 1; //@line 18277
      $26 = $$090 + $25 | 0; //@line 18278
      $27 = $26 << 1; //@line 18279
      $28 = $27 + $23 | 0; //@line 18280
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 18283
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 18287
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 18293
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 18301
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 18305
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 18311
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 18316
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 18319
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 18319
      }
     }
     $46 = $27 + $24 | 0; //@line 18322
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 18325
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 18329
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 18341
     } else {
      $$4 = 0; //@line 18343
     }
    } else {
     $$4 = 0; //@line 18346
    }
   } else {
    $$4 = 0; //@line 18349
   }
  } else {
   $$4 = 0; //@line 18352
  }
 } while (0);
 return $$4 | 0; //@line 18355
}
function _sn_coap_builder_options_build_add_one_option($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$sink13 = 0, $$sink63 = 0, $$sink7 = 0, $14 = 0, $17 = 0, $23 = 0, $25 = 0, $34 = 0, $43 = 0, $47 = 0, $52 = 0, $54 = 0, $56 = 0, $8 = 0, $9 = 0, label = 0;
 if (!$2) {
  $$0 = 0; //@line 4592
  return $$0 | 0; //@line 4593
 }
 $8 = $3 - (HEAPU16[$4 >> 1] | 0) | 0; //@line 4597
 $9 = $1 & 65535; //@line 4598
 HEAP8[HEAP32[$0 >> 2] >> 0] = ($1 & 65535) < 13 ? $1 & 255 : ($1 & 65535) < 269 ? 13 : 14; //@line 4605
 $14 = $8 & 65535; //@line 4606
 do {
  if ($14 >>> 0 < 13) {
   $17 = HEAP32[$0 >> 2] | 0; //@line 4611
   HEAP8[$17 >> 0] = ($14 << 4) + (HEAPU8[$17 >> 0] | 0); //@line 4616
   $$sink7 = 1; //@line 4617
  } else {
   $23 = HEAP32[$0 >> 2] | 0; //@line 4620
   $25 = HEAPU8[$23 >> 0] | 0; //@line 4622
   if ($14 >>> 0 < 269) {
    HEAP8[$23 >> 0] = $25 + 208; //@line 4626
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $8 + 243; //@line 4631
    $$sink7 = 2; //@line 4632
    break;
   } else {
    HEAP8[$23 >> 0] = $25 + 224; //@line 4637
    $34 = $8 + 65267 | 0; //@line 4638
    HEAP8[(HEAP32[$0 >> 2] | 0) + 2 >> 0] = $34; //@line 4642
    HEAP8[(HEAP32[$0 >> 2] | 0) + 1 >> 0] = $34 >>> 8; //@line 4647
    $$sink7 = 3; //@line 4648
    break;
   }
  }
 } while (0);
 $43 = (HEAP32[$0 >> 2] | 0) + $$sink7 | 0; //@line 4654
 HEAP32[$0 >> 2] = $43; //@line 4655
 if (($1 + -13 & 65535) < 256) {
  $$sink13 = 1; //@line 4660
  $$sink63 = $9 + 243 | 0; //@line 4660
  $52 = $43; //@line 4660
  label = 11; //@line 4661
 } else {
  if (($1 & 65535) > 268) {
   $47 = $9 + -269 | 0; //@line 4665
   HEAP8[$43 + 1 >> 0] = $47; //@line 4668
   $$sink13 = 2; //@line 4671
   $$sink63 = $47 >>> 8; //@line 4671
   $52 = HEAP32[$0 >> 2] | 0; //@line 4671
   label = 11; //@line 4672
  } else {
   $56 = $43; //@line 4674
  }
 }
 if ((label | 0) == 11) {
  HEAP8[$52 >> 0] = $$sink63; //@line 4679
  $54 = (HEAP32[$0 >> 2] | 0) + $$sink13 | 0; //@line 4681
  HEAP32[$0 >> 2] = $54; //@line 4682
  $56 = $54; //@line 4683
 }
 HEAP16[$4 >> 1] = $3; //@line 4686
 _memcpy($56 | 0, $2 | 0, $9 | 0) | 0; //@line 4687
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $9; //@line 4690
 $$0 = 1; //@line 4691
 return $$0 | 0; //@line 4692
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17914
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 17919
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 17924
  } else {
   $20 = $0 & 255; //@line 17926
   $21 = $0 & 255; //@line 17927
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 17933
   } else {
    $26 = $1 + 20 | 0; //@line 17935
    $27 = HEAP32[$26 >> 2] | 0; //@line 17936
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 17942
     HEAP8[$27 >> 0] = $20; //@line 17943
     $34 = $21; //@line 17944
    } else {
     label = 12; //@line 17946
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 17951
     $32 = ___overflow($1, $0) | 0; //@line 17952
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 162; //@line 17955
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 17957
      sp = STACKTOP; //@line 17958
      return 0; //@line 17959
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 17961
      $34 = $32; //@line 17962
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 17967
   $$0 = $34; //@line 17968
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 17973
   $8 = $0 & 255; //@line 17974
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 17980
    $14 = HEAP32[$13 >> 2] | 0; //@line 17981
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 17987
     HEAP8[$14 >> 0] = $7; //@line 17988
     $$0 = $8; //@line 17989
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17993
   $19 = ___overflow($1, $0) | 0; //@line 17994
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 161; //@line 17997
    sp = STACKTOP; //@line 17998
    return 0; //@line 17999
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18001
    $$0 = $19; //@line 18002
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 18007
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18634
 $1 = $0 + 20 | 0; //@line 18635
 $3 = $0 + 28 | 0; //@line 18637
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 18643
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18644
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 18645
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 168; //@line 18648
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 18650
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 18652
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 18654
    sp = STACKTOP; //@line 18655
    return 0; //@line 18656
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18658
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 18662
     break;
    } else {
     label = 5; //@line 18665
     break;
    }
   }
  } else {
   label = 5; //@line 18670
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 18674
  $14 = HEAP32[$13 >> 2] | 0; //@line 18675
  $15 = $0 + 8 | 0; //@line 18676
  $16 = HEAP32[$15 >> 2] | 0; //@line 18677
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 18685
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18686
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 18687
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 169; //@line 18690
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18692
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 18694
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 18696
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 18698
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 18700
     sp = STACKTOP; //@line 18701
     return 0; //@line 18702
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18704
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 18710
  HEAP32[$3 >> 2] = 0; //@line 18711
  HEAP32[$1 >> 2] = 0; //@line 18712
  HEAP32[$15 >> 2] = 0; //@line 18713
  HEAP32[$13 >> 2] = 0; //@line 18714
  $$0 = 0; //@line 18715
 }
 return $$0 | 0; //@line 18717
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5190
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 5195
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 5200
  } else {
   $20 = $0 & 255; //@line 5202
   $21 = $0 & 255; //@line 5203
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 5209
   } else {
    $26 = $1 + 20 | 0; //@line 5211
    $27 = HEAP32[$26 >> 2] | 0; //@line 5212
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 5218
     HEAP8[$27 >> 0] = $20; //@line 5219
     $34 = $21; //@line 5220
    } else {
     label = 12; //@line 5222
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5227
     $32 = ___overflow($1, $0) | 0; //@line 5228
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 177; //@line 5231
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5233
      sp = STACKTOP; //@line 5234
      return 0; //@line 5235
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5237
      $34 = $32; //@line 5238
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 5243
   $$0 = $34; //@line 5244
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 5249
   $8 = $0 & 255; //@line 5250
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 5256
    $14 = HEAP32[$13 >> 2] | 0; //@line 5257
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 5263
     HEAP8[$14 >> 0] = $7; //@line 5264
     $$0 = $8; //@line 5265
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5269
   $19 = ___overflow($1, $0) | 0; //@line 5270
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 176; //@line 5273
    sp = STACKTOP; //@line 5274
    return 0; //@line 5275
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5277
    $$0 = $19; //@line 5278
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 5283
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11784
 STACKTOP = STACKTOP + 32 | 0; //@line 11785
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11785
 $$byval_copy = sp; //@line 11786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11792
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11794
 dest = $AsyncRetVal; //@line 11795
 stop = dest + 76 | 0; //@line 11795
 do {
  HEAP32[dest >> 2] = 0; //@line 11795
  dest = dest + 4 | 0; //@line 11795
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 11796
 HEAP32[$2 >> 2] = 0; //@line 11797
 HEAP32[$2 + 4 >> 2] = 0; //@line 11797
 HEAP32[$2 + 8 >> 2] = 0; //@line 11797
 HEAP32[$2 + 12 >> 2] = 0; //@line 11797
 HEAP32[$2 + 16 >> 2] = 0; //@line 11797
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 11798
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11798
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11798
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11798
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11798
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 11799
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 11800
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 11804
  STACKTOP = sp; //@line 11805
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 11807
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 11809
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 11811
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 11812
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11813
 _wait_ms(1); //@line 11814
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 25; //@line 11817
  sp = STACKTOP; //@line 11818
  STACKTOP = sp; //@line 11819
  return;
 }
 ___async_unwind = 0; //@line 11821
 HEAP32[$ReallocAsyncCtx2 >> 2] = 25; //@line 11822
 sp = STACKTOP; //@line 11823
 STACKTOP = sp; //@line 11824
 return;
}
function _main__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3560
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3566
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3568
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3570
 HEAP32[2443] = HEAP32[___async_retval >> 2]; //@line 3573
 $12 = _calloc(44, 1) | 0; //@line 3574
 HEAP32[$12 + 32 >> 2] = 6301; //@line 3576
 HEAP16[$12 + 22 >> 1] = 6; //@line 3578
 HEAP32[$12 + 8 >> 2] = 1; //@line 3580
 HEAP16[$12 + 20 >> 1] = 7; //@line 3582
 $18 = (_sn_coap_builder_calc_needed_packet_data_size($12) | 0) & 65535; //@line 3584
 HEAP32[$2 >> 2] = $18; //@line 3585
 _printf(6308, $2) | 0; //@line 3586
 $19 = _malloc($18) | 0; //@line 3587
 _sn_coap_builder($19, $12) | 0; //@line 3588
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 3589
 $20 = __ZN9UDPSocket6sendtoEPKctPKvj(9716, 6345, 5683, $19, $18) | 0; //@line 3590
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 157; //@line 3593
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 3594
  HEAP32[$21 >> 2] = $6; //@line 3595
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 3596
  HEAP32[$22 >> 2] = $8; //@line 3597
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 3598
  HEAP32[$23 >> 2] = $12; //@line 3599
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 3600
  HEAP32[$24 >> 2] = $19; //@line 3601
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 3602
  HEAP32[$25 >> 2] = $10; //@line 3603
  sp = STACKTOP; //@line 3604
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 3608
 ___async_unwind = 0; //@line 3609
 HEAP32[$ReallocAsyncCtx6 >> 2] = 157; //@line 3610
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 3611
 HEAP32[$21 >> 2] = $6; //@line 3612
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 3613
 HEAP32[$22 >> 2] = $8; //@line 3614
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 3615
 HEAP32[$23 >> 2] = $12; //@line 3616
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 3617
 HEAP32[$24 >> 2] = $19; //@line 3618
 $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 3619
 HEAP32[$25 >> 2] = $10; //@line 3620
 sp = STACKTOP; //@line 3621
 return;
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 10170
    return $12 | 0; //@line 10171
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 10177
    return $12 | 0; //@line 10178
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 10187
   } else {
    $12 = 1; //@line 10189
    return $12 | 0; //@line 10190
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 10199
    return $12 | 0; //@line 10200
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 10206
    return $12 | 0; //@line 10207
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 10213
    return $12 | 0; //@line 10214
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 10220
    return $12 | 0; //@line 10221
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 10227
    return $12 | 0; //@line 10228
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 10234
    return $12 | 0; //@line 10235
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 10241
    return $12 | 0; //@line 10242
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 10248
    return $12 | 0; //@line 10249
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 10255
    return $12 | 0; //@line 10256
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 10262
    return $12 | 0; //@line 10263
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 10269
    return $12 | 0; //@line 10270
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 10276
    return $12 | 0; //@line 10277
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 10283
    return $12 | 0; //@line 10284
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 10290
    return $12 | 0; //@line 10291
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 10297
    return $12 | 0; //@line 10298
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 10303
   return $12 | 0; //@line 10304
  }
 default:
  {
   $12 = 0; //@line 10308
   return $12 | 0; //@line 10309
  }
 }
 return 0; //@line 10312
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9217
 $1 = $0 + 8 | 0; //@line 9218
 $2 = HEAP32[$1 >> 2] | 0; //@line 9219
 $$pre = $0 + 4 | 0; //@line 9221
 do {
  if (!$2) {
   $$0 = 0; //@line 9224
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 9226
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 68 >> 2] | 0; //@line 9229
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9230
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 9231
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 93; //@line 9234
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9236
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 9238
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9240
    sp = STACKTOP; //@line 9241
    return 0; //@line 9242
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9244
   $11 = HEAP32[$1 >> 2] | 0; //@line 9245
   HEAP32[$1 >> 2] = 0; //@line 9246
   $12 = HEAP32[$$pre >> 2] | 0; //@line 9247
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] | 0; //@line 9250
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9251
   $16 = FUNCTION_TABLE_iii[$15 & 7]($12, $11) | 0; //@line 9252
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 94; //@line 9255
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 9257
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9259
    sp = STACKTOP; //@line 9260
    return 0; //@line 9261
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9263
    $$0 = $16; //@line 9264
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 9269
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 9272
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9273
 FUNCTION_TABLE_vi[$21 & 255]($0); //@line 9274
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 95; //@line 9277
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 9279
  sp = STACKTOP; //@line 9280
  return 0; //@line 9281
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9283
  return $$0 | 0; //@line 9284
 }
 return 0; //@line 9286
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 3741
 STACKTOP = STACKTOP + 32 | 0; //@line 3742
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3742
 $$byval_copy = sp; //@line 3743
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3745
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3747
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3749
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3751
 dest = $AsyncRetVal; //@line 3752
 stop = dest + 76 | 0; //@line 3752
 do {
  HEAP32[dest >> 2] = 0; //@line 3752
  dest = dest + 4 | 0; //@line 3752
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 3753
 HEAP32[$2 >> 2] = 0; //@line 3754
 HEAP32[$2 + 4 >> 2] = 0; //@line 3754
 HEAP32[$2 + 8 >> 2] = 0; //@line 3754
 HEAP32[$2 + 12 >> 2] = 0; //@line 3754
 HEAP32[$2 + 16 >> 2] = 0; //@line 3754
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 3755
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 3755
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 3755
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 3755
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3755
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 3756
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 3757
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 3761
  STACKTOP = sp; //@line 3762
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 3764
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 3766
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 3768
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 3769
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3770
 _wait_ms(1); //@line 3771
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 38; //@line 3774
  sp = STACKTOP; //@line 3775
  STACKTOP = sp; //@line 3776
  return;
 }
 ___async_unwind = 0; //@line 3778
 HEAP32[$ReallocAsyncCtx2 >> 2] = 38; //@line 3779
 sp = STACKTOP; //@line 3780
 STACKTOP = sp; //@line 3781
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 995
 STACKTOP = STACKTOP + 48 | 0; //@line 996
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 996
 $vararg_buffer12 = sp + 32 | 0; //@line 997
 $vararg_buffer8 = sp + 24 | 0; //@line 998
 $vararg_buffer4 = sp + 16 | 0; //@line 999
 $vararg_buffer = sp; //@line 1000
 $6 = $4 & 255; //@line 1001
 $7 = $5 & 255; //@line 1002
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1003
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1005
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1007
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1009
 _mbed_tracef(16, 2279, 2307, $vararg_buffer); //@line 1010
 _emscripten_asm_const_i(8) | 0; //@line 1011
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1013
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1016
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1018
  _mbed_tracef(16, 2279, 2389, $vararg_buffer4); //@line 1019
  STACKTOP = sp; //@line 1020
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1023
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1026
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1028
  _mbed_tracef(16, 2279, 2436, $vararg_buffer8); //@line 1029
  STACKTOP = sp; //@line 1030
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1033
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1037
  HEAP8[$0 + 782 >> 0] = $2; //@line 1040
  HEAP8[$0 + 781 >> 0] = -35; //@line 1042
  HEAP8[$0 + 780 >> 0] = -5; //@line 1044
  HEAP8[$0 + 783 >> 0] = 1; //@line 1046
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(9) | 0; //@line 1049
  STACKTOP = sp; //@line 1050
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1052
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1054
  _mbed_tracef(16, 2279, 2483, $vararg_buffer12); //@line 1055
  STACKTOP = sp; //@line 1056
  return;
 }
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 11916
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11918
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11920
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11922
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11924
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11926
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11928
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11932
  return;
 }
 $13 = $2 + 12 | 0; //@line 11935
 dest = $13; //@line 11936
 src = $4; //@line 11936
 stop = dest + 60 | 0; //@line 11936
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 11936
  dest = dest + 4 | 0; //@line 11936
  src = src + 4 | 0; //@line 11936
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 11936
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 11937
 _wait_ms(1); //@line 11938
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 32; //@line 11941
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 11942
  HEAP32[$14 >> 2] = $6; //@line 11943
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 11944
  HEAP32[$15 >> 2] = $2; //@line 11945
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 11946
  HEAP32[$16 >> 2] = $8; //@line 11947
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 11948
  HEAP32[$17 >> 2] = $10; //@line 11949
  sp = STACKTOP; //@line 11950
  return;
 }
 ___async_unwind = 0; //@line 11953
 HEAP32[$ReallocAsyncCtx4 >> 2] = 32; //@line 11954
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 11955
 HEAP32[$14 >> 2] = $6; //@line 11956
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 11957
 HEAP32[$15 >> 2] = $2; //@line 11958
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 11959
 HEAP32[$16 >> 2] = $8; //@line 11960
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 11961
 HEAP32[$17 >> 2] = $10; //@line 11962
 sp = STACKTOP; //@line 11963
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 18398
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 18404
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 18410
   } else {
    $7 = $1 & 255; //@line 18412
    $$03039 = $0; //@line 18413
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 18415
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 18420
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 18423
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 18428
      break;
     } else {
      $$03039 = $13; //@line 18431
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 18435
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 18436
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 18444
     $25 = $18; //@line 18444
     while (1) {
      $24 = $25 ^ $17; //@line 18446
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 18453
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 18456
      $25 = HEAP32[$31 >> 2] | 0; //@line 18457
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 18466
       break;
      } else {
       $$02936 = $31; //@line 18464
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 18471
    }
   } while (0);
   $38 = $1 & 255; //@line 18474
   $$1 = $$029$lcssa; //@line 18475
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 18477
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 18483
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 18486
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 18491
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 19724
 $2 = HEAP32[$1 >> 2] | 0; //@line 19725
 if (!$2) {
  label = 3; //@line 19728
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 19734
  } else {
   label = 4; //@line 19736
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 19740
  if (($7 | 0) < 0) {
   label = 4; //@line 19743
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 19745
   $$phi$trans$insert = $0 + 8 | 0; //@line 19747
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 19749
    $$sink = $$pre; //@line 19750
    $26 = $$pre; //@line 19750
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 19752
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 19754
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 19759
    $21 = $12; //@line 19761
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 19763
     $26 = $21; //@line 19763
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 19767
     $26 = $21; //@line 19767
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 19771
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 19773
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 19776
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 19778
    $29 = $0 + 108 | 0; //@line 19780
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 19785
    $36 = $27; //@line 19787
   }
   $35 = $36 + -1 | 0; //@line 19789
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 19794
   } else {
    HEAP8[$35 >> 0] = $7; //@line 19797
    $$0 = $7; //@line 19798
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 19804
  $$0 = -1; //@line 19805
 }
 return $$0 | 0; //@line 19807
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 18140
 $4 = HEAP32[$3 >> 2] | 0; //@line 18141
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 18148
   label = 5; //@line 18149
  } else {
   $$1 = 0; //@line 18151
  }
 } else {
  $12 = $4; //@line 18155
  label = 5; //@line 18156
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 18160
   $10 = HEAP32[$9 >> 2] | 0; //@line 18161
   $14 = $10; //@line 18164
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 18169
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 18177
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 18181
       $$141 = $0; //@line 18181
       $$143 = $1; //@line 18181
       $31 = $14; //@line 18181
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 18184
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 18191
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 18196
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 18199
      break L5;
     }
     $$139 = $$038; //@line 18205
     $$141 = $0 + $$038 | 0; //@line 18205
     $$143 = $1 - $$038 | 0; //@line 18205
     $31 = HEAP32[$9 >> 2] | 0; //@line 18205
    } else {
     $$139 = 0; //@line 18207
     $$141 = $0; //@line 18207
     $$143 = $1; //@line 18207
     $31 = $14; //@line 18207
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 18210
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 18213
   $$1 = $$139 + $$143 | 0; //@line 18215
  }
 } while (0);
 return $$1 | 0; //@line 18218
}
function __Z17recv_coap_messagev__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8435
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8441
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8443
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8445
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8449
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8453
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8457
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8459
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8463
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8465
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8469
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8473
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8477
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 8478
 HEAP32[$2 + 8 >> 2] = $4 | -2147483648; //@line 8481
 HEAP32[$2 + 4 >> 2] = $6; //@line 8483
 $$pre = $2 + 11 | 0; //@line 8484
 _memcpy($AsyncRetVal | 0, $8 | 0, $6 | 0) | 0; //@line 8485
 HEAP8[$AsyncRetVal + $6 >> 0] = 0; //@line 8487
 HEAP32[$12 >> 2] = HEAPU16[$10 + 20 >> 1]; //@line 8491
 _printf(6036, $12) | 0; //@line 8492
 HEAP32[$16 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 8495
 _printf(6059, $16) | 0; //@line 8496
 HEAP32[$20 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 8499
 _printf(6082, $20) | 0; //@line 8500
 HEAP32[$26 >> 2] = HEAPU16[$24 >> 1]; //@line 8503
 _printf(6105, $26) | 0; //@line 8504
 HEAP32[$32 >> 2] = (HEAP8[$$pre >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $30; //@line 8509
 _printf(6128, $32) | 0; //@line 8510
 HEAP32[$36 >> 2] = HEAP32[$10 + 40 >> 2]; //@line 8513
 _printf(6151, $36) | 0; //@line 8514
 if ((HEAP8[$$pre >> 0] | 0) < 0) {
  __ZdlPv(HEAP32[$2 >> 2] | 0); //@line 8519
 }
 _free($40); //@line 8521
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_73($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16242
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16244
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16246
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16248
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16250
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16252
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16254
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 16257
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 16258
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 16274
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 16275
    if (!___async) {
     ___async_unwind = 0; //@line 16278
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 199; //@line 16280
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 16282
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 16284
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 16286
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 16288
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 16290
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 16292
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 16294
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 16296
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 16299
    sp = STACKTOP; //@line 16300
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5354
 STACKTOP = STACKTOP + 32 | 0; //@line 5355
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5355
 $2 = sp; //@line 5356
 $3 = HEAP8[$1 >> 0] | 0; //@line 5357
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 5361
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 5367
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 5369
    $10 = HEAP8[$1 >> 0] | 0; //@line 5370
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 5373
     $15 = $10; //@line 5373
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 5380
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 5383
      $$01824 = $$01824 + 1 | 0; //@line 5384
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 5385
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 5394
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 5397
    } else {
     $$01922 = $0; //@line 5399
     $25 = $12; //@line 5399
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 5411
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 5414
      $25 = HEAP8[$34 >> 0] | 0; //@line 5415
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 5418
       break;
      } else {
       $$01922 = $34; //@line 5421
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 5431
 }
 STACKTOP = sp; //@line 5436
 return $$019$sink - $0 | 0; //@line 5436
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18026
 STACKTOP = STACKTOP + 16 | 0; //@line 18027
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18027
 $2 = sp; //@line 18028
 $3 = $1 & 255; //@line 18029
 HEAP8[$2 >> 0] = $3; //@line 18030
 $4 = $0 + 16 | 0; //@line 18031
 $5 = HEAP32[$4 >> 2] | 0; //@line 18032
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 18039
   label = 4; //@line 18040
  } else {
   $$0 = -1; //@line 18042
  }
 } else {
  $12 = $5; //@line 18045
  label = 4; //@line 18046
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 18050
   $10 = HEAP32[$9 >> 2] | 0; //@line 18051
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 18054
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 18061
     HEAP8[$10 >> 0] = $3; //@line 18062
     $$0 = $13; //@line 18063
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 18068
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 18069
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 18070
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 163; //@line 18073
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 18075
    sp = STACKTOP; //@line 18076
    STACKTOP = sp; //@line 18077
    return 0; //@line 18077
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18079
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 18084
   } else {
    $$0 = -1; //@line 18086
   }
  }
 } while (0);
 STACKTOP = sp; //@line 18090
 return $$0 | 0; //@line 18090
}
function _sn_coap_protocol_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$1 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7814
 if (($0 | 0) == 0 | ($1 | 0) == 0 | ($2 | 0) == 0) {
  $$1 = 0; //@line 7821
  return $$1 | 0; //@line 7822
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7824
 $7 = FUNCTION_TABLE_ii[$0 & 15](44) | 0; //@line 7825
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 7828
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7830
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7832
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7834
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 7836
  sp = STACKTOP; //@line 7837
  return 0; //@line 7838
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7840
 if (!$7) {
  $$1 = 0; //@line 7843
  return $$1 | 0; //@line 7844
 }
 $13 = $7 + 16 | 0; //@line 7846
 HEAP32[$13 >> 2] = 0; //@line 7847
 HEAP32[$13 + 4 >> 2] = 0; //@line 7847
 HEAP32[$13 + 8 >> 2] = 0; //@line 7847
 HEAP32[$13 + 12 >> 2] = 0; //@line 7847
 HEAP32[$13 + 16 >> 2] = 0; //@line 7847
 HEAP32[$13 + 20 >> 2] = 0; //@line 7847
 HEAP32[$13 + 24 >> 2] = 0; //@line 7847
 HEAP32[$7 + 8 >> 2] = $2; //@line 7849
 HEAP32[$7 + 4 >> 2] = $1; //@line 7851
 HEAP32[$7 >> 2] = $0; //@line 7852
 HEAP32[$7 + 12 >> 2] = $3; //@line 7854
 HEAP8[$7 + 43 >> 0] = 1; //@line 7856
 _ns_list_init_($7 + 16 | 0); //@line 7858
 HEAP8[$7 + 34 >> 0] = 2; //@line 7860
 HEAP32[$7 + 36 >> 2] = 0; //@line 7862
 HEAP8[$7 + 41 >> 0] = 10; //@line 7864
 HEAP8[$7 + 40 >> 0] = 3; //@line 7866
 _randLIB_seed_random(); //@line 7867
 _randLIB_get_16bit() | 0; //@line 7868
 $$1 = $7; //@line 7869
 return $$1 | 0; //@line 7870
}
function _fflush__async_cb_40($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10238
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10240
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 10242
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 10246
  } else {
   $$02327 = $$02325; //@line 10248
   $$02426 = $AsyncRetVal; //@line 10248
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 10255
    } else {
     $16 = 0; //@line 10257
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 10269
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 10272
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 10275
     break L3;
    } else {
     $$02327 = $$023; //@line 10278
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 10281
   $13 = ___fflush_unlocked($$02327) | 0; //@line 10282
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 10286
    ___async_unwind = 0; //@line 10287
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 167; //@line 10289
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 10291
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 10293
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 10295
   sp = STACKTOP; //@line 10296
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 10300
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 10302
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10675
 $4 = $0 + 8 | 0; //@line 10676
 $5 = $0 + 52 | 0; //@line 10677
 $6 = $0 + 4 | 0; //@line 10678
 $7 = $0 + 12 | 0; //@line 10679
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 10681
  if (!$8) {
   $$2 = -3005; //@line 10684
   label = 6; //@line 10685
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 10688
  $10 = HEAP32[$6 >> 2] | 0; //@line 10689
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 64 >> 2] | 0; //@line 10692
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 10693
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 10694
  if (___async) {
   label = 4; //@line 10697
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10700
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 10706
   label = 6; //@line 10707
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 104; //@line 10712
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 10714
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 10716
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 10718
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 10720
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 10722
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 10724
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 10726
  sp = STACKTOP; //@line 10727
  return 0; //@line 10728
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 10731
 }
 return 0; //@line 10733
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10608
 $4 = $0 + 8 | 0; //@line 10609
 $5 = $0 + 52 | 0; //@line 10610
 $6 = $0 + 4 | 0; //@line 10611
 $7 = $0 + 12 | 0; //@line 10612
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 10614
  if (!$8) {
   $$2 = -3005; //@line 10617
   label = 6; //@line 10618
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 10621
  $10 = HEAP32[$6 >> 2] | 0; //@line 10622
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0; //@line 10625
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 10626
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 10627
  if (___async) {
   label = 4; //@line 10630
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10633
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 10639
   label = 6; //@line 10640
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 103; //@line 10645
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 10647
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 10649
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 10651
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 10653
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 10655
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 10657
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 10659
  sp = STACKTOP; //@line 10660
  return 0; //@line 10661
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 10664
 }
 return 0; //@line 10666
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 4482
 value = value & 255; //@line 4484
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 4487
   ptr = ptr + 1 | 0; //@line 4488
  }
  aligned_end = end & -4 | 0; //@line 4491
  block_aligned_end = aligned_end - 64 | 0; //@line 4492
  value4 = value | value << 8 | value << 16 | value << 24; //@line 4493
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 4496
   HEAP32[ptr + 4 >> 2] = value4; //@line 4497
   HEAP32[ptr + 8 >> 2] = value4; //@line 4498
   HEAP32[ptr + 12 >> 2] = value4; //@line 4499
   HEAP32[ptr + 16 >> 2] = value4; //@line 4500
   HEAP32[ptr + 20 >> 2] = value4; //@line 4501
   HEAP32[ptr + 24 >> 2] = value4; //@line 4502
   HEAP32[ptr + 28 >> 2] = value4; //@line 4503
   HEAP32[ptr + 32 >> 2] = value4; //@line 4504
   HEAP32[ptr + 36 >> 2] = value4; //@line 4505
   HEAP32[ptr + 40 >> 2] = value4; //@line 4506
   HEAP32[ptr + 44 >> 2] = value4; //@line 4507
   HEAP32[ptr + 48 >> 2] = value4; //@line 4508
   HEAP32[ptr + 52 >> 2] = value4; //@line 4509
   HEAP32[ptr + 56 >> 2] = value4; //@line 4510
   HEAP32[ptr + 60 >> 2] = value4; //@line 4511
   ptr = ptr + 64 | 0; //@line 4512
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 4516
   ptr = ptr + 4 | 0; //@line 4517
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 4522
  ptr = ptr + 1 | 0; //@line 4523
 }
 return end - num | 0; //@line 4525
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16185
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16187
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16189
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 16192
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 16193
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 16202
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 16203
    if (!___async) {
     ___async_unwind = 0; //@line 16206
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 200; //@line 16208
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 16210
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 16212
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 16214
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 16216
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 16218
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 16220
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 16222
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 16225
    sp = STACKTOP; //@line 16226
    return;
   }
  }
 }
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10139
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 10149
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 10149
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 10149
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 10153
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 10156
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 10159
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 10167
  } else {
   $20 = 0; //@line 10169
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 10179
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 10183
  HEAP32[___async_retval >> 2] = $$1; //@line 10185
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 10188
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 10189
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 10193
  ___async_unwind = 0; //@line 10194
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 167; //@line 10196
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 10198
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 10200
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 10202
 sp = STACKTOP; //@line 10203
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 3867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3875
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3877
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3879
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3881
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 3885
  return;
 }
 $15 = $2 + 12 | 0; //@line 3888
 dest = $15; //@line 3889
 src = $4; //@line 3889
 stop = dest + 60 | 0; //@line 3889
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 3889
  dest = dest + 4 | 0; //@line 3889
  src = src + 4 | 0; //@line 3889
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 3889
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 3890
 _wait_ms(1); //@line 3891
 if (!___async) {
  ___async_unwind = 0; //@line 3894
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 45; //@line 3896
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 3898
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 3900
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 3902
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 3904
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 3906
 sp = STACKTOP; //@line 3907
 return;
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10364
 HEAP32[$0 >> 2] = 504; //@line 10365
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10366
 __ZN6Socket5closeEv($0) | 0; //@line 10367
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 96; //@line 10370
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10372
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 10374
  sp = STACKTOP; //@line 10375
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10378
 HEAP32[$0 >> 2] = 468; //@line 10379
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 10381
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10387
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10388
   FUNCTION_TABLE_vi[$8 & 255]($0 + 32 | 0); //@line 10389
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 97; //@line 10392
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10394
    sp = STACKTOP; //@line 10395
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10398
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 10404
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 10411
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10412
 FUNCTION_TABLE_vi[$15 & 255]($0 + 16 | 0); //@line 10413
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 98; //@line 10416
  sp = STACKTOP; //@line 10417
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10420
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 897
 $5 = $0 + -4 | 0; //@line 898
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 92 >> 2] | 0; //@line 901
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 902
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 903
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 906
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 908
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 910
  sp = STACKTOP; //@line 911
  return 0; //@line 912
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 914
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 919
  dest = $2; //@line 920
  src = $14; //@line 920
  stop = dest + 60 | 0; //@line 920
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 920
   dest = dest + 4 | 0; //@line 920
   src = src + 4 | 0; //@line 920
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 920
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 922
 _wait_ms(1); //@line 923
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 48; //@line 926
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 928
  sp = STACKTOP; //@line 929
  return 0; //@line 930
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 932
  return $9 | 0; //@line 933
 }
 return 0; //@line 935
}
function _sn_coap_protocol_init__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $11 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11060
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11062
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11064
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11066
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11068
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 11071
  $21 = ___async_retval; //@line 11072
  HEAP32[$21 >> 2] = $$1; //@line 11073
  return;
 }
 $11 = $AsyncRetVal + 16 | 0; //@line 11076
 HEAP32[$11 >> 2] = 0; //@line 11077
 HEAP32[$11 + 4 >> 2] = 0; //@line 11077
 HEAP32[$11 + 8 >> 2] = 0; //@line 11077
 HEAP32[$11 + 12 >> 2] = 0; //@line 11077
 HEAP32[$11 + 16 >> 2] = 0; //@line 11077
 HEAP32[$11 + 20 >> 2] = 0; //@line 11077
 HEAP32[$11 + 24 >> 2] = 0; //@line 11077
 HEAP32[$AsyncRetVal + 8 >> 2] = $2; //@line 11079
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 11081
 HEAP32[$AsyncRetVal >> 2] = $6; //@line 11082
 HEAP32[$AsyncRetVal + 12 >> 2] = $8; //@line 11084
 HEAP8[$AsyncRetVal + 43 >> 0] = 1; //@line 11086
 _ns_list_init_($AsyncRetVal + 16 | 0); //@line 11088
 HEAP8[$AsyncRetVal + 34 >> 0] = 2; //@line 11090
 HEAP32[$AsyncRetVal + 36 >> 2] = 0; //@line 11092
 HEAP8[$AsyncRetVal + 41 >> 0] = 10; //@line 11094
 HEAP8[$AsyncRetVal + 40 >> 0] = 3; //@line 11096
 _randLIB_seed_random(); //@line 11097
 _randLIB_get_16bit() | 0; //@line 11098
 $$1 = $AsyncRetVal; //@line 11099
 $21 = ___async_retval; //@line 11100
 HEAP32[$21 >> 2] = $$1; //@line 11101
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7902
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7906
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7908
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 7913
  } else {
   $9 = $4 + 4 | 0; //@line 7915
   $10 = HEAP32[$9 >> 2] | 0; //@line 7916
   $11 = $4 + 8 | 0; //@line 7917
   $12 = HEAP32[$11 >> 2] | 0; //@line 7918
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 7922
    HEAP32[$6 >> 2] = 0; //@line 7923
    HEAP32[$2 >> 2] = 0; //@line 7924
    HEAP32[$11 >> 2] = 0; //@line 7925
    HEAP32[$9 >> 2] = 0; //@line 7926
    $$0 = 0; //@line 7927
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 7934
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 7935
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 7936
   if (!___async) {
    ___async_unwind = 0; //@line 7939
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 7941
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 7943
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 7945
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 7947
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 7949
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 7951
   sp = STACKTOP; //@line 7952
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 7957
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 493
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 92 >> 2] | 0; //@line 496
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 497
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 498
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 501
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 503
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 505
  sp = STACKTOP; //@line 506
  return 0; //@line 507
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 509
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 514
  dest = $2; //@line 515
  src = $13; //@line 515
  stop = dest + 60 | 0; //@line 515
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 515
   dest = dest + 4 | 0; //@line 515
   src = src + 4 | 0; //@line 515
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 515
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 517
 _wait_ms(1); //@line 518
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 35; //@line 521
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 523
  sp = STACKTOP; //@line 524
  return 0; //@line 525
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 527
  return $8 | 0; //@line 528
 }
 return 0; //@line 530
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11950
 STACKTOP = STACKTOP + 48 | 0; //@line 11951
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11951
 $$byval_copy = sp + 20 | 0; //@line 11952
 $4 = sp; //@line 11953
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11954
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 11955
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 11958
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11960
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 11962
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 11964
  sp = STACKTOP; //@line 11965
  STACKTOP = sp; //@line 11966
  return 0; //@line 11966
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11968
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 11969
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 11969
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 11969
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 11969
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 11969
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 11970
  STACKTOP = sp; //@line 11973
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 11973
 }
 return 0; //@line 11975
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_43($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 10608
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10610
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10612
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10614
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10616
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 10621
  return;
 }
 dest = $2 + 4 | 0; //@line 10625
 stop = dest + 52 | 0; //@line 10625
 do {
  HEAP32[dest >> 2] = 0; //@line 10625
  dest = dest + 4 | 0; //@line 10625
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 10626
 HEAP32[$2 + 8 >> 2] = $4; //@line 10628
 HEAP32[$2 + 12 >> 2] = -1; //@line 10630
 HEAP32[$2 + 48 >> 2] = 1; //@line 10632
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 10635
 $16 = HEAP32[$6 >> 2] | 0; //@line 10636
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 10637
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 10638
 if (!___async) {
  ___async_unwind = 0; //@line 10641
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 10643
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 10645
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 10647
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 10649
 sp = STACKTOP; //@line 10650
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 4173
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 4178
    $$0 = 1; //@line 4179
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 4192
     $$0 = 1; //@line 4193
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 4197
     $$0 = -1; //@line 4198
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 4208
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 4212
    $$0 = 2; //@line 4213
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 4225
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 4231
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 4235
    $$0 = 3; //@line 4236
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 4246
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 4252
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 4258
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 4262
    $$0 = 4; //@line 4263
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 4267
    $$0 = -1; //@line 4268
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4273
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16311
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16315
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16317
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16319
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16321
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16323
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 16326
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 16327
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 16333
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 16334
   if (!___async) {
    ___async_unwind = 0; //@line 16337
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 198; //@line 16339
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 16341
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 16343
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 16345
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 16347
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 16349
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 16351
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 16354
   sp = STACKTOP; //@line 16355
   return;
  }
 }
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3294
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3298
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 468; //@line 3299
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 3301
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 3306
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 3307
  FUNCTION_TABLE_vi[$10 & 255]($4 + 32 | 0); //@line 3308
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 97; //@line 3311
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 3312
   HEAP32[$11 >> 2] = $4; //@line 3313
   sp = STACKTOP; //@line 3314
   return;
  }
  ___async_unwind = 0; //@line 3317
  HEAP32[$ReallocAsyncCtx >> 2] = 97; //@line 3318
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 3319
  HEAP32[$11 >> 2] = $4; //@line 3320
  sp = STACKTOP; //@line 3321
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 3325
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 3332
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3333
 FUNCTION_TABLE_vi[$17 & 255]($4 + 16 | 0); //@line 3334
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 98; //@line 3337
  sp = STACKTOP; //@line 3338
  return;
 }
 ___async_unwind = 0; //@line 3341
 HEAP32[$ReallocAsyncCtx2 >> 2] = 98; //@line 3342
 sp = STACKTOP; //@line 3343
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 3057
  $8 = $0; //@line 3057
  $9 = $1; //@line 3057
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 3059
   $$0914 = $$0914 + -1 | 0; //@line 3063
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 3064
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 3065
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 3073
   }
  }
  $$010$lcssa$off0 = $8; //@line 3078
  $$09$lcssa = $$0914; //@line 3078
 } else {
  $$010$lcssa$off0 = $0; //@line 3080
  $$09$lcssa = $2; //@line 3080
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 3084
 } else {
  $$012 = $$010$lcssa$off0; //@line 3086
  $$111 = $$09$lcssa; //@line 3086
  while (1) {
   $26 = $$111 + -1 | 0; //@line 3091
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 3092
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 3096
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 3099
    $$111 = $26; //@line 3099
   }
  }
 }
 return $$1$lcssa | 0; //@line 3103
}
function _randLIB_get_16bit() {
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $42 = 0, $5 = 0, $6 = 0, $8 = 0;
 $0 = 9688; //@line 1183
 $2 = HEAP32[$0 >> 2] | 0; //@line 1185
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 1188
 $6 = 9696; //@line 1189
 $8 = HEAP32[$6 >> 2] | 0; //@line 1191
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 1194
 $12 = _i64Add($8 | 0, $11 | 0, $2 | 0, $5 | 0) | 0; //@line 1195
 $13 = tempRet0; //@line 1196
 $14 = $8 ^ $2; //@line 1197
 $15 = $11 ^ $5; //@line 1198
 $16 = _bitshift64Shl($2 | 0, $5 | 0, 55) | 0; //@line 1199
 $17 = tempRet0; //@line 1200
 $18 = _bitshift64Lshr($2 | 0, $5 | 0, 9) | 0; //@line 1201
 $23 = (tempRet0 | $17) ^ $15; //@line 1206
 $24 = _bitshift64Shl($14 | 0, $15 | 0, 14) | 0; //@line 1207
 $28 = 9688; //@line 1211
 HEAP32[$28 >> 2] = ($18 | $16) ^ $14 ^ $24; //@line 1213
 HEAP32[$28 + 4 >> 2] = $23 ^ tempRet0; //@line 1216
 $32 = _bitshift64Shl($14 | 0, $15 | 0, 36) | 0; //@line 1217
 $33 = tempRet0; //@line 1218
 $34 = _bitshift64Lshr($14 | 0, $15 | 0, 28) | 0; //@line 1219
 $38 = 9696; //@line 1223
 HEAP32[$38 >> 2] = $34 | $32; //@line 1225
 HEAP32[$38 + 4 >> 2] = tempRet0 | $33; //@line 1228
 $42 = _bitshift64Lshr($12 | 0, $13 | 0, 48) | 0; //@line 1229
 return $42 & 65535 | 0; //@line 1232
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 17792
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 17797
   label = 4; //@line 17798
  } else {
   $$01519 = $0; //@line 17800
   $23 = $1; //@line 17800
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 17805
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 17808
    $23 = $6; //@line 17809
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 17813
     label = 4; //@line 17814
     break;
    } else {
     $$01519 = $6; //@line 17817
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 17823
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 17825
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 17833
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 17841
  } else {
   $$pn = $$0; //@line 17843
   while (1) {
    $19 = $$pn + 1 | 0; //@line 17845
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 17849
     break;
    } else {
     $$pn = $19; //@line 17852
    }
   }
  }
  $$sink = $$1$lcssa; //@line 17857
 }
 return $$sink - $1 | 0; //@line 17860
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3640
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3644
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3650
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 3654
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 3657
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 3658
   if (!___async) {
    ___async_unwind = 0; //@line 3661
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 202; //@line 3663
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 3665
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 3667
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 3669
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 3671
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 3673
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 3675
   sp = STACKTOP; //@line 3676
   return;
  }
 }
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 11164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11166
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11170
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 11175
  dest = $2; //@line 11176
  src = $8; //@line 11176
  stop = dest + 60 | 0; //@line 11176
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 11176
   dest = dest + 4 | 0; //@line 11176
   src = src + 4 | 0; //@line 11176
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 11176
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 11178
 _wait_ms(1); //@line 11179
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 11182
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 11183
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 11184
  sp = STACKTOP; //@line 11185
  return;
 }
 ___async_unwind = 0; //@line 11188
 HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 11189
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 11190
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 11191
 sp = STACKTOP; //@line 11192
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 10008
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10010
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10014
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 10019
  dest = $2; //@line 10020
  src = $8; //@line 10020
  stop = dest + 60 | 0; //@line 10020
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 10020
   dest = dest + 4 | 0; //@line 10020
   src = src + 4 | 0; //@line 10020
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 10020
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10022
 _wait_ms(1); //@line 10023
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 10026
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 10027
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 10028
  sp = STACKTOP; //@line 10029
  return;
 }
 ___async_unwind = 0; //@line 10032
 HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 10033
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 10034
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 10035
 sp = STACKTOP; //@line 10036
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 5927
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 5934
   $10 = $1 + 16 | 0; //@line 5935
   $11 = HEAP32[$10 >> 2] | 0; //@line 5936
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 5939
    HEAP32[$1 + 24 >> 2] = $4; //@line 5941
    HEAP32[$1 + 36 >> 2] = 1; //@line 5943
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 5953
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 5958
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 5961
    HEAP8[$1 + 54 >> 0] = 1; //@line 5963
    break;
   }
   $21 = $1 + 24 | 0; //@line 5966
   $22 = HEAP32[$21 >> 2] | 0; //@line 5967
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 5970
    $28 = $4; //@line 5971
   } else {
    $28 = $22; //@line 5973
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 5982
   }
  }
 } while (0);
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10058
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10060
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10062
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10064
 $7 = HEAP32[$2 >> 2] | 0; //@line 10065
 HEAP32[$2 >> 2] = 0; //@line 10066
 $8 = HEAP32[$4 >> 2] | 0; //@line 10067
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0; //@line 10070
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 10071
 $12 = FUNCTION_TABLE_iii[$11 & 7]($8, $7) | 0; //@line 10072
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 94; //@line 10075
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 10076
  HEAP32[$13 >> 2] = $4; //@line 10077
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 10078
  HEAP32[$14 >> 2] = $6; //@line 10079
  sp = STACKTOP; //@line 10080
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 10084
 ___async_unwind = 0; //@line 10085
 HEAP32[$ReallocAsyncCtx2 >> 2] = 94; //@line 10086
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 10087
 HEAP32[$13 >> 2] = $4; //@line 10088
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 10089
 HEAP32[$14 >> 2] = $6; //@line 10090
 sp = STACKTOP; //@line 10091
 return;
}
function _sn_coap_header_validity_check($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 4705
 STACKTOP = STACKTOP + 16 | 0; //@line 4706
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4706
 $vararg_buffer1 = sp + 8 | 0; //@line 4707
 $vararg_buffer = sp; //@line 4708
 L1 : do {
  if (($1 | 0) == 64) {
   $4 = HEAP32[$0 + 12 >> 2] | 0; //@line 4713
   if (($4 >>> 4 | $4 << 28) >>> 0 >= 4) {
    _mbed_tracef(2, 3737, 3629, $vararg_buffer); //@line 4719
    $$0 = -1; //@line 4720
    break;
   }
   switch (HEAP32[$0 + 8 >> 2] | 0) {
   case 95:
   case 165:
   case 164:
   case 163:
   case 162:
   case 161:
   case 160:
   case 143:
   case 141:
   case 140:
   case 136:
   case 134:
   case 133:
   case 132:
   case 131:
   case 130:
   case 129:
   case 128:
   case 69:
   case 68:
   case 67:
   case 66:
   case 65:
   case 4:
   case 3:
   case 2:
   case 1:
   case 0:
    {
     $$0 = 0; //@line 4727
     break L1;
     break;
    }
   default:
    {}
   }
   _mbed_tracef(2, 3737, 3683, $vararg_buffer1); //@line 4734
   $$0 = -1; //@line 4735
  } else {
   $$0 = -1; //@line 4737
  }
 } while (0);
 STACKTOP = sp; //@line 4740
 return $$0 | 0; //@line 4740
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5289
 $1 = HEAP32[188] | 0; //@line 5290
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 5296
 } else {
  $19 = 0; //@line 5298
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 5304
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 5310
    $12 = HEAP32[$11 >> 2] | 0; //@line 5311
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 5317
     HEAP8[$12 >> 0] = 10; //@line 5318
     $22 = 0; //@line 5319
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5323
   $17 = ___overflow($1, 10) | 0; //@line 5324
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 178; //@line 5327
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 5329
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5331
    sp = STACKTOP; //@line 5332
    return 0; //@line 5333
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5335
    $22 = $17 >> 31; //@line 5337
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 5344
 }
 return $22 | 0; //@line 5346
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11209
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11211
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11213
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11215
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11217
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11219
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11221
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11223
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11225
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11226
 $16 = FUNCTION_TABLE_iiii[$6 & 15]($2, $4, $AsyncRetVal) | 0; //@line 11227
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 11231
  ___async_unwind = 0; //@line 11232
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 11234
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 11236
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 11238
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $12; //@line 11240
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 11242
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 11244
 sp = STACKTOP; //@line 11245
 return;
}
function _mbed_vtracef__async_cb_28($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9580
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 9585
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9587
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 9592
 $16 = _snprintf($4, $6, 5601, $2) | 0; //@line 9593
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 9595
 $19 = $4 + $$18 | 0; //@line 9597
 $20 = $6 - $$18 | 0; //@line 9598
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 5679, $12) | 0; //@line 9606
  }
 }
 $23 = HEAP32[110] | 0; //@line 9609
 $24 = HEAP32[103] | 0; //@line 9610
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 9611
 FUNCTION_TABLE_vi[$23 & 255]($24); //@line 9612
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9615
  sp = STACKTOP; //@line 9616
  return;
 }
 ___async_unwind = 0; //@line 9619
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 9620
 sp = STACKTOP; //@line 9621
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8602
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 8605
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8606
 $7 = FUNCTION_TABLE_ii[$6 & 15]($0) | 0; //@line 8607
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 75; //@line 8610
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8612
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 8614
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 8616
  sp = STACKTOP; //@line 8617
  return 0; //@line 8618
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8620
 $13 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 8623
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8624
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($7, $1, $2, $3) | 0; //@line 8625
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 76; //@line 8628
  sp = STACKTOP; //@line 8629
  return 0; //@line 8630
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8632
  return $14 | 0; //@line 8633
 }
 return 0; //@line 8635
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3692
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3694
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3696
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3698
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 3703
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 3705
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 3706
 if (!___async) {
  ___async_unwind = 0; //@line 3709
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 202; //@line 3711
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 3713
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 3715
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 3717
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 3719
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 3721
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 3723
 sp = STACKTOP; //@line 3724
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11719
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11721
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11723
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11725
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 11727
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 11729
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 9244; //@line 11734
  HEAP32[$4 + 4 >> 2] = $6; //@line 11736
  _abort_message(9153, $4); //@line 11737
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 11740
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 11743
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 11744
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 11745
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 11749
  ___async_unwind = 0; //@line 11750
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 181; //@line 11752
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 11754
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 11756
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 11758
 sp = STACKTOP; //@line 11759
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 5786
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 5795
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 5800
      HEAP32[$13 >> 2] = $2; //@line 5801
      $19 = $1 + 40 | 0; //@line 5802
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 5805
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 5815
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 5819
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 5826
    }
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3968
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3970
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3972
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3976
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 3980
  label = 4; //@line 3981
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 3986
   label = 4; //@line 3987
  } else {
   $$037$off039 = 3; //@line 3989
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 3993
  $17 = $8 + 40 | 0; //@line 3994
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 3997
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 4007
    $$037$off039 = $$037$off038; //@line 4008
   } else {
    $$037$off039 = $$037$off038; //@line 4010
   }
  } else {
   $$037$off039 = $$037$off038; //@line 4013
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 4016
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 4293
 while (1) {
  if ((HEAPU8[7216 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 4300
   break;
  }
  $7 = $$016 + 1 | 0; //@line 4303
  if (($7 | 0) == 87) {
   $$01214 = 7304; //@line 4306
   $$115 = 87; //@line 4306
   label = 5; //@line 4307
   break;
  } else {
   $$016 = $7; //@line 4310
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 7304; //@line 4316
  } else {
   $$01214 = 7304; //@line 4318
   $$115 = $$016; //@line 4318
   label = 5; //@line 4319
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 4324
   $$113 = $$01214; //@line 4325
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 4329
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 4336
   if (!$$115) {
    $$012$lcssa = $$113; //@line 4339
    break;
   } else {
    $$01214 = $$113; //@line 4342
    label = 5; //@line 4343
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 4350
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 4366
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 4370
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 4373
   if (!$5) {
    $$0 = 0; //@line 4376
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 4382
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 4388
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 4395
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 4402
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 4409
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 4416
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 4423
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 4427
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 4437
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12507
 $2 = $0 + 12 | 0; //@line 12509
 $3 = HEAP32[$2 >> 2] | 0; //@line 12510
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12514
   _mbed_assert_internal(5890, 5895, 528); //@line 12515
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 142; //@line 12518
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 12520
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12522
    sp = STACKTOP; //@line 12523
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12526
    $8 = HEAP32[$2 >> 2] | 0; //@line 12528
    break;
   }
  } else {
   $8 = $3; //@line 12532
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 12535
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12537
 FUNCTION_TABLE_vi[$7 & 255]($0); //@line 12538
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 143; //@line 12541
  sp = STACKTOP; //@line 12542
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12545
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 4562
 $32 = $0 + 3 | 0; //@line 4576
 $33 = HEAP8[$32 >> 0] | 0; //@line 4577
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 4579
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 4584
  $$sink21$lcssa = $32; //@line 4584
 } else {
  $$sink2123 = $32; //@line 4586
  $39 = $35; //@line 4586
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 4589
   $41 = HEAP8[$40 >> 0] | 0; //@line 4590
   $39 = $39 << 8 | $41 & 255; //@line 4592
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 4597
    $$sink21$lcssa = $40; //@line 4597
    break;
   } else {
    $$sink2123 = $40; //@line 4600
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 4607
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9125
 $1 = $0 + 12 | 0; //@line 9126
 $2 = HEAP32[$1 >> 2] | 0; //@line 9127
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9131
   _mbed_assert_internal(5890, 5895, 528); //@line 9132
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 90; //@line 9135
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 9137
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9139
    sp = STACKTOP; //@line 9140
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9143
    $7 = HEAP32[$1 >> 2] | 0; //@line 9145
    break;
   }
  } else {
   $7 = $2; //@line 9149
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 9152
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9153
 FUNCTION_TABLE_vi[$6 & 255]($0); //@line 9154
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 91; //@line 9157
  sp = STACKTOP; //@line 9158
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9161
  return;
 }
}
function _mbed_vtracef__async_cb_34($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9959
 $3 = HEAP32[111] | 0; //@line 9963
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[103] | 0; //@line 9967
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9968
  FUNCTION_TABLE_vi[$3 & 255]($5); //@line 9969
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 9972
   sp = STACKTOP; //@line 9973
   return;
  }
  ___async_unwind = 0; //@line 9976
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 9977
  sp = STACKTOP; //@line 9978
  return;
 } else {
  $6 = HEAP32[110] | 0; //@line 9981
  $7 = HEAP32[103] | 0; //@line 9982
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 9983
  FUNCTION_TABLE_vi[$6 & 255]($7); //@line 9984
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 67; //@line 9987
   sp = STACKTOP; //@line 9988
   return;
  }
  ___async_unwind = 0; //@line 9991
  HEAP32[$ReallocAsyncCtx4 >> 2] = 67; //@line 9992
  sp = STACKTOP; //@line 9993
  return;
 }
}
function _main__async_cb_91($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3435
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3437
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3439
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3441
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3443
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3445
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3447
 $15 = HEAP32[(HEAP32[$2 >> 2] | 0) + 60 >> 2] | 0; //@line 3450
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 3451
 $16 = FUNCTION_TABLE_ii[$15 & 15]($2) | 0; //@line 3452
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 3456
  ___async_unwind = 0; //@line 3457
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 3459
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 3461
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 3463
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 3465
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 3467
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 3469
 sp = STACKTOP; //@line 3470
 return;
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8848
 HEAP32[$0 >> 2] = 468; //@line 8849
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 8851
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 8857
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8858
   FUNCTION_TABLE_vi[$6 & 255]($0 + 32 | 0); //@line 8859
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 81; //@line 8862
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8864
    sp = STACKTOP; //@line 8865
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8868
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 8874
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 8881
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8882
 FUNCTION_TABLE_vi[$13 & 255]($0 + 16 | 0); //@line 8883
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 82; //@line 8886
  sp = STACKTOP; //@line 8887
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8890
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10782
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10784
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 10788
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 10790
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 10792
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 10798
 } else {
  $$0 = 0; //@line 10800
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10802
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 10803
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 10806
  sp = STACKTOP; //@line 10807
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 10811
 ___async_unwind = 0; //@line 10812
 HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 10813
 sp = STACKTOP; //@line 10814
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5619
 STACKTOP = STACKTOP + 16 | 0; //@line 5620
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5620
 $1 = sp; //@line 5621
 HEAP32[$1 >> 2] = $varargs; //@line 5622
 $2 = HEAP32[156] | 0; //@line 5623
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5624
 _vfprintf($2, $0, $1) | 0; //@line 5625
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 182; //@line 5628
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5630
  sp = STACKTOP; //@line 5631
  STACKTOP = sp; //@line 5632
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5634
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5635
 _fputc(10, $2) | 0; //@line 5636
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 183; //@line 5639
  sp = STACKTOP; //@line 5640
  STACKTOP = sp; //@line 5641
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5643
  _abort(); //@line 5644
 }
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8641
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 8644
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8645
 $5 = FUNCTION_TABLE_ii[$4 & 15]($0) | 0; //@line 8646
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 77; //@line 8649
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8651
  sp = STACKTOP; //@line 8652
  return 0; //@line 8653
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8655
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0; //@line 8658
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8659
 $10 = FUNCTION_TABLE_iii[$9 & 7]($5, $1) | 0; //@line 8660
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 78; //@line 8663
  sp = STACKTOP; //@line 8664
  return 0; //@line 8665
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8667
  return $10 | 0; //@line 8668
 }
 return 0; //@line 8670
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 4496
 $23 = $0 + 2 | 0; //@line 4505
 $24 = HEAP8[$23 >> 0] | 0; //@line 4506
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 4509
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 4514
  $$lcssa = $24; //@line 4514
 } else {
  $$01618 = $23; //@line 4516
  $$019 = $27; //@line 4516
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 4518
   $31 = HEAP8[$30 >> 0] | 0; //@line 4519
   $$019 = ($$019 | $31 & 255) << 8; //@line 4522
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 4527
    $$lcssa = $31; //@line 4527
    break;
   } else {
    $$01618 = $30; //@line 4530
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 4537
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 4124
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4124
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4125
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 4126
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 4135
    $$016 = $9; //@line 4138
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 4138
   } else {
    $$016 = $0; //@line 4140
    $storemerge = 0; //@line 4140
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 4142
   $$0 = $$016; //@line 4143
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 4147
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 4153
   HEAP32[tempDoublePtr >> 2] = $2; //@line 4156
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 4156
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 4157
  }
 }
 return +$$0;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 1041
  $5 = ($1 | 0) > 2046; //@line 1043
  $7 = $1 + -2046 | 0; //@line 1045
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 1050
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 1050
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 1054
   $12 = ($1 | 0) < -2044; //@line 1056
   $14 = $1 + 2044 | 0; //@line 1058
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 1063
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 1063
  } else {
   $$0 = $0; //@line 1065
   $$020 = $1; //@line 1065
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 1069
 $18 = tempRet0; //@line 1070
 HEAP32[tempDoublePtr >> 2] = $17; //@line 1071
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 1071
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3350
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3352
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3356
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3358
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3360
 $12 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 3363
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 3364
 __ZN6Socket4openEP12NetworkStack(9716, $12) | 0; //@line 3365
 if (!___async) {
  ___async_unwind = 0; //@line 3368
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 154; //@line 3370
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 3372
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 3374
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 3376
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 3378
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 3380
 sp = STACKTOP; //@line 3381
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11861
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11869
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11871
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11873
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11875
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11877
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11879
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11881
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 11892
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 11893
 HEAP32[$10 >> 2] = 0; //@line 11894
 HEAP32[$12 >> 2] = 0; //@line 11895
 HEAP32[$14 >> 2] = 0; //@line 11896
 HEAP32[$2 >> 2] = 0; //@line 11897
 $33 = HEAP32[$16 >> 2] | 0; //@line 11898
 HEAP32[$16 >> 2] = $33 | $18; //@line 11903
 if ($20 | 0) {
  ___unlockfile($22); //@line 11906
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 11909
 return;
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 7879
 STACKTOP = STACKTOP + 32 | 0; //@line 7880
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7880
 $$byval_copy = sp; //@line 7881
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7883
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7885
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7889
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 7890
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 7890
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 7890
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 7890
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 7890
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 7891
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 7895
 STACKTOP = sp; //@line 7896
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7231
 STACKTOP = STACKTOP + 16 | 0; //@line 7232
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7232
 $3 = sp; //@line 7233
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 7235
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 7238
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7239
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 7240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 206; //@line 7243
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7245
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7247
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7249
  sp = STACKTOP; //@line 7250
  STACKTOP = sp; //@line 7251
  return 0; //@line 7251
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7253
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 7257
 }
 STACKTOP = sp; //@line 7259
 return $8 & 1 | 0; //@line 7259
}
function __ZN6Socket4openEP12NetworkStack__async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11584
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11594
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 11595
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 68 >> 2] | 0; //@line 11598
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 11599
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11600
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 88, $8); //@line 11601
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 89; //@line 11604
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 11605
  HEAP32[$16 >> 2] = $10; //@line 11606
  sp = STACKTOP; //@line 11607
  return;
 }
 ___async_unwind = 0; //@line 11610
 HEAP32[$ReallocAsyncCtx6 >> 2] = 89; //@line 11611
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 11612
 HEAP32[$16 >> 2] = $10; //@line 11613
 sp = STACKTOP; //@line 11614
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6142
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 6148
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 6151
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 6154
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6155
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 6156
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 188; //@line 6159
    sp = STACKTOP; //@line 6160
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6163
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_31($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9690
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9694
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 9699
 $$pre = HEAP32[113] | 0; //@line 9700
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 9701
 FUNCTION_TABLE_v[$$pre & 3](); //@line 9702
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 74; //@line 9705
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 9706
  HEAP32[$6 >> 2] = $4; //@line 9707
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 9708
  HEAP32[$7 >> 2] = $5; //@line 9709
  sp = STACKTOP; //@line 9710
  return;
 }
 ___async_unwind = 0; //@line 9713
 HEAP32[$ReallocAsyncCtx9 >> 2] = 74; //@line 9714
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 9715
 HEAP32[$6 >> 2] = $4; //@line 9716
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 9717
 HEAP32[$7 >> 2] = $5; //@line 9718
 sp = STACKTOP; //@line 9719
 return;
}
function _main__async_cb_94($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 3523
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3525
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3527
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3531
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3533
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 3534
 $11 = _sn_coap_protocol_init(12, 155, 10, 14) | 0; //@line 3535
 if (!___async) {
  HEAP32[___async_retval >> 2] = $11; //@line 3539
  ___async_unwind = 0; //@line 3540
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 156; //@line 3542
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 3544
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 3546
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 3548
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 3550
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 3552
 sp = STACKTOP; //@line 3553
 return;
}
function _mbed_vtracef__async_cb_30($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9657
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9659
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 9664
 $$pre = HEAP32[113] | 0; //@line 9665
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 9666
 FUNCTION_TABLE_v[$$pre & 3](); //@line 9667
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 74; //@line 9670
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 9671
  HEAP32[$5 >> 2] = $2; //@line 9672
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 9673
  HEAP32[$6 >> 2] = $4; //@line 9674
  sp = STACKTOP; //@line 9675
  return;
 }
 ___async_unwind = 0; //@line 9678
 HEAP32[$ReallocAsyncCtx9 >> 2] = 74; //@line 9679
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 9680
 HEAP32[$5 >> 2] = $2; //@line 9681
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 9682
 HEAP32[$6 >> 2] = $4; //@line 9683
 sp = STACKTOP; //@line 9684
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7141
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 7143
 $8 = $7 >> 8; //@line 7144
 if (!($7 & 1)) {
  $$0 = $8; //@line 7148
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 7153
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 7155
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 7158
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7163
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 7164
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 204; //@line 7167
  sp = STACKTOP; //@line 7168
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7171
  return;
 }
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10850
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10852
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10854
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10856
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10858
 $10 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 10861
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10862
 $11 = FUNCTION_TABLE_iiiii[$10 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 10863
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 76; //@line 10866
  sp = STACKTOP; //@line 10867
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 10871
 ___async_unwind = 0; //@line 10872
 HEAP32[$ReallocAsyncCtx2 >> 2] = 76; //@line 10873
 sp = STACKTOP; //@line 10874
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6311
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 6317
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 6320
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 6323
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6324
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 6325
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 191; //@line 6328
    sp = STACKTOP; //@line 6329
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6332
    break;
   }
  }
 } while (0);
 return;
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5441
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 5443
 while (1) {
  $2 = _malloc($$) | 0; //@line 5445
  if ($2 | 0) {
   $$lcssa = $2; //@line 5448
   label = 7; //@line 5449
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 5452
  if (!$4) {
   $$lcssa = 0; //@line 5455
   label = 7; //@line 5456
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5459
  FUNCTION_TABLE_v[$4 & 3](); //@line 5460
  if (___async) {
   label = 5; //@line 5463
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5466
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 179; //@line 5469
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 5471
  sp = STACKTOP; //@line 5472
  return 0; //@line 5473
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 5476
 }
 return 0; //@line 5478
}
function ___dynamic_cast__async_cb_41($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10333
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10335
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10337
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10343
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 10358
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 10374
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 10379
    break;
   }
  default:
   {
    $$0 = 0; //@line 10383
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 10388
 return;
}
function __ZN6Socket5closeEv__async_cb_36($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10097
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10101
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10103
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 10104
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 10107
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10108
 FUNCTION_TABLE_vi[$8 & 255]($4); //@line 10109
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 10112
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 10113
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 10114
  sp = STACKTOP; //@line 10115
  return;
 }
 ___async_unwind = 0; //@line 10118
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 10119
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 10120
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 10121
 sp = STACKTOP; //@line 10122
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7183
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 7185
 $7 = $6 >> 8; //@line 7186
 if (!($6 & 1)) {
  $$0 = $7; //@line 7190
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 7195
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 7197
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 7200
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7205
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 7206
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 205; //@line 7209
  sp = STACKTOP; //@line 7210
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7213
  return;
 }
}
function _mbed_error_vfprintf__async_cb_3($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7536
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 7538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7542
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7544
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7546
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 7548
 _serial_putc(9708, $2 << 24 >> 24); //@line 7549
 if (!___async) {
  ___async_unwind = 0; //@line 7552
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 139; //@line 7554
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 7556
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 7558
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 7560
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 7562
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 7564
 sp = STACKTOP; //@line 7565
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7098
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 7100
 $6 = $5 >> 8; //@line 7101
 if (!($5 & 1)) {
  $$0 = $6; //@line 7105
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 7110
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 7112
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 7115
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7120
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 7121
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 203; //@line 7124
  sp = STACKTOP; //@line 7125
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7128
  return;
 }
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3935
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3937
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3939
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3941
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 88 >> 2] | 0; //@line 3944
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3945
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 3946
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 46; //@line 3949
  sp = STACKTOP; //@line 3950
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 3954
 ___async_unwind = 0; //@line 3955
 HEAP32[$ReallocAsyncCtx2 >> 2] = 46; //@line 3956
 sp = STACKTOP; //@line 3957
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 16295
  return $$1 | 0; //@line 16296
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 16301
  $$1 = 0; //@line 16302
  return $$1 | 0; //@line 16303
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 16310
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 16314
  return $$1 | 0; //@line 16315
 }
 $14 = _malloc($1) | 0; //@line 16317
 if (!$14) {
  $$1 = 0; //@line 16320
  return $$1 | 0; //@line 16321
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 16324
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 16329
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 16332
 _free($0); //@line 16333
 $$1 = $14; //@line 16334
 return $$1 | 0; //@line 16335
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 1415
 $3 = HEAP8[$1 >> 0] | 0; //@line 1417
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 1421
 $7 = $0 + 20 | 0; //@line 1422
 $9 = $0 + 28 | 0; //@line 1424
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 15]($0, 0, 0) | 0; //@line 1430
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 1433
 HEAP32[$9 >> 2] = 0; //@line 1434
 HEAP32[$7 >> 2] = 0; //@line 1435
 $15 = HEAP32[$0 >> 2] | 0; //@line 1436
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 1444
  HEAP32[$0 + 8 >> 2] = $23; //@line 1446
  HEAP32[$0 + 4 >> 2] = $23; //@line 1448
  $$0 = $15 << 27 >> 31; //@line 1451
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 1454
  $$0 = -1; //@line 1455
 }
 return $$0 | 0; //@line 1457
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_60($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11989
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11991
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11993
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11995
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 88 >> 2] | 0; //@line 11998
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11999
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 12000
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 33; //@line 12003
  sp = STACKTOP; //@line 12004
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 12008
 ___async_unwind = 0; //@line 12009
 HEAP32[$ReallocAsyncCtx2 >> 2] = 33; //@line 12010
 sp = STACKTOP; //@line 12011
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 684
 $3 = HEAP32[$1 >> 2] | 0; //@line 685
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 687
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 693
  return $$0$i | 0; //@line 694
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 696
 _wait_ms(1); //@line 697
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 40; //@line 700
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 702
  sp = STACKTOP; //@line 703
  return 0; //@line 704
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 706
 HEAP8[$1 + 8 >> 0] = 1; //@line 708
 $$0$i = 0; //@line 709
 return $$0$i | 0; //@line 710
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 3122
 STACKTOP = STACKTOP + 256 | 0; //@line 3123
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 3123
 $5 = sp; //@line 3124
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 3130
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 3134
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 3137
   $$011 = $9; //@line 3138
   do {
    _out_670($0, $5, 256); //@line 3140
    $$011 = $$011 + -256 | 0; //@line 3141
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 3150
  } else {
   $$0$lcssa = $9; //@line 3152
  }
  _out_670($0, $5, $$0$lcssa); //@line 3154
 }
 STACKTOP = sp; //@line 3156
 return;
}
function _main__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3486
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3488
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3492
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3494
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3496
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 3499
 HEAP32[$2 + 4 >> 2] = 6301; //@line 3501
 _printf(6353, $2) | 0; //@line 3502
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3503
 __Z17recv_coap_messagev(); //@line 3504
 if (!___async) {
  ___async_unwind = 0; //@line 3507
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 3509
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 3511
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 3513
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 3515
 sp = STACKTOP; //@line 3516
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 287
 $3 = HEAP32[$1 >> 2] | 0; //@line 288
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 290
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 296
  return $$0 | 0; //@line 297
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 299
 _wait_ms(1); //@line 300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 27; //@line 303
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 305
  sp = STACKTOP; //@line 306
  return 0; //@line 307
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 309
 HEAP8[$1 + 8 >> 0] = 1; //@line 311
 $$0 = 0; //@line 312
 return $$0 | 0; //@line 313
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17639
 STACKTOP = STACKTOP + 32 | 0; //@line 17640
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17640
 $vararg_buffer = sp; //@line 17641
 $3 = sp + 20 | 0; //@line 17642
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 17646
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 17648
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 17650
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 17652
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 17654
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 17659
  $10 = -1; //@line 17660
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 17663
 }
 STACKTOP = sp; //@line 17665
 return $10 | 0; //@line 17665
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11982
 STACKTOP = STACKTOP + 16 | 0; //@line 11983
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11983
 $vararg_buffer = sp; //@line 11984
 HEAP32[$vararg_buffer >> 2] = $0; //@line 11985
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 11987
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 11989
 _mbed_error_printf(5767, $vararg_buffer); //@line 11990
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11991
 _mbed_die(); //@line 11992
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 119; //@line 11995
  sp = STACKTOP; //@line 11996
  STACKTOP = sp; //@line 11997
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11999
  STACKTOP = sp; //@line 12000
  return;
 }
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 8773
 STACKTOP = STACKTOP + 48 | 0; //@line 8774
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8774
 $$byval_copy = sp + 20 | 0; //@line 8775
 $2 = sp; //@line 8776
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 8777
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 8778
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 8778
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 8778
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 8778
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 8778
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 8779
 STACKTOP = sp; //@line 8780
 return $3 | 0; //@line 8780
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_71($0) {
 $0 = $0 | 0;
 var $$355$ = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 15909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15913
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15915
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15917
 $$355$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 15919
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 15920
 __ZN9UDPSocketD2Ev($4); //@line 15921
 if (!___async) {
  ___async_unwind = 0; //@line 15924
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 109; //@line 15926
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $6; //@line 15928
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $$355$; //@line 15930
 sp = STACKTOP; //@line 15931
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5165
 STACKTOP = STACKTOP + 16 | 0; //@line 5166
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5166
 $1 = sp; //@line 5167
 HEAP32[$1 >> 2] = $varargs; //@line 5168
 $2 = HEAP32[188] | 0; //@line 5169
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5170
 $3 = _vfprintf($2, $0, $1) | 0; //@line 5171
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 175; //@line 5174
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5176
  sp = STACKTOP; //@line 5177
  STACKTOP = sp; //@line 5178
  return 0; //@line 5178
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5180
  STACKTOP = sp; //@line 5181
  return $3 | 0; //@line 5181
 }
 return 0; //@line 5183
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5001
 STACKTOP = STACKTOP + 16 | 0; //@line 5002
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5002
 $3 = sp; //@line 5003
 HEAP32[$3 >> 2] = $varargs; //@line 5004
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5005
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 5006
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 171; //@line 5009
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 5011
  sp = STACKTOP; //@line 5012
  STACKTOP = sp; //@line 5013
  return 0; //@line 5013
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5015
  STACKTOP = sp; //@line 5016
  return $4 | 0; //@line 5016
 }
 return 0; //@line 5018
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9168
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9171
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9173
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 9175
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 9180
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9185
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9187
 FUNCTION_TABLE_vi[$11 & 255]($4); //@line 9188
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 92; //@line 9191
  sp = STACKTOP; //@line 9192
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9195
  return;
 }
}
function _mbed_vtracef__async_cb_29($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9627
 HEAP32[107] = HEAP32[105]; //@line 9629
 $2 = HEAP32[113] | 0; //@line 9630
 if (!$2) {
  return;
 }
 $4 = HEAP32[114] | 0; //@line 9635
 HEAP32[114] = 0; //@line 9636
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 9637
 FUNCTION_TABLE_v[$2 & 3](); //@line 9638
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9641
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 9642
  HEAP32[$5 >> 2] = $4; //@line 9643
  sp = STACKTOP; //@line 9644
  return;
 }
 ___async_unwind = 0; //@line 9647
 HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9648
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 9649
 HEAP32[$5 >> 2] = $4; //@line 9650
 sp = STACKTOP; //@line 9651
 return;
}
function _mbed_vtracef__async_cb_26($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9363
 HEAP32[107] = HEAP32[105]; //@line 9365
 $2 = HEAP32[113] | 0; //@line 9366
 if (!$2) {
  return;
 }
 $4 = HEAP32[114] | 0; //@line 9371
 HEAP32[114] = 0; //@line 9372
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 9373
 FUNCTION_TABLE_v[$2 & 3](); //@line 9374
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9377
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 9378
  HEAP32[$5 >> 2] = $4; //@line 9379
  sp = STACKTOP; //@line 9380
  return;
 }
 ___async_unwind = 0; //@line 9383
 HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9384
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 9385
 HEAP32[$5 >> 2] = $4; //@line 9386
 sp = STACKTOP; //@line 9387
 return;
}
function _mbed_vtracef__async_cb_25($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9333
 HEAP32[107] = HEAP32[105]; //@line 9335
 $2 = HEAP32[113] | 0; //@line 9336
 if (!$2) {
  return;
 }
 $4 = HEAP32[114] | 0; //@line 9341
 HEAP32[114] = 0; //@line 9342
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 9343
 FUNCTION_TABLE_v[$2 & 3](); //@line 9344
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9347
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 9348
  HEAP32[$5 >> 2] = $4; //@line 9349
  sp = STACKTOP; //@line 9350
  return;
 }
 ___async_unwind = 0; //@line 9353
 HEAP32[$ReallocAsyncCtx8 >> 2] = 73; //@line 9354
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 9355
 HEAP32[$5 >> 2] = $4; //@line 9356
 sp = STACKTOP; //@line 9357
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5123
 STACKTOP = STACKTOP + 16 | 0; //@line 5124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5124
 $2 = sp; //@line 5125
 HEAP32[$2 >> 2] = $varargs; //@line 5126
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5127
 $3 = _vsprintf($0, $1, $2) | 0; //@line 5128
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 173; //@line 5131
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5133
  sp = STACKTOP; //@line 5134
  STACKTOP = sp; //@line 5135
  return 0; //@line 5135
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5137
  STACKTOP = sp; //@line 5138
  return $3 | 0; //@line 5138
 }
 return 0; //@line 5140
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 5864
 $5 = HEAP32[$4 >> 2] | 0; //@line 5865
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 5869
   HEAP32[$1 + 24 >> 2] = $3; //@line 5871
   HEAP32[$1 + 36 >> 2] = 1; //@line 5873
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 5877
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 5880
    HEAP32[$1 + 24 >> 2] = 2; //@line 5882
    HEAP8[$1 + 54 >> 0] = 1; //@line 5884
    break;
   }
   $10 = $1 + 24 | 0; //@line 5887
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 5891
   }
  }
 } while (0);
 return;
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 10321
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 10325
  } else {
   $$0$i = 1; //@line 10327
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 10333
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 10339
    $11 = $1 + 44 | 0; //@line 10340
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 10344
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 10349
     break;
    }
   } else {
    $$0$i = 0; //@line 10353
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 10358
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7291
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7293
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7295
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 16 >> 2] | 0; //@line 7298
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 7299
 $7 = FUNCTION_TABLE_iii[$6 & 7]($AsyncRetVal, $2) | 0; //@line 7300
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 78; //@line 7303
  sp = STACKTOP; //@line 7304
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 7308
 ___async_unwind = 0; //@line 7309
 HEAP32[$ReallocAsyncCtx2 >> 2] = 78; //@line 7310
 sp = STACKTOP; //@line 7311
 return;
}
function _main__async_cb_89($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3387
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3393
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 3394
 _free($4); //@line 3395
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3396
 _puts(6401) | 0; //@line 3397
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 159; //@line 3400
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 3401
  HEAP32[$7 >> 2] = $6; //@line 3402
  sp = STACKTOP; //@line 3403
  return;
 }
 ___async_unwind = 0; //@line 3406
 HEAP32[$ReallocAsyncCtx3 >> 2] = 159; //@line 3407
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 3408
 HEAP32[$7 >> 2] = $6; //@line 3409
 sp = STACKTOP; //@line 3410
 return;
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10704
 $3 = _malloc($2) | 0; //@line 10705
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 10708
  if (!$5) {
   $$lcssa = 0; //@line 10711
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 10713
   FUNCTION_TABLE_v[$5 & 3](); //@line 10714
   if (!___async) {
    ___async_unwind = 0; //@line 10717
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 179; //@line 10719
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 10721
   sp = STACKTOP; //@line 10722
   return;
  }
 } else {
  $$lcssa = $3; //@line 10726
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 10729
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12479
 $2 = HEAP32[188] | 0; //@line 12480
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12481
 _putc($1, $2) | 0; //@line 12482
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 140; //@line 12485
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 12487
  sp = STACKTOP; //@line 12488
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12491
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12492
 _fflush($2) | 0; //@line 12493
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 12496
  sp = STACKTOP; //@line 12497
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12500
  return;
 }
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 17746
 $3 = HEAP8[$1 >> 0] | 0; //@line 17747
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 17752
  $$lcssa8 = $2; //@line 17752
 } else {
  $$011 = $1; //@line 17754
  $$0710 = $0; //@line 17754
  do {
   $$0710 = $$0710 + 1 | 0; //@line 17756
   $$011 = $$011 + 1 | 0; //@line 17757
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 17758
   $9 = HEAP8[$$011 >> 0] | 0; //@line 17759
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 17764
  $$lcssa8 = $8; //@line 17764
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 17774
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17698
 STACKTOP = STACKTOP + 32 | 0; //@line 17699
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17699
 $vararg_buffer = sp; //@line 17700
 HEAP32[$0 + 36 >> 2] = 9; //@line 17703
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 17711
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 17713
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 17715
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 17720
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 17723
 STACKTOP = sp; //@line 17724
 return $14 | 0; //@line 17724
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6414
 STACKTOP = STACKTOP + 16 | 0; //@line 6415
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6415
 $vararg_buffer = sp; //@line 6416
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6417
 FUNCTION_TABLE_v[$0 & 3](); //@line 6418
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 193; //@line 6421
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 6423
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 6425
  sp = STACKTOP; //@line 6426
  STACKTOP = sp; //@line 6427
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6429
  _abort_message(9535, $vararg_buffer); //@line 6430
 }
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7894
 STACKTOP = STACKTOP + 16 | 0; //@line 7895
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7895
 $3 = sp; //@line 7896
 HEAP32[$3 >> 2] = $varargs; //@line 7897
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7898
 _mbed_vtracef($0, $1, $2, $3); //@line 7899
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 7902
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7904
  sp = STACKTOP; //@line 7905
  STACKTOP = sp; //@line 7906
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7908
  STACKTOP = sp; //@line 7909
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 4966
  } else {
   $$01318 = $0; //@line 4968
   $$01417 = $2; //@line 4968
   $$019 = $1; //@line 4968
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 4970
    $5 = HEAP8[$$019 >> 0] | 0; //@line 4971
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 4976
    if (!$$01417) {
     $14 = 0; //@line 4981
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 4984
     $$019 = $$019 + 1 | 0; //@line 4984
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 4990
  }
 } while (0);
 return $14 | 0; //@line 4993
}
function _mbed_die__async_cb_20($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 8332
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8334
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8336
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 8337
 _wait_ms(150); //@line 8338
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 122; //@line 8341
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 8342
  HEAP32[$4 >> 2] = $2; //@line 8343
  sp = STACKTOP; //@line 8344
  return;
 }
 ___async_unwind = 0; //@line 8347
 HEAP32[$ReallocAsyncCtx14 >> 2] = 122; //@line 8348
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 8349
 HEAP32[$4 >> 2] = $2; //@line 8350
 sp = STACKTOP; //@line 8351
 return;
}
function _mbed_die__async_cb_19($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 8307
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8309
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8311
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 8312
 _wait_ms(150); //@line 8313
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 123; //@line 8316
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 8317
  HEAP32[$4 >> 2] = $2; //@line 8318
  sp = STACKTOP; //@line 8319
  return;
 }
 ___async_unwind = 0; //@line 8322
 HEAP32[$ReallocAsyncCtx13 >> 2] = 123; //@line 8323
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 8324
 HEAP32[$4 >> 2] = $2; //@line 8325
 sp = STACKTOP; //@line 8326
 return;
}
function _mbed_die__async_cb_18($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 8282
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8284
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8286
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 8287
 _wait_ms(150); //@line 8288
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 124; //@line 8291
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 8292
  HEAP32[$4 >> 2] = $2; //@line 8293
  sp = STACKTOP; //@line 8294
  return;
 }
 ___async_unwind = 0; //@line 8297
 HEAP32[$ReallocAsyncCtx12 >> 2] = 124; //@line 8298
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 8299
 HEAP32[$4 >> 2] = $2; //@line 8300
 sp = STACKTOP; //@line 8301
 return;
}
function _mbed_die__async_cb_17($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 8257
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8259
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8261
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 8262
 _wait_ms(150); //@line 8263
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 125; //@line 8266
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 8267
  HEAP32[$4 >> 2] = $2; //@line 8268
  sp = STACKTOP; //@line 8269
  return;
 }
 ___async_unwind = 0; //@line 8272
 HEAP32[$ReallocAsyncCtx11 >> 2] = 125; //@line 8273
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 8274
 HEAP32[$4 >> 2] = $2; //@line 8275
 sp = STACKTOP; //@line 8276
 return;
}
function _mbed_die__async_cb_16($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 8232
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8234
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8236
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 8237
 _wait_ms(150); //@line 8238
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 126; //@line 8241
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 8242
  HEAP32[$4 >> 2] = $2; //@line 8243
  sp = STACKTOP; //@line 8244
  return;
 }
 ___async_unwind = 0; //@line 8247
 HEAP32[$ReallocAsyncCtx10 >> 2] = 126; //@line 8248
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 8249
 HEAP32[$4 >> 2] = $2; //@line 8250
 sp = STACKTOP; //@line 8251
 return;
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 19859
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 19865
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 19870
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 19875
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 19880
     HEAP32[$7 >> 2] = $2; //@line 19882
     HEAP32[$7 + 4 >> 2] = $3; //@line 19885
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _mbed_die__async_cb_15($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8207
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8209
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8211
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 8212
 _wait_ms(150); //@line 8213
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 127; //@line 8216
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 8217
  HEAP32[$4 >> 2] = $2; //@line 8218
  sp = STACKTOP; //@line 8219
  return;
 }
 ___async_unwind = 0; //@line 8222
 HEAP32[$ReallocAsyncCtx9 >> 2] = 127; //@line 8223
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 8224
 HEAP32[$4 >> 2] = $2; //@line 8225
 sp = STACKTOP; //@line 8226
 return;
}
function _mbed_die__async_cb_14($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8184
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8186
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 8187
 _wait_ms(400); //@line 8188
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 128; //@line 8191
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 8192
  HEAP32[$4 >> 2] = $2; //@line 8193
  sp = STACKTOP; //@line 8194
  return;
 }
 ___async_unwind = 0; //@line 8197
 HEAP32[$ReallocAsyncCtx8 >> 2] = 128; //@line 8198
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 8199
 HEAP32[$4 >> 2] = $2; //@line 8200
 sp = STACKTOP; //@line 8201
 return;
}
function _mbed_die__async_cb_13($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8157
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8159
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8161
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 8162
 _wait_ms(400); //@line 8163
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 129; //@line 8166
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 8167
  HEAP32[$4 >> 2] = $2; //@line 8168
  sp = STACKTOP; //@line 8169
  return;
 }
 ___async_unwind = 0; //@line 8172
 HEAP32[$ReallocAsyncCtx7 >> 2] = 129; //@line 8173
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 8174
 HEAP32[$4 >> 2] = $2; //@line 8175
 sp = STACKTOP; //@line 8176
 return;
}
function _mbed_die__async_cb_12($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8134
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8136
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 8137
 _wait_ms(400); //@line 8138
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 130; //@line 8141
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 8142
  HEAP32[$4 >> 2] = $2; //@line 8143
  sp = STACKTOP; //@line 8144
  return;
 }
 ___async_unwind = 0; //@line 8147
 HEAP32[$ReallocAsyncCtx6 >> 2] = 130; //@line 8148
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 8149
 HEAP32[$4 >> 2] = $2; //@line 8150
 sp = STACKTOP; //@line 8151
 return;
}
function _mbed_die__async_cb_11($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8107
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8109
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8111
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 8112
 _wait_ms(400); //@line 8113
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 131; //@line 8116
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 8117
  HEAP32[$4 >> 2] = $2; //@line 8118
  sp = STACKTOP; //@line 8119
  return;
 }
 ___async_unwind = 0; //@line 8122
 HEAP32[$ReallocAsyncCtx5 >> 2] = 131; //@line 8123
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 8124
 HEAP32[$4 >> 2] = $2; //@line 8125
 sp = STACKTOP; //@line 8126
 return;
}
function _mbed_die__async_cb_10($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8084
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8086
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 8087
 _wait_ms(400); //@line 8088
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 8091
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 8092
  HEAP32[$4 >> 2] = $2; //@line 8093
  sp = STACKTOP; //@line 8094
  return;
 }
 ___async_unwind = 0; //@line 8097
 HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 8098
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 8099
 HEAP32[$4 >> 2] = $2; //@line 8100
 sp = STACKTOP; //@line 8101
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 18736
 STACKTOP = STACKTOP + 128 | 0; //@line 18737
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 18737
 $3 = sp; //@line 18738
 dest = $3; //@line 18739
 stop = dest + 124 | 0; //@line 18739
 do {
  HEAP32[dest >> 2] = 0; //@line 18739
  dest = dest + 4 | 0; //@line 18739
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 15; //@line 18741
 HEAP32[$3 + 44 >> 2] = $0; //@line 18743
 HEAP32[$3 + 76 >> 2] = -1; //@line 18745
 HEAP32[$3 + 84 >> 2] = $0; //@line 18747
 $8 = _vfscanf($3, $1, $2) | 0; //@line 18748
 STACKTOP = sp; //@line 18749
 return $8 | 0; //@line 18749
}
function _mbed_die__async_cb_9($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8059
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8061
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 8062
 _wait_ms(400); //@line 8063
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 8066
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 8067
  HEAP32[$4 >> 2] = $2; //@line 8068
  sp = STACKTOP; //@line 8069
  return;
 }
 ___async_unwind = 0; //@line 8072
 HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 8073
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 8074
 HEAP32[$4 >> 2] = $2; //@line 8075
 sp = STACKTOP; //@line 8076
 return;
}
function _mbed_die__async_cb_8($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8032
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8034
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 8036
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8037
 _wait_ms(400); //@line 8038
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 8041
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 8042
  HEAP32[$4 >> 2] = $2; //@line 8043
  sp = STACKTOP; //@line 8044
  return;
 }
 ___async_unwind = 0; //@line 8047
 HEAP32[$ReallocAsyncCtx2 >> 2] = 134; //@line 8048
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 8049
 HEAP32[$4 >> 2] = $2; //@line 8050
 sp = STACKTOP; //@line 8051
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12310
 STACKTOP = STACKTOP + 16 | 0; //@line 12311
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12311
 $1 = sp; //@line 12312
 HEAP32[$1 >> 2] = $varargs; //@line 12313
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12314
 _mbed_error_vfprintf($0, $1); //@line 12315
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 136; //@line 12318
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12320
  sp = STACKTOP; //@line 12321
  STACKTOP = sp; //@line 12322
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12324
  STACKTOP = sp; //@line 12325
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 752
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 755
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 758
  return $$0$i | 0; //@line 759
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 761
 _wait_ms(1); //@line 762
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 42; //@line 765
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 767
  sp = STACKTOP; //@line 768
  return 0; //@line 769
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 771
 $$0$i = $6; //@line 772
 return $$0$i | 0; //@line 773
}
function _mbed_die__async_cb_7($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8007
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8009
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8011
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 8012
 _wait_ms(400); //@line 8013
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 135; //@line 8016
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 8017
  HEAP32[$4 >> 2] = $2; //@line 8018
  sp = STACKTOP; //@line 8019
  return;
 }
 ___async_unwind = 0; //@line 8022
 HEAP32[$ReallocAsyncCtx >> 2] = 135; //@line 8023
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 8024
 HEAP32[$4 >> 2] = $2; //@line 8025
 sp = STACKTOP; //@line 8026
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 355
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 358
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 361
  return $$0 | 0; //@line 362
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 374
 $$0 = $6; //@line 375
 return $$0 | 0; //@line 376
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 638
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 640
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 641
 _wait_ms(1); //@line 642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 39; //@line 645
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 647
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 649
  sp = STACKTOP; //@line 650
  return 0; //@line 651
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 653
 HEAP8[$1 + 8 >> 0] = 0; //@line 655
 if (!$1) {
  return $3 | 0; //@line 658
 }
 __ZdlPv($1); //@line 660
 return $3 | 0; //@line 661
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 241
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 243
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 244
 _wait_ms(1); //@line 245
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 26; //@line 248
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 250
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 252
  sp = STACKTOP; //@line 253
  return 0; //@line 254
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 256
 HEAP8[$1 + 8 >> 0] = 0; //@line 258
 if (!$1) {
  return $3 | 0; //@line 261
 }
 __ZdlPv($1); //@line 263
 return $3 | 0; //@line 264
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 17880
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 17882
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 17888
  $11 = ___fwritex($0, $4, $3) | 0; //@line 17889
  if ($phitmp) {
   $13 = $11; //@line 17891
  } else {
   ___unlockfile($3); //@line 17893
   $13 = $11; //@line 17894
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 17898
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 17902
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 17905
 }
 return $15 | 0; //@line 17907
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 4533
 newDynamicTop = oldDynamicTop + increment | 0; //@line 4534
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 4538
  ___setErrNo(12); //@line 4539
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 4543
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 4547
   ___setErrNo(12); //@line 4548
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 4552
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 2983
 } else {
  $$056 = $2; //@line 2985
  $15 = $1; //@line 2985
  $8 = $0; //@line 2985
  while (1) {
   $14 = $$056 + -1 | 0; //@line 2993
   HEAP8[$14 >> 0] = HEAPU8[7198 + ($8 & 15) >> 0] | 0 | $3; //@line 2994
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 2995
   $15 = tempRet0; //@line 2996
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 3001
    break;
   } else {
    $$056 = $14; //@line 3004
   }
  }
 }
 return $$05$lcssa | 0; //@line 3008
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10451
 $1 = $0 + 52 | 0; //@line 10452
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 10455
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 10458
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 10468
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10469
 FUNCTION_TABLE_vi[$$pre & 255]($0 + 32 | 0); //@line 10470
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 100; //@line 10473
  sp = STACKTOP; //@line 10474
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10477
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 18097
 $3 = HEAP8[$1 >> 0] | 0; //@line 18099
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 18103
 $7 = HEAP32[$0 >> 2] | 0; //@line 18104
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 18109
  HEAP32[$0 + 4 >> 2] = 0; //@line 18111
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 18113
  HEAP32[$0 + 28 >> 2] = $14; //@line 18115
  HEAP32[$0 + 20 >> 2] = $14; //@line 18117
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 18123
  $$0 = 0; //@line 18124
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 18127
  $$0 = -1; //@line 18128
 }
 return $$0 | 0; //@line 18130
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 6379
 $0 = ___cxa_get_globals_fast() | 0; //@line 6380
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 6383
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 6387
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 6399
    _emscripten_alloc_async_context(4, sp) | 0; //@line 6400
    __ZSt11__terminatePFvvE($16); //@line 6401
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 6406
 _emscripten_alloc_async_context(4, sp) | 0; //@line 6407
 __ZSt11__terminatePFvvE($17); //@line 6408
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10747
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10749
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 10751
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10758
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10759
 FUNCTION_TABLE_vi[$8 & 255]($2 + 16 | 0); //@line 10760
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 10763
  sp = STACKTOP; //@line 10764
  return;
 }
 ___async_unwind = 0; //@line 10767
 HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 10768
 sp = STACKTOP; //@line 10769
 return;
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3259
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3261
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 3263
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 3270
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3271
 FUNCTION_TABLE_vi[$8 & 255]($2 + 16 | 0); //@line 3272
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 98; //@line 3275
  sp = STACKTOP; //@line 3276
  return;
 }
 ___async_unwind = 0; //@line 3279
 HEAP32[$ReallocAsyncCtx2 >> 2] = 98; //@line 3280
 sp = STACKTOP; //@line 3281
 return;
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 19814
 STACKTOP = STACKTOP + 16 | 0; //@line 19815
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19815
 $2 = sp; //@line 19816
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 19818
 $$0 = $1; //@line 19819
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 19833
  $10 = HEAP32[$9 >> 2] | 0; //@line 19834
  HEAP32[$2 >> 2] = $9 + 4; //@line 19836
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 19839
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 19844
 return $10 | 0; //@line 19844
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 727
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 730
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 731
 _wait_ms(1); //@line 732
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 41; //@line 735
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 737
  sp = STACKTOP; //@line 738
  return 0; //@line 739
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 741
  return $6 | 0; //@line 742
 }
 return 0; //@line 744
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 1465
 $4 = HEAP32[$3 >> 2] | 0; //@line 1466
 $5 = $2 + 256 | 0; //@line 1467
 $6 = _memchr($4, 0, $5) | 0; //@line 1468
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 1473
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 1475
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 1476
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 1479
 $14 = $4 + $$027 | 0; //@line 1480
 HEAP32[$0 + 8 >> 2] = $14; //@line 1482
 HEAP32[$3 >> 2] = $14; //@line 1483
 return $$027$ | 0; //@line 1484
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 330
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 333
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 334
 _wait_ms(1); //@line 335
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 28; //@line 338
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 340
  sp = STACKTOP; //@line 341
  return 0; //@line 342
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 344
  return $6 | 0; //@line 345
 }
 return 0; //@line 347
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 4451
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 4454
 $$sink17$sink = $0; //@line 4454
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 4456
  $12 = HEAP8[$11 >> 0] | 0; //@line 4457
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 4465
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 4470
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 4475
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 3020
 } else {
  $$06 = $2; //@line 3022
  $11 = $1; //@line 3022
  $7 = $0; //@line 3022
  while (1) {
   $10 = $$06 + -1 | 0; //@line 3027
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 3028
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 3029
   $11 = tempRet0; //@line 3030
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 3035
    break;
   } else {
    $$06 = $10; //@line 3038
   }
  }
 }
 return $$0$lcssa | 0; //@line 3042
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_77($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16699
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16703
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 16705
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 16706
 FUNCTION_TABLE_vi[$5 & 255]($4); //@line 16707
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 91; //@line 16710
  sp = STACKTOP; //@line 16711
  return;
 }
 ___async_unwind = 0; //@line 16714
 HEAP32[$ReallocAsyncCtx >> 2] = 91; //@line 16715
 sp = STACKTOP; //@line 16716
 return;
}
function _invoke_ticker__async_cb_47($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10896
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 10902
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 10903
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10904
 FUNCTION_TABLE_vi[$5 & 255]($6); //@line 10905
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 10908
  sp = STACKTOP; //@line 10909
  return;
 }
 ___async_unwind = 0; //@line 10912
 HEAP32[$ReallocAsyncCtx >> 2] = 143; //@line 10913
 sp = STACKTOP; //@line 10914
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7264
 do {
  if (!$0) {
   $3 = 0; //@line 7268
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7270
   $2 = ___dynamic_cast($0, 104, 160, 0) | 0; //@line 7271
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 207; //@line 7274
    sp = STACKTOP; //@line 7275
    return 0; //@line 7276
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7278
    $3 = ($2 | 0) != 0 & 1; //@line 7281
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 7286
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 2664
 } else {
  $$04 = 0; //@line 2666
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 2669
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 2673
   $12 = $7 + 1 | 0; //@line 2674
   HEAP32[$0 >> 2] = $12; //@line 2675
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 2681
    break;
   } else {
    $$04 = $11; //@line 2684
   }
  }
 }
 return $$0$lcssa | 0; //@line 2688
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 4046
 $y_sroa_0_0_extract_trunc = $b$0; //@line 4047
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 4048
 $1$1 = tempRet0; //@line 4049
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 4051
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 563
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 565
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 566
 _wait_ms(1); //@line 567
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 570
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 572
  sp = STACKTOP; //@line 573
  return 0; //@line 574
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 576
  return $2 | 0; //@line 577
 }
 return 0; //@line 579
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 4464
  src = src + num | 0; //@line 4465
  dest = dest + num | 0; //@line 4466
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 4468
   src = src - 1 | 0; //@line 4469
   num = num - 1 | 0; //@line 4470
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 4471
  }
  dest = ret; //@line 4473
 } else {
  _memcpy(dest, src, num) | 0; //@line 4475
 }
 return dest | 0; //@line 4477
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 4031
 $2 = $b & 65535; //@line 4032
 $3 = Math_imul($2, $1) | 0; //@line 4033
 $6 = $a >>> 16; //@line 4034
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 4035
 $11 = $b >>> 16; //@line 4036
 $12 = Math_imul($11, $1) | 0; //@line 4037
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 4038
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 468; //@line 8834
 HEAP32[$0 + 4 >> 2] = 0; //@line 8836
 HEAP32[$0 + 8 >> 2] = 0; //@line 8838
 HEAP32[$0 + 12 >> 2] = -1; //@line 8840
 $4 = $0 + 16 | 0; //@line 8841
 HEAP32[$4 >> 2] = 0; //@line 8842
 HEAP32[$4 + 4 >> 2] = 0; //@line 8842
 HEAP32[$4 + 8 >> 2] = 0; //@line 8842
 HEAP32[$4 + 12 >> 2] = 0; //@line 8842
 HEAP32[$4 + 16 >> 2] = 0; //@line 8842
 HEAP32[$4 + 20 >> 2] = 0; //@line 8842
 HEAP32[$4 + 24 >> 2] = 0; //@line 8842
 HEAP32[$4 + 28 >> 2] = 0; //@line 8842
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 21; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 16257
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 16259
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 16266
  } else {
   $$0 = $3; //@line 16268
  }
 }
 $8 = _malloc($$0) | 0; //@line 16271
 if (!$8) {
  return $8 | 0; //@line 16274
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 16281
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 16283
 return $8 | 0; //@line 16284
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 19; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 20; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _mbed_die__async_cb_21($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 8357
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8359
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 8361
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 8362
 _wait_ms(150); //@line 8363
 if (!___async) {
  ___async_unwind = 0; //@line 8366
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 121; //@line 8368
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 8370
 sp = STACKTOP; //@line 8371
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 7987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7989
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 7991
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 7992
 _wait_ms(150); //@line 7993
 if (!___async) {
  ___async_unwind = 0; //@line 7996
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 120; //@line 7998
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 8000
 sp = STACKTOP; //@line 8001
 return;
}
function ___fflush_unlocked__async_cb_6($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7967
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7969
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7971
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7973
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 7975
 HEAP32[$4 >> 2] = 0; //@line 7976
 HEAP32[$6 >> 2] = 0; //@line 7977
 HEAP32[$8 >> 2] = 0; //@line 7978
 HEAP32[$10 >> 2] = 0; //@line 7979
 HEAP32[___async_retval >> 2] = 0; //@line 7981
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 1388
 STACKTOP = STACKTOP + 16 | 0; //@line 1389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1389
 $1 = sp; //@line 1390
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 15]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 1401
  } else {
   $$0 = -1; //@line 1403
  }
 } else {
  $$0 = -1; //@line 1406
 }
 STACKTOP = sp; //@line 1408
 return $$0 | 0; //@line 1408
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12631
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12632
 _puts(5979) | 0; //@line 12633
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 146; //@line 12636
  sp = STACKTOP; //@line 12637
  return 0; //@line 12638
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12640
  return 0; //@line 12641
 }
 return 0; //@line 12643
}
function _mbed_vtracef__async_cb_24($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9315
 $1 = HEAP32[111] | 0; //@line 9316
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 9317
 FUNCTION_TABLE_vi[$1 & 255](5569); //@line 9318
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 66; //@line 9321
  sp = STACKTOP; //@line 9322
  return;
 }
 ___async_unwind = 0; //@line 9325
 HEAP32[$ReallocAsyncCtx3 >> 2] = 66; //@line 9326
 sp = STACKTOP; //@line 9327
 return;
}
function _serial_putc__async_cb_48($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11014
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11016
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 11017
 _fflush($2) | 0; //@line 11018
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 141; //@line 11021
  sp = STACKTOP; //@line 11022
  return;
 }
 ___async_unwind = 0; //@line 11025
 HEAP32[$ReallocAsyncCtx >> 2] = 141; //@line 11026
 sp = STACKTOP; //@line 11027
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12650
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12651
 _puts(5990) | 0; //@line 12652
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 12655
  sp = STACKTOP; //@line 12656
  return 0; //@line 12657
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12659
  return 0; //@line 12660
 }
 return 0; //@line 12662
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(2105) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 22; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5147
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5148
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 5149
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 174; //@line 5152
  sp = STACKTOP; //@line 5153
  return 0; //@line 5154
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5156
  return $3 | 0; //@line 5157
 }
 return 0; //@line 5159
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 9305
 $3 = $0 + 40 | 0; //@line 9306
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 9307
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9307
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9307
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 9307
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 9307
 HEAP16[$0 + 60 >> 1] = $2; //@line 9309
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 1369
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 1369
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 1370
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 1371
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 1375
 HEAP32[tempDoublePtr >> 2] = $2; //@line 1376
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 1376
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17509
 STACKTOP = STACKTOP + 16 | 0; //@line 17510
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17510
 $vararg_buffer = sp; //@line 17511
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 17515
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 17517
 STACKTOP = sp; //@line 17518
 return $5 | 0; //@line 17518
}
function _emscripten_async_resume() {
 ___async = 0; //@line 4364
 ___async_unwind = 1; //@line 4365
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 4371
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 4375
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 4379
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 4381
 }
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10426
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10427
 __ZN9UDPSocketD2Ev($0); //@line 10428
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 99; //@line 10431
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10433
  sp = STACKTOP; //@line 10434
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10437
  __ZdlPv($0); //@line 10438
  return;
 }
}
function _main__async_cb_90($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3418
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 3419
 _wait(4294967296.0); //@line 3420
 if (!___async) {
  ___async_unwind = 0; //@line 3423
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 160; //@line 3425
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 3427
 sp = STACKTOP; //@line 3428
 return;
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(2060) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 23; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 4306
 STACKTOP = STACKTOP + 16 | 0; //@line 4307
 $rem = __stackBase__ | 0; //@line 4308
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 4309
 STACKTOP = __stackBase__; //@line 4310
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 4311
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 4076
 if ((ret | 0) < 8) return ret | 0; //@line 4077
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 4078
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 4079
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 4080
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 4081
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 4082
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 9317
 $2 = $0 + 40 | 0; //@line 9318
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 9319
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9319
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9319
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 9319
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 9319
 return;
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11147
 HEAP8[$2 + 8 >> 0] = 0; //@line 11149
 if (!$2) {
  $7 = ___async_retval; //@line 11152
  HEAP32[$7 >> 2] = $4; //@line 11153
  return;
 }
 __ZdlPv($2); //@line 11156
 $7 = ___async_retval; //@line 11157
 HEAP32[$7 >> 2] = $4; //@line 11158
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5600
 STACKTOP = STACKTOP + 16 | 0; //@line 5601
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5601
 if (!(_pthread_once(10356, 3) | 0)) {
  $3 = _pthread_getspecific(HEAP32[2590] | 0) | 0; //@line 5607
  STACKTOP = sp; //@line 5608
  return $3 | 0; //@line 5608
 } else {
  _abort_message(9383, sp); //@line 5610
 }
 return 0; //@line 5613
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 5768
 }
 return;
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 18724
 STACKTOP = STACKTOP + 16 | 0; //@line 18725
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18725
 $2 = sp; //@line 18726
 HEAP32[$2 >> 2] = $varargs; //@line 18727
 $3 = _vsscanf($0, $1, $2) | 0; //@line 18728
 STACKTOP = sp; //@line 18729
 return $3 | 0; //@line 18729
}
function __ZL25default_terminate_handlerv__async_cb_56($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11767
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11769
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11771
 HEAP32[$2 >> 2] = 9244; //@line 11772
 HEAP32[$2 + 4 >> 2] = $4; //@line 11774
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 11776
 _abort_message(9108, $2); //@line 11777
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 5106
 $6 = HEAP32[$5 >> 2] | 0; //@line 5107
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 5108
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 5110
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 5112
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 5115
 return $2 | 0; //@line 5116
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3812
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3813
 _fputc(10, $2) | 0; //@line 3814
 if (!___async) {
  ___async_unwind = 0; //@line 3817
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 183; //@line 3819
 sp = STACKTOP; //@line 3820
 return;
}
function _wait($0) {
 $0 = +$0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12572
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12576
 _emscripten_sleep((~~($0 * 1.0e6) | 0) / 1e3 | 0 | 0); //@line 12577
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 144; //@line 12580
  sp = STACKTOP; //@line 12581
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12584
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10583
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10594
  $$0 = 1; //@line 10595
 } else {
  $$0 = 0; //@line 10597
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 10601
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11126
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 11129
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 11134
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11137
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 12458
 HEAP32[$0 >> 2] = $1; //@line 12459
 HEAP32[2426] = 1; //@line 12460
 $4 = $0; //@line 12461
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 12466
 $10 = 9708; //@line 12467
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 12469
 HEAP32[$10 + 4 >> 2] = $9; //@line 12472
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 9962
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 9963
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 9963
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 9963
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 9963
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 9963
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 6362
 STACKTOP = STACKTOP + 16 | 0; //@line 6363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6363
 _free($0); //@line 6365
 if (!(_pthread_setspecific(HEAP32[2590] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 6370
  return;
 } else {
  _abort_message(9482, sp); //@line 6372
 }
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 5844
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12591
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12592
 _emscripten_sleep($0 | 0); //@line 12593
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 12596
  sp = STACKTOP; //@line 12597
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12600
  return;
 }
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 19699
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19701
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 19703
 $7 = $4 - $6 | 0; //@line 19704
 HEAP32[$0 + 108 >> 2] = $7; //@line 19706
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 19715
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7875
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7876
 _puts($0) | 0; //@line 7877
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 61; //@line 7880
  sp = STACKTOP; //@line 7881
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7884
  return;
 }
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(540, 520, 80) | 0; //@line 10739
 HEAP32[130] = HEAP32[$0 >> 2]; //@line 10740
 HEAP32[131] = HEAP32[$0 + 4 >> 2]; //@line 10740
 HEAP32[132] = HEAP32[$0 + 8 >> 2]; //@line 10740
 HEAP32[133] = HEAP32[$0 + 12 >> 2]; //@line 10740
 HEAP32[134] = HEAP32[$0 + 16 >> 2]; //@line 10740
 return 0; //@line 10741
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 5908
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 5912
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 6347
 STACKTOP = STACKTOP + 16 | 0; //@line 6348
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6348
 if (!(_pthread_key_create(10360, 192) | 0)) {
  STACKTOP = sp; //@line 6353
  return;
 } else {
  _abort_message(9432, sp); //@line 6355
 }
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 4340
 HEAP32[new_frame + 4 >> 2] = sp; //@line 4342
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 4344
 ___async_cur_frame = new_frame; //@line 4345
 return ___async_cur_frame + 8 | 0; //@line 4346
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 944
 $5 = HEAP32[$1 >> 2] | 0; //@line 945
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 947
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 949
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10660
 HEAP8[$2 + 8 >> 0] = 0; //@line 10662
 if ($2 | 0) {
  __ZdlPv($2); //@line 10665
 }
 HEAP32[___async_retval >> 2] = $4; //@line 10668
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 7588
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7592
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 7595
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 4329
  return low << bits; //@line 4330
 }
 tempRet0 = low << bits - 32; //@line 4332
 return 0; //@line 4333
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 4318
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 4319
 }
 tempRet0 = 0; //@line 4321
 return high >>> bits - 32 | 0; //@line 4322
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9204
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9204
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9204
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 539
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 541
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 543
 return;
}
function _fflush__async_cb_38($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10216
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 10218
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10221
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 8406
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 8409
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 8412
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 11846
 } else {
  $$0 = -1; //@line 11848
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 11851
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 4601
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 18227
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 18233
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 18237
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 4643
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 4352
 stackRestore(___async_cur_frame | 0); //@line 4353
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 4354
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7850
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 7851
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 7853
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3847
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 3848
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 3850
 return;
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 12434
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 12440
 _emscripten_asm_const_iii(11, $0 | 0, $1 | 0) | 0; //@line 12441
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 17675
  $$0 = -1; //@line 17676
 } else {
  $$0 = $0; //@line 17678
 }
 return $$0 | 0; //@line 17680
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 4105
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 4105
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 4107
 return $1 | 0; //@line 4108
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 1359
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 1359
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 1361
 return $1 | 0; //@line 1362
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 4594
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 4069
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 4070
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 4071
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 4636
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 966
 ___cxa_begin_catch($0 | 0) | 0; //@line 967
 _emscripten_alloc_async_context(4, sp) | 0; //@line 968
 __ZSt9terminatev(); //@line 969
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 983
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 10678
 HEAP32[___async_retval >> 2] = 0; //@line 10680
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 8381
 HEAP32[___async_retval >> 2] = 0; //@line 8383
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 4587
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 4061
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 4063
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 4629
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_46($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10884
 return;
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 18372
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 18377
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_45($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10824
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_70($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 15903
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_101($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3917
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 3165
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 3168
 }
 return $$0 | 0; //@line 3170
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_58($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11973
 return;
}
function __ZN17EthernetInterfaceC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 200; //@line 957
 HEAP32[$0 + 4 >> 2] = 316; //@line 958
 _memset($0 + 60 | 0, 0, 800) | 0; //@line 960
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 4580
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_50($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 11202
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 17867
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 17871
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 4298
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 10319
 return;
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 20043
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 20048
 }
 return $4 | 0; //@line 20050
}
function b24(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 4698
 return 0; //@line 4698
}
function b23(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 4695
 return 0; //@line 4695
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_35($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10046
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_1($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7321
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 4359
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 4360
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_102($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 3925
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 10484
 HEAP32[$0 >> 2] = 504; //@line 10485
 HEAP32[$0 + 52 >> 2] = 0; //@line 10487
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 18363
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 18365
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_59($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 11981
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 6447
 __ZdlPv($0); //@line 6448
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 6130
 __ZdlPv($0); //@line 6131
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function b21(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 4692
 return 0; //@line 4692
}
function b20(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 4689
 return 0; //@line 4689
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7873
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3231
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 5658
 __ZdlPv($0); //@line 5659
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 2650
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 8424
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3837
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_98($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 3788
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12021
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 7](a1 | 0, a2 | 0) | 0; //@line 4573
}
function b87(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 4872
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3734
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7331
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_57($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 11831
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 5855
}
function _sn_coap_builder_calc_needed_packet_data_size($0) {
 $0 = $0 | 0;
 return _sn_coap_builder_calc_needed_packet_data_size_2($0, 0) | 0; //@line 4699
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 3247
 return;
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[2591] | 0; //@line 7220
 HEAP32[2591] = $0 + 0; //@line 7222
 return $0 | 0; //@line 7224
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 8393
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[374] | 0; //@line 6437
 HEAP32[374] = $0 + 0; //@line 6439
 return $0 | 0; //@line 6441
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 3](a1 | 0, a2 | 0); //@line 4622
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b18(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 4686
 return 0; //@line 4686
}
function b17(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 4683
 return 0; //@line 4683
}
function b16(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 4680
 return 0; //@line 4680
}
function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 4677
 return 0; //@line 4677
}
function b14(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(11); //@line 4674
 return 0; //@line 4674
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 9296
 return;
}
function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 4671
 return 0; //@line 4671
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 10688
 return;
}
function __Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 7573
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_104($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 4386
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b85(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 4869
}
function __ZN6Socket5closeEv__async_cb_37($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10132
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _fflush__async_cb_39($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10231
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 3113
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3798
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10741
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7343
 return;
}
function _putc__async_cb_100($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3860
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_55($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 11624
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 10696
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11051
 return;
}
function _fputc__async_cb_5($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7863
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 10002
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 4566
}
function _ns_list_init_($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 8591
 HEAP32[$0 + 4 >> 2] = $0; //@line 8593
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 18758
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 9328
 return;
}
function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 4668
 return 0; //@line 4668
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(9535, HEAP32[$0 + 4 >> 2] | 0); //@line 16162
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0); //@line 4615
}
function b83(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 4866
}
function b82(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 4863
}
function b81(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 4860
}
function _sn_coap_builder($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _sn_coap_builder_2($0, $1, 0) | 0; //@line 1240
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 10153
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 16153
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 17785
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 4358
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 9972
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 557
 return;
}
function b9(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(7); //@line 4665
 return 0; //@line 4665
}
function b8(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 4662
 return 0; //@line 4662
}
function _main__async_cb_96($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 3631
 return;
}
function _main__async_cb_92($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 1; //@line 3480
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 4559
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 182
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 8828
}
function __Z11coap_malloct($0) {
 $0 = $0 | 0;
 return _malloc($0 & 65535) | 0; //@line 12616
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3](); //@line 4608
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 17733
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __GLOBAL__sub_I_main_cpp() {
 __ZN9UDPSocketC2Ev(9716); //@line 12607
 return;
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 4659
 return 0; //@line 4659
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 4656
 return 0; //@line 4656
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 4653
 return 0; //@line 4653
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 4650
 return 0; //@line 4650
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function ___ofl_lock() {
 ___lock(10340); //@line 18382
 return 10348; //@line 18383
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function b79(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(3); //@line 4857
}
function b78(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 4854
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _abort_message__async_cb_99($0) {
 $0 = $0 | 0;
 _abort(); //@line 3827
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 10446
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __Z9coap_freePv($0) {
 $0 = $0 | 0;
 _free($0); //@line 12622
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 4704
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 1383
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 4279
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 4285
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 8897
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 5484
 return;
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_87($0) {
 $0 = $0 | 0;
 return;
}
function b1() {
 nullFunc_i(0); //@line 4647
 return 0; //@line 4647
}
function ___ofl_unlock() {
 ___unlock(10340); //@line 18388
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6SocketD2Ev__async_cb_44($0) {
 $0 = $0 | 0;
 return;
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 17691
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 18019
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(255); //@line 4851
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(254); //@line 4848
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(253); //@line 4845
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(252); //@line 4842
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(251); //@line 4839
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(250); //@line 4836
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(249); //@line 4833
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(248); //@line 4830
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(247); //@line 4827
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(246); //@line 4824
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(245); //@line 4821
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(244); //@line 4818
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(243); //@line 4815
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(242); //@line 4812
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(241); //@line 4809
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(240); //@line 4806
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(239); //@line 4803
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(238); //@line 4800
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(237); //@line 4797
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(236); //@line 4794
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(235); //@line 4791
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(234); //@line 4788
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(233); //@line 4785
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(232); //@line 4782
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(231); //@line 4779
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_vi(230); //@line 4776
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_vi(229); //@line 4773
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_vi(228); //@line 4770
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_vi(227); //@line 4767
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_vi(226); //@line 4764
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_vi(225); //@line 4761
}
function b45(p0) {
 p0 = p0 | 0;
 nullFunc_vi(224); //@line 4758
}
function b44(p0) {
 p0 = p0 | 0;
 nullFunc_vi(223); //@line 4755
}
function b43(p0) {
 p0 = p0 | 0;
 nullFunc_vi(222); //@line 4752
}
function b42(p0) {
 p0 = p0 | 0;
 nullFunc_vi(221); //@line 4749
}
function b41(p0) {
 p0 = p0 | 0;
 nullFunc_vi(220); //@line 4746
}
function b40(p0) {
 p0 = p0 | 0;
 nullFunc_vi(219); //@line 4743
}
function b39(p0) {
 p0 = p0 | 0;
 nullFunc_vi(218); //@line 4740
}
function b38(p0) {
 p0 = p0 | 0;
 nullFunc_vi(217); //@line 4737
}
function b37(p0) {
 p0 = p0 | 0;
 nullFunc_vi(216); //@line 4734
}
function b36(p0) {
 p0 = p0 | 0;
 nullFunc_vi(215); //@line 4731
}
function b35(p0) {
 p0 = p0 | 0;
 nullFunc_vi(214); //@line 4728
}
function b34(p0) {
 p0 = p0 | 0;
 nullFunc_vi(213); //@line 4725
}
function b33(p0) {
 p0 = p0 | 0;
 nullFunc_vi(212); //@line 4722
}
function b32(p0) {
 p0 = p0 | 0;
 nullFunc_vi(211); //@line 4719
}
function b31(p0) {
 p0 = p0 | 0;
 nullFunc_vi(210); //@line 4716
}
function b30(p0) {
 p0 = p0 | 0;
 nullFunc_vi(209); //@line 4713
}
function b29(p0) {
 p0 = p0 | 0;
 nullFunc_vi(208); //@line 4710
}
function b28(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 4707
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___errno_location() {
 return 10336; //@line 17685
}
function _arm_random_seed_get() {
 return 0; //@line 12557
}
function __ZSt9terminatev__async_cb_49($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _pthread_self() {
 return 1088; //@line 17738
}
function _core_util_critical_section_exit() {
 return;
}
function _wait__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b26() {
 nullFunc_v(0); //@line 4701
}
function _arm_random_module_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN9UDPSocket9get_protoEv,___stdio_close,__Z11coap_malloct,b4,b5,b6];
var FUNCTION_TABLE_iii = [b8,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b9];
var FUNCTION_TABLE_iiii = [b11,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv,_do_read];
var FUNCTION_TABLE_iiiii = [b13,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv,b14,b15,b16,b17,b18];
var FUNCTION_TABLE_iiiiii = [b20,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b21];
var FUNCTION_TABLE_iiiiiii = [b23,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b24];
var FUNCTION_TABLE_v = [b26,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b28,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_57,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb
,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_59,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_60,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_58,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_35,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_98,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_102,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_103,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_101,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_50,_sn_coap_parser__async_cb,_sn_coap_parser__async_cb_78,_sn_coap_parser__async_cb_79,_sn_coap_parser__async_cb_80,_sn_coap_parser__async_cb_86,_sn_coap_parser__async_cb_81,_sn_coap_parser__async_cb_85,_sn_coap_parser__async_cb_84,_sn_coap_parser__async_cb_83,_sn_coap_parser__async_cb_82
,_sn_coap_parser_options_parse_multiple_options__async_cb,_sn_coap_protocol_init__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_34,_mbed_vtracef__async_cb_24,_mbed_vtracef__async_cb_25,_mbed_vtracef__async_cb_26,_mbed_vtracef__async_cb_33,_mbed_vtracef__async_cb_27,_mbed_vtracef__async_cb_32,_mbed_vtracef__async_cb_28,_mbed_vtracef__async_cb_29,_mbed_vtracef__async_cb_30,_mbed_vtracef__async_cb_31,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_46,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_1,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_45,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_44,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_51,__ZN6Socket4openEP12NetworkStack__async_cb_52,__ZN6Socket4openEP12NetworkStack__async_cb_53,__ZN6Socket4openEP12NetworkStack__async_cb_54,__ZN4mbed8CallbackIFvvEE5thunkEPv
,__ZN6Socket4openEP12NetworkStack__async_cb_55,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_77,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_36,__ZN6Socket5closeEv__async_cb_37,__ZN9UDPSocketD2Ev__async_cb_88,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_87,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb,__ZN9UDPSocket6sendtoEPKctPKvj__async_cb_42,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_72,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_69,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_64,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_71,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_70,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_68,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_63,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_67,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_62,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_66,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_61,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_65,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb
,_mbed_assert_internal__async_cb,_mbed_die__async_cb_21,_mbed_die__async_cb_20,_mbed_die__async_cb_19,_mbed_die__async_cb_18,_mbed_die__async_cb_17,_mbed_die__async_cb_16,_mbed_die__async_cb_15,_mbed_die__async_cb_14,_mbed_die__async_cb_13,_mbed_die__async_cb_12,_mbed_die__async_cb_11,_mbed_die__async_cb_10,_mbed_die__async_cb_9,_mbed_die__async_cb_8,_mbed_die__async_cb_7,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_3,_mbed_error_vfprintf__async_cb_2,_serial_putc__async_cb_48,_serial_putc__async_cb,_invoke_ticker__async_cb_47,_invoke_ticker__async_cb,_wait__async_cb,_wait_ms__async_cb,__Z10coap_tx_cbPhtP13sn_nsdl_addr_Pv__async_cb,__Z10coap_rx_cbP12sn_coap_hdr_P13sn_nsdl_addr_Pv__async_cb,__Z17recv_coap_messagev__async_cb_22
,__Z17recv_coap_messagev__async_cb_23,__Z17recv_coap_messagev__async_cb,_main__async_cb_92,_main__async_cb_91,_main__async_cb,_main__async_cb_94,__Z9coap_freePv,_main__async_cb_95,_main__async_cb_93,_main__async_cb_89,_main__async_cb_90,_main__async_cb_96,_putc__async_cb_100,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_39,_fflush__async_cb_38,_fflush__async_cb_40,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_6,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_5,_fputc__async_cb,_puts__async_cb
,__Znwj__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_56,_abort_message__async_cb,_abort_message__async_cb_99,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_43,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_41,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_104,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_4,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_76,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_75,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_74,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_73,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_97,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b29
,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59
,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76];
var FUNCTION_TABLE_vii = [b78,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,b79];
var FUNCTION_TABLE_viiii = [b81,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b82,b83];
var FUNCTION_TABLE_viiiii = [b85,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b87,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=coap.js.map